
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d78c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  0801d920  0801d920  0002d920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e8a0  0801e8a0  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e8a0  0801e8a0  0002e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e8a8  0801e8a8  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e8a8  0801e8a8  0002e8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e8ac  0801e8ac  0002e8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801e8b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009be4  20000370  0801ec1c  00030370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009f54  0801ec1c  00039f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045992  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007cab  00000000  00000000  00075d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002880  00000000  00000000  0007d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002548  00000000  00000000  00080260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d7bd  00000000  00000000  000827a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b84b  00000000  00000000  000aff65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d74d6  00000000  00000000  000db7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bca8  00000000  00000000  001b2d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001be9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d904 	.word	0x0801d904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801d904 	.word	0x0801d904

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	printBuffer[printLen + 2] = '\0';
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
 8001066:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <setMotors+0x90>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d037      	beq.n	80010e2 <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <setMotors+0x94>)
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <setMotors+0x94>)
 8001090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001094:	ee17 2a90 	vmov	r2, s15
 8001098:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <setMotors+0x94>)
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010aa:	edd7 7a00 	vldr	s15, [r7]
 80010ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <setMotors+0x94>)
 80010b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010bc:	ee17 2a90 	vmov	r2, s15
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <setMotors+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <setMotors+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2104      	movs	r1, #4
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <setMotors+0x9c>)
 80010d4:	f005 ff34 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2101      	movs	r1, #1
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <setMotors+0x9c>)
 80010de:	f005 ff2f 	bl	8006f40 <HAL_GPIO_WritePin>
	}
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000038c 	.word	0x2000038c
 80010f0:	40000c00 	.word	0x40000c00
 80010f4:	40000800 	.word	0x40000800
 80010f8:	40020000 	.word	0x40020000

080010fc <haltMotors>:

void haltMotors(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <haltMotors+0x24>)
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <haltMotors+0x24>)
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <haltMotors+0x24>)
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <haltMotors+0x24>)
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <haltMotors+0x28>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40000c00 	.word	0x40000c00
 8001124:	40000800 	.word	0x40000800

08001128 <enableMotors>:

void enableMotors(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <enableMotors+0x70>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02b      	beq.n	8001192 <enableMotors+0x6a>
	{
		haltMotors();
 800113a:	f7ff ffdf 	bl	80010fc <haltMotors>
		motorsEnabled = true;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <enableMotors+0x70>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <enableMotors+0x74>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <enableMotors+0x78>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <enableMotors+0x74>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	2101      	movs	r1, #1
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <enableMotors+0x7c>)
 800115a:	f005 fef1 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <enableMotors+0x78>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	2104      	movs	r1, #4
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <enableMotors+0x7c>)
 8001168:	f005 feea 	bl	8006f40 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 800116c:	f014 fc20 	bl	80159b0 <Get_TIM5_Instance>
 8001170:	4603      	mov	r3, r0
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f00a fe15 	bl	800bda4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 800117a:	f014 fc19 	bl	80159b0 <Get_TIM5_Instance>
 800117e:	4603      	mov	r3, r0
 8001180:	210c      	movs	r1, #12
 8001182:	4618      	mov	r0, r3
 8001184:	f00a fe0e 	bl	800bda4 <HAL_TIM_PWM_Start>

		haltMotors();
 8001188:	f7ff ffb8 	bl	80010fc <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <enableMotors+0x80>)
 800118e:	f7ff ff5b 	bl	8001048 <println>
	}
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000038c 	.word	0x2000038c
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000001 	.word	0x20000001
 80011a4:	40020000 	.word	0x40020000
 80011a8:	0801d920 	.word	0x0801d920

080011ac <disableMotors>:

void disableMotors(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <disableMotors+0x3c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d015      	beq.n	80011e4 <disableMotors+0x38>
	{
		haltMotors();
 80011b8:	f7ff ffa0 	bl	80010fc <haltMotors>
		motorsEnabled = false;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <disableMotors+0x3c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_2);
 80011c2:	f014 fbf5 	bl	80159b0 <Get_TIM5_Instance>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a fe28 	bl	800be20 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_4);
 80011d0:	f014 fbee 	bl	80159b0 <Get_TIM5_Instance>
 80011d4:	4603      	mov	r3, r0
 80011d6:	210c      	movs	r1, #12
 80011d8:	4618      	mov	r0, r3
 80011da:	f00a fe21 	bl	800be20 <HAL_TIM_PWM_Stop>
		println("[MOT] Motors DISABLED!!!!!!!1");
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <disableMotors+0x40>)
 80011e0:	f7ff ff32 	bl	8001048 <println>
	}
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000038c 	.word	0x2000038c
 80011ec:	0801d938 	.word	0x0801d938

080011f0 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 80011f6:	f012 f84b 	bl	8013290 <BSP_SD_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SD_init+0x14>
 8001200:	2303      	movs	r3, #3
 8001202:	e027      	b.n	8001254 <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <SD_init+0x6c>)
 8001206:	f012 f835 	bl	8013274 <FATFS_UnLinkDriver>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SD_init+0x24>
 8001210:	2303      	movs	r3, #3
 8001212:	e01f      	b.n	8001254 <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 8001214:	4911      	ldr	r1, [pc, #68]	; (800125c <SD_init+0x6c>)
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <SD_init+0x70>)
 8001218:	f011 ffe4 	bl	80131e4 <FATFS_LinkDriver>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SD_init+0x36>
 8001222:	2303      	movs	r3, #3
 8001224:	e016      	b.n	8001254 <SD_init+0x64>

	f_mount(0, SDPath, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <SD_init+0x6c>)
 800122a:	2000      	movs	r0, #0
 800122c:	f011 fa32 	bl	8012694 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	490a      	ldr	r1, [pc, #40]	; (800125c <SD_init+0x6c>)
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <SD_init+0x74>)
 8001236:	f011 fa2d 	bl	8012694 <f_mount>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	4905      	ldr	r1, [pc, #20]	; (800125c <SD_init+0x6c>)
 8001248:	2000      	movs	r0, #0
 800124a:	f011 fa23 	bl	8012694 <f_mount>
		return mountStatus;
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	e000      	b.n	8001254 <SD_init+0x64>
	}

	return FR_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20006334 	.word	0x20006334
 8001260:	0801e340 	.word	0x0801e340
 8001264:	20001828 	.word	0x20001828

08001268 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 8001270:	2208      	movs	r2, #8
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <SD_newFile+0x44>)
 8001276:	f011 fa53 	bl	8012720 <f_open>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <SD_newFile+0x48>)
 8001280:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <SD_newFile+0x48>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	4909      	ldr	r1, [pc, #36]	; (80012b4 <SD_newFile+0x4c>)
 800128e:	2000      	movs	r0, #0
 8001290:	f011 fa00 	bl	8012694 <f_mount>
		return stato;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SD_newFile+0x48>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	e004      	b.n	80012a4 <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <SD_newFile+0x44>)
 800129c:	f011 fe1e 	bl	8012edc <f_close>
	return stato;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <SD_newFile+0x48>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200007f8 	.word	0x200007f8
 80012b0:	200007f4 	.word	0x200007f4
 80012b4:	20006334 	.word	0x20006334

080012b8 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 80012c2:	2232      	movs	r2, #50	; 0x32
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <SD_writeToFile+0x64>)
 80012c8:	f011 fa2a 	bl	8012720 <f_open>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <SD_writeToFile+0x68>)
 80012d2:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <SD_writeToFile+0x68>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <SD_writeToFile+0x2a>
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <SD_writeToFile+0x68>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	e017      	b.n	8001312 <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7fe ff7e 	bl	80001e4 <strlen>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <SD_writeToFile+0x6c>)
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <SD_writeToFile+0x64>)
 80012f0:	f011 fbe2 	bl	8012ab8 <f_write>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <SD_writeToFile+0x68>)
 80012fa:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <SD_writeToFile+0x68>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <SD_writeToFile+0x52>
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SD_writeToFile+0x68>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	e003      	b.n	8001312 <SD_writeToFile+0x5a>

	return f_close(&fileo);
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <SD_writeToFile+0x64>)
 800130c:	f011 fde6 	bl	8012edc <f_close>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200007f8 	.word	0x200007f8
 8001320:	200007f4 	.word	0x200007f4
 8001324:	2000285c 	.word	0x2000285c

08001328 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f011 fdfd 	bl	8012f30 <f_mkdir>
 8001336:	4603      	mov	r3, r0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
 8001344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <millis+0x1c>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	10624dd3 	.word	0x10624dd3

08001360 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 800136c:	1cf9      	adds	r1, r7, #3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	2201      	movs	r2, #1
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f00a f900 	bl	800b57a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800137a:	bf00      	nop
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f00a fbd2 	bl	800bb26 <HAL_SPI_GetState>
 8001382:	4603      	mov	r3, r0
 8001384:	2b01      	cmp	r3, #1
 8001386:	d1f9      	bne.n	800137c <SX1278_write+0x1c>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
 800139c:	4613      	mov	r3, r2
 800139e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a18      	ldr	r0, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8a5b      	ldrh	r3, [r3, #18]
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	f005 fdc8 	bl	8006f40 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f7ff ffce 	bl	8001360 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	78ba      	ldrb	r2, [r7, #2]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffc7 	bl	8001360 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a18      	ldr	r0, [r3, #32]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8a5b      	ldrh	r3, [r3, #18]
 80013da:	2201      	movs	r2, #1
 80013dc:	4619      	mov	r1, r3
 80013de:	f005 fdaf 	bl	8006f40 <HAL_GPIO_WritePin>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	72fb      	strb	r3, [r7, #11]
 80013fa:	4613      	mov	r3, r2
 80013fc:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80013fe:	7abb      	ldrb	r3, [r7, #10]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d92d      	bls.n	8001460 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a18      	ldr	r0, [r3, #32]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8a5b      	ldrh	r3, [r3, #18]
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	f005 fd96 	bl	8006f40 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001418:	7afb      	ldrb	r3, [r7, #11]
 800141a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff ff9c 	bl	8001360 <SX1278_write>
	for (i = 0; i < len; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	e00b      	b.n	8001446 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff ff90 	bl	8001360 <SX1278_write>
	for (i = 0; i < len; i++)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	3301      	adds	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
 8001446:	7dfa      	ldrb	r2, [r7, #23]
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3ef      	bcc.n	800142e <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a18      	ldr	r0, [r3, #32]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8a5b      	ldrh	r3, [r3, #18]
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	f005 fd71 	bl	8006f40 <HAL_GPIO_WritePin>
 800145e:	e000      	b.n	8001462 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001460:	bf00      	nop
}
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001478:	f107 020e 	add.w	r2, r7, #14
 800147c:	f107 010f 	add.w	r1, r7, #15
 8001480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f00a f9aa 	bl	800b7e2 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800148e:	bf00      	nop
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f00a fb48 	bl	800bb26 <HAL_SPI_GetState>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d1f9      	bne.n	8001490 <SX1278_read+0x28>

	return rxByte;
 800149c:	7bbb      	ldrb	r3, [r7, #14]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a18      	ldr	r0, [r3, #32]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	8a5b      	ldrh	r3, [r3, #18]
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f005 fd3f 	bl	8006f40 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff48 	bl	8001360 <SX1278_write>
	recv = SX1278_read(inst->spi);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ffc7 	bl	8001468 <SX1278_read>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a18      	ldr	r0, [r3, #32]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8a5b      	ldrh	r3, [r3, #18]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	f005 fd29 	bl	8006f40 <HAL_GPIO_WritePin>

	return recv;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	461a      	mov	r2, r3
 8001504:	460b      	mov	r3, r1
 8001506:	72fb      	strb	r3, [r7, #11]
 8001508:	4613      	mov	r3, r2
 800150a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d92b      	bls.n	800156a <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a18      	ldr	r0, [r3, #32]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8a5b      	ldrh	r3, [r3, #18]
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	f005 fd0f 	bl	8006f40 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	7afa      	ldrb	r2, [r7, #11]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff18 	bl	8001360 <SX1278_write>
	for (i = 0; i < len; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]
 8001534:	e00c      	b.n	8001550 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	18d4      	adds	r4, r2, r3
 8001540:	4608      	mov	r0, r1
 8001542:	f7ff ff91 	bl	8001468 <SX1278_read>
 8001546:	4603      	mov	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	3301      	adds	r3, #1
 800154e:	75fb      	strb	r3, [r7, #23]
 8001550:	7dfa      	ldrb	r2, [r7, #23]
 8001552:	7abb      	ldrb	r3, [r7, #10]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3ee      	bcc.n	8001536 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a18      	ldr	r0, [r3, #32]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8a5b      	ldrh	r3, [r3, #18]
 8001560:	2201      	movs	r2, #1
 8001562:	4619      	mov	r1, r3
 8001564:	f005 fcec 	bl	8006f40 <HAL_GPIO_WritePin>
 8001568:	e000      	b.n	800156c <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800156a:	bf00      	nop
}
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
	...

08001574 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	inst->active = false;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	SX1278_reset(inst);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fab9 	bl	8001afc <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 800158a:	2142      	movs	r1, #66	; 0x42
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff8a 	bl	80014a6 <SX1278_read_address>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b12      	cmp	r3, #18
 800159a:	d001      	beq.n	80015a0 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e0d7      	b.n	8001750 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fa8b 	bl	8001abc <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 80015a6:	2288      	movs	r2, #136	; 0x88
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fef0 	bl	8001390 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 0400 	mov.w	r4, #0
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <SX1278_init+0x1e4>)
 80015ba:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 80015be:	4b66      	ldr	r3, [pc, #408]	; (8001758 <SX1278_init+0x1e4>)
 80015c0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	0394      	lsls	r4, r2, #14
 80015ce:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 80015d2:	038b      	lsls	r3, r1, #14
 80015d4:	4a60      	ldr	r2, [pc, #384]	; (8001758 <SX1278_init+0x1e4>)
 80015d6:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <SX1278_init+0x1e4>)
 80015dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e0:	4a5e      	ldr	r2, [pc, #376]	; (800175c <SX1278_init+0x1e8>)
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	f7ff fbaf 	bl	8000d48 <__aeabi_uldivmod>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a5a      	ldr	r2, [pc, #360]	; (8001758 <SX1278_init+0x1e4>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <SX1278_init+0x1ec>)
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <SX1278_init+0x1e4>)
 80015f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fc:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <SX1278_init+0x1ec>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	461a      	mov	r2, r3
 8001606:	2106      	movs	r1, #6
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fec1 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <SX1278_init+0x1ec>)
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	461a      	mov	r2, r3
 8001614:	2107      	movs	r1, #7
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff feba 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <SX1278_init+0x1ec>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	2108      	movs	r1, #8
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff feb3 	bl	8001390 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	2109      	movs	r1, #9
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff feac 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 8001638:	222b      	movs	r2, #43	; 0x2b
 800163a:	210b      	movs	r1, #11
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fea7 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 8001642:	2223      	movs	r2, #35	; 0x23
 8001644:	210c      	movs	r1, #12
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fea2 	bl	8001390 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 800164c:	2287      	movs	r2, #135	; 0x87
 800164e:	214d      	movs	r1, #77	; 0x4d
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fe9d 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 8001656:	2200      	movs	r2, #0
 8001658:	2124      	movs	r1, #36	; 0x24
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fe98 	bl	8001390 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	795b      	ldrb	r3, [r3, #5]
 8001664:	2b06      	cmp	r3, #6
 8001666:	d139      	bne.n	80016dc <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	79db      	ldrb	r3, [r3, #7]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	b2da      	uxtb	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	799b      	ldrb	r3, [r3, #6]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	211d      	movs	r1, #29
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fe83 	bl	8001390 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	b2da      	uxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4413      	add	r3, r2
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	211e      	movs	r1, #30
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fe74 	bl	8001390 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 80016a8:	2131      	movs	r1, #49	; 0x31
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fefb 	bl	80014a6 <SX1278_read_address>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	f023 0307 	bic.w	r3, r3, #7
 80016ba:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	f043 0305 	orr.w	r3, r3, #5
 80016c2:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	461a      	mov	r2, r3
 80016c8:	2131      	movs	r1, #49	; 0x31
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fe60 	bl	8001390 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 80016d0:	220c      	movs	r2, #12
 80016d2:	2137      	movs	r1, #55	; 0x37
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fe5b 	bl	8001390 <SX1278_command>
 80016da:	e01d      	b.n	8001718 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	79db      	ldrb	r3, [r3, #7]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	799b      	ldrb	r3, [r3, #6]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	211d      	movs	r1, #29
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe4b 	bl	8001390 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	795b      	ldrb	r3, [r3, #5]
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7a1b      	ldrb	r3, [r3, #8]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	211e      	movs	r1, #30
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fe3c 	bl	8001390 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	211f      	movs	r1, #31
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fe37 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 8001722:	2200      	movs	r2, #0
 8001724:	2120      	movs	r1, #32
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe32 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 800172c:	220c      	movs	r2, #12
 800172e:	2121      	movs	r1, #33	; 0x21
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe2d 	bl	8001390 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 8001736:	2201      	movs	r2, #1
 8001738:	2141      	movs	r1, #65	; 0x41
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe28 	bl	8001390 <SX1278_command>

	SX1278_standby(inst);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f9cb 	bl	8001adc <SX1278_standby>

	inst->active = true;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	return true;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	20000390 	.word	0x20000390
 800175c:	000f4240 	.word	0x000f4240
 8001760:	20000398 	.word	0x20000398

08001764 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d12b      	bne.n	80017d2 <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f932 	bl	80019ec <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	461a      	mov	r2, r3
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f86c 	bl	800186c <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f898 	bl	80018ca <SX1278_tx_push>

		if (inst->useDio0IRQ)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e011      	b.n	80017d4 <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80017b0:	bf00      	nop
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8a1b      	ldrh	r3, [r3, #16]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f005 fba7 	bl	8006f10 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f4      	beq.n	80017b2 <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f88b 	bl	80018e4 <SX1278_tx_finish>
 80017ce:	4603      	mov	r3, r0
 80017d0:	e000      	b.n	80017d4 <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 80017d2:	2300      	movs	r3, #0
	}
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d13a      	bne.n	8001862 <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f929 	bl	8001a44 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			inst->rxStart = millis();
 8001804:	f7ff fd9c 	bl	8001340 <millis>
 8001808:	4602      	mov	r2, r0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 800180e:	2301      	movs	r3, #1
 8001810:	e028      	b.n	8001864 <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 8001812:	f7ff fd95 	bl	8001340 <millis>
 8001816:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001818:	e011      	b.n	800183e <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 800181a:	f7ff fd91 	bl	8001340 <millis>
 800181e:	4602      	mov	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	8952      	ldrh	r2, [r2, #10]
 8001828:	4293      	cmp	r3, r2
 800182a:	d308      	bcc.n	800183e <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f87e 	bl	800192e <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 800183a:	2300      	movs	r3, #0
 800183c:	e012      	b.n	8001864 <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8a1b      	ldrh	r3, [r3, #16]
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f005 fb61 	bl	8006f10 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0e2      	beq.n	800181a <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f86a 	bl	800192e <SX1278_rx_get_packet>
			return inst->newPacket;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001860:	e000      	b.n	8001864 <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 8001862:	2300      	movs	r3, #0
	}
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	461a      	mov	r2, r3
 800187e:	2122      	movs	r1, #34	; 0x22
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff fd85 	bl	8001390 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	2100      	movs	r1, #0
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff fdac 	bl	80013ea <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
 8001896:	e00c      	b.n	80018b2 <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	441a      	add	r2, r3
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for (l = 0; l < length; l++)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	3301      	adds	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
 80018b2:	7dfa      	ldrb	r2, [r7, #23]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3ee      	bcc.n	8001898 <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	79fa      	ldrb	r2, [r7, #7]
 80018be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 80018d2:	228b      	movs	r2, #139	; 0x8b
 80018d4:	2101      	movs	r1, #1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fd5a 	bl	8001390 <SX1278_command>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80018ec:	2112      	movs	r1, #18
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fdd9 	bl	80014a6 <SX1278_read_address>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	bfcc      	ite	gt
 800190c:	2301      	movgt	r3, #1
 800190e:	2300      	movle	r3, #0
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f9d2 	bl	8001cc2 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8dc 	bl	8001adc <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f980 	bl	8001c3c <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3344      	adds	r3, #68	; 0x44
 8001940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f015 fb73 	bl	8017032 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 800194c:	2110      	movs	r1, #16
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fda9 	bl	80014a6 <SX1278_read_address>
 8001954:	4603      	mov	r3, r0
 8001956:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	461a      	mov	r2, r3
 800195c:	210d      	movs	r1, #13
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd16 	bl	8001390 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	2b06      	cmp	r3, #6
 800196a:	d104      	bne.n	8001976 <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e005      	b.n	8001982 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001976:	2113      	movs	r1, #19
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fd94 	bl	80014a6 <SX1278_read_address>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fdb3 	bl	80014f8 <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <SX1278_rx_get_packet+0x82>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80019a2:	f083 0301 	eor.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SX1278_rx_get_packet+0x82>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <SX1278_rx_get_packet+0x84>
 80019b0:	2300      	movs	r3, #0
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f98c 	bl	8001cdc <SX1278_getRSSI>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SX1278_clearLoRaIrq(inst);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f975 	bl	8001cc2 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f87f 	bl	8001adc <SX1278_standby>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f964 	bl	8001cc2 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fcc6 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a04:	22f7      	movs	r2, #247	; 0xf7
 8001a06:	2111      	movs	r1, #17
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fcc1 	bl	8001390 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a0e:	210e      	movs	r1, #14
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fd48 	bl	80014a6 <SX1278_read_address>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	210d      	movs	r1, #13
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fcb5 	bl	8001390 <SX1278_command>

	inst->txLen = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->txDone = false;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	731a      	strb	r2, [r3, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f845 	bl	8001adc <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f935 	bl	8001cc2 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fc97 	bl	8001390 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001a62:	221f      	movs	r2, #31
 8001a64:	2111      	movs	r1, #17
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fc92 	bl	8001390 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fd19 	bl	80014a6 <SX1278_read_address>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	210d      	movs	r1, #13
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fc86 	bl	8001390 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001a84:	228d      	movs	r2, #141	; 0x8d
 8001a86:	2101      	movs	r1, #1
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fc81 	bl	8001390 <SX1278_command>

	inst->crcError = false;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->newPacket = false;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fc61 	bl	8001390 <SX1278_command>
	inst->mode = SLEEP;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	731a      	strb	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001ae4:	2209      	movs	r2, #9
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fc51 	bl	8001390 <SX1278_command>
	inst->mode = STANDBY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	731a      	strb	r2, [r3, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	inst->txLen = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->rxLen = 0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->mode = SLEEP;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a18      	ldr	r0, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8a5b      	ldrh	r3, [r3, #18]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f005 f9f0 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6998      	ldr	r0, [r3, #24]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	89db      	ldrh	r3, [r3, #14]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f005 f9e8 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f004 fb67 	bl	8006244 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6998      	ldr	r0, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	89db      	ldrh	r3, [r3, #14]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4619      	mov	r1, r3
 8001b82:	f005 f9dd 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f004 fb5c 	bl	8006244 <HAL_Delay>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01e      	beq.n	8001be4 <SX1278_dio0_IRQ+0x50>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d104      	bne.n	8001bc2 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fe93 	bl	80018e4 <SX1278_tx_finish>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	e011      	b.n	8001be6 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7b1b      	ldrb	r3, [r3, #12]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d104      	bne.n	8001bd4 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff feaf 	bl	800192e <SX1278_rx_get_packet>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	e008      	b.n	8001be6 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f874 	bl	8001cc2 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff7e 	bl	8001adc <SX1278_standby>
			return false;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001be4:	2300      	movs	r3, #0
	}
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001bf6:	f7ff fba3 	bl	8001340 <millis>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	8952      	ldrh	r2, [r2, #10]
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d313      	bcc.n	8001c32 <SX1278_intTimeout+0x44>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7b1b      	ldrb	r3, [r3, #12]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d10f      	bne.n	8001c32 <SX1278_intTimeout+0x44>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00a      	beq.n	8001c32 <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001c24:	f7ff fb8c 	bl	8001340 <millis>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c

		return true;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <SX1278_intTimeout+0x46>
	}
	return false;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001c44:	2112      	movs	r1, #18
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fc2d 	bl	80014a6 <SX1278_read_address>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bfcc      	ite	gt
 8001c64:	2301      	movgt	r3, #1
 8001c66:	2300      	movle	r3, #0
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc07      	bgt.n	8001c8e <SX1278_update_IRQ_status+0x52>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SX1278_update_IRQ_status+0x56>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <SX1278_update_IRQ_status+0x58>
 8001c92:	2300      	movs	r3, #0
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bfcc      	ite	gt
 8001cae:	2301      	movgt	r3, #1
 8001cb0:	2300      	movle	r3, #0
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	2112      	movs	r1, #18
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fb5e 	bl	8001390 <SX1278_command>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001ce4:	211a      	movs	r1, #26
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fbdd 	bl	80014a6 <SX1278_read_address>
 8001cec:	4603      	mov	r3, r0
 8001cee:	3ba4      	subs	r3, #164	; 0xa4
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <read_data>:
#include "bmp280.h"
#include "run.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	72fb      	strb	r3, [r7, #11]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	b29c      	uxth	r4, r3
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	8af9      	ldrh	r1, [r7, #22]
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	9202      	str	r2, [sp, #8]
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4622      	mov	r2, r4
 8001d32:	f005 fb5b 	bl	80073ec <HAL_I2C_Mem_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <read_data+0x48>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <read_data+0x4a>
	else return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}

08001d4a <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b088      	sub	sp, #32
 8001d4e:	af04      	add	r7, sp, #16
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
 8001d56:	4613      	mov	r3, r2
 8001d58:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	889b      	ldrh	r3, [r3, #4]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	89f9      	ldrh	r1, [r7, #14]
 8001d6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	2301      	movs	r3, #1
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	1cbb      	adds	r3, r7, #2
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f005 fa3c 	bl	80071f8 <HAL_I2C_Mem_Write>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <write_register8+0x40>
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <write_register8+0x42>
	else return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	889b      	ldrh	r3, [r3, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	8af9      	ldrh	r1, [r7, #22]
 8001db4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2302      	movs	r3, #2
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f005 fb11 	bl	80073ec <HAL_I2C_Mem_Read>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001dd0:	7d7b      	ldrb	r3, [r7, #21]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	7d3b      	ldrb	r3, [r7, #20]
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	801a      	strh	r2, [r3, #0]
		return true;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <read_register16+0x56>
	}
	else return false;
 8001de8:	2300      	movs	r3, #0

}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2188      	movs	r1, #136	; 0x88
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffc6 	bl	8001d94 <read_register16>
 8001e08:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06f      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	330e      	adds	r3, #14
 8001e12:	461a      	mov	r2, r3
 8001e14:	218a      	movs	r1, #138	; 0x8a
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffbc 	bl	8001d94 <read_register16>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d065      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3310      	adds	r3, #16
 8001e26:	461a      	mov	r2, r3
 8001e28:	218c      	movs	r1, #140	; 0x8c
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb2 	bl	8001d94 <read_register16>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d05b      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3312      	adds	r3, #18
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	218e      	movs	r1, #142	; 0x8e
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa8 	bl	8001d94 <read_register16>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d051      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2190      	movs	r1, #144	; 0x90
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff9e 	bl	8001d94 <read_register16>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d047      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3316      	adds	r3, #22
 8001e62:	461a      	mov	r2, r3
 8001e64:	2192      	movs	r1, #146	; 0x92
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff94 	bl	8001d94 <read_register16>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03d      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3318      	adds	r3, #24
 8001e76:	461a      	mov	r2, r3
 8001e78:	2194      	movs	r1, #148	; 0x94
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff8a 	bl	8001d94 <read_register16>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d033      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	331a      	adds	r3, #26
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2196      	movs	r1, #150	; 0x96
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff80 	bl	8001d94 <read_register16>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d029      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	331c      	adds	r3, #28
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2198      	movs	r1, #152	; 0x98
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff76 	bl	8001d94 <read_register16>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01f      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	331e      	adds	r3, #30
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	219a      	movs	r1, #154	; 0x9a
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff6c 	bl	8001d94 <read_register16>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3320      	adds	r3, #32
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	219c      	movs	r1, #156	; 0x9c
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff62 	bl	8001d94 <read_register16>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3322      	adds	r3, #34	; 0x22
 8001eda:	461a      	mov	r2, r3
 8001edc:	219e      	movs	r1, #158	; 0x9e
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff58 	bl	8001d94 <read_register16>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <read_calibration_data+0xfc>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <read_calibration_data+0xfe>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	889b      	ldrh	r3, [r3, #4]
 8001f14:	2b76      	cmp	r3, #118	; 0x76
 8001f16:	d005      	beq.n	8001f24 <bmp280_init+0x26>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	2b77      	cmp	r3, #119	; 0x77
 8001f1e:	d001      	beq.n	8001f24 <bmp280_init+0x26>
 8001f20:	2300      	movs	r3, #0
 8001f22:	e073      	b.n	800200c <bmp280_init+0x10e>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	1d9a      	adds	r2, r3, #6
 8001f28:	2301      	movs	r3, #1
 8001f2a:	21d0      	movs	r1, #208	; 0xd0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fee3 	bl	8001cf8 <read_data>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <bmp280_init+0x3e>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e067      	b.n	800200c <bmp280_init+0x10e>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	799b      	ldrb	r3, [r3, #6]
 8001f40:	2b58      	cmp	r3, #88	; 0x58
 8001f42:	d001      	beq.n	8001f48 <bmp280_init+0x4a>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e061      	b.n	800200c <bmp280_init+0x10e>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001f48:	22b6      	movs	r2, #182	; 0xb6
 8001f4a:	21e0      	movs	r1, #224	; 0xe0
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fefc 	bl	8001d4a <write_register8>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <bmp280_init+0x5e>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e057      	b.n	800200c <bmp280_init+0x10e>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001f5c:	f107 020d 	add.w	r2, r7, #13
 8001f60:	2301      	movs	r3, #1
 8001f62:	21f3      	movs	r1, #243	; 0xf3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fec7 	bl	8001cf8 <read_data>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f5      	bne.n	8001f5c <bmp280_init+0x5e>
 8001f70:	7b7b      	ldrb	r3, [r7, #13]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <bmp280_init+0x5e>
	}

	if (!read_calibration_data(inst)) return false;
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff39 	bl	8001df2 <read_calibration_data>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d100      	bne.n	8001f8e <bmp280_init+0x90>
 8001f8c:	e001      	b.n	8001f92 <bmp280_init+0x94>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e03c      	b.n	800200c <bmp280_init+0x10e>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	015b      	lsls	r3, r3, #5
 8001f98:	b25a      	sxtb	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	461a      	mov	r2, r3
 8001fac:	21f5      	movs	r1, #245	; 0xf5
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fecb 	bl	8001d4a <write_register8>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <bmp280_init+0xc0>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e026      	b.n	800200c <bmp280_init+0x10e>

	if (params->mode == BMP280_MODE_FORCED) {
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <bmp280_init+0xce>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	b25a      	sxtb	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b25a      	sxtb	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	21f4      	movs	r1, #244	; 0xf4
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fea9 	bl	8001d4a <write_register8>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <bmp280_init+0x104>
 8001ffe:	2300      	movs	r3, #0
 8002000:	e004      	b.n	800200c <bmp280_init+0x10e>

	inst->active = true;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return true;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	10da      	asrs	r2, r3, #3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	899b      	ldrh	r3, [r3, #12]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8002036:	12db      	asrs	r3, r3, #11
 8002038:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	111b      	asrs	r3, r3, #4
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	8992      	ldrh	r2, [r2, #12]
 8002042:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	1112      	asrs	r2, r2, #4
 8002048:	68f9      	ldr	r1, [r7, #12]
 800204a:	8989      	ldrh	r1, [r1, #12]
 800204c:	1a52      	subs	r2, r2, r1
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 800205e:	139b      	asrs	r3, r3, #14
 8002060:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	441a      	add	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3380      	adds	r3, #128	; 0x80
 8002078:	121b      	asrs	r3, r3, #8
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8002086:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4619      	mov	r1, r3
 8002098:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800209c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80020a0:	f142 34ff 	adc.w	r4, r2, #4294967295
 80020a4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	fb02 f203 	mul.w	r2, r2, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	441a      	add	r2, r3
 80020ba:	6a39      	ldr	r1, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fba1 3403 	umull	r3, r4, r1, r3
 80020c2:	4422      	add	r2, r4
 80020c4:	4614      	mov	r4, r2
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80020cc:	b211      	sxth	r1, r2
 80020ce:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020d2:	fb01 f504 	mul.w	r5, r1, r4
 80020d6:	fb03 f002 	mul.w	r0, r3, r2
 80020da:	4428      	add	r0, r5
 80020dc:	fba3 3401 	umull	r3, r4, r3, r1
 80020e0:	1902      	adds	r2, r0, r4
 80020e2:	4614      	mov	r4, r2
 80020e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80020e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	fb04 f102 	mul.w	r1, r4, r2
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	fb03 f202 	mul.w	r2, r3, r2
 8002104:	1888      	adds	r0, r1, r2
 8002106:	6a3a      	ldr	r2, [r7, #32]
 8002108:	fba2 1203 	umull	r1, r2, r2, r3
 800210c:	1883      	adds	r3, r0, r2
 800210e:	461a      	mov	r2, r3
 8002110:	f04f 0500 	mov.w	r5, #0
 8002114:	f04f 0600 	mov.w	r6, #0
 8002118:	0456      	lsls	r6, r2, #17
 800211a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800211e:	044d      	lsls	r5, r1, #17
 8002120:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002124:	186b      	adds	r3, r5, r1
 8002126:	eb46 0402 	adc.w	r4, r6, r2
 800212a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002134:	b219      	sxth	r1, r3
 8002136:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800213a:	f04f 0500 	mov.w	r5, #0
 800213e:	f04f 0600 	mov.w	r6, #0
 8002142:	00ce      	lsls	r6, r1, #3
 8002144:	2500      	movs	r5, #0
 8002146:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800214a:	186b      	adds	r3, r5, r1
 800214c:	eb46 0402 	adc.w	r4, r6, r2
 8002150:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	6a3a      	ldr	r2, [r7, #32]
 8002158:	fb02 f203 	mul.w	r2, r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	6a39      	ldr	r1, [r7, #32]
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	441a      	add	r2, r3
 8002166:	6a39      	ldr	r1, [r7, #32]
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	fba1 3403 	umull	r3, r4, r1, r3
 800216e:	4422      	add	r2, r4
 8002170:	4614      	mov	r4, r2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8002178:	b211      	sxth	r1, r2
 800217a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800217e:	fb01 f504 	mul.w	r5, r1, r4
 8002182:	fb03 f002 	mul.w	r0, r3, r2
 8002186:	4428      	add	r0, r5
 8002188:	fba3 3401 	umull	r3, r4, r3, r1
 800218c:	1902      	adds	r2, r0, r4
 800218e:	4614      	mov	r4, r2
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	0a19      	lsrs	r1, r3, #8
 800219a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800219e:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80021ac:	6a38      	ldr	r0, [r7, #32]
 80021ae:	fb04 f500 	mul.w	r5, r4, r0
 80021b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021b4:	fb03 f000 	mul.w	r0, r3, r0
 80021b8:	4428      	add	r0, r5
 80021ba:	6a3d      	ldr	r5, [r7, #32]
 80021bc:	fba5 5603 	umull	r5, r6, r5, r3
 80021c0:	1983      	adds	r3, r0, r6
 80021c2:	461e      	mov	r6, r3
 80021c4:	f04f 0b00 	mov.w	fp, #0
 80021c8:	f04f 0c00 	mov.w	ip, #0
 80021cc:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80021d0:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80021d4:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80021d8:	eb1b 0301 	adds.w	r3, fp, r1
 80021dc:	eb4c 0402 	adc.w	r4, ip, r2
 80021e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 80021e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021e8:	1c19      	adds	r1, r3, #0
 80021ea:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8a5b      	ldrh	r3, [r3, #18]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f04f 0400 	mov.w	r4, #0
 80021f8:	fb03 f502 	mul.w	r5, r3, r2
 80021fc:	fb01 f004 	mul.w	r0, r1, r4
 8002200:	4428      	add	r0, r5
 8002202:	fba1 3403 	umull	r3, r4, r1, r3
 8002206:	1902      	adds	r2, r0, r4
 8002208:	4614      	mov	r4, r2
 800220a:	f04f 0100 	mov.w	r1, #0
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	1061      	asrs	r1, r4, #1
 8002214:	17e2      	asrs	r2, r4, #31
 8002216:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800221a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800221e:	4323      	orrs	r3, r4
 8002220:	d101      	bne.n	8002226 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8002222:	2300      	movs	r3, #0
 8002224:	e0d4      	b.n	80023d0 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800222c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002230:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	ea4f 0963 	mov.w	r9, r3, asr #1
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002240:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002244:	4645      	mov	r5, r8
 8002246:	464e      	mov	r6, r9
 8002248:	1aed      	subs	r5, r5, r3
 800224a:	eb66 0604 	sbc.w	r6, r6, r4
 800224e:	46a8      	mov	r8, r5
 8002250:	46b1      	mov	r9, r6
 8002252:	eb18 0308 	adds.w	r3, r8, r8
 8002256:	eb49 0409 	adc.w	r4, r9, r9
 800225a:	4698      	mov	r8, r3
 800225c:	46a1      	mov	r9, r4
 800225e:	eb18 0805 	adds.w	r8, r8, r5
 8002262:	eb49 0906 	adc.w	r9, r9, r6
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002272:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002276:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800227a:	eb18 0801 	adds.w	r8, r8, r1
 800227e:	eb49 0902 	adc.w	r9, r9, r2
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800228e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002292:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002296:	4688      	mov	r8, r1
 8002298:	4691      	mov	r9, r2
 800229a:	eb18 0805 	adds.w	r8, r8, r5
 800229e:	eb49 0906 	adc.w	r9, r9, r6
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80022ae:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80022b2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80022b6:	4688      	mov	r8, r1
 80022b8:	4691      	mov	r9, r2
 80022ba:	eb18 0005 	adds.w	r0, r8, r5
 80022be:	eb49 0106 	adc.w	r1, r9, r6
 80022c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022c6:	f7fe fcef 	bl	8000ca8 <__aeabi_ldivmod>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80022d8:	b219      	sxth	r1, r3
 80022da:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80022de:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	f04f 0400 	mov.w	r4, #0
 80022ea:	0b6b      	lsrs	r3, r5, #13
 80022ec:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022f0:	1374      	asrs	r4, r6, #13
 80022f2:	fb03 f502 	mul.w	r5, r3, r2
 80022f6:	fb01 f004 	mul.w	r0, r1, r4
 80022fa:	4428      	add	r0, r5
 80022fc:	fba1 1203 	umull	r1, r2, r1, r3
 8002300:	1883      	adds	r3, r0, r2
 8002302:	461a      	mov	r2, r3
 8002304:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	f04f 0400 	mov.w	r4, #0
 8002310:	0b6b      	lsrs	r3, r5, #13
 8002312:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002316:	1374      	asrs	r4, r6, #13
 8002318:	fb03 f502 	mul.w	r5, r3, r2
 800231c:	fb01 f004 	mul.w	r0, r1, r4
 8002320:	4428      	add	r0, r5
 8002322:	fba1 1203 	umull	r1, r2, r1, r3
 8002326:	1883      	adds	r3, r0, r2
 8002328:	461a      	mov	r2, r3
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	0e4b      	lsrs	r3, r1, #25
 8002334:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002338:	1654      	asrs	r4, r2, #25
 800233a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002344:	b21b      	sxth	r3, r3
 8002346:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	fb04 f102 	mul.w	r1, r4, r2
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	1888      	adds	r0, r1, r2
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	fba2 1203 	umull	r1, r2, r2, r3
 800235e:	1883      	adds	r3, r0, r2
 8002360:	461a      	mov	r2, r3
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	0ccb      	lsrs	r3, r1, #19
 800236c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002370:	14d4      	asrs	r4, r2, #19
 8002372:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8002376:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800237a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800237e:	eb11 0803 	adds.w	r8, r1, r3
 8002382:	eb42 0904 	adc.w	r9, r2, r4
 8002386:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800238a:	eb13 0508 	adds.w	r5, r3, r8
 800238e:	eb44 0609 	adc.w	r6, r4, r9
 8002392:	f04f 0100 	mov.w	r1, #0
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	0a29      	lsrs	r1, r5, #8
 800239c:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80023a0:	1232      	asrs	r2, r6, #8
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80023a8:	b21d      	sxth	r5, r3
 80023aa:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80023ae:	f04f 0800 	mov.w	r8, #0
 80023b2:	f04f 0900 	mov.w	r9, #0
 80023b6:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80023ba:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80023be:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80023c2:	eb18 0301 	adds.w	r3, r8, r1
 80023c6:	eb49 0402 	adc.w	r4, r9, r2
 80023ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080023da <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08a      	sub	sp, #40	; 0x28
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 80023e6:	2306      	movs	r3, #6
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f107 0214 	add.w	r2, r7, #20
 80023f2:	21f7      	movs	r1, #247	; 0xf7
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff fc7f 	bl	8001cf8 <read_data>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <bmp280_read_fixed+0x2a>
 8002400:	2300      	movs	r3, #0
 8002402:	e027      	b.n	8002454 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002404:	7d3b      	ldrb	r3, [r7, #20]
 8002406:	031a      	lsls	r2, r3, #12
 8002408:	7d7b      	ldrb	r3, [r7, #21]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	4313      	orrs	r3, r2
 800240e:	7dba      	ldrb	r2, [r7, #22]
 8002410:	0912      	lsrs	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4313      	orrs	r3, r2
 8002416:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	031a      	lsls	r2, r3, #12
 800241c:	7e3b      	ldrb	r3, [r7, #24]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4313      	orrs	r3, r2
 8002422:	7e7a      	ldrb	r2, [r7, #25]
 8002424:	0912      	lsrs	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4313      	orrs	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	461a      	mov	r2, r3
 8002432:	69f9      	ldr	r1, [r7, #28]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fded 	bl	8002014 <compensate_temperature>
 800243a:	4602      	mov	r2, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	461a      	mov	r2, r3
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fe1d 	bl	8002086 <compensate_pressure>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]

	return true;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8002468:	f107 0210 	add.w	r2, r7, #16
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ffb1 	bl	80023da <bmp280_read_fixed>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d021      	beq.n	80024c2 <bmp280_read_float+0x66>
	{
		*temperature = (float) fixed_temperature / 100;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eddf 6a10 	vldr	s13, [pc, #64]	; 80024cc <bmp280_read_float+0x70>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80024d0 <bmp280_read_float+0x74>
 80024a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	edc3 7a00 	vstr	s15, [r3]

		inst->temperature = *temperature;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
		inst->pressure = *pressure;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <bmp280_read_float+0x68>
	}

	return false;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	42c80000 	.word	0x42c80000
 80024d0:	43800000 	.word	0x43800000

080024d4 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	// uneccessary, to change
	float te;
	float pre;
	return bmp280_read_float(inst, &te, &pre);
 80024dc:	f107 0208 	add.w	r2, r7, #8
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffb8 	bl	800245c <bmp280_read_float>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <millis>:
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <millis+0x1c>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	////println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002520:	f7ff ffea 	bl	80024f8 <millis>
 8002524:	6138      	str	r0, [r7, #16]
	char c = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

	if (inst->paused) return c;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <GPS_read+0x20>
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	e073      	b.n	8002620 <GPS_read+0x108>

	HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
	//status = HAL_UART_Receive(inst->uart, ca, 1, 50);
	if (status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <GPS_read+0xfc>
	{
		//print("Status: ");
		//print_int(status);
		//println("");
		c = (char)inst->uartBuffer[0];
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8002548:	75fb      	strb	r3, [r7, #23]

		inst->currentline[inst->lineidx++] = c;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002556:	b2db      	uxtb	r3, r3
 8002558:	1c59      	adds	r1, r3, #1
 800255a:	b2c8      	uxtb	r0, r1
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8002562:	4413      	add	r3, r2
 8002564:	7dfa      	ldrb	r2, [r7, #23]
 8002566:	701a      	strb	r2, [r3, #0]
		if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b77      	cmp	r3, #119	; 0x77
 8002572:	d903      	bls.n	800257c <GPS_read+0x64>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2277      	movs	r2, #119	; 0x77
 8002578:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

		if (c == '\n')
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d141      	bne.n	8002606 <GPS_read+0xee>
		{
			inst->currentline[inst->lineidx] = 0;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	4413      	add	r3, r2
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]

			if (inst->currentline == inst->line1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	33d8      	adds	r3, #216	; 0xd8
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10c      	bne.n	80025be <GPS_read+0xa6>
			{
				inst->currentline = inst->line2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80025bc:	e00b      	b.n	80025d6 <GPS_read+0xbe>
			}
			else
			{
				inst->currentline = inst->line1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
			}

			// Serial.//println("----");
			// Serial.//println((char* )lastline);
			// Serial.//println("----");
			inst->lineidx = 0;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
			inst->recvdflag = true;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
			inst->recvdTime = millis(); // time we got the end of the string
 80025e6:	f7ff ff87 	bl	80024f8 <millis>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			inst->sentTime = firstChar;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <GPS_read+0x110>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			firstChar = 0; // there are no characters yet
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <GPS_read+0x110>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
			return c;			// wait until next character to set time
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	e00c      	b.n	8002620 <GPS_read+0x108>
		}

		if (firstChar == 0) firstChar = tStart;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <GPS_read+0x110>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <GPS_read+0xfc>
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <GPS_read+0x110>)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	6013      	str	r3, [r2, #0]
	}
	//wait for finished transmission
	////println("[GPS] read() ... waiting");
//	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
	//print("Status: "); print_int(status); print(" c: "); print_char(c); println("");
	if (status != HAL_OK) return 0x00;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <GPS_read+0x106>
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <GPS_read+0x108>
	////println("[GPS] finished");
	return c;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200003a0 	.word	0x200003a0

0800262c <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2258      	movs	r2, #88	; 0x58
 8002766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2258      	movs	r2, #88	; 0x58
 800276e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2258      	movs	r2, #88	; 0x58
 8002776:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2203      	movs	r2, #3
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f014 fc52 	bl	8017032 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3307      	adds	r3, #7
 8002792:	2214      	movs	r2, #20
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f014 fc4b 	bl	8017032 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	331b      	adds	r3, #27
 80027a0:	2203      	movs	r2, #3
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f014 fc44 	bl	8017032 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	331e      	adds	r3, #30
 80027ae:	2214      	movs	r2, #20
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f014 fc3d 	bl	8017032 <memset>

	memset(inst->txtTXT, 0x00, 63);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3388      	adds	r3, #136	; 0x88
 80027bc:	223f      	movs	r2, #63	; 0x3f
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f014 fc36 	bl	8017032 <memset>
	inst->txtTot = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <GPS_init+0x2a8>)
 80027e2:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <GPS_init+0x2ac>)
 80027ea:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <GPS_init+0x2b0>)
 80027f2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <GPS_init+0x2b4>)
 80027fa:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <GPS_init+0x2b8>)
 8002802:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <GPS_init+0x2bc>)
 800280a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a36      	ldr	r2, [pc, #216]	; (80028ec <GPS_init+0x2c0>)
 8002812:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <GPS_init+0x2c4>)
 800281a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <GPS_init+0x2c8>)
 8002822:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <GPS_init+0x2b8>)
 800282a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <GPS_init+0x2b8>)
 8002832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	HAL_Delay(1000);
 8002836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800283a:	f003 fd03 	bl	8006244 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 800283e:	492e      	ldr	r1, [pc, #184]	; (80028f8 <GPS_init+0x2cc>)
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f85d 	bl	8002900 <GPS_sendCommand>
	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
 8002846:	492d      	ldr	r1, [pc, #180]	; (80028fc <GPS_init+0x2d0>)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f859 	bl	8002900 <GPS_sendCommand>

	HAL_Delay(1000);
 800284e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002852:	f003 fcf7 	bl	8006244 <HAL_Delay>

	//GPS_sendCommand(inst, PMTK_Q_RELEASE);

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002862:	2201      	movs	r2, #1
 8002864:	4619      	mov	r1, r3
 8002866:	f00a f8eb 	bl	800ca40 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 800286a:	f7ff fe45 	bl	80024f8 <millis>
 800286e:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 8002870:	e022      	b.n	80028b8 <GPS_init+0x28c>
	{
		//GPS_read(inst);
		if (GPS_newNMEAreceived(inst))
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 ffb1 	bl	80037da <GPS_newNMEAreceived>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <GPS_init+0x28c>
		{
			// not exact, but works now
			GPS_parse(inst, GPS_lastNMEA(inst));
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 ffb9 	bl	80037f6 <GPS_lastNMEA>
 8002884:	4603      	mov	r3, r0
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f85b 	bl	8002944 <GPS_parse>
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 ffb1 	bl	80037f6 <GPS_lastNMEA>
 8002894:	4603      	mov	r3, r0
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b24      	cmp	r3, #36	; 0x24
 800289a:	d10d      	bne.n	80028b8 <GPS_init+0x28c>
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 ffaa 	bl	80037f6 <GPS_lastNMEA>
 80028a2:	4603      	mov	r3, r0
 80028a4:	3301      	adds	r3, #1
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b47      	cmp	r3, #71	; 0x47
 80028aa:	d105      	bne.n	80028b8 <GPS_init+0x28c>
			{
				//GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
				//GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
				inst->active = true;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
				return true;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e008      	b.n	80028ca <GPS_init+0x29e>
	while (millis() - timeout <= 1000)
 80028b8:	f7ff fe1e 	bl	80024f8 <millis>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c6:	d9d4      	bls.n	8002872 <GPS_init+0x246>

			}
		}
	}
	return true;
 80028c8:	2301      	movs	r3, #1
//	return false;
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	0801d9ec 	.word	0x0801d9ec
 80028d8:	0801d9f0 	.word	0x0801d9f0
 80028dc:	0801d9f4 	.word	0x0801d9f4
 80028e0:	0801d9f8 	.word	0x0801d9f8
 80028e4:	0801d9fc 	.word	0x0801d9fc
 80028e8:	0801da00 	.word	0x0801da00
 80028ec:	0801da04 	.word	0x0801da04
 80028f0:	0801da08 	.word	0x0801da08
 80028f4:	0801da0c 	.word	0x0801da0c
 80028f8:	0801da10 	.word	0x0801da10
 80028fc:	0801da44 	.word	0x0801da44

08002900 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f7fd fc67 	bl	80001e4 <strlen>
 8002916:	4603      	mov	r3, r0
 8002918:	b29a      	uxth	r2, r3
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	4620      	mov	r0, r4
 8002922:	f009 fff4 	bl	800c90e <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8002926:	bf00      	nop
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800292e:	4618      	mov	r0, r3
 8002930:	f00a f9ec 	bl	800cd0c <HAL_UART_GetState>
 8002934:	4603      	mov	r3, r0
 8002936:	2b20      	cmp	r3, #32
 8002938:	d1f6      	bne.n	8002928 <GPS_sendCommand+0x28>
	//println("[GPS] finished");
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
	...

08002944 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fb65 	bl	8003020 <GPS_check>
 8002956:	4603      	mov	r3, r0
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <GPS_parse+0x22>
 8002962:	2300      	movs	r3, #0
 8002964:	e355      	b.n	8003012 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f015 fa94 	bl	8017e9a <strchr>
 8002972:	4603      	mov	r3, r0
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3307      	adds	r3, #7
 800297c:	49a5      	ldr	r1, [pc, #660]	; (8002c14 <GPS_parse+0x2d0>)
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fc26 	bl	80001d0 <strcmp>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 80e6 	bne.w	8002b58 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fcc6 	bl	8003320 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f015 fa7f 	bl	8017e9a <strchr>
 800299c:	4603      	mov	r3, r0
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 80029a2:	6979      	ldr	r1, [r7, #20]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fd0b 	bl	80033c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f015 fa74 	bl	8017e9a <strchr>
 80029b2:	4603      	mov	r3, r0
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fdb6 	bl	800352c <GPS_parseLatDir>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <GPS_parse+0x8c>
 80029cc:	2300      	movs	r3, #0
 80029ce:	e320      	b.n	8003012 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f015 fa61 	bl	8017e9a <strchr>
 80029d8:	4603      	mov	r3, r0
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80029de:	6979      	ldr	r1, [r7, #20]
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fde3 	bl	80035ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	6978      	ldr	r0, [r7, #20]
 80029ea:	f015 fa56 	bl	8017e9a <strchr>
 80029ee:	4603      	mov	r3, r0
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 80029f4:	6979      	ldr	r1, [r7, #20]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fe80 	bl	80036fc <GPS_parseLonDir>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <GPS_parse+0xc8>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e302      	b.n	8003012 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f015 fa43 	bl	8017e9a <strchr>
 8002a14:	4603      	mov	r3, r0
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002a1a:	6979      	ldr	r1, [r7, #20]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fc66 	bl	80032ee <GPS_isEmpty>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01b      	beq.n	8002a66 <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f014 fab2 	bl	8016f98 <atoi>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002a5c:	e003      	b.n	8002a66 <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f015 fa16 	bl	8017e9a <strchr>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fc39 	bl	80032ee <GPS_isEmpty>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <GPS_parse+0x154>
 8002a88:	6978      	ldr	r0, [r7, #20]
 8002a8a:	f014 fa85 	bl	8016f98 <atoi>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f015 f9fd 	bl	8017e9a <strchr>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002aa6:	6979      	ldr	r1, [r7, #20]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fc20 	bl	80032ee <GPS_isEmpty>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f083 0301 	eor.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <GPS_parse+0x18e>
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f014 fa69 	bl	8016f92 <atof>
 8002ac0:	ec54 3b10 	vmov	r3, r4, d0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	f7fe f89e 	bl	8000c08 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f015 f9e0 	bl	8017e9a <strchr>
 8002ada:	4603      	mov	r3, r0
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002ae0:	6979      	ldr	r1, [r7, #20]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fc03 	bl	80032ee <GPS_isEmpty>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <GPS_parse+0x1c8>
 8002af4:	6978      	ldr	r0, [r7, #20]
 8002af6:	f014 fa4c 	bl	8016f92 <atof>
 8002afa:	ec54 3b10 	vmov	r3, r4, d0
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7fe f881 	bl	8000c08 <__aeabi_d2f>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f015 f9c3 	bl	8017e9a <strchr>
 8002b14:	4603      	mov	r3, r0
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f015 f9bc 	bl	8017e9a <strchr>
 8002b22:	4603      	mov	r3, r0
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fbdf 	bl	80032ee <GPS_isEmpty>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8251 	beq.w	8002fe0 <GPS_parse+0x69c>
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f014 fa27 	bl	8016f92 <atof>
 8002b44:	ec54 3b10 	vmov	r3, r4, d0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	f7fe f85c 	bl	8000c08 <__aeabi_d2f>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
 8002b56:	e243      	b.n	8002fe0 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	492e      	ldr	r1, [pc, #184]	; (8002c18 <GPS_parse+0x2d4>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fb36 	bl	80001d0 <strcmp>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80e3 	bne.w	8002d32 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002b6c:	6979      	ldr	r1, [r7, #20]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fbd6 	bl	8003320 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f015 f98f 	bl	8017e9a <strchr>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fe02 	bl	800378e <GPS_parseFix>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f083 0301 	eor.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <GPS_parse+0x256>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e23b      	b.n	8003012 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f015 f97c 	bl	8017e9a <strchr>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002ba8:	6979      	ldr	r1, [r7, #20]
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fc08 	bl	80033c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f015 f971 	bl	8017e9a <strchr>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002bbe:	6979      	ldr	r1, [r7, #20]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fcb3 	bl	800352c <GPS_parseLatDir>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <GPS_parse+0x292>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e21d      	b.n	8003012 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f015 f95e 	bl	8017e9a <strchr>
 8002bde:	4603      	mov	r3, r0
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fce0 	bl	80035ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f015 f953 	bl	8017e9a <strchr>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002bfa:	6979      	ldr	r1, [r7, #20]
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fd7d 	bl	80036fc <GPS_parseLonDir>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <GPS_parse+0x2d8>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e1ff      	b.n	8003012 <GPS_parse+0x6ce>
 8002c12:	bf00      	nop
 8002c14:	0801da00 	.word	0x0801da00
 8002c18:	0801da0c 	.word	0x0801da0c

		// speed
		p = strchr(p, ',') + 1;
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f015 f93b 	bl	8017e9a <strchr>
 8002c24:	4603      	mov	r3, r0
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fb5e 	bl	80032ee <GPS_isEmpty>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <GPS_parse+0x312>
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f014 f9a7 	bl	8016f92 <atof>
 8002c44:	ec54 3b10 	vmov	r3, r4, d0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	f7fd ffdc 	bl	8000c08 <__aeabi_d2f>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f015 f91e 	bl	8017e9a <strchr>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fb41 	bl	80032ee <GPS_isEmpty>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <GPS_parse+0x34c>
 8002c78:	6978      	ldr	r0, [r7, #20]
 8002c7a:	f014 f98a 	bl	8016f92 <atof>
 8002c7e:	ec54 3b10 	vmov	r3, r4, d0
 8002c82:	4618      	mov	r0, r3
 8002c84:	4621      	mov	r1, r4
 8002c86:	f7fd ffbf 	bl	8000c08 <__aeabi_d2f>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f015 f901 	bl	8017e9a <strchr>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fb24 	bl	80032ee <GPS_isEmpty>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8196 	beq.w	8002fe0 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002cb4:	6978      	ldr	r0, [r7, #20]
 8002cb6:	f014 f96c 	bl	8016f92 <atof>
 8002cba:	ec54 3b10 	vmov	r3, r4, d0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f7fd ffa1 	bl	8000c08 <__aeabi_d2f>
 8002cc6:	ee07 0a90 	vmov	s15, r0
 8002cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <GPS_parse+0x5c0>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	0b5b      	lsrs	r3, r3, #13
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <GPS_parse+0x5c0>)
 8002cea:	fba3 1302 	umull	r1, r3, r3, r2
 8002cee:	0b5b      	lsrs	r3, r3, #13
 8002cf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <GPS_parse+0x5c4>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4b7e      	ldr	r3, [pc, #504]	; (8002f08 <GPS_parse+0x5c4>)
 8002d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2164      	movs	r1, #100	; 0x64
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002d30:	e156      	b.n	8002fe0 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3307      	adds	r3, #7
 8002d36:	4975      	ldr	r1, [pc, #468]	; (8002f0c <GPS_parse+0x5c8>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fa49 	bl	80001d0 <strcmp>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d153      	bne.n	8002dec <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb3a 	bl	80033c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f015 f8a3 	bl	8017e9a <strchr>
 8002d54:	4603      	mov	r3, r0
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002d5a:	6979      	ldr	r1, [r7, #20]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fbe5 	bl	800352c <GPS_parseLatDir>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f083 0301 	eor.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <GPS_parse+0x42e>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e14f      	b.n	8003012 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f015 f890 	bl	8017e9a <strchr>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fc12 	bl	80035ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f015 f885 	bl	8017e9a <strchr>
 8002d90:	4603      	mov	r3, r0
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fcaf 	bl	80036fc <GPS_parseLonDir>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <GPS_parse+0x46a>
 8002daa:	2300      	movs	r3, #0
 8002dac:	e131      	b.n	8003012 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	6978      	ldr	r0, [r7, #20]
 8002db2:	f015 f872 	bl	8017e9a <strchr>
 8002db6:	4603      	mov	r3, r0
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 faae 	bl	8003320 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f015 f867 	bl	8017e9a <strchr>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fcda 	bl	800378e <GPS_parseFix>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80fc 	beq.w	8002fe0 <GPS_parse+0x69c>
 8002de8:	2300      	movs	r3, #0
 8002dea:	e112      	b.n	8003012 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3307      	adds	r3, #7
 8002df0:	4947      	ldr	r1, [pc, #284]	; (8002f10 <GPS_parse+0x5cc>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd f9ec 	bl	80001d0 <strcmp>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 808a 	bne.w	8002f14 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f015 f849 	bl	8017e9a <strchr>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa6c 	bl	80032ee <GPS_isEmpty>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f083 0301 	eor.w	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <GPS_parse+0x4ee>
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f014 f8b8 	bl	8016f98 <atoi>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e009      	b.n	8002e4c <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f015 f82d 	bl	8017e9a <strchr>
 8002e40:	4603      	mov	r3, r0
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0b      	cmp	r3, #11
 8002e50:	ddf2      	ble.n	8002e38 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	6978      	ldr	r0, [r7, #20]
 8002e56:	f015 f820 	bl	8017e9a <strchr>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa43 	bl	80032ee <GPS_isEmpty>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f083 0301 	eor.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <GPS_parse+0x548>
 8002e74:	6978      	ldr	r0, [r7, #20]
 8002e76:	f014 f88c 	bl	8016f92 <atof>
 8002e7a:	ec54 3b10 	vmov	r3, r4, d0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4621      	mov	r1, r4
 8002e82:	f7fd fec1 	bl	8000c08 <__aeabi_d2f>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f015 f803 	bl	8017e9a <strchr>
 8002e94:	4603      	mov	r3, r0
 8002e96:	3301      	adds	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa26 	bl	80032ee <GPS_isEmpty>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <GPS_parse+0x582>
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f014 f86f 	bl	8016f92 <atof>
 8002eb4:	ec54 3b10 	vmov	r3, r4, d0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	4621      	mov	r1, r4
 8002ebc:	f7fd fea4 	bl	8000c08 <__aeabi_d2f>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f014 ffe6 	bl	8017e9a <strchr>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa09 	bl	80032ee <GPS_isEmpty>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d07b      	beq.n	8002fe0 <GPS_parse+0x69c>
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f014 f852 	bl	8016f92 <atof>
 8002eee:	ec54 3b10 	vmov	r3, r4, d0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	f7fd fe87 	bl	8000c08 <__aeabi_d2f>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f00:	e06e      	b.n	8002fe0 <GPS_parse+0x69c>
 8002f02:	bf00      	nop
 8002f04:	d1b71759 	.word	0xd1b71759
 8002f08:	51eb851f 	.word	0x51eb851f
 8002f0c:	0801da04 	.word	0x0801da04
 8002f10:	0801da08 	.word	0x0801da08
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3307      	adds	r3, #7
 8002f18:	4940      	ldr	r1, [pc, #256]	; (800301c <GPS_parse+0x6d8>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd f958 	bl	80001d0 <strcmp>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d15a      	bne.n	8002fdc <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f9e0 	bl	80032ee <GPS_isEmpty>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <GPS_parse+0x604>
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f014 f82c 	bl	8016f98 <atoi>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f014 ffa5 	bl	8017e9a <strchr>
 8002f50:	4603      	mov	r3, r0
 8002f52:	3301      	adds	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8002f56:	6979      	ldr	r1, [r7, #20]
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f9c8 	bl	80032ee <GPS_isEmpty>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <GPS_parse+0x634>
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f014 f814 	bl	8016f98 <atoi>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f014 ff8d 	bl	8017e9a <strchr>
 8002f80:	4603      	mov	r3, r0
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9b0 	bl	80032ee <GPS_isEmpty>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <GPS_parse+0x664>
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f013 fffc 	bl	8016f98 <atoi>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f014 ff75 	bl	8017e9a <strchr>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f998 	bl	80032ee <GPS_isEmpty>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <GPS_parse+0x69c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8002fd0:	233d      	movs	r3, #61	; 0x3d
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f923 	bl	8003220 <GPS_parseStr>
 8002fda:	e001      	b.n	8002fe0 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e018      	b.n	8003012 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f103 021b 	add.w	r2, r3, #27
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f014 ff61 	bl	8017eb4 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 021e 	add.w	r2, r3, #30
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3307      	adds	r3, #7
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f014 ff58 	bl	8017eb4 <strcpy>
	inst->lastUpdate = millis();
 8003004:	f7ff fa78 	bl	80024f8 <millis>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	0801da58 	.word	0x0801da58

08003020 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b24      	cmp	r3, #36	; 0x24
 8003036:	d001      	beq.n	800303c <GPS_check+0x1c>
 8003038:	2300      	movs	r3, #0
 800303a:	e0ad      	b.n	8003198 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800304a:	e002      	b.n	8003052 <GPS_check+0x32>
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	3301      	adds	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f8      	bne.n	800304c <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 800305a:	e002      	b.n	8003062 <GPS_check+0x42>
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	3b01      	subs	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b2a      	cmp	r3, #42	; 0x2a
 8003068:	d003      	beq.n	8003072 <GPS_check+0x52>
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d8f4      	bhi.n	800305c <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b2a      	cmp	r3, #42	; 0x2a
 8003078:	d001      	beq.n	800307e <GPS_check+0x5e>
 800307a:	2300      	movs	r3, #0
 800307c:	e08c      	b.n	8003198 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fbc6 	bl	8003818 <GPS_parseHex>
 800308c:	4603      	mov	r3, r0
 800308e:	b29b      	uxth	r3, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	3302      	adds	r3, #2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fbbb 	bl	8003818 <GPS_parseHex>
 80030a2:	4603      	mov	r3, r0
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030a8:	4413      	add	r3, r2
 80030aa:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e008      	b.n	80030ca <GPS_check+0xaa>
		{
			sum ^=* p1;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030c0:	4053      	eors	r3, r2
 80030c2:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	3301      	adds	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3f2      	bcc.n	80030b8 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 80030d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <GPS_check+0xbc>
 80030d8:	2300      	movs	r3, #0
 80030da:	e05d      	b.n	8003198 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80030f2:	461a      	mov	r2, r3
 80030f4:	6979      	ldr	r1, [r7, #20]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f852 	bl	80031a0 <GPS_tokenOnList>
 80030fc:	6138      	str	r0, [r7, #16]
	if (src)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01f      	beq.n	8003144 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	6939      	ldr	r1, [r7, #16]
 800310a:	4618      	mov	r0, r3
 800310c:	f014 fed2 	bl	8017eb4 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f103 020a 	add.w	r2, r3, #10
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f7fd f861 	bl	80001e4 <strlen>
 8003122:	4602      	mov	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4413      	add	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003130:	461a      	mov	r2, r3
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f833 	bl	80031a0 <GPS_tokenOnList>
 800313a:	60f8      	str	r0, [r7, #12]
	if (snc)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00f      	beq.n	8003162 <GPS_check+0x142>
 8003142:	e001      	b.n	8003148 <GPS_check+0x128>
	else return false;
 8003144:	2300      	movs	r3, #0
 8003146:	e027      	b.n	8003198 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3307      	adds	r3, #7
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f014 feb0 	bl	8017eb4 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e019      	b.n	8003196 <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003168:	461a      	mov	r2, r3
 800316a:	6979      	ldr	r1, [r7, #20]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f817 	bl	80031a0 <GPS_tokenOnList>
 8003172:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3307      	adds	r3, #7
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f014 fe97 	bl	8017eb4 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f103 0214 	add.w	r2, r3, #20
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
			return false;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	; 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80031b0:	e01e      	b.n	80031f0 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	681c      	ldr	r4, [r3, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f80c 	bl	80001e4 <strlen>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4620      	mov	r0, r4
 80031d4:	f014 fe76 	bl	8017ec4 <strncmp>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <GPS_tokenOnList+0x4a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e014      	b.n	8003214 <GPS_tokenOnList+0x74>
		i++;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <GPS_tokenOnList+0x7c>)
 80031fe:	4618      	mov	r0, r3
 8003200:	f014 fe60 	bl	8017ec4 <strncmp>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <GPS_tokenOnList+0x72>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003210:	dbcf      	blt.n	80031b2 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	0801da5c 	.word	0x0801da5c

08003220 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	; 0x30
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f014 fe32 	bl	8017e9a <strchr>
 8003236:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3b01      	subs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4293      	cmp	r3, r2
 8003256:	bfa8      	it	ge
 8003258:	4613      	movge	r3, r2
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	461a      	mov	r2, r3
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68b8      	ldr	r0, [r7, #8]
 8003264:	f014 fe40 	bl	8017ee8 <strncpy>
		buff[len] = 0;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e037      	b.n	80032e4 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003274:	212a      	movs	r1, #42	; 0x2a
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f014 fe0f 	bl	8017e9a <strchr>
 800327c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4293      	cmp	r3, r2
 8003298:	bfa8      	it	ge
 800329a:	4613      	movge	r3, r2
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	461a      	mov	r2, r3
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f014 fe1f 	bl	8017ee8 <strncpy>
			buff[e - p] = 0;
 80032aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4413      	add	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e013      	b.n	80032e4 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fc ff91 	bl	80001e4 <strlen>
 80032c2:	4603      	mov	r3, r0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bfa8      	it	ge
 80032d4:	4613      	movge	r3, r2
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	461a      	mov	r2, r3
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68b8      	ldr	r0, [r7, #8]
 80032e0:	f014 fe02 	bl	8017ee8 <strncpy>
		}
	}
	return buff;
 80032e4:	68bb      	ldr	r3, [r7, #8]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3730      	adds	r7, #48	; 0x30
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b2c      	cmp	r3, #44	; 0x2c
 80032fe:	d008      	beq.n	8003312 <GPS_isEmpty+0x24>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b2a      	cmp	r3, #42	; 0x2a
 8003306:	d004      	beq.n	8003312 <GPS_isEmpty+0x24>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <GPS_isEmpty+0x24>
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <GPS_isEmpty+0x26>
	else return true;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f013 fe38 	bl	8016fa0 <atol>
 8003330:	4603      	mov	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <GPS_parseTime+0x94>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0b5b      	lsrs	r3, r3, #13
 800333e:	b2da      	uxtb	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <GPS_parseTime+0x94>)
 800334a:	fba3 1302 	umull	r1, r3, r3, r2
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f242 7110 	movw	r1, #10000	; 0x2710
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <GPS_parseTime+0x98>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	b2da      	uxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <GPS_parseTime+0x98>)
 800336e:	fba3 1302 	umull	r1, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2164      	movs	r1, #100	; 0x64
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003384:	212e      	movs	r1, #46	; 0x2e
 8003386:	6838      	ldr	r0, [r7, #0]
 8003388:	f014 fd87 	bl	8017e9a <strchr>
 800338c:	4603      	mov	r3, r0
 800338e:	3301      	adds	r3, #1
 8003390:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f013 fe00 	bl	8016f98 <atoi>
 8003398:	4603      	mov	r3, r0
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	d1b71759 	.word	0xd1b71759
 80033b8:	51eb851f 	.word	0x51eb851f
 80033bc:	00000000 	.word	0x00000000

080033c0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff8e 	bl	80032ee <GPS_isEmpty>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f083 0301 	eor.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8092 	beq.w	8003504 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	2202      	movs	r2, #2
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f014 fd7d 	bl	8017ee8 <strncpy>
		p += 2;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3302      	adds	r3, #2
 80033f2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80033f4:	2300      	movs	r3, #0
 80033f6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	4618      	mov	r0, r3
 80033fe:	f013 fdcf 	bl	8016fa0 <atol>
 8003402:	4602      	mov	r2, r0
 8003404:	4b44      	ldr	r3, [pc, #272]	; (8003518 <GPS_parseLat+0x158>)
 8003406:	fb03 f302 	mul.w	r3, r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	2202      	movs	r2, #2
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f014 fd67 	bl	8017ee8 <strncpy>
		p += 3;										// skip decimal point
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	3303      	adds	r3, #3
 800341e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	3302      	adds	r3, #2
 8003426:	2204      	movs	r2, #4
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f014 fd5c 	bl	8017ee8 <strncpy>
		degreebuff[6] = '\0';
 8003430:	2300      	movs	r3, #0
 8003432:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	4618      	mov	r0, r3
 800343a:	f013 fdb1 	bl	8016fa0 <atol>
 800343e:	4602      	mov	r2, r0
 8003440:	2332      	movs	r3, #50	; 0x32
 8003442:	fb03 f302 	mul.w	r3, r3, r2
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <GPS_parseLat+0x15c>)
 8003448:	fb82 1203 	smull	r1, r2, r2, r3
 800344c:	17db      	asrs	r3, r3, #31
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	441a      	add	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4a30      	ldr	r2, [pc, #192]	; (8003520 <GPS_parseLat+0x160>)
 8003460:	fb82 1203 	smull	r1, r2, r2, r3
 8003464:	1352      	asrs	r2, r2, #13
 8003466:	17db      	asrs	r3, r3, #31
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f86a 	bl	8000544 <__aeabi_i2d>
 8003470:	4604      	mov	r4, r0
 8003472:	460d      	mov	r5, r1
 8003474:	69b8      	ldr	r0, [r7, #24]
 8003476:	f7fd f865 	bl	8000544 <__aeabi_i2d>
 800347a:	a325      	add	r3, pc, #148	; (adr r3, 8003510 <GPS_parseLat+0x150>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f8ca 	bl	8000618 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc ff0e 	bl	80002ac <__adddf3>
 8003490:	4603      	mov	r3, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4618      	mov	r0, r3
 8003496:	4621      	mov	r1, r4
 8003498:	f7fd fbb6 	bl	8000c08 <__aeabi_d2f>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80034ae:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003524 <GPS_parseLat+0x164>
 80034b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ba:	ee17 2a90 	vmov	r2, s15
 80034be:	2364      	movs	r3, #100	; 0x64
 80034c0:	fb03 f302 	mul.w	r3, r3, r2
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003528 <GPS_parseLat+0x168>
 80034d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80034ea:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003524 <GPS_parseLat+0x164>
 80034ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003504:	bf00      	nop
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bdb0      	pop	{r4, r5, r7, pc}
 800350c:	f3af 8000 	nop.w
 8003510:	7110e454 	.word	0x7110e454
 8003514:	3ed92a73 	.word	0x3ed92a73
 8003518:	00989680 	.word	0x00989680
 800351c:	55555556 	.word	0x55555556
 8003520:	14f8b589 	.word	0x14f8b589
 8003524:	42c80000 	.word	0x42c80000
 8003528:	42700000 	.word	0x42700000

0800352c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b53      	cmp	r3, #83	; 0x53
 800353c:	d11c      	bne.n	8003578 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2253      	movs	r2, #83	; 0x53
 8003542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd f80c 	bl	8000568 <__aeabi_f2d>
 8003550:	4603      	mov	r3, r0
 8003552:	460c      	mov	r4, r1
 8003554:	4618      	mov	r0, r3
 8003556:	4621      	mov	r1, r4
 8003558:	f7fd fb56 	bl	8000c08 <__aeabi_d2f>
 800355c:	4603      	mov	r3, r0
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef1 7a67 	vneg.f32	s15, s15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	425a      	negs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
 8003576:	e013      	b.n	80035a0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b4e      	cmp	r3, #78	; 0x4e
 800357e:	d104      	bne.n	800358a <GPS_parseLatDir+0x5e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	224e      	movs	r2, #78	; 0x4e
 8003584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003588:	e00a      	b.n	80035a0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b2c      	cmp	r3, #44	; 0x2c
 8003590:	d104      	bne.n	800359c <GPS_parseLatDir+0x70>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800359a:	e001      	b.n	80035a0 <GPS_parseLatDir+0x74>
	else return false;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <GPS_parseLatDir+0x76>
	
	return true;
 80035a0:	2301      	movs	r3, #1
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}
	...

080035ac <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe98 	bl	80032ee <GPS_isEmpty>
 80035be:	4603      	mov	r3, r0
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8088 	beq.w	80036dc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	2203      	movs	r2, #3
 80035d2:	6839      	ldr	r1, [r7, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f014 fc87 	bl	8017ee8 <strncpy>
		p += 3;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	3303      	adds	r3, #3
 80035de:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4618      	mov	r0, r3
 80035ea:	f013 fcd9 	bl	8016fa0 <atol>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <GPS_parseLon+0x138>)
 80035f2:	fb03 f302 	mul.w	r3, r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	2202      	movs	r2, #2
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f014 fc71 	bl	8017ee8 <strncpy>
		p += 3;										// skip decimal point
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3303      	adds	r3, #3
 800360a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	3302      	adds	r3, #2
 8003612:	2204      	movs	r2, #4
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f014 fc66 	bl	8017ee8 <strncpy>
		degreebuff[6] = '\0';
 800361c:	2300      	movs	r3, #0
 800361e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	4618      	mov	r0, r3
 8003626:	f013 fcbb 	bl	8016fa0 <atol>
 800362a:	4602      	mov	r2, r0
 800362c:	2332      	movs	r3, #50	; 0x32
 800362e:	fb03 f302 	mul.w	r3, r3, r2
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <GPS_parseLon+0x13c>)
 8003634:	fb82 1203 	smull	r1, r2, r2, r3
 8003638:	17db      	asrs	r3, r3, #31
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <GPS_parseLon+0x140>)
 800364c:	fb82 1203 	smull	r1, r2, r2, r3
 8003650:	1352      	asrs	r2, r2, #13
 8003652:	17db      	asrs	r3, r3, #31
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003668:	eddf 6a21 	vldr	s13, [pc, #132]	; 80036f0 <GPS_parseLon+0x144>
 800366c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003686:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80036f4 <GPS_parseLon+0x148>
 800368a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800368e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003692:	ee17 2a90 	vmov	r2, s15
 8003696:	2364      	movs	r3, #100	; 0x64
 8003698:	fb03 f302 	mul.w	r3, r3, r2
 800369c:	ee07 3a90 	vmov	s15, r3
 80036a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80036f8 <GPS_parseLon+0x14c>
 80036ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80036c2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80036f4 <GPS_parseLon+0x148>
 80036c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00989680 	.word	0x00989680
 80036e8:	55555556 	.word	0x55555556
 80036ec:	14f8b589 	.word	0x14f8b589
 80036f0:	36c9539c 	.word	0x36c9539c
 80036f4:	42c80000 	.word	0x42c80000
 80036f8:	42700000 	.word	0x42700000

080036fc <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fdf0 	bl	80032ee <GPS_isEmpty>
 800370e:	4603      	mov	r3, r0
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d034      	beq.n	8003784 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b57      	cmp	r3, #87	; 0x57
 8003720:	d11c      	bne.n	800375c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2257      	movs	r2, #87	; 0x57
 8003726:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff1a 	bl	8000568 <__aeabi_f2d>
 8003734:	4603      	mov	r3, r0
 8003736:	460c      	mov	r4, r1
 8003738:	4618      	mov	r0, r3
 800373a:	4621      	mov	r1, r4
 800373c:	f7fd fa64 	bl	8000c08 <__aeabi_d2f>
 8003740:	4603      	mov	r3, r0
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef1 7a67 	vneg.f32	s15, s15
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	425a      	negs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	649a      	str	r2, [r3, #72]	; 0x48
 800375a:	e013      	b.n	8003784 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b45      	cmp	r3, #69	; 0x45
 8003762:	d104      	bne.n	800376e <GPS_parseLonDir+0x72>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2245      	movs	r2, #69	; 0x45
 8003768:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800376c:	e00a      	b.n	8003784 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b2c      	cmp	r3, #44	; 0x2c
 8003774:	d104      	bne.n	8003780 <GPS_parseLonDir+0x84>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800377e:	e001      	b.n	8003784 <GPS_parseLonDir+0x88>
		else return false;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003784:	2301      	movs	r3, #1
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}

0800378e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b41      	cmp	r3, #65	; 0x41
 800379e:	d10a      	bne.n	80037b6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80037b4:	e00a      	b.n	80037cc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b56      	cmp	r3, #86	; 0x56
 80037bc:	d104      	bne.n	80037c8 <GPS_parseFix+0x3a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80037c6:	e001      	b.n	80037cc <GPS_parseFix+0x3e>
	else return false;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <GPS_parseFix+0x40>
	return true;
 80037cc:	2301      	movs	r3, #1
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	2b2f      	cmp	r3, #47	; 0x2f
 8003828:	d801      	bhi.n	800382e <GPS_parseHex+0x16>
 800382a:	2300      	movs	r3, #0
 800382c:	e013      	b.n	8003856 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	2b39      	cmp	r3, #57	; 0x39
 8003832:	d803      	bhi.n	800383c <GPS_parseHex+0x24>
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	3b30      	subs	r3, #48	; 0x30
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e00c      	b.n	8003856 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d801      	bhi.n	8003846 <GPS_parseHex+0x2e>
 8003842:	2300      	movs	r3, #0
 8003844:	e007      	b.n	8003856 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	2b46      	cmp	r3, #70	; 0x46
 800384a:	d803      	bhi.n	8003854 <GPS_parseHex+0x3c>
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	3b37      	subs	r3, #55	; 0x37
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e000      	b.n	8003856 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af04      	add	r7, sp, #16
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	460b      	mov	r3, r1
 800386e:	71bb      	strb	r3, [r7, #6]
 8003870:	4613      	mov	r3, r2
 8003872:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 2);
 8003874:	f012 f86a 	bl	801594c <Get_I2C1_Instance>
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	b299      	uxth	r1, r3
 800387c:	79bb      	ldrb	r3, [r7, #6]
 800387e:	b29a      	uxth	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	2301      	movs	r3, #1
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	1d7b      	adds	r3, r7, #5
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	f003 fcb3 	bl	80071f8 <HAL_I2C_Mem_Write>
	//while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
	/*print("Write:");
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b088      	sub	sp, #32
 800389e:	af04      	add	r7, sp, #16
 80038a0:	4603      	mov	r3, r0
 80038a2:	460a      	mov	r2, r1
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	4613      	mov	r3, r2
 80038a8:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 2);
 80038aa:	f012 f84f 	bl	801594c <Get_I2C1_Instance>
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	b299      	uxth	r1, r3
 80038b2:	79bb      	ldrb	r3, [r7, #6]
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	2302      	movs	r3, #2
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	2301      	movs	r3, #1
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	f003 fd91 	bl	80073ec <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 80038ca:	7b3b      	ldrb	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b08d      	sub	sp, #52	; 0x34
 80038d8:	af04      	add	r7, sp, #16
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
 80038e0:	460b      	mov	r3, r1
 80038e2:	71bb      	strb	r3, [r7, #6]
 80038e4:	4613      	mov	r3, r2
 80038e6:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 2);
 80038e8:	f012 f830 	bl	801594c <Get_I2C1_Instance>
 80038ec:	4604      	mov	r4, r0
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	b299      	uxth	r1, r3
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	b298      	uxth	r0, r3
 80038f6:	797b      	ldrb	r3, [r7, #5]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2202      	movs	r2, #2
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	4602      	mov	r2, r0
 800390a:	4620      	mov	r0, r4
 800390c:	f003 fd6e 	bl	80073ec <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e00b      	b.n	8003932 <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f107 010c 	add.w	r1, r7, #12
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	797b      	ldrb	r3, [r7, #5]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	429a      	cmp	r2, r3
 8003938:	dbef      	blt.n	800391a <MPU_readBytes+0x46>
	}
} 
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}
	...

08003944 <MPU_getMres>:
 
void MPU_getMres()
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	switch (MMscale)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MPU_getMres+0x2c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <MPU_getMres+0x12>
 8003950:	2b01      	cmp	r3, #1
 8003952:	d004      	beq.n	800395e <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 8003954:	e007      	b.n	8003966 <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <MPU_getMres+0x30>)
 8003958:	4a07      	ldr	r2, [pc, #28]	; (8003978 <MPU_getMres+0x34>)
 800395a:	601a      	str	r2, [r3, #0]
			break;
 800395c:	e003      	b.n	8003966 <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <MPU_getMres+0x30>)
 8003960:	4a06      	ldr	r2, [pc, #24]	; (800397c <MPU_getMres+0x38>)
 8003962:	601a      	str	r2, [r3, #0]
			break;
 8003964:	bf00      	nop
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	20002d70 	.word	0x20002d70
 8003974:	20002dd8 	.word	0x20002dd8
 8003978:	40bfebff 	.word	0x40bfebff
 800397c:	3fbfebff 	.word	0x3fbfebff

08003980 <MPU_getGres>:
void MPU_getGres()
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
	switch (GGscale)
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MPU_getGres+0x50>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d81b      	bhi.n	80039c4 <MPU_getGres+0x44>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <MPU_getGres+0x14>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039ad 	.word	0x080039ad
 800399c:	080039b5 	.word	0x080039b5
 80039a0:	080039bd 	.word	0x080039bd
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <MPU_getGres+0x54>)
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <MPU_getGres+0x58>)
 80039a8:	601a      	str	r2, [r3, #0]
			break;
 80039aa:	e00b      	b.n	80039c4 <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MPU_getGres+0x54>)
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <MPU_getGres+0x5c>)
 80039b0:	601a      	str	r2, [r3, #0]
			break;
 80039b2:	e007      	b.n	80039c4 <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 80039b4:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <MPU_getGres+0x54>)
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <MPU_getGres+0x60>)
 80039b8:	601a      	str	r2, [r3, #0]
			break;
 80039ba:	e003      	b.n	80039c4 <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <MPU_getGres+0x54>)
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <MPU_getGres+0x64>)
 80039c0:	601a      	str	r2, [r3, #0]
			break;
 80039c2:	bf00      	nop
	}
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20002ce7 	.word	0x20002ce7
 80039d4:	20002da4 	.word	0x20002da4
 80039d8:	3bfa0000 	.word	0x3bfa0000
 80039dc:	3c7a0000 	.word	0x3c7a0000
 80039e0:	3cfa0000 	.word	0x3cfa0000
 80039e4:	3d7a0000 	.word	0x3d7a0000

080039e8 <MPU_getAres>:
void MPU_getAres()
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	switch (AAscale)
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <MPU_getAres+0x58>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d81f      	bhi.n	8003a34 <MPU_getAres+0x4c>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <MPU_getAres+0x14>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a17 	.word	0x08003a17
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	08003a2b 	.word	0x08003a2b
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <MPU_getAres+0x5c>)
 8003a0e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003a12:	601a      	str	r2, [r3, #0]
			break;
 8003a14:	e00e      	b.n	8003a34 <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <MPU_getAres+0x5c>)
 8003a18:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003a1c:	601a      	str	r2, [r3, #0]
			break;
 8003a1e:	e009      	b.n	8003a34 <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <MPU_getAres+0x5c>)
 8003a22:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003a26:	601a      	str	r2, [r3, #0]
			break;
 8003a28:	e004      	b.n	8003a34 <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <MPU_getAres+0x5c>)
 8003a2c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003a30:	601a      	str	r2, [r3, #0]
			break;
 8003a32:	bf00      	nop
	}
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20002d20 	.word	0x20002d20
 8003a44:	20002d64 	.word	0x20002d64

08003a48 <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	2206      	movs	r2, #6
 8003a56:	213b      	movs	r1, #59	; 0x3b
 8003a58:	20d2      	movs	r0, #210	; 0xd2
 8003a5a:	f7ff ff3b 	bl	80038d4 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003a5e:	7a3b      	ldrb	r3, [r7, #8]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	b21a      	sxth	r2, r3
 8003a64:	7a7b      	ldrb	r3, [r7, #9]
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003a70:	7abb      	ldrb	r3, [r7, #10]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	b219      	sxth	r1, r3
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	b212      	sxth	r2, r2
 8003a82:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003a84:	7b3b      	ldrb	r3, [r7, #12]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	b219      	sxth	r1, r3
 8003a8a:	7b7b      	ldrb	r3, [r7, #13]
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	430a      	orrs	r2, r1
 8003a94:	b212      	sxth	r2, r2
 8003a96:	801a      	strh	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	2206      	movs	r2, #6
 8003aae:	2143      	movs	r1, #67	; 0x43
 8003ab0:	20d2      	movs	r0, #210	; 0xd2
 8003ab2:	f7ff ff0f 	bl	80038d4 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003ab6:	7a3b      	ldrb	r3, [r7, #8]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	b21a      	sxth	r2, r3
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	b21a      	sxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003ac8:	7abb      	ldrb	r3, [r7, #10]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	b219      	sxth	r1, r3
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	b212      	sxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	b219      	sxth	r1, r3
 8003ae2:	7b7b      	ldrb	r3, [r7, #13]
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	430a      	orrs	r2, r1
 8003aec:	b212      	sxth	r2, r2
 8003aee:	801a      	strh	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8003b00:	2102      	movs	r1, #2
 8003b02:	2018      	movs	r0, #24
 8003b04:	f7ff fec9 	bl	800389a <MPU_readByte>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02a      	beq.n	8003b68 <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	2207      	movs	r2, #7
 8003b18:	2103      	movs	r1, #3
 8003b1a:	2018      	movs	r0, #24
 8003b1c:	f7ff feda 	bl	80038d4 <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11c      	bne.n	8003b68 <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8003b2e:	7a7b      	ldrb	r3, [r7, #9]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	b21a      	sxth	r2, r3
 8003b34:	7a3b      	ldrb	r3, [r7, #8]
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	b219      	sxth	r1, r3
 8003b46:	7abb      	ldrb	r3, [r7, #10]
 8003b48:	b21a      	sxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	b212      	sxth	r2, r2
 8003b52:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 8003b54:	7b7b      	ldrb	r3, [r7, #13]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	b219      	sxth	r1, r3
 8003b5a:	7b3b      	ldrb	r3, [r7, #12]
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	430a      	orrs	r2, r1
 8003b64:	b212      	sxth	r2, r2
 8003b66:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <MPU_present>:
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
}

bool MPU_present()
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	71fb      	strb	r3, [r7, #7]
	do
	{
		MPU_reset();
 8003b7a:	f000 f977 	bl	8003e6c <MPU_reset>
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 8003b7e:	2175      	movs	r1, #117	; 0x75
 8003b80:	20d2      	movs	r0, #210	; 0xd2
 8003b82:	f7ff fe8a 	bl	800389a <MPU_readByte>
 8003b86:	4603      	mov	r3, r0
 8003b88:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 8003b8a:	79bb      	ldrb	r3, [r7, #6]
 8003b8c:	2b71      	cmp	r3, #113	; 0x71
 8003b8e:	d101      	bne.n	8003b94 <MPU_present+0x24>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e00a      	b.n	8003baa <MPU_present+0x3a>
		else
		{
			attempts++;
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	3301      	adds	r3, #1
 8003b98:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8003b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b9e:	f002 fb51 	bl	8006244 <HAL_Delay>
		}
	} while (attempts <= 5);
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d9e8      	bls.n	8003b7a <MPU_present+0xa>
	return false;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <MPU_init>:
void MPU_init()
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
	AAscale = AFS_2G;
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <MPU_init+0x198>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8003bc0:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <MPU_init+0x19c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <MPU_init+0x1a0>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8003bcc:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <MPU_init+0x1a4>)
 8003bce:	2206      	movs	r2, #6
 8003bd0:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8003bd2:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <MPU_init+0x1a8>)
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8003bda:	4b60      	ldr	r3, [pc, #384]	; (8003d5c <MPU_init+0x1a8>)
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8003be2:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <MPU_init+0x1a8>)
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <MPU_init+0x1ac>)
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <MPU_init+0x1ac>)
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <MPU_init+0x1ac>)
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8003c02:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <MPU_init+0x1b0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
	count = 0;
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <MPU_init+0x1b4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8003c0e:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <MPU_init+0x1b8>)
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 8003c16:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <MPU_init+0x1bc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8003c1c:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <MPU_init+0x1c0>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
	Now = 0;
 8003c22:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <MPU_init+0x1c4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8003c28:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <MPU_init+0x1c8>)
 8003c2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c2e:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8003c30:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <MPU_init+0x1c8>)
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8003c38:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <MPU_init+0x1c8>)
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8003c40:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <MPU_init+0x1c8>)
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <MPU_init+0x1cc>)
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <MPU_init+0x1cc>)
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <MPU_init+0x1cc>)
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8003c60:	2200      	movs	r2, #0
 8003c62:	216b      	movs	r1, #107	; 0x6b
 8003c64:	20d2      	movs	r0, #210	; 0xd2
 8003c66:	f7ff fdfc 	bl	8003862 <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 8003c6a:	2064      	movs	r0, #100	; 0x64
 8003c6c:	f002 faea 	bl	8006244 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003c70:	2201      	movs	r2, #1
 8003c72:	216b      	movs	r1, #107	; 0x6b
 8003c74:	20d2      	movs	r0, #210	; 0xd2
 8003c76:	f7ff fdf4 	bl	8003862 <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	HAL_Delay(100);
 8003c7a:	2064      	movs	r0, #100	; 0x64
 8003c7c:	f002 fae2 	bl	8006244 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003c80:	2203      	movs	r2, #3
 8003c82:	211a      	movs	r1, #26
 8003c84:	20d2      	movs	r0, #210	; 0xd2
 8003c86:	f7ff fdec 	bl	8003862 <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	HAL_Delay(100);
 8003c8a:	2064      	movs	r0, #100	; 0x64
 8003c8c:	f002 fada 	bl	8006244 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8003c90:	2204      	movs	r2, #4
 8003c92:	2119      	movs	r1, #25
 8003c94:	20d2      	movs	r0, #210	; 0xd2
 8003c96:	f7ff fde4 	bl	8003862 <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8003c9a:	211b      	movs	r1, #27
 8003c9c:	20d2      	movs	r0, #210	; 0xd2
 8003c9e:	f7ff fdfc 	bl	800389a <MPU_readByte>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x03; // Clear Fchoice bits [1:0]
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f023 0303 	bic.w	r3, r3, #3
 8003cac:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f023 0318 	bic.w	r3, r3, #24
 8003cb4:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <MPU_init+0x19c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	211b      	movs	r1, #27
 8003cce:	20d2      	movs	r0, #210	; 0xd2
 8003cd0:	f7ff fdc7 	bl	8003862 <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8003cd4:	211c      	movs	r1, #28
 8003cd6:	20d2      	movs	r0, #210	; 0xd2
 8003cd8:	f7ff fddf 	bl	800389a <MPU_readByte>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	f023 0318 	bic.w	r3, r3, #24
 8003ce6:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <MPU_init+0x198>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	b25a      	sxtb	r2, r3
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	211c      	movs	r1, #28
 8003d00:	20d2      	movs	r0, #210	; 0xd2
 8003d02:	f7ff fdae 	bl	8003862 <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8003d06:	211d      	movs	r1, #29
 8003d08:	20d2      	movs	r0, #210	; 0xd2
 8003d0a:	f7ff fdc6 	bl	800389a <MPU_readByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f043 0303 	orr.w	r3, r3, #3
 8003d20:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	461a      	mov	r2, r3
 8003d26:	211d      	movs	r1, #29
 8003d28:	20d2      	movs	r0, #210	; 0xd2
 8003d2a:	f7ff fd9a 	bl	8003862 <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8003d2e:	2222      	movs	r2, #34	; 0x22
 8003d30:	2137      	movs	r1, #55	; 0x37
 8003d32:	20d2      	movs	r0, #210	; 0xd2
 8003d34:	f7ff fd95 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2138      	movs	r1, #56	; 0x38
 8003d3c:	20d2      	movs	r0, #210	; 0xd2
 8003d3e:	f7ff fd90 	bl	8003862 <MPU_writeByte>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20002d20 	.word	0x20002d20
 8003d50:	20002ce7 	.word	0x20002ce7
 8003d54:	20002d70 	.word	0x20002d70
 8003d58:	20002d48 	.word	0x20002d48
 8003d5c:	20002e00 	.word	0x20002e00
 8003d60:	20002d4c 	.word	0x20002d4c
 8003d64:	20002d98 	.word	0x20002d98
 8003d68:	20002d90 	.word	0x20002d90
 8003d6c:	20002dd4 	.word	0x20002dd4
 8003d70:	20002d2c 	.word	0x20002d2c
 8003d74:	20002ddc 	.word	0x20002ddc
 8003d78:	20002d5c 	.word	0x20002d5c
 8003d7c:	20002dec 	.word	0x20002dec
 8003d80:	20002d3c 	.word	0x20002d3c

08003d84 <AK8963_init>:
void AK8963_init(float * destination)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	210a      	movs	r1, #10
 8003d90:	2018      	movs	r0, #24
 8003d92:	f7ff fd66 	bl	8003862 <MPU_writeByte>
	HAL_Delay(10);
 8003d96:	200a      	movs	r0, #10
 8003d98:	f002 fa54 	bl	8006244 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	210a      	movs	r1, #10
 8003da0:	2018      	movs	r0, #24
 8003da2:	f7ff fd5e 	bl	8003862 <MPU_writeByte>
	HAL_Delay(10);
 8003da6:	200a      	movs	r0, #10
 8003da8:	f002 fa4c 	bl	8006244 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	2203      	movs	r2, #3
 8003db2:	2110      	movs	r1, #16
 8003db4:	2018      	movs	r0, #24
 8003db6:	f7ff fd8d 	bl	80038d4 <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8003dba:	7b3b      	ldrb	r3, [r7, #12]
 8003dbc:	3b80      	subs	r3, #128	; 0x80
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e60 <AK8963_init+0xdc>
 8003dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003ddc:	7b7b      	ldrb	r3, [r7, #13]
 8003dde:	3b80      	subs	r3, #128	; 0x80
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003de8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003e60 <AK8963_init+0xdc>
 8003dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	3b80      	subs	r3, #128	; 0x80
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e0c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003e60 <AK8963_init+0xdc>
 8003e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3308      	adds	r3, #8
 8003e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e20:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003e24:	2200      	movs	r2, #0
 8003e26:	210a      	movs	r1, #10
 8003e28:	2018      	movs	r0, #24
 8003e2a:	f7ff fd1a 	bl	8003862 <MPU_writeByte>
	HAL_Delay(10);
 8003e2e:	200a      	movs	r0, #10
 8003e30:	f002 fa08 	bl	8006244 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <AK8963_init+0xe0>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	b25a      	sxtb	r2, r3
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <AK8963_init+0xe4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	210a      	movs	r1, #10
 8003e4c:	2018      	movs	r0, #24
 8003e4e:	f7ff fd08 	bl	8003862 <MPU_writeByte>
	HAL_Delay(10);
 8003e52:	200a      	movs	r0, #10
 8003e54:	f002 f9f6 	bl	8006244 <HAL_Delay>
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	43800000 	.word	0x43800000
 8003e64:	20002d70 	.word	0x20002d70
 8003e68:	20002d48 	.word	0x20002d48

08003e6c <MPU_reset>:

void MPU_reset()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	// reset device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	216b      	movs	r1, #107	; 0x6b
 8003e74:	20d2      	movs	r0, #210	; 0xd2
 8003e76:	f7ff fcf4 	bl	8003862 <MPU_writeByte>
	HAL_Delay(100);
 8003e7a:	2064      	movs	r0, #100	; 0x64
 8003e7c:	f002 f9e2 	bl	8006244 <HAL_Delay>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <MPU_calibrate>:

void MPU_calibrate(float* dest1, float* dest2)
{  
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b098      	sub	sp, #96	; 0x60
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e92:	2300      	movs	r3, #0
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e96:	2300      	movs	r3, #0
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	216b      	movs	r1, #107	; 0x6b
 8003eaa:	20d2      	movs	r0, #210	; 0xd2
 8003eac:	f7ff fcd9 	bl	8003862 <MPU_writeByte>
	HAL_Delay(100);  
 8003eb0:	2064      	movs	r0, #100	; 0x64
 8003eb2:	f002 f9c7 	bl	8006244 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	216b      	movs	r1, #107	; 0x6b
 8003eba:	20d2      	movs	r0, #210	; 0xd2
 8003ebc:	f7ff fcd1 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	216c      	movs	r1, #108	; 0x6c
 8003ec4:	20d2      	movs	r0, #210	; 0xd2
 8003ec6:	f7ff fccc 	bl	8003862 <MPU_writeByte>
	HAL_Delay(200);
 8003eca:	20c8      	movs	r0, #200	; 0xc8
 8003ecc:	f002 f9ba 	bl	8006244 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2138      	movs	r1, #56	; 0x38
 8003ed4:	20d2      	movs	r0, #210	; 0xd2
 8003ed6:	f7ff fcc4 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8003eda:	2200      	movs	r2, #0
 8003edc:	2123      	movs	r1, #35	; 0x23
 8003ede:	20d2      	movs	r0, #210	; 0xd2
 8003ee0:	f7ff fcbf 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	216b      	movs	r1, #107	; 0x6b
 8003ee8:	20d2      	movs	r0, #210	; 0xd2
 8003eea:	f7ff fcba 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2124      	movs	r1, #36	; 0x24
 8003ef2:	20d2      	movs	r0, #210	; 0xd2
 8003ef4:	f7ff fcb5 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003ef8:	2200      	movs	r2, #0
 8003efa:	216a      	movs	r1, #106	; 0x6a
 8003efc:	20d2      	movs	r0, #210	; 0xd2
 8003efe:	f7ff fcb0 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8003f02:	220c      	movs	r2, #12
 8003f04:	216a      	movs	r1, #106	; 0x6a
 8003f06:	20d2      	movs	r0, #210	; 0xd2
 8003f08:	f7ff fcab 	bl	8003862 <MPU_writeByte>
	HAL_Delay(15);
 8003f0c:	200f      	movs	r0, #15
 8003f0e:	f002 f999 	bl	8006244 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003f12:	2201      	movs	r2, #1
 8003f14:	211a      	movs	r1, #26
 8003f16:	20d2      	movs	r0, #210	; 0xd2
 8003f18:	f7ff fca3 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2119      	movs	r1, #25
 8003f20:	20d2      	movs	r0, #210	; 0xd2
 8003f22:	f7ff fc9e 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003f26:	2200      	movs	r2, #0
 8003f28:	211b      	movs	r1, #27
 8003f2a:	20d2      	movs	r0, #210	; 0xd2
 8003f2c:	f7ff fc99 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8003f30:	2200      	movs	r2, #0
 8003f32:	211c      	movs	r1, #28
 8003f34:	20d2      	movs	r0, #210	; 0xd2
 8003f36:	f7ff fc94 	bl	8003862 <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003f3a:	2383      	movs	r3, #131	; 0x83
 8003f3c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8003f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 8003f48:	2240      	movs	r2, #64	; 0x40
 8003f4a:	216a      	movs	r1, #106	; 0x6a
 8003f4c:	20d2      	movs	r0, #210	; 0xd2
 8003f4e:	f7ff fc88 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8003f52:	2278      	movs	r2, #120	; 0x78
 8003f54:	2123      	movs	r1, #35	; 0x23
 8003f56:	20d2      	movs	r0, #210	; 0xd2
 8003f58:	f7ff fc83 	bl	8003862 <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8003f5c:	2028      	movs	r0, #40	; 0x28
 8003f5e:	f002 f971 	bl	8006244 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8003f62:	2200      	movs	r2, #0
 8003f64:	2123      	movs	r1, #35	; 0x23
 8003f66:	20d2      	movs	r0, #210	; 0xd2
 8003f68:	f7ff fc7b 	bl	8003862 <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8003f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f70:	2202      	movs	r2, #2
 8003f72:	2172      	movs	r1, #114	; 0x72
 8003f74:	20d2      	movs	r0, #210	; 0xd2
 8003f76:	f7ff fcad 	bl	80038d4 <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8003f7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	b21a      	sxth	r2, r3
 8003f82:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003f90:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003f94:	4ab0      	ldr	r2, [pc, #704]	; (8004258 <MPU_calibrate+0x3d4>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	08db      	lsrs	r3, r3, #3
 8003f9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003fa6:	e071      	b.n	800408c <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003fa8:	2300      	movs	r3, #0
 8003faa:	82bb      	strh	r3, [r7, #20]
 8003fac:	2300      	movs	r3, #0
 8003fae:	82fb      	strh	r3, [r7, #22]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	833b      	strh	r3, [r7, #24]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	81bb      	strh	r3, [r7, #12]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	81fb      	strh	r3, [r7, #14]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8003fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fc4:	220c      	movs	r2, #12
 8003fc6:	2174      	movs	r1, #116	; 0x74
 8003fc8:	20d2      	movs	r0, #210	; 0xd2
 8003fca:	f7ff fc83 	bl	80038d4 <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8003fce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	b21a      	sxth	r2, r3
 8003fd6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003fda:	b21b      	sxth	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8003fe2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	b21a      	sxth	r2, r3
 8003fea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 8003ff6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	b21a      	sxth	r2, r3
 8003ffe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004002:	b21b      	sxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	b21b      	sxth	r3, r3
 8004008:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800400a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	b21a      	sxth	r2, r3
 8004012:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004016:	b21b      	sxth	r3, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	b21b      	sxth	r3, r3
 800401c:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800401e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	b21a      	sxth	r2, r3
 8004026:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800402a:	b21b      	sxth	r3, r3
 800402c:	4313      	orrs	r3, r2
 800402e:	b21b      	sxth	r3, r3
 8004030:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8004032:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	b21a      	sxth	r2, r3
 800403a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800403e:	b21b      	sxth	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b21b      	sxth	r3, r3
 8004044:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800404c:	4413      	add	r3, r2
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004056:	4413      	add	r3, r2
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004074:	4413      	add	r3, r2
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 8004082:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004086:	3301      	adds	r3, #1
 8004088:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800408c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004094:	429a      	cmp	r2, r3
 8004096:	d387      	bcc.n	8003fa8 <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8004098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800409a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800409e:	fb92 f3f3 	sdiv	r3, r2, r3
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 80040a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 80040b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 80040bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 80040c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 80040d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040da:	fb92 f3f3 	sdiv	r3, r2, r3
 80040de:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dd05      	ble.n	80040f2 <MPU_calibrate+0x26e>
 80040e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
 80040f0:	e004      	b.n	80040fc <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80040f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80040f8:	4413      	add	r3, r2
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	425b      	negs	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	da00      	bge.n	8004106 <MPU_calibrate+0x282>
 8004104:	3303      	adds	r3, #3
 8004106:	109b      	asrs	r3, r3, #2
 8004108:	121b      	asrs	r3, r3, #8
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	425b      	negs	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	da00      	bge.n	800411a <MPU_calibrate+0x296>
 8004118:	3303      	adds	r3, #3
 800411a:	109b      	asrs	r3, r3, #2
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8004122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004124:	425b      	negs	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	da00      	bge.n	800412c <MPU_calibrate+0x2a8>
 800412a:	3303      	adds	r3, #3
 800412c:	109b      	asrs	r3, r3, #2
 800412e:	121b      	asrs	r3, r3, #8
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8004136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004138:	425b      	negs	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	da00      	bge.n	8004140 <MPU_calibrate+0x2bc>
 800413e:	3303      	adds	r3, #3
 8004140:	109b      	asrs	r3, r3, #2
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8004148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414a:	425b      	negs	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	da00      	bge.n	8004152 <MPU_calibrate+0x2ce>
 8004150:	3303      	adds	r3, #3
 8004152:	109b      	asrs	r3, r3, #2
 8004154:	121b      	asrs	r3, r3, #8
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800415c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415e:	425b      	negs	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	da00      	bge.n	8004166 <MPU_calibrate+0x2e2>
 8004164:	3303      	adds	r3, #3
 8004166:	109b      	asrs	r3, r3, #2
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004178:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800418e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004198:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800419c:	ee07 3a90 	vmov	s15, r3
 80041a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ac:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041ba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3308      	adds	r3, #8
 80041ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ce:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	2300      	movs	r3, #0
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80041de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041e2:	2202      	movs	r2, #2
 80041e4:	2177      	movs	r1, #119	; 0x77
 80041e6:	20d2      	movs	r0, #210	; 0xd2
 80041e8:	f7ff fb74 	bl	80038d4 <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80041ec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80041fa:	4313      	orrs	r3, r2
 80041fc:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80041fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004202:	2202      	movs	r2, #2
 8004204:	217a      	movs	r1, #122	; 0x7a
 8004206:	20d2      	movs	r0, #210	; 0xd2
 8004208:	f7ff fb64 	bl	80038d4 <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800420c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	b21b      	sxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800421a:	4313      	orrs	r3, r2
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800421e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004222:	2202      	movs	r2, #2
 8004224:	217d      	movs	r1, #125	; 0x7d
 8004226:	20d2      	movs	r0, #210	; 0xd2
 8004228:	f7ff fb54 	bl	80038d4 <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800422c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	b21b      	sxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800423a:	4313      	orrs	r3, r2
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800423e:	2301      	movs	r3, #1
 8004240:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8004242:	2300      	movs	r3, #0
 8004244:	773b      	strb	r3, [r7, #28]
 8004246:	2300      	movs	r3, #0
 8004248:	777b      	strb	r3, [r7, #29]
 800424a:	2300      	movs	r3, #0
 800424c:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 800424e:	2300      	movs	r3, #0
 8004250:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004254:	e01c      	b.n	8004290 <MPU_calibrate+0x40c>
 8004256:	bf00      	nop
 8004258:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800425c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004266:	4413      	add	r3, r2
 8004268:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800426c:	461a      	mov	r2, r3
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <MPU_calibrate+0x402>
 8004276:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800427a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800427e:	4413      	add	r3, r2
 8004280:	2201      	movs	r2, #1
 8004282:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 8004286:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800428a:	3301      	adds	r3, #1
 800428c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004290:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004294:	2b02      	cmp	r3, #2
 8004296:	d9e1      	bls.n	800425c <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	da00      	bge.n	80042a2 <MPU_calibrate+0x41e>
 80042a0:	3307      	adds	r3, #7
 80042a2:	10db      	asrs	r3, r3, #3
 80042a4:	425b      	negs	r3, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da00      	bge.n	80042b4 <MPU_calibrate+0x430>
 80042b2:	3307      	adds	r3, #7
 80042b4:	10db      	asrs	r3, r3, #3
 80042b6:	425b      	negs	r3, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80042bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da00      	bge.n	80042c6 <MPU_calibrate+0x442>
 80042c4:	3307      	adds	r3, #7
 80042c6:	10db      	asrs	r3, r3, #3
 80042c8:	425b      	negs	r3, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	121b      	asrs	r3, r3, #8
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80042e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042e4:	7f3b      	ldrb	r3, [r7, #28]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	121b      	asrs	r3, r3, #8
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004300:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004304:	7f7b      	ldrb	r3, [r7, #29]
 8004306:	4313      	orrs	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	121b      	asrs	r3, r3, #8
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004320:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004324:	7fbb      	ldrb	r3, [r7, #30]
 8004326:	4313      	orrs	r3, r2
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004338:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004358:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	3304      	adds	r3, #4
 8004368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436c:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800437a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438e:	edc3 7a00 	vstr	s15, [r3]
}
 8004392:	bf00      	nop
 8004394:	3760      	adds	r7, #96	; 0x60
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	0000      	movs	r0, r0
	...

080043a0 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b09e      	sub	sp, #120	; 0x78
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80043a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80043b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80043e8:	2200      	movs	r2, #0
 80043ea:	2119      	movs	r1, #25
 80043ec:	20d2      	movs	r0, #210	; 0xd2
 80043ee:	f7ff fa38 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80043f2:	2202      	movs	r2, #2
 80043f4:	211a      	movs	r1, #26
 80043f6:	20d2      	movs	r0, #210	; 0xd2
 80043f8:	f7ff fa33 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 80043fc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	211b      	movs	r1, #27
 8004408:	20d2      	movs	r0, #210	; 0xd2
 800440a:	f7ff fa2a 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800440e:	2202      	movs	r2, #2
 8004410:	211d      	movs	r1, #29
 8004412:	20d2      	movs	r0, #210	; 0xd2
 8004414:	f7ff fa25 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 8004418:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	211c      	movs	r1, #28
 8004424:	20d2      	movs	r0, #210	; 0xd2
 8004426:	f7ff fa1c 	bl	8003862 <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 800442a:	2300      	movs	r3, #0
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
 800442e:	e058      	b.n	80044e2 <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8004430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004434:	2206      	movs	r2, #6
 8004436:	213b      	movs	r1, #59	; 0x3b
 8004438:	20d2      	movs	r0, #210	; 0xd2
 800443a:	f7ff fa4b 	bl	80038d4 <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004444:	0212      	lsls	r2, r2, #8
 8004446:	b211      	sxth	r1, r2
 8004448:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800444c:	b212      	sxth	r2, r2
 800444e:	430a      	orrs	r2, r1
 8004450:	b212      	sxth	r2, r2
 8004452:	4413      	add	r3, r2
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800445c:	0212      	lsls	r2, r2, #8
 800445e:	b211      	sxth	r1, r2
 8004460:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004464:	b212      	sxth	r2, r2
 8004466:	430a      	orrs	r2, r1
 8004468:	b212      	sxth	r2, r2
 800446a:	4413      	add	r3, r2
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800446e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004470:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004474:	0212      	lsls	r2, r2, #8
 8004476:	b211      	sxth	r1, r2
 8004478:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800447c:	b212      	sxth	r2, r2
 800447e:	430a      	orrs	r2, r1
 8004480:	b212      	sxth	r2, r2
 8004482:	4413      	add	r3, r2
 8004484:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8004486:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800448a:	2206      	movs	r2, #6
 800448c:	2143      	movs	r1, #67	; 0x43
 800448e:	20d2      	movs	r0, #210	; 0xd2
 8004490:	f7ff fa20 	bl	80038d4 <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8004494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004496:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800449a:	0212      	lsls	r2, r2, #8
 800449c:	b211      	sxth	r1, r2
 800449e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80044a2:	b212      	sxth	r2, r2
 80044a4:	430a      	orrs	r2, r1
 80044a6:	b212      	sxth	r2, r2
 80044a8:	4413      	add	r3, r2
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80044b2:	0212      	lsls	r2, r2, #8
 80044b4:	b211      	sxth	r1, r2
 80044b6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80044ba:	b212      	sxth	r2, r2
 80044bc:	430a      	orrs	r2, r1
 80044be:	b212      	sxth	r2, r2
 80044c0:	4413      	add	r3, r2
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80044ca:	0212      	lsls	r2, r2, #8
 80044cc:	b211      	sxth	r1, r2
 80044ce:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80044d2:	b212      	sxth	r2, r2
 80044d4:	430a      	orrs	r2, r1
 80044d6:	b212      	sxth	r2, r2
 80044d8:	4413      	add	r3, r2
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 80044dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044de:	3301      	adds	r3, #1
 80044e0:	677b      	str	r3, [r7, #116]	; 0x74
 80044e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e4:	2bc7      	cmp	r3, #199	; 0xc7
 80044e6:	dda3      	ble.n	8004430 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	673b      	str	r3, [r7, #112]	; 0x70
 80044ec:	e02a      	b.n	8004544 <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80044ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80044f6:	4413      	add	r3, r2
 80044f8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80044fc:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <MPU_SelfTest+0x288>)
 80044fe:	fb82 1203 	smull	r1, r2, r2, r3
 8004502:	1192      	asrs	r2, r2, #6
 8004504:	17db      	asrs	r3, r3, #31
 8004506:	1ad2      	subs	r2, r2, r3
 8004508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004510:	440b      	add	r3, r1
 8004512:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 8004516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800451e:	4413      	add	r3, r2
 8004520:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004524:	4a40      	ldr	r2, [pc, #256]	; (8004628 <MPU_SelfTest+0x288>)
 8004526:	fb82 1203 	smull	r1, r2, r2, r3
 800452a:	1192      	asrs	r2, r2, #6
 800452c:	17db      	asrs	r3, r3, #31
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004538:	440b      	add	r3, r1
 800453a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	3301      	adds	r3, #1
 8004542:	673b      	str	r3, [r7, #112]	; 0x70
 8004544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004546:	2b02      	cmp	r3, #2
 8004548:	ddd1      	ble.n	80044ee <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800454a:	22e0      	movs	r2, #224	; 0xe0
 800454c:	211c      	movs	r1, #28
 800454e:	20d2      	movs	r0, #210	; 0xd2
 8004550:	f7ff f987 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004554:	22e0      	movs	r2, #224	; 0xe0
 8004556:	211b      	movs	r1, #27
 8004558:	20d2      	movs	r0, #210	; 0xd2
 800455a:	f7ff f982 	bl	8003862 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800455e:	2019      	movs	r0, #25
 8004560:	f001 fe70 	bl	8006244 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 8004564:	2300      	movs	r3, #0
 8004566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004568:	e058      	b.n	800461c <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 800456a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800456e:	2206      	movs	r2, #6
 8004570:	213b      	movs	r1, #59	; 0x3b
 8004572:	20d2      	movs	r0, #210	; 0xd2
 8004574:	f7ff f9ae 	bl	80038d4 <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800457e:	0212      	lsls	r2, r2, #8
 8004580:	b211      	sxth	r1, r2
 8004582:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004586:	b212      	sxth	r2, r2
 8004588:	430a      	orrs	r2, r1
 800458a:	b212      	sxth	r2, r2
 800458c:	4413      	add	r3, r2
 800458e:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004596:	0212      	lsls	r2, r2, #8
 8004598:	b211      	sxth	r1, r2
 800459a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800459e:	b212      	sxth	r2, r2
 80045a0:	430a      	orrs	r2, r1
 80045a2:	b212      	sxth	r2, r2
 80045a4:	4413      	add	r3, r2
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80045ae:	0212      	lsls	r2, r2, #8
 80045b0:	b211      	sxth	r1, r2
 80045b2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80045b6:	b212      	sxth	r2, r2
 80045b8:	430a      	orrs	r2, r1
 80045ba:	b212      	sxth	r2, r2
 80045bc:	4413      	add	r3, r2
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 80045c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045c4:	2206      	movs	r2, #6
 80045c6:	2143      	movs	r1, #67	; 0x43
 80045c8:	20d2      	movs	r0, #210	; 0xd2
 80045ca:	f7ff f983 	bl	80038d4 <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80045d4:	0212      	lsls	r2, r2, #8
 80045d6:	b211      	sxth	r1, r2
 80045d8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80045dc:	b212      	sxth	r2, r2
 80045de:	430a      	orrs	r2, r1
 80045e0:	b212      	sxth	r2, r2
 80045e2:	4413      	add	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80045ec:	0212      	lsls	r2, r2, #8
 80045ee:	b211      	sxth	r1, r2
 80045f0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80045f4:	b212      	sxth	r2, r2
 80045f6:	430a      	orrs	r2, r1
 80045f8:	b212      	sxth	r2, r2
 80045fa:	4413      	add	r3, r2
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004604:	0212      	lsls	r2, r2, #8
 8004606:	b211      	sxth	r1, r2
 8004608:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800460c:	b212      	sxth	r2, r2
 800460e:	430a      	orrs	r2, r1
 8004610:	b212      	sxth	r2, r2
 8004612:	4413      	add	r3, r2
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8004616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004618:	3301      	adds	r3, #1
 800461a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	2bc7      	cmp	r3, #199	; 0xc7
 8004620:	dda3      	ble.n	800456a <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8004622:	2300      	movs	r3, #0
 8004624:	66bb      	str	r3, [r7, #104]	; 0x68
 8004626:	e02c      	b.n	8004682 <MPU_SelfTest+0x2e2>
 8004628:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 800462c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004634:	4413      	add	r3, r2
 8004636:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800463a:	4add      	ldr	r2, [pc, #884]	; (80049b0 <MPU_SelfTest+0x610>)
 800463c:	fb82 1203 	smull	r1, r2, r2, r3
 8004640:	1192      	asrs	r2, r2, #6
 8004642:	17db      	asrs	r3, r3, #31
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800464e:	440b      	add	r3, r1
 8004650:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 8004654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800465c:	4413      	add	r3, r2
 800465e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004662:	4ad3      	ldr	r2, [pc, #844]	; (80049b0 <MPU_SelfTest+0x610>)
 8004664:	fb82 1203 	smull	r1, r2, r2, r3
 8004668:	1192      	asrs	r2, r2, #6
 800466a:	17db      	asrs	r3, r3, #31
 800466c:	1ad2      	subs	r2, r2, r3
 800466e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004676:	440b      	add	r3, r1
 8004678:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 800467c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467e:	3301      	adds	r3, #1
 8004680:	66bb      	str	r3, [r7, #104]	; 0x68
 8004682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004684:	2b02      	cmp	r3, #2
 8004686:	ddd1      	ble.n	800462c <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8004688:	2200      	movs	r2, #0
 800468a:	211c      	movs	r1, #28
 800468c:	20d2      	movs	r0, #210	; 0xd2
 800468e:	f7ff f8e8 	bl	8003862 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 8004692:	2200      	movs	r2, #0
 8004694:	211b      	movs	r1, #27
 8004696:	20d2      	movs	r0, #210	; 0xd2
 8004698:	f7ff f8e3 	bl	8003862 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800469c:	2019      	movs	r0, #25
 800469e:	f001 fdd1 	bl	8006244 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80046a2:	210d      	movs	r1, #13
 80046a4:	20d2      	movs	r0, #210	; 0xd2
 80046a6:	f7ff f8f8 	bl	800389a <MPU_readByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80046b0:	210e      	movs	r1, #14
 80046b2:	20d2      	movs	r0, #210	; 0xd2
 80046b4:	f7ff f8f1 	bl	800389a <MPU_readByte>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80046be:	210f      	movs	r1, #15
 80046c0:	20d2      	movs	r0, #210	; 0xd2
 80046c2:	f7ff f8ea 	bl	800389a <MPU_readByte>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 80046cc:	2100      	movs	r1, #0
 80046ce:	20d2      	movs	r0, #210	; 0xd2
 80046d0:	f7ff f8e3 	bl	800389a <MPU_readByte>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 80046da:	2101      	movs	r1, #1
 80046dc:	20d2      	movs	r0, #210	; 0xd2
 80046de:	f7ff f8dc 	bl	800389a <MPU_readByte>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 80046e8:	2102      	movs	r1, #2
 80046ea:	20d2      	movs	r0, #210	; 0xd2
 80046ec:	f7ff f8d5 	bl	800389a <MPU_readByte>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80046f6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80046fa:	f640 223c 	movw	r2, #2620	; 0xa3c
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470a:	ee17 0a90 	vmov	r0, s15
 800470e:	f7fb ff2b 	bl	8000568 <__aeabi_f2d>
 8004712:	4604      	mov	r4, r0
 8004714:	460d      	mov	r5, r1
 8004716:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	ee17 0a90 	vmov	r0, s15
 8004726:	f7fb ff1f 	bl	8000568 <__aeabi_f2d>
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	4ba1      	ldr	r3, [pc, #644]	; (80049b4 <MPU_SelfTest+0x614>)
 8004730:	f7fb fdba 	bl	80002a8 <__aeabi_dsub>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	ec43 2b17 	vmov	d7, r2, r3
 800473c:	eeb0 1a47 	vmov.f32	s2, s14
 8004740:	eef0 1a67 	vmov.f32	s3, s15
 8004744:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80049a8 <MPU_SelfTest+0x608>
 8004748:	f016 fb50 	bl	801adec <pow>
 800474c:	ec53 2b10 	vmov	r2, r3, d0
 8004750:	4620      	mov	r0, r4
 8004752:	4629      	mov	r1, r5
 8004754:	f7fb ff60 	bl	8000618 <__aeabi_dmul>
 8004758:	4603      	mov	r3, r0
 800475a:	460c      	mov	r4, r1
 800475c:	4618      	mov	r0, r3
 800475e:	4621      	mov	r1, r4
 8004760:	f7fc fa52 	bl	8000c08 <__aeabi_d2f>
 8004764:	4603      	mov	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8004768:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800476c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477c:	ee17 0a90 	vmov	r0, s15
 8004780:	f7fb fef2 	bl	8000568 <__aeabi_f2d>
 8004784:	4604      	mov	r4, r0
 8004786:	460d      	mov	r5, r1
 8004788:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004794:	ee17 0a90 	vmov	r0, s15
 8004798:	f7fb fee6 	bl	8000568 <__aeabi_f2d>
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	4b84      	ldr	r3, [pc, #528]	; (80049b4 <MPU_SelfTest+0x614>)
 80047a2:	f7fb fd81 	bl	80002a8 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	ec43 2b17 	vmov	d7, r2, r3
 80047ae:	eeb0 1a47 	vmov.f32	s2, s14
 80047b2:	eef0 1a67 	vmov.f32	s3, s15
 80047b6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80049a8 <MPU_SelfTest+0x608>
 80047ba:	f016 fb17 	bl	801adec <pow>
 80047be:	ec53 2b10 	vmov	r2, r3, d0
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fb ff27 	bl	8000618 <__aeabi_dmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	4618      	mov	r0, r3
 80047d0:	4621      	mov	r1, r4
 80047d2:	f7fc fa19 	bl	8000c08 <__aeabi_d2f>
 80047d6:	4603      	mov	r3, r0
 80047d8:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 80047da:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80047de:	f640 223c 	movw	r2, #2620	; 0xa3c
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ee:	ee17 0a90 	vmov	r0, s15
 80047f2:	f7fb feb9 	bl	8000568 <__aeabi_f2d>
 80047f6:	4604      	mov	r4, r0
 80047f8:	460d      	mov	r5, r1
 80047fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	ee17 0a90 	vmov	r0, s15
 800480a:	f7fb fead 	bl	8000568 <__aeabi_f2d>
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <MPU_SelfTest+0x614>)
 8004814:	f7fb fd48 	bl	80002a8 <__aeabi_dsub>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	ec43 2b17 	vmov	d7, r2, r3
 8004820:	eeb0 1a47 	vmov.f32	s2, s14
 8004824:	eef0 1a67 	vmov.f32	s3, s15
 8004828:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80049a8 <MPU_SelfTest+0x608>
 800482c:	f016 fade 	bl	801adec <pow>
 8004830:	ec53 2b10 	vmov	r2, r3, d0
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb feee 	bl	8000618 <__aeabi_dmul>
 800483c:	4603      	mov	r3, r0
 800483e:	460c      	mov	r4, r1
 8004840:	4618      	mov	r0, r3
 8004842:	4621      	mov	r1, r4
 8004844:	f7fc f9e0 	bl	8000c08 <__aeabi_d2f>
 8004848:	4603      	mov	r3, r0
 800484a:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800484c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004850:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004860:	ee17 0a90 	vmov	r0, s15
 8004864:	f7fb fe80 	bl	8000568 <__aeabi_f2d>
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
 800486c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	ee17 0a90 	vmov	r0, s15
 800487c:	f7fb fe74 	bl	8000568 <__aeabi_f2d>
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <MPU_SelfTest+0x614>)
 8004886:	f7fb fd0f 	bl	80002a8 <__aeabi_dsub>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	ec43 2b17 	vmov	d7, r2, r3
 8004892:	eeb0 1a47 	vmov.f32	s2, s14
 8004896:	eef0 1a67 	vmov.f32	s3, s15
 800489a:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80049a8 <MPU_SelfTest+0x608>
 800489e:	f016 faa5 	bl	801adec <pow>
 80048a2:	ec53 2b10 	vmov	r2, r3, d0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fb feb5 	bl	8000618 <__aeabi_dmul>
 80048ae:	4603      	mov	r3, r0
 80048b0:	460c      	mov	r4, r1
 80048b2:	4618      	mov	r0, r3
 80048b4:	4621      	mov	r1, r4
 80048b6:	f7fc f9a7 	bl	8000c08 <__aeabi_d2f>
 80048ba:	4603      	mov	r3, r0
 80048bc:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80048be:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80048c2:	f640 223c 	movw	r2, #2620	; 0xa3c
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048d2:	ee17 0a90 	vmov	r0, s15
 80048d6:	f7fb fe47 	bl	8000568 <__aeabi_f2d>
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	ee17 0a90 	vmov	r0, s15
 80048ee:	f7fb fe3b 	bl	8000568 <__aeabi_f2d>
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <MPU_SelfTest+0x614>)
 80048f8:	f7fb fcd6 	bl	80002a8 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	ec43 2b17 	vmov	d7, r2, r3
 8004904:	eeb0 1a47 	vmov.f32	s2, s14
 8004908:	eef0 1a67 	vmov.f32	s3, s15
 800490c:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80049a8 <MPU_SelfTest+0x608>
 8004910:	f016 fa6c 	bl	801adec <pow>
 8004914:	ec53 2b10 	vmov	r2, r3, d0
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fb fe7c 	bl	8000618 <__aeabi_dmul>
 8004920:	4603      	mov	r3, r0
 8004922:	460c      	mov	r4, r1
 8004924:	4618      	mov	r0, r3
 8004926:	4621      	mov	r1, r4
 8004928:	f7fc f96e 	bl	8000c08 <__aeabi_d2f>
 800492c:	4603      	mov	r3, r0
 800492e:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8004930:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004934:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004944:	ee17 0a90 	vmov	r0, s15
 8004948:	f7fb fe0e 	bl	8000568 <__aeabi_f2d>
 800494c:	4604      	mov	r4, r0
 800494e:	460d      	mov	r5, r1
 8004950:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	ee17 0a90 	vmov	r0, s15
 8004960:	f7fb fe02 	bl	8000568 <__aeabi_f2d>
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <MPU_SelfTest+0x614>)
 800496a:	f7fb fc9d 	bl	80002a8 <__aeabi_dsub>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	ec43 2b17 	vmov	d7, r2, r3
 8004976:	eeb0 1a47 	vmov.f32	s2, s14
 800497a:	eef0 1a67 	vmov.f32	s3, s15
 800497e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80049a8 <MPU_SelfTest+0x608>
 8004982:	f016 fa33 	bl	801adec <pow>
 8004986:	ec53 2b10 	vmov	r2, r3, d0
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fb fe43 	bl	8000618 <__aeabi_dmul>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	4618      	mov	r0, r3
 8004998:	4621      	mov	r1, r4
 800499a:	f7fc f935 	bl	8000c08 <__aeabi_d2f>
 800499e:	4603      	mov	r3, r0
 80049a0:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	667b      	str	r3, [r7, #100]	; 0x64
 80049a6:	e096      	b.n	8004ad6 <MPU_SelfTest+0x736>
 80049a8:	c28f5c29 	.word	0xc28f5c29
 80049ac:	3ff028f5 	.word	0x3ff028f5
 80049b0:	51eb851f 	.word	0x51eb851f
 80049b4:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 80049b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80049c0:	4413      	add	r3, r2
 80049c2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80049c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80049ce:	440b      	add	r3, r1
 80049d0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049de:	ee17 0a90 	vmov	r0, s15
 80049e2:	f7fb fdc1 	bl	8000568 <__aeabi_f2d>
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <MPU_SelfTest+0x748>)
 80049ec:	f7fb fe14 	bl	8000618 <__aeabi_dmul>
 80049f0:	4603      	mov	r3, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	4625      	mov	r5, r4
 80049f6:	461c      	mov	r4, r3
 80049f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004a00:	4413      	add	r3, r2
 8004a02:	3b6c      	subs	r3, #108	; 0x6c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fdae 	bl	8000568 <__aeabi_f2d>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4620      	mov	r0, r4
 8004a12:	4629      	mov	r1, r5
 8004a14:	f7fb ff2a 	bl	800086c <__aeabi_ddiv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	4621      	mov	r1, r4
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <MPU_SelfTest+0x748>)
 8004a26:	f7fb fc3f 	bl	80002a8 <__aeabi_dsub>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4621      	mov	r1, r4
 8004a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	18d4      	adds	r4, r2, r3
 8004a3a:	f7fc f8e5 	bl	8000c08 <__aeabi_d2f>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004a58:	440b      	add	r3, r1
 8004a5a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a68:	ee17 0a90 	vmov	r0, s15
 8004a6c:	f7fb fd7c 	bl	8000568 <__aeabi_f2d>
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <MPU_SelfTest+0x748>)
 8004a76:	f7fb fdcf 	bl	8000618 <__aeabi_dmul>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	4625      	mov	r5, r4
 8004a80:	461c      	mov	r4, r3
 8004a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a84:	3303      	adds	r3, #3
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b6c      	subs	r3, #108	; 0x6c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fd68 	bl	8000568 <__aeabi_f2d>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb fee4 	bl	800086c <__aeabi_ddiv>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	4621      	mov	r1, r4
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <MPU_SelfTest+0x748>)
 8004ab2:	f7fb fbf9 	bl	80002a8 <__aeabi_dsub>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	4618      	mov	r0, r3
 8004abc:	4621      	mov	r1, r4
 8004abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac0:	3303      	adds	r3, #3
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	18d4      	adds	r4, r2, r3
 8004ac8:	f7fc f89e 	bl	8000c08 <__aeabi_d2f>
 8004acc:	4603      	mov	r3, r0
 8004ace:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8004ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f77f af6d 	ble.w	80049b8 <MPU_SelfTest+0x618>
	}
}
 8004ade:	bf00      	nop
 8004ae0:	3778      	adds	r7, #120	; 0x78
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40590000 	.word	0x40590000

08004aec <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004af8:	2300      	movs	r3, #0
 8004afa:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004afc:	2300      	movs	r3, #0
 8004afe:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	2300      	movs	r3, #0
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8004b0c:	4a67      	ldr	r2, [pc, #412]	; (8004cac <MPU_calibrateMag+0x1c0>)
 8004b0e:	f107 031c 	add.w	r3, r7, #28
 8004b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b16:	6018      	str	r0, [r3, #0]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	8019      	strh	r1, [r3, #0]
 8004b1c:	4a64      	ldr	r2, [pc, #400]	; (8004cb0 <MPU_calibrateMag+0x1c4>)
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b26:	6018      	str	r0, [r3, #0]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	8019      	strh	r1, [r3, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	81bb      	strh	r3, [r7, #12]
 8004b30:	2300      	movs	r3, #0
 8004b32:	81fb      	strh	r3, [r7, #14]
 8004b34:	2300      	movs	r3, #0
 8004b36:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8004b38:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004b3c:	f001 fb82 	bl	8006244 <HAL_Delay>

	sample_count = 64;
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b48:	e051      	b.n	8004bee <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 8004b4a:	f107 030c 	add.w	r3, r7, #12
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe ffd2 	bl	8003af8 <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b58:	e040      	b.n	8004bdc <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8004b5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004b62:	4413      	add	r3, r2
 8004b64:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004b68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004b70:	440b      	add	r3, r1
 8004b72:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	dd0e      	ble.n	8004b98 <MPU_calibrateMag+0xac>
 8004b7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b7c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004b84:	440b      	add	r3, r1
 8004b86:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004b8a:	0053      	lsls	r3, r2, #1
 8004b8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004b90:	4413      	add	r3, r2
 8004b92:	460a      	mov	r2, r1
 8004b94:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8004b98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004bae:	440b      	add	r3, r1
 8004bb0:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	da0e      	bge.n	8004bd6 <MPU_calibrateMag+0xea>
 8004bb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004bc8:	0053      	lsls	r3, r2, #1
 8004bca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004bce:	4413      	add	r3, r2
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 8004bd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bd8:	3301      	adds	r3, #1
 8004bda:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d9bb      	bls.n	8004b5a <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8004be2:	2087      	movs	r0, #135	; 0x87
 8004be4:	f001 fb2e 	bl	8006244 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 8004be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bea:	3301      	adds	r3, #1
 8004bec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004bee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004bf0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d3a9      	bcc.n	8004b4a <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8004bf6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c00:	4413      	add	r3, r2
 8004c02:	0fda      	lsrs	r2, r3, #31
 8004c04:	4413      	add	r3, r2
 8004c06:	105b      	asrs	r3, r3, #1
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8004c0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c14:	4413      	add	r3, r2
 8004c16:	0fda      	lsrs	r2, r3, #31
 8004c18:	4413      	add	r3, r2
 8004c1a:	105b      	asrs	r3, r3, #1
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8004c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004c28:	4413      	add	r3, r2
 8004c2a:	0fda      	lsrs	r2, r3, #31
 8004c2c:	4413      	add	r3, r2
 8004c2e:	105b      	asrs	r3, r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <MPU_calibrateMag+0x1c8>)
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <MPU_calibrateMag+0x1cc>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c60:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <MPU_calibrateMag+0x1c8>)
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <MPU_calibrateMag+0x1cc>)
 8004c6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c78:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <MPU_calibrateMag+0x1c8>)
 8004c88:	edd3 7a00 	vldr	s15, [r3]
 8004c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <MPU_calibrateMag+0x1cc>)
 8004c92:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc3 7a00 	vstr	s15, [r3]
}
 8004ca2:	bf00      	nop
 8004ca4:	3738      	adds	r7, #56	; 0x38
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	0801dba4 	.word	0x0801dba4
 8004cb0:	0801dbac 	.word	0x0801dbac
 8004cb4:	20002dd8 	.word	0x20002dd8
 8004cb8:	20002e00 	.word	0x20002e00

08004cbc <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b0b2      	sub	sp, #200	; 0xc8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004cc6:	edc7 0a08 	vstr	s1, [r7, #32]
 8004cca:	ed87 1a07 	vstr	s2, [r7, #28]
 8004cce:	edc7 1a06 	vstr	s3, [r7, #24]
 8004cd2:	ed87 2a05 	vstr	s4, [r7, #20]
 8004cd6:	edc7 2a04 	vstr	s5, [r7, #16]
 8004cda:	ed87 3a03 	vstr	s6, [r7, #12]
 8004cde:	edc7 3a02 	vstr	s7, [r7, #8]
 8004ce2:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8004ce6:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <MadgwickQuaternionUpdate+0x214>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cee:	4b78      	ldr	r3, [pc, #480]	; (8004ed0 <MadgwickQuaternionUpdate+0x214>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf6:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <MadgwickQuaternionUpdate+0x214>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004cfe:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <MadgwickQuaternionUpdate+0x214>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8004d06:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8004d12:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004d16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d1a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 8004d1e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004d22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d26:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 8004d2a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d32:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8004d36:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d3e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8004d4a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004d4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d52:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8004d5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d62:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8004d6e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d72:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8004d7e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d82:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8004d8e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d92:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8004d9e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004da2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8004dae:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004db2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8004dbe:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004dc2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8004dce:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004dd2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8004dde:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004de2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 8004dee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004df2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8004dfe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004e02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004e06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e0a:	edd7 6a08 	vldr	s13, [r7, #32]
 8004e0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e2e:	f016 f94d 	bl	801b0cc <sqrtf>
 8004e32:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004e36:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e42:	f000 85cc 	beq.w	80059de <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e52:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8004e56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004e5a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8004e66:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e6a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8004e76:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e7a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8004e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e92:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ea2:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb6:	f016 f909 	bl	801b0cc <sqrtf>
 8004eba:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004ebe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004ec2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	f000 858a 	beq.w	80059e2 <MadgwickQuaternionUpdate+0xd26>
 8004ece:	e001      	b.n	8004ed4 <MadgwickQuaternionUpdate+0x218>
 8004ed0:	20002dec 	.word	0x20002dec
	norm = 1.0f/norm;
 8004ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8004ee4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ee8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8004ef4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ef8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f00:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8004f04:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8004f14:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f24:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8004f28:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f30:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f38:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 8004f3c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004f40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f44:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8004f50:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f60:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8004f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f68:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f70:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8004f74:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f80:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8004f84:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f90:	edd7 6a03 	vldr	s13, [r7, #12]
 8004f94:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fa0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8004fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fac:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fb8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8004fbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fc4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fd0:	edd7 6a03 	vldr	s13, [r7, #12]
 8004fd4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fe0:	edd7 6a03 	vldr	s13, [r7, #12]
 8004fe4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8004ff4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004ff8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005000:	edd7 6a02 	vldr	s13, [r7, #8]
 8005004:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800500c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005010:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8005014:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800501c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005020:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8005024:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800502c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005030:	edd7 6a02 	vldr	s13, [r7, #8]
 8005034:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800503c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005040:	edd7 6a02 	vldr	s13, [r7, #8]
 8005044:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800504c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005050:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005054:	edd7 7a01 	vldr	s15, [r7, #4]
 8005058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800505c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005068:	edd7 6a02 	vldr	s13, [r7, #8]
 800506c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005078:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 800507c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005080:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005088:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800508c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005098:	eeb0 0a67 	vmov.f32	s0, s15
 800509c:	f016 f816 	bl	801b0cc <sqrtf>
 80050a0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80050a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80050a8:	eeb1 7a67 	vneg.f32	s14, s15
 80050ac:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80050b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050b4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80050b8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80050bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80050c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050d4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80050d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80050dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050e4:	edd7 6a01 	vldr	s13, [r7, #4]
 80050e8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80050ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050f4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80050f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005100:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800510c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005110:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800511c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005120:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8005130:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005138:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 800513c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005140:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005144:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005148:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800514c:	eeb1 7a67 	vneg.f32	s14, s15
 8005150:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005154:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005158:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800515c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005160:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005164:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800516c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005170:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005174:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005178:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800517c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005180:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005184:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800518c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005190:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005194:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800519c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80051a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80051a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80051a8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80051ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80051b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80051b8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80051bc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80051c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80051c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80051c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80051cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80051d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80051d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80051d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051e4:	eef1 6a67 	vneg.f32	s13, s15
 80051e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80051ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051f0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80051f4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80051f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005200:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005204:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005208:	ee36 6a67 	vsub.f32	s12, s12, s15
 800520c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005210:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005214:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005218:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800521c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005220:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005224:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005228:	ee36 6a27 	vadd.f32	s12, s12, s15
 800522c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005230:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800523c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005240:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005248:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800524c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005250:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005254:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005258:	ee26 6a27 	vmul.f32	s12, s12, s15
 800525c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005260:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005264:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005268:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800526c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005270:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005274:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005278:	ee36 6a27 	vadd.f32	s12, s12, s15
 800527c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005280:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005290:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005294:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005298:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800529c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80052ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052b0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80052b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80052b8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80052bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80052c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80052c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80052c8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80052cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052d4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80052d8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80052dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80052e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80052e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80052ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80052f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80052f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80052fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005300:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800530c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005310:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005318:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800531c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005320:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005324:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005328:	ee36 6a67 	vsub.f32	s12, s12, s15
 800532c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005330:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005334:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005338:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800533c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005340:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005344:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005348:	ee36 6a27 	vadd.f32	s12, s12, s15
 800534c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005350:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800535c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005360:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005364:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005368:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800536c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005374:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005378:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800537c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005380:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005384:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005388:	ee26 6a27 	vmul.f32	s12, s12, s15
 800538c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005390:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005394:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005398:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800539c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80053a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80053a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80053ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053b4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80053b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80053bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053c0:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 80053c4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80053c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80053cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80053d0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80053d4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80053d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80053e4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80053e8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80053f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005400:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005404:	edd7 7a01 	vldr	s15, [r7, #4]
 8005408:	ee76 7a67 	vsub.f32	s15, s12, s15
 800540c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005414:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005418:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800541c:	eeb1 7a67 	vneg.f32	s14, s15
 8005420:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005424:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005428:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800542c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005430:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005434:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800543c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005440:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005444:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005448:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800544c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005454:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800545c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005460:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005464:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005468:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800546c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005478:	ee36 6a67 	vsub.f32	s12, s12, s15
 800547c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005484:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005488:	edd7 7a07 	vldr	s15, [r7, #28]
 800548c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005498:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800549c:	eef1 6a67 	vneg.f32	s13, s15
 80054a0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80054a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054a8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80054ac:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80054b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80054b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80054b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80054bc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80054c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80054c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80054d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80054d4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80054d8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80054dc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80054e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80054e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80054e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80054f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80054f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054fc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005500:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005504:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005508:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800550c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005510:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005514:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005518:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800551c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005520:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005524:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005528:	ee26 6a27 	vmul.f32	s12, s12, s15
 800552c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005530:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005534:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005538:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800553c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005540:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005544:	edd7 7a02 	vldr	s15, [r7, #8]
 8005548:	ee76 7a67 	vsub.f32	s15, s12, s15
 800554c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005554:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005558:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800555c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005560:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8005564:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005568:	ee66 7a27 	vmul.f32	s15, s12, s15
 800556c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005570:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8005574:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005578:	ee36 6a27 	vadd.f32	s12, s12, s15
 800557c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005580:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005584:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005588:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800558c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005590:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005594:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005598:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800559c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80055a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80055b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80055c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80055cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80055d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055d8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80055dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80055e0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80055e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80055ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80055f0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80055f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005600:	eef1 6a67 	vneg.f32	s13, s15
 8005604:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005608:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800560c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005610:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005614:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005618:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800561c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005620:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005624:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005628:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800562c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005630:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005634:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005638:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800563c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005640:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005644:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005648:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800564c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005650:	edd7 7a03 	vldr	s15, [r7, #12]
 8005654:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005660:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005664:	eef1 6a67 	vneg.f32	s13, s15
 8005668:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800566c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005670:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005674:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800567c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005680:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005684:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005688:	ee36 6a67 	vsub.f32	s12, s12, s15
 800568c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005694:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005698:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800569c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80056a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80056a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80056b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80056b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056bc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80056c0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80056c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056c8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80056cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80056d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80056d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80056dc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80056e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80056e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80056e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80056ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80056f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80056f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005700:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8005710:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005714:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800571c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005720:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800572c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005730:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800573c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005740:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574c:	eeb0 0a67 	vmov.f32	s0, s15
 8005750:	f015 fcbc 	bl	801b0cc <sqrtf>
 8005754:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005764:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8005768:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800576c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005774:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8005778:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800577c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005784:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8005788:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800578c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8005798:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800579c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80057a8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80057ac:	eeb1 7a67 	vneg.f32	s14, s15
 80057b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80057b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057b8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80057bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80057c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80057cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80057d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80057dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057e0:	4b82      	ldr	r3, [pc, #520]	; (80059ec <MadgwickQuaternionUpdate+0xd30>)
 80057e2:	edd3 6a00 	vldr	s13, [r3]
 80057e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80057ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80057f6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80057fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80057fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005802:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005806:	edd7 7a04 	vldr	s15, [r7, #16]
 800580a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800580e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005812:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005816:	edd7 7a05 	vldr	s15, [r7, #20]
 800581a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800581e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005822:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005826:	ee27 7a87 	vmul.f32	s14, s15, s14
 800582a:	4b70      	ldr	r3, [pc, #448]	; (80059ec <MadgwickQuaternionUpdate+0xd30>)
 800582c:	edd3 6a00 	vldr	s13, [r3]
 8005830:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800583c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8005840:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005844:	edd7 7a05 	vldr	s15, [r7, #20]
 8005848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005850:	edd7 7a04 	vldr	s15, [r7, #16]
 8005854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800585c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005860:	edd7 7a06 	vldr	s15, [r7, #24]
 8005864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005874:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <MadgwickQuaternionUpdate+0xd30>)
 8005876:	edd3 6a00 	vldr	s13, [r3]
 800587a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800587e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005886:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800588a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800588e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005896:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800589a:	edd7 7a05 	vldr	s15, [r7, #20]
 800589e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80058aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80058ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80058ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058be:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <MadgwickQuaternionUpdate+0xd30>)
 80058c0:	edd3 6a00 	vldr	s13, [r3]
 80058c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80058c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 80058d4:	4b46      	ldr	r3, [pc, #280]	; (80059f0 <MadgwickQuaternionUpdate+0xd34>)
 80058d6:	ed93 7a00 	vldr	s14, [r3]
 80058da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80058e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058ea:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 80058ee:	4b40      	ldr	r3, [pc, #256]	; (80059f0 <MadgwickQuaternionUpdate+0xd34>)
 80058f0:	ed93 7a00 	vldr	s14, [r3]
 80058f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80058f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005904:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 8005908:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <MadgwickQuaternionUpdate+0xd34>)
 800590a:	ed93 7a00 	vldr	s14, [r3]
 800590e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800591a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800591e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 8005922:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <MadgwickQuaternionUpdate+0xd34>)
 8005924:	ed93 7a00 	vldr	s14, [r3]
 8005928:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800592c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005930:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005938:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800593c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005940:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005948:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800594c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005958:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800595c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005968:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800596c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005978:	eeb0 0a67 	vmov.f32	s0, s15
 800597c:	f015 fba6 	bl	801b0cc <sqrtf>
 8005980:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005988:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800598c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005990:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 8005994:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005998:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800599c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <MadgwickQuaternionUpdate+0xd38>)
 80059a2:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 80059a6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80059aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <MadgwickQuaternionUpdate+0xd38>)
 80059b4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 80059b8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80059bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80059c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <MadgwickQuaternionUpdate+0xd38>)
 80059c6:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 80059ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <MadgwickQuaternionUpdate+0xd38>)
 80059d8:	edc3 7a03 	vstr	s15, [r3, #12]
 80059dc:	e002      	b.n	80059e4 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80059e2:	bf00      	nop

}
 80059e4:	37c8      	adds	r7, #200	; 0xc8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20002da0 	.word	0x20002da0
 80059f0:	20002dd4 	.word	0x20002dd4
 80059f4:	20002dec 	.word	0x20002dec

080059f8 <millis>:
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <millis+0x1c>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	10624dd3 	.word	0x10624dd3

08005a18 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8005a34:	f107 030c 	add.w	r3, r7, #12
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8005a40:	f00f ffa2 	bl	8015988 <Get_RTC_Instance>
 8005a44:	f107 031c 	add.w	r3, r7, #28
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f004 f933 	bl	8009cb6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8005a50:	f00f ff9a 	bl	8015988 <Get_RTC_Instance>
 8005a54:	f107 0318 	add.w	r3, r7, #24
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f004 f989 	bl	8009d72 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8005a60:	7efb      	ldrb	r3, [r7, #27]
 8005a62:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8005a64:	7e7b      	ldrb	r3, [r7, #25]
 8005a66:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8005a68:	7ebb      	ldrb	r3, [r7, #26]
 8005a6a:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8005a6c:	7e3b      	ldrb	r3, [r7, #24]
 8005a6e:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8005a70:	7f3b      	ldrb	r3, [r7, #28]
 8005a72:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8005a74:	7f7b      	ldrb	r3, [r7, #29]
 8005a76:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8005a78:	7fbb      	ldrb	r3, [r7, #30]
 8005a7a:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8005a7c:	f7ff ffbc 	bl	80059f8 <millis>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <getTime+0x9c>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	cb03      	ldmia	r3!, {r0, r1}
 8005aa2:	6010      	str	r0, [r2, #0]
 8005aa4:	6051      	str	r1, [r2, #4]
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	8113      	strh	r3, [r2, #8]
}
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	3730      	adds	r7, #48	; 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	10624dd3 	.word	0x10624dd3

08005ab8 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ffa9 	bl	8005a18 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 8005ac6:	7a3b      	ldrb	r3, [r7, #8]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	7a7b      	ldrb	r3, [r7, #9]
 8005acc:	4618      	mov	r0, r3
 8005ace:	79bb      	ldrb	r3, [r7, #6]
 8005ad0:	797a      	ldrb	r2, [r7, #5]
 8005ad2:	9201      	str	r2, [sp, #4]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	460a      	mov	r2, r1
 8005ada:	4957      	ldr	r1, [pc, #348]	; (8005c38 <log_new+0x180>)
 8005adc:	4857      	ldr	r0, [pc, #348]	; (8005c3c <log_new+0x184>)
 8005ade:	f012 f9ad 	bl	8017e3c <siprintf>
	sprintf(directoryNameCopy, directoryName);
 8005ae2:	4956      	ldr	r1, [pc, #344]	; (8005c3c <log_new+0x184>)
 8005ae4:	4856      	ldr	r0, [pc, #344]	; (8005c40 <log_new+0x188>)
 8005ae6:	f012 f9a9 	bl	8017e3c <siprintf>

	SD_init();
 8005aea:	f7fb fb81 	bl	80011f0 <SD_init>
	SD_newDirectory((char*)directoryName);
 8005aee:	4853      	ldr	r0, [pc, #332]	; (8005c3c <log_new+0x184>)
 8005af0:	f7fb fc1a 	bl	8001328 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8005af4:	4851      	ldr	r0, [pc, #324]	; (8005c3c <log_new+0x184>)
 8005af6:	f7fa fb75 	bl	80001e4 <strlen>
 8005afa:	4603      	mov	r3, r0
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <log_new+0x184>)
 8005b00:	4413      	add	r3, r2
 8005b02:	4950      	ldr	r1, [pc, #320]	; (8005c44 <log_new+0x18c>)
 8005b04:	461a      	mov	r2, r3
 8005b06:	460b      	mov	r3, r1
 8005b08:	cb03      	ldmia	r3!, {r0, r1}
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	6051      	str	r1, [r2, #4]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	7213      	strb	r3, [r2, #8]
 8005b12:	4b4a      	ldr	r3, [pc, #296]	; (8005c3c <log_new+0x184>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fb fba7 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005b1a:	4949      	ldr	r1, [pc, #292]	; (8005c40 <log_new+0x188>)
 8005b1c:	4847      	ldr	r0, [pc, #284]	; (8005c3c <log_new+0x184>)
 8005b1e:	f012 f98d 	bl	8017e3c <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8005b22:	4846      	ldr	r0, [pc, #280]	; (8005c3c <log_new+0x184>)
 8005b24:	f7fa fb5e 	bl	80001e4 <strlen>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b43      	ldr	r3, [pc, #268]	; (8005c3c <log_new+0x184>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	4945      	ldr	r1, [pc, #276]	; (8005c48 <log_new+0x190>)
 8005b32:	461a      	mov	r2, r3
 8005b34:	460b      	mov	r3, r1
 8005b36:	cb03      	ldmia	r3!, {r0, r1}
 8005b38:	6010      	str	r0, [r2, #0]
 8005b3a:	6051      	str	r1, [r2, #4]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	7213      	strb	r3, [r2, #8]
 8005b40:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <log_new+0x184>)
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb fb90 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005b48:	493d      	ldr	r1, [pc, #244]	; (8005c40 <log_new+0x188>)
 8005b4a:	483c      	ldr	r0, [pc, #240]	; (8005c3c <log_new+0x184>)
 8005b4c:	f012 f976 	bl	8017e3c <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8005b50:	483a      	ldr	r0, [pc, #232]	; (8005c3c <log_new+0x184>)
 8005b52:	f7fa fb47 	bl	80001e4 <strlen>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <log_new+0x184>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	493b      	ldr	r1, [pc, #236]	; (8005c4c <log_new+0x194>)
 8005b60:	461a      	mov	r2, r3
 8005b62:	460b      	mov	r3, r1
 8005b64:	cb03      	ldmia	r3!, {r0, r1}
 8005b66:	6010      	str	r0, [r2, #0]
 8005b68:	6051      	str	r1, [r2, #4]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	7213      	strb	r3, [r2, #8]
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <log_new+0x184>)
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb fb79 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005b76:	4932      	ldr	r1, [pc, #200]	; (8005c40 <log_new+0x188>)
 8005b78:	4830      	ldr	r0, [pc, #192]	; (8005c3c <log_new+0x184>)
 8005b7a:	f012 f95f 	bl	8017e3c <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8005b7e:	482f      	ldr	r0, [pc, #188]	; (8005c3c <log_new+0x184>)
 8005b80:	f7fa fb30 	bl	80001e4 <strlen>
 8005b84:	4603      	mov	r3, r0
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b2c      	ldr	r3, [pc, #176]	; (8005c3c <log_new+0x184>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	4930      	ldr	r1, [pc, #192]	; (8005c50 <log_new+0x198>)
 8005b8e:	461a      	mov	r2, r3
 8005b90:	460b      	mov	r3, r1
 8005b92:	cb03      	ldmia	r3!, {r0, r1}
 8005b94:	6010      	str	r0, [r2, #0]
 8005b96:	6051      	str	r1, [r2, #4]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	7213      	strb	r3, [r2, #8]
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <log_new+0x184>)
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fb fb62 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005ba4:	4926      	ldr	r1, [pc, #152]	; (8005c40 <log_new+0x188>)
 8005ba6:	4825      	ldr	r0, [pc, #148]	; (8005c3c <log_new+0x184>)
 8005ba8:	f012 f948 	bl	8017e3c <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8005bac:	4823      	ldr	r0, [pc, #140]	; (8005c3c <log_new+0x184>)
 8005bae:	f7fa fb19 	bl	80001e4 <strlen>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <log_new+0x184>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	4926      	ldr	r1, [pc, #152]	; (8005c54 <log_new+0x19c>)
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	cb03      	ldmia	r3!, {r0, r1}
 8005bc2:	6010      	str	r0, [r2, #0]
 8005bc4:	6051      	str	r1, [r2, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	7213      	strb	r3, [r2, #8]
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <log_new+0x184>)
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fb fb4b 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005bd2:	491b      	ldr	r1, [pc, #108]	; (8005c40 <log_new+0x188>)
 8005bd4:	4819      	ldr	r0, [pc, #100]	; (8005c3c <log_new+0x184>)
 8005bd6:	f012 f931 	bl	8017e3c <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 8005bda:	4818      	ldr	r0, [pc, #96]	; (8005c3c <log_new+0x184>)
 8005bdc:	f7fa fb02 	bl	80001e4 <strlen>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <log_new+0x184>)
 8005be6:	4413      	add	r3, r2
 8005be8:	491b      	ldr	r1, [pc, #108]	; (8005c58 <log_new+0x1a0>)
 8005bea:	461a      	mov	r2, r3
 8005bec:	460b      	mov	r3, r1
 8005bee:	cb03      	ldmia	r3!, {r0, r1}
 8005bf0:	6010      	str	r0, [r2, #0]
 8005bf2:	6051      	str	r1, [r2, #4]
 8005bf4:	8819      	ldrh	r1, [r3, #0]
 8005bf6:	789b      	ldrb	r3, [r3, #2]
 8005bf8:	8111      	strh	r1, [r2, #8]
 8005bfa:	7293      	strb	r3, [r2, #10]
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <log_new+0x184>)
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb fb32 	bl	8001268 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005c04:	490e      	ldr	r1, [pc, #56]	; (8005c40 <log_new+0x188>)
 8005c06:	480d      	ldr	r0, [pc, #52]	; (8005c3c <log_new+0x184>)
 8005c08:	f012 f918 	bl	8017e3c <siprintf>

	logBufferIndex = 0;
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <log_new+0x1a4>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <log_new+0x1a8>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005c18:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <log_new+0x1ac>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <log_new+0x1b0>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005c24:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <log_new+0x1b4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <log_new+0x1b8>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	801a      	strh	r2, [r3, #0]
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0801dbb4 	.word	0x0801dbb4
 8005c3c:	20005e94 	.word	0x20005e94
 8005c40:	20003e24 	.word	0x20003e24
 8005c44:	0801dbc8 	.word	0x0801dbc8
 8005c48:	0801dbd4 	.word	0x0801dbd4
 8005c4c:	0801dbe0 	.word	0x0801dbe0
 8005c50:	0801dbec 	.word	0x0801dbec
 8005c54:	0801dbf8 	.word	0x0801dbf8
 8005c58:	0801dc04 	.word	0x0801dc04
 8005c5c:	20005eb8 	.word	0x20005eb8
 8005c60:	20005eb6 	.word	0x20005eb6
 8005c64:	20004a90 	.word	0x20004a90
 8005c68:	20005eba 	.word	0x20005eba
 8005c6c:	2000468c 	.word	0x2000468c
 8005c70:	20004668 	.word	0x20004668

08005c74 <log_save>:

void log_save()
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
	//__disable_irq();


	if (logBufferIndex > 0)
 8005c78:	4b7c      	ldr	r3, [pc, #496]	; (8005e6c <log_save+0x1f8>)
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01b      	beq.n	8005cb8 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8005c80:	487b      	ldr	r0, [pc, #492]	; (8005e70 <log_save+0x1fc>)
 8005c82:	f7fa faaf 	bl	80001e4 <strlen>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4b79      	ldr	r3, [pc, #484]	; (8005e70 <log_save+0x1fc>)
 8005c8c:	4413      	add	r3, r2
 8005c8e:	4979      	ldr	r1, [pc, #484]	; (8005e74 <log_save+0x200>)
 8005c90:	461a      	mov	r2, r3
 8005c92:	460b      	mov	r3, r1
 8005c94:	cb03      	ldmia	r3!, {r0, r1}
 8005c96:	6010      	str	r0, [r2, #0]
 8005c98:	6051      	str	r1, [r2, #4]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	7213      	strb	r3, [r2, #8]
 8005c9e:	4b74      	ldr	r3, [pc, #464]	; (8005e70 <log_save+0x1fc>)
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4875      	ldr	r0, [pc, #468]	; (8005e78 <log_save+0x204>)
 8005ca4:	f012 f8ca 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005ca8:	4974      	ldr	r1, [pc, #464]	; (8005e7c <log_save+0x208>)
 8005caa:	4871      	ldr	r0, [pc, #452]	; (8005e70 <log_save+0x1fc>)
 8005cac:	f012 f8c6 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8005cb0:	4973      	ldr	r1, [pc, #460]	; (8005e80 <log_save+0x20c>)
 8005cb2:	4871      	ldr	r0, [pc, #452]	; (8005e78 <log_save+0x204>)
 8005cb4:	f7fb fb00 	bl	80012b8 <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 8005cb8:	4b72      	ldr	r3, [pc, #456]	; (8005e84 <log_save+0x210>)
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8005cc0:	486b      	ldr	r0, [pc, #428]	; (8005e70 <log_save+0x1fc>)
 8005cc2:	f7fa fa8f 	bl	80001e4 <strlen>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <log_save+0x1fc>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	496e      	ldr	r1, [pc, #440]	; (8005e88 <log_save+0x214>)
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	cb03      	ldmia	r3!, {r0, r1}
 8005cd6:	6010      	str	r0, [r2, #0]
 8005cd8:	6051      	str	r1, [r2, #4]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	7213      	strb	r3, [r2, #8]
 8005cde:	4b64      	ldr	r3, [pc, #400]	; (8005e70 <log_save+0x1fc>)
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4865      	ldr	r0, [pc, #404]	; (8005e78 <log_save+0x204>)
 8005ce4:	f012 f8aa 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005ce8:	4964      	ldr	r1, [pc, #400]	; (8005e7c <log_save+0x208>)
 8005cea:	4861      	ldr	r0, [pc, #388]	; (8005e70 <log_save+0x1fc>)
 8005cec:	f012 f8a6 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 8005cf0:	4966      	ldr	r1, [pc, #408]	; (8005e8c <log_save+0x218>)
 8005cf2:	4861      	ldr	r0, [pc, #388]	; (8005e78 <log_save+0x204>)
 8005cf4:	f7fb fae0 	bl	80012b8 <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 8005cf8:	4b65      	ldr	r3, [pc, #404]	; (8005e90 <log_save+0x21c>)
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 8005d00:	485b      	ldr	r0, [pc, #364]	; (8005e70 <log_save+0x1fc>)
 8005d02:	f7fa fa6f 	bl	80001e4 <strlen>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <log_save+0x1fc>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	4961      	ldr	r1, [pc, #388]	; (8005e94 <log_save+0x220>)
 8005d10:	461a      	mov	r2, r3
 8005d12:	460b      	mov	r3, r1
 8005d14:	cb03      	ldmia	r3!, {r0, r1}
 8005d16:	6010      	str	r0, [r2, #0]
 8005d18:	6051      	str	r1, [r2, #4]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	7213      	strb	r3, [r2, #8]
 8005d1e:	4b54      	ldr	r3, [pc, #336]	; (8005e70 <log_save+0x1fc>)
 8005d20:	4619      	mov	r1, r3
 8005d22:	4855      	ldr	r0, [pc, #340]	; (8005e78 <log_save+0x204>)
 8005d24:	f012 f88a 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005d28:	4954      	ldr	r1, [pc, #336]	; (8005e7c <log_save+0x208>)
 8005d2a:	4851      	ldr	r0, [pc, #324]	; (8005e70 <log_save+0x1fc>)
 8005d2c:	f012 f886 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 8005d30:	4959      	ldr	r1, [pc, #356]	; (8005e98 <log_save+0x224>)
 8005d32:	4851      	ldr	r0, [pc, #324]	; (8005e78 <log_save+0x204>)
 8005d34:	f7fb fac0 	bl	80012b8 <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 8005d38:	4b58      	ldr	r3, [pc, #352]	; (8005e9c <log_save+0x228>)
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8005d40:	484b      	ldr	r0, [pc, #300]	; (8005e70 <log_save+0x1fc>)
 8005d42:	f7fa fa4f 	bl	80001e4 <strlen>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b49      	ldr	r3, [pc, #292]	; (8005e70 <log_save+0x1fc>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4954      	ldr	r1, [pc, #336]	; (8005ea0 <log_save+0x22c>)
 8005d50:	461a      	mov	r2, r3
 8005d52:	460b      	mov	r3, r1
 8005d54:	cb03      	ldmia	r3!, {r0, r1}
 8005d56:	6010      	str	r0, [r2, #0]
 8005d58:	6051      	str	r1, [r2, #4]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	7213      	strb	r3, [r2, #8]
 8005d5e:	4b44      	ldr	r3, [pc, #272]	; (8005e70 <log_save+0x1fc>)
 8005d60:	4619      	mov	r1, r3
 8005d62:	4845      	ldr	r0, [pc, #276]	; (8005e78 <log_save+0x204>)
 8005d64:	f012 f86a 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005d68:	4944      	ldr	r1, [pc, #272]	; (8005e7c <log_save+0x208>)
 8005d6a:	4841      	ldr	r0, [pc, #260]	; (8005e70 <log_save+0x1fc>)
 8005d6c:	f012 f866 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8005d70:	494c      	ldr	r1, [pc, #304]	; (8005ea4 <log_save+0x230>)
 8005d72:	4841      	ldr	r0, [pc, #260]	; (8005e78 <log_save+0x204>)
 8005d74:	f7fb faa0 	bl	80012b8 <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8005d78:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <log_save+0x234>)
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01b      	beq.n	8005db8 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8005d80:	483b      	ldr	r0, [pc, #236]	; (8005e70 <log_save+0x1fc>)
 8005d82:	f7fa fa2f 	bl	80001e4 <strlen>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <log_save+0x1fc>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4947      	ldr	r1, [pc, #284]	; (8005eac <log_save+0x238>)
 8005d90:	461a      	mov	r2, r3
 8005d92:	460b      	mov	r3, r1
 8005d94:	cb03      	ldmia	r3!, {r0, r1}
 8005d96:	6010      	str	r0, [r2, #0]
 8005d98:	6051      	str	r1, [r2, #4]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	7213      	strb	r3, [r2, #8]
 8005d9e:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <log_save+0x1fc>)
 8005da0:	4619      	mov	r1, r3
 8005da2:	4835      	ldr	r0, [pc, #212]	; (8005e78 <log_save+0x204>)
 8005da4:	f012 f84a 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005da8:	4934      	ldr	r1, [pc, #208]	; (8005e7c <log_save+0x208>)
 8005daa:	4831      	ldr	r0, [pc, #196]	; (8005e70 <log_save+0x1fc>)
 8005dac:	f012 f846 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8005db0:	493f      	ldr	r1, [pc, #252]	; (8005eb0 <log_save+0x23c>)
 8005db2:	4831      	ldr	r0, [pc, #196]	; (8005e78 <log_save+0x204>)
 8005db4:	f7fb fa80 	bl	80012b8 <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <log_save+0x240>)
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01d      	beq.n	8005dfc <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8005dc0:	482b      	ldr	r0, [pc, #172]	; (8005e70 <log_save+0x1fc>)
 8005dc2:	f7fa fa0f 	bl	80001e4 <strlen>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <log_save+0x1fc>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	493a      	ldr	r1, [pc, #232]	; (8005eb8 <log_save+0x244>)
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	cb03      	ldmia	r3!, {r0, r1}
 8005dd6:	6010      	str	r0, [r2, #0]
 8005dd8:	6051      	str	r1, [r2, #4]
 8005dda:	8819      	ldrh	r1, [r3, #0]
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	8111      	strh	r1, [r2, #8]
 8005de0:	7293      	strb	r3, [r2, #10]
 8005de2:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <log_save+0x1fc>)
 8005de4:	4619      	mov	r1, r3
 8005de6:	4824      	ldr	r0, [pc, #144]	; (8005e78 <log_save+0x204>)
 8005de8:	f012 f828 	bl	8017e3c <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005dec:	4923      	ldr	r1, [pc, #140]	; (8005e7c <log_save+0x208>)
 8005dee:	4820      	ldr	r0, [pc, #128]	; (8005e70 <log_save+0x1fc>)
 8005df0:	f012 f824 	bl	8017e3c <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 8005df4:	4931      	ldr	r1, [pc, #196]	; (8005ebc <log_save+0x248>)
 8005df6:	4820      	ldr	r0, [pc, #128]	; (8005e78 <log_save+0x204>)
 8005df8:	f7fb fa5e 	bl	80012b8 <SD_writeToFile>
	}


	logBufferIndex = 0;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <log_save+0x1f8>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <log_save+0x210>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <log_save+0x21c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005e0e:	4b23      	ldr	r3, [pc, #140]	; (8005e9c <log_save+0x228>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005e14:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <log_save+0x234>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005e1a:	4b26      	ldr	r3, [pc, #152]	; (8005eb4 <log_save+0x240>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 8005e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e24:	2100      	movs	r1, #0
 8005e26:	4816      	ldr	r0, [pc, #88]	; (8005e80 <log_save+0x20c>)
 8005e28:	f011 f903 	bl	8017032 <memset>
	memset(bmpBuffer, 0x00, 1024);
 8005e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e30:	2100      	movs	r1, #0
 8005e32:	4816      	ldr	r0, [pc, #88]	; (8005e8c <log_save+0x218>)
 8005e34:	f011 f8fd 	bl	8017032 <memset>
	memset(gpsBuffer, 0x00, 1024);
 8005e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4816      	ldr	r0, [pc, #88]	; (8005e98 <log_save+0x224>)
 8005e40:	f011 f8f7 	bl	8017032 <memset>
	memset(imuBuffer, 0x00, 1024);
 8005e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4816      	ldr	r0, [pc, #88]	; (8005ea4 <log_save+0x230>)
 8005e4c:	f011 f8f1 	bl	8017032 <memset>
	memset(motBuffer, 0x00, 1024);
 8005e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e54:	2100      	movs	r1, #0
 8005e56:	4816      	ldr	r0, [pc, #88]	; (8005eb0 <log_save+0x23c>)
 8005e58:	f011 f8eb 	bl	8017032 <memset>
	memset(radioBuffer, 0x00, 4096);
 8005e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e60:	2100      	movs	r1, #0
 8005e62:	4816      	ldr	r0, [pc, #88]	; (8005ebc <log_save+0x248>)
 8005e64:	f011 f8e5 	bl	8017032 <memset>
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20005eb8 	.word	0x20005eb8
 8005e70:	20005e94 	.word	0x20005e94
 8005e74:	0801dbc8 	.word	0x0801dbc8
 8005e78:	20004248 	.word	0x20004248
 8005e7c:	20003e24 	.word	0x20003e24
 8005e80:	20005a94 	.word	0x20005a94
 8005e84:	20005eb6 	.word	0x20005eb6
 8005e88:	0801dbd4 	.word	0x0801dbd4
 8005e8c:	20005ebc 	.word	0x20005ebc
 8005e90:	20004a90 	.word	0x20004a90
 8005e94:	0801dbe0 	.word	0x0801dbe0
 8005e98:	20003e44 	.word	0x20003e44
 8005e9c:	20005eba 	.word	0x20005eba
 8005ea0:	0801dbec 	.word	0x0801dbec
 8005ea4:	20004690 	.word	0x20004690
 8005ea8:	2000468c 	.word	0x2000468c
 8005eac:	0801dbf8 	.word	0x0801dbf8
 8005eb0:	20004268 	.word	0x20004268
 8005eb4:	20004668 	.word	0x20004668
 8005eb8:	0801dc04 	.word	0x0801dc04
 8005ebc:	20002e24 	.word	0x20002e24

08005ec0 <log_bmp>:
		logBufferIndex = strlen(logBuffer);
	}
}

void log_bmp(BMP280* bmp)
{
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <log_bmp+0x84>)
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d832      	bhi.n	8005f3a <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005ed4:	f7ff fd90 	bl	80059f8 <millis>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	491a      	ldr	r1, [pc, #104]	; (8005f48 <log_bmp+0x88>)
 8005ede:	481b      	ldr	r0, [pc, #108]	; (8005f4c <log_bmp+0x8c>)
 8005ee0:	f011 ffac 	bl	8017e3c <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fa fb3d 	bl	8000568 <__aeabi_f2d>
 8005eee:	4605      	mov	r5, r0
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fb36 	bl	8000568 <__aeabi_f2d>
 8005efc:	4603      	mov	r3, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	e9cd 3400 	strd	r3, r4, [sp]
 8005f04:	462a      	mov	r2, r5
 8005f06:	4633      	mov	r3, r6
 8005f08:	4911      	ldr	r1, [pc, #68]	; (8005f50 <log_bmp+0x90>)
 8005f0a:	4812      	ldr	r0, [pc, #72]	; (8005f54 <log_bmp+0x94>)
 8005f0c:	f011 ff96 	bl	8017e3c <siprintf>
		strcat(tempBuffer, timestamp);
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <log_bmp+0x8c>)
 8005f12:	4810      	ldr	r0, [pc, #64]	; (8005f54 <log_bmp+0x94>)
 8005f14:	f011 ffb2 	bl	8017e7c <strcat>
		strcat(bmpBuffer, tempBuffer);
 8005f18:	490e      	ldr	r1, [pc, #56]	; (8005f54 <log_bmp+0x94>)
 8005f1a:	480f      	ldr	r0, [pc, #60]	; (8005f58 <log_bmp+0x98>)
 8005f1c:	f011 ffae 	bl	8017e7c <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8005f20:	480d      	ldr	r0, [pc, #52]	; (8005f58 <log_bmp+0x98>)
 8005f22:	f7fa f95f 	bl	80001e4 <strlen>
 8005f26:	4603      	mov	r3, r0
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <log_bmp+0x84>)
 8005f2c:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f32:	2100      	movs	r1, #0
 8005f34:	4807      	ldr	r0, [pc, #28]	; (8005f54 <log_bmp+0x94>)
 8005f36:	f011 f87c 	bl	8017032 <memset>
	}
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20005eb6 	.word	0x20005eb6
 8005f48:	0801dc10 	.word	0x0801dc10
 8005f4c:	2000466c 	.word	0x2000466c
 8005f50:	0801dc18 	.word	0x0801dc18
 8005f54:	20004a94 	.word	0x20004a94
 8005f58:	20005ebc 	.word	0x20005ebc

08005f5c <log_gps>:
void log_gps(GPS* gps)
{
 8005f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
	if (gpsBufferIndex < 950)
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <log_gps+0x84>)
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d832      	bhi.n	8005fd6 <log_gps+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005f70:	f7ff fd42 	bl	80059f8 <millis>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	491a      	ldr	r1, [pc, #104]	; (8005fe4 <log_gps+0x88>)
 8005f7a:	481b      	ldr	r0, [pc, #108]	; (8005fe8 <log_gps+0x8c>)
 8005f7c:	f011 ff5e 	bl	8017e3c <siprintf>
		sprintf(tempBuffer, "%.07f %.07f", gps->latitudeDegrees, gps->longitudeDegrees);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fa faef 	bl	8000568 <__aeabi_f2d>
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	460e      	mov	r6, r1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fa fae8 	bl	8000568 <__aeabi_f2d>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	e9cd 3400 	strd	r3, r4, [sp]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4633      	mov	r3, r6
 8005fa4:	4911      	ldr	r1, [pc, #68]	; (8005fec <log_gps+0x90>)
 8005fa6:	4812      	ldr	r0, [pc, #72]	; (8005ff0 <log_gps+0x94>)
 8005fa8:	f011 ff48 	bl	8017e3c <siprintf>
		strcat(tempBuffer, timestamp);
 8005fac:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <log_gps+0x8c>)
 8005fae:	4810      	ldr	r0, [pc, #64]	; (8005ff0 <log_gps+0x94>)
 8005fb0:	f011 ff64 	bl	8017e7c <strcat>
		strcat(gpsBuffer, tempBuffer);
 8005fb4:	490e      	ldr	r1, [pc, #56]	; (8005ff0 <log_gps+0x94>)
 8005fb6:	480f      	ldr	r0, [pc, #60]	; (8005ff4 <log_gps+0x98>)
 8005fb8:	f011 ff60 	bl	8017e7c <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 8005fbc:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <log_gps+0x98>)
 8005fbe:	f7fa f911 	bl	80001e4 <strlen>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <log_gps+0x84>)
 8005fc8:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4807      	ldr	r0, [pc, #28]	; (8005ff0 <log_gps+0x94>)
 8005fd2:	f011 f82e 	bl	8017032 <memset>
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20004a90 	.word	0x20004a90
 8005fe4:	0801dc10 	.word	0x0801dc10
 8005fe8:	2000466c 	.word	0x2000466c
 8005fec:	0801dc24 	.word	0x0801dc24
 8005ff0:	20004a94 	.word	0x20004a94
 8005ff4:	20003e44 	.word	0x20003e44

08005ff8 <log_imu>:
void log_imu(float* eulers)
{
 8005ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af04      	add	r7, sp, #16
 8006000:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 8006002:	4b24      	ldr	r3, [pc, #144]	; (8006094 <log_imu+0x9c>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	f240 32b5 	movw	r2, #949	; 0x3b5
 800600a:	4293      	cmp	r3, r2
 800600c:	d83d      	bhi.n	800608a <log_imu+0x92>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 800600e:	f7ff fcf3 	bl	80059f8 <millis>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	4920      	ldr	r1, [pc, #128]	; (8006098 <log_imu+0xa0>)
 8006018:	4820      	ldr	r0, [pc, #128]	; (800609c <log_imu+0xa4>)
 800601a:	f011 ff0f 	bl	8017e3c <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", eulers[0], eulers[1], eulers[2]);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fa faa0 	bl	8000568 <__aeabi_f2d>
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fa98 	bl	8000568 <__aeabi_f2d>
 8006038:	4604      	mov	r4, r0
 800603a:	460d      	mov	r5, r1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3308      	adds	r3, #8
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa fa90 	bl	8000568 <__aeabi_f2d>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006050:	e9cd 4500 	strd	r4, r5, [sp]
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4911      	ldr	r1, [pc, #68]	; (80060a0 <log_imu+0xa8>)
 800605a:	4812      	ldr	r0, [pc, #72]	; (80060a4 <log_imu+0xac>)
 800605c:	f011 feee 	bl	8017e3c <siprintf>
		strcat(tempBuffer, timestamp);
 8006060:	490e      	ldr	r1, [pc, #56]	; (800609c <log_imu+0xa4>)
 8006062:	4810      	ldr	r0, [pc, #64]	; (80060a4 <log_imu+0xac>)
 8006064:	f011 ff0a 	bl	8017e7c <strcat>
		strcat(imuBuffer, tempBuffer);
 8006068:	490e      	ldr	r1, [pc, #56]	; (80060a4 <log_imu+0xac>)
 800606a:	480f      	ldr	r0, [pc, #60]	; (80060a8 <log_imu+0xb0>)
 800606c:	f011 ff06 	bl	8017e7c <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8006070:	480d      	ldr	r0, [pc, #52]	; (80060a8 <log_imu+0xb0>)
 8006072:	f7fa f8b7 	bl	80001e4 <strlen>
 8006076:	4603      	mov	r3, r0
 8006078:	b29a      	uxth	r2, r3
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <log_imu+0x9c>)
 800607c:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 800607e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006082:	2100      	movs	r1, #0
 8006084:	4807      	ldr	r0, [pc, #28]	; (80060a4 <log_imu+0xac>)
 8006086:	f010 ffd4 	bl	8017032 <memset>
	}
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006094:	20005eba 	.word	0x20005eba
 8006098:	0801dc10 	.word	0x0801dc10
 800609c:	2000466c 	.word	0x2000466c
 80060a0:	0801dc30 	.word	0x0801dc30
 80060a4:	20004a94 	.word	0x20004a94
 80060a8:	20004690 	.word	0x20004690

080060ac <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 3700)
 80060b8:	4b22      	ldr	r3, [pc, #136]	; (8006144 <log_radio+0x98>)
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	f640 6273 	movw	r2, #3699	; 0xe73
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d83a      	bhi.n	800613a <log_radio+0x8e>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 80060c4:	f7ff fc98 	bl	80059f8 <millis>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	491e      	ldr	r1, [pc, #120]	; (8006148 <log_radio+0x9c>)
 80060ce:	481f      	ldr	r0, [pc, #124]	; (800614c <log_radio+0xa0>)
 80060d0:	f011 feb4 	bl	8017e3c <siprintf>

		if (transmit)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <log_radio+0x4a>
		{
			sprintf(tempBuffer, "TX\t[");
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <log_radio+0xa4>)
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <log_radio+0xa8>)
 80060de:	6810      	ldr	r0, [r2, #0]
 80060e0:	6018      	str	r0, [r3, #0]
 80060e2:	7912      	ldrb	r2, [r2, #4]
 80060e4:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060ec:	4619      	mov	r1, r3
 80060ee:	4818      	ldr	r0, [pc, #96]	; (8006150 <log_radio+0xa4>)
 80060f0:	f011 fec4 	bl	8017e7c <strcat>
 80060f4:	e00c      	b.n	8006110 <log_radio+0x64>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	461a      	mov	r2, r3
 80060fc:	4916      	ldr	r1, [pc, #88]	; (8006158 <log_radio+0xac>)
 80060fe:	4814      	ldr	r0, [pc, #80]	; (8006150 <log_radio+0xa4>)
 8006100:	f011 fe9c 	bl	8017e3c <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3344      	adds	r3, #68	; 0x44
 8006108:	4619      	mov	r1, r3
 800610a:	4811      	ldr	r0, [pc, #68]	; (8006150 <log_radio+0xa4>)
 800610c:	f011 feb6 	bl	8017e7c <strcat>
		}

		strcat(tempBuffer, timestamp);
 8006110:	490e      	ldr	r1, [pc, #56]	; (800614c <log_radio+0xa0>)
 8006112:	480f      	ldr	r0, [pc, #60]	; (8006150 <log_radio+0xa4>)
 8006114:	f011 feb2 	bl	8017e7c <strcat>
		strcat(radioBuffer, tempBuffer);
 8006118:	490d      	ldr	r1, [pc, #52]	; (8006150 <log_radio+0xa4>)
 800611a:	4810      	ldr	r0, [pc, #64]	; (800615c <log_radio+0xb0>)
 800611c:	f011 feae 	bl	8017e7c <strcat>
		radioBufferIndex = strlen(radioBuffer);
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <log_radio+0xb0>)
 8006122:	f7fa f85f 	bl	80001e4 <strlen>
 8006126:	4603      	mov	r3, r0
 8006128:	b29a      	uxth	r2, r3
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <log_radio+0x98>)
 800612c:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 800612e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006132:	2100      	movs	r1, #0
 8006134:	4806      	ldr	r0, [pc, #24]	; (8006150 <log_radio+0xa4>)
 8006136:	f010 ff7c 	bl	8017032 <memset>
	}
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20004668 	.word	0x20004668
 8006148:	0801dc50 	.word	0x0801dc50
 800614c:	2000466c 	.word	0x2000466c
 8006150:	20004a94 	.word	0x20004a94
 8006154:	0801dc5c 	.word	0x0801dc5c
 8006158:	0801dc64 	.word	0x0801dc64
 800615c:	20002e24 	.word	0x20002e24

08006160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_Init+0x40>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a0d      	ldr	r2, [pc, #52]	; (80061a0 <HAL_Init+0x40>)
 800616a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800616e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_Init+0x40>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <HAL_Init+0x40>)
 8006176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800617a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800617c:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <HAL_Init+0x40>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a07      	ldr	r2, [pc, #28]	; (80061a0 <HAL_Init+0x40>)
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006188:	2003      	movs	r0, #3
 800618a:	f000 f94d 	bl	8006428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800618e:	2000      	movs	r0, #0
 8006190:	f000 f808 	bl	80061a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006194:	f00f fe42 	bl	8015e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023c00 	.word	0x40023c00

080061a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_InitTick+0x54>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_InitTick+0x58>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f965 	bl	8006492 <HAL_SYSTICK_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e00e      	b.n	80061f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	d80a      	bhi.n	80061ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d8:	2200      	movs	r2, #0
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	f000 f92d 	bl	800643e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061e4:	4a06      	ldr	r2, [pc, #24]	; (8006200 <HAL_InitTick+0x5c>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000134 	.word	0x20000134
 80061fc:	20000008 	.word	0x20000008
 8006200:	20000004 	.word	0x20000004

08006204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_IncTick+0x20>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <HAL_IncTick+0x24>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4413      	add	r3, r2
 8006214:	4a04      	ldr	r2, [pc, #16]	; (8006228 <HAL_IncTick+0x24>)
 8006216:	6013      	str	r3, [r2, #0]
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000008 	.word	0x20000008
 8006228:	2000632c 	.word	0x2000632c

0800622c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return uwTick;
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_GetTick+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	2000632c 	.word	0x2000632c

08006244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800624c:	f7ff ffee 	bl	800622c <HAL_GetTick>
 8006250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d005      	beq.n	800626a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_Delay+0x40>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800626a:	bf00      	nop
 800626c:	f7ff ffde 	bl	800622c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	429a      	cmp	r2, r3
 800627a:	d8f7      	bhi.n	800626c <HAL_Delay+0x28>
  {
  }
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000008 	.word	0x20000008

08006288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062a4:	4013      	ands	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ba:	4a04      	ldr	r2, [pc, #16]	; (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	60d3      	str	r3, [r2, #12]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <__NVIC_GetPriorityGrouping+0x18>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	f003 0307 	and.w	r3, r3, #7
}
 80062de:	4618      	mov	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db0b      	blt.n	8006316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4907      	ldr	r1, [pc, #28]	; (8006324 <__NVIC_EnableIRQ+0x38>)
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2001      	movs	r0, #1
 800630e:	fa00 f202 	lsl.w	r2, r0, r2
 8006312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e100 	.word	0xe000e100

08006328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db0a      	blt.n	8006352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	490c      	ldr	r1, [pc, #48]	; (8006374 <__NVIC_SetPriority+0x4c>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	440b      	add	r3, r1
 800634c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006350:	e00a      	b.n	8006368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4908      	ldr	r1, [pc, #32]	; (8006378 <__NVIC_SetPriority+0x50>)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3b04      	subs	r3, #4
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	440b      	add	r3, r1
 8006366:	761a      	strb	r2, [r3, #24]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000e100 	.word	0xe000e100
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f1c3 0307 	rsb	r3, r3, #7
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf28      	it	cs
 800639a:	2304      	movcs	r3, #4
 800639c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d902      	bls.n	80063ac <NVIC_EncodePriority+0x30>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3b03      	subs	r3, #3
 80063aa:	e000      	b.n	80063ae <NVIC_EncodePriority+0x32>
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43da      	mvns	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	401a      	ands	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c4:	f04f 31ff 	mov.w	r1, #4294967295
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	43d9      	mvns	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	4313      	orrs	r3, r2
         );
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3724      	adds	r7, #36	; 0x24
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f4:	d301      	bcc.n	80063fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00f      	b.n	800641a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063fa:	4a0a      	ldr	r2, [pc, #40]	; (8006424 <SysTick_Config+0x40>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006402:	210f      	movs	r1, #15
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	f7ff ff8e 	bl	8006328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <SysTick_Config+0x40>)
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <SysTick_Config+0x40>)
 8006414:	2207      	movs	r2, #7
 8006416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000e010 	.word	0xe000e010

08006428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff29 	bl	8006288 <__NVIC_SetPriorityGrouping>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006450:	f7ff ff3e 	bl	80062d0 <__NVIC_GetPriorityGrouping>
 8006454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	6978      	ldr	r0, [r7, #20]
 800645c:	f7ff ff8e 	bl	800637c <NVIC_EncodePriority>
 8006460:	4602      	mov	r2, r0
 8006462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff5d 	bl	8006328 <__NVIC_SetPriority>
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	4603      	mov	r3, r0
 800647e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff31 	bl	80062ec <__NVIC_EnableIRQ>
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ffa2 	bl	80063e4 <SysTick_Config>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064b8:	f7ff feb8 	bl	800622c <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e099      	b.n	80065fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064e8:	e00f      	b.n	800650a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ea:	f7ff fe9f 	bl	800622c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b05      	cmp	r3, #5
 80064f6:	d908      	bls.n	800650a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2203      	movs	r2, #3
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e078      	b.n	80065fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e8      	bne.n	80064ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <HAL_DMA_Init+0x158>)
 8006524:	4013      	ands	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b04      	cmp	r3, #4
 8006562:	d107      	bne.n	8006574 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4313      	orrs	r3, r2
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	2b04      	cmp	r3, #4
 800659c:	d117      	bne.n	80065ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa99 	bl	8006ae8 <DMA_CheckFifoParam>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065ca:	2301      	movs	r3, #1
 80065cc:	e016      	b.n	80065fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa50 	bl	8006a7c <DMA_CalcBaseAndBitshift>
 80065dc:	4603      	mov	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	409a      	lsls	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	f010803f 	.word	0xf010803f

08006608 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_DMA_Start_IT+0x26>
 800662a:	2302      	movs	r3, #2
 800662c:	e048      	b.n	80066c0 <HAL_DMA_Start_IT+0xb8>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d137      	bne.n	80066b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f9e2 	bl	8006a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	223f      	movs	r2, #63	; 0x3f
 8006662:	409a      	lsls	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0216 	orr.w	r2, r2, #22
 8006676:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006686:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0208 	orr.w	r2, r2, #8
 800669e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e005      	b.n	80066be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80066ba:	2302      	movs	r3, #2
 80066bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e00c      	b.n	8006700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2205      	movs	r2, #5
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006718:	4b92      	ldr	r3, [pc, #584]	; (8006964 <HAL_DMA_IRQHandler+0x258>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a92      	ldr	r2, [pc, #584]	; (8006968 <HAL_DMA_IRQHandler+0x25c>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0a9b      	lsrs	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	2208      	movs	r2, #8
 8006738:	409a      	lsls	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01a      	beq.n	8006778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0204 	bic.w	r2, r2, #4
 800675e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	2208      	movs	r2, #8
 8006766:	409a      	lsls	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f043 0201 	orr.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677c:	2201      	movs	r2, #1
 800677e:	409a      	lsls	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d012      	beq.n	80067ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	2201      	movs	r2, #1
 800679c:	409a      	lsls	r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	2204      	movs	r2, #4
 80067b4:	409a      	lsls	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	2204      	movs	r2, #4
 80067d2:	409a      	lsls	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f043 0204 	orr.w	r2, r3, #4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	2210      	movs	r2, #16
 80067ea:	409a      	lsls	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d043      	beq.n	800687c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d03c      	beq.n	800687c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006806:	2210      	movs	r2, #16
 8006808:	409a      	lsls	r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d018      	beq.n	800684e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d024      	beq.n	800687c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	e01f      	b.n	800687c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01b      	beq.n	800687c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	e016      	b.n	800687c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d107      	bne.n	800686c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0208 	bic.w	r2, r2, #8
 800686a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006880:	2220      	movs	r2, #32
 8006882:	409a      	lsls	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4013      	ands	r3, r2
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 808e 	beq.w	80069aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8086 	beq.w	80069aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a2:	2220      	movs	r2, #32
 80068a4:	409a      	lsls	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d136      	bne.n	8006924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0216 	bic.w	r2, r2, #22
 80068c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <HAL_DMA_IRQHandler+0x1da>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0208 	bic.w	r2, r2, #8
 80068f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	223f      	movs	r2, #63	; 0x3f
 80068fc:	409a      	lsls	r2, r3
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006916:	2b00      	cmp	r3, #0
 8006918:	d07d      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
        }
        return;
 8006922:	e078      	b.n	8006a16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01c      	beq.n	800696c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	2b00      	cmp	r3, #0
 8006946:	d030      	beq.n	80069aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
 8006950:	e02b      	b.n	80069aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d027      	beq.n	80069aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	e022      	b.n	80069aa <HAL_DMA_IRQHandler+0x29e>
 8006964:	20000134 	.word	0x20000134
 8006968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0210 	bic.w	r2, r2, #16
 8006988:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d032      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2205      	movs	r2, #5
 80069c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3301      	adds	r3, #1
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d307      	bcc.n	80069f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f2      	bne.n	80069d6 <HAL_DMA_IRQHandler+0x2ca>
 80069f0:	e000      	b.n	80069f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80069f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	e000      	b.n	8006a18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006a16:	bf00      	nop
    }
  }
}
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop

08006a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d108      	bne.n	8006a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a5e:	e007      	b.n	8006a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	3b10      	subs	r3, #16
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d909      	bls.n	8006abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	659a      	str	r2, [r3, #88]	; 0x58
 8006abc:	e007      	b.n	8006ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	aaaaaaab 	.word	0xaaaaaaab
 8006ae4:	0801e2b8 	.word	0x0801e2b8

08006ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11f      	bne.n	8006b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d855      	bhi.n	8006bb4 <DMA_CheckFifoParam+0xcc>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <DMA_CheckFifoParam+0x28>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b21 	.word	0x08006b21
 8006b1c:	08006bb5 	.word	0x08006bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d045      	beq.n	8006bb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b30:	e042      	b.n	8006bb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b3a:	d13f      	bne.n	8006bbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b40:	e03c      	b.n	8006bbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4a:	d121      	bne.n	8006b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d836      	bhi.n	8006bc0 <DMA_CheckFifoParam+0xd8>
 8006b52:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <DMA_CheckFifoParam+0x70>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006b6f 	.word	0x08006b6f
 8006b60:	08006b69 	.word	0x08006b69
 8006b64:	08006b81 	.word	0x08006b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6c:	e02f      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d024      	beq.n	8006bc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b7e:	e021      	b.n	8006bc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b88:	d11e      	bne.n	8006bc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b8e:	e01b      	b.n	8006bc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d902      	bls.n	8006b9c <DMA_CheckFifoParam+0xb4>
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d003      	beq.n	8006ba2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b9a:	e018      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	e015      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00e      	beq.n	8006bcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb2:	e00b      	b.n	8006bcc <DMA_CheckFifoParam+0xe4>
      break;
 8006bb4:	bf00      	nop
 8006bb6:	e00a      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e008      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e006      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e004      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e002      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;   
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <DMA_CheckFifoParam+0xe6>
      break;
 8006bcc:	bf00      	nop
    }
  } 
  
  return status; 
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b089      	sub	sp, #36	; 0x24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e16b      	b.n	8006ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	f040 815a 	bne.w	8006eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d003      	beq.n	8006c26 <HAL_GPIO_Init+0x4a>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b12      	cmp	r3, #18
 8006c24:	d123      	bne.n	8006c6e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	08da      	lsrs	r2, r3, #3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3208      	adds	r2, #8
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	220f      	movs	r2, #15
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4013      	ands	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	08da      	lsrs	r2, r3, #3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3208      	adds	r2, #8
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	2203      	movs	r2, #3
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4013      	ands	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f003 0203 	and.w	r2, r3, #3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d00b      	beq.n	8006cc2 <HAL_GPIO_Init+0xe6>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d007      	beq.n	8006cc2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006cb6:	2b11      	cmp	r3, #17
 8006cb8:	d003      	beq.n	8006cc2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b12      	cmp	r3, #18
 8006cc0:	d130      	bne.n	8006d24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	2203      	movs	r2, #3
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	43db      	mvns	r3, r3
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 0201 	and.w	r2, r3, #1
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	2203      	movs	r2, #3
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80b4 	beq.w	8006eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	4b5f      	ldr	r3, [pc, #380]	; (8006ee4 <HAL_GPIO_Init+0x308>)
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	4a5e      	ldr	r2, [pc, #376]	; (8006ee4 <HAL_GPIO_Init+0x308>)
 8006d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d70:	6453      	str	r3, [r2, #68]	; 0x44
 8006d72:	4b5c      	ldr	r3, [pc, #368]	; (8006ee4 <HAL_GPIO_Init+0x308>)
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d7e:	4a5a      	ldr	r2, [pc, #360]	; (8006ee8 <HAL_GPIO_Init+0x30c>)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	3302      	adds	r3, #2
 8006d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	220f      	movs	r2, #15
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a51      	ldr	r2, [pc, #324]	; (8006eec <HAL_GPIO_Init+0x310>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d02b      	beq.n	8006e02 <HAL_GPIO_Init+0x226>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a50      	ldr	r2, [pc, #320]	; (8006ef0 <HAL_GPIO_Init+0x314>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d025      	beq.n	8006dfe <HAL_GPIO_Init+0x222>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a4f      	ldr	r2, [pc, #316]	; (8006ef4 <HAL_GPIO_Init+0x318>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01f      	beq.n	8006dfa <HAL_GPIO_Init+0x21e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a4e      	ldr	r2, [pc, #312]	; (8006ef8 <HAL_GPIO_Init+0x31c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d019      	beq.n	8006df6 <HAL_GPIO_Init+0x21a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a4d      	ldr	r2, [pc, #308]	; (8006efc <HAL_GPIO_Init+0x320>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_GPIO_Init+0x216>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a4c      	ldr	r2, [pc, #304]	; (8006f00 <HAL_GPIO_Init+0x324>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00d      	beq.n	8006dee <HAL_GPIO_Init+0x212>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a4b      	ldr	r2, [pc, #300]	; (8006f04 <HAL_GPIO_Init+0x328>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <HAL_GPIO_Init+0x20e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a4a      	ldr	r2, [pc, #296]	; (8006f08 <HAL_GPIO_Init+0x32c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d101      	bne.n	8006de6 <HAL_GPIO_Init+0x20a>
 8006de2:	2307      	movs	r3, #7
 8006de4:	e00e      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006de6:	2308      	movs	r3, #8
 8006de8:	e00c      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006dea:	2306      	movs	r3, #6
 8006dec:	e00a      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006dee:	2305      	movs	r3, #5
 8006df0:	e008      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006df2:	2304      	movs	r3, #4
 8006df4:	e006      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006df6:	2303      	movs	r3, #3
 8006df8:	e004      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e002      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <HAL_GPIO_Init+0x228>
 8006e02:	2300      	movs	r3, #0
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	f002 0203 	and.w	r2, r2, #3
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	4093      	lsls	r3, r2
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e14:	4934      	ldr	r1, [pc, #208]	; (8006ee8 <HAL_GPIO_Init+0x30c>)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e22:	4b3a      	ldr	r3, [pc, #232]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e46:	4a31      	ldr	r2, [pc, #196]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e9a:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ea0:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4013      	ands	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b0f      	cmp	r3, #15
 8006ed4:	f67f ae90 	bls.w	8006bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3724      	adds	r7, #36	; 0x24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40013800 	.word	0x40013800
 8006eec:	40020000 	.word	0x40020000
 8006ef0:	40020400 	.word	0x40020400
 8006ef4:	40020800 	.word	0x40020800
 8006ef8:	40020c00 	.word	0x40020c00
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40021400 	.word	0x40021400
 8006f04:	40021800 	.word	0x40021800
 8006f08:	40021c00 	.word	0x40021c00
 8006f0c:	40013c00 	.word	0x40013c00

08006f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	e001      	b.n	8006f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f5c:	e003      	b.n	8006f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f5e:	887b      	ldrh	r3, [r7, #2]
 8006f60:	041a      	lsls	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	619a      	str	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	887b      	ldrh	r3, [r7, #2]
 8006f84:	401a      	ands	r2, r3
 8006f86:	887b      	ldrh	r3, [r7, #2]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d104      	bne.n	8006f96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f8c:	887b      	ldrh	r3, [r7, #2]
 8006f8e:	041a      	lsls	r2, r3, #16
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006f94:	e002      	b.n	8006f9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006f96:	887a      	ldrh	r2, [r7, #2]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	619a      	str	r2, [r3, #24]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e10f      	b.n	80071da <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f00e ff4c 	bl	8015e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	; 0x24
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fec:	f002 fcc8 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 8006ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4a7b      	ldr	r2, [pc, #492]	; (80071e4 <HAL_I2C_Init+0x23c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d807      	bhi.n	800700c <HAL_I2C_Init+0x64>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a7a      	ldr	r2, [pc, #488]	; (80071e8 <HAL_I2C_Init+0x240>)
 8007000:	4293      	cmp	r3, r2
 8007002:	bf94      	ite	ls
 8007004:	2301      	movls	r3, #1
 8007006:	2300      	movhi	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	e006      	b.n	800701a <HAL_I2C_Init+0x72>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a77      	ldr	r2, [pc, #476]	; (80071ec <HAL_I2C_Init+0x244>)
 8007010:	4293      	cmp	r3, r2
 8007012:	bf94      	ite	ls
 8007014:	2301      	movls	r3, #1
 8007016:	2300      	movhi	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e0db      	b.n	80071da <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a72      	ldr	r2, [pc, #456]	; (80071f0 <HAL_I2C_Init+0x248>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	0c9b      	lsrs	r3, r3, #18
 800702c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a64      	ldr	r2, [pc, #400]	; (80071e4 <HAL_I2C_Init+0x23c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d802      	bhi.n	800705c <HAL_I2C_Init+0xb4>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	3301      	adds	r3, #1
 800705a:	e009      	b.n	8007070 <HAL_I2C_Init+0xc8>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	4a63      	ldr	r2, [pc, #396]	; (80071f4 <HAL_I2C_Init+0x24c>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	3301      	adds	r3, #1
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	430b      	orrs	r3, r1
 8007076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4956      	ldr	r1, [pc, #344]	; (80071e4 <HAL_I2C_Init+0x23c>)
 800708c:	428b      	cmp	r3, r1
 800708e:	d80d      	bhi.n	80070ac <HAL_I2C_Init+0x104>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1e59      	subs	r1, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	fbb1 f3f3 	udiv	r3, r1, r3
 800709e:	3301      	adds	r3, #1
 80070a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	bf38      	it	cc
 80070a8:	2304      	movcc	r3, #4
 80070aa:	e04f      	b.n	800714c <HAL_I2C_Init+0x1a4>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d111      	bne.n	80070d8 <HAL_I2C_Init+0x130>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1e58      	subs	r0, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	440b      	add	r3, r1
 80070c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e012      	b.n	80070fe <HAL_I2C_Init+0x156>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1e58      	subs	r0, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6859      	ldr	r1, [r3, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	0099      	lsls	r1, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ee:	3301      	adds	r3, #1
 80070f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <HAL_I2C_Init+0x15e>
 8007102:	2301      	movs	r3, #1
 8007104:	e022      	b.n	800714c <HAL_I2C_Init+0x1a4>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10e      	bne.n	800712c <HAL_I2C_Init+0x184>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1e58      	subs	r0, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	440b      	add	r3, r1
 800711c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007120:	3301      	adds	r3, #1
 8007122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712a:	e00f      	b.n	800714c <HAL_I2C_Init+0x1a4>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	1e58      	subs	r0, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6859      	ldr	r1, [r3, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	0099      	lsls	r1, r3, #2
 800713c:	440b      	add	r3, r1
 800713e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007142:	3301      	adds	r3, #1
 8007144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	6809      	ldr	r1, [r1, #0]
 8007150:	4313      	orrs	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69da      	ldr	r2, [r3, #28]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800717a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6911      	ldr	r1, [r2, #16]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68d2      	ldr	r2, [r2, #12]
 8007186:	4311      	orrs	r1, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	430b      	orrs	r3, r1
 800718e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	000186a0 	.word	0x000186a0
 80071e8:	001e847f 	.word	0x001e847f
 80071ec:	003d08ff 	.word	0x003d08ff
 80071f0:	431bde83 	.word	0x431bde83
 80071f4:	10624dd3 	.word	0x10624dd3

080071f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007212:	f7ff f80b 	bl	800622c <HAL_GetTick>
 8007216:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b20      	cmp	r3, #32
 8007222:	f040 80d9 	bne.w	80073d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2319      	movs	r3, #25
 800722c:	2201      	movs	r2, #1
 800722e:	496d      	ldr	r1, [pc, #436]	; (80073e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fc5b 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
 800723e:	e0cc      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_I2C_Mem_Write+0x56>
 800724a:	2302      	movs	r3, #2
 800724c:	e0c5      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d007      	beq.n	8007274 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2221      	movs	r2, #33	; 0x21
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a4d      	ldr	r2, [pc, #308]	; (80073e8 <HAL_I2C_Mem_Write+0x1f0>)
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072b6:	88f8      	ldrh	r0, [r7, #6]
 80072b8:	893a      	ldrh	r2, [r7, #8]
 80072ba:	8979      	ldrh	r1, [r7, #10]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	4603      	mov	r3, r0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fab6 	bl	8007838 <I2C_RequestMemoryWrite>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d052      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e081      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fcdc 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d107      	bne.n	80072fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06b      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d11b      	bne.n	8007378 <HAL_I2C_Mem_Write+0x180>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1aa      	bne.n	80072d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fcc8 	bl	8007d1a <I2C_WaitOnBTFFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b04      	cmp	r3, #4
 8007396:	d107      	bne.n	80073a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e016      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	00100002 	.word	0x00100002
 80073e8:	ffff0000 	.word	0xffff0000

080073ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	460b      	mov	r3, r1
 8007400:	813b      	strh	r3, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007406:	f7fe ff11 	bl	800622c <HAL_GetTick>
 800740a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b20      	cmp	r3, #32
 8007416:	f040 8208 	bne.w	800782a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2319      	movs	r3, #25
 8007420:	2201      	movs	r2, #1
 8007422:	497b      	ldr	r1, [pc, #492]	; (8007610 <HAL_I2C_Mem_Read+0x224>)
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fb61 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
 8007432:	e1fb      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_I2C_Mem_Read+0x56>
 800743e:	2302      	movs	r3, #2
 8007440:	e1f4      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b01      	cmp	r3, #1
 8007456:	d007      	beq.n	8007468 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2222      	movs	r2, #34	; 0x22
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2240      	movs	r2, #64	; 0x40
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a5b      	ldr	r2, [pc, #364]	; (8007614 <HAL_I2C_Mem_Read+0x228>)
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074aa:	88f8      	ldrh	r0, [r7, #6]
 80074ac:	893a      	ldrh	r2, [r7, #8]
 80074ae:	8979      	ldrh	r1, [r7, #10]
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4603      	mov	r3, r0
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fa46 	bl	800794c <I2C_RequestMemoryRead>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e1b0      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d113      	bne.n	80074fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d2:	2300      	movs	r3, #0
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e184      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d11b      	bne.n	800753a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e164      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753e:	2b02      	cmp	r3, #2
 8007540:	d11b      	bne.n	800757a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007562:	2300      	movs	r3, #0
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	e144      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007590:	e138      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007596:	2b03      	cmp	r3, #3
 8007598:	f200 80f1 	bhi.w	800777e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d123      	bne.n	80075ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fbf7 	bl	8007d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e139      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ea:	e10b      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d14e      	bne.n	8007692 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	2200      	movs	r2, #0
 80075fc:	4906      	ldr	r1, [pc, #24]	; (8007618 <HAL_I2C_Mem_Read+0x22c>)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fa74 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e10e      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
 800760e:	bf00      	nop
 8007610:	00100002 	.word	0x00100002
 8007614:	ffff0000 	.word	0xffff0000
 8007618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007690:	e0b8      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	2200      	movs	r2, #0
 800769a:	4966      	ldr	r1, [pc, #408]	; (8007834 <HAL_I2C_Mem_Read+0x448>)
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fa25 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0bf      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2200      	movs	r2, #0
 80076f6:	494f      	ldr	r1, [pc, #316]	; (8007834 <HAL_I2C_Mem_Read+0x448>)
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f9f7 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e091      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691a      	ldr	r2, [r3, #16]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800777c:	e042      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fb0a 	bl	8007d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e04c      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d118      	bne.n	8007804 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f aec2 	bne.w	8007592 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
  }
}
 800782c:	4618      	mov	r0, r3
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	00010004 	.word	0x00010004

08007838 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af02      	add	r7, sp, #8
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	4608      	mov	r0, r1
 8007842:	4611      	mov	r1, r2
 8007844:	461a      	mov	r2, r3
 8007846:	4603      	mov	r3, r0
 8007848:	817b      	strh	r3, [r7, #10]
 800784a:	460b      	mov	r3, r1
 800784c:	813b      	strh	r3, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2200      	movs	r2, #0
 800786a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f93c 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e05f      	b.n	800793e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800788c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	6a3a      	ldr	r2, [r7, #32]
 8007892:	492d      	ldr	r1, [pc, #180]	; (8007948 <I2C_RequestMemoryWrite+0x110>)
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f980 	bl	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e04c      	b.n	800793e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078bc:	6a39      	ldr	r1, [r7, #32]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f9ea 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00d      	beq.n	80078e6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d107      	bne.n	80078e2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e02b      	b.n	800793e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d105      	bne.n	80078f8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078ec:	893b      	ldrh	r3, [r7, #8]
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	611a      	str	r2, [r3, #16]
 80078f6:	e021      	b.n	800793c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80078f8:	893b      	ldrh	r3, [r7, #8]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007908:	6a39      	ldr	r1, [r7, #32]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f9c4 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b04      	cmp	r3, #4
 800791c:	d107      	bne.n	800792e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800792c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e005      	b.n	800793e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007932:	893b      	ldrh	r3, [r7, #8]
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	00010002 	.word	0x00010002

0800794c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	817b      	strh	r3, [r7, #10]
 800795e:	460b      	mov	r3, r1
 8007960:	813b      	strh	r3, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007974:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	2200      	movs	r2, #0
 800798e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f8aa 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e09e      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079a2:	897b      	ldrh	r3, [r7, #10]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	494c      	ldr	r1, [pc, #304]	; (8007ae8 <I2C_RequestMemoryRead+0x19c>)
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f8ee 	bl	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e08b      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e0:	6a39      	ldr	r1, [r7, #32]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f958 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d107      	bne.n	8007a06 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e06a      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d105      	bne.n	8007a1c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a10:	893b      	ldrh	r3, [r7, #8]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	611a      	str	r2, [r3, #16]
 8007a1a:	e021      	b.n	8007a60 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f932 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e044      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	6a39      	ldr	r1, [r7, #32]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f917 	bl	8007c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d107      	bne.n	8007a88 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e029      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f81f 	bl	8007aec <I2C_WaitOnFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e013      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ab8:	897b      	ldrh	r3, [r7, #10]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	4906      	ldr	r1, [pc, #24]	; (8007ae8 <I2C_RequestMemoryRead+0x19c>)
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f863 	bl	8007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	00010002 	.word	0x00010002

08007aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007afc:	e025      	b.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b04:	d021      	beq.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b06:	f7fe fb91 	bl	800622c <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d302      	bcc.n	8007b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d116      	bne.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f043 0220 	orr.w	r2, r3, #32
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e023      	b.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	0c1b      	lsrs	r3, r3, #16
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d10d      	bne.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	43da      	mvns	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf0c      	ite	eq
 8007b66:	2301      	moveq	r3, #1
 8007b68:	2300      	movne	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	e00c      	b.n	8007b8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	43da      	mvns	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bf0c      	ite	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	2300      	movne	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d0b6      	beq.n	8007afe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ba8:	e051      	b.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb8:	d123      	bne.n	8007c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	f043 0204 	orr.w	r2, r3, #4
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e046      	b.n	8007c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d021      	beq.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c0a:	f7fe fb0f 	bl	800622c <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d302      	bcc.n	8007c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d116      	bne.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f043 0220 	orr.w	r2, r3, #32
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e020      	b.n	8007c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d10c      	bne.n	8007c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	43da      	mvns	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4013      	ands	r3, r2
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf14      	ite	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	2300      	moveq	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	e00b      	b.n	8007c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	43da      	mvns	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d18d      	bne.n	8007baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ca4:	e02d      	b.n	8007d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f8ce 	bl	8007e48 <I2C_IsAcknowledgeFailed>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e02d      	b.n	8007d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d021      	beq.n	8007d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cbe:	f7fe fab5 	bl	800622c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d116      	bne.n	8007d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f043 0220 	orr.w	r2, r3, #32
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e007      	b.n	8007d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d1ca      	bne.n	8007ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d26:	e02d      	b.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f88d 	bl	8007e48 <I2C_IsAcknowledgeFailed>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e02d      	b.n	8007d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d021      	beq.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d40:	f7fe fa74 	bl	800622c <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d302      	bcc.n	8007d56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d116      	bne.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f043 0220 	orr.w	r2, r3, #32
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e007      	b.n	8007d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d1ca      	bne.n	8007d28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007da8:	e042      	b.n	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d119      	bne.n	8007dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0210 	mvn.w	r2, #16
 8007dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e029      	b.n	8007e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dec:	f7fe fa1e 	bl	800622c <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d302      	bcc.n	8007e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d116      	bne.n	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e007      	b.n	8007e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d1b5      	bne.n	8007daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5e:	d11b      	bne.n	8007e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	f043 0204 	orr.w	r2, r3, #4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea8:	b08f      	sub	sp, #60	; 0x3c
 8007eaa:	af0a      	add	r7, sp, #40	; 0x28
 8007eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e10f      	b.n	80080d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f00e fc26 	bl	8016724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2203      	movs	r2, #3
 8007edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f006 f911 	bl	800e11e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	687e      	ldr	r6, [r7, #4]
 8007f04:	466d      	mov	r5, sp
 8007f06:	f106 0410 	add.w	r4, r6, #16
 8007f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f16:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f1a:	1d33      	adds	r3, r6, #4
 8007f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f1e:	6838      	ldr	r0, [r7, #0]
 8007f20:	f005 ffe8 	bl	800def4 <USB_CoreInit>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e0d0      	b.n	80080d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f006 f8ff 	bl	800e140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
 8007f46:	e04a      	b.n	8007fde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	333d      	adds	r3, #61	; 0x3d
 8007f58:	2201      	movs	r2, #1
 8007f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f5c:	7bfa      	ldrb	r2, [r7, #15]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	333c      	adds	r3, #60	; 0x3c
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f70:	7bfa      	ldrb	r2, [r7, #15]
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	b298      	uxth	r0, r3
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	3342      	adds	r3, #66	; 0x42
 8007f84:	4602      	mov	r2, r0
 8007f86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	333f      	adds	r3, #63	; 0x3f
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f9c:	7bfa      	ldrb	r2, [r7, #15]
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	3344      	adds	r3, #68	; 0x44
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fb0:	7bfa      	ldrb	r2, [r7, #15]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	3348      	adds	r3, #72	; 0x48
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3350      	adds	r3, #80	; 0x50
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]
 8007fde:	7bfa      	ldrb	r2, [r7, #15]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d3af      	bcc.n	8007f48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	e044      	b.n	8008078 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007fee:	7bfa      	ldrb	r2, [r7, #15]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008004:	7bfa      	ldrb	r2, [r7, #15]
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008030:	7bfa      	ldrb	r2, [r7, #15]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008046:	7bfa      	ldrb	r2, [r7, #15]
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800805c:	7bfa      	ldrb	r2, [r7, #15]
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	3301      	adds	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	7bfa      	ldrb	r2, [r7, #15]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d3b5      	bcc.n	8007fee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	687e      	ldr	r6, [r7, #4]
 800808a:	466d      	mov	r5, sp
 800808c:	f106 0410 	add.w	r4, r6, #16
 8008090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800809c:	e885 0003 	stmia.w	r5, {r0, r1}
 80080a0:	1d33      	adds	r3, r6, #4
 80080a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080a4:	6838      	ldr	r0, [r7, #0]
 80080a6:	f006 f875 	bl	800e194 <USB_DevInit>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e00d      	b.n	80080d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f007 f86a 	bl	800f1aa <USB_DevDisconnect>

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d101      	bne.n	80080fc <HAL_PCD_Start+0x1c>
 80080f8:	2302      	movs	r3, #2
 80080fa:	e020      	b.n	800813e <HAL_PCD_Start+0x5e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008108:	2b01      	cmp	r3, #1
 800810a:	d109      	bne.n	8008120 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008110:	2b01      	cmp	r3, #1
 8008112:	d005      	beq.n	8008120 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f007 f828 	bl	800f17a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f005 ffe4 	bl	800e0fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008146:	b590      	push	{r4, r7, lr}
 8008148:	b08d      	sub	sp, #52	; 0x34
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f007 f8cf 	bl	800f300 <USB_GetMode>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 838e 	bne.w	8008886 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f007 f833 	bl	800f1da <USB_ReadInterrupts>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8384 	beq.w	8008884 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4618      	mov	r0, r3
 8008182:	f007 f82a 	bl	800f1da <USB_ReadInterrupts>
 8008186:	4603      	mov	r3, r0
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b02      	cmp	r3, #2
 800818e:	d107      	bne.n	80081a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f002 0202 	and.w	r2, r2, #2
 800819e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f007 f818 	bl	800f1da <USB_ReadInterrupts>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081b4:	d17b      	bne.n	80082ae <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f007 f81e 	bl	800f200 <USB_ReadDevAllOutEpInterrupt>
 80081c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80081c6:	e06f      	b.n	80082a8 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d064      	beq.n	800829c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f007 f843 	bl	800f268 <USB_ReadDevOutEPInterrupt>
 80081e2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fa:	461a      	mov	r2, r3
 80081fc:	2301      	movs	r3, #1
 80081fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fe0e 	bl	8008e24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff0d 	bl	8009034 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	461a      	mov	r2, r3
 8008228:	2308      	movs	r3, #8
 800822a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f003 0310 	and.w	r3, r3, #16
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008242:	461a      	mov	r2, r3
 8008244:	2310      	movs	r3, #16
 8008246:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d015      	beq.n	800827e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d108      	bne.n	800826c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008264:	461a      	mov	r2, r3
 8008266:	2101      	movs	r1, #1
 8008268:	f007 f88e 	bl	800f388 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	461a      	mov	r2, r3
 800827a:	2320      	movs	r3, #32
 800827c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d009      	beq.n	800829c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	461a      	mov	r2, r3
 8008296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800829a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	3301      	adds	r3, #1
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d18c      	bne.n	80081c8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f006 ff91 	bl	800f1da <USB_ReadInterrupts>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082c2:	f040 80c4 	bne.w	800844e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f006 ffb2 	bl	800f234 <USB_ReadDevAllInEpInterrupt>
 80082d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80082d6:	e0b6      	b.n	8008446 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 80ab 	beq.w	800843a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f006 ffd8 	bl	800f2a4 <USB_ReadDevInEPInterrupt>
 80082f4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d05b      	beq.n	80083b8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	2201      	movs	r2, #1
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	43db      	mvns	r3, r3
 800831a:	69f9      	ldr	r1, [r7, #28]
 800831c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008320:	4013      	ands	r3, r2
 8008322:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	461a      	mov	r2, r3
 8008332:	2301      	movs	r3, #1
 8008334:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d11b      	bne.n	8008376 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	4613      	mov	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	1a9b      	subs	r3, r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	3348      	adds	r3, #72	; 0x48
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4403      	add	r3, r0
 800835e:	3344      	adds	r3, #68	; 0x44
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4419      	add	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008368:	4613      	mov	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4403      	add	r3, r0
 8008372:	3348      	adds	r3, #72	; 0x48
 8008374:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	b2db      	uxtb	r3, r3
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f00e fa52 	bl	8016826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d116      	bne.n	80083b8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d113      	bne.n	80083b8 <HAL_PCD_IRQHandler+0x272>
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008394:	4613      	mov	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	3350      	adds	r3, #80	; 0x50
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d108      	bne.n	80083b8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083b0:	461a      	mov	r2, r3
 80083b2:	2101      	movs	r1, #1
 80083b4:	f006 ffe8 	bl	800f388 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	f003 0308 	and.w	r3, r3, #8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	461a      	mov	r2, r3
 80083d0:	2308      	movs	r3, #8
 80083d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d008      	beq.n	80083f0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	461a      	mov	r2, r3
 80083ec:	2310      	movs	r3, #16
 80083ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	2340      	movs	r3, #64	; 0x40
 800840a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	461a      	mov	r2, r3
 8008424:	2302      	movs	r3, #2
 8008426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc67 	bl	8008d08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	3301      	adds	r3, #1
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	2b00      	cmp	r3, #0
 800844a:	f47f af45 	bne.w	80082d8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f006 fec1 	bl	800f1da <USB_ReadInterrupts>
 8008458:	4603      	mov	r3, r0
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008462:	d122      	bne.n	80084aa <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800847e:	2b01      	cmp	r3, #1
 8008480:	d108      	bne.n	8008494 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fe89 	bl	80091a4 <HAL_PCDEx_LPM_Callback>
 8008492:	e002      	b.n	800849a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f00e fa3d 	bl	8016914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695a      	ldr	r2, [r3, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80084a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f006 fe93 	bl	800f1da <USB_ReadInterrupts>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084be:	d112      	bne.n	80084e6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f00e f9f9 	bl	80168c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f006 fe75 	bl	800f1da <USB_ReadInterrupts>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fa:	f040 80a7 	bne.w	800864c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2110      	movs	r1, #16
 8008518:	4618      	mov	r0, r3
 800851a:	f005 ffad 	bl	800e478 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008522:	e036      	b.n	8008592 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	461a      	mov	r2, r3
 8008532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008536:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	440a      	add	r2, r1
 800854e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008556:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	461a      	mov	r2, r3
 8008566:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800856a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800858a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	3301      	adds	r3, #1
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008598:	429a      	cmp	r2, r3
 800859a:	d3c3      	bcc.n	8008524 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d016      	beq.n	80085e6 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c8:	f043 030b 	orr.w	r3, r3, #11
 80085cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085de:	f043 030b 	orr.w	r3, r3, #11
 80085e2:	6453      	str	r3, [r2, #68]	; 0x44
 80085e4:	e015      	b.n	8008612 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80085fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800860c:	f043 030b 	orr.w	r3, r3, #11
 8008610:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008620:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008624:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008636:	461a      	mov	r2, r3
 8008638:	f006 fea6 	bl	800f388 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800864a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f006 fdc2 	bl	800f1da <USB_ReadInterrupts>
 8008656:	4603      	mov	r3, r0
 8008658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800865c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008660:	d124      	bne.n	80086ac <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f006 fe58 	bl	800f31c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f005 ff62 	bl	800e53a <USB_GetDevSpeed>
 8008676:	4603      	mov	r3, r0
 8008678:	461a      	mov	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681c      	ldr	r4, [r3, #0]
 8008682:	f001 f971 	bl	8009968 <HAL_RCC_GetHCLKFreq>
 8008686:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800868c:	b2db      	uxtb	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	4620      	mov	r0, r4
 8008692:	f005 fc91 	bl	800dfb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f00e f8ed 	bl	8016876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695a      	ldr	r2, [r3, #20]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f006 fd92 	bl	800f1da <USB_ReadInterrupts>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d161      	bne.n	8008784 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0210 	bic.w	r2, r2, #16
 80086ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f003 020f 	and.w	r2, r3, #15
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	3304      	adds	r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	0c5b      	lsrs	r3, r3, #17
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d124      	bne.n	8008746 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008702:	4013      	ands	r3, r2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d035      	beq.n	8008774 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	091b      	lsrs	r3, r3, #4
 8008710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008716:	b29b      	uxth	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	6a38      	ldr	r0, [r7, #32]
 800871c:	f006 fc0a 	bl	800ef34 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	091b      	lsrs	r3, r3, #4
 8008728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800872c:	441a      	add	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	091b      	lsrs	r3, r3, #4
 800873a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800873e:	441a      	add	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	619a      	str	r2, [r3, #24]
 8008744:	e016      	b.n	8008774 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	0c5b      	lsrs	r3, r3, #17
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	2b06      	cmp	r3, #6
 8008750:	d110      	bne.n	8008774 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008758:	2208      	movs	r2, #8
 800875a:	4619      	mov	r1, r3
 800875c:	6a38      	ldr	r0, [r7, #32]
 800875e:	f006 fbe9 	bl	800ef34 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	091b      	lsrs	r3, r3, #4
 800876a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800876e:	441a      	add	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0210 	orr.w	r2, r2, #16
 8008782:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f006 fd26 	bl	800f1da <USB_ReadInterrupts>
 800878e:	4603      	mov	r3, r0
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b08      	cmp	r3, #8
 8008796:	d10a      	bne.n	80087ae <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f00e f85e 	bl	801685a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f002 0208 	and.w	r2, r2, #8
 80087ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f006 fd11 	bl	800f1da <USB_ReadInterrupts>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c2:	d10f      	bne.n	80087e4 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f00e f8c0 	bl	8016954 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80087e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f006 fcf6 	bl	800f1da <USB_ReadInterrupts>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f8:	d10f      	bne.n	800881a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	b2db      	uxtb	r3, r3
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f00e f893 	bl	8016930 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	f006 fcdb 	bl	800f1da <USB_ReadInterrupts>
 8008824:	4603      	mov	r3, r0
 8008826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882e:	d10a      	bne.n	8008846 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f00e f8a1 	bl	8016978 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f006 fcc5 	bl	800f1da <USB_ReadInterrupts>
 8008850:	4603      	mov	r3, r0
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b04      	cmp	r3, #4
 8008858:	d115      	bne.n	8008886 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f00e f891 	bl	8016994 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6859      	ldr	r1, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	e000      	b.n	8008886 <HAL_PCD_IRQHandler+0x740>
      return;
 8008884:	bf00      	nop
    }
  }
}
 8008886:	3734      	adds	r7, #52	; 0x34
 8008888:	46bd      	mov	sp, r7
 800888a:	bd90      	pop	{r4, r7, pc}

0800888c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_PCD_SetAddress+0x1a>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e013      	b.n	80088ce <HAL_PCD_SetAddress+0x42>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f006 fc35 	bl	800f12e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	70fb      	strb	r3, [r7, #3]
 80088e8:	460b      	mov	r3, r1
 80088ea:	803b      	strh	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da0f      	bge.n	800891c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	4613      	mov	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	3338      	adds	r3, #56	; 0x38
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	4413      	add	r3, r2
 8008910:	3304      	adds	r3, #4
 8008912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	705a      	strb	r2, [r3, #1]
 800891a:	e00f      	b.n	800893c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	3304      	adds	r3, #4
 8008934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	b2da      	uxtb	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008948:	883a      	ldrh	r2, [r7, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	78ba      	ldrb	r2, [r7, #2]
 8008952:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008966:	78bb      	ldrb	r3, [r7, #2]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d102      	bne.n	8008972 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_PCD_EP_Open+0xaa>
 800897c:	2302      	movs	r3, #2
 800897e:	e00e      	b.n	800899e <HAL_PCD_EP_Open+0xc8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68f9      	ldr	r1, [r7, #12]
 800898e:	4618      	mov	r0, r3
 8008990:	f005 fdf8 	bl	800e584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800899c:	7afb      	ldrb	r3, [r7, #11]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da0f      	bge.n	80089da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f003 020f 	and.w	r2, r3, #15
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	3338      	adds	r3, #56	; 0x38
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	3304      	adds	r3, #4
 80089d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	705a      	strb	r2, [r3, #1]
 80089d8:	e00f      	b.n	80089fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	f003 020f 	and.w	r2, r3, #15
 80089e0:	4613      	mov	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	3304      	adds	r3, #4
 80089f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	f003 030f 	and.w	r3, r3, #15
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_PCD_EP_Close+0x6e>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e00e      	b.n	8008a32 <HAL_PCD_EP_Close+0x8c>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68f9      	ldr	r1, [r7, #12]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f005 fe36 	bl	800e694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
 8008a46:	460b      	mov	r3, r1
 8008a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a4a:	7afb      	ldrb	r3, [r7, #11]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	3304      	adds	r3, #4
 8008a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2200      	movs	r2, #0
 8008a74:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d102      	bne.n	8008a96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6979      	ldr	r1, [r7, #20]
 8008aae:	f006 f8b9 	bl	800ec24 <USB_EP0StartXfer>
 8008ab2:	e008      	b.n	8008ac6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	f005 fe6b 	bl	800e79c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008af2:	681b      	ldr	r3, [r3, #0]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	f003 020f 	and.w	r2, r3, #15
 8008b16:	4613      	mov	r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	3338      	adds	r3, #56	; 0x38
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	3304      	adds	r3, #4
 8008b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2200      	movs	r2, #0
 8008b38:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b40:	7afb      	ldrb	r3, [r7, #11]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d102      	bne.n	8008b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b5a:	7afb      	ldrb	r3, [r7, #11]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d109      	bne.n	8008b78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6979      	ldr	r1, [r7, #20]
 8008b72:	f006 f857 	bl	800ec24 <USB_EP0StartXfer>
 8008b76:	e008      	b.n	8008b8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	6979      	ldr	r1, [r7, #20]
 8008b86:	f005 fe09 	bl	800e79c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	f003 020f 	and.w	r2, r3, #15
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d901      	bls.n	8008bb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e050      	b.n	8008c54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da0f      	bge.n	8008bda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	f003 020f 	and.w	r2, r3, #15
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	1a9b      	subs	r3, r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	3338      	adds	r3, #56	; 0x38
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	3304      	adds	r3, #4
 8008bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	705a      	strb	r2, [r3, #1]
 8008bd8:	e00d      	b.n	8008bf6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_PCD_EP_SetStall+0x82>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e01e      	b.n	8008c54 <HAL_PCD_EP_SetStall+0xc0>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f006 f9ae 	bl	800ef86 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	b2d9      	uxtb	r1, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c44:	461a      	mov	r2, r3
 8008c46:	f006 fb9f 	bl	800f388 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	f003 020f 	and.w	r2, r3, #15
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d901      	bls.n	8008c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e042      	b.n	8008d00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da0f      	bge.n	8008ca2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	705a      	strb	r2, [r3, #1]
 8008ca0:	e00f      	b.n	8008cc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_PCD_EP_ClrStall+0x86>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e00e      	b.n	8008d00 <HAL_PCD_EP_ClrStall+0xa4>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f006 f9b6 	bl	800f062 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	3338      	adds	r3, #56	; 0x38
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d901      	bls.n	8008d40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e06c      	b.n	8008e1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	695a      	ldr	r2, [r3, #20]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d902      	bls.n	8008d5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3303      	adds	r3, #3
 8008d60:	089b      	lsrs	r3, r3, #2
 8008d62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d64:	e02b      	b.n	8008dbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d902      	bls.n	8008d82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	3303      	adds	r3, #3
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68d9      	ldr	r1, [r3, #12]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f006 f892 	bl	800eeca <USB_WritePacket>

    ep->xfer_buff  += len;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d809      	bhi.n	8008de8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d203      	bcs.n	8008de8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1be      	bne.n	8008d66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d811      	bhi.n	8008e18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	6939      	ldr	r1, [r7, #16]
 8008e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e14:	4013      	ands	r3, r2
 8008e16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3720      	adds	r7, #32
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	333c      	adds	r3, #60	; 0x3c
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	f040 80b3 	bne.w	8008fc2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d028      	beq.n	8008eb8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a70      	ldr	r2, [pc, #448]	; (800902c <PCD_EP_OutXfrComplete_int+0x208>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d90e      	bls.n	8008e8c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	461a      	mov	r2, r3
 8008e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f00d fc9d 	bl	80167cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	f006 fa72 	bl	800f388 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	2308      	movs	r3, #8
 8008eb4:	6093      	str	r3, [r2, #8]
 8008eb6:	e0b3      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ece:	461a      	mov	r2, r3
 8008ed0:	2320      	movs	r3, #32
 8008ed2:	6093      	str	r3, [r2, #8]
 8008ed4:	e0a4      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 809f 	bne.w	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4a51      	ldr	r2, [pc, #324]	; (800902c <PCD_EP_OutXfrComplete_int+0x208>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d90f      	bls.n	8008f0a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	461a      	mov	r2, r3
 8008f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f06:	6093      	str	r3, [r2, #8]
 8008f08:	e08a      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	1a9b      	subs	r3, r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008f1c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	0159      	lsls	r1, r3, #5
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	440b      	add	r3, r1
 8008f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008f30:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	4613      	mov	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4403      	add	r3, r0
 8008f40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008f44:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4403      	add	r3, r0
 8008f68:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4419      	add	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4403      	add	r3, r0
 8008f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f82:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f00d fc30 	bl	80167f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d144      	bne.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d138      	bne.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fb8:	461a      	mov	r2, r3
 8008fba:	2101      	movs	r1, #1
 8008fbc:	f006 f9e4 	bl	800f388 <USB_EP0_OutStart>
 8008fc0:	e02e      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a1a      	ldr	r2, [pc, #104]	; (8009030 <PCD_EP_OutXfrComplete_int+0x20c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d124      	bne.n	8009014 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe6:	6093      	str	r3, [r2, #8]
 8008fe8:	e01a      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009000:	461a      	mov	r2, r3
 8009002:	2320      	movs	r3, #32
 8009004:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f00d fbef 	bl	80167f0 <HAL_PCD_DataOutStageCallback>
 8009012:	e005      	b.n	8009020 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f00d fbe8 	bl	80167f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	4f54300a 	.word	0x4f54300a
 8009030:	4f54310a 	.word	0x4f54310a

08009034 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	333c      	adds	r3, #60	; 0x3c
 800904c:	3304      	adds	r3, #4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d113      	bne.n	8009092 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a1f      	ldr	r2, [pc, #124]	; (80090ec <PCD_EP_OutSetupPacket_int+0xb8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d922      	bls.n	80090b8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01d      	beq.n	80090b8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	461a      	mov	r2, r3
 800908a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800908e:	6093      	str	r3, [r2, #8]
 8009090:	e012      	b.n	80090b8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d10e      	bne.n	80090b8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	461a      	mov	r2, r3
 80090b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f00d fb87 	bl	80167cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <PCD_EP_OutSetupPacket_int+0xb8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d90c      	bls.n	80090e0 <PCD_EP_OutSetupPacket_int+0xac>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d108      	bne.n	80090e0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090d8:	461a      	mov	r2, r3
 80090da:	2101      	movs	r1, #1
 80090dc:	f006 f954 	bl	800f388 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	4f54300a 	.word	0x4f54300a
 80090f0:	4f54310a 	.word	0x4f54310a

080090f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
 8009100:	4613      	mov	r3, r2
 8009102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d107      	bne.n	8009122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009112:	883b      	ldrh	r3, [r7, #0]
 8009114:	0419      	lsls	r1, r3, #16
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	430a      	orrs	r2, r1
 800911e:	629a      	str	r2, [r3, #40]	; 0x28
 8009120:	e028      	b.n	8009174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	0c1b      	lsrs	r3, r3, #16
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e00d      	b.n	8009152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	3340      	adds	r3, #64	; 0x40
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	4413      	add	r3, r2
 800914a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	3301      	adds	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	7bfa      	ldrb	r2, [r7, #15]
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	3b01      	subs	r3, #1
 8009158:	429a      	cmp	r2, r3
 800915a:	d3ec      	bcc.n	8009136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800915c:	883b      	ldrh	r3, [r7, #0]
 800915e:	0418      	lsls	r0, r3, #16
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	3b01      	subs	r3, #1
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4302      	orrs	r2, r0
 800916c:	3340      	adds	r3, #64	; 0x40
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	887a      	ldrh	r2, [r7, #2]
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e22d      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d075      	beq.n	80092c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091da:	4ba3      	ldr	r3, [pc, #652]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f003 030c 	and.w	r3, r3, #12
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d00c      	beq.n	8009200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091e6:	4ba0      	ldr	r3, [pc, #640]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d112      	bne.n	8009218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091f2:	4b9d      	ldr	r3, [pc, #628]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091fe:	d10b      	bne.n	8009218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009200:	4b99      	ldr	r3, [pc, #612]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d05b      	beq.n	80092c4 <HAL_RCC_OscConfig+0x108>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d157      	bne.n	80092c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e208      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009220:	d106      	bne.n	8009230 <HAL_RCC_OscConfig+0x74>
 8009222:	4b91      	ldr	r3, [pc, #580]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a90      	ldr	r2, [pc, #576]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	e01d      	b.n	800926c <HAL_RCC_OscConfig+0xb0>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009238:	d10c      	bne.n	8009254 <HAL_RCC_OscConfig+0x98>
 800923a:	4b8b      	ldr	r3, [pc, #556]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a8a      	ldr	r2, [pc, #552]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	4b88      	ldr	r3, [pc, #544]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a87      	ldr	r2, [pc, #540]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800924c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e00b      	b.n	800926c <HAL_RCC_OscConfig+0xb0>
 8009254:	4b84      	ldr	r3, [pc, #528]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a83      	ldr	r2, [pc, #524]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800925a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	4b81      	ldr	r3, [pc, #516]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a80      	ldr	r2, [pc, #512]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800926a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d013      	beq.n	800929c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009274:	f7fc ffda 	bl	800622c <HAL_GetTick>
 8009278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800927a:	e008      	b.n	800928e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800927c:	f7fc ffd6 	bl	800622c <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b64      	cmp	r3, #100	; 0x64
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e1cd      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800928e:	4b76      	ldr	r3, [pc, #472]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0f0      	beq.n	800927c <HAL_RCC_OscConfig+0xc0>
 800929a:	e014      	b.n	80092c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800929c:	f7fc ffc6 	bl	800622c <HAL_GetTick>
 80092a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092a2:	e008      	b.n	80092b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092a4:	f7fc ffc2 	bl	800622c <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	2b64      	cmp	r3, #100	; 0x64
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e1b9      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092b6:	4b6c      	ldr	r3, [pc, #432]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f0      	bne.n	80092a4 <HAL_RCC_OscConfig+0xe8>
 80092c2:	e000      	b.n	80092c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d063      	beq.n	800939a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092d2:	4b65      	ldr	r3, [pc, #404]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 030c 	and.w	r3, r3, #12
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092de:	4b62      	ldr	r3, [pc, #392]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d11c      	bne.n	8009324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ea:	4b5f      	ldr	r3, [pc, #380]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d116      	bne.n	8009324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092f6:	4b5c      	ldr	r3, [pc, #368]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <HAL_RCC_OscConfig+0x152>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d001      	beq.n	800930e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e18d      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800930e:	4b56      	ldr	r3, [pc, #344]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4952      	ldr	r1, [pc, #328]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800931e:	4313      	orrs	r3, r2
 8009320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009322:	e03a      	b.n	800939a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d020      	beq.n	800936e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800932c:	4b4f      	ldr	r3, [pc, #316]	; (800946c <HAL_RCC_OscConfig+0x2b0>)
 800932e:	2201      	movs	r2, #1
 8009330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009332:	f7fc ff7b 	bl	800622c <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009338:	e008      	b.n	800934c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800933a:	f7fc ff77 	bl	800622c <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e16e      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800934c:	4b46      	ldr	r3, [pc, #280]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0f0      	beq.n	800933a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009358:	4b43      	ldr	r3, [pc, #268]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	4940      	ldr	r1, [pc, #256]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009368:	4313      	orrs	r3, r2
 800936a:	600b      	str	r3, [r1, #0]
 800936c:	e015      	b.n	800939a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800936e:	4b3f      	ldr	r3, [pc, #252]	; (800946c <HAL_RCC_OscConfig+0x2b0>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fc ff5a 	bl	800622c <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800937c:	f7fc ff56 	bl	800622c <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e14d      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800938e:	4b36      	ldr	r3, [pc, #216]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0308 	and.w	r3, r3, #8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d030      	beq.n	8009408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d016      	beq.n	80093dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <HAL_RCC_OscConfig+0x2b4>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b4:	f7fc ff3a 	bl	800622c <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ba:	e008      	b.n	80093ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093bc:	f7fc ff36 	bl	800622c <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d901      	bls.n	80093ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e12d      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ce:	4b26      	ldr	r3, [pc, #152]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80093d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <HAL_RCC_OscConfig+0x200>
 80093da:	e015      	b.n	8009408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093dc:	4b24      	ldr	r3, [pc, #144]	; (8009470 <HAL_RCC_OscConfig+0x2b4>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093e2:	f7fc ff23 	bl	800622c <HAL_GetTick>
 80093e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093e8:	e008      	b.n	80093fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ea:	f7fc ff1f 	bl	800622c <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d901      	bls.n	80093fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e116      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093fc:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 80093fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1f0      	bne.n	80093ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80a0 	beq.w	8009556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800941a:	4b13      	ldr	r3, [pc, #76]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10f      	bne.n	8009446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	4a0e      	ldr	r2, [pc, #56]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009434:	6413      	str	r3, [r2, #64]	; 0x40
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <HAL_RCC_OscConfig+0x2ac>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009446:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <HAL_RCC_OscConfig+0x2b8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944e:	2b00      	cmp	r3, #0
 8009450:	d121      	bne.n	8009496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009452:	4b08      	ldr	r3, [pc, #32]	; (8009474 <HAL_RCC_OscConfig+0x2b8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a07      	ldr	r2, [pc, #28]	; (8009474 <HAL_RCC_OscConfig+0x2b8>)
 8009458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800945c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800945e:	f7fc fee5 	bl	800622c <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009464:	e011      	b.n	800948a <HAL_RCC_OscConfig+0x2ce>
 8009466:	bf00      	nop
 8009468:	40023800 	.word	0x40023800
 800946c:	42470000 	.word	0x42470000
 8009470:	42470e80 	.word	0x42470e80
 8009474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009478:	f7fc fed8 	bl	800622c <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e0cf      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800948a:	4b6a      	ldr	r3, [pc, #424]	; (8009634 <HAL_RCC_OscConfig+0x478>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d106      	bne.n	80094ac <HAL_RCC_OscConfig+0x2f0>
 800949e:	4b66      	ldr	r3, [pc, #408]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	4a65      	ldr	r2, [pc, #404]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	6713      	str	r3, [r2, #112]	; 0x70
 80094aa:	e01c      	b.n	80094e6 <HAL_RCC_OscConfig+0x32a>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b05      	cmp	r3, #5
 80094b2:	d10c      	bne.n	80094ce <HAL_RCC_OscConfig+0x312>
 80094b4:	4b60      	ldr	r3, [pc, #384]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b8:	4a5f      	ldr	r2, [pc, #380]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094ba:	f043 0304 	orr.w	r3, r3, #4
 80094be:	6713      	str	r3, [r2, #112]	; 0x70
 80094c0:	4b5d      	ldr	r3, [pc, #372]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c4:	4a5c      	ldr	r2, [pc, #368]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094c6:	f043 0301 	orr.w	r3, r3, #1
 80094ca:	6713      	str	r3, [r2, #112]	; 0x70
 80094cc:	e00b      	b.n	80094e6 <HAL_RCC_OscConfig+0x32a>
 80094ce:	4b5a      	ldr	r3, [pc, #360]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d2:	4a59      	ldr	r2, [pc, #356]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	6713      	str	r3, [r2, #112]	; 0x70
 80094da:	4b57      	ldr	r3, [pc, #348]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	4a56      	ldr	r2, [pc, #344]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80094e0:	f023 0304 	bic.w	r3, r3, #4
 80094e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d015      	beq.n	800951a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ee:	f7fc fe9d 	bl	800622c <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094f4:	e00a      	b.n	800950c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094f6:	f7fc fe99 	bl	800622c <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	f241 3288 	movw	r2, #5000	; 0x1388
 8009504:	4293      	cmp	r3, r2
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e08e      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800950c:	4b4a      	ldr	r3, [pc, #296]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 800950e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0ee      	beq.n	80094f6 <HAL_RCC_OscConfig+0x33a>
 8009518:	e014      	b.n	8009544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800951a:	f7fc fe87 	bl	800622c <HAL_GetTick>
 800951e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009520:	e00a      	b.n	8009538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009522:	f7fc fe83 	bl	800622c <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	4293      	cmp	r3, r2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e078      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009538:	4b3f      	ldr	r3, [pc, #252]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 800953a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1ee      	bne.n	8009522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d105      	bne.n	8009556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800954a:	4b3b      	ldr	r3, [pc, #236]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	4a3a      	ldr	r2, [pc, #232]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 8009550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d064      	beq.n	8009628 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800955e:	4b36      	ldr	r3, [pc, #216]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 030c 	and.w	r3, r3, #12
 8009566:	2b08      	cmp	r3, #8
 8009568:	d05c      	beq.n	8009624 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d141      	bne.n	80095f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009572:	4b32      	ldr	r3, [pc, #200]	; (800963c <HAL_RCC_OscConfig+0x480>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009578:	f7fc fe58 	bl	800622c <HAL_GetTick>
 800957c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800957e:	e008      	b.n	8009592 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009580:	f7fc fe54 	bl	800622c <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b02      	cmp	r3, #2
 800958c:	d901      	bls.n	8009592 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e04b      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009592:	4b29      	ldr	r3, [pc, #164]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1f0      	bne.n	8009580 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69da      	ldr	r2, [r3, #28]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	019b      	lsls	r3, r3, #6
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	085b      	lsrs	r3, r3, #1
 80095b6:	3b01      	subs	r3, #1
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	061b      	lsls	r3, r3, #24
 80095c2:	491d      	ldr	r1, [pc, #116]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095c8:	4b1c      	ldr	r3, [pc, #112]	; (800963c <HAL_RCC_OscConfig+0x480>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095ce:	f7fc fe2d 	bl	800622c <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095d6:	f7fc fe29 	bl	800622c <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e020      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095e8:	4b13      	ldr	r3, [pc, #76]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f0      	beq.n	80095d6 <HAL_RCC_OscConfig+0x41a>
 80095f4:	e018      	b.n	8009628 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <HAL_RCC_OscConfig+0x480>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fc:	f7fc fe16 	bl	800622c <HAL_GetTick>
 8009600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009602:	e008      	b.n	8009616 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009604:	f7fc fe12 	bl	800622c <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d901      	bls.n	8009616 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e009      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009616:	4b08      	ldr	r3, [pc, #32]	; (8009638 <HAL_RCC_OscConfig+0x47c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f0      	bne.n	8009604 <HAL_RCC_OscConfig+0x448>
 8009622:	e001      	b.n	8009628 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40007000 	.word	0x40007000
 8009638:	40023800 	.word	0x40023800
 800963c:	42470060 	.word	0x42470060

08009640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0ca      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009654:	4b67      	ldr	r3, [pc, #412]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 030f 	and.w	r3, r3, #15
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d90c      	bls.n	800967c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009662:	4b64      	ldr	r3, [pc, #400]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800966a:	4b62      	ldr	r3, [pc, #392]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d001      	beq.n	800967c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0b6      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d020      	beq.n	80096ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009694:	4b58      	ldr	r3, [pc, #352]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4a57      	ldr	r2, [pc, #348]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 800969a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800969e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096ac:	4b52      	ldr	r3, [pc, #328]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	4a51      	ldr	r2, [pc, #324]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80096b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b8:	4b4f      	ldr	r3, [pc, #316]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	494c      	ldr	r1, [pc, #304]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d044      	beq.n	8009760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d107      	bne.n	80096ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096de:	4b46      	ldr	r3, [pc, #280]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d119      	bne.n	800971e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e07d      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d003      	beq.n	80096fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d107      	bne.n	800970e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096fe:	4b3e      	ldr	r3, [pc, #248]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e06d      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800970e:	4b3a      	ldr	r3, [pc, #232]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e065      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800971e:	4b36      	ldr	r3, [pc, #216]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f023 0203 	bic.w	r2, r3, #3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4933      	ldr	r1, [pc, #204]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 800972c:	4313      	orrs	r3, r2
 800972e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009730:	f7fc fd7c 	bl	800622c <HAL_GetTick>
 8009734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009736:	e00a      	b.n	800974e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009738:	f7fc fd78 	bl	800622c <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	f241 3288 	movw	r2, #5000	; 0x1388
 8009746:	4293      	cmp	r3, r2
 8009748:	d901      	bls.n	800974e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e04d      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 020c 	and.w	r2, r3, #12
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	429a      	cmp	r2, r3
 800975e:	d1eb      	bne.n	8009738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009760:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d20c      	bcs.n	8009788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976e:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009776:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <HAL_RCC_ClockConfig+0x1b4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d001      	beq.n	8009788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e030      	b.n	80097ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d008      	beq.n	80097a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009794:	4b18      	ldr	r3, [pc, #96]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4915      	ldr	r1, [pc, #84]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0308 	and.w	r3, r3, #8
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d009      	beq.n	80097c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097b2:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	490d      	ldr	r1, [pc, #52]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097c6:	f000 f81d 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 80097ca:	4601      	mov	r1, r0
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <HAL_RCC_ClockConfig+0x1b8>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	091b      	lsrs	r3, r3, #4
 80097d2:	f003 030f 	and.w	r3, r3, #15
 80097d6:	4a09      	ldr	r2, [pc, #36]	; (80097fc <HAL_RCC_ClockConfig+0x1bc>)
 80097d8:	5cd3      	ldrb	r3, [r2, r3]
 80097da:	fa21 f303 	lsr.w	r3, r1, r3
 80097de:	4a08      	ldr	r2, [pc, #32]	; (8009800 <HAL_RCC_ClockConfig+0x1c0>)
 80097e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80097e2:	2000      	movs	r0, #0
 80097e4:	f7fc fcde 	bl	80061a4 <HAL_InitTick>

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40023c00 	.word	0x40023c00
 80097f8:	40023800 	.word	0x40023800
 80097fc:	0801e354 	.word	0x0801e354
 8009800:	20000134 	.word	0x20000134

08009804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	607b      	str	r3, [r7, #4]
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]
 8009812:	2300      	movs	r3, #0
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800981a:	4b50      	ldr	r3, [pc, #320]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 030c 	and.w	r3, r3, #12
 8009822:	2b04      	cmp	r3, #4
 8009824:	d007      	beq.n	8009836 <HAL_RCC_GetSysClockFreq+0x32>
 8009826:	2b08      	cmp	r3, #8
 8009828:	d008      	beq.n	800983c <HAL_RCC_GetSysClockFreq+0x38>
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 808d 	bne.w	800994a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009830:	4b4b      	ldr	r3, [pc, #300]	; (8009960 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009832:	60bb      	str	r3, [r7, #8]
       break;
 8009834:	e08c      	b.n	8009950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009836:	4b4b      	ldr	r3, [pc, #300]	; (8009964 <HAL_RCC_GetSysClockFreq+0x160>)
 8009838:	60bb      	str	r3, [r7, #8]
      break;
 800983a:	e089      	b.n	8009950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800983c:	4b47      	ldr	r3, [pc, #284]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009846:	4b45      	ldr	r3, [pc, #276]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d023      	beq.n	800989a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009852:	4b42      	ldr	r3, [pc, #264]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	ea03 0501 	and.w	r5, r3, r1
 8009868:	ea04 0602 	and.w	r6, r4, r2
 800986c:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <HAL_RCC_GetSysClockFreq+0x160>)
 800986e:	fb02 f106 	mul.w	r1, r2, r6
 8009872:	2200      	movs	r2, #0
 8009874:	fb02 f205 	mul.w	r2, r2, r5
 8009878:	440a      	add	r2, r1
 800987a:	493a      	ldr	r1, [pc, #232]	; (8009964 <HAL_RCC_GetSysClockFreq+0x160>)
 800987c:	fba5 0101 	umull	r0, r1, r5, r1
 8009880:	1853      	adds	r3, r2, r1
 8009882:	4619      	mov	r1, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f04f 0400 	mov.w	r4, #0
 800988a:	461a      	mov	r2, r3
 800988c:	4623      	mov	r3, r4
 800988e:	f7f7 fa5b 	bl	8000d48 <__aeabi_uldivmod>
 8009892:	4603      	mov	r3, r0
 8009894:	460c      	mov	r4, r1
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	e049      	b.n	800992e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800989a:	4b30      	ldr	r3, [pc, #192]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	099b      	lsrs	r3, r3, #6
 80098a0:	f04f 0400 	mov.w	r4, #0
 80098a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80098a8:	f04f 0200 	mov.w	r2, #0
 80098ac:	ea03 0501 	and.w	r5, r3, r1
 80098b0:	ea04 0602 	and.w	r6, r4, r2
 80098b4:	4629      	mov	r1, r5
 80098b6:	4632      	mov	r2, r6
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	f04f 0400 	mov.w	r4, #0
 80098c0:	0154      	lsls	r4, r2, #5
 80098c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80098c6:	014b      	lsls	r3, r1, #5
 80098c8:	4619      	mov	r1, r3
 80098ca:	4622      	mov	r2, r4
 80098cc:	1b49      	subs	r1, r1, r5
 80098ce:	eb62 0206 	sbc.w	r2, r2, r6
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	f04f 0400 	mov.w	r4, #0
 80098da:	0194      	lsls	r4, r2, #6
 80098dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80098e0:	018b      	lsls	r3, r1, #6
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	eb64 0402 	sbc.w	r4, r4, r2
 80098e8:	f04f 0100 	mov.w	r1, #0
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	00e2      	lsls	r2, r4, #3
 80098f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098f6:	00d9      	lsls	r1, r3, #3
 80098f8:	460b      	mov	r3, r1
 80098fa:	4614      	mov	r4, r2
 80098fc:	195b      	adds	r3, r3, r5
 80098fe:	eb44 0406 	adc.w	r4, r4, r6
 8009902:	f04f 0100 	mov.w	r1, #0
 8009906:	f04f 0200 	mov.w	r2, #0
 800990a:	02a2      	lsls	r2, r4, #10
 800990c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009910:	0299      	lsls	r1, r3, #10
 8009912:	460b      	mov	r3, r1
 8009914:	4614      	mov	r4, r2
 8009916:	4618      	mov	r0, r3
 8009918:	4621      	mov	r1, r4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f04f 0400 	mov.w	r4, #0
 8009920:	461a      	mov	r2, r3
 8009922:	4623      	mov	r3, r4
 8009924:	f7f7 fa10 	bl	8000d48 <__aeabi_uldivmod>
 8009928:	4603      	mov	r3, r0
 800992a:	460c      	mov	r4, r1
 800992c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <HAL_RCC_GetSysClockFreq+0x158>)
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	3301      	adds	r3, #1
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	fbb2 f3f3 	udiv	r3, r2, r3
 8009946:	60bb      	str	r3, [r7, #8]
      break;
 8009948:	e002      	b.n	8009950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <HAL_RCC_GetSysClockFreq+0x15c>)
 800994c:	60bb      	str	r3, [r7, #8]
      break;
 800994e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009950:	68bb      	ldr	r3, [r7, #8]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995a:	bf00      	nop
 800995c:	40023800 	.word	0x40023800
 8009960:	00f42400 	.word	0x00f42400
 8009964:	00b71b00 	.word	0x00b71b00

08009968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800996c:	4b03      	ldr	r3, [pc, #12]	; (800997c <HAL_RCC_GetHCLKFreq+0x14>)
 800996e:	681b      	ldr	r3, [r3, #0]
}
 8009970:	4618      	mov	r0, r3
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	20000134 	.word	0x20000134

08009980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009984:	f7ff fff0 	bl	8009968 <HAL_RCC_GetHCLKFreq>
 8009988:	4601      	mov	r1, r0
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	0a9b      	lsrs	r3, r3, #10
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	4a03      	ldr	r2, [pc, #12]	; (80099a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009996:	5cd3      	ldrb	r3, [r2, r3]
 8009998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800999c:	4618      	mov	r0, r3
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	40023800 	.word	0x40023800
 80099a4:	0801e364 	.word	0x0801e364

080099a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80099ac:	f7ff ffdc 	bl	8009968 <HAL_RCC_GetHCLKFreq>
 80099b0:	4601      	mov	r1, r0
 80099b2:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	0b5b      	lsrs	r3, r3, #13
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	4a03      	ldr	r2, [pc, #12]	; (80099cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80099be:	5cd3      	ldrb	r3, [r2, r3]
 80099c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	40023800 	.word	0x40023800
 80099cc:	0801e364 	.word	0x0801e364

080099d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d105      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d035      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80099f8:	4b62      	ldr	r3, [pc, #392]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099fe:	f7fc fc15 	bl	800622c <HAL_GetTick>
 8009a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a04:	e008      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a06:	f7fc fc11 	bl	800622c <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d901      	bls.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e0b0      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a18:	4b5b      	ldr	r3, [pc, #364]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f0      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	019a      	lsls	r2, r3, #6
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	071b      	lsls	r3, r3, #28
 8009a30:	4955      	ldr	r1, [pc, #340]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a38:	4b52      	ldr	r3, [pc, #328]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a3e:	f7fc fbf5 	bl	800622c <HAL_GetTick>
 8009a42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a44:	e008      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a46:	f7fc fbf1 	bl	800622c <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d901      	bls.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e090      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a58:	4b4b      	ldr	r3, [pc, #300]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d0f0      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8083 	beq.w	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	4b44      	ldr	r3, [pc, #272]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	4a43      	ldr	r2, [pc, #268]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a80:	6413      	str	r3, [r2, #64]	; 0x40
 8009a82:	4b41      	ldr	r3, [pc, #260]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009a8e:	4b3f      	ldr	r3, [pc, #252]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a3e      	ldr	r2, [pc, #248]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a9a:	f7fc fbc7 	bl	800622c <HAL_GetTick>
 8009a9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009aa0:	e008      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009aa2:	f7fc fbc3 	bl	800622c <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e062      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009ab4:	4b35      	ldr	r3, [pc, #212]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0f0      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ac0:	4b31      	ldr	r3, [pc, #196]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d02f      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d028      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ade:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ae8:	4b29      	ldr	r3, [pc, #164]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009aee:	4b28      	ldr	r3, [pc, #160]	; (8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009af4:	4a24      	ldr	r2, [pc, #144]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d114      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009b06:	f7fc fb91 	bl	800622c <HAL_GetTick>
 8009b0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b0c:	e00a      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b0e:	f7fc fb8d 	bl	800622c <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e02a      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b24:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0ee      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3c:	d10d      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009b3e:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b52:	490d      	ldr	r1, [pc, #52]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	608b      	str	r3, [r1, #8]
 8009b58:	e005      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	4a0a      	ldr	r2, [pc, #40]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009b64:	6093      	str	r3, [r2, #8]
 8009b66:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b72:	4905      	ldr	r1, [pc, #20]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	42470068 	.word	0x42470068
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	40007000 	.word	0x40007000
 8009b90:	42470e40 	.word	0x42470e40

08009b94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e083      	b.n	8009cae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7f5b      	ldrb	r3, [r3, #29]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d105      	bne.n	8009bbc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f00c f9a0 	bl	8015efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	22ca      	movs	r2, #202	; 0xca
 8009bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2253      	movs	r2, #83	; 0x53
 8009bd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f944 	bl	8009e60 <RTC_EnterInitMode>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	22ff      	movs	r2, #255	; 0xff
 8009be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2204      	movs	r2, #4
 8009bea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e05e      	b.n	8009cae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6899      	ldr	r1, [r3, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	68d2      	ldr	r2, [r2, #12]
 8009c2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6919      	ldr	r1, [r3, #16]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	041a      	lsls	r2, r3, #16
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10e      	bne.n	8009c7c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f8d6 	bl	8009e10 <HAL_RTC_WaitForSynchro>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d008      	beq.n	8009c7c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e018      	b.n	8009cae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c8a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699a      	ldr	r2, [r3, #24]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	22ff      	movs	r2, #255	; 0xff
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009cac:	2300      	movs	r3, #0
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b086      	sub	sp, #24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ce8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009cec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	0a1b      	lsrs	r3, r3, #8
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d11a      	bne.n	8009d68 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f8be 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f8b5 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	461a      	mov	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	789b      	ldrb	r3, [r3, #2]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f8ac 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009d90:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	0c1b      	lsrs	r3, r3, #16
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	0b5b      	lsrs	r3, r3, #13
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d11a      	bne.n	8009e06 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	78db      	ldrb	r3, [r3, #3]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f86f 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 f866 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009dec:	4603      	mov	r3, r0
 8009dee:	461a      	mov	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	789b      	ldrb	r3, [r3, #2]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 f85d 	bl	8009eb8 <RTC_Bcd2ToByte>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	461a      	mov	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e2c:	f7fc f9fe 	bl	800622c <HAL_GetTick>
 8009e30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e32:	e009      	b.n	8009e48 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e34:	f7fc f9fa 	bl	800622c <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e42:	d901      	bls.n	8009e48 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e007      	b.n	8009e58 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0ee      	beq.n	8009e34 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d119      	bne.n	8009eae <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e84:	f7fc f9d2 	bl	800622c <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009e8a:	e009      	b.n	8009ea0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e8c:	f7fc f9ce 	bl	800622c <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e9a:	d901      	bls.n	8009ea0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e007      	b.n	8009eb0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0ee      	beq.n	8009e8c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	091b      	lsrs	r3, r3, #4
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	f003 030f 	and.w	r3, r3, #15
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	4413      	add	r3, r2
 8009ee6:	b2db      	uxtb	r3, r3
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e01d      	b.n	8009f42 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d105      	bne.n	8009f1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f00c f805 	bl	8015f28 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2203      	movs	r2, #3
 8009f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f810 	bl	8009f4c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	b08e      	sub	sp, #56	; 0x38
 8009f50:	af04      	add	r7, sp, #16
 8009f52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009f6c:	2376      	movs	r3, #118	; 0x76
 8009f6e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681d      	ldr	r5, [r3, #0]
 8009f74:	466c      	mov	r4, sp
 8009f76:	f107 0318 	add.w	r3, r7, #24
 8009f7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f82:	f107 030c 	add.w	r3, r7, #12
 8009f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f003 fa53 	bl	800d434 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8009f8e:	4b1c      	ldr	r3, [pc, #112]	; (800a000 <HAL_SD_InitCard+0xb4>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f003 fa94 	bl	800d4c6 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009f9e:	4b18      	ldr	r3, [pc, #96]	; (800a000 <HAL_SD_InitCard+0xb4>)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8009fa4:	2002      	movs	r0, #2
 8009fa6:	f7fc f94d 	bl	8006244 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fffe 	bl	800afac <SD_PowerON>
 8009fb0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00b      	beq.n	8009fd0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e013      	b.n	8009ff8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 ff22 	bl	800ae1a <SD_InitCard>
 8009fd6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e000      	b.n	8009ff8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3728      	adds	r7, #40	; 0x28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bdb0      	pop	{r4, r5, r7, pc}
 800a000:	422580a0 	.word	0x422580a0

0800a004 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08c      	sub	sp, #48	; 0x30
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a012:	2300      	movs	r3, #0
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d107      	bne.n	800a02c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0ad      	b.n	800a188 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b01      	cmp	r3, #1
 800a036:	f040 80a6 	bne.w	800a186 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	441a      	add	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d907      	bls.n	800a05e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a052:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e094      	b.n	800a188 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2203      	movs	r2, #3
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	4a42      	ldr	r2, [pc, #264]	; (800a190 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a088:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08e:	4a41      	ldr	r2, [pc, #260]	; (800a194 <HAL_SD_ReadBlocks_DMA+0x190>)
 800a090:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3380      	adds	r3, #128	; 0x80
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	025b      	lsls	r3, r3, #9
 800a0ac:	089b      	lsrs	r3, r3, #2
 800a0ae:	f7fc faab 	bl	8006608 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a0b2:	4b39      	ldr	r3, [pc, #228]	; (800a198 <HAL_SD_ReadBlocks_DMA+0x194>)
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d002      	beq.n	800a0c6 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	025b      	lsls	r3, r3, #9
 800a0c4:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ca:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	025b      	lsls	r3, r3, #9
 800a0d0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0d2:	2390      	movs	r3, #144	; 0x90
 800a0d4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f107 0214 	add.w	r2, r7, #20
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f003 fa52 	bl	800d596 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f003 fa77 	bl	800d5ee <SDMMC_CmdBlockLength>
 800a100:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d010      	beq.n	800a12a <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	431a      	orrs	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e02e      	b.n	800a188 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d90a      	bls.n	800a146 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2282      	movs	r2, #130	; 0x82
 800a134:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f003 fa9e 	bl	800d67e <SDMMC_CmdReadMultiBlock>
 800a142:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a144:	e009      	b.n	800a15a <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2281      	movs	r2, #129	; 0x81
 800a14a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	4618      	mov	r0, r3
 800a154:	f003 fa6f 	bl	800d636 <SDMMC_CmdReadSingleBlock>
 800a158:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d010      	beq.n	800a182 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a168:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	431a      	orrs	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e002      	b.n	800a188 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	e000      	b.n	800a188 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a186:	2302      	movs	r3, #2
  }
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3730      	adds	r7, #48	; 0x30
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	0800ac2b 	.word	0x0800ac2b
 800a194:	0800ac99 	.word	0x0800ac99
 800a198:	4225858c 	.word	0x4225858c

0800a19c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08c      	sub	sp, #48	; 0x30
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d107      	bne.n	800a1c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e0ad      	b.n	800a320 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	f040 80a6 	bne.w	800a31e <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d907      	bls.n	800a1f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e094      	b.n	800a320 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a214:	f043 0302 	orr.w	r3, r3, #2
 800a218:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	4a42      	ldr	r2, [pc, #264]	; (800a328 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a220:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	4a41      	ldr	r2, [pc, #260]	; (800a32c <HAL_SD_WriteBlocks_DMA+0x190>)
 800a228:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	2200      	movs	r2, #0
 800a230:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a236:	2b01      	cmp	r3, #1
 800a238:	d002      	beq.n	800a240 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	025b      	lsls	r3, r3, #9
 800a23e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a248:	4618      	mov	r0, r3
 800a24a:	f003 f9d0 	bl	800d5ee <SDMMC_CmdBlockLength>
 800a24e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d010      	beq.n	800a278 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	431a      	orrs	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e053      	b.n	800a320 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d90a      	bls.n	800a294 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	22a0      	movs	r2, #160	; 0xa0
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f003 fa3f 	bl	800d70e <SDMMC_CmdWriteMultiBlock>
 800a290:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a292:	e009      	b.n	800a2a8 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2290      	movs	r2, #144	; 0x90
 800a298:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f003 fa10 	bl	800d6c6 <SDMMC_CmdWriteSingleBlock>
 800a2a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d010      	beq.n	800a2d0 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e027      	b.n	800a320 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a2d0:	4b17      	ldr	r3, [pc, #92]	; (800a330 <HAL_SD_WriteBlocks_DMA+0x194>)
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3380      	adds	r3, #128	; 0x80
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	025b      	lsls	r3, r3, #9
 800a2e8:	089b      	lsrs	r3, r3, #2
 800a2ea:	f7fc f98d 	bl	8006608 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	025b      	lsls	r3, r3, #9
 800a2f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2fa:	2390      	movs	r3, #144	; 0x90
 800a2fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a2fe:	2300      	movs	r3, #0
 800a300:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a302:	2300      	movs	r3, #0
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a306:	2301      	movs	r3, #1
 800a308:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f107 0214 	add.w	r2, r7, #20
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f003 f93e 	bl	800d596 <SDIO_ConfigData>
    
    return HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e000      	b.n	800a320 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a31e:	2302      	movs	r3, #2
  }
}
 800a320:	4618      	mov	r0, r3
 800a322:	3730      	adds	r7, #48	; 0x30
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	0800ac01 	.word	0x0800ac01
 800a32c:	0800ac99 	.word	0x0800ac99
 800a330:	4225858c 	.word	0x4225858c

0800a334 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 808d 	beq.w	800a46a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a368:	f023 0302 	bic.w	r3, r3, #2
 800a36c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d03a      	beq.n	800a3f0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d105      	bne.n	800a392 <HAL_SD_IRQHandler+0x5e>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d011      	beq.n	800a3b6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f003 f9de 	bl	800d758 <SDMMC_CmdStopTransfer>
 800a39c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d008      	beq.n	800a3b6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f925 	bl	800a600 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <HAL_SD_IRQHandler+0xac>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f008 ffe1 	bl	80133a8 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800a3e6:	e103      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f008 ffd3 	bl	8013394 <HAL_SD_TxCpltCallback>
}
 800a3ee:	e0ff      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80f9 	beq.w	800a5f0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d011      	beq.n	800a42e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f003 f9a2 	bl	800d758 <SDMMC_CmdStopTransfer>
 800a414:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d008      	beq.n	800a42e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f8e9 	bl	800a600 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	f040 80da 	bne.w	800a5f0 <HAL_SD_IRQHandler+0x2bc>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 80d3 	bne.w	800a5f0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 0208 	bic.w	r2, r2, #8
 800a458:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f008 ff96 	bl	8013394 <HAL_SD_TxCpltCallback>
}
 800a468:	e0c2      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 ffef 	bl	800b466 <SD_Write_IT>
}
 800a488:	e0b2      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d008      	beq.n	800a4aa <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 ffb7 	bl	800b416 <SD_Read_IT>
}
 800a4a8:	e0a2      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b0:	f240 233a 	movw	r3, #570	; 0x23a
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 809a 	beq.w	800a5f0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	f043 0202 	orr.w	r2, r3, #2
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	f043 0208 	orr.w	r2, r3, #8
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a502:	f043 0220 	orr.w	r2, r3, #32
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	f043 0210 	orr.w	r2, r3, #16
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	f043 0208 	orr.w	r2, r3, #8
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a546:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6812      	ldr	r2, [r2, #0]
 800a552:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a556:	f023 0302 	bic.w	r3, r3, #2
 800a55a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b00      	cmp	r3, #0
 800a566:	d036      	beq.n	800a5d6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d011      	beq.n	800a594 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	4a20      	ldr	r2, [pc, #128]	; (800a5f8 <HAL_SD_IRQHandler+0x2c4>)
 800a576:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fc f8a3 	bl	80066c8 <HAL_DMA_Abort_IT>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d033      	beq.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fbc8 	bl	800ad22 <SD_DMATxAbort>
}
 800a592:	e02d      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d011      	beq.n	800a5c0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a0:	4a16      	ldr	r2, [pc, #88]	; (800a5fc <HAL_SD_IRQHandler+0x2c8>)
 800a5a2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fc f88d 	bl	80066c8 <HAL_DMA_Abort_IT>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01d      	beq.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fbf0 	bl	800ad9e <SD_DMARxAbort>
}
 800a5be:	e017      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f008 fed6 	bl	8013380 <HAL_SD_AbortCallback>
}
 800a5d4:	e00c      	b.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d006      	beq.n	800a5f0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f808 	bl	800a600 <HAL_SD_ErrorCallback>
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	0800ad23 	.word	0x0800ad23
 800a5fc:	0800ad9f 	.word	0x0800ad9f

0800a600 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a626:	0e1b      	lsrs	r3, r3, #24
 800a628:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	099b      	lsrs	r3, r3, #6
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 0303 	and.w	r3, r3, #3
 800a634:	b2da      	uxtb	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	089b      	lsrs	r3, r3, #2
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 030f 	and.w	r3, r3, #15
 800a644:	b2da      	uxtb	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	b2da      	uxtb	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65c:	0c1b      	lsrs	r3, r3, #16
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66e:	0a1b      	lsrs	r3, r3, #8
 800a670:	b2db      	uxtb	r3, r3
 800a672:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a680:	b2db      	uxtb	r3, r3
 800a682:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	b2da      	uxtb	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a690:	0e1b      	lsrs	r3, r3, #24
 800a692:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	b29b      	uxth	r3, r3
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6a4:	0c1b      	lsrs	r3, r3, #16
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	88db      	ldrh	r3, [r3, #6]
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	091b      	lsrs	r3, r3, #4
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	f003 030f 	and.w	r3, r3, #15
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d6:	0a1b      	lsrs	r3, r3, #8
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	09db      	lsrs	r3, r3, #7
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	099b      	lsrs	r3, r3, #6
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	b2da      	uxtb	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	091b      	lsrs	r3, r3, #4
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	b2da      	uxtb	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 8087 	bne.w	800a83a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	029b      	lsls	r3, r3, #10
 800a730:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	431a      	orrs	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	0e1b      	lsrs	r3, r3, #24
 800a754:	b2db      	uxtb	r3, r3
 800a756:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	099b      	lsrs	r3, r3, #6
 800a760:	f003 0303 	and.w	r3, r3, #3
 800a764:	431a      	orrs	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	08db      	lsrs	r3, r3, #3
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78c:	0c1b      	lsrs	r3, r3, #16
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	095b      	lsrs	r3, r3, #5
 800a796:	b2db      	uxtb	r3, r3
 800a798:	f003 0307 	and.w	r3, r3, #7
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	089b      	lsrs	r3, r3, #2
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	f003 0307 	and.w	r3, r3, #7
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	f003 0306 	and.w	r3, r3, #6
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7c8:	0a1b      	lsrs	r3, r3, #8
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	7e1b      	ldrb	r3, [r3, #24]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	09db      	lsrs	r3, r3, #7
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	7e1b      	ldrb	r3, [r3, #24]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a804:	fb02 f203 	mul.w	r2, r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	7a1b      	ldrb	r3, [r3, #8]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	2301      	movs	r3, #1
 800a816:	fa03 f202 	lsl.w	r2, r3, r2
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a826:	0a52      	lsrs	r2, r2, #9
 800a828:	fb02 f203 	mul.w	r2, r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a836:	661a      	str	r2, [r3, #96]	; 0x60
 800a838:	e04d      	b.n	800a8d6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d138      	bne.n	800a8b4 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a846:	b2db      	uxtb	r3, r3
 800a848:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	041b      	lsls	r3, r3, #16
 800a84e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85a:	0e1b      	lsrs	r3, r3, #24
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	431a      	orrs	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	b2db      	uxtb	r3, r3
 800a876:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	431a      	orrs	r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a888:	0a1b      	lsrs	r3, r3, #8
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	3301      	adds	r3, #1
 800a894:	029a      	lsls	r2, r3, #10
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	655a      	str	r2, [r3, #84]	; 0x54
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a8:	659a      	str	r2, [r3, #88]	; 0x58
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	661a      	str	r2, [r3, #96]	; 0x60
 800a8b2:	e010      	b.n	800a8d6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a8bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e0c1      	b.n	800aa5a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	099b      	lsrs	r3, r3, #6
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	7e9b      	ldrb	r3, [r3, #26]
 800a904:	b2da      	uxtb	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	09db      	lsrs	r3, r3, #7
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	4313      	orrs	r3, r2
 800a914:	b2da      	uxtb	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92c:	0e1b      	lsrs	r3, r3, #24
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	09db      	lsrs	r3, r3, #7
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	089b      	lsrs	r3, r3, #2
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0307 	and.w	r3, r3, #7
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 030c 	and.w	r3, r3, #12
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a978:	0c1b      	lsrs	r3, r3, #16
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	7fdb      	ldrb	r3, [r3, #31]
 800a982:	b2da      	uxtb	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	099b      	lsrs	r3, r3, #6
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f003 0303 	and.w	r3, r3, #3
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	4313      	orrs	r3, r2
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c6:	0a1b      	lsrs	r3, r3, #8
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	09db      	lsrs	r3, r3, #7
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	099b      	lsrs	r3, r3, #6
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	089b      	lsrs	r3, r3, #2
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aabe:	b5b0      	push	{r4, r5, r7, lr}
 800aac0:	b08e      	sub	sp, #56	; 0x38
 800aac2:	af04      	add	r7, sp, #16
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2203      	movs	r2, #3
 800aad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d02e      	beq.n	800ab3a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae2:	d106      	bne.n	800aaf2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	639a      	str	r2, [r3, #56]	; 0x38
 800aaf0:	e029      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf8:	d10a      	bne.n	800ab10 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb28 	bl	800b150 <SD_WideBus_Enable>
 800ab00:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
 800ab0e:	e01a      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fb67 	bl	800b1ea <SD_WideBus_Disable>
 800ab1c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
 800ab2a:	e00c      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
 800ab38:	e005      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e024      	b.n	800abae <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681d      	ldr	r5, [r3, #0]
 800ab8a:	466c      	mov	r4, sp
 800ab8c:	f107 0318 	add.w	r3, r7, #24
 800ab90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab98:	f107 030c 	add.w	r3, r7, #12
 800ab9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f002 fc48 	bl	800d434 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3728      	adds	r7, #40	; 0x28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bdb0      	pop	{r4, r5, r7, pc}

0800abb6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800abbe:	2304      	movs	r3, #4
 800abc0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800abca:	f107 030c 	add.w	r3, r7, #12
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa93 	bl	800b0fc <SD_SendStatus>
 800abd6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d005      	beq.n	800abea <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	431a      	orrs	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	0a5b      	lsrs	r3, r3, #9
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0c:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ac1e:	bf00      	nop
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac40:	2b82      	cmp	r3, #130	; 0x82
 800ac42:	d111      	bne.n	800ac68 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f002 fd85 	bl	800d758 <SDMMC_CmdStopTransfer>
 800ac4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d008      	beq.n	800ac68 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff fccc 	bl	800a600 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0208 	bic.w	r2, r2, #8
 800ac76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ac80:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f008 fb8c 	bl	80133a8 <HAL_SD_RxCpltCallback>
#endif
}
 800ac90:	bf00      	nop
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acac:	2b01      	cmp	r3, #1
 800acae:	d004      	beq.n	800acba <SD_DMAError+0x22>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d12c      	bne.n	800ad14 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff ff68 	bl	800abb6 <HAL_SD_GetCardState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	2b06      	cmp	r3, #6
 800acee:	d002      	beq.n	800acf6 <SD_DMAError+0x5e>
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d10a      	bne.n	800ad0c <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f002 fd2c 	bl	800d758 <SDMMC_CmdStopTransfer>
 800ad00:	4602      	mov	r2, r0
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	431a      	orrs	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7ff fc73 	bl	800a600 <HAL_SD_ErrorCallback>
#endif
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d127      	bne.n	800ad96 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff ff35 	bl	800abb6 <HAL_SD_GetCardState>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	2b06      	cmp	r3, #6
 800ad62:	d002      	beq.n	800ad6a <SD_DMATxAbort+0x48>
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d115      	bne.n	800ad96 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fcf2 	bl	800d758 <SDMMC_CmdStopTransfer>
 800ad74:	4602      	mov	r2, r0
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f008 faf9 	bl	8013380 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ad8e:	e002      	b.n	800ad96 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff fc35 	bl	800a600 <HAL_SD_ErrorCallback>
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adaa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d127      	bne.n	800ae12 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fef7 	bl	800abb6 <HAL_SD_GetCardState>
 800adc8:	4603      	mov	r3, r0
 800adca:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b06      	cmp	r3, #6
 800adde:	d002      	beq.n	800ade6 <SD_DMARxAbort+0x48>
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	d115      	bne.n	800ae12 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f002 fcb4 	bl	800d758 <SDMMC_CmdStopTransfer>
 800adf0:	4602      	mov	r2, r0
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf6:	431a      	orrs	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f008 fabb 	bl	8013380 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ae0a:	e002      	b.n	800ae12 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff fbf7 	bl	800a600 <HAL_SD_ErrorCallback>
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae1a:	b5b0      	push	{r4, r5, r7, lr}
 800ae1c:	b094      	sub	sp, #80	; 0x50
 800ae1e:	af04      	add	r7, sp, #16
 800ae20:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800ae26:	2301      	movs	r3, #1
 800ae28:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 fb57 	bl	800d4e2 <SDIO_GetPowerState>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d102      	bne.n	800ae40 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ae3e:	e0b1      	b.n	800afa4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d02f      	beq.n	800aea8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 fd9d 	bl	800d98c <SDMMC_CmdSendCID>
 800ae52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <SD_InitCard+0x44>
    {
      return errorstate;
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	e0a2      	b.n	800afa4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2100      	movs	r1, #0
 800ae64:	4618      	mov	r0, r3
 800ae66:	f002 fb81 	bl	800d56c <SDIO_GetResponse>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2104      	movs	r1, #4
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 fb78 	bl	800d56c <SDIO_GetResponse>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2108      	movs	r1, #8
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f002 fb6f 	bl	800d56c <SDIO_GetResponse>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	210c      	movs	r1, #12
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f002 fb66 	bl	800d56c <SDIO_GetResponse>
 800aea0:	4602      	mov	r2, r0
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d00d      	beq.n	800aecc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f107 020e 	add.w	r2, r7, #14
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f002 fda7 	bl	800da0e <SDMMC_CmdSetRelAdd>
 800aec0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <SD_InitCard+0xb2>
    {
      return errorstate;
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	e06b      	b.n	800afa4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d036      	beq.n	800af42 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aed4:	89fb      	ldrh	r3, [r7, #14]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee4:	041b      	lsls	r3, r3, #16
 800aee6:	4619      	mov	r1, r3
 800aee8:	4610      	mov	r0, r2
 800aeea:	f002 fd6f 	bl	800d9cc <SDMMC_CmdSendCSD>
 800aeee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <SD_InitCard+0xe0>
    {
      return errorstate;
 800aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef8:	e054      	b.n	800afa4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f002 fb33 	bl	800d56c <SDIO_GetResponse>
 800af06:	4602      	mov	r2, r0
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2104      	movs	r1, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f002 fb2a 	bl	800d56c <SDIO_GetResponse>
 800af18:	4602      	mov	r2, r0
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2108      	movs	r1, #8
 800af24:	4618      	mov	r0, r3
 800af26:	f002 fb21 	bl	800d56c <SDIO_GetResponse>
 800af2a:	4602      	mov	r2, r0
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	210c      	movs	r1, #12
 800af36:	4618      	mov	r0, r3
 800af38:	f002 fb18 	bl	800d56c <SDIO_GetResponse>
 800af3c:	4602      	mov	r2, r0
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2104      	movs	r1, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 fb0f 	bl	800d56c <SDIO_GetResponse>
 800af4e:	4603      	mov	r3, r0
 800af50:	0d1a      	lsrs	r2, r3, #20
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800af56:	f107 0310 	add.w	r3, r7, #16
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff fb59 	bl	800a614 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6819      	ldr	r1, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6a:	041b      	lsls	r3, r3, #16
 800af6c:	f04f 0400 	mov.w	r4, #0
 800af70:	461a      	mov	r2, r3
 800af72:	4623      	mov	r3, r4
 800af74:	4608      	mov	r0, r1
 800af76:	f002 fc13 	bl	800d7a0 <SDMMC_CmdSelDesel>
 800af7a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800af7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <SD_InitCard+0x16c>
  {
    return errorstate;
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	e00e      	b.n	800afa4 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681d      	ldr	r5, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	466c      	mov	r4, sp
 800af8e:	f103 0210 	add.w	r2, r3, #16
 800af92:	ca07      	ldmia	r2, {r0, r1, r2}
 800af94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af98:	3304      	adds	r3, #4
 800af9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af9c:	4628      	mov	r0, r5
 800af9e:	f002 fa49 	bl	800d434 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3740      	adds	r7, #64	; 0x40
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bdb0      	pop	{r4, r5, r7, pc}

0800afac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f002 fc0e 	bl	800d7ea <SDMMC_CmdGoIdleState>
 800afce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <SD_PowerON+0x2e>
  {
    return errorstate;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	e08c      	b.n	800b0f4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4618      	mov	r0, r3
 800afe0:	f002 fc23 	bl	800d82a <SDMMC_CmdOperCond>
 800afe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d03d      	beq.n	800b068 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800aff2:	e032      	b.n	800b05a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	60ba      	str	r2, [r7, #8]
 800affa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800affe:	4293      	cmp	r3, r2
 800b000:	d102      	bne.n	800b008 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b006:	e075      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f002 fc2c 	bl	800d86c <SDMMC_CmdAppCommand>
 800b014:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b01c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b020:	e068      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 fc43 	bl	800d8b4 <SDMMC_CmdAppOperCommand>
 800b02e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b036:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b03a:	e05b      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2100      	movs	r1, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f002 fa92 	bl	800d56c <SDIO_GetResponse>
 800b048:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	0fdb      	lsrs	r3, r3, #31
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d101      	bne.n	800b056 <SD_PowerON+0xaa>
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <SD_PowerON+0xac>
 800b056:	2300      	movs	r3, #0
 800b058:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0c9      	beq.n	800aff4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	645a      	str	r2, [r3, #68]	; 0x44
 800b066:	e044      	b.n	800b0f2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b06e:	e031      	b.n	800b0d4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	60ba      	str	r2, [r7, #8]
 800b076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d102      	bne.n	800b084 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b07e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b082:	e037      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fbee 	bl	800d86c <SDMMC_CmdAppCommand>
 800b090:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <SD_PowerON+0xf0>
      {
        return errorstate;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	e02b      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f002 fc05 	bl	800d8b4 <SDMMC_CmdAppOperCommand>
 800b0aa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <SD_PowerON+0x10a>
      {
        return errorstate;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	e01e      	b.n	800b0f4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 fa55 	bl	800d56c <SDIO_GetResponse>
 800b0c2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	0fdb      	lsrs	r3, r3, #31
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d101      	bne.n	800b0d0 <SD_PowerON+0x124>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e000      	b.n	800b0d2 <SD_PowerON+0x126>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ca      	beq.n	800b070 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b0ea:	e002      	b.n	800b0f2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b114:	e018      	b.n	800b148 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11e:	041b      	lsls	r3, r3, #16
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f002 fc96 	bl	800da54 <SDMMC_CmdSendStatus>
 800b128:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <SD_SendStatus+0x38>
  {
    return errorstate;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	e009      	b.n	800b148 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 fa16 	bl	800d56c <SDIO_GetResponse>
 800b140:	4602      	mov	r2, r0
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	2300      	movs	r3, #0
 800b15e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f002 f9fe 	bl	800d56c <SDIO_GetResponse>
 800b170:	4603      	mov	r3, r0
 800b172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b17a:	d102      	bne.n	800b182 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b17c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b180:	e02f      	b.n	800b1e2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b182:	f107 030c 	add.w	r3, r7, #12
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f87b 	bl	800b284 <SD_FindSCR>
 800b18e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	e023      	b.n	800b1e2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01c      	beq.n	800b1de <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f002 fb5b 	bl	800d86c <SDMMC_CmdAppCommand>
 800b1b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	e00f      	b.n	800b1e2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 fb98 	bl	800d8fe <SDMMC_CmdBusWidth>
 800b1ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	e003      	b.n	800b1e2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e001      	b.n	800b1e2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2100      	movs	r1, #0
 800b204:	4618      	mov	r0, r3
 800b206:	f002 f9b1 	bl	800d56c <SDIO_GetResponse>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b214:	d102      	bne.n	800b21c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b21a:	e02f      	b.n	800b27c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f82e 	bl	800b284 <SD_FindSCR>
 800b228:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	e023      	b.n	800b27c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01c      	beq.n	800b278 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	4619      	mov	r1, r3
 800b24a:	4610      	mov	r0, r2
 800b24c:	f002 fb0e 	bl	800d86c <SDMMC_CmdAppCommand>
 800b250:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	e00f      	b.n	800b27c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fb4b 	bl	800d8fe <SDMMC_CmdBusWidth>
 800b268:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	e003      	b.n	800b27c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b274:	2300      	movs	r3, #0
 800b276:	e001      	b.n	800b27c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b278:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b08f      	sub	sp, #60	; 0x3c
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b28e:	2300      	movs	r3, #0
 800b290:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b292:	f7fa ffcb 	bl	800622c <HAL_GetTick>
 800b296:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2108      	movs	r1, #8
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 f99f 	bl	800d5ee <SDMMC_CmdBlockLength>
 800b2b0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <SD_FindSCR+0x38>
  {
    return errorstate;
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	e0a8      	b.n	800b40e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c4:	041b      	lsls	r3, r3, #16
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	f002 facf 	bl	800d86c <SDMMC_CmdAppCommand>
 800b2ce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <SD_FindSCR+0x56>
  {
    return errorstate;
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	e099      	b.n	800b40e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295
 800b2de:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800b2e0:	2308      	movs	r3, #8
 800b2e2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b2e4:	2330      	movs	r3, #48	; 0x30
 800b2e6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f107 0214 	add.w	r2, r7, #20
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 f949 	bl	800d596 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fb1c 	bl	800d946 <SDMMC_CmdSendSCR>
 800b30e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	2b00      	cmp	r3, #0
 800b314:	d022      	beq.n	800b35c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	e079      	b.n	800b40e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6819      	ldr	r1, [r3, #0]
 800b32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	f107 020c 	add.w	r2, r7, #12
 800b334:	18d4      	adds	r4, r2, r3
 800b336:	4608      	mov	r0, r1
 800b338:	f002 f8a7 	bl	800d48a <SDIO_ReadFIFO>
 800b33c:	4603      	mov	r3, r0
 800b33e:	6023      	str	r3, [r4, #0]
      index++;
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	3301      	adds	r3, #1
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b346:	f7fa ff71 	bl	800622c <HAL_GetTick>
 800b34a:	4602      	mov	r2, r0
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b354:	d102      	bne.n	800b35c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b356:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b35a:	e058      	b.n	800b40e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b362:	f240 432a 	movw	r3, #1066	; 0x42a
 800b366:	4013      	ands	r3, r2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0d6      	beq.n	800b31a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	f003 0308 	and.w	r3, r3, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d005      	beq.n	800b386 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2208      	movs	r2, #8
 800b380:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b382:	2308      	movs	r3, #8
 800b384:	e043      	b.n	800b40e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38c:	f003 0302 	and.w	r3, r3, #2
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2202      	movs	r2, #2
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b39c:	2302      	movs	r3, #2
 800b39e:	e036      	b.n	800b40e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b3b6:	2320      	movs	r3, #32
 800b3b8:	e029      	b.n	800b40e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	061a      	lsls	r2, r3, #24
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3d0:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	0a1b      	lsrs	r3, r3, #8
 800b3d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b3da:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b3e6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b3e8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	061a      	lsls	r2, r3, #24
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3f6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b400:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	0e1b      	lsrs	r3, r3, #24
 800b406:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	373c      	adds	r7, #60	; 0x3c
 800b412:	46bd      	mov	sp, r7
 800b414:	bd90      	pop	{r4, r7, pc}

0800b416 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b416:	b590      	push	{r4, r7, lr}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b426:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	e00d      	b.n	800b44a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6819      	ldr	r1, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	18d4      	adds	r4, r2, r3
 800b43a:	4608      	mov	r0, r1
 800b43c:	f002 f825 	bl	800d48a <SDIO_ReadFIFO>
 800b440:	4603      	mov	r3, r0
 800b442:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b07      	cmp	r3, #7
 800b44e:	d9ee      	bls.n	800b42e <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b454:	f103 0220 	add.w	r2, r3, #32
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	bd90      	pop	{r4, r7, pc}

0800b466 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	e00b      	b.n	800b496 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	4413      	add	r3, r2
 800b48a:	4619      	mov	r1, r3
 800b48c:	f002 f80a 	bl	800d4a4 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b07      	cmp	r3, #7
 800b49a:	d9f0      	bls.n	800b47e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	f103 0220 	add.w	r2, r3, #32
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e056      	b.n	800b572 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f00a fe22 	bl	8016128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	431a      	orrs	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	431a      	orrs	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	ea42 0103 	orr.w	r1, r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	430a      	orrs	r2, r1
 800b53a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	0c1b      	lsrs	r3, r3, #16
 800b542:	f003 0104 	and.w	r1, r3, #4
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69da      	ldr	r2, [r3, #28]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b088      	sub	sp, #32
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	603b      	str	r3, [r7, #0]
 800b586:	4613      	mov	r3, r2
 800b588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_SPI_Transmit+0x22>
 800b598:	2302      	movs	r3, #2
 800b59a:	e11e      	b.n	800b7da <HAL_SPI_Transmit+0x260>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5a4:	f7fa fe42 	bl	800622c <HAL_GetTick>
 800b5a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
 800b5ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d002      	beq.n	800b5c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5be:	e103      	b.n	800b7c8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <HAL_SPI_Transmit+0x52>
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5d0:	e0fa      	b.n	800b7c8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	88fa      	ldrh	r2, [r7, #6]
 800b5ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88fa      	ldrh	r2, [r7, #6]
 800b5f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b618:	d107      	bne.n	800b62a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d007      	beq.n	800b648 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b650:	d14b      	bne.n	800b6ea <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <HAL_SPI_Transmit+0xe6>
 800b65a:	8afb      	ldrh	r3, [r7, #22]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d13e      	bne.n	800b6de <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b670:	1c9a      	adds	r2, r3, #2
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3b01      	subs	r3, #1
 800b67e:	b29a      	uxth	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b684:	e02b      	b.n	800b6de <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b02      	cmp	r3, #2
 800b692:	d112      	bne.n	800b6ba <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b698:	881a      	ldrh	r2, [r3, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a4:	1c9a      	adds	r2, r3, #2
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6b8:	e011      	b.n	800b6de <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ba:	f7fa fdb7 	bl	800622c <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d803      	bhi.n	800b6d2 <HAL_SPI_Transmit+0x158>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d0:	d102      	bne.n	800b6d8 <HAL_SPI_Transmit+0x15e>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b6dc:	e074      	b.n	800b7c8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1ce      	bne.n	800b686 <HAL_SPI_Transmit+0x10c>
 800b6e8:	e04c      	b.n	800b784 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d002      	beq.n	800b6f8 <HAL_SPI_Transmit+0x17e>
 800b6f2:	8afb      	ldrh	r3, [r7, #22]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d140      	bne.n	800b77a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	7812      	ldrb	r2, [r2, #0]
 800b704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b714:	b29b      	uxth	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b71e:	e02c      	b.n	800b77a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d113      	bne.n	800b756 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	86da      	strh	r2, [r3, #54]	; 0x36
 800b754:	e011      	b.n	800b77a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b756:	f7fa fd69 	bl	800622c <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d803      	bhi.n	800b76e <HAL_SPI_Transmit+0x1f4>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76c:	d102      	bne.n	800b774 <HAL_SPI_Transmit+0x1fa>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b778:	e026      	b.n	800b7c8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b77e:	b29b      	uxth	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1cd      	bne.n	800b720 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b784:	69ba      	ldr	r2, [r7, #24]
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fa45 	bl	800bc18 <SPI_EndRxTxTransaction>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2220      	movs	r2, #32
 800b798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	613b      	str	r3, [r7, #16]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	613b      	str	r3, [r7, #16]
 800b7b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	77fb      	strb	r3, [r7, #31]
 800b7c4:	e000      	b.n	800b7c8 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b7c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b08c      	sub	sp, #48	; 0x30
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_SPI_TransmitReceive+0x26>
 800b804:	2302      	movs	r3, #2
 800b806:	e18a      	b.n	800bb1e <HAL_SPI_TransmitReceive+0x33c>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b810:	f7fa fd0c 	bl	800622c <HAL_GetTick>
 800b814:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b826:	887b      	ldrh	r3, [r7, #2]
 800b828:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b82a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d00f      	beq.n	800b852 <HAL_SPI_TransmitReceive+0x70>
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b838:	d107      	bne.n	800b84a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d103      	bne.n	800b84a <HAL_SPI_TransmitReceive+0x68>
 800b842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b846:	2b04      	cmp	r3, #4
 800b848:	d003      	beq.n	800b852 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b84a:	2302      	movs	r3, #2
 800b84c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b850:	e15b      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d005      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x82>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x82>
 800b85e:	887b      	ldrh	r3, [r7, #2]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d103      	bne.n	800b86c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b86a:	e14e      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b04      	cmp	r3, #4
 800b876:	d003      	beq.n	800b880 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2205      	movs	r2, #5
 800b87c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	887a      	ldrh	r2, [r7, #2]
 800b890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	887a      	ldrh	r2, [r7, #2]
 800b896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	887a      	ldrh	r2, [r7, #2]
 800b8a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	887a      	ldrh	r2, [r7, #2]
 800b8a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c0:	2b40      	cmp	r3, #64	; 0x40
 800b8c2:	d007      	beq.n	800b8d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8dc:	d178      	bne.n	800b9d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <HAL_SPI_TransmitReceive+0x10a>
 800b8e6:	8b7b      	ldrh	r3, [r7, #26]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d166      	bne.n	800b9ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f0:	881a      	ldrh	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fc:	1c9a      	adds	r2, r3, #2
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b906:	b29b      	uxth	r3, r3
 800b908:	3b01      	subs	r3, #1
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b910:	e053      	b.n	800b9ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d11b      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x176>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d016      	beq.n	800b958 <HAL_SPI_TransmitReceive+0x176>
 800b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d113      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b934:	881a      	ldrh	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b940:	1c9a      	adds	r2, r3, #2
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	b29a      	uxth	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b01      	cmp	r3, #1
 800b964:	d119      	bne.n	800b99a <HAL_SPI_TransmitReceive+0x1b8>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d014      	beq.n	800b99a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	b292      	uxth	r2, r2
 800b97c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b982:	1c9a      	adds	r2, r3, #2
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b996:	2301      	movs	r3, #1
 800b998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b99a:	f7fa fc47 	bl	800622c <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d807      	bhi.n	800b9ba <HAL_SPI_TransmitReceive+0x1d8>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b0:	d003      	beq.n	800b9ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9b8:	e0a7      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1a6      	bne.n	800b912 <HAL_SPI_TransmitReceive+0x130>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1a1      	bne.n	800b912 <HAL_SPI_TransmitReceive+0x130>
 800b9ce:	e07c      	b.n	800baca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <HAL_SPI_TransmitReceive+0x1fc>
 800b9d8:	8b7b      	ldrh	r3, [r7, #26]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d16b      	bne.n	800bab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	330c      	adds	r3, #12
 800b9e8:	7812      	ldrb	r2, [r2, #0]
 800b9ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba04:	e057      	b.n	800bab6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f003 0302 	and.w	r3, r3, #2
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d11c      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x26c>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d017      	beq.n	800ba4e <HAL_SPI_TransmitReceive+0x26c>
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d114      	bne.n	800ba4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	330c      	adds	r3, #12
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d119      	bne.n	800ba90 <HAL_SPI_TransmitReceive+0x2ae>
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d014      	beq.n	800ba90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	3b01      	subs	r3, #1
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba90:	f7fa fbcc 	bl	800622c <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d803      	bhi.n	800baa8 <HAL_SPI_TransmitReceive+0x2c6>
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa6:	d102      	bne.n	800baae <HAL_SPI_TransmitReceive+0x2cc>
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bab4:	e029      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1a2      	bne.n	800ba06 <HAL_SPI_TransmitReceive+0x224>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d19d      	bne.n	800ba06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800baca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bacc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f000 f8a2 	bl	800bc18 <SPI_EndRxTxTransaction>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d006      	beq.n	800bae8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2220      	movs	r2, #32
 800bae4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bae6:	e010      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10b      	bne.n	800bb08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	617b      	str	r3, [r7, #20]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	e000      	b.n	800bb0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3730      	adds	r7, #48	; 0x30
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb34:	b2db      	uxtb	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	603b      	str	r3, [r7, #0]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb52:	e04c      	b.n	800bbee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d048      	beq.n	800bbee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bb5c:	f7fa fb66 	bl	800622c <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d902      	bls.n	800bb72 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d13d      	bne.n	800bbee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	685a      	ldr	r2, [r3, #4]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb8a:	d111      	bne.n	800bbb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb94:	d004      	beq.n	800bba0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb9e:	d107      	bne.n	800bbb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbb8:	d10f      	bne.n	800bbda <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e00f      	b.n	800bc0e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	bf0c      	ite	eq
 800bbfe:	2301      	moveq	r3, #1
 800bc00:	2300      	movne	r3, #0
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	461a      	mov	r2, r3
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d1a3      	bne.n	800bb54 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bc24:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <SPI_EndRxTxTransaction+0x7c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a1b      	ldr	r2, [pc, #108]	; (800bc98 <SPI_EndRxTxTransaction+0x80>)
 800bc2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2e:	0d5b      	lsrs	r3, r3, #21
 800bc30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc34:	fb02 f303 	mul.w	r3, r2, r3
 800bc38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc42:	d112      	bne.n	800bc6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2180      	movs	r1, #128	; 0x80
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff ff77 	bl	800bb42 <SPI_WaitFlagStateUntilTimeout>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d016      	beq.n	800bc88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5e:	f043 0220 	orr.w	r2, r3, #32
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e00f      	b.n	800bc8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc80:	2b80      	cmp	r3, #128	; 0x80
 800bc82:	d0f2      	beq.n	800bc6a <SPI_EndRxTxTransaction+0x52>
 800bc84:	e000      	b.n	800bc88 <SPI_EndRxTxTransaction+0x70>
        break;
 800bc86:	bf00      	nop
  }

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000134 	.word	0x20000134
 800bc98:	165e9f81 	.word	0x165e9f81

0800bc9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e01d      	b.n	800bcea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d106      	bne.n	800bcc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f00a fa78 	bl	80161b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	4619      	mov	r1, r3
 800bcda:	4610      	mov	r0, r2
 800bcdc:	f000 fa76 	bl	800c1cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b085      	sub	sp, #20
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b06      	cmp	r3, #6
 800bd12:	d007      	beq.n	800bd24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e01d      	b.n	800bd88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d106      	bne.n	800bd66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f815 	bl	800bd90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2202      	movs	r2, #2
 800bd6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3304      	adds	r3, #4
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f000 fa27 	bl	800c1cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 fcf2 	bl	800c7a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a15      	ldr	r2, [pc, #84]	; (800be18 <HAL_TIM_PWM_Start+0x74>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d004      	beq.n	800bdd0 <HAL_TIM_PWM_Start+0x2c>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a14      	ldr	r2, [pc, #80]	; (800be1c <HAL_TIM_PWM_Start+0x78>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d101      	bne.n	800bdd4 <HAL_TIM_PWM_Start+0x30>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e000      	b.n	800bdd6 <HAL_TIM_PWM_Start+0x32>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bde8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f003 0307 	and.w	r3, r3, #7
 800bdf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b06      	cmp	r3, #6
 800bdfa:	d007      	beq.n	800be0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f042 0201 	orr.w	r2, r2, #1
 800be0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	40010000 	.word	0x40010000
 800be1c:	40010400 	.word	0x40010400

0800be20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2200      	movs	r2, #0
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fcb4 	bl	800c7a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a22      	ldr	r2, [pc, #136]	; (800bec8 <HAL_TIM_PWM_Stop+0xa8>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <HAL_TIM_PWM_Stop+0x2c>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a21      	ldr	r2, [pc, #132]	; (800becc <HAL_TIM_PWM_Stop+0xac>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d101      	bne.n	800be50 <HAL_TIM_PWM_Stop+0x30>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <HAL_TIM_PWM_Stop+0x32>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d017      	beq.n	800be86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a1a      	ldr	r2, [r3, #32]
 800be5c:	f241 1311 	movw	r3, #4369	; 0x1111
 800be60:	4013      	ands	r3, r2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10f      	bne.n	800be86 <HAL_TIM_PWM_Stop+0x66>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	f240 4344 	movw	r3, #1092	; 0x444
 800be70:	4013      	ands	r3, r2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d107      	bne.n	800be86 <HAL_TIM_PWM_Stop+0x66>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6a1a      	ldr	r2, [r3, #32]
 800be8c:	f241 1311 	movw	r3, #4369	; 0x1111
 800be90:	4013      	ands	r3, r2
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10f      	bne.n	800beb6 <HAL_TIM_PWM_Stop+0x96>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6a1a      	ldr	r2, [r3, #32]
 800be9c:	f240 4344 	movw	r3, #1092	; 0x444
 800bea0:	4013      	ands	r3, r2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d107      	bne.n	800beb6 <HAL_TIM_PWM_Stop+0x96>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f022 0201 	bic.w	r2, r2, #1
 800beb4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	40010000 	.word	0x40010000
 800becc:	40010400 	.word	0x40010400

0800bed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d101      	bne.n	800beea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bee6:	2302      	movs	r3, #2
 800bee8:	e0b4      	b.n	800c054 <HAL_TIM_PWM_ConfigChannel+0x184>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2202      	movs	r2, #2
 800bef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b0c      	cmp	r3, #12
 800befe:	f200 809f 	bhi.w	800c040 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf3d 	.word	0x0800bf3d
 800bf0c:	0800c041 	.word	0x0800c041
 800bf10:	0800c041 	.word	0x0800c041
 800bf14:	0800c041 	.word	0x0800c041
 800bf18:	0800bf7d 	.word	0x0800bf7d
 800bf1c:	0800c041 	.word	0x0800c041
 800bf20:	0800c041 	.word	0x0800c041
 800bf24:	0800c041 	.word	0x0800c041
 800bf28:	0800bfbf 	.word	0x0800bfbf
 800bf2c:	0800c041 	.word	0x0800c041
 800bf30:	0800c041 	.word	0x0800c041
 800bf34:	0800c041 	.word	0x0800c041
 800bf38:	0800bfff 	.word	0x0800bfff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f9e2 	bl	800c30c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f042 0208 	orr.w	r2, r2, #8
 800bf56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	699a      	ldr	r2, [r3, #24]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 0204 	bic.w	r2, r2, #4
 800bf66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6999      	ldr	r1, [r3, #24]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	691a      	ldr	r2, [r3, #16]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	619a      	str	r2, [r3, #24]
      break;
 800bf7a:	e062      	b.n	800c042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fa32 	bl	800c3ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	699a      	ldr	r2, [r3, #24]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	699a      	ldr	r2, [r3, #24]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6999      	ldr	r1, [r3, #24]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	021a      	lsls	r2, r3, #8
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	619a      	str	r2, [r3, #24]
      break;
 800bfbc:	e041      	b.n	800c042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 fa87 	bl	800c4d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	69da      	ldr	r2, [r3, #28]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f042 0208 	orr.w	r2, r2, #8
 800bfd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69da      	ldr	r2, [r3, #28]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 0204 	bic.w	r2, r2, #4
 800bfe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69d9      	ldr	r1, [r3, #28]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	691a      	ldr	r2, [r3, #16]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	61da      	str	r2, [r3, #28]
      break;
 800bffc:	e021      	b.n	800c042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68b9      	ldr	r1, [r7, #8]
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fadb 	bl	800c5c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	69da      	ldr	r2, [r3, #28]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	69da      	ldr	r2, [r3, #28]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	69d9      	ldr	r1, [r3, #28]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	021a      	lsls	r2, r3, #8
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	430a      	orrs	r2, r1
 800c03c:	61da      	str	r2, [r3, #28]
      break;
 800c03e:	e000      	b.n	800c042 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c040:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d101      	bne.n	800c074 <HAL_TIM_ConfigClockSource+0x18>
 800c070:	2302      	movs	r3, #2
 800c072:	e0a6      	b.n	800c1c2 <HAL_TIM_ConfigClockSource+0x166>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c09a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d067      	beq.n	800c17c <HAL_TIM_ConfigClockSource+0x120>
 800c0ac:	2b40      	cmp	r3, #64	; 0x40
 800c0ae:	d80b      	bhi.n	800c0c8 <HAL_TIM_ConfigClockSource+0x6c>
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d073      	beq.n	800c19c <HAL_TIM_ConfigClockSource+0x140>
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d802      	bhi.n	800c0be <HAL_TIM_ConfigClockSource+0x62>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d06f      	beq.n	800c19c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c0bc:	e078      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d06c      	beq.n	800c19c <HAL_TIM_ConfigClockSource+0x140>
 800c0c2:	2b30      	cmp	r3, #48	; 0x30
 800c0c4:	d06a      	beq.n	800c19c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c0c6:	e073      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0c8:	2b70      	cmp	r3, #112	; 0x70
 800c0ca:	d00d      	beq.n	800c0e8 <HAL_TIM_ConfigClockSource+0x8c>
 800c0cc:	2b70      	cmp	r3, #112	; 0x70
 800c0ce:	d804      	bhi.n	800c0da <HAL_TIM_ConfigClockSource+0x7e>
 800c0d0:	2b50      	cmp	r3, #80	; 0x50
 800c0d2:	d033      	beq.n	800c13c <HAL_TIM_ConfigClockSource+0xe0>
 800c0d4:	2b60      	cmp	r3, #96	; 0x60
 800c0d6:	d041      	beq.n	800c15c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c0d8:	e06a      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0de:	d066      	beq.n	800c1ae <HAL_TIM_ConfigClockSource+0x152>
 800c0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e4:	d017      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c0e6:	e063      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	6899      	ldr	r1, [r3, #8]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f000 fb32 	bl	800c760 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c10a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	609a      	str	r2, [r3, #8]
      break;
 800c114:	e04c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	6899      	ldr	r1, [r3, #8]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	f000 fb1b 	bl	800c760 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689a      	ldr	r2, [r3, #8]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c138:	609a      	str	r2, [r3, #8]
      break;
 800c13a:	e039      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6818      	ldr	r0, [r3, #0]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	6859      	ldr	r1, [r3, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	461a      	mov	r2, r3
 800c14a:	f000 fa8f 	bl	800c66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2150      	movs	r1, #80	; 0x50
 800c154:	4618      	mov	r0, r3
 800c156:	f000 fae8 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800c15a:	e029      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	6859      	ldr	r1, [r3, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	461a      	mov	r2, r3
 800c16a:	f000 faae 	bl	800c6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2160      	movs	r1, #96	; 0x60
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fad8 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800c17a:	e019      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	6859      	ldr	r1, [r3, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	461a      	mov	r2, r3
 800c18a:	f000 fa6f 	bl	800c66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2140      	movs	r1, #64	; 0x40
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fac8 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800c19a:	e009      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	f000 fabf 	bl	800c72a <TIM_ITRx_SetConfig>
      break;
 800c1ac:	e000      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c1ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a40      	ldr	r2, [pc, #256]	; (800c2e0 <TIM_Base_SetConfig+0x114>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d013      	beq.n	800c20c <TIM_Base_SetConfig+0x40>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ea:	d00f      	beq.n	800c20c <TIM_Base_SetConfig+0x40>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a3d      	ldr	r2, [pc, #244]	; (800c2e4 <TIM_Base_SetConfig+0x118>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d00b      	beq.n	800c20c <TIM_Base_SetConfig+0x40>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a3c      	ldr	r2, [pc, #240]	; (800c2e8 <TIM_Base_SetConfig+0x11c>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d007      	beq.n	800c20c <TIM_Base_SetConfig+0x40>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a3b      	ldr	r2, [pc, #236]	; (800c2ec <TIM_Base_SetConfig+0x120>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d003      	beq.n	800c20c <TIM_Base_SetConfig+0x40>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a3a      	ldr	r2, [pc, #232]	; (800c2f0 <TIM_Base_SetConfig+0x124>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d108      	bne.n	800c21e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a2f      	ldr	r2, [pc, #188]	; (800c2e0 <TIM_Base_SetConfig+0x114>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d02b      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c22c:	d027      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a2c      	ldr	r2, [pc, #176]	; (800c2e4 <TIM_Base_SetConfig+0x118>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d023      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a2b      	ldr	r2, [pc, #172]	; (800c2e8 <TIM_Base_SetConfig+0x11c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d01f      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a2a      	ldr	r2, [pc, #168]	; (800c2ec <TIM_Base_SetConfig+0x120>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d01b      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a29      	ldr	r2, [pc, #164]	; (800c2f0 <TIM_Base_SetConfig+0x124>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d017      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a28      	ldr	r2, [pc, #160]	; (800c2f4 <TIM_Base_SetConfig+0x128>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d013      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a27      	ldr	r2, [pc, #156]	; (800c2f8 <TIM_Base_SetConfig+0x12c>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d00f      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a26      	ldr	r2, [pc, #152]	; (800c2fc <TIM_Base_SetConfig+0x130>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d00b      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a25      	ldr	r2, [pc, #148]	; (800c300 <TIM_Base_SetConfig+0x134>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d007      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a24      	ldr	r2, [pc, #144]	; (800c304 <TIM_Base_SetConfig+0x138>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d003      	beq.n	800c27e <TIM_Base_SetConfig+0xb2>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a23      	ldr	r2, [pc, #140]	; (800c308 <TIM_Base_SetConfig+0x13c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d108      	bne.n	800c290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	689a      	ldr	r2, [r3, #8]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a0a      	ldr	r2, [pc, #40]	; (800c2e0 <TIM_Base_SetConfig+0x114>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d003      	beq.n	800c2c4 <TIM_Base_SetConfig+0xf8>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a0c      	ldr	r2, [pc, #48]	; (800c2f0 <TIM_Base_SetConfig+0x124>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d103      	bne.n	800c2cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	691a      	ldr	r2, [r3, #16]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	615a      	str	r2, [r3, #20]
}
 800c2d2:	bf00      	nop
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	40010000 	.word	0x40010000
 800c2e4:	40000400 	.word	0x40000400
 800c2e8:	40000800 	.word	0x40000800
 800c2ec:	40000c00 	.word	0x40000c00
 800c2f0:	40010400 	.word	0x40010400
 800c2f4:	40014000 	.word	0x40014000
 800c2f8:	40014400 	.word	0x40014400
 800c2fc:	40014800 	.word	0x40014800
 800c300:	40001800 	.word	0x40001800
 800c304:	40001c00 	.word	0x40001c00
 800c308:	40002000 	.word	0x40002000

0800c30c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	f023 0201 	bic.w	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a1b      	ldr	r3, [r3, #32]
 800c326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f023 0302 	bic.w	r3, r3, #2
 800c354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a20      	ldr	r2, [pc, #128]	; (800c3e4 <TIM_OC1_SetConfig+0xd8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d003      	beq.n	800c370 <TIM_OC1_SetConfig+0x64>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a1f      	ldr	r2, [pc, #124]	; (800c3e8 <TIM_OC1_SetConfig+0xdc>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d10c      	bne.n	800c38a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f023 0308 	bic.w	r3, r3, #8
 800c376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	4313      	orrs	r3, r2
 800c380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f023 0304 	bic.w	r3, r3, #4
 800c388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a15      	ldr	r2, [pc, #84]	; (800c3e4 <TIM_OC1_SetConfig+0xd8>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d003      	beq.n	800c39a <TIM_OC1_SetConfig+0x8e>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a14      	ldr	r2, [pc, #80]	; (800c3e8 <TIM_OC1_SetConfig+0xdc>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d111      	bne.n	800c3be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	621a      	str	r2, [r3, #32]
}
 800c3d8:	bf00      	nop
 800c3da:	371c      	adds	r7, #28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	40010400 	.word	0x40010400

0800c3ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	f023 0210 	bic.w	r2, r3, #16
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	021b      	lsls	r3, r3, #8
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f023 0320 	bic.w	r3, r3, #32
 800c436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <TIM_OC2_SetConfig+0xe4>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_OC2_SetConfig+0x68>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a21      	ldr	r2, [pc, #132]	; (800c4d4 <TIM_OC2_SetConfig+0xe8>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d10d      	bne.n	800c470 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	4313      	orrs	r3, r2
 800c466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c46e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <TIM_OC2_SetConfig+0xe4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d003      	beq.n	800c480 <TIM_OC2_SetConfig+0x94>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a16      	ldr	r2, [pc, #88]	; (800c4d4 <TIM_OC2_SetConfig+0xe8>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d113      	bne.n	800c4a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c48e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	4313      	orrs	r3, r2
 800c49a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	621a      	str	r2, [r3, #32]
}
 800c4c2:	bf00      	nop
 800c4c4:	371c      	adds	r7, #28
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	40010000 	.word	0x40010000
 800c4d4:	40010400 	.word	0x40010400

0800c4d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f023 0303 	bic.w	r3, r3, #3
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	021b      	lsls	r3, r3, #8
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a21      	ldr	r2, [pc, #132]	; (800c5b8 <TIM_OC3_SetConfig+0xe0>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d003      	beq.n	800c53e <TIM_OC3_SetConfig+0x66>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a20      	ldr	r2, [pc, #128]	; (800c5bc <TIM_OC3_SetConfig+0xe4>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d10d      	bne.n	800c55a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	021b      	lsls	r3, r3, #8
 800c54c:	697a      	ldr	r2, [r7, #20]
 800c54e:	4313      	orrs	r3, r2
 800c550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a16      	ldr	r2, [pc, #88]	; (800c5b8 <TIM_OC3_SetConfig+0xe0>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d003      	beq.n	800c56a <TIM_OC3_SetConfig+0x92>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a15      	ldr	r2, [pc, #84]	; (800c5bc <TIM_OC3_SetConfig+0xe4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d113      	bne.n	800c592 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	011b      	lsls	r3, r3, #4
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	4313      	orrs	r3, r2
 800c584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	011b      	lsls	r3, r3, #4
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	4313      	orrs	r3, r2
 800c590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	621a      	str	r2, [r3, #32]
}
 800c5ac:	bf00      	nop
 800c5ae:	371c      	adds	r7, #28
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	40010000 	.word	0x40010000
 800c5bc:	40010400 	.word	0x40010400

0800c5c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	69db      	ldr	r3, [r3, #28]
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	021b      	lsls	r3, r3, #8
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	4313      	orrs	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	031b      	lsls	r3, r3, #12
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	4313      	orrs	r3, r2
 800c616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a12      	ldr	r2, [pc, #72]	; (800c664 <TIM_OC4_SetConfig+0xa4>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d003      	beq.n	800c628 <TIM_OC4_SetConfig+0x68>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a11      	ldr	r2, [pc, #68]	; (800c668 <TIM_OC4_SetConfig+0xa8>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d109      	bne.n	800c63c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c62e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	019b      	lsls	r3, r3, #6
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	621a      	str	r2, [r3, #32]
}
 800c656:	bf00      	nop
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	40010000 	.word	0x40010000
 800c668:	40010400 	.word	0x40010400

0800c66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	f023 0201 	bic.w	r2, r3, #1
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	011b      	lsls	r3, r3, #4
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f023 030a 	bic.w	r3, r3, #10
 800c6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	621a      	str	r2, [r3, #32]
}
 800c6be:	bf00      	nop
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b087      	sub	sp, #28
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	60f8      	str	r0, [r7, #12]
 800c6d2:	60b9      	str	r1, [r7, #8]
 800c6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	f023 0210 	bic.w	r2, r3, #16
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	031b      	lsls	r3, r3, #12
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	011b      	lsls	r3, r3, #4
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	4313      	orrs	r3, r2
 800c710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	621a      	str	r2, [r3, #32]
}
 800c71e:	bf00      	nop
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4313      	orrs	r3, r2
 800c748:	f043 0307 	orr.w	r3, r3, #7
 800c74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	609a      	str	r2, [r3, #8]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	021a      	lsls	r2, r3, #8
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	431a      	orrs	r2, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	4313      	orrs	r3, r2
 800c788:	697a      	ldr	r2, [r7, #20]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	609a      	str	r2, [r3, #8]
}
 800c794:	bf00      	nop
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f003 031f 	and.w	r3, r3, #31
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a1a      	ldr	r2, [r3, #32]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	401a      	ands	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a1a      	ldr	r2, [r3, #32]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	f003 031f 	and.w	r3, r3, #31
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	621a      	str	r2, [r3, #32]
}
 800c7de:	bf00      	nop
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d101      	bne.n	800c802 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7fe:	2302      	movs	r3, #2
 800c800:	e032      	b.n	800c868 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2202      	movs	r2, #2
 800c80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c828:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4313      	orrs	r3, r2
 800c832:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4313      	orrs	r3, r2
 800c844:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e03f      	b.n	800c906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f009 fd3a 	bl	8016314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2224      	movs	r2, #36	; 0x24
 800c8a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fbb1 	bl	800d020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	695a      	ldr	r2, [r3, #20]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b088      	sub	sp, #32
 800c912:	af02      	add	r7, sp, #8
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	603b      	str	r3, [r7, #0]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b20      	cmp	r3, #32
 800c92c:	f040 8083 	bne.w	800ca36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <HAL_UART_Transmit+0x2e>
 800c936:	88fb      	ldrh	r3, [r7, #6]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d101      	bne.n	800c940 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e07b      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c946:	2b01      	cmp	r3, #1
 800c948:	d101      	bne.n	800c94e <HAL_UART_Transmit+0x40>
 800c94a:	2302      	movs	r3, #2
 800c94c:	e074      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2201      	movs	r2, #1
 800c952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2221      	movs	r2, #33	; 0x21
 800c960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c964:	f7f9 fc62 	bl	800622c <HAL_GetTick>
 800c968:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	88fa      	ldrh	r2, [r7, #6]
 800c96e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	88fa      	ldrh	r2, [r7, #6]
 800c974:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c976:	e042      	b.n	800c9fe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	3b01      	subs	r3, #1
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c98e:	d122      	bne.n	800c9d6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2200      	movs	r2, #0
 800c998:	2180      	movs	r1, #128	; 0x80
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 f9d4 	bl	800cd48 <UART_WaitOnFlagUntilTimeout>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e046      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d103      	bne.n	800c9ce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	3302      	adds	r3, #2
 800c9ca:	60bb      	str	r3, [r7, #8]
 800c9cc:	e017      	b.n	800c9fe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	60bb      	str	r3, [r7, #8]
 800c9d4:	e013      	b.n	800c9fe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	2180      	movs	r1, #128	; 0x80
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f9b1 	bl	800cd48 <UART_WaitOnFlagUntilTimeout>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e023      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	1c5a      	adds	r2, r3, #1
 800c9f4:	60ba      	str	r2, [r7, #8]
 800c9f6:	781a      	ldrb	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1b7      	bne.n	800c978 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2140      	movs	r1, #64	; 0x40
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 f998 	bl	800cd48 <UART_WaitOnFlagUntilTimeout>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e00a      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2220      	movs	r2, #32
 800ca26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e000      	b.n	800ca38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ca36:	2302      	movs	r3, #2
  }
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d140      	bne.n	800cadc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <HAL_UART_Receive_IT+0x26>
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e039      	b.n	800cade <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d101      	bne.n	800ca78 <HAL_UART_Receive_IT+0x38>
 800ca74:	2302      	movs	r3, #2
 800ca76:	e032      	b.n	800cade <HAL_UART_Receive_IT+0x9e>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	88fa      	ldrh	r2, [r7, #6]
 800ca8a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2222      	movs	r2, #34	; 0x22
 800ca9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cab6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	695a      	ldr	r2, [r3, #20]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f042 0201 	orr.w	r2, r2, #1
 800cac6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f042 0220 	orr.w	r2, r2, #32
 800cad6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e000      	b.n	800cade <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cadc:	2302      	movs	r3, #2
  }
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
	...

0800caec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	f003 030f 	and.w	r3, r3, #15
 800cb1a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10d      	bne.n	800cb3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f003 0320 	and.w	r3, r3, #32
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d008      	beq.n	800cb3e <HAL_UART_IRQHandler+0x52>
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	f003 0320 	and.w	r3, r3, #32
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f9f0 	bl	800cf1c <UART_Receive_IT>
      return;
 800cb3c:	e0cc      	b.n	800ccd8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 80ab 	beq.w	800cc9c <HAL_UART_IRQHandler+0x1b0>
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d105      	bne.n	800cb5c <HAL_UART_IRQHandler+0x70>
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 80a0 	beq.w	800cc9c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00a      	beq.n	800cb7c <HAL_UART_IRQHandler+0x90>
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb74:	f043 0201 	orr.w	r2, r3, #1
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f003 0304 	and.w	r3, r3, #4
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <HAL_UART_IRQHandler+0xb0>
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d005      	beq.n	800cb9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb94:	f043 0202 	orr.w	r2, r3, #2
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00a      	beq.n	800cbbc <HAL_UART_IRQHandler+0xd0>
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f003 0301 	and.w	r3, r3, #1
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb4:	f043 0204 	orr.w	r2, r3, #4
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f003 0308 	and.w	r3, r3, #8
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <HAL_UART_IRQHandler+0xf0>
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	f003 0301 	and.w	r3, r3, #1
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d005      	beq.n	800cbdc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd4:	f043 0208 	orr.w	r2, r3, #8
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d078      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	f003 0320 	and.w	r3, r3, #32
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <HAL_UART_IRQHandler+0x112>
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	f003 0320 	and.w	r3, r3, #32
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f98f 	bl	800cf1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc08:	2b40      	cmp	r3, #64	; 0x40
 800cc0a:	bf0c      	ite	eq
 800cc0c:	2301      	moveq	r3, #1
 800cc0e:	2300      	movne	r3, #0
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	f003 0308 	and.w	r3, r3, #8
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <HAL_UART_IRQHandler+0x13a>
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d031      	beq.n	800cc8a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f8d8 	bl	800cddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc36:	2b40      	cmp	r3, #64	; 0x40
 800cc38:	d123      	bne.n	800cc82 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	695a      	ldr	r2, [r3, #20]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d013      	beq.n	800cc7a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc56:	4a22      	ldr	r2, [pc, #136]	; (800cce0 <HAL_UART_IRQHandler+0x1f4>)
 800cc58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f9 fd32 	bl	80066c8 <HAL_DMA_Abort_IT>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d016      	beq.n	800cc98 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc74:	4610      	mov	r0, r2
 800cc76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc78:	e00e      	b.n	800cc98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f83c 	bl	800ccf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc80:	e00a      	b.n	800cc98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f838 	bl	800ccf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc88:	e006      	b.n	800cc98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f834 	bl	800ccf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800cc96:	e01e      	b.n	800ccd6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc98:	bf00      	nop
    return;
 800cc9a:	e01c      	b.n	800ccd6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d008      	beq.n	800ccb8 <HAL_UART_IRQHandler+0x1cc>
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f8c5 	bl	800ce40 <UART_Transmit_IT>
    return;
 800ccb6:	e00f      	b.n	800ccd8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00a      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x1ec>
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f90d 	bl	800ceec <UART_EndTransmit_IT>
    return;
 800ccd2:	bf00      	nop
 800ccd4:	e000      	b.n	800ccd8 <HAL_UART_IRQHandler+0x1ec>
    return;
 800ccd6:	bf00      	nop
  }
}
 800ccd8:	3720      	adds	r7, #32
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	0800ce19 	.word	0x0800ce19

0800cce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	b2db      	uxtb	r3, r3
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	4613      	mov	r3, r2
 800cd56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd58:	e02c      	b.n	800cdb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d028      	beq.n	800cdb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd68:	f7f9 fa60 	bl	800622c <HAL_GetTick>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	69ba      	ldr	r2, [r7, #24]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d21d      	bcs.n	800cdb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68da      	ldr	r2, [r3, #12]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	695a      	ldr	r2, [r3, #20]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 0201 	bic.w	r2, r2, #1
 800cd96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2220      	movs	r2, #32
 800cd9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2220      	movs	r2, #32
 800cda4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e00f      	b.n	800cdd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	bf0c      	ite	eq
 800cdc4:	2301      	moveq	r3, #1
 800cdc6:	2300      	movne	r3, #0
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	461a      	mov	r2, r3
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d0c3      	beq.n	800cd5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cdf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	695a      	ldr	r2, [r3, #20]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 0201 	bic.w	r2, r2, #1
 800ce02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2220      	movs	r2, #32
 800ce08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f7ff ff60 	bl	800ccf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce38:	bf00      	nop
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b21      	cmp	r3, #33	; 0x21
 800ce52:	d144      	bne.n	800cede <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5c:	d11a      	bne.n	800ce94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d105      	bne.n	800ce88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	1c9a      	adds	r2, r3, #2
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	621a      	str	r2, [r3, #32]
 800ce86:	e00e      	b.n	800cea6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	621a      	str	r2, [r3, #32]
 800ce92:	e008      	b.n	800cea6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a1b      	ldr	r3, [r3, #32]
 800ce98:	1c59      	adds	r1, r3, #1
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	6211      	str	r1, [r2, #32]
 800ce9e:	781a      	ldrb	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	3b01      	subs	r3, #1
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10f      	bne.n	800ceda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68da      	ldr	r2, [r3, #12]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68da      	ldr	r2, [r3, #12]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ced8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	e000      	b.n	800cee0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cede:	2302      	movs	r3, #2
  }
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68da      	ldr	r2, [r3, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2220      	movs	r2, #32
 800cf08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff fee9 	bl	800cce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b22      	cmp	r3, #34	; 0x22
 800cf2e:	d171      	bne.n	800d014 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf38:	d123      	bne.n	800cf82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10e      	bne.n	800cf66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	1c9a      	adds	r2, r3, #2
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	629a      	str	r2, [r3, #40]	; 0x28
 800cf64:	e029      	b.n	800cfba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	629a      	str	r2, [r3, #40]	; 0x28
 800cf80:	e01b      	b.n	800cfba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6858      	ldr	r0, [r3, #4]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf94:	1c59      	adds	r1, r3, #1
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	6291      	str	r1, [r2, #40]	; 0x28
 800cf9a:	b2c2      	uxtb	r2, r0
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	e00c      	b.n	800cfba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfac:	1c58      	adds	r0, r3, #1
 800cfae:	6879      	ldr	r1, [r7, #4]
 800cfb0:	6288      	str	r0, [r1, #40]	; 0x28
 800cfb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cfb6:	b2d2      	uxtb	r2, r2
 800cfb8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d120      	bne.n	800d010 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 0220 	bic.w	r2, r2, #32
 800cfdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68da      	ldr	r2, [r3, #12]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cfec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	695a      	ldr	r2, [r3, #20]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f022 0201 	bic.w	r2, r2, #1
 800cffc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2220      	movs	r2, #32
 800d002:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f008 f876 	bl	80150f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e002      	b.n	800d016 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	e000      	b.n	800d016 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d014:	2302      	movs	r3, #2
  }
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d020:	b5b0      	push	{r4, r5, r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68da      	ldr	r2, [r3, #12]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	430a      	orrs	r2, r1
 800d03c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d060:	f023 030c 	bic.w	r3, r3, #12
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	6812      	ldr	r2, [r2, #0]
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	430b      	orrs	r3, r1
 800d06c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	695b      	ldr	r3, [r3, #20]
 800d074:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699a      	ldr	r2, [r3, #24]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	69db      	ldr	r3, [r3, #28]
 800d088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d08c:	f040 80e4 	bne.w	800d258 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4aab      	ldr	r2, [pc, #684]	; (800d344 <UART_SetConfig+0x324>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d004      	beq.n	800d0a4 <UART_SetConfig+0x84>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4aaa      	ldr	r2, [pc, #680]	; (800d348 <UART_SetConfig+0x328>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d16c      	bne.n	800d17e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d0a4:	f7fc fc80 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009a      	lsls	r2, r3, #2
 800d0b2:	441a      	add	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0be:	4aa3      	ldr	r2, [pc, #652]	; (800d34c <UART_SetConfig+0x32c>)
 800d0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	011c      	lsls	r4, r3, #4
 800d0c8:	f7fc fc6e 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	009a      	lsls	r2, r3, #2
 800d0d6:	441a      	add	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	005b      	lsls	r3, r3, #1
 800d0de:	fbb2 f5f3 	udiv	r5, r2, r3
 800d0e2:	f7fc fc61 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4413      	add	r3, r2
 800d0ee:	009a      	lsls	r2, r3, #2
 800d0f0:	441a      	add	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0fc:	4a93      	ldr	r2, [pc, #588]	; (800d34c <UART_SetConfig+0x32c>)
 800d0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d102:	095b      	lsrs	r3, r3, #5
 800d104:	2264      	movs	r2, #100	; 0x64
 800d106:	fb02 f303 	mul.w	r3, r2, r3
 800d10a:	1aeb      	subs	r3, r5, r3
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	3332      	adds	r3, #50	; 0x32
 800d110:	4a8e      	ldr	r2, [pc, #568]	; (800d34c <UART_SetConfig+0x32c>)
 800d112:	fba2 2303 	umull	r2, r3, r2, r3
 800d116:	095b      	lsrs	r3, r3, #5
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d11e:	441c      	add	r4, r3
 800d120:	f7fc fc42 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d124:	4602      	mov	r2, r0
 800d126:	4613      	mov	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	009a      	lsls	r2, r3, #2
 800d12e:	441a      	add	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	fbb2 f5f3 	udiv	r5, r2, r3
 800d13a:	f7fc fc35 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d13e:	4602      	mov	r2, r0
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009a      	lsls	r2, r3, #2
 800d148:	441a      	add	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	fbb2 f3f3 	udiv	r3, r2, r3
 800d154:	4a7d      	ldr	r2, [pc, #500]	; (800d34c <UART_SetConfig+0x32c>)
 800d156:	fba2 2303 	umull	r2, r3, r2, r3
 800d15a:	095b      	lsrs	r3, r3, #5
 800d15c:	2264      	movs	r2, #100	; 0x64
 800d15e:	fb02 f303 	mul.w	r3, r2, r3
 800d162:	1aeb      	subs	r3, r5, r3
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	3332      	adds	r3, #50	; 0x32
 800d168:	4a78      	ldr	r2, [pc, #480]	; (800d34c <UART_SetConfig+0x32c>)
 800d16a:	fba2 2303 	umull	r2, r3, r2, r3
 800d16e:	095b      	lsrs	r3, r3, #5
 800d170:	f003 0207 	and.w	r2, r3, #7
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4422      	add	r2, r4
 800d17a:	609a      	str	r2, [r3, #8]
 800d17c:	e154      	b.n	800d428 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d17e:	f7fc fbff 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d182:	4602      	mov	r2, r0
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009a      	lsls	r2, r3, #2
 800d18c:	441a      	add	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	fbb2 f3f3 	udiv	r3, r2, r3
 800d198:	4a6c      	ldr	r2, [pc, #432]	; (800d34c <UART_SetConfig+0x32c>)
 800d19a:	fba2 2303 	umull	r2, r3, r2, r3
 800d19e:	095b      	lsrs	r3, r3, #5
 800d1a0:	011c      	lsls	r4, r3, #4
 800d1a2:	f7fc fbed 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009a      	lsls	r2, r3, #2
 800d1b0:	441a      	add	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	fbb2 f5f3 	udiv	r5, r2, r3
 800d1bc:	f7fc fbe0 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009a      	lsls	r2, r3, #2
 800d1ca:	441a      	add	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d6:	4a5d      	ldr	r2, [pc, #372]	; (800d34c <UART_SetConfig+0x32c>)
 800d1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1dc:	095b      	lsrs	r3, r3, #5
 800d1de:	2264      	movs	r2, #100	; 0x64
 800d1e0:	fb02 f303 	mul.w	r3, r2, r3
 800d1e4:	1aeb      	subs	r3, r5, r3
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	3332      	adds	r3, #50	; 0x32
 800d1ea:	4a58      	ldr	r2, [pc, #352]	; (800d34c <UART_SetConfig+0x32c>)
 800d1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f0:	095b      	lsrs	r3, r3, #5
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d1f8:	441c      	add	r4, r3
 800d1fa:	f7fc fbc1 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d1fe:	4602      	mov	r2, r0
 800d200:	4613      	mov	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	009a      	lsls	r2, r3, #2
 800d208:	441a      	add	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	fbb2 f5f3 	udiv	r5, r2, r3
 800d214:	f7fc fbb4 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d218:	4602      	mov	r2, r0
 800d21a:	4613      	mov	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4413      	add	r3, r2
 800d220:	009a      	lsls	r2, r3, #2
 800d222:	441a      	add	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22e:	4a47      	ldr	r2, [pc, #284]	; (800d34c <UART_SetConfig+0x32c>)
 800d230:	fba2 2303 	umull	r2, r3, r2, r3
 800d234:	095b      	lsrs	r3, r3, #5
 800d236:	2264      	movs	r2, #100	; 0x64
 800d238:	fb02 f303 	mul.w	r3, r2, r3
 800d23c:	1aeb      	subs	r3, r5, r3
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	3332      	adds	r3, #50	; 0x32
 800d242:	4a42      	ldr	r2, [pc, #264]	; (800d34c <UART_SetConfig+0x32c>)
 800d244:	fba2 2303 	umull	r2, r3, r2, r3
 800d248:	095b      	lsrs	r3, r3, #5
 800d24a:	f003 0207 	and.w	r2, r3, #7
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4422      	add	r2, r4
 800d254:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800d256:	e0e7      	b.n	800d428 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a39      	ldr	r2, [pc, #228]	; (800d344 <UART_SetConfig+0x324>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d004      	beq.n	800d26c <UART_SetConfig+0x24c>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a38      	ldr	r2, [pc, #224]	; (800d348 <UART_SetConfig+0x328>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d171      	bne.n	800d350 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d26c:	f7fc fb9c 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d270:	4602      	mov	r2, r0
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009a      	lsls	r2, r3, #2
 800d27a:	441a      	add	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	fbb2 f3f3 	udiv	r3, r2, r3
 800d286:	4a31      	ldr	r2, [pc, #196]	; (800d34c <UART_SetConfig+0x32c>)
 800d288:	fba2 2303 	umull	r2, r3, r2, r3
 800d28c:	095b      	lsrs	r3, r3, #5
 800d28e:	011c      	lsls	r4, r3, #4
 800d290:	f7fc fb8a 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d294:	4602      	mov	r2, r0
 800d296:	4613      	mov	r3, r2
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	4413      	add	r3, r2
 800d29c:	009a      	lsls	r2, r3, #2
 800d29e:	441a      	add	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	fbb2 f5f3 	udiv	r5, r2, r3
 800d2aa:	f7fc fb7d 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	009a      	lsls	r2, r3, #2
 800d2b8:	441a      	add	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2c4:	4a21      	ldr	r2, [pc, #132]	; (800d34c <UART_SetConfig+0x32c>)
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	095b      	lsrs	r3, r3, #5
 800d2cc:	2264      	movs	r2, #100	; 0x64
 800d2ce:	fb02 f303 	mul.w	r3, r2, r3
 800d2d2:	1aeb      	subs	r3, r5, r3
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	3332      	adds	r3, #50	; 0x32
 800d2d8:	4a1c      	ldr	r2, [pc, #112]	; (800d34c <UART_SetConfig+0x32c>)
 800d2da:	fba2 2303 	umull	r2, r3, r2, r3
 800d2de:	095b      	lsrs	r3, r3, #5
 800d2e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2e4:	441c      	add	r4, r3
 800d2e6:	f7fc fb5f 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	009a      	lsls	r2, r3, #2
 800d2f4:	441a      	add	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	fbb2 f5f3 	udiv	r5, r2, r3
 800d300:	f7fc fb52 	bl	80099a8 <HAL_RCC_GetPCLK2Freq>
 800d304:	4602      	mov	r2, r0
 800d306:	4613      	mov	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	009a      	lsls	r2, r3, #2
 800d30e:	441a      	add	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	fbb2 f3f3 	udiv	r3, r2, r3
 800d31a:	4a0c      	ldr	r2, [pc, #48]	; (800d34c <UART_SetConfig+0x32c>)
 800d31c:	fba2 2303 	umull	r2, r3, r2, r3
 800d320:	095b      	lsrs	r3, r3, #5
 800d322:	2264      	movs	r2, #100	; 0x64
 800d324:	fb02 f303 	mul.w	r3, r2, r3
 800d328:	1aeb      	subs	r3, r5, r3
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	3332      	adds	r3, #50	; 0x32
 800d32e:	4a07      	ldr	r2, [pc, #28]	; (800d34c <UART_SetConfig+0x32c>)
 800d330:	fba2 2303 	umull	r2, r3, r2, r3
 800d334:	095b      	lsrs	r3, r3, #5
 800d336:	f003 020f 	and.w	r2, r3, #15
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4422      	add	r2, r4
 800d340:	609a      	str	r2, [r3, #8]
 800d342:	e071      	b.n	800d428 <UART_SetConfig+0x408>
 800d344:	40011000 	.word	0x40011000
 800d348:	40011400 	.word	0x40011400
 800d34c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d350:	f7fc fb16 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d354:	4602      	mov	r2, r0
 800d356:	4613      	mov	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	009a      	lsls	r2, r3, #2
 800d35e:	441a      	add	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36a:	4a31      	ldr	r2, [pc, #196]	; (800d430 <UART_SetConfig+0x410>)
 800d36c:	fba2 2303 	umull	r2, r3, r2, r3
 800d370:	095b      	lsrs	r3, r3, #5
 800d372:	011c      	lsls	r4, r3, #4
 800d374:	f7fc fb04 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d378:	4602      	mov	r2, r0
 800d37a:	4613      	mov	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	009a      	lsls	r2, r3, #2
 800d382:	441a      	add	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	fbb2 f5f3 	udiv	r5, r2, r3
 800d38e:	f7fc faf7 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d392:	4602      	mov	r2, r0
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009a      	lsls	r2, r3, #2
 800d39c:	441a      	add	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a8:	4a21      	ldr	r2, [pc, #132]	; (800d430 <UART_SetConfig+0x410>)
 800d3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ae:	095b      	lsrs	r3, r3, #5
 800d3b0:	2264      	movs	r2, #100	; 0x64
 800d3b2:	fb02 f303 	mul.w	r3, r2, r3
 800d3b6:	1aeb      	subs	r3, r5, r3
 800d3b8:	011b      	lsls	r3, r3, #4
 800d3ba:	3332      	adds	r3, #50	; 0x32
 800d3bc:	4a1c      	ldr	r2, [pc, #112]	; (800d430 <UART_SetConfig+0x410>)
 800d3be:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c2:	095b      	lsrs	r3, r3, #5
 800d3c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3c8:	441c      	add	r4, r3
 800d3ca:	f7fc fad9 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009a      	lsls	r2, r3, #2
 800d3d8:	441a      	add	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	fbb2 f5f3 	udiv	r5, r2, r3
 800d3e4:	f7fc facc 	bl	8009980 <HAL_RCC_GetPCLK1Freq>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009a      	lsls	r2, r3, #2
 800d3f2:	441a      	add	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3fe:	4a0c      	ldr	r2, [pc, #48]	; (800d430 <UART_SetConfig+0x410>)
 800d400:	fba2 2303 	umull	r2, r3, r2, r3
 800d404:	095b      	lsrs	r3, r3, #5
 800d406:	2264      	movs	r2, #100	; 0x64
 800d408:	fb02 f303 	mul.w	r3, r2, r3
 800d40c:	1aeb      	subs	r3, r5, r3
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	3332      	adds	r3, #50	; 0x32
 800d412:	4a07      	ldr	r2, [pc, #28]	; (800d430 <UART_SetConfig+0x410>)
 800d414:	fba2 2303 	umull	r2, r3, r2, r3
 800d418:	095b      	lsrs	r3, r3, #5
 800d41a:	f003 020f 	and.w	r2, r3, #15
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4422      	add	r2, r4
 800d424:	609a      	str	r2, [r3, #8]
}
 800d426:	e7ff      	b.n	800d428 <UART_SetConfig+0x408>
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bdb0      	pop	{r4, r5, r7, pc}
 800d430:	51eb851f 	.word	0x51eb851f

0800d434 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d434:	b084      	sub	sp, #16
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	f107 001c 	add.w	r0, r7, #28
 800d442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d44a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d44c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d44e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d452:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d456:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d45a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d45e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4313      	orrs	r3, r2
 800d464:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d46e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	431a      	orrs	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	b004      	add	sp, #16
 800d488:	4770      	bx	lr

0800d48a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d4c6:	b480      	push	{r7}
 800d4c8:	b083      	sub	sp, #12
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2203      	movs	r2, #3
 800d4d2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0303 	and.w	r3, r3, #3
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d51c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d522:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d528:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d538:	f023 030f 	bic.w	r3, r3, #15
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	b2db      	uxtb	r3, r3
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800d576:	2300      	movs	r3, #0
 800d578:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3314      	adds	r3, #20
 800d57e:	461a      	mov	r2, r3
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	4413      	add	r3, r2
 800d584:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
}  
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d596:	b480      	push	{r7}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d5c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d5c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	431a      	orrs	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0

}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b088      	sub	sp, #32
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d600:	2310      	movs	r3, #16
 800d602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d604:	2340      	movs	r3, #64	; 0x40
 800d606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d610:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d612:	f107 0308 	add.w	r3, r7, #8
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff ff70 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d61e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d622:	2110      	movs	r1, #16
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fa63 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d62a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d62c:	69fb      	ldr	r3, [r7, #28]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3720      	adds	r7, #32
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b088      	sub	sp, #32
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d640:	2300      	movs	r3, #0
 800d642:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d648:	2311      	movs	r3, #17
 800d64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d64c:	2340      	movs	r3, #64	; 0x40
 800d64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d650:	2300      	movs	r3, #0
 800d652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d658:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d65a:	f107 0308 	add.w	r3, r7, #8
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff ff4c 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d666:	f241 3288 	movw	r2, #5000	; 0x1388
 800d66a:	2111      	movs	r1, #17
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa3f 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d674:	69fb      	ldr	r3, [r7, #28]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3720      	adds	r7, #32
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b088      	sub	sp, #32
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d688:	2300      	movs	r3, #0
 800d68a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d690:	2312      	movs	r3, #18
 800d692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d694:	2340      	movs	r3, #64	; 0x40
 800d696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d69c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6a0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7ff ff28 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d6ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6b2:	2112      	movs	r1, #18
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fa1b 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3720      	adds	r7, #32
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b088      	sub	sp, #32
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d6d8:	2318      	movs	r3, #24
 800d6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6dc:	2340      	movs	r3, #64	; 0x40
 800d6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6e8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6ea:	f107 0308 	add.w	r3, r7, #8
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff ff04 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d6f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6fa:	2118      	movs	r1, #24
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f9f7 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d704:	69fb      	ldr	r3, [r7, #28]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b088      	sub	sp, #32
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d718:	2300      	movs	r3, #0
 800d71a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d720:	2319      	movs	r3, #25
 800d722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d724:	2340      	movs	r3, #64	; 0x40
 800d726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d72c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d730:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d732:	f107 0308 	add.w	r3, r7, #8
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fee0 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d73e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d742:	2119      	movs	r1, #25
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f9d3 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d74a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d74c:	69fb      	ldr	r3, [r7, #28]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3720      	adds	r7, #32
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
	...

0800d758 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d764:	2300      	movs	r3, #0
 800d766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d768:	230c      	movs	r3, #12
 800d76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d76c:	2340      	movs	r3, #64	; 0x40
 800d76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d770:	2300      	movs	r3, #0
 800d772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d778:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff febc 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800d786:	4a05      	ldr	r2, [pc, #20]	; (800d79c <SDMMC_CmdStopTransfer+0x44>)
 800d788:	210c      	movs	r1, #12
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f9b0 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d792:	69fb      	ldr	r3, [r7, #28]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	05f5e100 	.word	0x05f5e100

0800d7a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08a      	sub	sp, #40	; 0x28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d7b4:	2307      	movs	r3, #7
 800d7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7b8:	2340      	movs	r3, #64	; 0x40
 800d7ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c4:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7c6:	f107 0310 	add.w	r3, r7, #16
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff fe96 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7d6:	2107      	movs	r1, #7
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f989 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d7de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3728      	adds	r7, #40	; 0x28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d7fe:	2300      	movs	r3, #0
 800d800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d80a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fe73 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f93f 	bl	800da9c <SDMMC_GetCmdError>
 800d81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d820:	69fb      	ldr	r3, [r7, #28]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3720      	adds	r7, #32
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b088      	sub	sp, #32
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d832:	2300      	movs	r3, #0
 800d834:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d836:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d83c:	2308      	movs	r3, #8
 800d83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d84c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d84e:	f107 0308 	add.w	r3, r7, #8
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff fe52 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fb10 	bl	800de80 <SDMMC_GetCmdResp7>
 800d860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d862:	69fb      	ldr	r3, [r7, #28]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d876:	2300      	movs	r3, #0
 800d878:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d87e:	2337      	movs	r3, #55	; 0x37
 800d880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d882:	2340      	movs	r3, #64	; 0x40
 800d884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d886:	2300      	movs	r3, #0
 800d888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d88e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff fe31 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a0:	2137      	movs	r1, #55	; 0x37
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f924 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d8ce:	2329      	movs	r3, #41	; 0x29
 800d8d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8d2:	2340      	movs	r3, #64	; 0x40
 800d8d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8de:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fe09 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fa25 	bl	800dd3c <SDMMC_GetCmdResp3>
 800d8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3720      	adds	r7, #32
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b088      	sub	sp, #32
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d908:	2300      	movs	r3, #0
 800d90a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d910:	2306      	movs	r3, #6
 800d912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d914:	2340      	movs	r3, #64	; 0x40
 800d916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d918:	2300      	movs	r3, #0
 800d91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d920:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d922:	f107 0308 	add.w	r3, r7, #8
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fde8 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d932:	2106      	movs	r1, #6
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f8db 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d93a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93c:	69fb      	ldr	r3, [r7, #28]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3720      	adds	r7, #32
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b088      	sub	sp, #32
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d94e:	2300      	movs	r3, #0
 800d950:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d952:	2300      	movs	r3, #0
 800d954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d956:	2333      	movs	r3, #51	; 0x33
 800d958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d966:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d968:	f107 0308 	add.w	r3, r7, #8
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fdc5 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d974:	f241 3288 	movw	r2, #5000	; 0x1388
 800d978:	2133      	movs	r1, #51	; 0x33
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f8b8 	bl	800daf0 <SDMMC_GetCmdResp1>
 800d980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d982:	69fb      	ldr	r3, [r7, #28]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d994:	2300      	movs	r3, #0
 800d996:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d99c:	2302      	movs	r3, #2
 800d99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d9a0:	23c0      	movs	r3, #192	; 0xc0
 800d9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9ae:	f107 0308 	add.w	r3, r7, #8
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fda2 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f97e 	bl	800dcbc <SDMMC_GetCmdResp2>
 800d9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c2:	69fb      	ldr	r3, [r7, #28]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3720      	adds	r7, #32
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d9de:	2309      	movs	r3, #9
 800d9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d9e2:	23c0      	movs	r3, #192	; 0xc0
 800d9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ee:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fd81 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f95d 	bl	800dcbc <SDMMC_GetCmdResp2>
 800da02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da04:	69fb      	ldr	r3, [r7, #28]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3720      	adds	r7, #32
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b088      	sub	sp, #32
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800da18:	2300      	movs	r3, #0
 800da1a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800da20:	2303      	movs	r3, #3
 800da22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da24:	2340      	movs	r3, #64	; 0x40
 800da26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da28:	2300      	movs	r3, #0
 800da2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da30:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da32:	f107 0308 	add.w	r3, r7, #8
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7ff fd60 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	2103      	movs	r1, #3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f9ae 	bl	800dda4 <SDMMC_GetCmdResp6>
 800da48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da4a:	69fb      	ldr	r3, [r7, #28]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3720      	adds	r7, #32
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800da5e:	2300      	movs	r3, #0
 800da60:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800da66:	230d      	movs	r3, #13
 800da68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da6a:	2340      	movs	r3, #64	; 0x40
 800da6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da6e:	2300      	movs	r3, #0
 800da70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da76:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fd3d 	bl	800d4fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800da84:	f241 3288 	movw	r2, #5000	; 0x1388
 800da88:	210d      	movs	r1, #13
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f830 	bl	800daf0 <SDMMC_GetCmdResp1>
 800da90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da92:	69fb      	ldr	r3, [r7, #28]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800da9c:	b490      	push	{r4, r7}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daa4:	4b10      	ldr	r3, [pc, #64]	; (800dae8 <SDMMC_GetCmdError+0x4c>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a10      	ldr	r2, [pc, #64]	; (800daec <SDMMC_GetCmdError+0x50>)
 800daaa:	fba2 2303 	umull	r2, r3, r2, r3
 800daae:	0a5b      	lsrs	r3, r3, #9
 800dab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dab8:	4623      	mov	r3, r4
 800daba:	1e5c      	subs	r4, r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dac4:	e00a      	b.n	800dadc <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0f2      	beq.n	800dab8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bc90      	pop	{r4, r7}
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	20000134 	.word	0x20000134
 800daec:	10624dd3 	.word	0x10624dd3

0800daf0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	460b      	mov	r3, r1
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dafe:	4b6c      	ldr	r3, [pc, #432]	; (800dcb0 <SDMMC_GetCmdResp1+0x1c0>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a6c      	ldr	r2, [pc, #432]	; (800dcb4 <SDMMC_GetCmdResp1+0x1c4>)
 800db04:	fba2 2303 	umull	r2, r3, r2, r3
 800db08:	0a5b      	lsrs	r3, r3, #9
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db10:	4623      	mov	r3, r4
 800db12:	1e5c      	subs	r4, r3, #1
 800db14:	2b00      	cmp	r3, #0
 800db16:	d102      	bne.n	800db1e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db1c:	e0c3      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db26:	2b00      	cmp	r3, #0
 800db28:	d0f2      	beq.n	800db10 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2e:	f003 0304 	and.w	r3, r3, #4
 800db32:	2b00      	cmp	r3, #0
 800db34:	d004      	beq.n	800db40 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2204      	movs	r2, #4
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db3c:	2304      	movs	r3, #4
 800db3e:	e0b2      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db44:	f003 0301 	and.w	r3, r3, #1
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d004      	beq.n	800db56 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2201      	movs	r2, #1
 800db50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db52:	2301      	movs	r3, #1
 800db54:	e0a7      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7ff fcfb 	bl	800d552 <SDIO_GetCommandResponse>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461a      	mov	r2, r3
 800db60:	7afb      	ldrb	r3, [r7, #11]
 800db62:	4293      	cmp	r3, r2
 800db64:	d001      	beq.n	800db6a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db66:	2301      	movs	r3, #1
 800db68:	e09d      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800db72:	2100      	movs	r1, #0
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f7ff fcf9 	bl	800d56c <SDIO_GetResponse>
 800db7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	4b4e      	ldr	r3, [pc, #312]	; (800dcb8 <SDMMC_GetCmdResp1+0x1c8>)
 800db80:	4013      	ands	r3, r2
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800db86:	2300      	movs	r3, #0
 800db88:	e08d      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	da02      	bge.n	800db96 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db94:	e087      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dba0:	2340      	movs	r3, #64	; 0x40
 800dba2:	e080      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbae:	2380      	movs	r3, #128	; 0x80
 800dbb0:	e079      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dbbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbc0:	e071      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dbcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbd0:	e069      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe0:	e061      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbf0:	e059      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc00:	e051      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc10:	e049      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc20:	e041      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800dc2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc30:	e039      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dc40:	e031      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc50:	e029      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc60:	e021      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dc70:	e019      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dc80:	e011      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dc8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dc90:	e009      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f003 0308 	and.w	r3, r3, #8
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dc9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dca0:	e001      	b.n	800dca6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd90      	pop	{r4, r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	20000134 	.word	0x20000134
 800dcb4:	10624dd3 	.word	0x10624dd3
 800dcb8:	fdffe008 	.word	0xfdffe008

0800dcbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dcbc:	b490      	push	{r4, r7}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcc4:	4b1b      	ldr	r3, [pc, #108]	; (800dd34 <SDMMC_GetCmdResp2+0x78>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a1b      	ldr	r2, [pc, #108]	; (800dd38 <SDMMC_GetCmdResp2+0x7c>)
 800dcca:	fba2 2303 	umull	r2, r3, r2, r3
 800dcce:	0a5b      	lsrs	r3, r3, #9
 800dcd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dcd8:	4623      	mov	r3, r4
 800dcda:	1e5c      	subs	r4, r3, #1
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d102      	bne.n	800dce6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dce0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dce4:	e020      	b.n	800dd28 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0f2      	beq.n	800dcd8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f003 0304 	and.w	r3, r3, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2204      	movs	r2, #4
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd04:	2304      	movs	r3, #4
 800dd06:	e00f      	b.n	800dd28 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d004      	beq.n	800dd1e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e004      	b.n	800dd28 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800dd24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bc90      	pop	{r4, r7}
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20000134 	.word	0x20000134
 800dd38:	10624dd3 	.word	0x10624dd3

0800dd3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dd3c:	b490      	push	{r4, r7}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd44:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <SDMMC_GetCmdResp3+0x60>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a15      	ldr	r2, [pc, #84]	; (800dda0 <SDMMC_GetCmdResp3+0x64>)
 800dd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4e:	0a5b      	lsrs	r3, r3, #9
 800dd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd58:	4623      	mov	r3, r4
 800dd5a:	1e5c      	subs	r4, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd64:	e015      	b.n	800dd92 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d0f2      	beq.n	800dd58 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd76:	f003 0304 	and.w	r3, r3, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d004      	beq.n	800dd88 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2204      	movs	r2, #4
 800dd82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd84:	2304      	movs	r3, #4
 800dd86:	e004      	b.n	800dd92 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800dd8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bc90      	pop	{r4, r7}
 800dd9a:	4770      	bx	lr
 800dd9c:	20000134 	.word	0x20000134
 800dda0:	10624dd3 	.word	0x10624dd3

0800dda4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dda4:	b590      	push	{r4, r7, lr}
 800dda6:	b087      	sub	sp, #28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	460b      	mov	r3, r1
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddb2:	4b31      	ldr	r3, [pc, #196]	; (800de78 <SDMMC_GetCmdResp6+0xd4>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a31      	ldr	r2, [pc, #196]	; (800de7c <SDMMC_GetCmdResp6+0xd8>)
 800ddb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ddbc:	0a5b      	lsrs	r3, r3, #9
 800ddbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddc2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ddc6:	4623      	mov	r3, r4
 800ddc8:	1e5c      	subs	r4, r3, #1
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d102      	bne.n	800ddd4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddd2:	e04c      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d0f2      	beq.n	800ddc6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d004      	beq.n	800ddf6 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2204      	movs	r2, #4
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	e03b      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de08:	2301      	movs	r3, #1
 800de0a:	e030      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f7ff fba0 	bl	800d552 <SDIO_GetCommandResponse>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	7afb      	ldrb	r3, [r7, #11]
 800de18:	4293      	cmp	r3, r2
 800de1a:	d001      	beq.n	800de20 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de1c:	2301      	movs	r3, #1
 800de1e:	e026      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800de26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800de28:	2100      	movs	r1, #0
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f7ff fb9e 	bl	800d56c <SDIO_GetResponse>
 800de30:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d106      	bne.n	800de4a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	0c1b      	lsrs	r3, r3, #16
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800de46:	2300      	movs	r3, #0
 800de48:	e011      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de58:	e009      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d002      	beq.n	800de6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de68:	e001      	b.n	800de6e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800de6e:	4618      	mov	r0, r3
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	bd90      	pop	{r4, r7, pc}
 800de76:	bf00      	nop
 800de78:	20000134 	.word	0x20000134
 800de7c:	10624dd3 	.word	0x10624dd3

0800de80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800de80:	b490      	push	{r4, r7}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de88:	4b18      	ldr	r3, [pc, #96]	; (800deec <SDMMC_GetCmdResp7+0x6c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a18      	ldr	r2, [pc, #96]	; (800def0 <SDMMC_GetCmdResp7+0x70>)
 800de8e:	fba2 2303 	umull	r2, r3, r2, r3
 800de92:	0a5b      	lsrs	r3, r3, #9
 800de94:	f241 3288 	movw	r2, #5000	; 0x1388
 800de98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de9c:	4623      	mov	r3, r4
 800de9e:	1e5c      	subs	r4, r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dea8:	e01a      	b.n	800dee0 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d0f2      	beq.n	800de9c <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deba:	f003 0304 	and.w	r3, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2240      	movs	r2, #64	; 0x40
 800dec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dec8:	2304      	movs	r3, #4
 800deca:	e009      	b.n	800dee0 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ded0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2240      	movs	r2, #64	; 0x40
 800dedc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dede:	2300      	movs	r3, #0
  
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bc90      	pop	{r4, r7}
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	20000134 	.word	0x20000134
 800def0:	10624dd3 	.word	0x10624dd3

0800def4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800def4:	b084      	sub	sp, #16
 800def6:	b580      	push	{r7, lr}
 800def8:	b084      	sub	sp, #16
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	f107 001c 	add.w	r0, r7, #28
 800df02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d122      	bne.n	800df52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800df20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800df34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df36:	2b01      	cmp	r3, #1
 800df38:	d105      	bne.n	800df46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f001 fa7c 	bl	800f444 <USB_CoreReset>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73fb      	strb	r3, [r7, #15]
 800df50:	e01a      	b.n	800df88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f001 fa70 	bl	800f444 <USB_CoreReset>
 800df64:	4603      	mov	r3, r0
 800df66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800df68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	639a      	str	r2, [r3, #56]	; 0x38
 800df7a:	e005      	b.n	800df88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d10b      	bne.n	800dfa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f043 0206 	orr.w	r2, r3, #6
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	f043 0220 	orr.w	r2, r3, #32
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dfb2:	b004      	add	sp, #16
 800dfb4:	4770      	bx	lr
	...

0800dfb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b087      	sub	sp, #28
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d165      	bne.n	800e098 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4a41      	ldr	r2, [pc, #260]	; (800e0d4 <USB_SetTurnaroundTime+0x11c>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d906      	bls.n	800dfe2 <USB_SetTurnaroundTime+0x2a>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4a40      	ldr	r2, [pc, #256]	; (800e0d8 <USB_SetTurnaroundTime+0x120>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d802      	bhi.n	800dfe2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dfdc:	230f      	movs	r3, #15
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	e062      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	4a3c      	ldr	r2, [pc, #240]	; (800e0d8 <USB_SetTurnaroundTime+0x120>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d906      	bls.n	800dff8 <USB_SetTurnaroundTime+0x40>
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	4a3b      	ldr	r2, [pc, #236]	; (800e0dc <USB_SetTurnaroundTime+0x124>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d802      	bhi.n	800dff8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dff2:	230e      	movs	r3, #14
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	e057      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	4a38      	ldr	r2, [pc, #224]	; (800e0dc <USB_SetTurnaroundTime+0x124>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d906      	bls.n	800e00e <USB_SetTurnaroundTime+0x56>
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	4a37      	ldr	r2, [pc, #220]	; (800e0e0 <USB_SetTurnaroundTime+0x128>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d802      	bhi.n	800e00e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e008:	230d      	movs	r3, #13
 800e00a:	617b      	str	r3, [r7, #20]
 800e00c:	e04c      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	4a33      	ldr	r2, [pc, #204]	; (800e0e0 <USB_SetTurnaroundTime+0x128>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d906      	bls.n	800e024 <USB_SetTurnaroundTime+0x6c>
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	4a32      	ldr	r2, [pc, #200]	; (800e0e4 <USB_SetTurnaroundTime+0x12c>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d802      	bhi.n	800e024 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e01e:	230c      	movs	r3, #12
 800e020:	617b      	str	r3, [r7, #20]
 800e022:	e041      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	4a2f      	ldr	r2, [pc, #188]	; (800e0e4 <USB_SetTurnaroundTime+0x12c>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d906      	bls.n	800e03a <USB_SetTurnaroundTime+0x82>
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4a2e      	ldr	r2, [pc, #184]	; (800e0e8 <USB_SetTurnaroundTime+0x130>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d802      	bhi.n	800e03a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e034:	230b      	movs	r3, #11
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	e036      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	4a2a      	ldr	r2, [pc, #168]	; (800e0e8 <USB_SetTurnaroundTime+0x130>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d906      	bls.n	800e050 <USB_SetTurnaroundTime+0x98>
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	4a29      	ldr	r2, [pc, #164]	; (800e0ec <USB_SetTurnaroundTime+0x134>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d802      	bhi.n	800e050 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e04a:	230a      	movs	r3, #10
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	e02b      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	4a26      	ldr	r2, [pc, #152]	; (800e0ec <USB_SetTurnaroundTime+0x134>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d906      	bls.n	800e066 <USB_SetTurnaroundTime+0xae>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	4a25      	ldr	r2, [pc, #148]	; (800e0f0 <USB_SetTurnaroundTime+0x138>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d802      	bhi.n	800e066 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e060:	2309      	movs	r3, #9
 800e062:	617b      	str	r3, [r7, #20]
 800e064:	e020      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	4a21      	ldr	r2, [pc, #132]	; (800e0f0 <USB_SetTurnaroundTime+0x138>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d906      	bls.n	800e07c <USB_SetTurnaroundTime+0xc4>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	4a20      	ldr	r2, [pc, #128]	; (800e0f4 <USB_SetTurnaroundTime+0x13c>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d802      	bhi.n	800e07c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e076:	2308      	movs	r3, #8
 800e078:	617b      	str	r3, [r7, #20]
 800e07a:	e015      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	4a1d      	ldr	r2, [pc, #116]	; (800e0f4 <USB_SetTurnaroundTime+0x13c>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d906      	bls.n	800e092 <USB_SetTurnaroundTime+0xda>
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	4a1c      	ldr	r2, [pc, #112]	; (800e0f8 <USB_SetTurnaroundTime+0x140>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d802      	bhi.n	800e092 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e08c:	2307      	movs	r3, #7
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	e00a      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e092:	2306      	movs	r3, #6
 800e094:	617b      	str	r3, [r7, #20]
 800e096:	e007      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d102      	bne.n	800e0a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e09e:	2309      	movs	r3, #9
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e001      	b.n	800e0a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e0a4:	2309      	movs	r3, #9
 800e0a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	68da      	ldr	r2, [r3, #12]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	029b      	lsls	r3, r3, #10
 800e0bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e0c0:	431a      	orrs	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	00d8acbf 	.word	0x00d8acbf
 800e0d8:	00e4e1bf 	.word	0x00e4e1bf
 800e0dc:	00f423ff 	.word	0x00f423ff
 800e0e0:	0106737f 	.word	0x0106737f
 800e0e4:	011a499f 	.word	0x011a499f
 800e0e8:	01312cff 	.word	0x01312cff
 800e0ec:	014ca43f 	.word	0x014ca43f
 800e0f0:	016e35ff 	.word	0x016e35ff
 800e0f4:	01a6ab1f 	.word	0x01a6ab1f
 800e0f8:	01e847ff 	.word	0x01e847ff

0800e0fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f043 0201 	orr.w	r2, r3, #1
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	370c      	adds	r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e11e:	b480      	push	{r7}
 800e120:	b083      	sub	sp, #12
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	f023 0201 	bic.w	r2, r3, #1
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	460b      	mov	r3, r1
 800e14a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e158:	78fb      	ldrb	r3, [r7, #3]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d106      	bne.n	800e16c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	60da      	str	r2, [r3, #12]
 800e16a:	e00b      	b.n	800e184 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e16c:	78fb      	ldrb	r3, [r7, #3]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60da      	str	r2, [r3, #12]
 800e17e:	e001      	b.n	800e184 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e003      	b.n	800e18c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e184:	2032      	movs	r0, #50	; 0x32
 800e186:	f7f8 f85d 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e194:	b084      	sub	sp, #16
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	613b      	str	r3, [r7, #16]
 800e1b2:	e009      	b.n	800e1c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	3340      	adds	r3, #64	; 0x40
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	2200      	movs	r2, #0
 800e1c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	613b      	str	r3, [r7, #16]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	2b0e      	cmp	r3, #14
 800e1cc:	d9f2      	bls.n	800e1b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d112      	bne.n	800e1fa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38
 800e1f8:	e00b      	b.n	800e212 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e218:	461a      	mov	r2, r3
 800e21a:	2300      	movs	r3, #0
 800e21c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e224:	4619      	mov	r1, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e22c:	461a      	mov	r2, r3
 800e22e:	680b      	ldr	r3, [r1, #0]
 800e230:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e234:	2b01      	cmp	r3, #1
 800e236:	d10c      	bne.n	800e252 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d104      	bne.n	800e248 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e23e:	2100      	movs	r1, #0
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f961 	bl	800e508 <USB_SetDevSpeed>
 800e246:	e008      	b.n	800e25a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e248:	2101      	movs	r1, #1
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f95c 	bl	800e508 <USB_SetDevSpeed>
 800e250:	e003      	b.n	800e25a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e252:	2103      	movs	r1, #3
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 f957 	bl	800e508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e25a:	2110      	movs	r1, #16
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f90b 	bl	800e478 <USB_FlushTxFifo>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 f929 	bl	800e4c4 <USB_FlushRxFifo>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e282:	461a      	mov	r2, r3
 800e284:	2300      	movs	r3, #0
 800e286:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e28e:	461a      	mov	r2, r3
 800e290:	2300      	movs	r3, #0
 800e292:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29a:	461a      	mov	r2, r3
 800e29c:	2300      	movs	r3, #0
 800e29e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	613b      	str	r3, [r7, #16]
 800e2a4:	e043      	b.n	800e32e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	015a      	lsls	r2, r3, #5
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2bc:	d118      	bne.n	800e2f0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10a      	bne.n	800e2da <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	015a      	lsls	r2, r3, #5
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e013      	b.n	800e302 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e2ec:	6013      	str	r3, [r2, #0]
 800e2ee:	e008      	b.n	800e302 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	015a      	lsls	r2, r3, #5
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	2300      	movs	r3, #0
 800e300:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e30e:	461a      	mov	r2, r3
 800e310:	2300      	movs	r3, #0
 800e312:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e320:	461a      	mov	r2, r3
 800e322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	3301      	adds	r3, #1
 800e32c:	613b      	str	r3, [r7, #16]
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	429a      	cmp	r2, r3
 800e334:	d3b7      	bcc.n	800e2a6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e336:	2300      	movs	r3, #0
 800e338:	613b      	str	r3, [r7, #16]
 800e33a:	e043      	b.n	800e3c4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	015a      	lsls	r2, r3, #5
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	4413      	add	r3, r2
 800e344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e34e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e352:	d118      	bne.n	800e386 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	015a      	lsls	r2, r3, #5
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4413      	add	r3, r2
 800e362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e366:	461a      	mov	r2, r3
 800e368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e36c:	6013      	str	r3, [r2, #0]
 800e36e:	e013      	b.n	800e398 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e37c:	461a      	mov	r2, r3
 800e37e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	e008      	b.n	800e398 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	015a      	lsls	r2, r3, #5
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	4413      	add	r3, r2
 800e38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e392:	461a      	mov	r2, r3
 800e394:	2300      	movs	r3, #0
 800e396:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	015a      	lsls	r2, r3, #5
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	015a      	lsls	r2, r3, #5
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e3bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	613b      	str	r3, [r7, #16]
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d3b7      	bcc.n	800e33c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3de:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d111      	bne.n	800e40a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	4b20      	ldr	r3, [pc, #128]	; (800e470 <USB_DevInit+0x2dc>)
 800e3f0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e404:	f043 0303 	orr.w	r3, r3, #3
 800e408:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d105      	bne.n	800e42a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	f043 0210 	orr.w	r2, r3, #16
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	699a      	ldr	r2, [r3, #24]
 800e42e:	4b11      	ldr	r3, [pc, #68]	; (800e474 <USB_DevInit+0x2e0>)
 800e430:	4313      	orrs	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d005      	beq.n	800e448 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	f043 0208 	orr.w	r2, r3, #8
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d107      	bne.n	800e45e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e456:	f043 0304 	orr.w	r3, r3, #4
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e46a:	b004      	add	sp, #16
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	00800100 	.word	0x00800100
 800e474:	803c3800 	.word	0x803c3800

0800e478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e482:	2300      	movs	r3, #0
 800e484:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	019b      	lsls	r3, r3, #6
 800e48a:	f043 0220 	orr.w	r2, r3, #32
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3301      	adds	r3, #1
 800e496:	60fb      	str	r3, [r7, #12]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	4a09      	ldr	r2, [pc, #36]	; (800e4c0 <USB_FlushTxFifo+0x48>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d901      	bls.n	800e4a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e006      	b.n	800e4b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	f003 0320 	and.w	r3, r3, #32
 800e4ac:	2b20      	cmp	r3, #32
 800e4ae:	d0f0      	beq.n	800e492 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	00030d40 	.word	0x00030d40

0800e4c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2210      	movs	r2, #16
 800e4d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	60fb      	str	r3, [r7, #12]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4a09      	ldr	r2, [pc, #36]	; (800e504 <USB_FlushRxFifo+0x40>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d901      	bls.n	800e4e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e006      	b.n	800e4f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	691b      	ldr	r3, [r3, #16]
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b10      	cmp	r3, #16
 800e4f2:	d0f0      	beq.n	800e4d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	00030d40 	.word	0x00030d40

0800e508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	68f9      	ldr	r1, [r7, #12]
 800e524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e528:	4313      	orrs	r3, r2
 800e52a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b087      	sub	sp, #28
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	f003 0306 	and.w	r3, r3, #6
 800e552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d102      	bne.n	800e560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e55a:	2300      	movs	r3, #0
 800e55c:	75fb      	strb	r3, [r7, #23]
 800e55e:	e00a      	b.n	800e576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b02      	cmp	r3, #2
 800e564:	d002      	beq.n	800e56c <USB_GetDevSpeed+0x32>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b06      	cmp	r3, #6
 800e56a:	d102      	bne.n	800e572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e56c:	2302      	movs	r3, #2
 800e56e:	75fb      	strb	r3, [r7, #23]
 800e570:	e001      	b.n	800e576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e572:	230f      	movs	r3, #15
 800e574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e576:	7dfb      	ldrb	r3, [r7, #23]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	371c      	adds	r7, #28
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	785b      	ldrb	r3, [r3, #1]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d13a      	bne.n	800e616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a6:	69da      	ldr	r2, [r3, #28]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	f003 030f 	and.w	r3, r3, #15
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	68f9      	ldr	r1, [r7, #12]
 800e5ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	015a      	lsls	r2, r3, #5
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d155      	bne.n	800e684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	015a      	lsls	r2, r3, #5
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	78db      	ldrb	r3, [r3, #3]
 800e5f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	059b      	lsls	r3, r3, #22
 800e5fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	0151      	lsls	r1, r2, #5
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	440a      	add	r2, r1
 800e606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e60e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	e036      	b.n	800e684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e61c:	69da      	ldr	r2, [r3, #28]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 030f 	and.w	r3, r3, #15
 800e626:	2101      	movs	r1, #1
 800e628:	fa01 f303 	lsl.w	r3, r1, r3
 800e62c:	041b      	lsls	r3, r3, #16
 800e62e:	68f9      	ldr	r1, [r7, #12]
 800e630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e634:	4313      	orrs	r3, r2
 800e636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d11a      	bne.n	800e684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	015a      	lsls	r2, r3, #5
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4413      	add	r3, r2
 800e656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	78db      	ldrb	r3, [r3, #3]
 800e668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e66a:	430b      	orrs	r3, r1
 800e66c:	4313      	orrs	r3, r2
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	0151      	lsls	r1, r2, #5
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	440a      	add	r2, r1
 800e676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e67a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e684:	2300      	movs	r3, #0
}
 800e686:	4618      	mov	r0, r3
 800e688:	3714      	adds	r7, #20
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
	...

0800e694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e694:	b480      	push	{r7}
 800e696:	b085      	sub	sp, #20
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	785b      	ldrb	r3, [r3, #1]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d135      	bne.n	800e71c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f003 030f 	and.w	r3, r3, #15
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	43db      	mvns	r3, r3
 800e6ca:	68f9      	ldr	r1, [r7, #12]
 800e6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6d0:	4013      	ands	r3, r2
 800e6d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6da:	69da      	ldr	r2, [r3, #28]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f003 030f 	and.w	r3, r3, #15
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	43db      	mvns	r3, r3
 800e6ee:	68f9      	ldr	r1, [r7, #12]
 800e6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	0159      	lsls	r1, r3, #5
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	440b      	add	r3, r1
 800e70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e712:	4619      	mov	r1, r3
 800e714:	4b1f      	ldr	r3, [pc, #124]	; (800e794 <USB_DeactivateEndpoint+0x100>)
 800e716:	4013      	ands	r3, r2
 800e718:	600b      	str	r3, [r1, #0]
 800e71a:	e034      	b.n	800e786 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 030f 	and.w	r3, r3, #15
 800e72c:	2101      	movs	r1, #1
 800e72e:	fa01 f303 	lsl.w	r3, r1, r3
 800e732:	041b      	lsls	r3, r3, #16
 800e734:	43db      	mvns	r3, r3
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e73c:	4013      	ands	r3, r2
 800e73e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	f003 030f 	and.w	r3, r3, #15
 800e750:	2101      	movs	r1, #1
 800e752:	fa01 f303 	lsl.w	r3, r1, r3
 800e756:	041b      	lsls	r3, r3, #16
 800e758:	43db      	mvns	r3, r3
 800e75a:	68f9      	ldr	r1, [r7, #12]
 800e75c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e760:	4013      	ands	r3, r2
 800e762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	0159      	lsls	r1, r3, #5
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	440b      	add	r3, r1
 800e77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e77e:	4619      	mov	r1, r3
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <USB_DeactivateEndpoint+0x104>)
 800e782:	4013      	ands	r3, r2
 800e784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	ec337800 	.word	0xec337800
 800e798:	eff37800 	.word	0xeff37800

0800e79c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b08a      	sub	sp, #40	; 0x28
 800e7a0:	af02      	add	r7, sp, #8
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	785b      	ldrb	r3, [r3, #1]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	f040 815c 	bne.w	800ea76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d132      	bne.n	800e82c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	69ba      	ldr	r2, [r7, #24]
 800e7d6:	0151      	lsls	r1, r2, #5
 800e7d8:	69fa      	ldr	r2, [r7, #28]
 800e7da:	440a      	add	r2, r1
 800e7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e7e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e7e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	0151      	lsls	r1, r2, #5
 800e7fc:	69fa      	ldr	r2, [r7, #28]
 800e7fe:	440a      	add	r2, r1
 800e800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	015a      	lsls	r2, r3, #5
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	4413      	add	r3, r2
 800e812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	69ba      	ldr	r2, [r7, #24]
 800e81a:	0151      	lsls	r1, r2, #5
 800e81c:	69fa      	ldr	r2, [r7, #28]
 800e81e:	440a      	add	r2, r1
 800e820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e824:	0cdb      	lsrs	r3, r3, #19
 800e826:	04db      	lsls	r3, r3, #19
 800e828:	6113      	str	r3, [r2, #16]
 800e82a:	e074      	b.n	800e916 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	015a      	lsls	r2, r3, #5
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	4413      	add	r3, r2
 800e834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	69ba      	ldr	r2, [r7, #24]
 800e83c:	0151      	lsls	r1, r2, #5
 800e83e:	69fa      	ldr	r2, [r7, #28]
 800e840:	440a      	add	r2, r1
 800e842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e846:	0cdb      	lsrs	r3, r3, #19
 800e848:	04db      	lsls	r3, r3, #19
 800e84a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	015a      	lsls	r2, r3, #5
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	4413      	add	r3, r2
 800e854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	0151      	lsls	r1, r2, #5
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	440a      	add	r2, r1
 800e862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e86a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e86e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	015a      	lsls	r2, r3, #5
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	4413      	add	r3, r2
 800e878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e87c:	691a      	ldr	r2, [r3, #16]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6959      	ldr	r1, [r3, #20]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	440b      	add	r3, r1
 800e888:	1e59      	subs	r1, r3, #1
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e892:	04d9      	lsls	r1, r3, #19
 800e894:	4b9d      	ldr	r3, [pc, #628]	; (800eb0c <USB_EPStartXfer+0x370>)
 800e896:	400b      	ands	r3, r1
 800e898:	69b9      	ldr	r1, [r7, #24]
 800e89a:	0148      	lsls	r0, r1, #5
 800e89c:	69f9      	ldr	r1, [r7, #28]
 800e89e:	4401      	add	r1, r0
 800e8a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	015a      	lsls	r2, r3, #5
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b4:	691a      	ldr	r2, [r3, #16]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8be:	69b9      	ldr	r1, [r7, #24]
 800e8c0:	0148      	lsls	r0, r1, #5
 800e8c2:	69f9      	ldr	r1, [r7, #28]
 800e8c4:	4401      	add	r1, r0
 800e8c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	78db      	ldrb	r3, [r3, #3]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d11f      	bne.n	800e916 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	015a      	lsls	r2, r3, #5
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	0151      	lsls	r1, r2, #5
 800e8e8:	69fa      	ldr	r2, [r7, #28]
 800e8ea:	440a      	add	r2, r1
 800e8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e8f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	015a      	lsls	r2, r3, #5
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	69ba      	ldr	r2, [r7, #24]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e914:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d14b      	bne.n	800e9b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e930:	461a      	mov	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	78db      	ldrb	r3, [r3, #3]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d128      	bne.n	800e992 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d110      	bne.n	800e972 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	015a      	lsls	r2, r3, #5
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4413      	add	r3, r2
 800e958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	0151      	lsls	r1, r2, #5
 800e962:	69fa      	ldr	r2, [r7, #28]
 800e964:	440a      	add	r2, r1
 800e966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e96a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	e00f      	b.n	800e992 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	015a      	lsls	r2, r3, #5
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	4413      	add	r3, r2
 800e97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	69ba      	ldr	r2, [r7, #24]
 800e982:	0151      	lsls	r1, r2, #5
 800e984:	69fa      	ldr	r2, [r7, #28]
 800e986:	440a      	add	r2, r1
 800e988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e98c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e990:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	0151      	lsls	r1, r2, #5
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	440a      	add	r2, r1
 800e9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e12f      	b.n	800ec14 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	78db      	ldrb	r3, [r3, #3]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d015      	beq.n	800ea08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 8117 	beq.w	800ec14 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	2101      	movs	r1, #1
 800e9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9fc:	69f9      	ldr	r1, [r7, #28]
 800e9fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea02:	4313      	orrs	r3, r2
 800ea04:	634b      	str	r3, [r1, #52]	; 0x34
 800ea06:	e105      	b.n	800ec14 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d110      	bne.n	800ea3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	0151      	lsls	r1, r2, #5
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	440a      	add	r2, r1
 800ea2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	e00f      	b.n	800ea5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	69ba      	ldr	r2, [r7, #24]
 800ea4a:	0151      	lsls	r1, r2, #5
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	440a      	add	r2, r1
 800ea50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	68d9      	ldr	r1, [r3, #12]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	781a      	ldrb	r2, [r3, #0]
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	b298      	uxth	r0, r3
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 fa2b 	bl	800eeca <USB_WritePacket>
 800ea74:	e0ce      	b.n	800ec14 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	015a      	lsls	r2, r3, #5
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	69ba      	ldr	r2, [r7, #24]
 800ea86:	0151      	lsls	r1, r2, #5
 800ea88:	69fa      	ldr	r2, [r7, #28]
 800ea8a:	440a      	add	r2, r1
 800ea8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea90:	0cdb      	lsrs	r3, r3, #19
 800ea92:	04db      	lsls	r3, r3, #19
 800ea94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	015a      	lsls	r2, r3, #5
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	0151      	lsls	r1, r2, #5
 800eaa8:	69fa      	ldr	r2, [r7, #28]
 800eaaa:	440a      	add	r2, r1
 800eaac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eab8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d126      	bne.n	800eb10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	015a      	lsls	r2, r3, #5
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	4413      	add	r3, r2
 800eaca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eace:	691a      	ldr	r2, [r3, #16]
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ead8:	69b9      	ldr	r1, [r7, #24]
 800eada:	0148      	lsls	r0, r1, #5
 800eadc:	69f9      	ldr	r1, [r7, #28]
 800eade:	4401      	add	r1, r0
 800eae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eae4:	4313      	orrs	r3, r2
 800eae6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	0151      	lsls	r1, r2, #5
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	440a      	add	r2, r1
 800eafe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb06:	6113      	str	r3, [r2, #16]
 800eb08:	e036      	b.n	800eb78 <USB_EPStartXfer+0x3dc>
 800eb0a:	bf00      	nop
 800eb0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	695a      	ldr	r2, [r3, #20]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	1e5a      	subs	r2, r3, #1
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb32:	691a      	ldr	r2, [r3, #16]
 800eb34:	8afb      	ldrh	r3, [r7, #22]
 800eb36:	04d9      	lsls	r1, r3, #19
 800eb38:	4b39      	ldr	r3, [pc, #228]	; (800ec20 <USB_EPStartXfer+0x484>)
 800eb3a:	400b      	ands	r3, r1
 800eb3c:	69b9      	ldr	r1, [r7, #24]
 800eb3e:	0148      	lsls	r0, r1, #5
 800eb40:	69f9      	ldr	r1, [r7, #28]
 800eb42:	4401      	add	r1, r0
 800eb44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	015a      	lsls	r2, r3, #5
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	4413      	add	r3, r2
 800eb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb58:	691a      	ldr	r2, [r3, #16]
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	8af9      	ldrh	r1, [r7, #22]
 800eb60:	fb01 f303 	mul.w	r3, r1, r3
 800eb64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb68:	69b9      	ldr	r1, [r7, #24]
 800eb6a:	0148      	lsls	r0, r1, #5
 800eb6c:	69f9      	ldr	r1, [r7, #28]
 800eb6e:	4401      	add	r1, r0
 800eb70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb74:	4313      	orrs	r3, r2
 800eb76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d10d      	bne.n	800eb9a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d009      	beq.n	800eb9a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	68d9      	ldr	r1, [r3, #12]
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	015a      	lsls	r2, r3, #5
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	4413      	add	r3, r2
 800eb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb96:	460a      	mov	r2, r1
 800eb98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	78db      	ldrb	r3, [r3, #3]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d128      	bne.n	800ebf4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d110      	bne.n	800ebd4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	015a      	lsls	r2, r3, #5
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	4413      	add	r3, r2
 800ebba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	69ba      	ldr	r2, [r7, #24]
 800ebc2:	0151      	lsls	r1, r2, #5
 800ebc4:	69fa      	ldr	r2, [r7, #28]
 800ebc6:	440a      	add	r2, r1
 800ebc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebd0:	6013      	str	r3, [r2, #0]
 800ebd2:	e00f      	b.n	800ebf4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	015a      	lsls	r2, r3, #5
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	4413      	add	r3, r2
 800ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	69ba      	ldr	r2, [r7, #24]
 800ebe4:	0151      	lsls	r1, r2, #5
 800ebe6:	69fa      	ldr	r2, [r7, #28]
 800ebe8:	440a      	add	r2, r1
 800ebea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebf2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69ba      	ldr	r2, [r7, #24]
 800ec04:	0151      	lsls	r1, r2, #5
 800ec06:	69fa      	ldr	r2, [r7, #28]
 800ec08:	440a      	add	r2, r1
 800ec0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	1ff80000 	.word	0x1ff80000

0800ec24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b087      	sub	sp, #28
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	785b      	ldrb	r3, [r3, #1]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	f040 80cd 	bne.w	800ede0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	695b      	ldr	r3, [r3, #20]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d132      	bne.n	800ecb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	015a      	lsls	r2, r3, #5
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	4413      	add	r3, r2
 800ec56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	693a      	ldr	r2, [r7, #16]
 800ec5e:	0151      	lsls	r1, r2, #5
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	440a      	add	r2, r1
 800ec64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	0151      	lsls	r1, r2, #5
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	440a      	add	r2, r1
 800ec88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	015a      	lsls	r2, r3, #5
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	4413      	add	r3, r2
 800ec9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	0151      	lsls	r1, r2, #5
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	440a      	add	r2, r1
 800eca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecac:	0cdb      	lsrs	r3, r3, #19
 800ecae:	04db      	lsls	r3, r3, #19
 800ecb0:	6113      	str	r3, [r2, #16]
 800ecb2:	e04e      	b.n	800ed52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	0151      	lsls	r1, r2, #5
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	440a      	add	r2, r1
 800ecca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecce:	0cdb      	lsrs	r3, r3, #19
 800ecd0:	04db      	lsls	r3, r3, #19
 800ecd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	015a      	lsls	r2, r3, #5
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	4413      	add	r3, r2
 800ecdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	0151      	lsls	r1, r2, #5
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	440a      	add	r2, r1
 800ecea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ecf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ecf6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	695a      	ldr	r2, [r3, #20]
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d903      	bls.n	800ed0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	689a      	ldr	r2, [r3, #8]
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	693a      	ldr	r2, [r7, #16]
 800ed1c:	0151      	lsls	r1, r2, #5
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	440a      	add	r2, r1
 800ed22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	015a      	lsls	r2, r3, #5
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed38:	691a      	ldr	r2, [r3, #16]
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	695b      	ldr	r3, [r3, #20]
 800ed3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed42:	6939      	ldr	r1, [r7, #16]
 800ed44:	0148      	lsls	r0, r1, #5
 800ed46:	6979      	ldr	r1, [r7, #20]
 800ed48:	4401      	add	r1, r0
 800ed4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d11e      	bne.n	800ed96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d009      	beq.n	800ed74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	015a      	lsls	r2, r3, #5
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	4413      	add	r3, r2
 800ed68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	0151      	lsls	r1, r2, #5
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	440a      	add	r2, r1
 800ed8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed92:	6013      	str	r3, [r2, #0]
 800ed94:	e092      	b.n	800eebc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	0151      	lsls	r1, r2, #5
 800eda8:	697a      	ldr	r2, [r7, #20]
 800edaa:	440a      	add	r2, r1
 800edac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800edb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	695b      	ldr	r3, [r3, #20]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d07e      	beq.n	800eebc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	f003 030f 	and.w	r3, r3, #15
 800edce:	2101      	movs	r1, #1
 800edd0:	fa01 f303 	lsl.w	r3, r1, r3
 800edd4:	6979      	ldr	r1, [r7, #20]
 800edd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edda:	4313      	orrs	r3, r2
 800eddc:	634b      	str	r3, [r1, #52]	; 0x34
 800edde:	e06d      	b.n	800eebc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	015a      	lsls	r2, r3, #5
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	4413      	add	r3, r2
 800ede8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	693a      	ldr	r2, [r7, #16]
 800edf0:	0151      	lsls	r1, r2, #5
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	440a      	add	r2, r1
 800edf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edfa:	0cdb      	lsrs	r3, r3, #19
 800edfc:	04db      	lsls	r3, r3, #19
 800edfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	015a      	lsls	r2, r3, #5
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	4413      	add	r3, r2
 800ee08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	0151      	lsls	r1, r2, #5
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	440a      	add	r2, r1
 800ee16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d003      	beq.n	800ee34 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	689a      	ldr	r2, [r3, #8]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	015a      	lsls	r2, r3, #5
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	0151      	lsls	r1, r2, #5
 800ee46:	697a      	ldr	r2, [r7, #20]
 800ee48:	440a      	add	r2, r1
 800ee4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	015a      	lsls	r2, r3, #5
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee60:	691a      	ldr	r2, [r3, #16]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee6a:	6939      	ldr	r1, [r7, #16]
 800ee6c:	0148      	lsls	r0, r1, #5
 800ee6e:	6979      	ldr	r1, [r7, #20]
 800ee70:	4401      	add	r1, r0
 800ee72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee76:	4313      	orrs	r3, r2
 800ee78:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d10d      	bne.n	800ee9c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d009      	beq.n	800ee9c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	68d9      	ldr	r1, [r3, #12]
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	015a      	lsls	r2, r3, #5
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	4413      	add	r3, r2
 800ee94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee98:	460a      	mov	r2, r1
 800ee9a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	693a      	ldr	r2, [r7, #16]
 800eeac:	0151      	lsls	r1, r2, #5
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	440a      	add	r2, r1
 800eeb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eeb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eeba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	371c      	adds	r7, #28
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eeca:	b480      	push	{r7}
 800eecc:	b089      	sub	sp, #36	; 0x24
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	4611      	mov	r1, r2
 800eed6:	461a      	mov	r2, r3
 800eed8:	460b      	mov	r3, r1
 800eeda:	71fb      	strb	r3, [r7, #7]
 800eedc:	4613      	mov	r3, r2
 800eede:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800eee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d11a      	bne.n	800ef26 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eef0:	88bb      	ldrh	r3, [r7, #4]
 800eef2:	3303      	adds	r3, #3
 800eef4:	089b      	lsrs	r3, r3, #2
 800eef6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eef8:	2300      	movs	r3, #0
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	e00f      	b.n	800ef1e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	031a      	lsls	r2, r3, #12
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	4413      	add	r3, r2
 800ef06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	3304      	adds	r3, #4
 800ef16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	61bb      	str	r3, [r7, #24]
 800ef1e:	69ba      	ldr	r2, [r7, #24]
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d3eb      	bcc.n	800eefe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3724      	adds	r7, #36	; 0x24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b089      	sub	sp, #36	; 0x24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
 800ef4c:	3303      	adds	r3, #3
 800ef4e:	089b      	lsrs	r3, r3, #2
 800ef50:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ef52:	2300      	movs	r3, #0
 800ef54:	61bb      	str	r3, [r7, #24]
 800ef56:	e00b      	b.n	800ef70 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	601a      	str	r2, [r3, #0]
    pDest++;
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	3304      	adds	r3, #4
 800ef68:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	61bb      	str	r3, [r7, #24]
 800ef70:	69ba      	ldr	r2, [r7, #24]
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d3ef      	bcc.n	800ef58 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ef78:	69fb      	ldr	r3, [r7, #28]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3724      	adds	r7, #36	; 0x24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	785b      	ldrb	r3, [r3, #1]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d12c      	bne.n	800effc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	015a      	lsls	r2, r3, #5
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4413      	add	r3, r2
 800efaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	db12      	blt.n	800efda <USB_EPSetStall+0x54>
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00f      	beq.n	800efda <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	015a      	lsls	r2, r3, #5
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	4413      	add	r3, r2
 800efc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	0151      	lsls	r1, r2, #5
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	440a      	add	r2, r1
 800efd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800efd8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	015a      	lsls	r2, r3, #5
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4413      	add	r3, r2
 800efe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	0151      	lsls	r1, r2, #5
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	440a      	add	r2, r1
 800eff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	e02b      	b.n	800f054 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	015a      	lsls	r2, r3, #5
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	4413      	add	r3, r2
 800f004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	db12      	blt.n	800f034 <USB_EPSetStall+0xae>
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00f      	beq.n	800f034 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	0151      	lsls	r1, r2, #5
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	440a      	add	r2, r1
 800f02a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f02e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f032:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	015a      	lsls	r2, r3, #5
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	4413      	add	r3, r2
 800f03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	0151      	lsls	r1, r2, #5
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	440a      	add	r2, r1
 800f04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f04e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f062:	b480      	push	{r7}
 800f064:	b085      	sub	sp, #20
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	785b      	ldrb	r3, [r3, #1]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d128      	bne.n	800f0d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	015a      	lsls	r2, r3, #5
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	4413      	add	r3, r2
 800f086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	0151      	lsls	r1, r2, #5
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	440a      	add	r2, r1
 800f094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f098:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f09c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	78db      	ldrb	r3, [r3, #3]
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d003      	beq.n	800f0ae <USB_EPClearStall+0x4c>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	78db      	ldrb	r3, [r3, #3]
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d138      	bne.n	800f120 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	015a      	lsls	r2, r3, #5
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	0151      	lsls	r1, r2, #5
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	440a      	add	r2, r1
 800f0c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0cc:	6013      	str	r3, [r2, #0]
 800f0ce:	e027      	b.n	800f120 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	0151      	lsls	r1, r2, #5
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	440a      	add	r2, r1
 800f0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	78db      	ldrb	r3, [r3, #3]
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d003      	beq.n	800f100 <USB_EPClearStall+0x9e>
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	78db      	ldrb	r3, [r3, #3]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d10f      	bne.n	800f120 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4413      	add	r3, r2
 800f108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	0151      	lsls	r1, r2, #5
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	440a      	add	r2, r1
 800f116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f11a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f11e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3714      	adds	r7, #20
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f12e:	b480      	push	{r7}
 800f130:	b085      	sub	sp, #20
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f14c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f150:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	78fb      	ldrb	r3, [r7, #3]
 800f15c:	011b      	lsls	r3, r3, #4
 800f15e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f168:	4313      	orrs	r3, r2
 800f16a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b084      	sub	sp, #16
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f194:	f023 0302 	bic.w	r3, r3, #2
 800f198:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f19a:	2003      	movs	r0, #3
 800f19c:	f7f7 f852 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1c4:	f043 0302 	orr.w	r3, r3, #2
 800f1c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f1ca:	2003      	movs	r0, #3
 800f1cc:	f7f7 f83a 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f1da:	b480      	push	{r7}
 800f1dc:	b085      	sub	sp, #20
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	695b      	ldr	r3, [r3, #20]
 800f1e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	4013      	ands	r3, r2
 800f1f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	4013      	ands	r3, r2
 800f222:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	0c1b      	lsrs	r3, r3, #16
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4013      	ands	r3, r2
 800f256:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	b29b      	uxth	r3, r3
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f268:	b480      	push	{r7}
 800f26a:	b085      	sub	sp, #20
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	460b      	mov	r3, r1
 800f272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	015a      	lsls	r2, r3, #5
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	4413      	add	r3, r2
 800f280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	4013      	ands	r3, r2
 800f294:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f296:	68bb      	ldr	r3, [r7, #8]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3714      	adds	r7, #20
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2c8:	78fb      	ldrb	r3, [r7, #3]
 800f2ca:	f003 030f 	and.w	r3, r3, #15
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800f2d4:	01db      	lsls	r3, r3, #7
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2de:	78fb      	ldrb	r3, [r7, #3]
 800f2e0:	015a      	lsls	r2, r3, #5
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2f2:	68bb      	ldr	r3, [r7, #8]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	371c      	adds	r7, #28
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	f003 0301 	and.w	r3, r3, #1
}
 800f310:	4618      	mov	r0, r3
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f336:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f33a:	f023 0307 	bic.w	r3, r3, #7
 800f33e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f003 0306 	and.w	r3, r3, #6
 800f34c:	2b04      	cmp	r3, #4
 800f34e:	d109      	bne.n	800f364 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f35e:	f043 0303 	orr.w	r3, r3, #3
 800f362:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f376:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
	...

0800f388 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f388:	b480      	push	{r7}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	460b      	mov	r3, r1
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	333c      	adds	r3, #60	; 0x3c
 800f39e:	3304      	adds	r3, #4
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	4a26      	ldr	r2, [pc, #152]	; (800f440 <USB_EP0_OutStart+0xb8>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d90a      	bls.n	800f3c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3bc:	d101      	bne.n	800f3c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e037      	b.n	800f432 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e8:	691b      	ldr	r3, [r3, #16]
 800f3ea:	697a      	ldr	r2, [r7, #20]
 800f3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3f0:	f043 0318 	orr.w	r3, r3, #24
 800f3f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f404:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f408:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f40a:	7afb      	ldrb	r3, [r7, #11]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d10f      	bne.n	800f430 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f416:	461a      	mov	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	697a      	ldr	r2, [r7, #20]
 800f426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f42a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f42e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f430:	2300      	movs	r3, #0
}
 800f432:	4618      	mov	r0, r3
 800f434:	371c      	adds	r7, #28
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	4f54300a 	.word	0x4f54300a

0800f444 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f44c:	2300      	movs	r3, #0
 800f44e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3301      	adds	r3, #1
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4a13      	ldr	r2, [pc, #76]	; (800f4a8 <USB_CoreReset+0x64>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d901      	bls.n	800f462 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f45e:	2303      	movs	r3, #3
 800f460:	e01b      	b.n	800f49a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	daf2      	bge.n	800f450 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f46a:	2300      	movs	r3, #0
 800f46c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	f043 0201 	orr.w	r2, r3, #1
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3301      	adds	r3, #1
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	4a09      	ldr	r2, [pc, #36]	; (800f4a8 <USB_CoreReset+0x64>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d901      	bls.n	800f48c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e006      	b.n	800f49a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b01      	cmp	r3, #1
 800f496:	d0f0      	beq.n	800f47a <USB_CoreReset+0x36>

  return HAL_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3714      	adds	r7, #20
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	00030d40 	.word	0x00030d40

0800f4ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	7c1b      	ldrb	r3, [r3, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d115      	bne.n	800f4f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f4c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	2181      	movs	r1, #129	; 0x81
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f007 fad6 	bl	8016a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f4d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4dc:	2202      	movs	r2, #2
 800f4de:	2101      	movs	r1, #1
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f007 facc 	bl	8016a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800f4ee:	e012      	b.n	800f516 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f4f0:	2340      	movs	r3, #64	; 0x40
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	2181      	movs	r1, #129	; 0x81
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f007 fac1 	bl	8016a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f502:	2340      	movs	r3, #64	; 0x40
 800f504:	2202      	movs	r2, #2
 800f506:	2101      	movs	r1, #1
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f007 fab8 	bl	8016a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2201      	movs	r2, #1
 800f512:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f516:	2308      	movs	r3, #8
 800f518:	2203      	movs	r2, #3
 800f51a:	2182      	movs	r1, #130	; 0x82
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f007 faae 	bl	8016a7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800f528:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f52c:	f007 fd66 	bl	8016ffc <malloc>
 800f530:	4603      	mov	r3, r0
 800f532:	461a      	mov	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f540:	2b00      	cmp	r3, #0
 800f542:	d102      	bne.n	800f54a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800f544:	2301      	movs	r3, #1
 800f546:	73fb      	strb	r3, [r7, #15]
 800f548:	e026      	b.n	800f598 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f550:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2200      	movs	r2, #0
 800f560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2200      	movs	r2, #0
 800f568:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	7c1b      	ldrb	r3, [r3, #16]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d109      	bne.n	800f588 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f57a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f57e:	2101      	movs	r1, #1
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f007 fb6d 	bl	8016c60 <USBD_LL_PrepareReceive>
 800f586:	e007      	b.n	800f598 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f58e:	2340      	movs	r3, #64	; 0x40
 800f590:	2101      	movs	r1, #1
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f007 fb64 	bl	8016c60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f598:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b084      	sub	sp, #16
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f5b2:	2181      	movs	r1, #129	; 0x81
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f007 fa88 	bl	8016aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f5c0:	2101      	movs	r1, #1
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f007 fa81 	bl	8016aca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f5d0:	2182      	movs	r1, #130	; 0x82
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f007 fa79 	bl	8016aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d00e      	beq.n	800f606 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f007 fd07 	bl	801700c <free>
    pdev->pClassData = NULL;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800f606:	7bfb      	ldrb	r3, [r7, #15]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f620:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f626:	2300      	movs	r3, #0
 800f628:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f62a:	2300      	movs	r3, #0
 800f62c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f636:	2b00      	cmp	r3, #0
 800f638:	d039      	beq.n	800f6ae <USBD_CDC_Setup+0x9e>
 800f63a:	2b20      	cmp	r3, #32
 800f63c:	d17c      	bne.n	800f738 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	88db      	ldrh	r3, [r3, #6]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d029      	beq.n	800f69a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	b25b      	sxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	da11      	bge.n	800f674 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	683a      	ldr	r2, [r7, #0]
 800f65a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800f65c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	88d2      	ldrh	r2, [r2, #6]
 800f662:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f664:	6939      	ldr	r1, [r7, #16]
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	88db      	ldrh	r3, [r3, #6]
 800f66a:	461a      	mov	r2, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f001 f99b 	bl	80109a8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800f672:	e068      	b.n	800f746 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	785a      	ldrb	r2, [r3, #1]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	88db      	ldrh	r3, [r3, #6]
 800f682:	b2da      	uxtb	r2, r3
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f68a:	6939      	ldr	r1, [r7, #16]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	461a      	mov	r2, r3
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f001 f9b6 	bl	8010a04 <USBD_CtlPrepareRx>
    break;
 800f698:	e055      	b.n	800f746 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	7850      	ldrb	r0, [r2, #1]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	4798      	blx	r3
    break;
 800f6ac:	e04b      	b.n	800f746 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	785b      	ldrb	r3, [r3, #1]
 800f6b2:	2b0a      	cmp	r3, #10
 800f6b4:	d017      	beq.n	800f6e6 <USBD_CDC_Setup+0xd6>
 800f6b6:	2b0b      	cmp	r3, #11
 800f6b8:	d029      	beq.n	800f70e <USBD_CDC_Setup+0xfe>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d133      	bne.n	800f726 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d107      	bne.n	800f6d8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800f6c8:	f107 030c 	add.w	r3, r7, #12
 800f6cc:	2202      	movs	r2, #2
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f001 f969 	bl	80109a8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f6d6:	e02e      	b.n	800f736 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f001 f8f9 	bl	80108d2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f6e0:	2302      	movs	r3, #2
 800f6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800f6e4:	e027      	b.n	800f736 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f6ec:	2b03      	cmp	r3, #3
 800f6ee:	d107      	bne.n	800f700 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800f6f0:	f107 030f 	add.w	r3, r7, #15
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f001 f955 	bl	80109a8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f6fe:	e01a      	b.n	800f736 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f001 f8e5 	bl	80108d2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f708:	2302      	movs	r3, #2
 800f70a:	75fb      	strb	r3, [r7, #23]
      break;
 800f70c:	e013      	b.n	800f736 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f714:	2b03      	cmp	r3, #3
 800f716:	d00d      	beq.n	800f734 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f001 f8d9 	bl	80108d2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f720:	2302      	movs	r3, #2
 800f722:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f724:	e006      	b.n	800f734 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 f8d2 	bl	80108d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800f72e:	2302      	movs	r3, #2
 800f730:	75fb      	strb	r3, [r7, #23]
      break;
 800f732:	e000      	b.n	800f736 <USBD_CDC_Setup+0x126>
      break;
 800f734:	bf00      	nop
    }
    break;
 800f736:	e006      	b.n	800f746 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f001 f8c9 	bl	80108d2 <USBD_CtlError>
    ret = USBD_FAIL;
 800f740:	2302      	movs	r3, #2
 800f742:	75fb      	strb	r3, [r7, #23]
    break;
 800f744:	bf00      	nop
  }

  return ret;
 800f746:	7dfb      	ldrb	r3, [r7, #23]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	460b      	mov	r3, r1
 800f75a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f762:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f76a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f772:	2b00      	cmp	r3, #0
 800f774:	d03a      	beq.n	800f7ec <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f776:	78fa      	ldrb	r2, [r7, #3]
 800f778:	6879      	ldr	r1, [r7, #4]
 800f77a:	4613      	mov	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	440b      	add	r3, r1
 800f784:	331c      	adds	r3, #28
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d029      	beq.n	800f7e0 <USBD_CDC_DataIn+0x90>
 800f78c:	78fa      	ldrb	r2, [r7, #3]
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	331c      	adds	r3, #28
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	78f9      	ldrb	r1, [r7, #3]
 800f7a0:	68b8      	ldr	r0, [r7, #8]
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	1a5b      	subs	r3, r3, r1
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	4403      	add	r3, r0
 800f7ac:	3344      	adds	r3, #68	; 0x44
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800f7b4:	fb03 f301 	mul.w	r3, r3, r1
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d110      	bne.n	800f7e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f7be:	78fa      	ldrb	r2, [r7, #3]
 800f7c0:	6879      	ldr	r1, [r7, #4]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	440b      	add	r3, r1
 800f7cc:	331c      	adds	r3, #28
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800f7d2:	78f9      	ldrb	r1, [r7, #3]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f007 fa1e 	bl	8016c1a <USBD_LL_Transmit>
 800f7de:	e003      	b.n	800f7e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e000      	b.n	800f7ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f7ec:	2302      	movs	r3, #2
  }
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	460b      	mov	r3, r1
 800f800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f808:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f80a:	78fb      	ldrb	r3, [r7, #3]
 800f80c:	4619      	mov	r1, r3
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f007 fa49 	bl	8016ca6 <USBD_LL_GetRxDataSize>
 800f814:	4602      	mov	r2, r0
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00d      	beq.n	800f842 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f83a:	4611      	mov	r1, r2
 800f83c:	4798      	blx	r3

    return USBD_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	e000      	b.n	800f844 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f842:	2302      	movs	r3, #2
  }
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f85a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f862:	2b00      	cmp	r3, #0
 800f864:	d015      	beq.n	800f892 <USBD_CDC_EP0_RxReady+0x46>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f86c:	2bff      	cmp	r3, #255	; 0xff
 800f86e:	d010      	beq.n	800f892 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f87e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f886:	b292      	uxth	r2, r2
 800f888:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	22ff      	movs	r2, #255	; 0xff
 800f88e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f892:	2300      	movs	r3, #0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2243      	movs	r2, #67	; 0x43
 800f8a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f8aa:	4b03      	ldr	r3, [pc, #12]	; (800f8b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	20000094 	.word	0x20000094

0800f8bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2243      	movs	r2, #67	; 0x43
 800f8c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f8ca:	4b03      	ldr	r3, [pc, #12]	; (800f8d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	370c      	adds	r7, #12
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	20000050 	.word	0x20000050

0800f8dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2243      	movs	r2, #67	; 0x43
 800f8e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f8ea:	4b03      	ldr	r3, [pc, #12]	; (800f8f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	200000d8 	.word	0x200000d8

0800f8fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	220a      	movs	r2, #10
 800f908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f90a:	4b03      	ldr	r3, [pc, #12]	; (800f918 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	2000000c 	.word	0x2000000c

0800f91c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f926:	2302      	movs	r3, #2
 800f928:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b087      	sub	sp, #28
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	4613      	mov	r3, r2
 800f956:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f95e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	68ba      	ldr	r2, [r7, #8]
 800f964:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f968:	88fa      	ldrh	r2, [r7, #6]
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	371c      	adds	r7, #28
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800f97e:	b480      	push	{r7}
 800f980:	b085      	sub	sp, #20
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f98e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3714      	adds	r7, #20
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d017      	beq.n	800f9f0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7c1b      	ldrb	r3, [r3, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d109      	bne.n	800f9dc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f9ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f007 f943 	bl	8016c60 <USBD_LL_PrepareReceive>
 800f9da:	e007      	b.n	800f9ec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f9e2:	2340      	movs	r3, #64	; 0x40
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f007 f93a 	bl	8016c60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	e000      	b.n	800f9f2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f9f0:	2302      	movs	r3, #2
  }
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	4613      	mov	r3, r2
 800fa06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d101      	bne.n	800fa12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e01a      	b.n	800fa48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d003      	beq.n	800fa24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d003      	beq.n	800fa32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2201      	movs	r2, #1
 800fa36:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	79fa      	ldrb	r2, [r7, #7]
 800fa3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f006 ffb5 	bl	80169b0 <USBD_LL_Init>

  return USBD_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	73fb      	strb	r3, [r7, #15]
 800fa70:	e001      	b.n	800fa76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fa72:	2302      	movs	r3, #2
 800fa74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f006 ffdb 	bl	8016a48 <USBD_LL_Start>

  return USBD_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b084      	sub	sp, #16
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	460b      	mov	r3, r1
 800fabc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800fabe:	2302      	movs	r3, #2
 800fac0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00c      	beq.n	800fae6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	78fa      	ldrb	r2, [r7, #3]
 800fad6:	4611      	mov	r1, r2
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	4798      	blx	r3
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d101      	bne.n	800fae6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	460b      	mov	r3, r1
 800fafa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	78fa      	ldrb	r2, [r7, #3]
 800fb06:	4611      	mov	r1, r2
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	4798      	blx	r3
  return USBD_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b082      	sub	sp, #8
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fe95 	bl	8010858 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800fb4a:	f003 031f 	and.w	r3, r3, #31
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d00c      	beq.n	800fb6c <USBD_LL_SetupStage+0x56>
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d302      	bcc.n	800fb5c <USBD_LL_SetupStage+0x46>
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d010      	beq.n	800fb7c <USBD_LL_SetupStage+0x66>
 800fb5a:	e017      	b.n	800fb8c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb62:	4619      	mov	r1, r3
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fa05 	bl	800ff74 <USBD_StdDevReq>
    break;
 800fb6a:	e01a      	b.n	800fba2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb72:	4619      	mov	r1, r3
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 fa67 	bl	8010048 <USBD_StdItfReq>
    break;
 800fb7a:	e012      	b.n	800fba2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 faa5 	bl	80100d4 <USBD_StdEPReq>
    break;
 800fb8a:	e00a      	b.n	800fba2 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800fb92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	4619      	mov	r1, r3
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f006 ffb4 	bl	8016b08 <USBD_LL_StallEP>
    break;
 800fba0:	bf00      	nop
  }

  return USBD_OK;
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b086      	sub	sp, #24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800fbba:	7afb      	ldrb	r3, [r7, #11]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d14b      	bne.n	800fc58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fbc6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fbce:	2b03      	cmp	r3, #3
 800fbd0:	d134      	bne.n	800fc3c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	68da      	ldr	r2, [r3, #12]
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d919      	bls.n	800fc12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	68da      	ldr	r2, [r3, #12]
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	1ad2      	subs	r2, r2, r3
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	68da      	ldr	r2, [r3, #12]
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d203      	bcs.n	800fc00 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	e002      	b.n	800fc06 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	461a      	mov	r2, r3
 800fc08:	6879      	ldr	r1, [r7, #4]
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f000 ff18 	bl	8010a40 <USBD_CtlContinueRx>
 800fc10:	e038      	b.n	800fc84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00a      	beq.n	800fc34 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800fc24:	2b03      	cmp	r3, #3
 800fc26:	d105      	bne.n	800fc34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc2e:	691b      	ldr	r3, [r3, #16]
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f000 ff15 	bl	8010a64 <USBD_CtlSendStatus>
 800fc3a:	e023      	b.n	800fc84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fc42:	2b05      	cmp	r3, #5
 800fc44:	d11e      	bne.n	800fc84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800fc4e:	2100      	movs	r1, #0
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f006 ff59 	bl	8016b08 <USBD_LL_StallEP>
 800fc56:	e015      	b.n	800fc84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00d      	beq.n	800fc80 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d108      	bne.n	800fc80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc74:	699b      	ldr	r3, [r3, #24]
 800fc76:	7afa      	ldrb	r2, [r7, #11]
 800fc78:	4611      	mov	r1, r2
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	4798      	blx	r3
 800fc7e:	e001      	b.n	800fc84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fc80:	2302      	movs	r3, #2
 800fc82:	e000      	b.n	800fc86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	460b      	mov	r3, r1
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800fc9c:	7afb      	ldrb	r3, [r7, #11]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d17f      	bne.n	800fda2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3314      	adds	r3, #20
 800fca6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d15c      	bne.n	800fd6c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	68da      	ldr	r2, [r3, #12]
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d915      	bls.n	800fcea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	68da      	ldr	r2, [r3, #12]
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	1ad2      	subs	r2, r2, r3
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	6879      	ldr	r1, [r7, #4]
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f000 fe82 	bl	80109e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fcdc:	2300      	movs	r3, #0
 800fcde:	2200      	movs	r2, #0
 800fce0:	2100      	movs	r1, #0
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f006 ffbc 	bl	8016c60 <USBD_LL_PrepareReceive>
 800fce8:	e04e      	b.n	800fd88 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	6912      	ldr	r2, [r2, #16]
 800fcf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcf6:	fb02 f201 	mul.w	r2, r2, r1
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d11c      	bne.n	800fd3a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	689a      	ldr	r2, [r3, #8]
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d316      	bcc.n	800fd3a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	689a      	ldr	r2, [r3, #8]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d20f      	bcs.n	800fd3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f000 fe5e 	bl	80109e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	2200      	movs	r2, #0
 800fd30:	2100      	movs	r1, #0
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f006 ff94 	bl	8016c60 <USBD_LL_PrepareReceive>
 800fd38:	e026      	b.n	800fd88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00a      	beq.n	800fd5c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d105      	bne.n	800fd5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fd5c:	2180      	movs	r1, #128	; 0x80
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f006 fed2 	bl	8016b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f000 fe90 	bl	8010a8a <USBD_CtlReceiveStatus>
 800fd6a:	e00d      	b.n	800fd88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fd72:	2b04      	cmp	r3, #4
 800fd74:	d004      	beq.n	800fd80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d103      	bne.n	800fd88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fd80:	2180      	movs	r1, #128	; 0x80
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f006 fec0 	bl	8016b08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d11d      	bne.n	800fdce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f7ff fe82 	bl	800fa9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800fda0:	e015      	b.n	800fdce <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fda8:	695b      	ldr	r3, [r3, #20]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00d      	beq.n	800fdca <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d108      	bne.n	800fdca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fdbe:	695b      	ldr	r3, [r3, #20]
 800fdc0:	7afa      	ldrb	r2, [r7, #11]
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	4798      	blx	r3
 800fdc8:	e001      	b.n	800fdce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e000      	b.n	800fdd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fde0:	2340      	movs	r3, #64	; 0x40
 800fde2:	2200      	movs	r2, #0
 800fde4:	2100      	movs	r1, #0
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f006 fe49 	bl	8016a7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2240      	movs	r2, #64	; 0x40
 800fdf8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdfc:	2340      	movs	r3, #64	; 0x40
 800fdfe:	2200      	movs	r2, #0
 800fe00:	2180      	movs	r1, #128	; 0x80
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f006 fe3b 	bl	8016a7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2240      	movs	r2, #64	; 0x40
 800fe12:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d009      	beq.n	800fe50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	6852      	ldr	r2, [r2, #4]
 800fe48:	b2d2      	uxtb	r2, r2
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	4798      	blx	r3
  }

  return USBD_OK;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	460b      	mov	r3, r1
 800fe64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	78fa      	ldrb	r2, [r7, #3]
 800fe6a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2204      	movs	r2, #4
 800fe92:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800feb8:	2300      	movs	r3, #0
}
 800feba:	4618      	mov	r0, r3
 800febc:	370c      	adds	r7, #12
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b082      	sub	sp, #8
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	d10b      	bne.n	800fef0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d005      	beq.n	800fef0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	460b      	mov	r3, r1
 800ff04:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr

0800ff2e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	6852      	ldr	r2, [r2, #4]
 800ff60:	b2d2      	uxtb	r2, r2
 800ff62:	4611      	mov	r1, r2
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	4798      	blx	r3

  return USBD_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
	...

0800ff74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	d004      	beq.n	800ff98 <USBD_StdDevReq+0x24>
 800ff8e:	2b40      	cmp	r3, #64	; 0x40
 800ff90:	d002      	beq.n	800ff98 <USBD_StdDevReq+0x24>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d008      	beq.n	800ffa8 <USBD_StdDevReq+0x34>
 800ff96:	e04c      	b.n	8010032 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	4798      	blx	r3
    break;
 800ffa6:	e049      	b.n	801003c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	785b      	ldrb	r3, [r3, #1]
 800ffac:	2b09      	cmp	r3, #9
 800ffae:	d83a      	bhi.n	8010026 <USBD_StdDevReq+0xb2>
 800ffb0:	a201      	add	r2, pc, #4	; (adr r2, 800ffb8 <USBD_StdDevReq+0x44>)
 800ffb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb6:	bf00      	nop
 800ffb8:	08010009 	.word	0x08010009
 800ffbc:	0801001d 	.word	0x0801001d
 800ffc0:	08010027 	.word	0x08010027
 800ffc4:	08010013 	.word	0x08010013
 800ffc8:	08010027 	.word	0x08010027
 800ffcc:	0800ffeb 	.word	0x0800ffeb
 800ffd0:	0800ffe1 	.word	0x0800ffe1
 800ffd4:	08010027 	.word	0x08010027
 800ffd8:	0800ffff 	.word	0x0800ffff
 800ffdc:	0800fff5 	.word	0x0800fff5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ffe0:	6839      	ldr	r1, [r7, #0]
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f9d2 	bl	801038c <USBD_GetDescriptor>
      break;
 800ffe8:	e022      	b.n	8010030 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 fac7 	bl	8010580 <USBD_SetAddress>
      break;
 800fff2:	e01d      	b.n	8010030 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fb04 	bl	8010604 <USBD_SetConfig>
      break;
 800fffc:	e018      	b.n	8010030 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800fffe:	6839      	ldr	r1, [r7, #0]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 fb8d 	bl	8010720 <USBD_GetConfig>
      break;
 8010006:	e013      	b.n	8010030 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fbbc 	bl	8010788 <USBD_GetStatus>
      break;
 8010010:	e00e      	b.n	8010030 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 fbea 	bl	80107ee <USBD_SetFeature>
      break;
 801001a:	e009      	b.n	8010030 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f000 fbf9 	bl	8010816 <USBD_ClrFeature>
      break;
 8010024:	e004      	b.n	8010030 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 fc52 	bl	80108d2 <USBD_CtlError>
      break;
 801002e:	bf00      	nop
    }
    break;
 8010030:	e004      	b.n	801003c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 fc4c 	bl	80108d2 <USBD_CtlError>
    break;
 801003a:	bf00      	nop
  }

  return ret;
 801003c:	7bfb      	ldrb	r3, [r7, #15]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop

08010048 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801005e:	2b20      	cmp	r3, #32
 8010060:	d003      	beq.n	801006a <USBD_StdItfReq+0x22>
 8010062:	2b40      	cmp	r3, #64	; 0x40
 8010064:	d001      	beq.n	801006a <USBD_StdItfReq+0x22>
 8010066:	2b00      	cmp	r3, #0
 8010068:	d12a      	bne.n	80100c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010070:	3b01      	subs	r3, #1
 8010072:	2b02      	cmp	r3, #2
 8010074:	d81d      	bhi.n	80100b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	889b      	ldrh	r3, [r3, #4]
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b01      	cmp	r3, #1
 801007e:	d813      	bhi.n	80100a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	4798      	blx	r3
 801008e:	4603      	mov	r3, r0
 8010090:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	88db      	ldrh	r3, [r3, #6]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d110      	bne.n	80100bc <USBD_StdItfReq+0x74>
 801009a:	7bfb      	ldrb	r3, [r7, #15]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10d      	bne.n	80100bc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fcdf 	bl	8010a64 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80100a6:	e009      	b.n	80100bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 fc11 	bl	80108d2 <USBD_CtlError>
      break;
 80100b0:	e004      	b.n	80100bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80100b2:	6839      	ldr	r1, [r7, #0]
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 fc0c 	bl	80108d2 <USBD_CtlError>
      break;
 80100ba:	e000      	b.n	80100be <USBD_StdItfReq+0x76>
      break;
 80100bc:	bf00      	nop
    }
    break;
 80100be:	e004      	b.n	80100ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 fc05 	bl	80108d2 <USBD_CtlError>
    break;
 80100c8:	bf00      	nop
  }

  return USBD_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3710      	adds	r7, #16
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	889b      	ldrh	r3, [r3, #4]
 80100e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100f0:	2b20      	cmp	r3, #32
 80100f2:	d004      	beq.n	80100fe <USBD_StdEPReq+0x2a>
 80100f4:	2b40      	cmp	r3, #64	; 0x40
 80100f6:	d002      	beq.n	80100fe <USBD_StdEPReq+0x2a>
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d008      	beq.n	801010e <USBD_StdEPReq+0x3a>
 80100fc:	e13b      	b.n	8010376 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	4798      	blx	r3
    break;
 801010c:	e138      	b.n	8010380 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010116:	2b20      	cmp	r3, #32
 8010118:	d10a      	bne.n	8010130 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]

      return ret;
 801012c:	7bfb      	ldrb	r3, [r7, #15]
 801012e:	e128      	b.n	8010382 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	785b      	ldrb	r3, [r3, #1]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d03e      	beq.n	80101b6 <USBD_StdEPReq+0xe2>
 8010138:	2b03      	cmp	r3, #3
 801013a:	d002      	beq.n	8010142 <USBD_StdEPReq+0x6e>
 801013c:	2b00      	cmp	r3, #0
 801013e:	d070      	beq.n	8010222 <USBD_StdEPReq+0x14e>
 8010140:	e113      	b.n	801036a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010148:	2b02      	cmp	r3, #2
 801014a:	d002      	beq.n	8010152 <USBD_StdEPReq+0x7e>
 801014c:	2b03      	cmp	r3, #3
 801014e:	d015      	beq.n	801017c <USBD_StdEPReq+0xa8>
 8010150:	e02b      	b.n	80101aa <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010152:	7bbb      	ldrb	r3, [r7, #14]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00c      	beq.n	8010172 <USBD_StdEPReq+0x9e>
 8010158:	7bbb      	ldrb	r3, [r7, #14]
 801015a:	2b80      	cmp	r3, #128	; 0x80
 801015c:	d009      	beq.n	8010172 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801015e:	7bbb      	ldrb	r3, [r7, #14]
 8010160:	4619      	mov	r1, r3
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f006 fcd0 	bl	8016b08 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010168:	2180      	movs	r1, #128	; 0x80
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f006 fccc 	bl	8016b08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010170:	e020      	b.n	80101b4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fbac 	bl	80108d2 <USBD_CtlError>
        break;
 801017a:	e01b      	b.n	80101b4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	885b      	ldrh	r3, [r3, #2]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10e      	bne.n	80101a2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010184:	7bbb      	ldrb	r3, [r7, #14]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00b      	beq.n	80101a2 <USBD_StdEPReq+0xce>
 801018a:	7bbb      	ldrb	r3, [r7, #14]
 801018c:	2b80      	cmp	r3, #128	; 0x80
 801018e:	d008      	beq.n	80101a2 <USBD_StdEPReq+0xce>
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	88db      	ldrh	r3, [r3, #6]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d104      	bne.n	80101a2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010198:	7bbb      	ldrb	r3, [r7, #14]
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f006 fcb3 	bl	8016b08 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fc5e 	bl	8010a64 <USBD_CtlSendStatus>

        break;
 80101a8:	e004      	b.n	80101b4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 fb90 	bl	80108d2 <USBD_CtlError>
        break;
 80101b2:	bf00      	nop
      }
      break;
 80101b4:	e0de      	b.n	8010374 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d002      	beq.n	80101c6 <USBD_StdEPReq+0xf2>
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d015      	beq.n	80101f0 <USBD_StdEPReq+0x11c>
 80101c4:	e026      	b.n	8010214 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101c6:	7bbb      	ldrb	r3, [r7, #14]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00c      	beq.n	80101e6 <USBD_StdEPReq+0x112>
 80101cc:	7bbb      	ldrb	r3, [r7, #14]
 80101ce:	2b80      	cmp	r3, #128	; 0x80
 80101d0:	d009      	beq.n	80101e6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80101d2:	7bbb      	ldrb	r3, [r7, #14]
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f006 fc96 	bl	8016b08 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80101dc:	2180      	movs	r1, #128	; 0x80
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f006 fc92 	bl	8016b08 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80101e4:	e01c      	b.n	8010220 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80101e6:	6839      	ldr	r1, [r7, #0]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 fb72 	bl	80108d2 <USBD_CtlError>
        break;
 80101ee:	e017      	b.n	8010220 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	885b      	ldrh	r3, [r3, #2]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d112      	bne.n	801021e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80101f8:	7bbb      	ldrb	r3, [r7, #14]
 80101fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d004      	beq.n	801020c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010202:	7bbb      	ldrb	r3, [r7, #14]
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f006 fc9d 	bl	8016b46 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fc29 	bl	8010a64 <USBD_CtlSendStatus>
        }
        break;
 8010212:	e004      	b.n	801021e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010214:	6839      	ldr	r1, [r7, #0]
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 fb5b 	bl	80108d2 <USBD_CtlError>
        break;
 801021c:	e000      	b.n	8010220 <USBD_StdEPReq+0x14c>
        break;
 801021e:	bf00      	nop
      }
      break;
 8010220:	e0a8      	b.n	8010374 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010228:	2b02      	cmp	r3, #2
 801022a:	d002      	beq.n	8010232 <USBD_StdEPReq+0x15e>
 801022c:	2b03      	cmp	r3, #3
 801022e:	d031      	beq.n	8010294 <USBD_StdEPReq+0x1c0>
 8010230:	e095      	b.n	801035e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010232:	7bbb      	ldrb	r3, [r7, #14]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d007      	beq.n	8010248 <USBD_StdEPReq+0x174>
 8010238:	7bbb      	ldrb	r3, [r7, #14]
 801023a:	2b80      	cmp	r3, #128	; 0x80
 801023c:	d004      	beq.n	8010248 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 801023e:	6839      	ldr	r1, [r7, #0]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f000 fb46 	bl	80108d2 <USBD_CtlError>
          break;
 8010246:	e08f      	b.n	8010368 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801024c:	2b00      	cmp	r3, #0
 801024e:	da0b      	bge.n	8010268 <USBD_StdEPReq+0x194>
 8010250:	7bbb      	ldrb	r3, [r7, #14]
 8010252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010256:	4613      	mov	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	4413      	add	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	3310      	adds	r3, #16
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	4413      	add	r3, r2
 8010264:	3304      	adds	r3, #4
 8010266:	e00a      	b.n	801027e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010268:	7bbb      	ldrb	r3, [r7, #14]
 801026a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801026e:	4613      	mov	r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	4413      	add	r3, r2
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	4413      	add	r3, r2
 801027e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2200      	movs	r2, #0
 8010284:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	2202      	movs	r2, #2
 801028a:	4619      	mov	r1, r3
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fb8b 	bl	80109a8 <USBD_CtlSendData>
          break;
 8010292:	e069      	b.n	8010368 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010298:	2b00      	cmp	r3, #0
 801029a:	da11      	bge.n	80102c0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801029c:	7bbb      	ldrb	r3, [r7, #14]
 801029e:	f003 020f 	and.w	r2, r3, #15
 80102a2:	6879      	ldr	r1, [r7, #4]
 80102a4:	4613      	mov	r3, r2
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	4413      	add	r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	440b      	add	r3, r1
 80102ae:	3318      	adds	r3, #24
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d117      	bne.n	80102e6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80102b6:	6839      	ldr	r1, [r7, #0]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 fb0a 	bl	80108d2 <USBD_CtlError>
            break;
 80102be:	e053      	b.n	8010368 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80102c0:	7bbb      	ldrb	r3, [r7, #14]
 80102c2:	f003 020f 	and.w	r2, r3, #15
 80102c6:	6879      	ldr	r1, [r7, #4]
 80102c8:	4613      	mov	r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	440b      	add	r3, r1
 80102d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d104      	bne.n	80102e6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 faf7 	bl	80108d2 <USBD_CtlError>
            break;
 80102e4:	e040      	b.n	8010368 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80102e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	da0b      	bge.n	8010306 <USBD_StdEPReq+0x232>
 80102ee:	7bbb      	ldrb	r3, [r7, #14]
 80102f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102f4:	4613      	mov	r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	4413      	add	r3, r2
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	3310      	adds	r3, #16
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	4413      	add	r3, r2
 8010302:	3304      	adds	r3, #4
 8010304:	e00a      	b.n	801031c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010306:	7bbb      	ldrb	r3, [r7, #14]
 8010308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801030c:	4613      	mov	r3, r2
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	4413      	add	r3, r2
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	4413      	add	r3, r2
 801031c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801031e:	7bbb      	ldrb	r3, [r7, #14]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <USBD_StdEPReq+0x256>
 8010324:	7bbb      	ldrb	r3, [r7, #14]
 8010326:	2b80      	cmp	r3, #128	; 0x80
 8010328:	d103      	bne.n	8010332 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2200      	movs	r2, #0
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	e00e      	b.n	8010350 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010332:	7bbb      	ldrb	r3, [r7, #14]
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f006 fc24 	bl	8016b84 <USBD_LL_IsStallEP>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d003      	beq.n	801034a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2201      	movs	r2, #1
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	e002      	b.n	8010350 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	2200      	movs	r2, #0
 801034e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2202      	movs	r2, #2
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fb26 	bl	80109a8 <USBD_CtlSendData>
          break;
 801035c:	e004      	b.n	8010368 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fab6 	bl	80108d2 <USBD_CtlError>
        break;
 8010366:	bf00      	nop
      }
      break;
 8010368:	e004      	b.n	8010374 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 801036a:	6839      	ldr	r1, [r7, #0]
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fab0 	bl	80108d2 <USBD_CtlError>
      break;
 8010372:	bf00      	nop
    }
    break;
 8010374:	e004      	b.n	8010380 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 faaa 	bl	80108d2 <USBD_CtlError>
    break;
 801037e:	bf00      	nop
  }

  return ret;
 8010380:	7bfb      	ldrb	r3, [r7, #15]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	885b      	ldrh	r3, [r3, #2]
 801039a:	0a1b      	lsrs	r3, r3, #8
 801039c:	b29b      	uxth	r3, r3
 801039e:	3b01      	subs	r3, #1
 80103a0:	2b06      	cmp	r3, #6
 80103a2:	f200 80c9 	bhi.w	8010538 <USBD_GetDescriptor+0x1ac>
 80103a6:	a201      	add	r2, pc, #4	; (adr r2, 80103ac <USBD_GetDescriptor+0x20>)
 80103a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ac:	080103c9 	.word	0x080103c9
 80103b0:	080103e1 	.word	0x080103e1
 80103b4:	08010421 	.word	0x08010421
 80103b8:	08010539 	.word	0x08010539
 80103bc:	08010539 	.word	0x08010539
 80103c0:	080104e5 	.word	0x080104e5
 80103c4:	0801050b 	.word	0x0801050b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	7c12      	ldrb	r2, [r2, #16]
 80103d4:	f107 010a 	add.w	r1, r7, #10
 80103d8:	4610      	mov	r0, r2
 80103da:	4798      	blx	r3
 80103dc:	60f8      	str	r0, [r7, #12]
    break;
 80103de:	e0b0      	b.n	8010542 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	7c1b      	ldrb	r3, [r3, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d10d      	bne.n	8010404 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f0:	f107 020a 	add.w	r2, r7, #10
 80103f4:	4610      	mov	r0, r2
 80103f6:	4798      	blx	r3
 80103f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3301      	adds	r3, #1
 80103fe:	2202      	movs	r2, #2
 8010400:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010402:	e09e      	b.n	8010542 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040c:	f107 020a 	add.w	r2, r7, #10
 8010410:	4610      	mov	r0, r2
 8010412:	4798      	blx	r3
 8010414:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3301      	adds	r3, #1
 801041a:	2202      	movs	r2, #2
 801041c:	701a      	strb	r2, [r3, #0]
    break;
 801041e:	e090      	b.n	8010542 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	885b      	ldrh	r3, [r3, #2]
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b05      	cmp	r3, #5
 8010428:	d856      	bhi.n	80104d8 <USBD_GetDescriptor+0x14c>
 801042a:	a201      	add	r2, pc, #4	; (adr r2, 8010430 <USBD_GetDescriptor+0xa4>)
 801042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010430:	08010449 	.word	0x08010449
 8010434:	08010461 	.word	0x08010461
 8010438:	08010479 	.word	0x08010479
 801043c:	08010491 	.word	0x08010491
 8010440:	080104a9 	.word	0x080104a9
 8010444:	080104c1 	.word	0x080104c1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	7c12      	ldrb	r2, [r2, #16]
 8010454:	f107 010a 	add.w	r1, r7, #10
 8010458:	4610      	mov	r0, r2
 801045a:	4798      	blx	r3
 801045c:	60f8      	str	r0, [r7, #12]
      break;
 801045e:	e040      	b.n	80104e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	7c12      	ldrb	r2, [r2, #16]
 801046c:	f107 010a 	add.w	r1, r7, #10
 8010470:	4610      	mov	r0, r2
 8010472:	4798      	blx	r3
 8010474:	60f8      	str	r0, [r7, #12]
      break;
 8010476:	e034      	b.n	80104e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	7c12      	ldrb	r2, [r2, #16]
 8010484:	f107 010a 	add.w	r1, r7, #10
 8010488:	4610      	mov	r0, r2
 801048a:	4798      	blx	r3
 801048c:	60f8      	str	r0, [r7, #12]
      break;
 801048e:	e028      	b.n	80104e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	7c12      	ldrb	r2, [r2, #16]
 801049c:	f107 010a 	add.w	r1, r7, #10
 80104a0:	4610      	mov	r0, r2
 80104a2:	4798      	blx	r3
 80104a4:	60f8      	str	r0, [r7, #12]
      break;
 80104a6:	e01c      	b.n	80104e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80104ae:	695b      	ldr	r3, [r3, #20]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	7c12      	ldrb	r2, [r2, #16]
 80104b4:	f107 010a 	add.w	r1, r7, #10
 80104b8:	4610      	mov	r0, r2
 80104ba:	4798      	blx	r3
 80104bc:	60f8      	str	r0, [r7, #12]
      break;
 80104be:	e010      	b.n	80104e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	7c12      	ldrb	r2, [r2, #16]
 80104cc:	f107 010a 	add.w	r1, r7, #10
 80104d0:	4610      	mov	r0, r2
 80104d2:	4798      	blx	r3
 80104d4:	60f8      	str	r0, [r7, #12]
      break;
 80104d6:	e004      	b.n	80104e2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80104d8:	6839      	ldr	r1, [r7, #0]
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f9f9 	bl	80108d2 <USBD_CtlError>
      return;
 80104e0:	e04b      	b.n	801057a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80104e2:	e02e      	b.n	8010542 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	7c1b      	ldrb	r3, [r3, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d109      	bne.n	8010500 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f4:	f107 020a 	add.w	r2, r7, #10
 80104f8:	4610      	mov	r0, r2
 80104fa:	4798      	blx	r3
 80104fc:	60f8      	str	r0, [r7, #12]
      break;
 80104fe:	e020      	b.n	8010542 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f9e5 	bl	80108d2 <USBD_CtlError>
      return;
 8010508:	e037      	b.n	801057a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	7c1b      	ldrb	r3, [r3, #16]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d10d      	bne.n	801052e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051a:	f107 020a 	add.w	r2, r7, #10
 801051e:	4610      	mov	r0, r2
 8010520:	4798      	blx	r3
 8010522:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	3301      	adds	r3, #1
 8010528:	2207      	movs	r2, #7
 801052a:	701a      	strb	r2, [r3, #0]
      break;
 801052c:	e009      	b.n	8010542 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 801052e:	6839      	ldr	r1, [r7, #0]
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f9ce 	bl	80108d2 <USBD_CtlError>
      return;
 8010536:	e020      	b.n	801057a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f9c9 	bl	80108d2 <USBD_CtlError>
    return;
 8010540:	e01b      	b.n	801057a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010542:	897b      	ldrh	r3, [r7, #10]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d011      	beq.n	801056c <USBD_GetDescriptor+0x1e0>
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	88db      	ldrh	r3, [r3, #6]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00d      	beq.n	801056c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	88da      	ldrh	r2, [r3, #6]
 8010554:	897b      	ldrh	r3, [r7, #10]
 8010556:	4293      	cmp	r3, r2
 8010558:	bf28      	it	cs
 801055a:	4613      	movcs	r3, r2
 801055c:	b29b      	uxth	r3, r3
 801055e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010560:	897b      	ldrh	r3, [r7, #10]
 8010562:	461a      	mov	r2, r3
 8010564:	68f9      	ldr	r1, [r7, #12]
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 fa1e 	bl	80109a8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	88db      	ldrh	r3, [r3, #6]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d102      	bne.n	801057a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fa75 	bl	8010a64 <USBD_CtlSendStatus>
  }
}
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	889b      	ldrh	r3, [r3, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d130      	bne.n	80105f4 <USBD_SetAddress+0x74>
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	88db      	ldrh	r3, [r3, #6]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d12c      	bne.n	80105f4 <USBD_SetAddress+0x74>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	885b      	ldrh	r3, [r3, #2]
 801059e:	2b7f      	cmp	r3, #127	; 0x7f
 80105a0:	d828      	bhi.n	80105f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	885b      	ldrh	r3, [r3, #2]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80105b4:	2b03      	cmp	r3, #3
 80105b6:	d104      	bne.n	80105c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f989 	bl	80108d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c0:	e01c      	b.n	80105fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	7bfa      	ldrb	r2, [r7, #15]
 80105c6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f006 fb04 	bl	8016bdc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fa45 	bl	8010a64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80105da:	7bfb      	ldrb	r3, [r7, #15]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d004      	beq.n	80105ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105e8:	e008      	b.n	80105fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f2:	e003      	b.n	80105fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80105f4:	6839      	ldr	r1, [r7, #0]
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f96b 	bl	80108d2 <USBD_CtlError>
  }
}
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	885b      	ldrh	r3, [r3, #2]
 8010612:	b2da      	uxtb	r2, r3
 8010614:	4b41      	ldr	r3, [pc, #260]	; (801071c <USBD_SetConfig+0x118>)
 8010616:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010618:	4b40      	ldr	r3, [pc, #256]	; (801071c <USBD_SetConfig+0x118>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d904      	bls.n	801062a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010620:	6839      	ldr	r1, [r7, #0]
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 f955 	bl	80108d2 <USBD_CtlError>
 8010628:	e075      	b.n	8010716 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010630:	2b02      	cmp	r3, #2
 8010632:	d002      	beq.n	801063a <USBD_SetConfig+0x36>
 8010634:	2b03      	cmp	r3, #3
 8010636:	d023      	beq.n	8010680 <USBD_SetConfig+0x7c>
 8010638:	e062      	b.n	8010700 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801063a:	4b38      	ldr	r3, [pc, #224]	; (801071c <USBD_SetConfig+0x118>)
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d01a      	beq.n	8010678 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010642:	4b36      	ldr	r3, [pc, #216]	; (801071c <USBD_SetConfig+0x118>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2203      	movs	r2, #3
 8010650:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010654:	4b31      	ldr	r3, [pc, #196]	; (801071c <USBD_SetConfig+0x118>)
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	4619      	mov	r1, r3
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7ff fa29 	bl	800fab2 <USBD_SetClassConfig>
 8010660:	4603      	mov	r3, r0
 8010662:	2b02      	cmp	r3, #2
 8010664:	d104      	bne.n	8010670 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 f932 	bl	80108d2 <USBD_CtlError>
          return;
 801066e:	e052      	b.n	8010716 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f000 f9f7 	bl	8010a64 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010676:	e04e      	b.n	8010716 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 f9f3 	bl	8010a64 <USBD_CtlSendStatus>
      break;
 801067e:	e04a      	b.n	8010716 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010680:	4b26      	ldr	r3, [pc, #152]	; (801071c <USBD_SetConfig+0x118>)
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d112      	bne.n	80106ae <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2202      	movs	r2, #2
 801068c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010690:	4b22      	ldr	r3, [pc, #136]	; (801071c <USBD_SetConfig+0x118>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801069a:	4b20      	ldr	r3, [pc, #128]	; (801071c <USBD_SetConfig+0x118>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	4619      	mov	r1, r3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff fa25 	bl	800faf0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 f9dc 	bl	8010a64 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80106ac:	e033      	b.n	8010716 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80106ae:	4b1b      	ldr	r3, [pc, #108]	; (801071c <USBD_SetConfig+0x118>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	461a      	mov	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d01d      	beq.n	80106f8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	4619      	mov	r1, r3
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fa13 	bl	800faf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80106ca:	4b14      	ldr	r3, [pc, #80]	; (801071c <USBD_SetConfig+0x118>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80106d4:	4b11      	ldr	r3, [pc, #68]	; (801071c <USBD_SetConfig+0x118>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff f9e9 	bl	800fab2 <USBD_SetClassConfig>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d104      	bne.n	80106f0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80106e6:	6839      	ldr	r1, [r7, #0]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f000 f8f2 	bl	80108d2 <USBD_CtlError>
          return;
 80106ee:	e012      	b.n	8010716 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 f9b7 	bl	8010a64 <USBD_CtlSendStatus>
      break;
 80106f6:	e00e      	b.n	8010716 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 f9b3 	bl	8010a64 <USBD_CtlSendStatus>
      break;
 80106fe:	e00a      	b.n	8010716 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010700:	6839      	ldr	r1, [r7, #0]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f8e5 	bl	80108d2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010708:	4b04      	ldr	r3, [pc, #16]	; (801071c <USBD_SetConfig+0x118>)
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7ff f9ee 	bl	800faf0 <USBD_ClrClassConfig>
      break;
 8010714:	bf00      	nop
    }
  }
}
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	200003a4 	.word	0x200003a4

08010720 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	88db      	ldrh	r3, [r3, #6]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d004      	beq.n	801073c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 f8cc 	bl	80108d2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801073a:	e021      	b.n	8010780 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010742:	2b01      	cmp	r3, #1
 8010744:	db17      	blt.n	8010776 <USBD_GetConfig+0x56>
 8010746:	2b02      	cmp	r3, #2
 8010748:	dd02      	ble.n	8010750 <USBD_GetConfig+0x30>
 801074a:	2b03      	cmp	r3, #3
 801074c:	d00b      	beq.n	8010766 <USBD_GetConfig+0x46>
 801074e:	e012      	b.n	8010776 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3308      	adds	r3, #8
 801075a:	2201      	movs	r2, #1
 801075c:	4619      	mov	r1, r3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f922 	bl	80109a8 <USBD_CtlSendData>
      break;
 8010764:	e00c      	b.n	8010780 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	3304      	adds	r3, #4
 801076a:	2201      	movs	r2, #1
 801076c:	4619      	mov	r1, r3
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f91a 	bl	80109a8 <USBD_CtlSendData>
      break;
 8010774:	e004      	b.n	8010780 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010776:	6839      	ldr	r1, [r7, #0]
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f8aa 	bl	80108d2 <USBD_CtlError>
      break;
 801077e:	bf00      	nop
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010798:	3b01      	subs	r3, #1
 801079a:	2b02      	cmp	r3, #2
 801079c:	d81e      	bhi.n	80107dc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	88db      	ldrh	r3, [r3, #6]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d004      	beq.n	80107b0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 f892 	bl	80108d2 <USBD_CtlError>
      break;
 80107ae:	e01a      	b.n	80107e6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d005      	beq.n	80107cc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	f043 0202 	orr.w	r2, r3, #2
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	330c      	adds	r3, #12
 80107d0:	2202      	movs	r2, #2
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f8e7 	bl	80109a8 <USBD_CtlSendData>
    break;
 80107da:	e004      	b.n	80107e6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f877 	bl	80108d2 <USBD_CtlError>
    break;
 80107e4:	bf00      	nop
  }
}
 80107e6:	bf00      	nop
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	885b      	ldrh	r3, [r3, #2]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d106      	bne.n	801080e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2201      	movs	r2, #1
 8010804:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f92b 	bl	8010a64 <USBD_CtlSendStatus>
  }

}
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010826:	3b01      	subs	r3, #1
 8010828:	2b02      	cmp	r3, #2
 801082a:	d80b      	bhi.n	8010844 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	885b      	ldrh	r3, [r3, #2]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d10c      	bne.n	801084e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 f911 	bl	8010a64 <USBD_CtlSendStatus>
    }
    break;
 8010842:	e004      	b.n	801084e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010844:	6839      	ldr	r1, [r7, #0]
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f843 	bl	80108d2 <USBD_CtlError>
    break;
 801084c:	e000      	b.n	8010850 <USBD_ClrFeature+0x3a>
    break;
 801084e:	bf00      	nop
  }
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	781a      	ldrb	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	785a      	ldrb	r2, [r3, #1]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	3302      	adds	r3, #2
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	b29a      	uxth	r2, r3
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	3303      	adds	r3, #3
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	b29b      	uxth	r3, r3
 8010882:	021b      	lsls	r3, r3, #8
 8010884:	b29b      	uxth	r3, r3
 8010886:	4413      	add	r3, r2
 8010888:	b29a      	uxth	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	3304      	adds	r3, #4
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	b29a      	uxth	r2, r3
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	3305      	adds	r3, #5
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	b29b      	uxth	r3, r3
 801089e:	021b      	lsls	r3, r3, #8
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	4413      	add	r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	3306      	adds	r3, #6
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	3307      	adds	r3, #7
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	021b      	lsls	r3, r3, #8
 80108bc:	b29b      	uxth	r3, r3
 80108be:	4413      	add	r3, r2
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	80da      	strh	r2, [r3, #6]

}
 80108c6:	bf00      	nop
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b082      	sub	sp, #8
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80108dc:	2180      	movs	r1, #128	; 0x80
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f006 f912 	bl	8016b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80108e4:	2100      	movs	r1, #0
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f006 f90e 	bl	8016b08 <USBD_LL_StallEP>
}
 80108ec:	bf00      	nop
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b086      	sub	sp, #24
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010900:	2300      	movs	r3, #0
 8010902:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d032      	beq.n	8010970 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f000 f834 	bl	8010978 <USBD_GetLen>
 8010910:	4603      	mov	r3, r0
 8010912:	3301      	adds	r3, #1
 8010914:	b29b      	uxth	r3, r3
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	b29a      	uxth	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801091e:	7dfb      	ldrb	r3, [r7, #23]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	75fa      	strb	r2, [r7, #23]
 8010924:	461a      	mov	r2, r3
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	4413      	add	r3, r2
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	7812      	ldrb	r2, [r2, #0]
 801092e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	1c5a      	adds	r2, r3, #1
 8010934:	75fa      	strb	r2, [r7, #23]
 8010936:	461a      	mov	r2, r3
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	4413      	add	r3, r2
 801093c:	2203      	movs	r2, #3
 801093e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010940:	e012      	b.n	8010968 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	1c5a      	adds	r2, r3, #1
 8010946:	60fa      	str	r2, [r7, #12]
 8010948:	7dfa      	ldrb	r2, [r7, #23]
 801094a:	1c51      	adds	r1, r2, #1
 801094c:	75f9      	strb	r1, [r7, #23]
 801094e:	4611      	mov	r1, r2
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	440a      	add	r2, r1
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010958:	7dfb      	ldrb	r3, [r7, #23]
 801095a:	1c5a      	adds	r2, r3, #1
 801095c:	75fa      	strb	r2, [r7, #23]
 801095e:	461a      	mov	r2, r3
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	4413      	add	r3, r2
 8010964:	2200      	movs	r2, #0
 8010966:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1e8      	bne.n	8010942 <USBD_GetString+0x4e>
    }
  }
}
 8010970:	bf00      	nop
 8010972:	3718      	adds	r7, #24
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8010980:	2300      	movs	r3, #0
 8010982:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010984:	e005      	b.n	8010992 <USBD_GetLen+0x1a>
    {
        len++;
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	3301      	adds	r3, #1
 801098a:	73fb      	strb	r3, [r7, #15]
        buf++;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	3301      	adds	r3, #1
 8010990:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1f5      	bne.n	8010986 <USBD_GetLen+0xe>
    }

    return len;
 801099a:	7bfb      	ldrb	r3, [r7, #15]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	60f8      	str	r0, [r7, #12]
 80109b0:	60b9      	str	r1, [r7, #8]
 80109b2:	4613      	mov	r3, r2
 80109b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2202      	movs	r2, #2
 80109ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80109be:	88fa      	ldrh	r2, [r7, #6]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80109c4:	88fa      	ldrh	r2, [r7, #6]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80109ca:	88fb      	ldrh	r3, [r7, #6]
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	2100      	movs	r1, #0
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f006 f922 	bl	8016c1a <USBD_LL_Transmit>

  return USBD_OK;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	4613      	mov	r3, r2
 80109ec:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80109ee:	88fb      	ldrh	r3, [r7, #6]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	2100      	movs	r1, #0
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f006 f910 	bl	8016c1a <USBD_LL_Transmit>

  return USBD_OK;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3710      	adds	r7, #16
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2203      	movs	r2, #3
 8010a16:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010a1a:	88fa      	ldrh	r2, [r7, #6]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8010a22:	88fa      	ldrh	r2, [r7, #6]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8010a2a:	88fb      	ldrh	r3, [r7, #6]
 8010a2c:	68ba      	ldr	r2, [r7, #8]
 8010a2e:	2100      	movs	r1, #0
 8010a30:	68f8      	ldr	r0, [r7, #12]
 8010a32:	f006 f915 	bl	8016c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a36:	2300      	movs	r3, #0
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010a4e:	88fb      	ldrh	r3, [r7, #6]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	2100      	movs	r1, #0
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f006 f903 	bl	8016c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3710      	adds	r7, #16
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2204      	movs	r2, #4
 8010a70:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010a74:	2300      	movs	r3, #0
 8010a76:	2200      	movs	r2, #0
 8010a78:	2100      	movs	r1, #0
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f006 f8cd 	bl	8016c1a <USBD_LL_Transmit>

  return USBD_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3708      	adds	r7, #8
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b082      	sub	sp, #8
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2205      	movs	r2, #5
 8010a96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f006 f8dd 	bl	8016c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010aa6:	2300      	movs	r3, #0
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	4a08      	ldr	r2, [pc, #32]	; (8010ae0 <disk_status+0x30>)
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	79fa      	ldrb	r2, [r7, #7]
 8010ac8:	4905      	ldr	r1, [pc, #20]	; (8010ae0 <disk_status+0x30>)
 8010aca:	440a      	add	r2, r1
 8010acc:	7a12      	ldrb	r2, [r2, #8]
 8010ace:	4610      	mov	r0, r2
 8010ad0:	4798      	blx	r3
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	200003d0 	.word	0x200003d0

08010ae4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	4603      	mov	r3, r0
 8010aec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010aee:	2300      	movs	r3, #0
 8010af0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010af2:	79fb      	ldrb	r3, [r7, #7]
 8010af4:	4a0d      	ldr	r2, [pc, #52]	; (8010b2c <disk_initialize+0x48>)
 8010af6:	5cd3      	ldrb	r3, [r2, r3]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d111      	bne.n	8010b20 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	4a0b      	ldr	r2, [pc, #44]	; (8010b2c <disk_initialize+0x48>)
 8010b00:	2101      	movs	r1, #1
 8010b02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010b04:	79fb      	ldrb	r3, [r7, #7]
 8010b06:	4a09      	ldr	r2, [pc, #36]	; (8010b2c <disk_initialize+0x48>)
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	4413      	add	r3, r2
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	79fa      	ldrb	r2, [r7, #7]
 8010b12:	4906      	ldr	r1, [pc, #24]	; (8010b2c <disk_initialize+0x48>)
 8010b14:	440a      	add	r2, r1
 8010b16:	7a12      	ldrb	r2, [r2, #8]
 8010b18:	4610      	mov	r0, r2
 8010b1a:	4798      	blx	r3
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	200003d0 	.word	0x200003d0

08010b30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010b30:	b590      	push	{r4, r7, lr}
 8010b32:	b087      	sub	sp, #28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60b9      	str	r1, [r7, #8]
 8010b38:	607a      	str	r2, [r7, #4]
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010b40:	7bfb      	ldrb	r3, [r7, #15]
 8010b42:	4a0a      	ldr	r2, [pc, #40]	; (8010b6c <disk_read+0x3c>)
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	4413      	add	r3, r2
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	689c      	ldr	r4, [r3, #8]
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
 8010b4e:	4a07      	ldr	r2, [pc, #28]	; (8010b6c <disk_read+0x3c>)
 8010b50:	4413      	add	r3, r2
 8010b52:	7a18      	ldrb	r0, [r3, #8]
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	68b9      	ldr	r1, [r7, #8]
 8010b5a:	47a0      	blx	r4
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	371c      	adds	r7, #28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	200003d0 	.word	0x200003d0

08010b70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60b9      	str	r1, [r7, #8]
 8010b78:	607a      	str	r2, [r7, #4]
 8010b7a:	603b      	str	r3, [r7, #0]
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	4a0a      	ldr	r2, [pc, #40]	; (8010bac <disk_write+0x3c>)
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	4413      	add	r3, r2
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	68dc      	ldr	r4, [r3, #12]
 8010b8c:	7bfb      	ldrb	r3, [r7, #15]
 8010b8e:	4a07      	ldr	r2, [pc, #28]	; (8010bac <disk_write+0x3c>)
 8010b90:	4413      	add	r3, r2
 8010b92:	7a18      	ldrb	r0, [r3, #8]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	68b9      	ldr	r1, [r7, #8]
 8010b9a:	47a0      	blx	r4
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	371c      	adds	r7, #28
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd90      	pop	{r4, r7, pc}
 8010baa:	bf00      	nop
 8010bac:	200003d0 	.word	0x200003d0

08010bb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	603a      	str	r2, [r7, #0]
 8010bba:	71fb      	strb	r3, [r7, #7]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	4a09      	ldr	r2, [pc, #36]	; (8010be8 <disk_ioctl+0x38>)
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	79fa      	ldrb	r2, [r7, #7]
 8010bce:	4906      	ldr	r1, [pc, #24]	; (8010be8 <disk_ioctl+0x38>)
 8010bd0:	440a      	add	r2, r1
 8010bd2:	7a10      	ldrb	r0, [r2, #8]
 8010bd4:	79b9      	ldrb	r1, [r7, #6]
 8010bd6:	683a      	ldr	r2, [r7, #0]
 8010bd8:	4798      	blx	r3
 8010bda:	4603      	mov	r3, r0
 8010bdc:	73fb      	strb	r3, [r7, #15]
  return res;
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	200003d0 	.word	0x200003d0

08010bec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010bec:	b480      	push	{r7}
 8010bee:	b085      	sub	sp, #20
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010bfc:	89fb      	ldrh	r3, [r7, #14]
 8010bfe:	021b      	lsls	r3, r3, #8
 8010c00:	b21a      	sxth	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	b21b      	sxth	r3, r3
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	b21b      	sxth	r3, r3
 8010c0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3714      	adds	r7, #20
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3303      	adds	r3, #3
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	021b      	lsls	r3, r3, #8
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	3202      	adds	r2, #2
 8010c34:	7812      	ldrb	r2, [r2, #0]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	021b      	lsls	r3, r3, #8
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	3201      	adds	r2, #1
 8010c42:	7812      	ldrb	r2, [r2, #0]
 8010c44:	4313      	orrs	r3, r2
 8010c46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	021b      	lsls	r3, r3, #8
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	7812      	ldrb	r2, [r2, #0]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	60fb      	str	r3, [r7, #12]
	return rv;
 8010c54:	68fb      	ldr	r3, [r7, #12]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3714      	adds	r7, #20
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010c62:	b480      	push	{r7}
 8010c64:	b083      	sub	sp, #12
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	887a      	ldrh	r2, [r7, #2]
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	701a      	strb	r2, [r3, #0]
 8010c7a:	887b      	ldrh	r3, [r7, #2]
 8010c7c:	0a1b      	lsrs	r3, r3, #8
 8010c7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	607a      	str	r2, [r7, #4]
 8010c86:	887a      	ldrh	r2, [r7, #2]
 8010c88:	b2d2      	uxtb	r2, r2
 8010c8a:	701a      	strb	r2, [r3, #0]
}
 8010c8c:	bf00      	nop
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	1c5a      	adds	r2, r3, #1
 8010ca6:	607a      	str	r2, [r7, #4]
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	b2d2      	uxtb	r2, r2
 8010cac:	701a      	strb	r2, [r3, #0]
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	0a1b      	lsrs	r3, r3, #8
 8010cb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	1c5a      	adds	r2, r3, #1
 8010cb8:	607a      	str	r2, [r7, #4]
 8010cba:	683a      	ldr	r2, [r7, #0]
 8010cbc:	b2d2      	uxtb	r2, r2
 8010cbe:	701a      	strb	r2, [r3, #0]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	0a1b      	lsrs	r3, r3, #8
 8010cc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	607a      	str	r2, [r7, #4]
 8010ccc:	683a      	ldr	r2, [r7, #0]
 8010cce:	b2d2      	uxtb	r2, r2
 8010cd0:	701a      	strb	r2, [r3, #0]
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	0a1b      	lsrs	r3, r3, #8
 8010cd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	1c5a      	adds	r2, r3, #1
 8010cdc:	607a      	str	r2, [r7, #4]
 8010cde:	683a      	ldr	r2, [r7, #0]
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	701a      	strb	r2, [r3, #0]
}
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010cf0:	b480      	push	{r7}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00d      	beq.n	8010d26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010d0a:	693a      	ldr	r2, [r7, #16]
 8010d0c:	1c53      	adds	r3, r2, #1
 8010d0e:	613b      	str	r3, [r7, #16]
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	1c59      	adds	r1, r3, #1
 8010d14:	6179      	str	r1, [r7, #20]
 8010d16:	7812      	ldrb	r2, [r2, #0]
 8010d18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3b01      	subs	r3, #1
 8010d1e:	607b      	str	r3, [r7, #4]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1f1      	bne.n	8010d0a <mem_cpy+0x1a>
	}
}
 8010d26:	bf00      	nop
 8010d28:	371c      	adds	r7, #28
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010d32:	b480      	push	{r7}
 8010d34:	b087      	sub	sp, #28
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	60f8      	str	r0, [r7, #12]
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	617a      	str	r2, [r7, #20]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	b2d2      	uxtb	r2, r2
 8010d4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	607b      	str	r3, [r7, #4]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1f3      	bne.n	8010d42 <mem_set+0x10>
}
 8010d5a:	bf00      	nop
 8010d5c:	371c      	adds	r7, #28
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr

08010d66 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010d66:	b480      	push	{r7}
 8010d68:	b089      	sub	sp, #36	; 0x24
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	60f8      	str	r0, [r7, #12]
 8010d6e:	60b9      	str	r1, [r7, #8]
 8010d70:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	61fb      	str	r3, [r7, #28]
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	61fa      	str	r2, [r7, #28]
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	4619      	mov	r1, r3
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	1c5a      	adds	r2, r3, #1
 8010d8c:	61ba      	str	r2, [r7, #24]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	1acb      	subs	r3, r1, r3
 8010d92:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	3b01      	subs	r3, #1
 8010d98:	607b      	str	r3, [r7, #4]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <mem_cmp+0x40>
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d0eb      	beq.n	8010d7e <mem_cmp+0x18>

	return r;
 8010da6:	697b      	ldr	r3, [r7, #20]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3724      	adds	r7, #36	; 0x24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010dbe:	e002      	b.n	8010dc6 <chk_chr+0x12>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	607b      	str	r3, [r7, #4]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d005      	beq.n	8010dda <chk_chr+0x26>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d1f2      	bne.n	8010dc0 <chk_chr+0xc>
	return *str;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	781b      	ldrb	r3, [r3, #0]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
	...

08010dec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010df6:	2300      	movs	r3, #0
 8010df8:	60bb      	str	r3, [r7, #8]
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	60fb      	str	r3, [r7, #12]
 8010dfe:	e029      	b.n	8010e54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010e00:	4a27      	ldr	r2, [pc, #156]	; (8010ea0 <chk_lock+0xb4>)
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	4413      	add	r3, r2
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d01d      	beq.n	8010e4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010e0e:	4a24      	ldr	r2, [pc, #144]	; (8010ea0 <chk_lock+0xb4>)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	011b      	lsls	r3, r3, #4
 8010e14:	4413      	add	r3, r2
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d116      	bne.n	8010e4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010e20:	4a1f      	ldr	r2, [pc, #124]	; (8010ea0 <chk_lock+0xb4>)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	011b      	lsls	r3, r3, #4
 8010e26:	4413      	add	r3, r2
 8010e28:	3304      	adds	r3, #4
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d10c      	bne.n	8010e4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010e34:	4a1a      	ldr	r2, [pc, #104]	; (8010ea0 <chk_lock+0xb4>)
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	011b      	lsls	r3, r3, #4
 8010e3a:	4413      	add	r3, r2
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d102      	bne.n	8010e4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010e48:	e007      	b.n	8010e5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	3301      	adds	r3, #1
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d9d2      	bls.n	8010e00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d109      	bne.n	8010e74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d102      	bne.n	8010e6c <chk_lock+0x80>
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	d101      	bne.n	8010e70 <chk_lock+0x84>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	e010      	b.n	8010e92 <chk_lock+0xa6>
 8010e70:	2312      	movs	r3, #18
 8010e72:	e00e      	b.n	8010e92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d108      	bne.n	8010e8c <chk_lock+0xa0>
 8010e7a:	4a09      	ldr	r2, [pc, #36]	; (8010ea0 <chk_lock+0xb4>)
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	011b      	lsls	r3, r3, #4
 8010e80:	4413      	add	r3, r2
 8010e82:	330c      	adds	r3, #12
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e8a:	d101      	bne.n	8010e90 <chk_lock+0xa4>
 8010e8c:	2310      	movs	r3, #16
 8010e8e:	e000      	b.n	8010e92 <chk_lock+0xa6>
 8010e90:	2300      	movs	r3, #0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3714      	adds	r7, #20
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	200003b0 	.word	0x200003b0

08010ea4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	607b      	str	r3, [r7, #4]
 8010eae:	e002      	b.n	8010eb6 <enq_lock+0x12>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	607b      	str	r3, [r7, #4]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d806      	bhi.n	8010eca <enq_lock+0x26>
 8010ebc:	4a09      	ldr	r2, [pc, #36]	; (8010ee4 <enq_lock+0x40>)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	011b      	lsls	r3, r3, #4
 8010ec2:	4413      	add	r3, r2
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1f2      	bne.n	8010eb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	bf14      	ite	ne
 8010ed0:	2301      	movne	r3, #1
 8010ed2:	2300      	moveq	r3, #0
 8010ed4:	b2db      	uxtb	r3, r3
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	370c      	adds	r7, #12
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	200003b0 	.word	0x200003b0

08010ee8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
 8010ef6:	e01f      	b.n	8010f38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010ef8:	4a41      	ldr	r2, [pc, #260]	; (8011000 <inc_lock+0x118>)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	011b      	lsls	r3, r3, #4
 8010efe:	4413      	add	r3, r2
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d113      	bne.n	8010f32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010f0a:	4a3d      	ldr	r2, [pc, #244]	; (8011000 <inc_lock+0x118>)
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	011b      	lsls	r3, r3, #4
 8010f10:	4413      	add	r3, r2
 8010f12:	3304      	adds	r3, #4
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d109      	bne.n	8010f32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010f1e:	4a38      	ldr	r2, [pc, #224]	; (8011000 <inc_lock+0x118>)
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	011b      	lsls	r3, r3, #4
 8010f24:	4413      	add	r3, r2
 8010f26:	3308      	adds	r3, #8
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d006      	beq.n	8010f40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3301      	adds	r3, #1
 8010f36:	60fb      	str	r3, [r7, #12]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d9dc      	bls.n	8010ef8 <inc_lock+0x10>
 8010f3e:	e000      	b.n	8010f42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010f40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2b02      	cmp	r3, #2
 8010f46:	d132      	bne.n	8010fae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	60fb      	str	r3, [r7, #12]
 8010f4c:	e002      	b.n	8010f54 <inc_lock+0x6c>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	3301      	adds	r3, #1
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d806      	bhi.n	8010f68 <inc_lock+0x80>
 8010f5a:	4a29      	ldr	r2, [pc, #164]	; (8011000 <inc_lock+0x118>)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	011b      	lsls	r3, r3, #4
 8010f60:	4413      	add	r3, r2
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1f2      	bne.n	8010f4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b02      	cmp	r3, #2
 8010f6c:	d101      	bne.n	8010f72 <inc_lock+0x8a>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	e040      	b.n	8010ff4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	4922      	ldr	r1, [pc, #136]	; (8011000 <inc_lock+0x118>)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	011b      	lsls	r3, r3, #4
 8010f7c:	440b      	add	r3, r1
 8010f7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	689a      	ldr	r2, [r3, #8]
 8010f84:	491e      	ldr	r1, [pc, #120]	; (8011000 <inc_lock+0x118>)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	011b      	lsls	r3, r3, #4
 8010f8a:	440b      	add	r3, r1
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	695a      	ldr	r2, [r3, #20]
 8010f94:	491a      	ldr	r1, [pc, #104]	; (8011000 <inc_lock+0x118>)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	011b      	lsls	r3, r3, #4
 8010f9a:	440b      	add	r3, r1
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010fa0:	4a17      	ldr	r2, [pc, #92]	; (8011000 <inc_lock+0x118>)
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	011b      	lsls	r3, r3, #4
 8010fa6:	4413      	add	r3, r2
 8010fa8:	330c      	adds	r3, #12
 8010faa:	2200      	movs	r2, #0
 8010fac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d009      	beq.n	8010fc8 <inc_lock+0xe0>
 8010fb4:	4a12      	ldr	r2, [pc, #72]	; (8011000 <inc_lock+0x118>)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	011b      	lsls	r3, r3, #4
 8010fba:	4413      	add	r3, r2
 8010fbc:	330c      	adds	r3, #12
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <inc_lock+0xe0>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e015      	b.n	8010ff4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d108      	bne.n	8010fe0 <inc_lock+0xf8>
 8010fce:	4a0c      	ldr	r2, [pc, #48]	; (8011000 <inc_lock+0x118>)
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	011b      	lsls	r3, r3, #4
 8010fd4:	4413      	add	r3, r2
 8010fd6:	330c      	adds	r3, #12
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	e001      	b.n	8010fe4 <inc_lock+0xfc>
 8010fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010fe4:	4906      	ldr	r1, [pc, #24]	; (8011000 <inc_lock+0x118>)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	011b      	lsls	r3, r3, #4
 8010fea:	440b      	add	r3, r1
 8010fec:	330c      	adds	r3, #12
 8010fee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	3301      	adds	r3, #1
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr
 8011000:	200003b0 	.word	0x200003b0

08011004 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3b01      	subs	r3, #1
 8011010:	607b      	str	r3, [r7, #4]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d825      	bhi.n	8011064 <dec_lock+0x60>
		n = Files[i].ctr;
 8011018:	4a17      	ldr	r2, [pc, #92]	; (8011078 <dec_lock+0x74>)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	011b      	lsls	r3, r3, #4
 801101e:	4413      	add	r3, r2
 8011020:	330c      	adds	r3, #12
 8011022:	881b      	ldrh	r3, [r3, #0]
 8011024:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011026:	89fb      	ldrh	r3, [r7, #14]
 8011028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801102c:	d101      	bne.n	8011032 <dec_lock+0x2e>
 801102e:	2300      	movs	r3, #0
 8011030:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011032:	89fb      	ldrh	r3, [r7, #14]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <dec_lock+0x3a>
 8011038:	89fb      	ldrh	r3, [r7, #14]
 801103a:	3b01      	subs	r3, #1
 801103c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801103e:	4a0e      	ldr	r2, [pc, #56]	; (8011078 <dec_lock+0x74>)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	011b      	lsls	r3, r3, #4
 8011044:	4413      	add	r3, r2
 8011046:	330c      	adds	r3, #12
 8011048:	89fa      	ldrh	r2, [r7, #14]
 801104a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801104c:	89fb      	ldrh	r3, [r7, #14]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d105      	bne.n	801105e <dec_lock+0x5a>
 8011052:	4a09      	ldr	r2, [pc, #36]	; (8011078 <dec_lock+0x74>)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	011b      	lsls	r3, r3, #4
 8011058:	4413      	add	r3, r2
 801105a:	2200      	movs	r2, #0
 801105c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801105e:	2300      	movs	r3, #0
 8011060:	737b      	strb	r3, [r7, #13]
 8011062:	e001      	b.n	8011068 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011064:	2302      	movs	r3, #2
 8011066:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011068:	7b7b      	ldrb	r3, [r7, #13]
}
 801106a:	4618      	mov	r0, r3
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	200003b0 	.word	0x200003b0

0801107c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801107c:	b480      	push	{r7}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011084:	2300      	movs	r3, #0
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	e010      	b.n	80110ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801108a:	4a0d      	ldr	r2, [pc, #52]	; (80110c0 <clear_lock+0x44>)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	011b      	lsls	r3, r3, #4
 8011090:	4413      	add	r3, r2
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	429a      	cmp	r2, r3
 8011098:	d105      	bne.n	80110a6 <clear_lock+0x2a>
 801109a:	4a09      	ldr	r2, [pc, #36]	; (80110c0 <clear_lock+0x44>)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	011b      	lsls	r3, r3, #4
 80110a0:	4413      	add	r3, r2
 80110a2:	2200      	movs	r2, #0
 80110a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	3301      	adds	r3, #1
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d9eb      	bls.n	801108a <clear_lock+0xe>
	}
}
 80110b2:	bf00      	nop
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	200003b0 	.word	0x200003b0

080110c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b086      	sub	sp, #24
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	78db      	ldrb	r3, [r3, #3]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d034      	beq.n	8011142 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7858      	ldrb	r0, [r3, #1]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80110e8:	2301      	movs	r3, #1
 80110ea:	697a      	ldr	r2, [r7, #20]
 80110ec:	f7ff fd40 	bl	8010b70 <disk_write>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	73fb      	strb	r3, [r7, #15]
 80110fa:	e022      	b.n	8011142 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2200      	movs	r2, #0
 8011100:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011106:	697a      	ldr	r2, [r7, #20]
 8011108:	1ad2      	subs	r2, r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	69db      	ldr	r3, [r3, #28]
 801110e:	429a      	cmp	r2, r3
 8011110:	d217      	bcs.n	8011142 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	789b      	ldrb	r3, [r3, #2]
 8011116:	613b      	str	r3, [r7, #16]
 8011118:	e010      	b.n	801113c <sync_window+0x78>
					wsect += fs->fsize;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	69db      	ldr	r3, [r3, #28]
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	4413      	add	r3, r2
 8011122:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	7858      	ldrb	r0, [r3, #1]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801112e:	2301      	movs	r3, #1
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	f7ff fd1d 	bl	8010b70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	3b01      	subs	r3, #1
 801113a:	613b      	str	r3, [r7, #16]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b01      	cmp	r3, #1
 8011140:	d8eb      	bhi.n	801111a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011142:	7bfb      	ldrb	r3, [r7, #15]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3718      	adds	r7, #24
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011156:	2300      	movs	r3, #0
 8011158:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801115e:	683a      	ldr	r2, [r7, #0]
 8011160:	429a      	cmp	r2, r3
 8011162:	d01b      	beq.n	801119c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff ffad 	bl	80110c4 <sync_window>
 801116a:	4603      	mov	r3, r0
 801116c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d113      	bne.n	801119c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	7858      	ldrb	r0, [r3, #1]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801117e:	2301      	movs	r3, #1
 8011180:	683a      	ldr	r2, [r7, #0]
 8011182:	f7ff fcd5 	bl	8010b30 <disk_read>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d004      	beq.n	8011196 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
 8011190:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011192:	2301      	movs	r3, #1
 8011194:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801119c:	7bfb      	ldrb	r3, [r7, #15]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f7ff ff87 	bl	80110c4 <sync_window>
 80111b6:	4603      	mov	r3, r0
 80111b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80111ba:	7bfb      	ldrb	r3, [r7, #15]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d159      	bne.n	8011274 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	2b03      	cmp	r3, #3
 80111c6:	d149      	bne.n	801125c <sync_fs+0xb4>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	791b      	ldrb	r3, [r3, #4]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d145      	bne.n	801125c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	461a      	mov	r2, r3
 80111dc:	2100      	movs	r1, #0
 80111de:	f7ff fda8 	bl	8010d32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3334      	adds	r3, #52	; 0x34
 80111e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80111ea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff fd37 	bl	8010c62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3334      	adds	r3, #52	; 0x34
 80111f8:	4921      	ldr	r1, [pc, #132]	; (8011280 <sync_fs+0xd8>)
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff fd4c 	bl	8010c98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3334      	adds	r3, #52	; 0x34
 8011204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011208:	491e      	ldr	r1, [pc, #120]	; (8011284 <sync_fs+0xdc>)
 801120a:	4618      	mov	r0, r3
 801120c:	f7ff fd44 	bl	8010c98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	3334      	adds	r3, #52	; 0x34
 8011214:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	695b      	ldr	r3, [r3, #20]
 801121c:	4619      	mov	r1, r3
 801121e:	4610      	mov	r0, r2
 8011220:	f7ff fd3a 	bl	8010c98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3334      	adds	r3, #52	; 0x34
 8011228:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f7ff fd30 	bl	8010c98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6a1b      	ldr	r3, [r3, #32]
 801123c:	1c5a      	adds	r2, r3, #1
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	7858      	ldrb	r0, [r3, #1]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011250:	2301      	movs	r3, #1
 8011252:	f7ff fc8d 	bl	8010b70 <disk_write>
			fs->fsi_flag = 0;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	785b      	ldrb	r3, [r3, #1]
 8011260:	2200      	movs	r2, #0
 8011262:	2100      	movs	r1, #0
 8011264:	4618      	mov	r0, r3
 8011266:	f7ff fca3 	bl	8010bb0 <disk_ioctl>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d001      	beq.n	8011274 <sync_fs+0xcc>
 8011270:	2301      	movs	r3, #1
 8011272:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011274:	7bfb      	ldrb	r3, [r7, #15]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	41615252 	.word	0x41615252
 8011284:	61417272 	.word	0x61417272

08011288 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	3b02      	subs	r3, #2
 8011296:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	3b02      	subs	r3, #2
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d301      	bcc.n	80112a8 <clust2sect+0x20>
 80112a4:	2300      	movs	r3, #0
 80112a6:	e008      	b.n	80112ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	895b      	ldrh	r3, [r3, #10]
 80112ac:	461a      	mov	r2, r3
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	fb03 f202 	mul.w	r2, r3, r2
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b8:	4413      	add	r3, r2
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b086      	sub	sp, #24
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
 80112ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d904      	bls.n	80112e6 <get_fat+0x20>
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	683a      	ldr	r2, [r7, #0]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d302      	bcc.n	80112ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80112e6:	2301      	movs	r3, #1
 80112e8:	617b      	str	r3, [r7, #20]
 80112ea:	e0b7      	b.n	801145c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80112ec:	f04f 33ff 	mov.w	r3, #4294967295
 80112f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d05a      	beq.n	80113b0 <get_fat+0xea>
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d07d      	beq.n	80113fa <get_fat+0x134>
 80112fe:	2b01      	cmp	r3, #1
 8011300:	f040 80a2 	bne.w	8011448 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	085b      	lsrs	r3, r3, #1
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	4413      	add	r3, r2
 8011310:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	899b      	ldrh	r3, [r3, #12]
 801131a:	4619      	mov	r1, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011322:	4413      	add	r3, r2
 8011324:	4619      	mov	r1, r3
 8011326:	6938      	ldr	r0, [r7, #16]
 8011328:	f7ff ff10 	bl	801114c <move_window>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	f040 808d 	bne.w	801144e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	1c5a      	adds	r2, r3, #1
 8011338:	60fa      	str	r2, [r7, #12]
 801133a:	693a      	ldr	r2, [r7, #16]
 801133c:	8992      	ldrh	r2, [r2, #12]
 801133e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011342:	fb02 f201 	mul.w	r2, r2, r1
 8011346:	1a9b      	subs	r3, r3, r2
 8011348:	693a      	ldr	r2, [r7, #16]
 801134a:	4413      	add	r3, r2
 801134c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011350:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	899b      	ldrh	r3, [r3, #12]
 801135a:	4619      	mov	r1, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011362:	4413      	add	r3, r2
 8011364:	4619      	mov	r1, r3
 8011366:	6938      	ldr	r0, [r7, #16]
 8011368:	f7ff fef0 	bl	801114c <move_window>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d16f      	bne.n	8011452 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	461a      	mov	r2, r3
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	fbb3 f1f2 	udiv	r1, r3, r2
 801137e:	fb02 f201 	mul.w	r2, r2, r1
 8011382:	1a9b      	subs	r3, r3, r2
 8011384:	693a      	ldr	r2, [r7, #16]
 8011386:	4413      	add	r3, r2
 8011388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801138c:	021b      	lsls	r3, r3, #8
 801138e:	461a      	mov	r2, r3
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	4313      	orrs	r3, r2
 8011394:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <get_fat+0xe0>
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	091b      	lsrs	r3, r3, #4
 80113a4:	e002      	b.n	80113ac <get_fat+0xe6>
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80113ac:	617b      	str	r3, [r7, #20]
			break;
 80113ae:	e055      	b.n	801145c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	899b      	ldrh	r3, [r3, #12]
 80113b8:	085b      	lsrs	r3, r3, #1
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	4619      	mov	r1, r3
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80113c4:	4413      	add	r3, r2
 80113c6:	4619      	mov	r1, r3
 80113c8:	6938      	ldr	r0, [r7, #16]
 80113ca:	f7ff febf 	bl	801114c <move_window>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d140      	bne.n	8011456 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	693a      	ldr	r2, [r7, #16]
 80113e0:	8992      	ldrh	r2, [r2, #12]
 80113e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80113e6:	fb02 f200 	mul.w	r2, r2, r0
 80113ea:	1a9b      	subs	r3, r3, r2
 80113ec:	440b      	add	r3, r1
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff fbfc 	bl	8010bec <ld_word>
 80113f4:	4603      	mov	r3, r0
 80113f6:	617b      	str	r3, [r7, #20]
			break;
 80113f8:	e030      	b.n	801145c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	899b      	ldrh	r3, [r3, #12]
 8011402:	089b      	lsrs	r3, r3, #2
 8011404:	b29b      	uxth	r3, r3
 8011406:	4619      	mov	r1, r3
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	fbb3 f3f1 	udiv	r3, r3, r1
 801140e:	4413      	add	r3, r2
 8011410:	4619      	mov	r1, r3
 8011412:	6938      	ldr	r0, [r7, #16]
 8011414:	f7ff fe9a 	bl	801114c <move_window>
 8011418:	4603      	mov	r3, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d11d      	bne.n	801145a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	693a      	ldr	r2, [r7, #16]
 801142a:	8992      	ldrh	r2, [r2, #12]
 801142c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011430:	fb02 f200 	mul.w	r2, r2, r0
 8011434:	1a9b      	subs	r3, r3, r2
 8011436:	440b      	add	r3, r1
 8011438:	4618      	mov	r0, r3
 801143a:	f7ff fbef 	bl	8010c1c <ld_dword>
 801143e:	4603      	mov	r3, r0
 8011440:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011444:	617b      	str	r3, [r7, #20]
			break;
 8011446:	e009      	b.n	801145c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011448:	2301      	movs	r3, #1
 801144a:	617b      	str	r3, [r7, #20]
 801144c:	e006      	b.n	801145c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801144e:	bf00      	nop
 8011450:	e004      	b.n	801145c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011452:	bf00      	nop
 8011454:	e002      	b.n	801145c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011456:	bf00      	nop
 8011458:	e000      	b.n	801145c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801145a:	bf00      	nop
		}
	}

	return val;
 801145c:	697b      	ldr	r3, [r7, #20]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011466:	b590      	push	{r4, r7, lr}
 8011468:	b089      	sub	sp, #36	; 0x24
 801146a:	af00      	add	r7, sp, #0
 801146c:	60f8      	str	r0, [r7, #12]
 801146e:	60b9      	str	r1, [r7, #8]
 8011470:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011472:	2302      	movs	r3, #2
 8011474:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b01      	cmp	r3, #1
 801147a:	f240 8106 	bls.w	801168a <put_fat+0x224>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	699b      	ldr	r3, [r3, #24]
 8011482:	68ba      	ldr	r2, [r7, #8]
 8011484:	429a      	cmp	r2, r3
 8011486:	f080 8100 	bcs.w	801168a <put_fat+0x224>
		switch (fs->fs_type) {
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b02      	cmp	r3, #2
 8011490:	f000 8088 	beq.w	80115a4 <put_fat+0x13e>
 8011494:	2b03      	cmp	r3, #3
 8011496:	f000 80b0 	beq.w	80115fa <put_fat+0x194>
 801149a:	2b01      	cmp	r3, #1
 801149c:	f040 80f5 	bne.w	801168a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	61bb      	str	r3, [r7, #24]
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	085b      	lsrs	r3, r3, #1
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	4413      	add	r3, r2
 80114ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	899b      	ldrh	r3, [r3, #12]
 80114b6:	4619      	mov	r1, r3
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80114be:	4413      	add	r3, r2
 80114c0:	4619      	mov	r1, r3
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f7ff fe42 	bl	801114c <move_window>
 80114c8:	4603      	mov	r3, r0
 80114ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114cc:	7ffb      	ldrb	r3, [r7, #31]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	f040 80d4 	bne.w	801167c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	1c5a      	adds	r2, r3, #1
 80114de:	61ba      	str	r2, [r7, #24]
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	8992      	ldrh	r2, [r2, #12]
 80114e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80114e8:	fb02 f200 	mul.w	r2, r2, r0
 80114ec:	1a9b      	subs	r3, r3, r2
 80114ee:	440b      	add	r3, r1
 80114f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	f003 0301 	and.w	r3, r3, #1
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00d      	beq.n	8011518 <put_fat+0xb2>
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	b25b      	sxtb	r3, r3
 8011502:	f003 030f 	and.w	r3, r3, #15
 8011506:	b25a      	sxtb	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	b2db      	uxtb	r3, r3
 801150c:	011b      	lsls	r3, r3, #4
 801150e:	b25b      	sxtb	r3, r3
 8011510:	4313      	orrs	r3, r2
 8011512:	b25b      	sxtb	r3, r3
 8011514:	b2db      	uxtb	r3, r3
 8011516:	e001      	b.n	801151c <put_fat+0xb6>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	b2db      	uxtb	r3, r3
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2201      	movs	r2, #1
 8011524:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	899b      	ldrh	r3, [r3, #12]
 801152e:	4619      	mov	r1, r3
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	fbb3 f3f1 	udiv	r3, r3, r1
 8011536:	4413      	add	r3, r2
 8011538:	4619      	mov	r1, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7ff fe06 	bl	801114c <move_window>
 8011540:	4603      	mov	r3, r0
 8011542:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011544:	7ffb      	ldrb	r3, [r7, #31]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f040 809a 	bne.w	8011680 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	899b      	ldrh	r3, [r3, #12]
 8011556:	461a      	mov	r2, r3
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	fbb3 f0f2 	udiv	r0, r3, r2
 801155e:	fb02 f200 	mul.w	r2, r2, r0
 8011562:	1a9b      	subs	r3, r3, r2
 8011564:	440b      	add	r3, r1
 8011566:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	f003 0301 	and.w	r3, r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	d003      	beq.n	801157a <put_fat+0x114>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	091b      	lsrs	r3, r3, #4
 8011576:	b2db      	uxtb	r3, r3
 8011578:	e00e      	b.n	8011598 <put_fat+0x132>
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	b25b      	sxtb	r3, r3
 8011580:	f023 030f 	bic.w	r3, r3, #15
 8011584:	b25a      	sxtb	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	0a1b      	lsrs	r3, r3, #8
 801158a:	b25b      	sxtb	r3, r3
 801158c:	f003 030f 	and.w	r3, r3, #15
 8011590:	b25b      	sxtb	r3, r3
 8011592:	4313      	orrs	r3, r2
 8011594:	b25b      	sxtb	r3, r3
 8011596:	b2db      	uxtb	r3, r3
 8011598:	697a      	ldr	r2, [r7, #20]
 801159a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2201      	movs	r2, #1
 80115a0:	70da      	strb	r2, [r3, #3]
			break;
 80115a2:	e072      	b.n	801168a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	899b      	ldrh	r3, [r3, #12]
 80115ac:	085b      	lsrs	r3, r3, #1
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	4619      	mov	r1, r3
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80115b8:	4413      	add	r3, r2
 80115ba:	4619      	mov	r1, r3
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f7ff fdc5 	bl	801114c <move_window>
 80115c2:	4603      	mov	r3, r0
 80115c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80115c6:	7ffb      	ldrb	r3, [r7, #31]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d15b      	bne.n	8011684 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	005b      	lsls	r3, r3, #1
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	8992      	ldrh	r2, [r2, #12]
 80115da:	fbb3 f0f2 	udiv	r0, r3, r2
 80115de:	fb02 f200 	mul.w	r2, r2, r0
 80115e2:	1a9b      	subs	r3, r3, r2
 80115e4:	440b      	add	r3, r1
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	b292      	uxth	r2, r2
 80115ea:	4611      	mov	r1, r2
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7ff fb38 	bl	8010c62 <st_word>
			fs->wflag = 1;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2201      	movs	r2, #1
 80115f6:	70da      	strb	r2, [r3, #3]
			break;
 80115f8:	e047      	b.n	801168a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	899b      	ldrh	r3, [r3, #12]
 8011602:	089b      	lsrs	r3, r3, #2
 8011604:	b29b      	uxth	r3, r3
 8011606:	4619      	mov	r1, r3
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	fbb3 f3f1 	udiv	r3, r3, r1
 801160e:	4413      	add	r3, r2
 8011610:	4619      	mov	r1, r3
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f7ff fd9a 	bl	801114c <move_window>
 8011618:	4603      	mov	r3, r0
 801161a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801161c:	7ffb      	ldrb	r3, [r7, #31]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d132      	bne.n	8011688 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	68fa      	ldr	r2, [r7, #12]
 8011634:	8992      	ldrh	r2, [r2, #12]
 8011636:	fbb3 f0f2 	udiv	r0, r3, r2
 801163a:	fb02 f200 	mul.w	r2, r2, r0
 801163e:	1a9b      	subs	r3, r3, r2
 8011640:	440b      	add	r3, r1
 8011642:	4618      	mov	r0, r3
 8011644:	f7ff faea 	bl	8010c1c <ld_dword>
 8011648:	4603      	mov	r3, r0
 801164a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801164e:	4323      	orrs	r3, r4
 8011650:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	8992      	ldrh	r2, [r2, #12]
 8011660:	fbb3 f0f2 	udiv	r0, r3, r2
 8011664:	fb02 f200 	mul.w	r2, r2, r0
 8011668:	1a9b      	subs	r3, r3, r2
 801166a:	440b      	add	r3, r1
 801166c:	6879      	ldr	r1, [r7, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	f7ff fb12 	bl	8010c98 <st_dword>
			fs->wflag = 1;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2201      	movs	r2, #1
 8011678:	70da      	strb	r2, [r3, #3]
			break;
 801167a:	e006      	b.n	801168a <put_fat+0x224>
			if (res != FR_OK) break;
 801167c:	bf00      	nop
 801167e:	e004      	b.n	801168a <put_fat+0x224>
			if (res != FR_OK) break;
 8011680:	bf00      	nop
 8011682:	e002      	b.n	801168a <put_fat+0x224>
			if (res != FR_OK) break;
 8011684:	bf00      	nop
 8011686:	e000      	b.n	801168a <put_fat+0x224>
			if (res != FR_OK) break;
 8011688:	bf00      	nop
		}
	}
	return res;
 801168a:	7ffb      	ldrb	r3, [r7, #31]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3724      	adds	r7, #36	; 0x24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd90      	pop	{r4, r7, pc}

08011694 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d904      	bls.n	80116ba <remove_chain+0x26>
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	699b      	ldr	r3, [r3, #24]
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d301      	bcc.n	80116be <remove_chain+0x2a>
 80116ba:	2302      	movs	r3, #2
 80116bc:	e04b      	b.n	8011756 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00c      	beq.n	80116de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80116c4:	f04f 32ff 	mov.w	r2, #4294967295
 80116c8:	6879      	ldr	r1, [r7, #4]
 80116ca:	69b8      	ldr	r0, [r7, #24]
 80116cc:	f7ff fecb 	bl	8011466 <put_fat>
 80116d0:	4603      	mov	r3, r0
 80116d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80116d4:	7ffb      	ldrb	r3, [r7, #31]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d001      	beq.n	80116de <remove_chain+0x4a>
 80116da:	7ffb      	ldrb	r3, [r7, #31]
 80116dc:	e03b      	b.n	8011756 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f7ff fdf0 	bl	80112c6 <get_fat>
 80116e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d031      	beq.n	8011752 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d101      	bne.n	80116f8 <remove_chain+0x64>
 80116f4:	2302      	movs	r3, #2
 80116f6:	e02e      	b.n	8011756 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fe:	d101      	bne.n	8011704 <remove_chain+0x70>
 8011700:	2301      	movs	r3, #1
 8011702:	e028      	b.n	8011756 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011704:	2200      	movs	r2, #0
 8011706:	68b9      	ldr	r1, [r7, #8]
 8011708:	69b8      	ldr	r0, [r7, #24]
 801170a:	f7ff feac 	bl	8011466 <put_fat>
 801170e:	4603      	mov	r3, r0
 8011710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011712:	7ffb      	ldrb	r3, [r7, #31]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d001      	beq.n	801171c <remove_chain+0x88>
 8011718:	7ffb      	ldrb	r3, [r7, #31]
 801171a:	e01c      	b.n	8011756 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	695a      	ldr	r2, [r3, #20]
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	699b      	ldr	r3, [r3, #24]
 8011724:	3b02      	subs	r3, #2
 8011726:	429a      	cmp	r2, r3
 8011728:	d20b      	bcs.n	8011742 <remove_chain+0xae>
			fs->free_clst++;
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	791b      	ldrb	r3, [r3, #4]
 8011738:	f043 0301 	orr.w	r3, r3, #1
 801173c:	b2da      	uxtb	r2, r3
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	699b      	ldr	r3, [r3, #24]
 801174a:	68ba      	ldr	r2, [r7, #8]
 801174c:	429a      	cmp	r2, r3
 801174e:	d3c6      	bcc.n	80116de <remove_chain+0x4a>
 8011750:	e000      	b.n	8011754 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011752:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011754:	2300      	movs	r3, #0
}
 8011756:	4618      	mov	r0, r3
 8011758:	3720      	adds	r7, #32
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}

0801175e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801175e:	b580      	push	{r7, lr}
 8011760:	b088      	sub	sp, #32
 8011762:	af00      	add	r7, sp, #0
 8011764:	6078      	str	r0, [r7, #4]
 8011766:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d10d      	bne.n	8011790 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d004      	beq.n	801178a <create_chain+0x2c>
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	699b      	ldr	r3, [r3, #24]
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	429a      	cmp	r2, r3
 8011788:	d31b      	bcc.n	80117c2 <create_chain+0x64>
 801178a:	2301      	movs	r3, #1
 801178c:	61bb      	str	r3, [r7, #24]
 801178e:	e018      	b.n	80117c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7ff fd97 	bl	80112c6 <get_fat>
 8011798:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d801      	bhi.n	80117a4 <create_chain+0x46>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e070      	b.n	8011886 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117aa:	d101      	bne.n	80117b0 <create_chain+0x52>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	e06a      	b.n	8011886 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	699b      	ldr	r3, [r3, #24]
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d201      	bcs.n	80117be <create_chain+0x60>
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	e063      	b.n	8011886 <create_chain+0x128>
		scl = clst;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	3301      	adds	r3, #1
 80117ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	699b      	ldr	r3, [r3, #24]
 80117d0:	69fa      	ldr	r2, [r7, #28]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d307      	bcc.n	80117e6 <create_chain+0x88>
				ncl = 2;
 80117d6:	2302      	movs	r3, #2
 80117d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80117da:	69fa      	ldr	r2, [r7, #28]
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d901      	bls.n	80117e6 <create_chain+0x88>
 80117e2:	2300      	movs	r3, #0
 80117e4:	e04f      	b.n	8011886 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80117e6:	69f9      	ldr	r1, [r7, #28]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7ff fd6c 	bl	80112c6 <get_fat>
 80117ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00e      	beq.n	8011814 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d003      	beq.n	8011804 <create_chain+0xa6>
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011802:	d101      	bne.n	8011808 <create_chain+0xaa>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	e03e      	b.n	8011886 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011808:	69fa      	ldr	r2, [r7, #28]
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	429a      	cmp	r2, r3
 801180e:	d1da      	bne.n	80117c6 <create_chain+0x68>
 8011810:	2300      	movs	r3, #0
 8011812:	e038      	b.n	8011886 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011814:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011816:	f04f 32ff 	mov.w	r2, #4294967295
 801181a:	69f9      	ldr	r1, [r7, #28]
 801181c:	6938      	ldr	r0, [r7, #16]
 801181e:	f7ff fe22 	bl	8011466 <put_fat>
 8011822:	4603      	mov	r3, r0
 8011824:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011826:	7dfb      	ldrb	r3, [r7, #23]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d109      	bne.n	8011840 <create_chain+0xe2>
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d006      	beq.n	8011840 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011832:	69fa      	ldr	r2, [r7, #28]
 8011834:	6839      	ldr	r1, [r7, #0]
 8011836:	6938      	ldr	r0, [r7, #16]
 8011838:	f7ff fe15 	bl	8011466 <put_fat>
 801183c:	4603      	mov	r3, r0
 801183e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011840:	7dfb      	ldrb	r3, [r7, #23]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d116      	bne.n	8011874 <create_chain+0x116>
		fs->last_clst = ncl;
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	69fa      	ldr	r2, [r7, #28]
 801184a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	695a      	ldr	r2, [r3, #20]
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	699b      	ldr	r3, [r3, #24]
 8011854:	3b02      	subs	r3, #2
 8011856:	429a      	cmp	r2, r3
 8011858:	d804      	bhi.n	8011864 <create_chain+0x106>
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	695b      	ldr	r3, [r3, #20]
 801185e:	1e5a      	subs	r2, r3, #1
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	791b      	ldrb	r3, [r3, #4]
 8011868:	f043 0301 	orr.w	r3, r3, #1
 801186c:	b2da      	uxtb	r2, r3
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	711a      	strb	r2, [r3, #4]
 8011872:	e007      	b.n	8011884 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011874:	7dfb      	ldrb	r3, [r7, #23]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d102      	bne.n	8011880 <create_chain+0x122>
 801187a:	f04f 33ff 	mov.w	r3, #4294967295
 801187e:	e000      	b.n	8011882 <create_chain+0x124>
 8011880:	2301      	movs	r3, #1
 8011882:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011884:	69fb      	ldr	r3, [r7, #28]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3720      	adds	r7, #32
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801188e:	b480      	push	{r7}
 8011890:	b087      	sub	sp, #28
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a2:	3304      	adds	r3, #4
 80118a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	899b      	ldrh	r3, [r3, #12]
 80118aa:	461a      	mov	r2, r3
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	8952      	ldrh	r2, [r2, #10]
 80118b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	1d1a      	adds	r2, r3, #4
 80118c0:	613a      	str	r2, [r7, #16]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d101      	bne.n	80118d0 <clmt_clust+0x42>
 80118cc:	2300      	movs	r3, #0
 80118ce:	e010      	b.n	80118f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d307      	bcc.n	80118e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80118d8:	697a      	ldr	r2, [r7, #20]
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	617b      	str	r3, [r7, #20]
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	3304      	adds	r3, #4
 80118e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80118e6:	e7e9      	b.n	80118bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80118e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	4413      	add	r3, r2
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	371c      	adds	r7, #28
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b086      	sub	sp, #24
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
 8011906:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011914:	d204      	bcs.n	8011920 <dir_sdi+0x22>
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	f003 031f 	and.w	r3, r3, #31
 801191c:	2b00      	cmp	r3, #0
 801191e:	d001      	beq.n	8011924 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011920:	2302      	movs	r3, #2
 8011922:	e071      	b.n	8011a08 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	683a      	ldr	r2, [r7, #0]
 8011928:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d106      	bne.n	8011944 <dir_sdi+0x46>
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	2b02      	cmp	r3, #2
 801193c:	d902      	bls.n	8011944 <dir_sdi+0x46>
		clst = fs->dirbase;
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011942:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d10c      	bne.n	8011964 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	095b      	lsrs	r3, r3, #5
 801194e:	693a      	ldr	r2, [r7, #16]
 8011950:	8912      	ldrh	r2, [r2, #8]
 8011952:	4293      	cmp	r3, r2
 8011954:	d301      	bcc.n	801195a <dir_sdi+0x5c>
 8011956:	2302      	movs	r3, #2
 8011958:	e056      	b.n	8011a08 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	61da      	str	r2, [r3, #28]
 8011962:	e02d      	b.n	80119c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	895b      	ldrh	r3, [r3, #10]
 8011968:	461a      	mov	r2, r3
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	fb03 f302 	mul.w	r3, r3, r2
 8011972:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011974:	e019      	b.n	80119aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6979      	ldr	r1, [r7, #20]
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fca3 	bl	80112c6 <get_fat>
 8011980:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011988:	d101      	bne.n	801198e <dir_sdi+0x90>
 801198a:	2301      	movs	r3, #1
 801198c:	e03c      	b.n	8011a08 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b01      	cmp	r3, #1
 8011992:	d904      	bls.n	801199e <dir_sdi+0xa0>
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	697a      	ldr	r2, [r7, #20]
 801199a:	429a      	cmp	r2, r3
 801199c:	d301      	bcc.n	80119a2 <dir_sdi+0xa4>
 801199e:	2302      	movs	r3, #2
 80119a0:	e032      	b.n	8011a08 <dir_sdi+0x10a>
			ofs -= csz;
 80119a2:	683a      	ldr	r2, [r7, #0]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d2e1      	bcs.n	8011976 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80119b2:	6979      	ldr	r1, [r7, #20]
 80119b4:	6938      	ldr	r0, [r7, #16]
 80119b6:	f7ff fc67 	bl	8011288 <clust2sect>
 80119ba:	4602      	mov	r2, r0
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	697a      	ldr	r2, [r7, #20]
 80119c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	69db      	ldr	r3, [r3, #28]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d101      	bne.n	80119d2 <dir_sdi+0xd4>
 80119ce:	2302      	movs	r3, #2
 80119d0:	e01a      	b.n	8011a08 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	69da      	ldr	r2, [r3, #28]
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	899b      	ldrh	r3, [r3, #12]
 80119da:	4619      	mov	r1, r3
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	fbb3 f3f1 	udiv	r3, r3, r1
 80119e2:	441a      	add	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	899b      	ldrh	r3, [r3, #12]
 80119f2:	461a      	mov	r2, r3
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80119fa:	fb02 f200 	mul.w	r2, r2, r0
 80119fe:	1a9b      	subs	r3, r3, r2
 8011a00:	18ca      	adds	r2, r1, r3
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3718      	adds	r7, #24
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b086      	sub	sp, #24
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	695b      	ldr	r3, [r3, #20]
 8011a24:	3320      	adds	r3, #32
 8011a26:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d003      	beq.n	8011a38 <dir_next+0x28>
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a36:	d301      	bcc.n	8011a3c <dir_next+0x2c>
 8011a38:	2304      	movs	r3, #4
 8011a3a:	e0bb      	b.n	8011bb4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	899b      	ldrh	r3, [r3, #12]
 8011a40:	461a      	mov	r2, r3
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a48:	fb02 f201 	mul.w	r2, r2, r1
 8011a4c:	1a9b      	subs	r3, r3, r2
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f040 809d 	bne.w	8011b8e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	1c5a      	adds	r2, r3, #1
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	699b      	ldr	r3, [r3, #24]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d10b      	bne.n	8011a7e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	095b      	lsrs	r3, r3, #5
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	8912      	ldrh	r2, [r2, #8]
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	f0c0 808d 	bcc.w	8011b8e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	61da      	str	r2, [r3, #28]
 8011a7a:	2304      	movs	r3, #4
 8011a7c:	e09a      	b.n	8011bb4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	899b      	ldrh	r3, [r3, #12]
 8011a82:	461a      	mov	r2, r3
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a8a:	68fa      	ldr	r2, [r7, #12]
 8011a8c:	8952      	ldrh	r2, [r2, #10]
 8011a8e:	3a01      	subs	r2, #1
 8011a90:	4013      	ands	r3, r2
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d17b      	bne.n	8011b8e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	f7ff fc11 	bl	80112c6 <get_fat>
 8011aa4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d801      	bhi.n	8011ab0 <dir_next+0xa0>
 8011aac:	2302      	movs	r3, #2
 8011aae:	e081      	b.n	8011bb4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ab6:	d101      	bne.n	8011abc <dir_next+0xac>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e07b      	b.n	8011bb4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	699b      	ldr	r3, [r3, #24]
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d359      	bcc.n	8011b7a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d104      	bne.n	8011ad6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	61da      	str	r2, [r3, #28]
 8011ad2:	2304      	movs	r3, #4
 8011ad4:	e06e      	b.n	8011bb4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	699b      	ldr	r3, [r3, #24]
 8011adc:	4619      	mov	r1, r3
 8011ade:	4610      	mov	r0, r2
 8011ae0:	f7ff fe3d 	bl	801175e <create_chain>
 8011ae4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d101      	bne.n	8011af0 <dir_next+0xe0>
 8011aec:	2307      	movs	r3, #7
 8011aee:	e061      	b.n	8011bb4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d101      	bne.n	8011afa <dir_next+0xea>
 8011af6:	2302      	movs	r3, #2
 8011af8:	e05c      	b.n	8011bb4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b00:	d101      	bne.n	8011b06 <dir_next+0xf6>
 8011b02:	2301      	movs	r3, #1
 8011b04:	e056      	b.n	8011bb4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011b06:	68f8      	ldr	r0, [r7, #12]
 8011b08:	f7ff fadc 	bl	80110c4 <sync_window>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d001      	beq.n	8011b16 <dir_next+0x106>
 8011b12:	2301      	movs	r3, #1
 8011b14:	e04e      	b.n	8011bb4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	899b      	ldrh	r3, [r3, #12]
 8011b20:	461a      	mov	r2, r3
 8011b22:	2100      	movs	r1, #0
 8011b24:	f7ff f905 	bl	8010d32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b28:	2300      	movs	r3, #0
 8011b2a:	613b      	str	r3, [r7, #16]
 8011b2c:	6979      	ldr	r1, [r7, #20]
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	f7ff fbaa 	bl	8011288 <clust2sect>
 8011b34:	4602      	mov	r2, r0
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	631a      	str	r2, [r3, #48]	; 0x30
 8011b3a:	e012      	b.n	8011b62 <dir_next+0x152>
						fs->wflag = 1;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011b42:	68f8      	ldr	r0, [r7, #12]
 8011b44:	f7ff fabe 	bl	80110c4 <sync_window>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <dir_next+0x142>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e030      	b.n	8011bb4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	3301      	adds	r3, #1
 8011b56:	613b      	str	r3, [r7, #16]
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	631a      	str	r2, [r3, #48]	; 0x30
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	895b      	ldrh	r3, [r3, #10]
 8011b66:	461a      	mov	r2, r3
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d3e6      	bcc.n	8011b3c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	1ad2      	subs	r2, r2, r3
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	697a      	ldr	r2, [r7, #20]
 8011b7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011b80:	6979      	ldr	r1, [r7, #20]
 8011b82:	68f8      	ldr	r0, [r7, #12]
 8011b84:	f7ff fb80 	bl	8011288 <clust2sect>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ba6:	fb02 f200 	mul.w	r2, r2, r0
 8011baa:	1a9b      	subs	r3, r3, r2
 8011bac:	18ca      	adds	r2, r1, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3718      	adds	r7, #24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011bcc:	2100      	movs	r1, #0
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7ff fe95 	bl	80118fe <dir_sdi>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bd8:	7dfb      	ldrb	r3, [r7, #23]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d12b      	bne.n	8011c36 <dir_alloc+0x7a>
		n = 0;
 8011bde:	2300      	movs	r3, #0
 8011be0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	69db      	ldr	r3, [r3, #28]
 8011be6:	4619      	mov	r1, r3
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f7ff faaf 	bl	801114c <move_window>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d11d      	bne.n	8011c34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6a1b      	ldr	r3, [r3, #32]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	2be5      	cmp	r3, #229	; 0xe5
 8011c00:	d004      	beq.n	8011c0c <dir_alloc+0x50>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d107      	bne.n	8011c1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	613b      	str	r3, [r7, #16]
 8011c12:	693a      	ldr	r2, [r7, #16]
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d102      	bne.n	8011c20 <dir_alloc+0x64>
 8011c1a:	e00c      	b.n	8011c36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011c20:	2101      	movs	r1, #1
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7ff fef4 	bl	8011a10 <dir_next>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011c2c:	7dfb      	ldrb	r3, [r7, #23]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d0d7      	beq.n	8011be2 <dir_alloc+0x26>
 8011c32:	e000      	b.n	8011c36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011c34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011c36:	7dfb      	ldrb	r3, [r7, #23]
 8011c38:	2b04      	cmp	r3, #4
 8011c3a:	d101      	bne.n	8011c40 <dir_alloc+0x84>
 8011c3c:	2307      	movs	r3, #7
 8011c3e:	75fb      	strb	r3, [r7, #23]
	return res;
 8011c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3718      	adds	r7, #24
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b084      	sub	sp, #16
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	331a      	adds	r3, #26
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fe ffc7 	bl	8010bec <ld_word>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	2b03      	cmp	r3, #3
 8011c68:	d109      	bne.n	8011c7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	3314      	adds	r3, #20
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fe ffbc 	bl	8010bec <ld_word>
 8011c74:	4603      	mov	r3, r0
 8011c76:	041b      	lsls	r3, r3, #16
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3710      	adds	r7, #16
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	331a      	adds	r3, #26
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	b292      	uxth	r2, r2
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fe ffdf 	bl	8010c62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d109      	bne.n	8011cc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	f103 0214 	add.w	r2, r3, #20
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	0c1b      	lsrs	r3, r3, #16
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	4619      	mov	r1, r3
 8011cba:	4610      	mov	r0, r2
 8011cbc:	f7fe ffd1 	bl	8010c62 <st_word>
	}
}
 8011cc0:	bf00      	nop
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b086      	sub	sp, #24
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff fe10 	bl	80118fe <dir_sdi>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ce2:	7dfb      	ldrb	r3, [r7, #23]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <dir_find+0x24>
 8011ce8:	7dfb      	ldrb	r3, [r7, #23]
 8011cea:	e03e      	b.n	8011d6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	69db      	ldr	r3, [r3, #28]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6938      	ldr	r0, [r7, #16]
 8011cf4:	f7ff fa2a 	bl	801114c <move_window>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d12f      	bne.n	8011d62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a1b      	ldr	r3, [r3, #32]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d102      	bne.n	8011d16 <dir_find+0x4e>
 8011d10:	2304      	movs	r3, #4
 8011d12:	75fb      	strb	r3, [r7, #23]
 8011d14:	e028      	b.n	8011d68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a1b      	ldr	r3, [r3, #32]
 8011d1a:	330b      	adds	r3, #11
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6a1b      	ldr	r3, [r3, #32]
 8011d2c:	330b      	adds	r3, #11
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	f003 0308 	and.w	r3, r3, #8
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10a      	bne.n	8011d4e <dir_find+0x86>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6a18      	ldr	r0, [r3, #32]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3324      	adds	r3, #36	; 0x24
 8011d40:	220b      	movs	r2, #11
 8011d42:	4619      	mov	r1, r3
 8011d44:	f7ff f80f 	bl	8010d66 <mem_cmp>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00b      	beq.n	8011d66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011d4e:	2100      	movs	r1, #0
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7ff fe5d 	bl	8011a10 <dir_next>
 8011d56:	4603      	mov	r3, r0
 8011d58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d0c5      	beq.n	8011cec <dir_find+0x24>
 8011d60:	e002      	b.n	8011d68 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011d62:	bf00      	nop
 8011d64:	e000      	b.n	8011d68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d66:	bf00      	nop

	return res;
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b084      	sub	sp, #16
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011d80:	2101      	movs	r1, #1
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f7ff ff1a 	bl	8011bbc <dir_alloc>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011d8c:	7bfb      	ldrb	r3, [r7, #15]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d11c      	bne.n	8011dcc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	69db      	ldr	r3, [r3, #28]
 8011d96:	4619      	mov	r1, r3
 8011d98:	68b8      	ldr	r0, [r7, #8]
 8011d9a:	f7ff f9d7 	bl	801114c <move_window>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011da2:	7bfb      	ldrb	r3, [r7, #15]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d111      	bne.n	8011dcc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	2220      	movs	r2, #32
 8011dae:	2100      	movs	r1, #0
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fe ffbe 	bl	8010d32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6a18      	ldr	r0, [r3, #32]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3324      	adds	r3, #36	; 0x24
 8011dbe:	220b      	movs	r2, #11
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	f7fe ff95 	bl	8010cf0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
	...

08011dd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b088      	sub	sp, #32
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	3324      	adds	r3, #36	; 0x24
 8011dec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011dee:	220b      	movs	r2, #11
 8011df0:	2120      	movs	r1, #32
 8011df2:	68b8      	ldr	r0, [r7, #8]
 8011df4:	f7fe ff9d 	bl	8010d32 <mem_set>
	si = i = 0; ni = 8;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	613b      	str	r3, [r7, #16]
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	617b      	str	r3, [r7, #20]
 8011e00:	2308      	movs	r3, #8
 8011e02:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	617a      	str	r2, [r7, #20]
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011e12:	7ffb      	ldrb	r3, [r7, #31]
 8011e14:	2b20      	cmp	r3, #32
 8011e16:	d94e      	bls.n	8011eb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011e18:	7ffb      	ldrb	r3, [r7, #31]
 8011e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8011e1c:	d006      	beq.n	8011e2c <create_name+0x54>
 8011e1e:	7ffb      	ldrb	r3, [r7, #31]
 8011e20:	2b5c      	cmp	r3, #92	; 0x5c
 8011e22:	d110      	bne.n	8011e46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011e24:	e002      	b.n	8011e2c <create_name+0x54>
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	4413      	add	r3, r2
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	2b2f      	cmp	r3, #47	; 0x2f
 8011e36:	d0f6      	beq.n	8011e26 <create_name+0x4e>
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b5c      	cmp	r3, #92	; 0x5c
 8011e42:	d0f0      	beq.n	8011e26 <create_name+0x4e>
			break;
 8011e44:	e038      	b.n	8011eb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011e46:	7ffb      	ldrb	r3, [r7, #31]
 8011e48:	2b2e      	cmp	r3, #46	; 0x2e
 8011e4a:	d003      	beq.n	8011e54 <create_name+0x7c>
 8011e4c:	693a      	ldr	r2, [r7, #16]
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d30c      	bcc.n	8011e6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	2b0b      	cmp	r3, #11
 8011e58:	d002      	beq.n	8011e60 <create_name+0x88>
 8011e5a:	7ffb      	ldrb	r3, [r7, #31]
 8011e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e5e:	d001      	beq.n	8011e64 <create_name+0x8c>
 8011e60:	2306      	movs	r3, #6
 8011e62:	e044      	b.n	8011eee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011e64:	2308      	movs	r3, #8
 8011e66:	613b      	str	r3, [r7, #16]
 8011e68:	230b      	movs	r3, #11
 8011e6a:	61bb      	str	r3, [r7, #24]
			continue;
 8011e6c:	e022      	b.n	8011eb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da04      	bge.n	8011e80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011e76:	7ffb      	ldrb	r3, [r7, #31]
 8011e78:	3b80      	subs	r3, #128	; 0x80
 8011e7a:	4a1f      	ldr	r2, [pc, #124]	; (8011ef8 <create_name+0x120>)
 8011e7c:	5cd3      	ldrb	r3, [r2, r3]
 8011e7e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011e80:	7ffb      	ldrb	r3, [r7, #31]
 8011e82:	4619      	mov	r1, r3
 8011e84:	481d      	ldr	r0, [pc, #116]	; (8011efc <create_name+0x124>)
 8011e86:	f7fe ff95 	bl	8010db4 <chk_chr>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <create_name+0xbc>
 8011e90:	2306      	movs	r3, #6
 8011e92:	e02c      	b.n	8011eee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011e94:	7ffb      	ldrb	r3, [r7, #31]
 8011e96:	2b60      	cmp	r3, #96	; 0x60
 8011e98:	d905      	bls.n	8011ea6 <create_name+0xce>
 8011e9a:	7ffb      	ldrb	r3, [r7, #31]
 8011e9c:	2b7a      	cmp	r3, #122	; 0x7a
 8011e9e:	d802      	bhi.n	8011ea6 <create_name+0xce>
 8011ea0:	7ffb      	ldrb	r3, [r7, #31]
 8011ea2:	3b20      	subs	r3, #32
 8011ea4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	1c5a      	adds	r2, r3, #1
 8011eaa:	613a      	str	r2, [r7, #16]
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	4413      	add	r3, r2
 8011eb0:	7ffa      	ldrb	r2, [r7, #31]
 8011eb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011eb4:	e7a6      	b.n	8011e04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011eb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	441a      	add	r2, r3
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d101      	bne.n	8011ecc <create_name+0xf4>
 8011ec8:	2306      	movs	r3, #6
 8011eca:	e010      	b.n	8011eee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2be5      	cmp	r3, #229	; 0xe5
 8011ed2:	d102      	bne.n	8011eda <create_name+0x102>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	2205      	movs	r2, #5
 8011ed8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011eda:	7ffb      	ldrb	r3, [r7, #31]
 8011edc:	2b20      	cmp	r3, #32
 8011ede:	d801      	bhi.n	8011ee4 <create_name+0x10c>
 8011ee0:	2204      	movs	r2, #4
 8011ee2:	e000      	b.n	8011ee6 <create_name+0x10e>
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	330b      	adds	r3, #11
 8011eea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011eec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3720      	adds	r7, #32
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	0801e2c0 	.word	0x0801e2c0
 8011efc:	0801dc6c 	.word	0x0801dc6c

08011f00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011f14:	e002      	b.n	8011f1c <follow_path+0x1c>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	603b      	str	r3, [r7, #0]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	2b2f      	cmp	r3, #47	; 0x2f
 8011f22:	d0f8      	beq.n	8011f16 <follow_path+0x16>
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	2b5c      	cmp	r3, #92	; 0x5c
 8011f2a:	d0f4      	beq.n	8011f16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	2b1f      	cmp	r3, #31
 8011f38:	d80a      	bhi.n	8011f50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2280      	movs	r2, #128	; 0x80
 8011f3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011f42:	2100      	movs	r1, #0
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff fcda 	bl	80118fe <dir_sdi>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	75fb      	strb	r3, [r7, #23]
 8011f4e:	e048      	b.n	8011fe2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f50:	463b      	mov	r3, r7
 8011f52:	4619      	mov	r1, r3
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7ff ff3f 	bl	8011dd8 <create_name>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f5e:	7dfb      	ldrb	r3, [r7, #23]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d139      	bne.n	8011fd8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff feaf 	bl	8011cc8 <dir_find>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011f76:	7dfb      	ldrb	r3, [r7, #23]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00a      	beq.n	8011f92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	2b04      	cmp	r3, #4
 8011f80:	d12c      	bne.n	8011fdc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011f82:	7afb      	ldrb	r3, [r7, #11]
 8011f84:	f003 0304 	and.w	r3, r3, #4
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d127      	bne.n	8011fdc <follow_path+0xdc>
 8011f8c:	2305      	movs	r3, #5
 8011f8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011f90:	e024      	b.n	8011fdc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f92:	7afb      	ldrb	r3, [r7, #11]
 8011f94:	f003 0304 	and.w	r3, r3, #4
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d121      	bne.n	8011fe0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	799b      	ldrb	r3, [r3, #6]
 8011fa0:	f003 0310 	and.w	r3, r3, #16
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d102      	bne.n	8011fae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011fa8:	2305      	movs	r3, #5
 8011faa:	75fb      	strb	r3, [r7, #23]
 8011fac:	e019      	b.n	8011fe2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	695b      	ldr	r3, [r3, #20]
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	8992      	ldrh	r2, [r2, #12]
 8011fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fc0:	fb02 f200 	mul.w	r2, r2, r0
 8011fc4:	1a9b      	subs	r3, r3, r2
 8011fc6:	440b      	add	r3, r1
 8011fc8:	4619      	mov	r1, r3
 8011fca:	68f8      	ldr	r0, [r7, #12]
 8011fcc:	f7ff fe3d 	bl	8011c4a <ld_clust>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011fd6:	e7bb      	b.n	8011f50 <follow_path+0x50>
			if (res != FR_OK) break;
 8011fd8:	bf00      	nop
 8011fda:	e002      	b.n	8011fe2 <follow_path+0xe2>
				break;
 8011fdc:	bf00      	nop
 8011fde:	e000      	b.n	8011fe2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011fe0:	bf00      	nop
			}
		}
	}

	return res;
 8011fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3718      	adds	r7, #24
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b087      	sub	sp, #28
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d031      	beq.n	8012066 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	617b      	str	r3, [r7, #20]
 8012008:	e002      	b.n	8012010 <get_ldnumber+0x24>
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	3301      	adds	r3, #1
 801200e:	617b      	str	r3, [r7, #20]
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	2b20      	cmp	r3, #32
 8012016:	d903      	bls.n	8012020 <get_ldnumber+0x34>
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b3a      	cmp	r3, #58	; 0x3a
 801201e:	d1f4      	bne.n	801200a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	2b3a      	cmp	r3, #58	; 0x3a
 8012026:	d11c      	bne.n	8012062 <get_ldnumber+0x76>
			tp = *path;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	1c5a      	adds	r2, r3, #1
 8012032:	60fa      	str	r2, [r7, #12]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	3b30      	subs	r3, #48	; 0x30
 8012038:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	2b09      	cmp	r3, #9
 801203e:	d80e      	bhi.n	801205e <get_ldnumber+0x72>
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	429a      	cmp	r2, r3
 8012046:	d10a      	bne.n	801205e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d107      	bne.n	801205e <get_ldnumber+0x72>
					vol = (int)i;
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	3301      	adds	r3, #1
 8012056:	617b      	str	r3, [r7, #20]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	697a      	ldr	r2, [r7, #20]
 801205c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	e002      	b.n	8012068 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012062:	2300      	movs	r3, #0
 8012064:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012066:	693b      	ldr	r3, [r7, #16]
}
 8012068:	4618      	mov	r0, r3
 801206a:	371c      	adds	r7, #28
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	70da      	strb	r2, [r3, #3]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f04f 32ff 	mov.w	r2, #4294967295
 801208a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801208c:	6839      	ldr	r1, [r7, #0]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7ff f85c 	bl	801114c <move_window>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <check_fs+0x2a>
 801209a:	2304      	movs	r3, #4
 801209c:	e038      	b.n	8012110 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	3334      	adds	r3, #52	; 0x34
 80120a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fe fda0 	bl	8010bec <ld_word>
 80120ac:	4603      	mov	r3, r0
 80120ae:	461a      	mov	r2, r3
 80120b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d001      	beq.n	80120bc <check_fs+0x48>
 80120b8:	2303      	movs	r3, #3
 80120ba:	e029      	b.n	8012110 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120c2:	2be9      	cmp	r3, #233	; 0xe9
 80120c4:	d009      	beq.n	80120da <check_fs+0x66>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120cc:	2beb      	cmp	r3, #235	; 0xeb
 80120ce:	d11e      	bne.n	801210e <check_fs+0x9a>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80120d6:	2b90      	cmp	r3, #144	; 0x90
 80120d8:	d119      	bne.n	801210e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	3334      	adds	r3, #52	; 0x34
 80120de:	3336      	adds	r3, #54	; 0x36
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fe fd9b 	bl	8010c1c <ld_dword>
 80120e6:	4603      	mov	r3, r0
 80120e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80120ec:	4a0a      	ldr	r2, [pc, #40]	; (8012118 <check_fs+0xa4>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d101      	bne.n	80120f6 <check_fs+0x82>
 80120f2:	2300      	movs	r3, #0
 80120f4:	e00c      	b.n	8012110 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	3334      	adds	r3, #52	; 0x34
 80120fa:	3352      	adds	r3, #82	; 0x52
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe fd8d 	bl	8010c1c <ld_dword>
 8012102:	4602      	mov	r2, r0
 8012104:	4b05      	ldr	r3, [pc, #20]	; (801211c <check_fs+0xa8>)
 8012106:	429a      	cmp	r2, r3
 8012108:	d101      	bne.n	801210e <check_fs+0x9a>
 801210a:	2300      	movs	r3, #0
 801210c:	e000      	b.n	8012110 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801210e:	2302      	movs	r3, #2
}
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	00544146 	.word	0x00544146
 801211c:	33544146 	.word	0x33544146

08012120 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b096      	sub	sp, #88	; 0x58
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	4613      	mov	r3, r2
 801212c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f7ff ff59 	bl	8011fec <get_ldnumber>
 801213a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801213e:	2b00      	cmp	r3, #0
 8012140:	da01      	bge.n	8012146 <find_volume+0x26>
 8012142:	230b      	movs	r3, #11
 8012144:	e265      	b.n	8012612 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012146:	4ab0      	ldr	r2, [pc, #704]	; (8012408 <find_volume+0x2e8>)
 8012148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801214e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012152:	2b00      	cmp	r3, #0
 8012154:	d101      	bne.n	801215a <find_volume+0x3a>
 8012156:	230c      	movs	r3, #12
 8012158:	e25b      	b.n	8012612 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801215e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012160:	79fb      	ldrb	r3, [r7, #7]
 8012162:	f023 0301 	bic.w	r3, r3, #1
 8012166:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d01a      	beq.n	80121a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012172:	785b      	ldrb	r3, [r3, #1]
 8012174:	4618      	mov	r0, r3
 8012176:	f7fe fc9b 	bl	8010ab0 <disk_status>
 801217a:	4603      	mov	r3, r0
 801217c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012184:	f003 0301 	and.w	r3, r3, #1
 8012188:	2b00      	cmp	r3, #0
 801218a:	d10c      	bne.n	80121a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801218c:	79fb      	ldrb	r3, [r7, #7]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d007      	beq.n	80121a2 <find_volume+0x82>
 8012192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012196:	f003 0304 	and.w	r3, r3, #4
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801219e:	230a      	movs	r3, #10
 80121a0:	e237      	b.n	8012612 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80121a2:	2300      	movs	r3, #0
 80121a4:	e235      	b.n	8012612 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80121a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a8:	2200      	movs	r2, #0
 80121aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80121ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ae:	b2da      	uxtb	r2, r3
 80121b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	785b      	ldrb	r3, [r3, #1]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fe fc93 	bl	8010ae4 <disk_initialize>
 80121be:	4603      	mov	r3, r0
 80121c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80121c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121c8:	f003 0301 	and.w	r3, r3, #1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80121d0:	2303      	movs	r3, #3
 80121d2:	e21e      	b.n	8012612 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80121d4:	79fb      	ldrb	r3, [r7, #7]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d007      	beq.n	80121ea <find_volume+0xca>
 80121da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121de:	f003 0304 	and.w	r3, r3, #4
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80121e6:	230a      	movs	r3, #10
 80121e8:	e213      	b.n	8012612 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80121ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ec:	7858      	ldrb	r0, [r3, #1]
 80121ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f0:	330c      	adds	r3, #12
 80121f2:	461a      	mov	r2, r3
 80121f4:	2102      	movs	r1, #2
 80121f6:	f7fe fcdb 	bl	8010bb0 <disk_ioctl>
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d001      	beq.n	8012204 <find_volume+0xe4>
 8012200:	2301      	movs	r3, #1
 8012202:	e206      	b.n	8012612 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012206:	899b      	ldrh	r3, [r3, #12]
 8012208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801220c:	d80d      	bhi.n	801222a <find_volume+0x10a>
 801220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012210:	899b      	ldrh	r3, [r3, #12]
 8012212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012216:	d308      	bcc.n	801222a <find_volume+0x10a>
 8012218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221a:	899b      	ldrh	r3, [r3, #12]
 801221c:	461a      	mov	r2, r3
 801221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012220:	899b      	ldrh	r3, [r3, #12]
 8012222:	3b01      	subs	r3, #1
 8012224:	4013      	ands	r3, r2
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <find_volume+0x10e>
 801222a:	2301      	movs	r3, #1
 801222c:	e1f1      	b.n	8012612 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801222e:	2300      	movs	r3, #0
 8012230:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012234:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012236:	f7ff ff1d 	bl	8012074 <check_fs>
 801223a:	4603      	mov	r3, r0
 801223c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012240:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012244:	2b02      	cmp	r3, #2
 8012246:	d14b      	bne.n	80122e0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012248:	2300      	movs	r3, #0
 801224a:	643b      	str	r3, [r7, #64]	; 0x40
 801224c:	e01f      	b.n	801228e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012250:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012256:	011b      	lsls	r3, r3, #4
 8012258:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801225c:	4413      	add	r3, r2
 801225e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012262:	3304      	adds	r3, #4
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d006      	beq.n	8012278 <find_volume+0x158>
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	3308      	adds	r3, #8
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe fcd4 	bl	8010c1c <ld_dword>
 8012274:	4602      	mov	r2, r0
 8012276:	e000      	b.n	801227a <find_volume+0x15a>
 8012278:	2200      	movs	r2, #0
 801227a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012282:	440b      	add	r3, r1
 8012284:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228a:	3301      	adds	r3, #1
 801228c:	643b      	str	r3, [r7, #64]	; 0x40
 801228e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012290:	2b03      	cmp	r3, #3
 8012292:	d9dc      	bls.n	801224e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012294:	2300      	movs	r3, #0
 8012296:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <find_volume+0x184>
 801229e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a0:	3b01      	subs	r3, #1
 80122a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80122a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80122ac:	4413      	add	r3, r2
 80122ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80122b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80122b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d005      	beq.n	80122c6 <find_volume+0x1a6>
 80122ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80122be:	f7ff fed9 	bl	8012074 <check_fs>
 80122c2:	4603      	mov	r3, r0
 80122c4:	e000      	b.n	80122c8 <find_volume+0x1a8>
 80122c6:	2303      	movs	r3, #3
 80122c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80122cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d905      	bls.n	80122e0 <find_volume+0x1c0>
 80122d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d6:	3301      	adds	r3, #1
 80122d8:	643b      	str	r3, [r7, #64]	; 0x40
 80122da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122dc:	2b03      	cmp	r3, #3
 80122de:	d9e1      	bls.n	80122a4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80122e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122e4:	2b04      	cmp	r3, #4
 80122e6:	d101      	bne.n	80122ec <find_volume+0x1cc>
 80122e8:	2301      	movs	r3, #1
 80122ea:	e192      	b.n	8012612 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80122ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d901      	bls.n	80122f8 <find_volume+0x1d8>
 80122f4:	230d      	movs	r3, #13
 80122f6:	e18c      	b.n	8012612 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80122f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fa:	3334      	adds	r3, #52	; 0x34
 80122fc:	330b      	adds	r3, #11
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fe fc74 	bl	8010bec <ld_word>
 8012304:	4603      	mov	r3, r0
 8012306:	461a      	mov	r2, r3
 8012308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230a:	899b      	ldrh	r3, [r3, #12]
 801230c:	429a      	cmp	r2, r3
 801230e:	d001      	beq.n	8012314 <find_volume+0x1f4>
 8012310:	230d      	movs	r3, #13
 8012312:	e17e      	b.n	8012612 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012316:	3334      	adds	r3, #52	; 0x34
 8012318:	3316      	adds	r3, #22
 801231a:	4618      	mov	r0, r3
 801231c:	f7fe fc66 	bl	8010bec <ld_word>
 8012320:	4603      	mov	r3, r0
 8012322:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <find_volume+0x218>
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	3334      	adds	r3, #52	; 0x34
 801232e:	3324      	adds	r3, #36	; 0x24
 8012330:	4618      	mov	r0, r3
 8012332:	f7fe fc73 	bl	8010c1c <ld_dword>
 8012336:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801233c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012340:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012346:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234a:	789b      	ldrb	r3, [r3, #2]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d005      	beq.n	801235c <find_volume+0x23c>
 8012350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012352:	789b      	ldrb	r3, [r3, #2]
 8012354:	2b02      	cmp	r3, #2
 8012356:	d001      	beq.n	801235c <find_volume+0x23c>
 8012358:	230d      	movs	r3, #13
 801235a:	e15a      	b.n	8012612 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	789b      	ldrb	r3, [r3, #2]
 8012360:	461a      	mov	r2, r3
 8012362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012364:	fb02 f303 	mul.w	r3, r2, r3
 8012368:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012370:	b29a      	uxth	r2, r3
 8012372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012374:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012378:	895b      	ldrh	r3, [r3, #10]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d008      	beq.n	8012390 <find_volume+0x270>
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	895b      	ldrh	r3, [r3, #10]
 8012382:	461a      	mov	r2, r3
 8012384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012386:	895b      	ldrh	r3, [r3, #10]
 8012388:	3b01      	subs	r3, #1
 801238a:	4013      	ands	r3, r2
 801238c:	2b00      	cmp	r3, #0
 801238e:	d001      	beq.n	8012394 <find_volume+0x274>
 8012390:	230d      	movs	r3, #13
 8012392:	e13e      	b.n	8012612 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012396:	3334      	adds	r3, #52	; 0x34
 8012398:	3311      	adds	r3, #17
 801239a:	4618      	mov	r0, r3
 801239c:	f7fe fc26 	bl	8010bec <ld_word>
 80123a0:	4603      	mov	r3, r0
 80123a2:	461a      	mov	r2, r3
 80123a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80123a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123aa:	891b      	ldrh	r3, [r3, #8]
 80123ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123ae:	8992      	ldrh	r2, [r2, #12]
 80123b0:	0952      	lsrs	r2, r2, #5
 80123b2:	b292      	uxth	r2, r2
 80123b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80123b8:	fb02 f201 	mul.w	r2, r2, r1
 80123bc:	1a9b      	subs	r3, r3, r2
 80123be:	b29b      	uxth	r3, r3
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <find_volume+0x2a8>
 80123c4:	230d      	movs	r3, #13
 80123c6:	e124      	b.n	8012612 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	3334      	adds	r3, #52	; 0x34
 80123cc:	3313      	adds	r3, #19
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe fc0c 	bl	8010bec <ld_word>
 80123d4:	4603      	mov	r3, r0
 80123d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80123d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <find_volume+0x2cc>
 80123de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e0:	3334      	adds	r3, #52	; 0x34
 80123e2:	3320      	adds	r3, #32
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fe fc19 	bl	8010c1c <ld_dword>
 80123ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	3334      	adds	r3, #52	; 0x34
 80123f0:	330e      	adds	r3, #14
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe fbfa 	bl	8010bec <ld_word>
 80123f8:	4603      	mov	r3, r0
 80123fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80123fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d104      	bne.n	801240c <find_volume+0x2ec>
 8012402:	230d      	movs	r3, #13
 8012404:	e105      	b.n	8012612 <find_volume+0x4f2>
 8012406:	bf00      	nop
 8012408:	200003a8 	.word	0x200003a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801240c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012410:	4413      	add	r3, r2
 8012412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012414:	8911      	ldrh	r1, [r2, #8]
 8012416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012418:	8992      	ldrh	r2, [r2, #12]
 801241a:	0952      	lsrs	r2, r2, #5
 801241c:	b292      	uxth	r2, r2
 801241e:	fbb1 f2f2 	udiv	r2, r1, r2
 8012422:	b292      	uxth	r2, r2
 8012424:	4413      	add	r3, r2
 8012426:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242c:	429a      	cmp	r2, r3
 801242e:	d201      	bcs.n	8012434 <find_volume+0x314>
 8012430:	230d      	movs	r3, #13
 8012432:	e0ee      	b.n	8012612 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801243c:	8952      	ldrh	r2, [r2, #10]
 801243e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012442:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	d101      	bne.n	801244e <find_volume+0x32e>
 801244a:	230d      	movs	r3, #13
 801244c:	e0e1      	b.n	8012612 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801244e:	2303      	movs	r3, #3
 8012450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801245a:	4293      	cmp	r3, r2
 801245c:	d802      	bhi.n	8012464 <find_volume+0x344>
 801245e:	2302      	movs	r3, #2
 8012460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012466:	f640 72f5 	movw	r2, #4085	; 0xff5
 801246a:	4293      	cmp	r3, r2
 801246c:	d802      	bhi.n	8012474 <find_volume+0x354>
 801246e:	2301      	movs	r3, #1
 8012470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	1c9a      	adds	r2, r3, #2
 8012478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012480:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012482:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012486:	441a      	add	r2, r3
 8012488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801248c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	441a      	add	r2, r3
 8012492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012494:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012496:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801249a:	2b03      	cmp	r3, #3
 801249c:	d11e      	bne.n	80124dc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a0:	3334      	adds	r3, #52	; 0x34
 80124a2:	332a      	adds	r3, #42	; 0x2a
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe fba1 	bl	8010bec <ld_word>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d001      	beq.n	80124b4 <find_volume+0x394>
 80124b0:	230d      	movs	r3, #13
 80124b2:	e0ae      	b.n	8012612 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	891b      	ldrh	r3, [r3, #8]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <find_volume+0x3a0>
 80124bc:	230d      	movs	r3, #13
 80124be:	e0a8      	b.n	8012612 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80124c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c2:	3334      	adds	r3, #52	; 0x34
 80124c4:	332c      	adds	r3, #44	; 0x2c
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fe fba8 	bl	8010c1c <ld_dword>
 80124cc:	4602      	mov	r2, r0
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80124d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	647b      	str	r3, [r7, #68]	; 0x44
 80124da:	e01f      	b.n	801251c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	891b      	ldrh	r3, [r3, #8]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d101      	bne.n	80124e8 <find_volume+0x3c8>
 80124e4:	230d      	movs	r3, #13
 80124e6:	e094      	b.n	8012612 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80124e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ee:	441a      	add	r2, r3
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80124f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d103      	bne.n	8012504 <find_volume+0x3e4>
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	e00a      	b.n	801251a <find_volume+0x3fa>
 8012504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012506:	699a      	ldr	r2, [r3, #24]
 8012508:	4613      	mov	r3, r2
 801250a:	005b      	lsls	r3, r3, #1
 801250c:	4413      	add	r3, r2
 801250e:	085a      	lsrs	r2, r3, #1
 8012510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012512:	699b      	ldr	r3, [r3, #24]
 8012514:	f003 0301 	and.w	r3, r3, #1
 8012518:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801251a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251e:	69da      	ldr	r2, [r3, #28]
 8012520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012522:	899b      	ldrh	r3, [r3, #12]
 8012524:	4619      	mov	r1, r3
 8012526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012528:	440b      	add	r3, r1
 801252a:	3b01      	subs	r3, #1
 801252c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801252e:	8989      	ldrh	r1, [r1, #12]
 8012530:	fbb3 f3f1 	udiv	r3, r3, r1
 8012534:	429a      	cmp	r2, r3
 8012536:	d201      	bcs.n	801253c <find_volume+0x41c>
 8012538:	230d      	movs	r3, #13
 801253a:	e06a      	b.n	8012612 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253e:	f04f 32ff 	mov.w	r2, #4294967295
 8012542:	615a      	str	r2, [r3, #20]
 8012544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012546:	695a      	ldr	r2, [r3, #20]
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	2280      	movs	r2, #128	; 0x80
 8012550:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012556:	2b03      	cmp	r3, #3
 8012558:	d149      	bne.n	80125ee <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255c:	3334      	adds	r3, #52	; 0x34
 801255e:	3330      	adds	r3, #48	; 0x30
 8012560:	4618      	mov	r0, r3
 8012562:	f7fe fb43 	bl	8010bec <ld_word>
 8012566:	4603      	mov	r3, r0
 8012568:	2b01      	cmp	r3, #1
 801256a:	d140      	bne.n	80125ee <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801256c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801256e:	3301      	adds	r3, #1
 8012570:	4619      	mov	r1, r3
 8012572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012574:	f7fe fdea 	bl	801114c <move_window>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d137      	bne.n	80125ee <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012580:	2200      	movs	r2, #0
 8012582:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012586:	3334      	adds	r3, #52	; 0x34
 8012588:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801258c:	4618      	mov	r0, r3
 801258e:	f7fe fb2d 	bl	8010bec <ld_word>
 8012592:	4603      	mov	r3, r0
 8012594:	461a      	mov	r2, r3
 8012596:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801259a:	429a      	cmp	r2, r3
 801259c:	d127      	bne.n	80125ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a0:	3334      	adds	r3, #52	; 0x34
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fe fb3a 	bl	8010c1c <ld_dword>
 80125a8:	4602      	mov	r2, r0
 80125aa:	4b1c      	ldr	r3, [pc, #112]	; (801261c <find_volume+0x4fc>)
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d11e      	bne.n	80125ee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80125b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b2:	3334      	adds	r3, #52	; 0x34
 80125b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fe fb2f 	bl	8010c1c <ld_dword>
 80125be:	4602      	mov	r2, r0
 80125c0:	4b17      	ldr	r3, [pc, #92]	; (8012620 <find_volume+0x500>)
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d113      	bne.n	80125ee <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80125c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c8:	3334      	adds	r3, #52	; 0x34
 80125ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe fb24 	bl	8010c1c <ld_dword>
 80125d4:	4602      	mov	r2, r0
 80125d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80125da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125dc:	3334      	adds	r3, #52	; 0x34
 80125de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe fb1a 	bl	8010c1c <ld_dword>
 80125e8:	4602      	mov	r2, r0
 80125ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80125ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80125f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80125f6:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <find_volume+0x504>)
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	3301      	adds	r3, #1
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	4b09      	ldr	r3, [pc, #36]	; (8012624 <find_volume+0x504>)
 8012600:	801a      	strh	r2, [r3, #0]
 8012602:	4b08      	ldr	r3, [pc, #32]	; (8012624 <find_volume+0x504>)
 8012604:	881a      	ldrh	r2, [r3, #0]
 8012606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012608:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801260a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801260c:	f7fe fd36 	bl	801107c <clear_lock>
#endif
	return FR_OK;
 8012610:	2300      	movs	r3, #0
}
 8012612:	4618      	mov	r0, r3
 8012614:	3758      	adds	r7, #88	; 0x58
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	41615252 	.word	0x41615252
 8012620:	61417272 	.word	0x61417272
 8012624:	200003ac 	.word	0x200003ac

08012628 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012632:	2309      	movs	r3, #9
 8012634:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d01c      	beq.n	8012676 <validate+0x4e>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d018      	beq.n	8012676 <validate+0x4e>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d013      	beq.n	8012676 <validate+0x4e>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	889a      	ldrh	r2, [r3, #4]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	88db      	ldrh	r3, [r3, #6]
 8012658:	429a      	cmp	r2, r3
 801265a:	d10c      	bne.n	8012676 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	785b      	ldrb	r3, [r3, #1]
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe fa24 	bl	8010ab0 <disk_status>
 8012668:	4603      	mov	r3, r0
 801266a:	f003 0301 	and.w	r3, r3, #1
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <validate+0x4e>
			res = FR_OK;
 8012672:	2300      	movs	r3, #0
 8012674:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012676:	7bfb      	ldrb	r3, [r7, #15]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d102      	bne.n	8012682 <validate+0x5a>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	e000      	b.n	8012684 <validate+0x5c>
 8012682:	2300      	movs	r3, #0
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	6013      	str	r3, [r2, #0]
	return res;
 8012688:	7bfb      	ldrb	r3, [r7, #15]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
	...

08012694 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b088      	sub	sp, #32
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	4613      	mov	r3, r2
 80126a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80126a6:	f107 0310 	add.w	r3, r7, #16
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7ff fc9e 	bl	8011fec <get_ldnumber>
 80126b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	da01      	bge.n	80126bc <f_mount+0x28>
 80126b8:	230b      	movs	r3, #11
 80126ba:	e02b      	b.n	8012714 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80126bc:	4a17      	ldr	r2, [pc, #92]	; (801271c <f_mount+0x88>)
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d005      	beq.n	80126d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80126cc:	69b8      	ldr	r0, [r7, #24]
 80126ce:	f7fe fcd5 	bl	801107c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	2200      	movs	r2, #0
 80126d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d002      	beq.n	80126e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2200      	movs	r2, #0
 80126e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	490d      	ldr	r1, [pc, #52]	; (801271c <f_mount+0x88>)
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <f_mount+0x66>
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d001      	beq.n	80126fe <f_mount+0x6a>
 80126fa:	2300      	movs	r3, #0
 80126fc:	e00a      	b.n	8012714 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80126fe:	f107 010c 	add.w	r1, r7, #12
 8012702:	f107 0308 	add.w	r3, r7, #8
 8012706:	2200      	movs	r2, #0
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff fd09 	bl	8012120 <find_volume>
 801270e:	4603      	mov	r3, r0
 8012710:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012712:	7dfb      	ldrb	r3, [r7, #23]
}
 8012714:	4618      	mov	r0, r3
 8012716:	3720      	adds	r7, #32
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}
 801271c:	200003a8 	.word	0x200003a8

08012720 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b098      	sub	sp, #96	; 0x60
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	4613      	mov	r3, r2
 801272c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d101      	bne.n	8012738 <f_open+0x18>
 8012734:	2309      	movs	r3, #9
 8012736:	e1bb      	b.n	8012ab0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012738:	79fb      	ldrb	r3, [r7, #7]
 801273a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801273e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012740:	79fa      	ldrb	r2, [r7, #7]
 8012742:	f107 0110 	add.w	r1, r7, #16
 8012746:	f107 0308 	add.w	r3, r7, #8
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fce8 	bl	8012120 <find_volume>
 8012750:	4603      	mov	r3, r0
 8012752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801275a:	2b00      	cmp	r3, #0
 801275c:	f040 819f 	bne.w	8012a9e <f_open+0x37e>
		dj.obj.fs = fs;
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	f107 0314 	add.w	r3, r7, #20
 801276a:	4611      	mov	r1, r2
 801276c:	4618      	mov	r0, r3
 801276e:	f7ff fbc7 	bl	8011f00 <follow_path>
 8012772:	4603      	mov	r3, r0
 8012774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801277c:	2b00      	cmp	r3, #0
 801277e:	d11a      	bne.n	80127b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012780:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012784:	b25b      	sxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	da03      	bge.n	8012792 <f_open+0x72>
				res = FR_INVALID_NAME;
 801278a:	2306      	movs	r3, #6
 801278c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012790:	e011      	b.n	80127b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012792:	79fb      	ldrb	r3, [r7, #7]
 8012794:	f023 0301 	bic.w	r3, r3, #1
 8012798:	2b00      	cmp	r3, #0
 801279a:	bf14      	ite	ne
 801279c:	2301      	movne	r3, #1
 801279e:	2300      	moveq	r3, #0
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	461a      	mov	r2, r3
 80127a4:	f107 0314 	add.w	r3, r7, #20
 80127a8:	4611      	mov	r1, r2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fb1e 	bl	8010dec <chk_lock>
 80127b0:	4603      	mov	r3, r0
 80127b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80127b6:	79fb      	ldrb	r3, [r7, #7]
 80127b8:	f003 031c 	and.w	r3, r3, #28
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d07f      	beq.n	80128c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80127c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d017      	beq.n	80127f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80127c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127cc:	2b04      	cmp	r3, #4
 80127ce:	d10e      	bne.n	80127ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80127d0:	f7fe fb68 	bl	8010ea4 <enq_lock>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d006      	beq.n	80127e8 <f_open+0xc8>
 80127da:	f107 0314 	add.w	r3, r7, #20
 80127de:	4618      	mov	r0, r3
 80127e0:	f7ff fac7 	bl	8011d72 <dir_register>
 80127e4:	4603      	mov	r3, r0
 80127e6:	e000      	b.n	80127ea <f_open+0xca>
 80127e8:	2312      	movs	r3, #18
 80127ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80127ee:	79fb      	ldrb	r3, [r7, #7]
 80127f0:	f043 0308 	orr.w	r3, r3, #8
 80127f4:	71fb      	strb	r3, [r7, #7]
 80127f6:	e010      	b.n	801281a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80127f8:	7ebb      	ldrb	r3, [r7, #26]
 80127fa:	f003 0311 	and.w	r3, r3, #17
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d003      	beq.n	801280a <f_open+0xea>
					res = FR_DENIED;
 8012802:	2307      	movs	r3, #7
 8012804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012808:	e007      	b.n	801281a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801280a:	79fb      	ldrb	r3, [r7, #7]
 801280c:	f003 0304 	and.w	r3, r3, #4
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <f_open+0xfa>
 8012814:	2308      	movs	r3, #8
 8012816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801281a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801281e:	2b00      	cmp	r3, #0
 8012820:	d168      	bne.n	80128f4 <f_open+0x1d4>
 8012822:	79fb      	ldrb	r3, [r7, #7]
 8012824:	f003 0308 	and.w	r3, r3, #8
 8012828:	2b00      	cmp	r3, #0
 801282a:	d063      	beq.n	80128f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801282c:	f000 fdf2 	bl	8013414 <get_fattime>
 8012830:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012834:	330e      	adds	r3, #14
 8012836:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe fa2d 	bl	8010c98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012840:	3316      	adds	r3, #22
 8012842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012844:	4618      	mov	r0, r3
 8012846:	f7fe fa27 	bl	8010c98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284c:	330b      	adds	r3, #11
 801284e:	2220      	movs	r2, #32
 8012850:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012856:	4611      	mov	r1, r2
 8012858:	4618      	mov	r0, r3
 801285a:	f7ff f9f6 	bl	8011c4a <ld_clust>
 801285e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012864:	2200      	movs	r2, #0
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff fa0e 	bl	8011c88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801286e:	331c      	adds	r3, #28
 8012870:	2100      	movs	r1, #0
 8012872:	4618      	mov	r0, r3
 8012874:	f7fe fa10 	bl	8010c98 <st_dword>
					fs->wflag = 1;
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	2201      	movs	r2, #1
 801287c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d037      	beq.n	80128f4 <f_open+0x1d4>
						dw = fs->winsect;
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012888:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801288a:	f107 0314 	add.w	r3, r7, #20
 801288e:	2200      	movs	r2, #0
 8012890:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012892:	4618      	mov	r0, r3
 8012894:	f7fe fefe 	bl	8011694 <remove_chain>
 8012898:	4603      	mov	r3, r0
 801289a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801289e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d126      	bne.n	80128f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fe fc4e 	bl	801114c <move_window>
 80128b0:	4603      	mov	r3, r0
 80128b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128ba:	3a01      	subs	r2, #1
 80128bc:	611a      	str	r2, [r3, #16]
 80128be:	e019      	b.n	80128f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80128c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d115      	bne.n	80128f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80128c8:	7ebb      	ldrb	r3, [r7, #26]
 80128ca:	f003 0310 	and.w	r3, r3, #16
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d003      	beq.n	80128da <f_open+0x1ba>
					res = FR_NO_FILE;
 80128d2:	2304      	movs	r3, #4
 80128d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80128d8:	e00c      	b.n	80128f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80128da:	79fb      	ldrb	r3, [r7, #7]
 80128dc:	f003 0302 	and.w	r3, r3, #2
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d007      	beq.n	80128f4 <f_open+0x1d4>
 80128e4:	7ebb      	ldrb	r3, [r7, #26]
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d002      	beq.n	80128f4 <f_open+0x1d4>
						res = FR_DENIED;
 80128ee:	2307      	movs	r3, #7
 80128f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80128f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d128      	bne.n	801294e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80128fc:	79fb      	ldrb	r3, [r7, #7]
 80128fe:	f003 0308 	and.w	r3, r3, #8
 8012902:	2b00      	cmp	r3, #0
 8012904:	d003      	beq.n	801290e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012906:	79fb      	ldrb	r3, [r7, #7]
 8012908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801290c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	f023 0301 	bic.w	r3, r3, #1
 8012922:	2b00      	cmp	r3, #0
 8012924:	bf14      	ite	ne
 8012926:	2301      	movne	r3, #1
 8012928:	2300      	moveq	r3, #0
 801292a:	b2db      	uxtb	r3, r3
 801292c:	461a      	mov	r2, r3
 801292e:	f107 0314 	add.w	r3, r7, #20
 8012932:	4611      	mov	r1, r2
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe fad7 	bl	8010ee8 <inc_lock>
 801293a:	4602      	mov	r2, r0
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d102      	bne.n	801294e <f_open+0x22e>
 8012948:	2302      	movs	r3, #2
 801294a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801294e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012952:	2b00      	cmp	r3, #0
 8012954:	f040 80a3 	bne.w	8012a9e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801295c:	4611      	mov	r1, r2
 801295e:	4618      	mov	r0, r3
 8012960:	f7ff f973 	bl	8011c4a <ld_clust>
 8012964:	4602      	mov	r2, r0
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801296c:	331c      	adds	r3, #28
 801296e:	4618      	mov	r0, r3
 8012970:	f7fe f954 	bl	8010c1c <ld_dword>
 8012974:	4602      	mov	r2, r0
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2200      	movs	r2, #0
 801297e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012980:	693a      	ldr	r2, [r7, #16]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	88da      	ldrh	r2, [r3, #6]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	79fa      	ldrb	r2, [r7, #7]
 8012992:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2200      	movs	r2, #0
 8012998:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2200      	movs	r2, #0
 801299e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2200      	movs	r2, #0
 80129a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	3330      	adds	r3, #48	; 0x30
 80129aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80129ae:	2100      	movs	r1, #0
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7fe f9be 	bl	8010d32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80129b6:	79fb      	ldrb	r3, [r7, #7]
 80129b8:	f003 0320 	and.w	r3, r3, #32
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d06e      	beq.n	8012a9e <f_open+0x37e>
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d06a      	beq.n	8012a9e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	68da      	ldr	r2, [r3, #12]
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	895b      	ldrh	r3, [r3, #10]
 80129d4:	461a      	mov	r2, r3
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	899b      	ldrh	r3, [r3, #12]
 80129da:	fb03 f302 	mul.w	r3, r3, r2
 80129de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	657b      	str	r3, [r7, #84]	; 0x54
 80129ec:	e016      	b.n	8012a1c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe fc67 	bl	80112c6 <get_fat>
 80129f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80129fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d802      	bhi.n	8012a06 <f_open+0x2e6>
 8012a00:	2302      	movs	r3, #2
 8012a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a0c:	d102      	bne.n	8012a14 <f_open+0x2f4>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8012a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d103      	bne.n	8012a2c <f_open+0x30c>
 8012a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d8e0      	bhi.n	80129ee <f_open+0x2ce>
				}
				fp->clust = clst;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d131      	bne.n	8012a9e <f_open+0x37e>
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	899b      	ldrh	r3, [r3, #12]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a46:	fb02 f201 	mul.w	r2, r2, r1
 8012a4a:	1a9b      	subs	r3, r3, r2
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d026      	beq.n	8012a9e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7fe fc17 	bl	8011288 <clust2sect>
 8012a5a:	6478      	str	r0, [r7, #68]	; 0x44
 8012a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d103      	bne.n	8012a6a <f_open+0x34a>
						res = FR_INT_ERR;
 8012a62:	2302      	movs	r3, #2
 8012a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012a68:	e019      	b.n	8012a9e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	899b      	ldrh	r3, [r3, #12]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8012a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a78:	441a      	add	r2, r3
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	7858      	ldrb	r0, [r3, #1]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6a1a      	ldr	r2, [r3, #32]
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	f7fe f84f 	bl	8010b30 <disk_read>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d002      	beq.n	8012a9e <f_open+0x37e>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d002      	beq.n	8012aac <f_open+0x38c>
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3760      	adds	r7, #96	; 0x60
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b08c      	sub	sp, #48	; 0x30
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	2200      	movs	r2, #0
 8012ace:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f107 0210 	add.w	r2, r7, #16
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7ff fda5 	bl	8012628 <validate>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d107      	bne.n	8012afc <f_write+0x44>
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	7d5b      	ldrb	r3, [r3, #21]
 8012af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <f_write+0x4a>
 8012afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b00:	e16a      	b.n	8012dd8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	7d1b      	ldrb	r3, [r3, #20]
 8012b06:	f003 0302 	and.w	r3, r3, #2
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <f_write+0x5a>
 8012b0e:	2307      	movs	r3, #7
 8012b10:	e162      	b.n	8012dd8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	699a      	ldr	r2, [r3, #24]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	441a      	add	r2, r3
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	699b      	ldr	r3, [r3, #24]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	f080 814c 	bcs.w	8012dbc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	699b      	ldr	r3, [r3, #24]
 8012b28:	43db      	mvns	r3, r3
 8012b2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012b2c:	e146      	b.n	8012dbc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	699b      	ldr	r3, [r3, #24]
 8012b32:	693a      	ldr	r2, [r7, #16]
 8012b34:	8992      	ldrh	r2, [r2, #12]
 8012b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b3a:	fb02 f201 	mul.w	r2, r2, r1
 8012b3e:	1a9b      	subs	r3, r3, r2
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f040 80f1 	bne.w	8012d28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	699b      	ldr	r3, [r3, #24]
 8012b4a:	693a      	ldr	r2, [r7, #16]
 8012b4c:	8992      	ldrh	r2, [r2, #12]
 8012b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b52:	693a      	ldr	r2, [r7, #16]
 8012b54:	8952      	ldrh	r2, [r2, #10]
 8012b56:	3a01      	subs	r2, #1
 8012b58:	4013      	ands	r3, r2
 8012b5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d143      	bne.n	8012bea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	699b      	ldr	r3, [r3, #24]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d10c      	bne.n	8012b84 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d11a      	bne.n	8012bac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2100      	movs	r1, #0
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fe fdef 	bl	801175e <create_chain>
 8012b80:	62b8      	str	r0, [r7, #40]	; 0x28
 8012b82:	e013      	b.n	8012bac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d007      	beq.n	8012b9c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	4619      	mov	r1, r3
 8012b92:	68f8      	ldr	r0, [r7, #12]
 8012b94:	f7fe fe7b 	bl	801188e <clmt_clust>
 8012b98:	62b8      	str	r0, [r7, #40]	; 0x28
 8012b9a:	e007      	b.n	8012bac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	69db      	ldr	r3, [r3, #28]
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	f7fe fdda 	bl	801175e <create_chain>
 8012baa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 8109 	beq.w	8012dc6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d104      	bne.n	8012bc4 <f_write+0x10c>
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2202      	movs	r2, #2
 8012bbe:	755a      	strb	r2, [r3, #21]
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	e109      	b.n	8012dd8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bca:	d104      	bne.n	8012bd6 <f_write+0x11e>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2201      	movs	r2, #1
 8012bd0:	755a      	strb	r2, [r3, #21]
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	e100      	b.n	8012dd8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bda:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d102      	bne.n	8012bea <f_write+0x132>
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012be8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	7d1b      	ldrb	r3, [r3, #20]
 8012bee:	b25b      	sxtb	r3, r3
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	da18      	bge.n	8012c26 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	7858      	ldrb	r0, [r3, #1]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	6a1a      	ldr	r2, [r3, #32]
 8012c02:	2301      	movs	r3, #1
 8012c04:	f7fd ffb4 	bl	8010b70 <disk_write>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d004      	beq.n	8012c18 <f_write+0x160>
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2201      	movs	r2, #1
 8012c12:	755a      	strb	r2, [r3, #21]
 8012c14:	2301      	movs	r3, #1
 8012c16:	e0df      	b.n	8012dd8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	7d1b      	ldrb	r3, [r3, #20]
 8012c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c20:	b2da      	uxtb	r2, r3
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012c26:	693a      	ldr	r2, [r7, #16]
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	69db      	ldr	r3, [r3, #28]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4610      	mov	r0, r2
 8012c30:	f7fe fb2a 	bl	8011288 <clust2sect>
 8012c34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d104      	bne.n	8012c46 <f_write+0x18e>
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2202      	movs	r2, #2
 8012c40:	755a      	strb	r2, [r3, #21]
 8012c42:	2302      	movs	r3, #2
 8012c44:	e0c8      	b.n	8012dd8 <f_write+0x320>
			sect += csect;
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	4413      	add	r3, r2
 8012c4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	899b      	ldrh	r3, [r3, #12]
 8012c52:	461a      	mov	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c5a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d043      	beq.n	8012cea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012c62:	69ba      	ldr	r2, [r7, #24]
 8012c64:	6a3b      	ldr	r3, [r7, #32]
 8012c66:	4413      	add	r3, r2
 8012c68:	693a      	ldr	r2, [r7, #16]
 8012c6a:	8952      	ldrh	r2, [r2, #10]
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d905      	bls.n	8012c7c <f_write+0x1c4>
					cc = fs->csize - csect;
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	895b      	ldrh	r3, [r3, #10]
 8012c74:	461a      	mov	r2, r3
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	1ad3      	subs	r3, r2, r3
 8012c7a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	7858      	ldrb	r0, [r3, #1]
 8012c80:	6a3b      	ldr	r3, [r7, #32]
 8012c82:	697a      	ldr	r2, [r7, #20]
 8012c84:	69f9      	ldr	r1, [r7, #28]
 8012c86:	f7fd ff73 	bl	8010b70 <disk_write>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d004      	beq.n	8012c9a <f_write+0x1e2>
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2201      	movs	r2, #1
 8012c94:	755a      	strb	r2, [r3, #21]
 8012c96:	2301      	movs	r3, #1
 8012c98:	e09e      	b.n	8012dd8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	6a1a      	ldr	r2, [r3, #32]
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	6a3a      	ldr	r2, [r7, #32]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d918      	bls.n	8012cda <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	6a1a      	ldr	r2, [r3, #32]
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	693a      	ldr	r2, [r7, #16]
 8012cb8:	8992      	ldrh	r2, [r2, #12]
 8012cba:	fb02 f303 	mul.w	r3, r2, r3
 8012cbe:	69fa      	ldr	r2, [r7, #28]
 8012cc0:	18d1      	adds	r1, r2, r3
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	899b      	ldrh	r3, [r3, #12]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	f7fe f812 	bl	8010cf0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	7d1b      	ldrb	r3, [r3, #20]
 8012cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cd4:	b2da      	uxtb	r2, r3
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	899b      	ldrh	r3, [r3, #12]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	fb02 f303 	mul.w	r3, r2, r3
 8012ce6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012ce8:	e04b      	b.n	8012d82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6a1b      	ldr	r3, [r3, #32]
 8012cee:	697a      	ldr	r2, [r7, #20]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d016      	beq.n	8012d22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	699a      	ldr	r2, [r3, #24]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d210      	bcs.n	8012d22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	7858      	ldrb	r0, [r3, #1]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	697a      	ldr	r2, [r7, #20]
 8012d0e:	f7fd ff0f 	bl	8010b30 <disk_read>
 8012d12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d004      	beq.n	8012d22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	755a      	strb	r2, [r3, #21]
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e05a      	b.n	8012dd8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	697a      	ldr	r2, [r7, #20]
 8012d26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	899b      	ldrh	r3, [r3, #12]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	699b      	ldr	r3, [r3, #24]
 8012d32:	693a      	ldr	r2, [r7, #16]
 8012d34:	8992      	ldrh	r2, [r2, #12]
 8012d36:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d3a:	fb02 f201 	mul.w	r2, r2, r1
 8012d3e:	1a9b      	subs	r3, r3, r2
 8012d40:	1ac3      	subs	r3, r0, r3
 8012d42:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d901      	bls.n	8012d50 <f_write+0x298>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	699b      	ldr	r3, [r3, #24]
 8012d5a:	693a      	ldr	r2, [r7, #16]
 8012d5c:	8992      	ldrh	r2, [r2, #12]
 8012d5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012d62:	fb02 f200 	mul.w	r2, r2, r0
 8012d66:	1a9b      	subs	r3, r3, r2
 8012d68:	440b      	add	r3, r1
 8012d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d6c:	69f9      	ldr	r1, [r7, #28]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fd ffbe 	bl	8010cf0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	7d1b      	ldrb	r3, [r3, #20]
 8012d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012d7c:	b2da      	uxtb	r2, r3
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012d82:	69fa      	ldr	r2, [r7, #28]
 8012d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d86:	4413      	add	r3, r2
 8012d88:	61fb      	str	r3, [r7, #28]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	699a      	ldr	r2, [r3, #24]
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	441a      	add	r2, r3
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	619a      	str	r2, [r3, #24]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	68da      	ldr	r2, [r3, #12]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	699b      	ldr	r3, [r3, #24]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	bf38      	it	cc
 8012da2:	461a      	movcc	r2, r3
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	60da      	str	r2, [r3, #12]
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	441a      	add	r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	601a      	str	r2, [r3, #0]
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	f47f aeb5 	bne.w	8012b2e <f_write+0x76>
 8012dc4:	e000      	b.n	8012dc8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012dc6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	7d1b      	ldrb	r3, [r3, #20]
 8012dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dd0:	b2da      	uxtb	r2, r3
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3730      	adds	r7, #48	; 0x30
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f107 0208 	add.w	r2, r7, #8
 8012dee:	4611      	mov	r1, r2
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff fc19 	bl	8012628 <validate>
 8012df6:	4603      	mov	r3, r0
 8012df8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d168      	bne.n	8012ed2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	7d1b      	ldrb	r3, [r3, #20]
 8012e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d062      	beq.n	8012ed2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	7d1b      	ldrb	r3, [r3, #20]
 8012e10:	b25b      	sxtb	r3, r3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	da15      	bge.n	8012e42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	7858      	ldrb	r0, [r3, #1]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6a1a      	ldr	r2, [r3, #32]
 8012e24:	2301      	movs	r3, #1
 8012e26:	f7fd fea3 	bl	8010b70 <disk_write>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d001      	beq.n	8012e34 <f_sync+0x54>
 8012e30:	2301      	movs	r3, #1
 8012e32:	e04f      	b.n	8012ed4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
 8012e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e3c:	b2da      	uxtb	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012e42:	f000 fae7 	bl	8013414 <get_fattime>
 8012e46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4e:	4619      	mov	r1, r3
 8012e50:	4610      	mov	r0, r2
 8012e52:	f7fe f97b 	bl	801114c <move_window>
 8012e56:	4603      	mov	r3, r0
 8012e58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012e5a:	7dfb      	ldrb	r3, [r7, #23]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d138      	bne.n	8012ed2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	330b      	adds	r3, #11
 8012e6a:	781a      	ldrb	r2, [r3, #0]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	330b      	adds	r3, #11
 8012e70:	f042 0220 	orr.w	r2, r2, #32
 8012e74:	b2d2      	uxtb	r2, r2
 8012e76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6818      	ldr	r0, [r3, #0]
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	461a      	mov	r2, r3
 8012e82:	68f9      	ldr	r1, [r7, #12]
 8012e84:	f7fe ff00 	bl	8011c88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f103 021c 	add.w	r2, r3, #28
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	4619      	mov	r1, r3
 8012e94:	4610      	mov	r0, r2
 8012e96:	f7fd feff 	bl	8010c98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	3316      	adds	r3, #22
 8012e9e:	6939      	ldr	r1, [r7, #16]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fd fef9 	bl	8010c98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	3312      	adds	r3, #18
 8012eaa:	2100      	movs	r1, #0
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fd fed8 	bl	8010c62 <st_word>
					fs->wflag = 1;
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fe f974 	bl	80111a8 <sync_fs>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	7d1b      	ldrb	r3, [r3, #20]
 8012ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3718      	adds	r7, #24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ff7b 	bl	8012de0 <f_sync>
 8012eea:	4603      	mov	r3, r0
 8012eec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012eee:	7bfb      	ldrb	r3, [r7, #15]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d118      	bne.n	8012f26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f107 0208 	add.w	r2, r7, #8
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ff fb93 	bl	8012628 <validate>
 8012f02:	4603      	mov	r3, r0
 8012f04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012f06:	7bfb      	ldrb	r3, [r7, #15]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d10c      	bne.n	8012f26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	691b      	ldr	r3, [r3, #16]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe f877 	bl	8011004 <dec_lock>
 8012f16:	4603      	mov	r3, r0
 8012f18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d102      	bne.n	8012f26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b096      	sub	sp, #88	; 0x58
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012f38:	f107 0108 	add.w	r1, r7, #8
 8012f3c:	1d3b      	adds	r3, r7, #4
 8012f3e:	2202      	movs	r2, #2
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff f8ed 	bl	8012120 <find_volume>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f040 80f2 	bne.w	801313e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	f107 030c 	add.w	r3, r7, #12
 8012f60:	4611      	mov	r1, r2
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fe ffcc 	bl	8011f00 <follow_path>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d102      	bne.n	8012f7c <f_mkdir+0x4c>
 8012f76:	2308      	movs	r3, #8
 8012f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f80:	2b04      	cmp	r3, #4
 8012f82:	f040 80dc 	bne.w	801313e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012f86:	f107 030c 	add.w	r3, r7, #12
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fe fbe6 	bl	801175e <create_chain>
 8012f92:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	895b      	ldrh	r3, [r3, #10]
 8012f98:	461a      	mov	r2, r3
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	899b      	ldrh	r3, [r3, #12]
 8012f9e:	fb03 f302 	mul.w	r3, r3, r2
 8012fa2:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d102      	bne.n	8012fb6 <f_mkdir+0x86>
 8012fb0:	2307      	movs	r3, #7
 8012fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d102      	bne.n	8012fc2 <f_mkdir+0x92>
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc8:	d102      	bne.n	8012fd0 <f_mkdir+0xa0>
 8012fca:	2301      	movs	r3, #1
 8012fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d106      	bne.n	8012fe6 <f_mkdir+0xb6>
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fe f872 	bl	80110c4 <sync_window>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012fe6:	f000 fa15 	bl	8013414 <get_fattime>
 8012fea:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d16c      	bne.n	80130ce <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fe f945 	bl	8011288 <clust2sect>
 8012ffe:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	3334      	adds	r3, #52	; 0x34
 8013004:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	461a      	mov	r2, r3
 801300c:	2100      	movs	r1, #0
 801300e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013010:	f7fd fe8f 	bl	8010d32 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013014:	220b      	movs	r2, #11
 8013016:	2120      	movs	r1, #32
 8013018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801301a:	f7fd fe8a 	bl	8010d32 <mem_set>
					dir[DIR_Name] = '.';
 801301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013020:	222e      	movs	r2, #46	; 0x2e
 8013022:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013026:	330b      	adds	r3, #11
 8013028:	2210      	movs	r2, #16
 801302a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801302e:	3316      	adds	r3, #22
 8013030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013032:	4618      	mov	r0, r3
 8013034:	f7fd fe30 	bl	8010c98 <st_dword>
					st_clust(fs, dir, dcl);
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801303c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801303e:	4618      	mov	r0, r3
 8013040:	f7fe fe22 	bl	8011c88 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013046:	3320      	adds	r3, #32
 8013048:	2220      	movs	r2, #32
 801304a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801304c:	4618      	mov	r0, r3
 801304e:	f7fd fe4f 	bl	8010cf0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013054:	3321      	adds	r3, #33	; 0x21
 8013056:	222e      	movs	r2, #46	; 0x2e
 8013058:	701a      	strb	r2, [r3, #0]
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	2b03      	cmp	r3, #3
 8013064:	d106      	bne.n	8013074 <f_mkdir+0x144>
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801306c:	429a      	cmp	r2, r3
 801306e:	d101      	bne.n	8013074 <f_mkdir+0x144>
 8013070:	2300      	movs	r3, #0
 8013072:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013074:	68b8      	ldr	r0, [r7, #8]
 8013076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013078:	3320      	adds	r3, #32
 801307a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801307c:	4619      	mov	r1, r3
 801307e:	f7fe fe03 	bl	8011c88 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	895b      	ldrh	r3, [r3, #10]
 8013086:	653b      	str	r3, [r7, #80]	; 0x50
 8013088:	e01c      	b.n	80130c4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801308c:	1c5a      	adds	r2, r3, #1
 801308e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013090:	68ba      	ldr	r2, [r7, #8]
 8013092:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2201      	movs	r2, #1
 8013098:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	4618      	mov	r0, r3
 801309e:	f7fe f811 	bl	80110c4 <sync_window>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80130a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d10d      	bne.n	80130cc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	899b      	ldrh	r3, [r3, #12]
 80130b4:	461a      	mov	r2, r3
 80130b6:	2100      	movs	r1, #0
 80130b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130ba:	f7fd fe3a 	bl	8010d32 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80130be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130c0:	3b01      	subs	r3, #1
 80130c2:	653b      	str	r3, [r7, #80]	; 0x50
 80130c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d1df      	bne.n	801308a <f_mkdir+0x15a>
 80130ca:	e000      	b.n	80130ce <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80130cc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80130ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d107      	bne.n	80130e6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80130d6:	f107 030c 	add.w	r3, r7, #12
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fe fe49 	bl	8011d72 <dir_register>
 80130e0:	4603      	mov	r3, r0
 80130e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80130e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d120      	bne.n	8013130 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80130ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80130f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130f4:	3316      	adds	r3, #22
 80130f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fd fdcd 	bl	8010c98 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013102:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013104:	4618      	mov	r0, r3
 8013106:	f7fe fdbf 	bl	8011c88 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801310c:	330b      	adds	r3, #11
 801310e:	2210      	movs	r2, #16
 8013110:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	2201      	movs	r2, #1
 8013116:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10e      	bne.n	801313e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	f7fe f840 	bl	80111a8 <sync_fs>
 8013128:	4603      	mov	r3, r0
 801312a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801312e:	e006      	b.n	801313e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013130:	f107 030c 	add.w	r3, r7, #12
 8013134:	2200      	movs	r2, #0
 8013136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013138:	4618      	mov	r0, r3
 801313a:	f7fe faab 	bl	8011694 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801313e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013142:	4618      	mov	r0, r3
 8013144:	3758      	adds	r7, #88	; 0x58
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
	...

0801314c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801314c:	b480      	push	{r7}
 801314e:	b087      	sub	sp, #28
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	4613      	mov	r3, r2
 8013158:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801315a:	2301      	movs	r3, #1
 801315c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801315e:	2300      	movs	r3, #0
 8013160:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013162:	4b1f      	ldr	r3, [pc, #124]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 8013164:	7a5b      	ldrb	r3, [r3, #9]
 8013166:	b2db      	uxtb	r3, r3
 8013168:	2b00      	cmp	r3, #0
 801316a:	d131      	bne.n	80131d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801316c:	4b1c      	ldr	r3, [pc, #112]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 801316e:	7a5b      	ldrb	r3, [r3, #9]
 8013170:	b2db      	uxtb	r3, r3
 8013172:	461a      	mov	r2, r3
 8013174:	4b1a      	ldr	r3, [pc, #104]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 8013176:	2100      	movs	r1, #0
 8013178:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801317a:	4b19      	ldr	r3, [pc, #100]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 801317c:	7a5b      	ldrb	r3, [r3, #9]
 801317e:	b2db      	uxtb	r3, r3
 8013180:	4a17      	ldr	r2, [pc, #92]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	4413      	add	r3, r2
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801318a:	4b15      	ldr	r3, [pc, #84]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 801318c:	7a5b      	ldrb	r3, [r3, #9]
 801318e:	b2db      	uxtb	r3, r3
 8013190:	461a      	mov	r2, r3
 8013192:	4b13      	ldr	r3, [pc, #76]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 8013194:	4413      	add	r3, r2
 8013196:	79fa      	ldrb	r2, [r7, #7]
 8013198:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801319a:	4b11      	ldr	r3, [pc, #68]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 801319c:	7a5b      	ldrb	r3, [r3, #9]
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	1c5a      	adds	r2, r3, #1
 80131a2:	b2d1      	uxtb	r1, r2
 80131a4:	4a0e      	ldr	r2, [pc, #56]	; (80131e0 <FATFS_LinkDriverEx+0x94>)
 80131a6:	7251      	strb	r1, [r2, #9]
 80131a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80131aa:	7dbb      	ldrb	r3, [r7, #22]
 80131ac:	3330      	adds	r3, #48	; 0x30
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	3301      	adds	r3, #1
 80131b8:	223a      	movs	r2, #58	; 0x3a
 80131ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	3302      	adds	r3, #2
 80131c0:	222f      	movs	r2, #47	; 0x2f
 80131c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	3303      	adds	r3, #3
 80131c8:	2200      	movs	r2, #0
 80131ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80131cc:	2300      	movs	r3, #0
 80131ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80131d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	371c      	adds	r7, #28
 80131d6:	46bd      	mov	sp, r7
 80131d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop
 80131e0:	200003d0 	.word	0x200003d0

080131e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80131ee:	2200      	movs	r2, #0
 80131f0:	6839      	ldr	r1, [r7, #0]
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7ff ffaa 	bl	801314c <FATFS_LinkDriverEx>
 80131f8:	4603      	mov	r3, r0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3708      	adds	r7, #8
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
	...

08013204 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8013204:	b480      	push	{r7}
 8013206:	b085      	sub	sp, #20
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	460b      	mov	r3, r1
 801320e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8013214:	2301      	movs	r3, #1
 8013216:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8013218:	4b15      	ldr	r3, [pc, #84]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 801321a:	7a5b      	ldrb	r3, [r3, #9]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	d01e      	beq.n	8013260 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	3b30      	subs	r3, #48	; 0x30
 8013228:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801322a:	7bbb      	ldrb	r3, [r7, #14]
 801322c:	4a10      	ldr	r2, [pc, #64]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	4413      	add	r3, r2
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d013      	beq.n	8013260 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8013238:	7bbb      	ldrb	r3, [r7, #14]
 801323a:	4a0d      	ldr	r2, [pc, #52]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 801323c:	009b      	lsls	r3, r3, #2
 801323e:	4413      	add	r3, r2
 8013240:	2200      	movs	r2, #0
 8013242:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8013244:	7bbb      	ldrb	r3, [r7, #14]
 8013246:	4a0a      	ldr	r2, [pc, #40]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 8013248:	4413      	add	r3, r2
 801324a:	2200      	movs	r2, #0
 801324c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 801324e:	4b08      	ldr	r3, [pc, #32]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 8013250:	7a5b      	ldrb	r3, [r3, #9]
 8013252:	b2db      	uxtb	r3, r3
 8013254:	3b01      	subs	r3, #1
 8013256:	b2da      	uxtb	r2, r3
 8013258:	4b05      	ldr	r3, [pc, #20]	; (8013270 <FATFS_UnLinkDriverEx+0x6c>)
 801325a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 801325c:	2300      	movs	r3, #0
 801325e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013260:	7bfb      	ldrb	r3, [r7, #15]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3714      	adds	r7, #20
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr
 801326e:	bf00      	nop
 8013270:	200003d0 	.word	0x200003d0

08013274 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 801327c:	2100      	movs	r1, #0
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7ff ffc0 	bl	8013204 <FATFS_UnLinkDriverEx>
 8013284:	4603      	mov	r3, r0
}
 8013286:	4618      	mov	r0, r3
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
	...

08013290 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013296:	2300      	movs	r3, #0
 8013298:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801329a:	f000 f896 	bl	80133ca <BSP_SD_IsDetected>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d001      	beq.n	80132a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80132a4:	2301      	movs	r3, #1
 80132a6:	e012      	b.n	80132ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80132a8:	480b      	ldr	r0, [pc, #44]	; (80132d8 <BSP_SD_Init+0x48>)
 80132aa:	f7f6 fe23 	bl	8009ef4 <HAL_SD_Init>
 80132ae:	4603      	mov	r3, r0
 80132b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d109      	bne.n	80132cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80132b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80132bc:	4806      	ldr	r0, [pc, #24]	; (80132d8 <BSP_SD_Init+0x48>)
 80132be:	f7f7 fbfe 	bl	800aabe <HAL_SD_ConfigWideBusOperation>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80132c8:	2301      	movs	r3, #1
 80132ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80132cc:	79fb      	ldrb	r3, [r7, #7]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	20008590 	.word	0x20008590

080132dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b086      	sub	sp, #24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	68ba      	ldr	r2, [r7, #8]
 80132f0:	68f9      	ldr	r1, [r7, #12]
 80132f2:	4806      	ldr	r0, [pc, #24]	; (801330c <BSP_SD_ReadBlocks_DMA+0x30>)
 80132f4:	f7f6 fe86 	bl	800a004 <HAL_SD_ReadBlocks_DMA>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d001      	beq.n	8013302 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132fe:	2301      	movs	r3, #1
 8013300:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013302:	7dfb      	ldrb	r3, [r7, #23]
}
 8013304:	4618      	mov	r0, r3
 8013306:	3718      	adds	r7, #24
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	20008590 	.word	0x20008590

08013310 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	68f9      	ldr	r1, [r7, #12]
 8013326:	4806      	ldr	r0, [pc, #24]	; (8013340 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013328:	f7f6 ff38 	bl	800a19c <HAL_SD_WriteBlocks_DMA>
 801332c:	4603      	mov	r3, r0
 801332e:	2b00      	cmp	r3, #0
 8013330:	d001      	beq.n	8013336 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013332:	2301      	movs	r3, #1
 8013334:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013336:	7dfb      	ldrb	r3, [r7, #23]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3718      	adds	r7, #24
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	20008590 	.word	0x20008590

08013344 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013348:	4805      	ldr	r0, [pc, #20]	; (8013360 <BSP_SD_GetCardState+0x1c>)
 801334a:	f7f7 fc34 	bl	800abb6 <HAL_SD_GetCardState>
 801334e:	4603      	mov	r3, r0
 8013350:	2b04      	cmp	r3, #4
 8013352:	bf14      	ite	ne
 8013354:	2301      	movne	r3, #1
 8013356:	2300      	moveq	r3, #0
 8013358:	b2db      	uxtb	r3, r3
}
 801335a:	4618      	mov	r0, r3
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	20008590 	.word	0x20008590

08013364 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	4803      	ldr	r0, [pc, #12]	; (801337c <BSP_SD_GetCardInfo+0x18>)
 8013370:	f7f7 fb79 	bl	800aa66 <HAL_SD_GetCardInfo>
}
 8013374:	bf00      	nop
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	20008590 	.word	0x20008590

08013380 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013388:	f000 f818 	bl	80133bc <BSP_SD_AbortCallback>
}
 801338c:	bf00      	nop
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801339c:	f002 fd26 	bl	8015dec <BSP_SD_WriteCpltCallback>
}
 80133a0:	bf00      	nop
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80133b0:	f002 fd28 	bl	8015e04 <BSP_SD_ReadCpltCallback>
}
 80133b4:	bf00      	nop
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80133bc:	b480      	push	{r7}
 80133be:	af00      	add	r7, sp, #0

}
 80133c0:	bf00      	nop
 80133c2:	46bd      	mov	sp, r7
 80133c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c8:	4770      	bx	lr

080133ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b082      	sub	sp, #8
 80133ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80133d0:	2301      	movs	r3, #1
 80133d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80133d4:	f000 f826 	bl	8013424 <BSP_PlatformIsDetected>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80133de:	2300      	movs	r3, #0
 80133e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	b2db      	uxtb	r3, r3
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
	...

080133f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80133f4:	4904      	ldr	r1, [pc, #16]	; (8013408 <MX_FATFS_Init+0x18>)
 80133f6:	4805      	ldr	r0, [pc, #20]	; (801340c <MX_FATFS_Init+0x1c>)
 80133f8:	f7ff fef4 	bl	80131e4 <FATFS_LinkDriver>
 80133fc:	4603      	mov	r3, r0
 80133fe:	461a      	mov	r2, r3
 8013400:	4b03      	ldr	r3, [pc, #12]	; (8013410 <MX_FATFS_Init+0x20>)
 8013402:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013404:	bf00      	nop
 8013406:	bd80      	pop	{r7, pc}
 8013408:	20006334 	.word	0x20006334
 801340c:	0801e340 	.word	0x0801e340
 8013410:	20006330 	.word	0x20006330

08013414 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013414:	b480      	push	{r7}
 8013416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013418:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 801341a:	4618      	mov	r0, r3
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801342a:	2301      	movs	r3, #1
 801342c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801342e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013432:	4806      	ldr	r0, [pc, #24]	; (801344c <BSP_PlatformIsDetected+0x28>)
 8013434:	f7f3 fd6c 	bl	8006f10 <HAL_GPIO_ReadPin>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801343e:	2300      	movs	r3, #0
 8013440:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8013442:	79fb      	ldrb	r3, [r7, #7]
}  
 8013444:	4618      	mov	r0, r3
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	40020000 	.word	0x40020000

08013450 <print>:
{
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
};
 8013458:	bf00      	nop
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <println>:
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
};
 801346c:	bf00      	nop
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <printv>:
static inline void printv(char* str, uint32_t len)
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]

	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
 8013482:	bf00      	nop
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr

0801348e <print_int>:
static inline void print_int(int number)
{
 801348e:	b480      	push	{r7}
 8013490:	b083      	sub	sp, #12
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
	printLen = sprintf(printBuffer, "%d", number);
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
 8013496:	bf00      	nop
 8013498:	370c      	adds	r7, #12
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr

080134a2 <print_float>:
static inline void print_float(float number)
{
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	ed87 0a01 	vstr	s0, [r7, #4]
	printLen = sprintf(printBuffer, "%f", number);
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
 80134ac:	bf00      	nop
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 80134b8:	b480      	push	{r7}
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c2:	4618      	mov	r0, r3
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80134cc:	b480      	push	{r7}
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d6:	4a04      	ldr	r2, [pc, #16]	; (80134e8 <millis+0x1c>)
 80134d8:	fba2 2303 	umull	r2, r3, r2, r3
 80134dc:	099b      	lsrs	r3, r3, #6
 80134de:	4618      	mov	r0, r3
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr
 80134e8:	10624dd3 	.word	0x10624dd3

080134ec <getTime>:
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b08c      	sub	sp, #48	; 0x30
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80134f4:	f107 031c 	add.w	r3, r7, #28
 80134f8:	2200      	movs	r2, #0
 80134fa:	601a      	str	r2, [r3, #0]
 80134fc:	605a      	str	r2, [r3, #4]
 80134fe:	609a      	str	r2, [r3, #8]
 8013500:	60da      	str	r2, [r3, #12]
 8013502:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8013504:	2300      	movs	r3, #0
 8013506:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8013508:	f107 030c 	add.w	r3, r7, #12
 801350c:	2200      	movs	r2, #0
 801350e:	601a      	str	r2, [r3, #0]
 8013510:	605a      	str	r2, [r3, #4]
 8013512:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8013514:	f002 fa38 	bl	8015988 <Get_RTC_Instance>
 8013518:	f107 031c 	add.w	r3, r7, #28
 801351c:	2200      	movs	r2, #0
 801351e:	4619      	mov	r1, r3
 8013520:	f7f6 fbc9 	bl	8009cb6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8013524:	f002 fa30 	bl	8015988 <Get_RTC_Instance>
 8013528:	f107 0318 	add.w	r3, r7, #24
 801352c:	2200      	movs	r2, #0
 801352e:	4619      	mov	r1, r3
 8013530:	f7f6 fc1f 	bl	8009d72 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 8013534:	7efb      	ldrb	r3, [r7, #27]
 8013536:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8013538:	7e7b      	ldrb	r3, [r7, #25]
 801353a:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 801353c:	7ebb      	ldrb	r3, [r7, #26]
 801353e:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8013540:	7e3b      	ldrb	r3, [r7, #24]
 8013542:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8013544:	7f3b      	ldrb	r3, [r7, #28]
 8013546:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8013548:	7f7b      	ldrb	r3, [r7, #29]
 801354a:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 801354c:	7fbb      	ldrb	r3, [r7, #30]
 801354e:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8013550:	f7ff ffbc 	bl	80134cc <millis>
 8013554:	4602      	mov	r2, r0
 8013556:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <getTime+0x9c>)
 8013558:	fba3 1302 	umull	r1, r3, r3, r2
 801355c:	099b      	lsrs	r3, r3, #6
 801355e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013562:	fb01 f303 	mul.w	r3, r1, r3
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	b29b      	uxth	r3, r3
 801356a:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	461a      	mov	r2, r3
 8013570:	f107 030c 	add.w	r3, r7, #12
 8013574:	cb03      	ldmia	r3!, {r0, r1}
 8013576:	6010      	str	r0, [r2, #0]
 8013578:	6051      	str	r1, [r2, #4]
 801357a:	881b      	ldrh	r3, [r3, #0]
 801357c:	8113      	strh	r3, [r2, #8]
}
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	3730      	adds	r7, #48	; 0x30
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	10624dd3 	.word	0x10624dd3

0801358c <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 801358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801358e:	b091      	sub	sp, #68	; 0x44
 8013590:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 8013592:	f7ed fe2d 	bl	80011f0 <SD_init>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d172      	bne.n	8013682 <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 801359c:	4841      	ldr	r0, [pc, #260]	; (80136a4 <sdTest_begin+0x118>)
 801359e:	f7ff ff61 	bl	8013464 <println>
		print("[SD] Creating test file...");
 80135a2:	4841      	ldr	r0, [pc, #260]	; (80136a8 <sdTest_begin+0x11c>)
 80135a4:	f7ff ff54 	bl	8013450 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 80135a8:	4840      	ldr	r0, [pc, #256]	; (80136ac <sdTest_begin+0x120>)
 80135aa:	f7ed fe5d 	bl	8001268 <SD_newFile>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d161      	bne.n	8013678 <sdTest_begin+0xec>
		{
			println("successful.");
 80135b4:	483e      	ldr	r0, [pc, #248]	; (80136b0 <sdTest_begin+0x124>)
 80135b6:	f7ff ff55 	bl	8013464 <println>
			bool status = true;
 80135ba:	2301      	movs	r3, #1
 80135bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 80135c0:	493c      	ldr	r1, [pc, #240]	; (80136b4 <sdTest_begin+0x128>)
 80135c2:	483a      	ldr	r0, [pc, #232]	; (80136ac <sdTest_begin+0x120>)
 80135c4:	f7ed fe78 	bl	80012b8 <SD_writeToFile>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	bf0c      	ite	eq
 80135ce:	2301      	moveq	r3, #1
 80135d0:	2300      	movne	r3, #0
 80135d2:	b2db      	uxtb	r3, r3
 80135d4:	461a      	mov	r2, r3
 80135d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135da:	4313      	orrs	r3, r2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	bf14      	ite	ne
 80135e0:	2301      	movne	r3, #1
 80135e2:	2300      	moveq	r3, #0
 80135e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 80135e8:	f107 031c 	add.w	r3, r7, #28
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff ff7d 	bl	80134ec <getTime>
			char dateStr[26] = {0};
 80135f2:	463b      	mov	r3, r7
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
 80135f8:	605a      	str	r2, [r3, #4]
 80135fa:	609a      	str	r2, [r3, #8]
 80135fc:	60da      	str	r2, [r3, #12]
 80135fe:	611a      	str	r2, [r3, #16]
 8013600:	615a      	str	r2, [r3, #20]
 8013602:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8013604:	7fbb      	ldrb	r3, [r7, #30]
 8013606:	461e      	mov	r6, r3
 8013608:	7f7b      	ldrb	r3, [r7, #29]
 801360a:	469c      	mov	ip, r3
 801360c:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 801360e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013612:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8013616:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 801361a:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 801361c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 801361e:	4605      	mov	r5, r0
 8013620:	4638      	mov	r0, r7
 8013622:	9504      	str	r5, [sp, #16]
 8013624:	9403      	str	r4, [sp, #12]
 8013626:	9102      	str	r1, [sp, #8]
 8013628:	9201      	str	r2, [sp, #4]
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	4663      	mov	r3, ip
 801362e:	4632      	mov	r2, r6
 8013630:	4921      	ldr	r1, [pc, #132]	; (80136b8 <sdTest_begin+0x12c>)
 8013632:	f004 fc03 	bl	8017e3c <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 8013636:	463b      	mov	r3, r7
 8013638:	4619      	mov	r1, r3
 801363a:	481c      	ldr	r0, [pc, #112]	; (80136ac <sdTest_begin+0x120>)
 801363c:	f7ed fe3c 	bl	80012b8 <SD_writeToFile>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	bf0c      	ite	eq
 8013646:	2301      	moveq	r3, #1
 8013648:	2300      	movne	r3, #0
 801364a:	b2db      	uxtb	r3, r3
 801364c:	461a      	mov	r2, r3
 801364e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013652:	4313      	orrs	r3, r2
 8013654:	2b00      	cmp	r3, #0
 8013656:	bf14      	ite	ne
 8013658:	2301      	movne	r3, #1
 801365a:	2300      	moveq	r3, #0
 801365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8013660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013664:	2b00      	cmp	r3, #0
 8013666:	d003      	beq.n	8013670 <sdTest_begin+0xe4>
 8013668:	4814      	ldr	r0, [pc, #80]	; (80136bc <sdTest_begin+0x130>)
 801366a:	f7ff fefb 	bl	8013464 <println>
 801366e:	e010      	b.n	8013692 <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8013670:	4813      	ldr	r0, [pc, #76]	; (80136c0 <sdTest_begin+0x134>)
 8013672:	f7ff fef7 	bl	8013464 <println>
 8013676:	e00c      	b.n	8013692 <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 8013678:	4812      	ldr	r0, [pc, #72]	; (80136c4 <sdTest_begin+0x138>)
 801367a:	f7ff fef3 	bl	8013464 <println>
			return false;
 801367e:	2300      	movs	r3, #0
 8013680:	e00b      	b.n	801369a <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 8013682:	4811      	ldr	r0, [pc, #68]	; (80136c8 <sdTest_begin+0x13c>)
 8013684:	f7ff feee 	bl	8013464 <println>
		sdActive = false;
 8013688:	4b10      	ldr	r3, [pc, #64]	; (80136cc <sdTest_begin+0x140>)
 801368a:	2200      	movs	r2, #0
 801368c:	701a      	strb	r2, [r3, #0]
		return false;
 801368e:	2300      	movs	r3, #0
 8013690:	e003      	b.n	801369a <sdTest_begin+0x10e>
	}

	sdActive = true;
 8013692:	4b0e      	ldr	r3, [pc, #56]	; (80136cc <sdTest_begin+0x140>)
 8013694:	2201      	movs	r2, #1
 8013696:	701a      	strb	r2, [r3, #0]
	return true;
 8013698:	2301      	movs	r3, #1
}
 801369a:	4618      	mov	r0, r3
 801369c:	372c      	adds	r7, #44	; 0x2c
 801369e:	46bd      	mov	sp, r7
 80136a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136a2:	bf00      	nop
 80136a4:	0801dcb0 	.word	0x0801dcb0
 80136a8:	0801dcc0 	.word	0x0801dcc0
 80136ac:	0801dcdc 	.word	0x0801dcdc
 80136b0:	0801dce8 	.word	0x0801dce8
 80136b4:	0801dcf4 	.word	0x0801dcf4
 80136b8:	0801dd04 	.word	0x0801dd04
 80136bc:	0801dd1c 	.word	0x0801dd1c
 80136c0:	0801dd40 	.word	0x0801dd40
 80136c4:	0801dd64 	.word	0x0801dd64
 80136c8:	0801dd74 	.word	0x0801dd74
 80136cc:	20002e20 	.word	0x20002e20

080136d0 <duplex_begin>:
bool isReceiving;
bool firstTransmission;
uint8_t packetNumber;

static bool duplex_begin(void)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 80136d6:	4b26      	ldr	r3, [pc, #152]	; (8013770 <duplex_begin+0xa0>)
 80136d8:	2220      	movs	r2, #32
 80136da:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 80136dc:	4b24      	ldr	r3, [pc, #144]	; (8013770 <duplex_begin+0xa0>)
 80136de:	2240      	movs	r2, #64	; 0x40
 80136e0:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 80136e2:	4b23      	ldr	r3, [pc, #140]	; (8013770 <duplex_begin+0xa0>)
 80136e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136e8:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 80136ea:	4b21      	ldr	r3, [pc, #132]	; (8013770 <duplex_begin+0xa0>)
 80136ec:	2280      	movs	r2, #128	; 0x80
 80136ee:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 80136f0:	4b1f      	ldr	r3, [pc, #124]	; (8013770 <duplex_begin+0xa0>)
 80136f2:	4a20      	ldr	r2, [pc, #128]	; (8013774 <duplex_begin+0xa4>)
 80136f4:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 80136f6:	4b1e      	ldr	r3, [pc, #120]	; (8013770 <duplex_begin+0xa0>)
 80136f8:	4a1f      	ldr	r2, [pc, #124]	; (8013778 <duplex_begin+0xa8>)
 80136fa:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 80136fc:	4b1c      	ldr	r3, [pc, #112]	; (8013770 <duplex_begin+0xa0>)
 80136fe:	4a1f      	ldr	r2, [pc, #124]	; (801377c <duplex_begin+0xac>)
 8013700:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 8013702:	4b1b      	ldr	r3, [pc, #108]	; (8013770 <duplex_begin+0xa0>)
 8013704:	4a1c      	ldr	r2, [pc, #112]	; (8013778 <duplex_begin+0xa8>)
 8013706:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 8013708:	f002 f92a 	bl	8015960 <Get_SPI1_Instance>
 801370c:	4602      	mov	r2, r0
 801370e:	4b18      	ldr	r3, [pc, #96]	; (8013770 <duplex_begin+0xa0>)
 8013710:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 8013712:	4b17      	ldr	r3, [pc, #92]	; (8013770 <duplex_begin+0xa0>)
 8013714:	4a1a      	ldr	r2, [pc, #104]	; (8013780 <duplex_begin+0xb0>)
 8013716:	ca07      	ldmia	r2, {r0, r1, r2}
 8013718:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 801371c:	4b14      	ldr	r3, [pc, #80]	; (8013770 <duplex_begin+0xa0>)
 801371e:	2201      	movs	r2, #1
 8013720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	uint8_t attempts = 0;
 8013724:	2300      	movs	r3, #0
 8013726:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 8013728:	e00b      	b.n	8013742 <duplex_begin+0x72>
	{
		HAL_Delay(500);
 801372a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801372e:	f7f2 fd89 	bl	8006244 <HAL_Delay>
		if (DUPLEX_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
		attempts++;
 8013732:	79fb      	ldrb	r3, [r7, #7]
 8013734:	3301      	adds	r3, #1
 8013736:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8013738:	79fb      	ldrb	r3, [r7, #7]
 801373a:	2b04      	cmp	r3, #4
 801373c:	d901      	bls.n	8013742 <duplex_begin+0x72>
		{
			if (DUPLEX_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
			return false;
 801373e:	2300      	movs	r3, #0
 8013740:	e011      	b.n	8013766 <duplex_begin+0x96>
	while (!SX1278_init(&radio))
 8013742:	480b      	ldr	r0, [pc, #44]	; (8013770 <duplex_begin+0xa0>)
 8013744:	f7ed ff16 	bl	8001574 <SX1278_init>
 8013748:	4603      	mov	r3, r0
 801374a:	f083 0301 	eor.w	r3, r3, #1
 801374e:	b2db      	uxtb	r3, r3
 8013750:	2b00      	cmp	r3, #0
 8013752:	d1ea      	bne.n	801372a <duplex_begin+0x5a>
		}
	}
	if (DUPLEX_DEBUG) println("[LoRa] Radio successful init!");
	packetNumber = 1;
 8013754:	4b0b      	ldr	r3, [pc, #44]	; (8013784 <duplex_begin+0xb4>)
 8013756:	2201      	movs	r2, #1
 8013758:	701a      	strb	r2, [r3, #0]
	firstTransmission = true;
 801375a:	4b0b      	ldr	r3, [pc, #44]	; (8013788 <duplex_begin+0xb8>)
 801375c:	2201      	movs	r2, #1
 801375e:	701a      	strb	r2, [r3, #0]
	isReceiving = false;
 8013760:	4b0a      	ldr	r3, [pc, #40]	; (801378c <duplex_begin+0xbc>)
 8013762:	2200      	movs	r2, #0
 8013764:	701a      	strb	r2, [r3, #0]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	20002868 	.word	0x20002868
 8013774:	40020800 	.word	0x40020800
 8013778:	40020000 	.word	0x40020000
 801377c:	40020400 	.word	0x40020400
 8013780:	20000124 	.word	0x20000124
 8013784:	20005eb4 	.word	0x20005eb4
 8013788:	20004244 	.word	0x20004244
 801378c:	200062bc 	.word	0x200062bc

08013790 <duplex_checkINT>:

static bool duplex_checkINT()
{
 8013790:	b580      	push	{r7, lr}
 8013792:	af00      	add	r7, sp, #0
	return (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET) || SX1278_intTimeout(&radio));
 8013794:	4b10      	ldr	r3, [pc, #64]	; (80137d8 <duplex_checkINT+0x48>)
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d115      	bne.n	80137c8 <duplex_checkINT+0x38>
 801379c:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <duplex_checkINT+0x4c>)
 801379e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00a      	beq.n	80137bc <duplex_checkINT+0x2c>
 80137a6:	4b0d      	ldr	r3, [pc, #52]	; (80137dc <duplex_checkINT+0x4c>)
 80137a8:	69da      	ldr	r2, [r3, #28]
 80137aa:	4b0c      	ldr	r3, [pc, #48]	; (80137dc <duplex_checkINT+0x4c>)
 80137ac:	8a1b      	ldrh	r3, [r3, #16]
 80137ae:	4619      	mov	r1, r3
 80137b0:	4610      	mov	r0, r2
 80137b2:	f7f3 fbad 	bl	8006f10 <HAL_GPIO_ReadPin>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	d005      	beq.n	80137c8 <duplex_checkINT+0x38>
 80137bc:	4807      	ldr	r0, [pc, #28]	; (80137dc <duplex_checkINT+0x4c>)
 80137be:	f7ee fa16 	bl	8001bee <SX1278_intTimeout>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <duplex_checkINT+0x3c>
 80137c8:	2301      	movs	r3, #1
 80137ca:	e000      	b.n	80137ce <duplex_checkINT+0x3e>
 80137cc:	2300      	movs	r3, #0
 80137ce:	f003 0301 	and.w	r3, r3, #1
 80137d2:	b2db      	uxtb	r3, r3
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	20004244 	.word	0x20004244
 80137dc:	20002868 	.word	0x20002868

080137e0 <duplex_loop>:

static bool duplex_loop(uint8_t* buf, uint8_t len, bool externallyInvoked)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	460b      	mov	r3, r1
 80137ea:	70fb      	strb	r3, [r7, #3]
 80137ec:	4613      	mov	r3, r2
 80137ee:	70bb      	strb	r3, [r7, #2]
	if (radio.active)
 80137f0:	4b61      	ldr	r3, [pc, #388]	; (8013978 <duplex_loop+0x198>)
 80137f2:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f000 80b9 	beq.w	801396e <duplex_loop+0x18e>
	{
		if (radio.useDio0IRQ)
 80137fc:	4b5e      	ldr	r3, [pc, #376]	; (8013978 <duplex_loop+0x198>)
 80137fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 80ab 	beq.w	801395e <duplex_loop+0x17e>
		{
			// manually check for interrupt
			if (externallyInvoked || duplex_checkINT())
 8013808:	78bb      	ldrb	r3, [r7, #2]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d105      	bne.n	801381a <duplex_loop+0x3a>
 801380e:	f7ff ffbf 	bl	8013790 <duplex_checkINT>
 8013812:	4603      	mov	r3, r0
 8013814:	2b00      	cmp	r3, #0
 8013816:	f000 80a0 	beq.w	801395a <duplex_loop+0x17a>
			{
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 801381a:	4b58      	ldr	r3, [pc, #352]	; (801397c <duplex_loop+0x19c>)
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	f083 0301 	eor.w	r3, r3, #1
 8013822:	b2db      	uxtb	r3, r3
 8013824:	2b00      	cmp	r3, #0
 8013826:	d002      	beq.n	801382e <duplex_loop+0x4e>
 8013828:	4853      	ldr	r0, [pc, #332]	; (8013978 <duplex_loop+0x198>)
 801382a:	f7ee f9b3 	bl	8001b94 <SX1278_dio0_IRQ>
				if (packetNumber == 0)
 801382e:	4b54      	ldr	r3, [pc, #336]	; (8013980 <duplex_loop+0x1a0>)
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d130      	bne.n	8013898 <duplex_loop+0xb8>
				{
					if (DUPLEX_DEBUG) println("[LoRa] Packet received!");
					if (radio.newPacket)
 8013836:	4b50      	ldr	r3, [pc, #320]	; (8013978 <duplex_loop+0x198>)
 8013838:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801383c:	2b00      	cmp	r3, #0
 801383e:	d021      	beq.n	8013884 <duplex_loop+0xa4>
					{
						log_radio(&radio, false);
 8013840:	2100      	movs	r1, #0
 8013842:	484d      	ldr	r0, [pc, #308]	; (8013978 <duplex_loop+0x198>)
 8013844:	f7f2 fc32 	bl	80060ac <log_radio>
						if (DUPLEX_PRINT_PACKET)
						{
							printLen = sprintf(printBuffer, "[LoRa] Packet length: %d, rssi: %d, content: [", radio.rxLen, radio.rssi);
 8013848:	4b4b      	ldr	r3, [pc, #300]	; (8013978 <duplex_loop+0x198>)
 801384a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801384e:	461a      	mov	r2, r3
 8013850:	4b49      	ldr	r3, [pc, #292]	; (8013978 <duplex_loop+0x198>)
 8013852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013854:	494b      	ldr	r1, [pc, #300]	; (8013984 <duplex_loop+0x1a4>)
 8013856:	484c      	ldr	r0, [pc, #304]	; (8013988 <duplex_loop+0x1a8>)
 8013858:	f004 faf0 	bl	8017e3c <siprintf>
 801385c:	4603      	mov	r3, r0
 801385e:	461a      	mov	r2, r3
 8013860:	4b4a      	ldr	r3, [pc, #296]	; (801398c <duplex_loop+0x1ac>)
 8013862:	601a      	str	r2, [r3, #0]
							printv(printBuffer, printLen);
 8013864:	4b49      	ldr	r3, [pc, #292]	; (801398c <duplex_loop+0x1ac>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4619      	mov	r1, r3
 801386a:	4847      	ldr	r0, [pc, #284]	; (8013988 <duplex_loop+0x1a8>)
 801386c:	f7ff fe04 	bl	8013478 <printv>
							printv((char*)radio.rxBuffer, radio.rxLen);
 8013870:	4b41      	ldr	r3, [pc, #260]	; (8013978 <duplex_loop+0x198>)
 8013872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013876:	4619      	mov	r1, r3
 8013878:	4845      	ldr	r0, [pc, #276]	; (8013990 <duplex_loop+0x1b0>)
 801387a:	f7ff fdfd 	bl	8013478 <printv>
							println("]");
 801387e:	4845      	ldr	r0, [pc, #276]	; (8013994 <duplex_loop+0x1b4>)
 8013880:	f7ff fdf0 	bl	8013464 <println>
					}
					else if (radio.rxTimeout)
					{
						if (DUPLEX_DEBUG) println("[LoRa] Receive timeout.");
					}
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8013884:	2200      	movs	r2, #0
 8013886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801388a:	4843      	ldr	r0, [pc, #268]	; (8013998 <duplex_loop+0x1b8>)
 801388c:	f7f3 fb58 	bl	8006f40 <HAL_GPIO_WritePin>
					isReceiving = false;
 8013890:	4b42      	ldr	r3, [pc, #264]	; (801399c <duplex_loop+0x1bc>)
 8013892:	2200      	movs	r2, #0
 8013894:	701a      	strb	r2, [r3, #0]
 8013896:	e01b      	b.n	80138d0 <duplex_loop+0xf0>
				else
				{
					if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
					if (DUPLEX_PRINT_PACKET)
					{
						printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
 8013898:	78fb      	ldrb	r3, [r7, #3]
 801389a:	461a      	mov	r2, r3
 801389c:	4940      	ldr	r1, [pc, #256]	; (80139a0 <duplex_loop+0x1c0>)
 801389e:	483a      	ldr	r0, [pc, #232]	; (8013988 <duplex_loop+0x1a8>)
 80138a0:	f004 facc 	bl	8017e3c <siprintf>
 80138a4:	4603      	mov	r3, r0
 80138a6:	461a      	mov	r2, r3
 80138a8:	4b38      	ldr	r3, [pc, #224]	; (801398c <duplex_loop+0x1ac>)
 80138aa:	601a      	str	r2, [r3, #0]
						printv(printBuffer, printLen);
 80138ac:	4b37      	ldr	r3, [pc, #220]	; (801398c <duplex_loop+0x1ac>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4619      	mov	r1, r3
 80138b2:	4835      	ldr	r0, [pc, #212]	; (8013988 <duplex_loop+0x1a8>)
 80138b4:	f7ff fde0 	bl	8013478 <printv>
						printv(buf, len);
 80138b8:	78fb      	ldrb	r3, [r7, #3]
 80138ba:	4619      	mov	r1, r3
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f7ff fddb 	bl	8013478 <printv>
						println("]");
 80138c2:	4834      	ldr	r0, [pc, #208]	; (8013994 <duplex_loop+0x1b4>)
 80138c4:	f7ff fdce 	bl	8013464 <println>
					}
					log_radio(&radio, true);
 80138c8:	2101      	movs	r1, #1
 80138ca:	482b      	ldr	r0, [pc, #172]	; (8013978 <duplex_loop+0x198>)
 80138cc:	f7f2 fbee 	bl	80060ac <log_radio>
				}

				if (packetNumber == DUPLEX_TX_COUNT - 1)
 80138d0:	4b2b      	ldr	r3, [pc, #172]	; (8013980 <duplex_loop+0x1a0>)
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b06      	cmp	r3, #6
 80138d6:	d10f      	bne.n	80138f8 <duplex_loop+0x118>
				{
					SX1278_receive(&radio);
 80138d8:	4827      	ldr	r0, [pc, #156]	; (8013978 <duplex_loop+0x198>)
 80138da:	f7ed ff7f 	bl	80017dc <SX1278_receive>
					packetNumber = -1;
 80138de:	4b28      	ldr	r3, [pc, #160]	; (8013980 <duplex_loop+0x1a0>)
 80138e0:	22ff      	movs	r2, #255	; 0xff
 80138e2:	701a      	strb	r2, [r3, #0]
					isReceiving = true;
 80138e4:	4b2d      	ldr	r3, [pc, #180]	; (801399c <duplex_loop+0x1bc>)
 80138e6:	2201      	movs	r2, #1
 80138e8:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 80138ea:	2201      	movs	r2, #1
 80138ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80138f0:	4829      	ldr	r0, [pc, #164]	; (8013998 <duplex_loop+0x1b8>)
 80138f2:	f7f3 fb25 	bl	8006f40 <HAL_GPIO_WritePin>
 80138f6:	e00c      	b.n	8013912 <duplex_loop+0x132>
				}
				else
				{
					buf[len - 1] = packetNumber;
 80138f8:	78fb      	ldrb	r3, [r7, #3]
 80138fa:	3b01      	subs	r3, #1
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	4413      	add	r3, r2
 8013900:	4a1f      	ldr	r2, [pc, #124]	; (8013980 <duplex_loop+0x1a0>)
 8013902:	7812      	ldrb	r2, [r2, #0]
 8013904:	701a      	strb	r2, [r3, #0]
					SX1278_transmit(&radio, buf, len);
 8013906:	78fb      	ldrb	r3, [r7, #3]
 8013908:	461a      	mov	r2, r3
 801390a:	6879      	ldr	r1, [r7, #4]
 801390c:	481a      	ldr	r0, [pc, #104]	; (8013978 <duplex_loop+0x198>)
 801390e:	f7ed ff29 	bl	8001764 <SX1278_transmit>
					if (DUPLEX_DEBUG) println("[LoRa] Packet pushed!");
				}
				firstTransmission = false;
 8013912:	4b1a      	ldr	r3, [pc, #104]	; (801397c <duplex_loop+0x19c>)
 8013914:	2200      	movs	r2, #0
 8013916:	701a      	strb	r2, [r3, #0]
				packetNumber++;
 8013918:	4b19      	ldr	r3, [pc, #100]	; (8013980 <duplex_loop+0x1a0>)
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	3301      	adds	r3, #1
 801391e:	b2da      	uxtb	r2, r3
 8013920:	4b17      	ldr	r3, [pc, #92]	; (8013980 <duplex_loop+0x1a0>)
 8013922:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 8013924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013928:	481b      	ldr	r0, [pc, #108]	; (8013998 <duplex_loop+0x1b8>)
 801392a:	f7f3 fb22 	bl	8006f72 <HAL_GPIO_TogglePin>
				return true && !(radio.rxTimeout && isReceiving);
 801392e:	4b12      	ldr	r3, [pc, #72]	; (8013978 <duplex_loop+0x198>)
 8013930:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013934:	f083 0301 	eor.w	r3, r3, #1
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b00      	cmp	r3, #0
 801393c:	d106      	bne.n	801394c <duplex_loop+0x16c>
 801393e:	4b17      	ldr	r3, [pc, #92]	; (801399c <duplex_loop+0x1bc>)
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	f083 0301 	eor.w	r3, r3, #1
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d001      	beq.n	8013950 <duplex_loop+0x170>
 801394c:	2301      	movs	r3, #1
 801394e:	e000      	b.n	8013952 <duplex_loop+0x172>
 8013950:	2300      	movs	r3, #0
 8013952:	f003 0301 	and.w	r3, r3, #1
 8013956:	b2db      	uxtb	r3, r3
 8013958:	e00a      	b.n	8013970 <duplex_loop+0x190>
			}
			else return false;
 801395a:	2300      	movs	r3, #0
 801395c:	e008      	b.n	8013970 <duplex_loop+0x190>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 801395e:	78fb      	ldrb	r3, [r7, #3]
 8013960:	461a      	mov	r2, r3
 8013962:	6879      	ldr	r1, [r7, #4]
 8013964:	4804      	ldr	r0, [pc, #16]	; (8013978 <duplex_loop+0x198>)
 8013966:	f7ed fefd 	bl	8001764 <SX1278_transmit>
			if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
			return true;
 801396a:	2301      	movs	r3, #1
 801396c:	e000      	b.n	8013970 <duplex_loop+0x190>
		}
	}
	return false;
 801396e:	2300      	movs	r3, #0
}
 8013970:	4618      	mov	r0, r3
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	20002868 	.word	0x20002868
 801397c:	20004244 	.word	0x20004244
 8013980:	20005eb4 	.word	0x20005eb4
 8013984:	0801ddc4 	.word	0x0801ddc4
 8013988:	200003e0 	.word	0x200003e0
 801398c:	200003dc 	.word	0x200003dc
 8013990:	200028ac 	.word	0x200028ac
 8013994:	0801ddf4 	.word	0x0801ddf4
 8013998:	40020400 	.word	0x40020400
 801399c:	200062bc 	.word	0x200062bc
 80139a0:	0801ddf8 	.word	0x0801ddf8

080139a4 <imuTest_getData>:
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

bool imuActive;

static bool imuTest_getData(void)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 80139a8:	213a      	movs	r1, #58	; 0x3a
 80139aa:	20d2      	movs	r0, #210	; 0xd2
 80139ac:	f7ef ff75 	bl	800389a <MPU_readByte>
 80139b0:	4603      	mov	r3, r0
 80139b2:	f003 0301 	and.w	r3, r3, #1
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 80bf 	beq.w	8013b3a <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 80139bc:	4860      	ldr	r0, [pc, #384]	; (8013b40 <imuTest_getData+0x19c>)
 80139be:	f7f0 f843 	bl	8003a48 <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 80139c2:	4b5f      	ldr	r3, [pc, #380]	; (8013b40 <imuTest_getData+0x19c>)
 80139c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139c8:	ee07 3a90 	vmov	s15, r3
 80139cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139d0:	4b5c      	ldr	r3, [pc, #368]	; (8013b44 <imuTest_getData+0x1a0>)
 80139d2:	edd3 7a00 	vldr	s15, [r3]
 80139d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139da:	4b5b      	ldr	r3, [pc, #364]	; (8013b48 <imuTest_getData+0x1a4>)
 80139dc:	edd3 7a00 	vldr	s15, [r3]
 80139e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139e4:	4b59      	ldr	r3, [pc, #356]	; (8013b4c <imuTest_getData+0x1a8>)
 80139e6:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 80139ea:	4b55      	ldr	r3, [pc, #340]	; (8013b40 <imuTest_getData+0x19c>)
 80139ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139f0:	ee07 3a90 	vmov	s15, r3
 80139f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139f8:	4b52      	ldr	r3, [pc, #328]	; (8013b44 <imuTest_getData+0x1a0>)
 80139fa:	edd3 7a00 	vldr	s15, [r3]
 80139fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a02:	4b51      	ldr	r3, [pc, #324]	; (8013b48 <imuTest_getData+0x1a4>)
 8013a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8013a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a0c:	4b50      	ldr	r3, [pc, #320]	; (8013b50 <imuTest_getData+0x1ac>)
 8013a0e:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 8013a12:	4b4b      	ldr	r3, [pc, #300]	; (8013b40 <imuTest_getData+0x19c>)
 8013a14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a18:	ee07 3a90 	vmov	s15, r3
 8013a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a20:	4b48      	ldr	r3, [pc, #288]	; (8013b44 <imuTest_getData+0x1a0>)
 8013a22:	edd3 7a00 	vldr	s15, [r3]
 8013a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a2a:	4b47      	ldr	r3, [pc, #284]	; (8013b48 <imuTest_getData+0x1a4>)
 8013a2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a34:	4b47      	ldr	r3, [pc, #284]	; (8013b54 <imuTest_getData+0x1b0>)
 8013a36:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 8013a3a:	4847      	ldr	r0, [pc, #284]	; (8013b58 <imuTest_getData+0x1b4>)
 8013a3c:	f7f0 f830 	bl	8003aa0 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 8013a40:	4b45      	ldr	r3, [pc, #276]	; (8013b58 <imuTest_getData+0x1b4>)
 8013a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a46:	ee07 3a90 	vmov	s15, r3
 8013a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a4e:	4b43      	ldr	r3, [pc, #268]	; (8013b5c <imuTest_getData+0x1b8>)
 8013a50:	edd3 7a00 	vldr	s15, [r3]
 8013a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a58:	4b41      	ldr	r3, [pc, #260]	; (8013b60 <imuTest_getData+0x1bc>)
 8013a5a:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8013a5e:	4b3e      	ldr	r3, [pc, #248]	; (8013b58 <imuTest_getData+0x1b4>)
 8013a60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a64:	ee07 3a90 	vmov	s15, r3
 8013a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a6c:	4b3b      	ldr	r3, [pc, #236]	; (8013b5c <imuTest_getData+0x1b8>)
 8013a6e:	edd3 7a00 	vldr	s15, [r3]
 8013a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a76:	4b3b      	ldr	r3, [pc, #236]	; (8013b64 <imuTest_getData+0x1c0>)
 8013a78:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8013a7c:	4b36      	ldr	r3, [pc, #216]	; (8013b58 <imuTest_getData+0x1b4>)
 8013a7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013a82:	ee07 3a90 	vmov	s15, r3
 8013a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a8a:	4b34      	ldr	r3, [pc, #208]	; (8013b5c <imuTest_getData+0x1b8>)
 8013a8c:	edd3 7a00 	vldr	s15, [r3]
 8013a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a94:	4b34      	ldr	r3, [pc, #208]	; (8013b68 <imuTest_getData+0x1c4>)
 8013a96:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 8013a9a:	4834      	ldr	r0, [pc, #208]	; (8013b6c <imuTest_getData+0x1c8>)
 8013a9c:	f7f0 f82c 	bl	8003af8 <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 8013aa0:	4b32      	ldr	r3, [pc, #200]	; (8013b6c <imuTest_getData+0x1c8>)
 8013aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013aa6:	ee07 3a90 	vmov	s15, r3
 8013aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013aae:	4b30      	ldr	r3, [pc, #192]	; (8013b70 <imuTest_getData+0x1cc>)
 8013ab0:	edd3 7a00 	vldr	s15, [r3]
 8013ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ab8:	4b2e      	ldr	r3, [pc, #184]	; (8013b74 <imuTest_getData+0x1d0>)
 8013aba:	edd3 7a00 	vldr	s15, [r3]
 8013abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ac2:	4b2d      	ldr	r3, [pc, #180]	; (8013b78 <imuTest_getData+0x1d4>)
 8013ac4:	edd3 7a00 	vldr	s15, [r3]
 8013ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013acc:	4b2b      	ldr	r3, [pc, #172]	; (8013b7c <imuTest_getData+0x1d8>)
 8013ace:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 8013ad2:	4b26      	ldr	r3, [pc, #152]	; (8013b6c <imuTest_getData+0x1c8>)
 8013ad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013ad8:	ee07 3a90 	vmov	s15, r3
 8013adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ae0:	4b23      	ldr	r3, [pc, #140]	; (8013b70 <imuTest_getData+0x1cc>)
 8013ae2:	edd3 7a00 	vldr	s15, [r3]
 8013ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aea:	4b22      	ldr	r3, [pc, #136]	; (8013b74 <imuTest_getData+0x1d0>)
 8013aec:	edd3 7a01 	vldr	s15, [r3, #4]
 8013af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013af4:	4b20      	ldr	r3, [pc, #128]	; (8013b78 <imuTest_getData+0x1d4>)
 8013af6:	edd3 7a01 	vldr	s15, [r3, #4]
 8013afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013afe:	4b20      	ldr	r3, [pc, #128]	; (8013b80 <imuTest_getData+0x1dc>)
 8013b00:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 8013b04:	4b19      	ldr	r3, [pc, #100]	; (8013b6c <imuTest_getData+0x1c8>)
 8013b06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013b0a:	ee07 3a90 	vmov	s15, r3
 8013b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b12:	4b17      	ldr	r3, [pc, #92]	; (8013b70 <imuTest_getData+0x1cc>)
 8013b14:	edd3 7a00 	vldr	s15, [r3]
 8013b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b1c:	4b15      	ldr	r3, [pc, #84]	; (8013b74 <imuTest_getData+0x1d0>)
 8013b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b26:	4b14      	ldr	r3, [pc, #80]	; (8013b78 <imuTest_getData+0x1d4>)
 8013b28:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b30:	4b14      	ldr	r3, [pc, #80]	; (8013b84 <imuTest_getData+0x1e0>)
 8013b32:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8013b36:	2301      	movs	r3, #1
 8013b38:	e000      	b.n	8013b3c <imuTest_getData+0x198>
	}
	return false;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	20002ce0 	.word	0x20002ce0
 8013b44:	20002d64 	.word	0x20002d64
 8013b48:	20002ce8 	.word	0x20002ce8
 8013b4c:	20002d60 	.word	0x20002d60
 8013b50:	20002e0c 	.word	0x20002e0c
 8013b54:	20002d28 	.word	0x20002d28
 8013b58:	20002d30 	.word	0x20002d30
 8013b5c:	20002da4 	.word	0x20002da4
 8013b60:	20002dfc 	.word	0x20002dfc
 8013b64:	20002d24 	.word	0x20002d24
 8013b68:	20002d94 	.word	0x20002d94
 8013b6c:	20002dc0 	.word	0x20002dc0
 8013b70:	20002dd8 	.word	0x20002dd8
 8013b74:	20002e00 	.word	0x20002e00
 8013b78:	20002d78 	.word	0x20002d78
 8013b7c:	20002e10 	.word	0x20002e10
 8013b80:	20002d38 	.word	0x20002d38
 8013b84:	20002da8 	.word	0x20002da8

08013b88 <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 8013b8c:	f7ff fc94 	bl	80134b8 <micros>
 8013b90:	4602      	mov	r2, r0
 8013b92:	4b43      	ldr	r3, [pc, #268]	; (8013ca0 <imuTest_quatUpdate+0x118>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	1ad3      	subs	r3, r2, r3
 8013b98:	2b0a      	cmp	r3, #10
 8013b9a:	d97d      	bls.n	8013c98 <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 8013b9c:	f7ff fc8c 	bl	80134b8 <micros>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	4b3f      	ldr	r3, [pc, #252]	; (8013ca4 <imuTest_quatUpdate+0x11c>)
 8013ba6:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 8013ba8:	4b3e      	ldr	r3, [pc, #248]	; (8013ca4 <imuTest_quatUpdate+0x11c>)
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	4b3e      	ldr	r3, [pc, #248]	; (8013ca8 <imuTest_quatUpdate+0x120>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	ee07 3a90 	vmov	s15, r3
 8013bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013bba:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8013cac <imuTest_quatUpdate+0x124>
 8013bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013bc2:	4b3b      	ldr	r3, [pc, #236]	; (8013cb0 <imuTest_quatUpdate+0x128>)
 8013bc4:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 8013bc8:	4b36      	ldr	r3, [pc, #216]	; (8013ca4 <imuTest_quatUpdate+0x11c>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4a36      	ldr	r2, [pc, #216]	; (8013ca8 <imuTest_quatUpdate+0x120>)
 8013bce:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 8013bd0:	4b38      	ldr	r3, [pc, #224]	; (8013cb4 <imuTest_quatUpdate+0x12c>)
 8013bd2:	ed93 7a00 	vldr	s14, [r3]
 8013bd6:	4b36      	ldr	r3, [pc, #216]	; (8013cb0 <imuTest_quatUpdate+0x128>)
 8013bd8:	edd3 7a00 	vldr	s15, [r3]
 8013bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013be0:	4b34      	ldr	r3, [pc, #208]	; (8013cb4 <imuTest_quatUpdate+0x12c>)
 8013be2:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 8013be6:	4b34      	ldr	r3, [pc, #208]	; (8013cb8 <imuTest_quatUpdate+0x130>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	3301      	adds	r3, #1
 8013bec:	4a32      	ldr	r2, [pc, #200]	; (8013cb8 <imuTest_quatUpdate+0x130>)
 8013bee:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 8013bf0:	4b32      	ldr	r3, [pc, #200]	; (8013cbc <imuTest_quatUpdate+0x134>)
 8013bf2:	edd3 6a00 	vldr	s13, [r3]
 8013bf6:	4b32      	ldr	r3, [pc, #200]	; (8013cc0 <imuTest_quatUpdate+0x138>)
 8013bf8:	edd3 7a00 	vldr	s15, [r3]
 8013bfc:	eeb1 6a67 	vneg.f32	s12, s15
 8013c00:	4b30      	ldr	r3, [pc, #192]	; (8013cc4 <imuTest_quatUpdate+0x13c>)
 8013c02:	edd3 7a00 	vldr	s15, [r3]
 8013c06:	eef1 5a67 	vneg.f32	s11, s15
 8013c0a:	4b2f      	ldr	r3, [pc, #188]	; (8013cc8 <imuTest_quatUpdate+0x140>)
 8013c0c:	edd3 7a00 	vldr	s15, [r3]
 8013c10:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8013ccc <imuTest_quatUpdate+0x144>
 8013c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c18:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013cd0 <imuTest_quatUpdate+0x148>
 8013c1c:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8013c20:	4b2c      	ldr	r3, [pc, #176]	; (8013cd4 <imuTest_quatUpdate+0x14c>)
 8013c22:	edd3 7a00 	vldr	s15, [r3]
 8013c26:	eef1 7a67 	vneg.f32	s15, s15
 8013c2a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013ccc <imuTest_quatUpdate+0x144>
 8013c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c32:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013cd0 <imuTest_quatUpdate+0x148>
 8013c36:	eec7 4a87 	vdiv.f32	s9, s15, s14
 8013c3a:	4b27      	ldr	r3, [pc, #156]	; (8013cd8 <imuTest_quatUpdate+0x150>)
 8013c3c:	edd3 7a00 	vldr	s15, [r3]
 8013c40:	eef1 7a67 	vneg.f32	s15, s15
 8013c44:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013ccc <imuTest_quatUpdate+0x144>
 8013c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c4c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013cd0 <imuTest_quatUpdate+0x148>
 8013c50:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8013c54:	4b21      	ldr	r3, [pc, #132]	; (8013cdc <imuTest_quatUpdate+0x154>)
 8013c56:	ed93 7a00 	vldr	s14, [r3]
 8013c5a:	4b21      	ldr	r3, [pc, #132]	; (8013ce0 <imuTest_quatUpdate+0x158>)
 8013c5c:	edd3 7a00 	vldr	s15, [r3]
 8013c60:	eef1 7a67 	vneg.f32	s15, s15
 8013c64:	4b1f      	ldr	r3, [pc, #124]	; (8013ce4 <imuTest_quatUpdate+0x15c>)
 8013c66:	ed93 4a00 	vldr	s8, [r3]
 8013c6a:	eef0 3a67 	vmov.f32	s7, s15
 8013c6e:	eeb0 3a47 	vmov.f32	s6, s14
 8013c72:	eeb0 2a64 	vmov.f32	s4, s9
 8013c76:	eef0 1a45 	vmov.f32	s3, s10
 8013c7a:	eeb0 1a65 	vmov.f32	s2, s11
 8013c7e:	eef0 0a46 	vmov.f32	s1, s12
 8013c82:	eeb0 0a66 	vmov.f32	s0, s13
 8013c86:	f7f1 f819 	bl	8004cbc <MadgwickQuaternionUpdate>

		lastCompute = micros();
 8013c8a:	f7ff fc15 	bl	80134b8 <micros>
 8013c8e:	4602      	mov	r2, r0
 8013c90:	4b03      	ldr	r3, [pc, #12]	; (8013ca0 <imuTest_quatUpdate+0x118>)
 8013c92:	601a      	str	r2, [r3, #0]
		return true;
 8013c94:	2301      	movs	r3, #1
 8013c96:	e000      	b.n	8013c9a <imuTest_quatUpdate+0x112>
	}
	return false;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20002e14 	.word	0x20002e14
 8013ca4:	20002d5c 	.word	0x20002d5c
 8013ca8:	20002d2c 	.word	0x20002d2c
 8013cac:	49742400 	.word	0x49742400
 8013cb0:	20002dd4 	.word	0x20002dd4
 8013cb4:	20002d1c 	.word	0x20002d1c
 8013cb8:	20002e1c 	.word	0x20002e1c
 8013cbc:	20002d60 	.word	0x20002d60
 8013cc0:	20002e0c 	.word	0x20002e0c
 8013cc4:	20002d28 	.word	0x20002d28
 8013cc8:	20002dfc 	.word	0x20002dfc
 8013ccc:	40490fdb 	.word	0x40490fdb
 8013cd0:	43340000 	.word	0x43340000
 8013cd4:	20002d24 	.word	0x20002d24
 8013cd8:	20002d94 	.word	0x20002d94
 8013cdc:	20002d38 	.word	0x20002d38
 8013ce0:	20002e10 	.word	0x20002e10
 8013ce4:	20002da8 	.word	0x20002da8

08013ce8 <imuTest_getEuler>:
static void imuTest_getEuler()
{
 8013ce8:	b5b0      	push	{r4, r5, r7, lr}
 8013cea:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8013cec:	4b84      	ldr	r3, [pc, #528]	; (8013f00 <imuTest_getEuler+0x218>)
 8013cee:	ed93 7a01 	vldr	s14, [r3, #4]
 8013cf2:	4b83      	ldr	r3, [pc, #524]	; (8013f00 <imuTest_getEuler+0x218>)
 8013cf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8013cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cfc:	4b80      	ldr	r3, [pc, #512]	; (8013f00 <imuTest_getEuler+0x218>)
 8013cfe:	edd3 6a00 	vldr	s13, [r3]
 8013d02:	4b7f      	ldr	r3, [pc, #508]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d04:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013d14:	ee17 0a90 	vmov	r0, s15
 8013d18:	f7ec fc26 	bl	8000568 <__aeabi_f2d>
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	460d      	mov	r5, r1
 8013d20:	4b77      	ldr	r3, [pc, #476]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d22:	ed93 7a00 	vldr	s14, [r3]
 8013d26:	4b76      	ldr	r3, [pc, #472]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d28:	edd3 7a00 	vldr	s15, [r3]
 8013d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d30:	4b73      	ldr	r3, [pc, #460]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d32:	edd3 6a01 	vldr	s13, [r3, #4]
 8013d36:	4b72      	ldr	r3, [pc, #456]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d44:	4b6e      	ldr	r3, [pc, #440]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d46:	edd3 6a02 	vldr	s13, [r3, #8]
 8013d4a:	4b6d      	ldr	r3, [pc, #436]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013d58:	4b69      	ldr	r3, [pc, #420]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d5a:	edd3 6a03 	vldr	s13, [r3, #12]
 8013d5e:	4b68      	ldr	r3, [pc, #416]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d6c:	ee17 0a90 	vmov	r0, s15
 8013d70:	f7ec fbfa 	bl	8000568 <__aeabi_f2d>
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
 8013d78:	ec43 2b11 	vmov	d1, r2, r3
 8013d7c:	ec45 4b10 	vmov	d0, r4, r5
 8013d80:	f006 ffce 	bl	801ad20 <atan2>
 8013d84:	ec54 3b10 	vmov	r3, r4, d0
 8013d88:	4618      	mov	r0, r3
 8013d8a:	4621      	mov	r1, r4
 8013d8c:	f7ec ff3c 	bl	8000c08 <__aeabi_d2f>
 8013d90:	4602      	mov	r2, r0
 8013d92:	4b5c      	ldr	r3, [pc, #368]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013d94:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 8013d96:	4b5a      	ldr	r3, [pc, #360]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d98:	ed93 7a01 	vldr	s14, [r3, #4]
 8013d9c:	4b58      	ldr	r3, [pc, #352]	; (8013f00 <imuTest_getEuler+0x218>)
 8013d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013da6:	4b56      	ldr	r3, [pc, #344]	; (8013f00 <imuTest_getEuler+0x218>)
 8013da8:	edd3 6a00 	vldr	s13, [r3]
 8013dac:	4b54      	ldr	r3, [pc, #336]	; (8013f00 <imuTest_getEuler+0x218>)
 8013dae:	edd3 7a02 	vldr	s15, [r3, #8]
 8013db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013dbe:	ee17 0a90 	vmov	r0, s15
 8013dc2:	f7ec fbd1 	bl	8000568 <__aeabi_f2d>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	460c      	mov	r4, r1
 8013dca:	ec44 3b10 	vmov	d0, r3, r4
 8013dce:	f006 ff4f 	bl	801ac70 <asin>
 8013dd2:	ec54 3b10 	vmov	r3, r4, d0
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	4621      	mov	r1, r4
 8013dda:	f7ec ff15 	bl	8000c08 <__aeabi_d2f>
 8013dde:	4603      	mov	r3, r0
 8013de0:	ee07 3a90 	vmov	s15, r3
 8013de4:	eef1 7a67 	vneg.f32	s15, s15
 8013de8:	4b47      	ldr	r3, [pc, #284]	; (8013f08 <imuTest_getEuler+0x220>)
 8013dea:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8013dee:	4b44      	ldr	r3, [pc, #272]	; (8013f00 <imuTest_getEuler+0x218>)
 8013df0:	ed93 7a00 	vldr	s14, [r3]
 8013df4:	4b42      	ldr	r3, [pc, #264]	; (8013f00 <imuTest_getEuler+0x218>)
 8013df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8013dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dfe:	4b40      	ldr	r3, [pc, #256]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e00:	edd3 6a02 	vldr	s13, [r3, #8]
 8013e04:	4b3e      	ldr	r3, [pc, #248]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e06:	edd3 7a03 	vldr	s15, [r3, #12]
 8013e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013e16:	ee17 0a90 	vmov	r0, s15
 8013e1a:	f7ec fba5 	bl	8000568 <__aeabi_f2d>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	460d      	mov	r5, r1
 8013e22:	4b37      	ldr	r3, [pc, #220]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e24:	ed93 7a00 	vldr	s14, [r3]
 8013e28:	4b35      	ldr	r3, [pc, #212]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e2a:	edd3 7a00 	vldr	s15, [r3]
 8013e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e32:	4b33      	ldr	r3, [pc, #204]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e34:	edd3 6a01 	vldr	s13, [r3, #4]
 8013e38:	4b31      	ldr	r3, [pc, #196]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8013e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e46:	4b2e      	ldr	r3, [pc, #184]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e48:	edd3 6a02 	vldr	s13, [r3, #8]
 8013e4c:	4b2c      	ldr	r3, [pc, #176]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e5a:	4b29      	ldr	r3, [pc, #164]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8013e60:	4b27      	ldr	r3, [pc, #156]	; (8013f00 <imuTest_getEuler+0x218>)
 8013e62:	edd3 7a03 	vldr	s15, [r3, #12]
 8013e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e6e:	ee17 0a90 	vmov	r0, s15
 8013e72:	f7ec fb79 	bl	8000568 <__aeabi_f2d>
 8013e76:	4602      	mov	r2, r0
 8013e78:	460b      	mov	r3, r1
 8013e7a:	ec43 2b11 	vmov	d1, r2, r3
 8013e7e:	ec45 4b10 	vmov	d0, r4, r5
 8013e82:	f006 ff4d 	bl	801ad20 <atan2>
 8013e86:	ec54 3b10 	vmov	r3, r4, d0
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	4621      	mov	r1, r4
 8013e8e:	f7ec febb 	bl	8000c08 <__aeabi_d2f>
 8013e92:	4602      	mov	r2, r0
 8013e94:	4b1d      	ldr	r3, [pc, #116]	; (8013f0c <imuTest_getEuler+0x224>)
 8013e96:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 8013e98:	4b1b      	ldr	r3, [pc, #108]	; (8013f08 <imuTest_getEuler+0x220>)
 8013e9a:	edd3 7a00 	vldr	s15, [r3]
 8013e9e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013f10 <imuTest_getEuler+0x228>
 8013ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ea6:	4b18      	ldr	r3, [pc, #96]	; (8013f08 <imuTest_getEuler+0x220>)
 8013ea8:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 8013eac:	4b15      	ldr	r3, [pc, #84]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013eae:	edd3 7a00 	vldr	s15, [r3]
 8013eb2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8013f10 <imuTest_getEuler+0x228>
 8013eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013eba:	4b12      	ldr	r3, [pc, #72]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013ebc:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 8013ec0:	4b12      	ldr	r3, [pc, #72]	; (8013f0c <imuTest_getEuler+0x224>)
 8013ec2:	edd3 7a00 	vldr	s15, [r3]
 8013ec6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8013f10 <imuTest_getEuler+0x228>
 8013eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ece:	4b0f      	ldr	r3, [pc, #60]	; (8013f0c <imuTest_getEuler+0x224>)
 8013ed0:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 8013ed4:	4b0b      	ldr	r3, [pc, #44]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013ed6:	edd3 7a00 	vldr	s15, [r3]
 8013eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee2:	d400      	bmi.n	8013ee6 <imuTest_getEuler+0x1fe>
}
 8013ee4:	e009      	b.n	8013efa <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 8013ee6:	4b07      	ldr	r3, [pc, #28]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013ee8:	edd3 7a00 	vldr	s15, [r3]
 8013eec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013f14 <imuTest_getEuler+0x22c>
 8013ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ef4:	4b03      	ldr	r3, [pc, #12]	; (8013f04 <imuTest_getEuler+0x21c>)
 8013ef6:	edc3 7a00 	vstr	s15, [r3]
}
 8013efa:	bf00      	nop
 8013efc:	bdb0      	pop	{r4, r5, r7, pc}
 8013efe:	bf00      	nop
 8013f00:	20002dec 	.word	0x20002dec
 8013f04:	20002dbc 	.word	0x20002dbc
 8013f08:	20002dc8 	.word	0x20002dc8
 8013f0c:	20002dcc 	.word	0x20002dcc
 8013f10:	42652ee0 	.word	0x42652ee0
 8013f14:	43b40000 	.word	0x43b40000

08013f18 <imuTest_begin>:
		lastPrint = millis();
	}
}

static bool imuTest_begin(void)
{
 8013f18:	b590      	push	{r4, r7, lr}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
	imuActive = false;
 8013f1e:	4bc4      	ldr	r3, [pc, #784]	; (8014230 <imuTest_begin+0x318>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	701a      	strb	r2, [r3, #0]

	println("imuTest start!");
 8013f24:	48c3      	ldr	r0, [pc, #780]	; (8014234 <imuTest_begin+0x31c>)
 8013f26:	f7ff fa9d 	bl	8013464 <println>
	GyroMeasError = PI * (60.0f / 180.0f);
 8013f2a:	4bc3      	ldr	r3, [pc, #780]	; (8014238 <imuTest_begin+0x320>)
 8013f2c:	4ac3      	ldr	r2, [pc, #780]	; (801423c <imuTest_begin+0x324>)
 8013f2e:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 8013f30:	4bc1      	ldr	r3, [pc, #772]	; (8014238 <imuTest_begin+0x320>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7ec fb17 	bl	8000568 <__aeabi_f2d>
 8013f3a:	a3bb      	add	r3, pc, #748	; (adr r3, 8014228 <imuTest_begin+0x310>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec fb6a 	bl	8000618 <__aeabi_dmul>
 8013f44:	4603      	mov	r3, r0
 8013f46:	460c      	mov	r4, r1
 8013f48:	4618      	mov	r0, r3
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	f7ec fe5c 	bl	8000c08 <__aeabi_d2f>
 8013f50:	4602      	mov	r2, r0
 8013f52:	4bbb      	ldr	r3, [pc, #748]	; (8014240 <imuTest_begin+0x328>)
 8013f54:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 8013f56:	4bbb      	ldr	r3, [pc, #748]	; (8014244 <imuTest_begin+0x32c>)
 8013f58:	4abb      	ldr	r2, [pc, #748]	; (8014248 <imuTest_begin+0x330>)
 8013f5a:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 8013f5c:	4bb9      	ldr	r3, [pc, #740]	; (8014244 <imuTest_begin+0x32c>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7ec fb01 	bl	8000568 <__aeabi_f2d>
 8013f66:	a3b0      	add	r3, pc, #704	; (adr r3, 8014228 <imuTest_begin+0x310>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	f7ec fb54 	bl	8000618 <__aeabi_dmul>
 8013f70:	4603      	mov	r3, r0
 8013f72:	460c      	mov	r4, r1
 8013f74:	4618      	mov	r0, r3
 8013f76:	4621      	mov	r1, r4
 8013f78:	f7ec fe46 	bl	8000c08 <__aeabi_d2f>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	4bb3      	ldr	r3, [pc, #716]	; (801424c <imuTest_begin+0x334>)
 8013f80:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 8013f82:	4bb3      	ldr	r3, [pc, #716]	; (8014250 <imuTest_begin+0x338>)
 8013f84:	2200      	movs	r2, #0
 8013f86:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8013f88:	4bb2      	ldr	r3, [pc, #712]	; (8014254 <imuTest_begin+0x33c>)
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8013f8e:	4bb2      	ldr	r3, [pc, #712]	; (8014258 <imuTest_begin+0x340>)
 8013f90:	2201      	movs	r2, #1
 8013f92:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8013f94:	4bb1      	ldr	r3, [pc, #708]	; (801425c <imuTest_begin+0x344>)
 8013f96:	2206      	movs	r2, #6
 8013f98:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8013f9a:	4bb1      	ldr	r3, [pc, #708]	; (8014260 <imuTest_begin+0x348>)
 8013f9c:	f04f 0200 	mov.w	r2, #0
 8013fa0:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8013fa2:	4baf      	ldr	r3, [pc, #700]	; (8014260 <imuTest_begin+0x348>)
 8013fa4:	f04f 0200 	mov.w	r2, #0
 8013fa8:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8013faa:	4bad      	ldr	r3, [pc, #692]	; (8014260 <imuTest_begin+0x348>)
 8013fac:	f04f 0200 	mov.w	r2, #0
 8013fb0:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 8013fb2:	4bac      	ldr	r3, [pc, #688]	; (8014264 <imuTest_begin+0x34c>)
 8013fb4:	f04f 0200 	mov.w	r2, #0
 8013fb8:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8013fba:	4baa      	ldr	r3, [pc, #680]	; (8014264 <imuTest_begin+0x34c>)
 8013fbc:	f04f 0200 	mov.w	r2, #0
 8013fc0:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8013fc2:	4ba8      	ldr	r3, [pc, #672]	; (8014264 <imuTest_begin+0x34c>)
 8013fc4:	f04f 0200 	mov.w	r2, #0
 8013fc8:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8013fca:	4ba7      	ldr	r3, [pc, #668]	; (8014268 <imuTest_begin+0x350>)
 8013fcc:	2200      	movs	r2, #0
 8013fce:	601a      	str	r2, [r3, #0]
	count = 0;
 8013fd0:	4ba6      	ldr	r3, [pc, #664]	; (801426c <imuTest_begin+0x354>)
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8013fd6:	4ba6      	ldr	r3, [pc, #664]	; (8014270 <imuTest_begin+0x358>)
 8013fd8:	f04f 0200 	mov.w	r2, #0
 8013fdc:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 8013fde:	4ba5      	ldr	r3, [pc, #660]	; (8014274 <imuTest_begin+0x35c>)
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8013fe4:	4ba4      	ldr	r3, [pc, #656]	; (8014278 <imuTest_begin+0x360>)
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	601a      	str	r2, [r3, #0]
	Now = 0;
 8013fea:	4ba4      	ldr	r3, [pc, #656]	; (801427c <imuTest_begin+0x364>)
 8013fec:	2200      	movs	r2, #0
 8013fee:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8013ff0:	4ba3      	ldr	r3, [pc, #652]	; (8014280 <imuTest_begin+0x368>)
 8013ff2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013ff6:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8013ff8:	4ba1      	ldr	r3, [pc, #644]	; (8014280 <imuTest_begin+0x368>)
 8013ffa:	f04f 0200 	mov.w	r2, #0
 8013ffe:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8014000:	4b9f      	ldr	r3, [pc, #636]	; (8014280 <imuTest_begin+0x368>)
 8014002:	f04f 0200 	mov.w	r2, #0
 8014006:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8014008:	4b9d      	ldr	r3, [pc, #628]	; (8014280 <imuTest_begin+0x368>)
 801400a:	f04f 0200 	mov.w	r2, #0
 801400e:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8014010:	4b9c      	ldr	r3, [pc, #624]	; (8014284 <imuTest_begin+0x36c>)
 8014012:	f04f 0200 	mov.w	r2, #0
 8014016:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8014018:	4b9a      	ldr	r3, [pc, #616]	; (8014284 <imuTest_begin+0x36c>)
 801401a:	f04f 0200 	mov.w	r2, #0
 801401e:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8014020:	4b98      	ldr	r3, [pc, #608]	; (8014284 <imuTest_begin+0x36c>)
 8014022:	f04f 0200 	mov.w	r2, #0
 8014026:	609a      	str	r2, [r3, #8]


	if (MPU_present())
 8014028:	f7ef fda2 	bl	8003b70 <MPU_present>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	f000 81b5 	beq.w	801439e <imuTest_begin+0x486>
	{
		HAL_Delay(100);
 8014034:	2064      	movs	r0, #100	; 0x64
 8014036:	f7f2 f905 	bl	8006244 <HAL_Delay>
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 801403a:	4893      	ldr	r0, [pc, #588]	; (8014288 <imuTest_begin+0x370>)
 801403c:	f7f0 f9b0 	bl	80043a0 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 8014040:	4892      	ldr	r0, [pc, #584]	; (801428c <imuTest_begin+0x374>)
 8014042:	f7ff fa0f 	bl	8013464 <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 8014046:	4892      	ldr	r0, [pc, #584]	; (8014290 <imuTest_begin+0x378>)
 8014048:	f7ff fa02 	bl	8013450 <print>
 801404c:	4b8e      	ldr	r3, [pc, #568]	; (8014288 <imuTest_begin+0x370>)
 801404e:	edd3 7a00 	vldr	s15, [r3]
 8014052:	eeb0 0a67 	vmov.f32	s0, s15
 8014056:	f7ff fa24 	bl	80134a2 <print_float>
 801405a:	488e      	ldr	r0, [pc, #568]	; (8014294 <imuTest_begin+0x37c>)
 801405c:	f7ff fa02 	bl	8013464 <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 8014060:	488d      	ldr	r0, [pc, #564]	; (8014298 <imuTest_begin+0x380>)
 8014062:	f7ff f9f5 	bl	8013450 <print>
 8014066:	4b88      	ldr	r3, [pc, #544]	; (8014288 <imuTest_begin+0x370>)
 8014068:	edd3 7a01 	vldr	s15, [r3, #4]
 801406c:	eeb0 0a67 	vmov.f32	s0, s15
 8014070:	f7ff fa17 	bl	80134a2 <print_float>
 8014074:	4887      	ldr	r0, [pc, #540]	; (8014294 <imuTest_begin+0x37c>)
 8014076:	f7ff f9f5 	bl	8013464 <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 801407a:	4888      	ldr	r0, [pc, #544]	; (801429c <imuTest_begin+0x384>)
 801407c:	f7ff f9e8 	bl	8013450 <print>
 8014080:	4b81      	ldr	r3, [pc, #516]	; (8014288 <imuTest_begin+0x370>)
 8014082:	edd3 7a02 	vldr	s15, [r3, #8]
 8014086:	eeb0 0a67 	vmov.f32	s0, s15
 801408a:	f7ff fa0a 	bl	80134a2 <print_float>
 801408e:	4881      	ldr	r0, [pc, #516]	; (8014294 <imuTest_begin+0x37c>)
 8014090:	f7ff f9e8 	bl	8013464 <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 8014094:	4882      	ldr	r0, [pc, #520]	; (80142a0 <imuTest_begin+0x388>)
 8014096:	f7ff f9db 	bl	8013450 <print>
 801409a:	4b7b      	ldr	r3, [pc, #492]	; (8014288 <imuTest_begin+0x370>)
 801409c:	edd3 7a03 	vldr	s15, [r3, #12]
 80140a0:	eeb0 0a67 	vmov.f32	s0, s15
 80140a4:	f7ff f9fd 	bl	80134a2 <print_float>
 80140a8:	487a      	ldr	r0, [pc, #488]	; (8014294 <imuTest_begin+0x37c>)
 80140aa:	f7ff f9db 	bl	8013464 <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 80140ae:	487d      	ldr	r0, [pc, #500]	; (80142a4 <imuTest_begin+0x38c>)
 80140b0:	f7ff f9ce 	bl	8013450 <print>
 80140b4:	4b74      	ldr	r3, [pc, #464]	; (8014288 <imuTest_begin+0x370>)
 80140b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80140ba:	eeb0 0a67 	vmov.f32	s0, s15
 80140be:	f7ff f9f0 	bl	80134a2 <print_float>
 80140c2:	4874      	ldr	r0, [pc, #464]	; (8014294 <imuTest_begin+0x37c>)
 80140c4:	f7ff f9ce 	bl	8013464 <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 80140c8:	4877      	ldr	r0, [pc, #476]	; (80142a8 <imuTest_begin+0x390>)
 80140ca:	f7ff f9c1 	bl	8013450 <print>
 80140ce:	4b6e      	ldr	r3, [pc, #440]	; (8014288 <imuTest_begin+0x370>)
 80140d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80140d4:	eeb0 0a67 	vmov.f32	s0, s15
 80140d8:	f7ff f9e3 	bl	80134a2 <print_float>
 80140dc:	486d      	ldr	r0, [pc, #436]	; (8014294 <imuTest_begin+0x37c>)
 80140de:	f7ff f9c1 	bl	8013464 <println>
		HAL_Delay(1000);
 80140e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80140e6:	f7f2 f8ad 	bl	8006244 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 80140ea:	f7ef fc7d 	bl	80039e8 <MPU_getAres>
		MPU_getGres();
 80140ee:	f7ef fc47 	bl	8003980 <MPU_getGres>
		MPU_getMres();
 80140f2:	f7ef fc27 	bl	8003944 <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 80140f6:	486d      	ldr	r0, [pc, #436]	; (80142ac <imuTest_begin+0x394>)
 80140f8:	f7ff f9b4 	bl	8013464 <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 80140fc:	496c      	ldr	r1, [pc, #432]	; (80142b0 <imuTest_begin+0x398>)
 80140fe:	486d      	ldr	r0, [pc, #436]	; (80142b4 <imuTest_begin+0x39c>)
 8014100:	f7ef fec0 	bl	8003e84 <MPU_calibrate>
		println("accel biases (mg)");
 8014104:	486c      	ldr	r0, [pc, #432]	; (80142b8 <imuTest_begin+0x3a0>)
 8014106:	f7ff f9ad 	bl	8013464 <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 801410a:	4b69      	ldr	r3, [pc, #420]	; (80142b0 <imuTest_begin+0x398>)
 801410c:	edd3 7a00 	vldr	s15, [r3]
 8014110:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80142bc <imuTest_begin+0x3a4>
 8014114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014118:	eeb0 0a67 	vmov.f32	s0, s15
 801411c:	f7ff f9c1 	bl	80134a2 <print_float>
 8014120:	4867      	ldr	r0, [pc, #412]	; (80142c0 <imuTest_begin+0x3a8>)
 8014122:	f7ff f99f 	bl	8013464 <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8014126:	4b62      	ldr	r3, [pc, #392]	; (80142b0 <imuTest_begin+0x398>)
 8014128:	edd3 7a01 	vldr	s15, [r3, #4]
 801412c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80142bc <imuTest_begin+0x3a4>
 8014130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014134:	eeb0 0a67 	vmov.f32	s0, s15
 8014138:	f7ff f9b3 	bl	80134a2 <print_float>
 801413c:	4860      	ldr	r0, [pc, #384]	; (80142c0 <imuTest_begin+0x3a8>)
 801413e:	f7ff f991 	bl	8013464 <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 8014142:	4b5b      	ldr	r3, [pc, #364]	; (80142b0 <imuTest_begin+0x398>)
 8014144:	edd3 7a02 	vldr	s15, [r3, #8]
 8014148:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80142bc <imuTest_begin+0x3a4>
 801414c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014150:	eeb0 0a67 	vmov.f32	s0, s15
 8014154:	f7ff f9a5 	bl	80134a2 <print_float>
 8014158:	4859      	ldr	r0, [pc, #356]	; (80142c0 <imuTest_begin+0x3a8>)
 801415a:	f7ff f983 	bl	8013464 <println>
		println("gyro biases (dps)");
 801415e:	4859      	ldr	r0, [pc, #356]	; (80142c4 <imuTest_begin+0x3ac>)
 8014160:	f7ff f980 	bl	8013464 <println>
		print_float(MPU9250gyroBias[0]); println("");
 8014164:	4b53      	ldr	r3, [pc, #332]	; (80142b4 <imuTest_begin+0x39c>)
 8014166:	edd3 7a00 	vldr	s15, [r3]
 801416a:	eeb0 0a67 	vmov.f32	s0, s15
 801416e:	f7ff f998 	bl	80134a2 <print_float>
 8014172:	4853      	ldr	r0, [pc, #332]	; (80142c0 <imuTest_begin+0x3a8>)
 8014174:	f7ff f976 	bl	8013464 <println>
		print_float(MPU9250gyroBias[1]); println("");
 8014178:	4b4e      	ldr	r3, [pc, #312]	; (80142b4 <imuTest_begin+0x39c>)
 801417a:	edd3 7a01 	vldr	s15, [r3, #4]
 801417e:	eeb0 0a67 	vmov.f32	s0, s15
 8014182:	f7ff f98e 	bl	80134a2 <print_float>
 8014186:	484e      	ldr	r0, [pc, #312]	; (80142c0 <imuTest_begin+0x3a8>)
 8014188:	f7ff f96c 	bl	8013464 <println>
		print_float(MPU9250gyroBias[2]); println("");
 801418c:	4b49      	ldr	r3, [pc, #292]	; (80142b4 <imuTest_begin+0x39c>)
 801418e:	edd3 7a02 	vldr	s15, [r3, #8]
 8014192:	eeb0 0a67 	vmov.f32	s0, s15
 8014196:	f7ff f984 	bl	80134a2 <print_float>
 801419a:	4849      	ldr	r0, [pc, #292]	; (80142c0 <imuTest_begin+0x3a8>)
 801419c:	f7ff f962 	bl	8013464 <println>

		HAL_Delay(1000);
 80141a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80141a4:	f7f2 f84e 	bl	8006244 <HAL_Delay>

		MPU_init();
 80141a8:	f7ef fd04 	bl	8003bb4 <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 80141ac:	4846      	ldr	r0, [pc, #280]	; (80142c8 <imuTest_begin+0x3b0>)
 80141ae:	f7ff f959 	bl	8013464 <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 80141b2:	2100      	movs	r1, #0
 80141b4:	2018      	movs	r0, #24
 80141b6:	f7ef fb70 	bl	800389a <MPU_readByte>
 80141ba:	4603      	mov	r3, r0
 80141bc:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 80141be:	79fb      	ldrb	r3, [r7, #7]
 80141c0:	2b48      	cmp	r3, #72	; 0x48
 80141c2:	d102      	bne.n	80141ca <imuTest_begin+0x2b2>
 80141c4:	4841      	ldr	r0, [pc, #260]	; (80142cc <imuTest_begin+0x3b4>)
 80141c6:	f7ff f94d 	bl	8013464 <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80141ca:	2201      	movs	r2, #1
 80141cc:	2180      	movs	r1, #128	; 0x80
 80141ce:	4840      	ldr	r0, [pc, #256]	; (80142d0 <imuTest_begin+0x3b8>)
 80141d0:	f7f2 feb6 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80141d4:	2201      	movs	r2, #1
 80141d6:	2140      	movs	r1, #64	; 0x40
 80141d8:	483d      	ldr	r0, [pc, #244]	; (80142d0 <imuTest_begin+0x3b8>)
 80141da:	f7f2 feb1 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 80141de:	2201      	movs	r2, #1
 80141e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80141e4:	483b      	ldr	r0, [pc, #236]	; (80142d4 <imuTest_begin+0x3bc>)
 80141e6:	f7f2 feab 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 80141ea:	2201      	movs	r2, #1
 80141ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80141f0:	4838      	ldr	r0, [pc, #224]	; (80142d4 <imuTest_begin+0x3bc>)
 80141f2:	f7f2 fea5 	bl	8006f40 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 80141f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80141fa:	f7f2 f823 	bl	8006244 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 80141fe:	4818      	ldr	r0, [pc, #96]	; (8014260 <imuTest_begin+0x348>)
 8014200:	f7ef fdc0 	bl	8003d84 <AK8963_init>
 8014204:	4834      	ldr	r0, [pc, #208]	; (80142d8 <imuTest_begin+0x3c0>)
 8014206:	f7ff f92d 	bl	8013464 <println>

		MPU_calibrateMag(MPU9250magBias);
 801420a:	4834      	ldr	r0, [pc, #208]	; (80142dc <imuTest_begin+0x3c4>)
 801420c:	f7f0 fc6e 	bl	8004aec <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 8014210:	4833      	ldr	r0, [pc, #204]	; (80142e0 <imuTest_begin+0x3c8>)
 8014212:	f7ff f927 	bl	8013464 <println>
		print_float(MPU9250magBias[0]); println("");
 8014216:	4b31      	ldr	r3, [pc, #196]	; (80142dc <imuTest_begin+0x3c4>)
 8014218:	edd3 7a00 	vldr	s15, [r3]
 801421c:	eeb0 0a67 	vmov.f32	s0, s15
 8014220:	f7ff f93f 	bl	80134a2 <print_float>
 8014224:	e05e      	b.n	80142e4 <imuTest_begin+0x3cc>
 8014226:	bf00      	nop
 8014228:	e8584caa 	.word	0xe8584caa
 801422c:	3febb67a 	.word	0x3febb67a
 8014230:	20002ce6 	.word	0x20002ce6
 8014234:	0801de30 	.word	0x0801de30
 8014238:	20002d6c 	.word	0x20002d6c
 801423c:	3f860a92 	.word	0x3f860a92
 8014240:	20002da0 	.word	0x20002da0
 8014244:	20002cf4 	.word	0x20002cf4
 8014248:	3c8efa36 	.word	0x3c8efa36
 801424c:	20002e18 	.word	0x20002e18
 8014250:	20002d20 	.word	0x20002d20
 8014254:	20002ce7 	.word	0x20002ce7
 8014258:	20002d70 	.word	0x20002d70
 801425c:	20002d48 	.word	0x20002d48
 8014260:	20002e00 	.word	0x20002e00
 8014264:	20002d4c 	.word	0x20002d4c
 8014268:	20002d98 	.word	0x20002d98
 801426c:	20002d90 	.word	0x20002d90
 8014270:	20002dd4 	.word	0x20002dd4
 8014274:	20002d2c 	.word	0x20002d2c
 8014278:	20002ddc 	.word	0x20002ddc
 801427c:	20002d5c 	.word	0x20002d5c
 8014280:	20002dec 	.word	0x20002dec
 8014284:	20002d3c 	.word	0x20002d3c
 8014288:	20002cf8 	.word	0x20002cf8
 801428c:	0801de40 	.word	0x0801de40
 8014290:	0801de54 	.word	0x0801de54
 8014294:	0801de84 	.word	0x0801de84
 8014298:	0801de98 	.word	0x0801de98
 801429c:	0801dec8 	.word	0x0801dec8
 80142a0:	0801def8 	.word	0x0801def8
 80142a4:	0801df24 	.word	0x0801df24
 80142a8:	0801df50 	.word	0x0801df50
 80142ac:	0801df7c 	.word	0x0801df7c
 80142b0:	20002ce8 	.word	0x20002ce8
 80142b4:	20002db0 	.word	0x20002db0
 80142b8:	0801dfa0 	.word	0x0801dfa0
 80142bc:	447a0000 	.word	0x447a0000
 80142c0:	0801dda0 	.word	0x0801dda0
 80142c4:	0801dfb4 	.word	0x0801dfb4
 80142c8:	0801dfc8 	.word	0x0801dfc8
 80142cc:	0801dff8 	.word	0x0801dff8
 80142d0:	40020800 	.word	0x40020800
 80142d4:	40020400 	.word	0x40020400
 80142d8:	0801e00c 	.word	0x0801e00c
 80142dc:	20002d78 	.word	0x20002d78
 80142e0:	0801e038 	.word	0x0801e038
 80142e4:	4830      	ldr	r0, [pc, #192]	; (80143a8 <imuTest_begin+0x490>)
 80142e6:	f7ff f8bd 	bl	8013464 <println>
		print_float(MPU9250magBias[1]); println("");
 80142ea:	4b30      	ldr	r3, [pc, #192]	; (80143ac <imuTest_begin+0x494>)
 80142ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80142f0:	eeb0 0a67 	vmov.f32	s0, s15
 80142f4:	f7ff f8d5 	bl	80134a2 <print_float>
 80142f8:	482b      	ldr	r0, [pc, #172]	; (80143a8 <imuTest_begin+0x490>)
 80142fa:	f7ff f8b3 	bl	8013464 <println>
		print_float(MPU9250magBias[2]); println("");
 80142fe:	4b2b      	ldr	r3, [pc, #172]	; (80143ac <imuTest_begin+0x494>)
 8014300:	edd3 7a02 	vldr	s15, [r3, #8]
 8014304:	eeb0 0a67 	vmov.f32	s0, s15
 8014308:	f7ff f8cb 	bl	80134a2 <print_float>
 801430c:	4826      	ldr	r0, [pc, #152]	; (80143a8 <imuTest_begin+0x490>)
 801430e:	f7ff f8a9 	bl	8013464 <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 8014312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014316:	f7f1 ff95 	bl	8006244 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 801431a:	4825      	ldr	r0, [pc, #148]	; (80143b0 <imuTest_begin+0x498>)
 801431c:	f7ff f898 	bl	8013450 <print>
 8014320:	4b24      	ldr	r3, [pc, #144]	; (80143b4 <imuTest_begin+0x49c>)
 8014322:	edd3 7a00 	vldr	s15, [r3]
 8014326:	eeb0 0a67 	vmov.f32	s0, s15
 801432a:	f7ff f8ba 	bl	80134a2 <print_float>
 801432e:	481e      	ldr	r0, [pc, #120]	; (80143a8 <imuTest_begin+0x490>)
 8014330:	f7ff f898 	bl	8013464 <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 8014334:	4820      	ldr	r0, [pc, #128]	; (80143b8 <imuTest_begin+0x4a0>)
 8014336:	f7ff f88b 	bl	8013450 <print>
 801433a:	4b1e      	ldr	r3, [pc, #120]	; (80143b4 <imuTest_begin+0x49c>)
 801433c:	edd3 7a01 	vldr	s15, [r3, #4]
 8014340:	eeb0 0a67 	vmov.f32	s0, s15
 8014344:	f7ff f8ad 	bl	80134a2 <print_float>
 8014348:	4817      	ldr	r0, [pc, #92]	; (80143a8 <imuTest_begin+0x490>)
 801434a:	f7ff f88b 	bl	8013464 <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 801434e:	481b      	ldr	r0, [pc, #108]	; (80143bc <imuTest_begin+0x4a4>)
 8014350:	f7ff f87e 	bl	8013450 <print>
 8014354:	4b17      	ldr	r3, [pc, #92]	; (80143b4 <imuTest_begin+0x49c>)
 8014356:	edd3 7a02 	vldr	s15, [r3, #8]
 801435a:	eeb0 0a67 	vmov.f32	s0, s15
 801435e:	f7ff f8a0 	bl	80134a2 <print_float>
 8014362:	4811      	ldr	r0, [pc, #68]	; (80143a8 <imuTest_begin+0x490>)
 8014364:	f7ff f87e 	bl	8013464 <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014368:	2200      	movs	r2, #0
 801436a:	2180      	movs	r1, #128	; 0x80
 801436c:	4814      	ldr	r0, [pc, #80]	; (80143c0 <imuTest_begin+0x4a8>)
 801436e:	f7f2 fde7 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014372:	2200      	movs	r2, #0
 8014374:	2140      	movs	r1, #64	; 0x40
 8014376:	4812      	ldr	r0, [pc, #72]	; (80143c0 <imuTest_begin+0x4a8>)
 8014378:	f7f2 fde2 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 801437c:	2200      	movs	r2, #0
 801437e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014382:	4810      	ldr	r0, [pc, #64]	; (80143c4 <imuTest_begin+0x4ac>)
 8014384:	f7f2 fddc 	bl	8006f40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014388:	2200      	movs	r2, #0
 801438a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801438e:	480d      	ldr	r0, [pc, #52]	; (80143c4 <imuTest_begin+0x4ac>)
 8014390:	f7f2 fdd6 	bl	8006f40 <HAL_GPIO_WritePin>

		imuActive = true;
 8014394:	4b0c      	ldr	r3, [pc, #48]	; (80143c8 <imuTest_begin+0x4b0>)
 8014396:	2201      	movs	r2, #1
 8014398:	701a      	strb	r2, [r3, #0]
		return true;
 801439a:	2301      	movs	r3, #1
 801439c:	e000      	b.n	80143a0 <imuTest_begin+0x488>
	}
	return false;
 801439e:	2300      	movs	r3, #0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd90      	pop	{r4, r7, pc}
 80143a8:	0801dda0 	.word	0x0801dda0
 80143ac:	20002d78 	.word	0x20002d78
 80143b0:	0801e050 	.word	0x0801e050
 80143b4:	20002e00 	.word	0x20002e00
 80143b8:	0801e07c 	.word	0x0801e07c
 80143bc:	0801e0a8 	.word	0x0801e0a8
 80143c0:	40020800 	.word	0x40020800
 80143c4:	40020400 	.word	0x40020400
 80143c8:	20002ce6 	.word	0x20002ce6

080143cc <sensing_begin>:
uint32_t lastGpsRead;
// IMU
// (SPS)

static bool sensing_begin(void)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0

	uint8_t attempts = 0;
 80143d2:	2300      	movs	r3, #0
 80143d4:	71fb      	strb	r3, [r7, #7]

	attempts = 0;
 80143d6:	2300      	movs	r3, #0
 80143d8:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 80143da:	4b42      	ldr	r3, [pc, #264]	; (80144e4 <sensing_begin+0x118>)
 80143dc:	4a42      	ldr	r2, [pc, #264]	; (80144e8 <sensing_begin+0x11c>)
 80143de:	3307      	adds	r3, #7
 80143e0:	6810      	ldr	r0, [r2, #0]
 80143e2:	6018      	str	r0, [r3, #0]
 80143e4:	7912      	ldrb	r2, [r2, #4]
 80143e6:	711a      	strb	r2, [r3, #4]
	bmp.addr = BMP280_I2C_ADDRESS_0;
 80143e8:	4b3e      	ldr	r3, [pc, #248]	; (80144e4 <sensing_begin+0x118>)
 80143ea:	2276      	movs	r2, #118	; 0x76
 80143ec:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 80143ee:	f001 faad 	bl	801594c <Get_I2C1_Instance>
 80143f2:	4602      	mov	r2, r0
 80143f4:	4b3b      	ldr	r3, [pc, #236]	; (80144e4 <sensing_begin+0x118>)
 80143f6:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 80143f8:	e010      	b.n	801441c <sensing_begin+0x50>
	{
		HAL_Delay(500);
 80143fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80143fe:	f7f1 ff21 	bl	8006244 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 8014402:	483a      	ldr	r0, [pc, #232]	; (80144ec <sensing_begin+0x120>)
 8014404:	f7ff f82e 	bl	8013464 <println>
		attempts++;
 8014408:	79fb      	ldrb	r3, [r7, #7]
 801440a:	3301      	adds	r3, #1
 801440c:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 801440e:	79fb      	ldrb	r3, [r7, #7]
 8014410:	2b04      	cmp	r3, #4
 8014412:	d903      	bls.n	801441c <sensing_begin+0x50>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8014414:	4836      	ldr	r0, [pc, #216]	; (80144f0 <sensing_begin+0x124>)
 8014416:	f7ff f825 	bl	8013464 <println>
			//log_print("Unable to init BMP");
			break;
 801441a:	e009      	b.n	8014430 <sensing_begin+0x64>
	while (!bmp280_init(&bmp, &bmp.params))
 801441c:	4935      	ldr	r1, [pc, #212]	; (80144f4 <sensing_begin+0x128>)
 801441e:	4831      	ldr	r0, [pc, #196]	; (80144e4 <sensing_begin+0x118>)
 8014420:	f7ed fd6d 	bl	8001efe <bmp280_init>
 8014424:	4603      	mov	r3, r0
 8014426:	f083 0301 	eor.w	r3, r3, #1
 801442a:	b2db      	uxtb	r3, r3
 801442c:	2b00      	cmp	r3, #0
 801442e:	d1e4      	bne.n	80143fa <sensing_begin+0x2e>
		}
	}

	imuTest_begin();
 8014430:	f7ff fd72 	bl	8013f18 <imuTest_begin>
	//if (imuTest_begin()) { println("[IMU] Init successful!"); log_print("IMU init success"); }
	//	else { log_print("Unable to init IMU"); }


	attempts = 0;
 8014434:	2300      	movs	r3, #0
 8014436:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 8014438:	f001 fa9c 	bl	8015974 <Get_UART3_Instance>
 801443c:	4602      	mov	r2, r0
 801443e:	4b2e      	ldr	r3, [pc, #184]	; (80144f8 <sensing_begin+0x12c>)
 8014440:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 8014444:	e010      	b.n	8014468 <sensing_begin+0x9c>
	{
		HAL_Delay(500);
 8014446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801444a:	f7f1 fefb 	bl	8006244 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 801444e:	482b      	ldr	r0, [pc, #172]	; (80144fc <sensing_begin+0x130>)
 8014450:	f7ff f808 	bl	8013464 <println>
		attempts++;
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	3301      	adds	r3, #1
 8014458:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 801445a:	79fb      	ldrb	r3, [r7, #7]
 801445c:	2b04      	cmp	r3, #4
 801445e:	d903      	bls.n	8014468 <sensing_begin+0x9c>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8014460:	4827      	ldr	r0, [pc, #156]	; (8014500 <sensing_begin+0x134>)
 8014462:	f7fe ffff 	bl	8013464 <println>
			//log_print("Unable to init GPS");
			break;
 8014466:	e008      	b.n	801447a <sensing_begin+0xae>
	while (!GPS_init(&gps))
 8014468:	4823      	ldr	r0, [pc, #140]	; (80144f8 <sensing_begin+0x12c>)
 801446a:	f7ee f8df 	bl	800262c <GPS_init>
 801446e:	4603      	mov	r3, r0
 8014470:	f083 0301 	eor.w	r3, r3, #1
 8014474:	b2db      	uxtb	r3, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d1e5      	bne.n	8014446 <sensing_begin+0x7a>
		}
	}

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 801447a:	4822      	ldr	r0, [pc, #136]	; (8014504 <sensing_begin+0x138>)
 801447c:	f7fe fff2 	bl	8013464 <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 8014480:	4821      	ldr	r0, [pc, #132]	; (8014508 <sensing_begin+0x13c>)
 8014482:	f7fe ffe5 	bl	8013450 <print>
 8014486:	4b1c      	ldr	r3, [pc, #112]	; (80144f8 <sensing_begin+0x12c>)
 8014488:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 801448c:	2b00      	cmp	r3, #0
 801448e:	d003      	beq.n	8014498 <sensing_begin+0xcc>
 8014490:	481e      	ldr	r0, [pc, #120]	; (801450c <sensing_begin+0x140>)
 8014492:	f7fe ffe7 	bl	8013464 <println>
 8014496:	e002      	b.n	801449e <sensing_begin+0xd2>
 8014498:	481d      	ldr	r0, [pc, #116]	; (8014510 <sensing_begin+0x144>)
 801449a:	f7fe ffe3 	bl	8013464 <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 801449e:	481d      	ldr	r0, [pc, #116]	; (8014514 <sensing_begin+0x148>)
 80144a0:	f7fe ffd6 	bl	8013450 <print>
 80144a4:	4b0f      	ldr	r3, [pc, #60]	; (80144e4 <sensing_begin+0x118>)
 80144a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d003      	beq.n	80144b6 <sensing_begin+0xea>
 80144ae:	4817      	ldr	r0, [pc, #92]	; (801450c <sensing_begin+0x140>)
 80144b0:	f7fe ffd8 	bl	8013464 <println>
 80144b4:	e002      	b.n	80144bc <sensing_begin+0xf0>
 80144b6:	4816      	ldr	r0, [pc, #88]	; (8014510 <sensing_begin+0x144>)
 80144b8:	f7fe ffd4 	bl	8013464 <println>
		print("IMU - "); imuActive ? println("active") : println("not active");
 80144bc:	4816      	ldr	r0, [pc, #88]	; (8014518 <sensing_begin+0x14c>)
 80144be:	f7fe ffc7 	bl	8013450 <print>
 80144c2:	4b16      	ldr	r3, [pc, #88]	; (801451c <sensing_begin+0x150>)
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d003      	beq.n	80144d2 <sensing_begin+0x106>
 80144ca:	4810      	ldr	r0, [pc, #64]	; (801450c <sensing_begin+0x140>)
 80144cc:	f7fe ffca 	bl	8013464 <println>
 80144d0:	e002      	b.n	80144d8 <sensing_begin+0x10c>
 80144d2:	480f      	ldr	r0, [pc, #60]	; (8014510 <sensing_begin+0x144>)
 80144d4:	f7fe ffc6 	bl	8013464 <println>
	}
}
 80144d8:	bf00      	nop
 80144da:	4618      	mov	r0, r3
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	200062c0 	.word	0x200062c0
 80144e8:	2000011c 	.word	0x2000011c
 80144ec:	0801e0d4 	.word	0x0801e0d4
 80144f0:	0801e0fc 	.word	0x0801e0fc
 80144f4:	200062c7 	.word	0x200062c7
 80144f8:	20002ab0 	.word	0x20002ab0
 80144fc:	0801e128 	.word	0x0801e128
 8014500:	0801e150 	.word	0x0801e150
 8014504:	0801e17c 	.word	0x0801e17c
 8014508:	0801e194 	.word	0x0801e194
 801450c:	0801e19c 	.word	0x0801e19c
 8014510:	0801e1a4 	.word	0x0801e1a4
 8014514:	0801e1b0 	.word	0x0801e1b0
 8014518:	0801e1b8 	.word	0x0801e1b8
 801451c:	20002ce6 	.word	0x20002ce6

08014520 <sensing_loop>:

static void sensing_loop(void)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0

	if (gps.active)
 8014526:	4b67      	ldr	r3, [pc, #412]	; (80146c4 <sensing_loop+0x1a4>)
 8014528:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 801452c:	2b00      	cmp	r3, #0
 801452e:	d021      	beq.n	8014574 <sensing_loop+0x54>
	{
		//while (GPS_read(&gps));
		if (GPS_newNMEAreceived(&gps))
 8014530:	4864      	ldr	r0, [pc, #400]	; (80146c4 <sensing_loop+0x1a4>)
 8014532:	f7ef f952 	bl	80037da <GPS_newNMEAreceived>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d016      	beq.n	801456a <sensing_loop+0x4a>
		{
			println(GPS_lastNMEA(&gps));
 801453c:	4861      	ldr	r0, [pc, #388]	; (80146c4 <sensing_loop+0x1a4>)
 801453e:	f7ef f95a 	bl	80037f6 <GPS_lastNMEA>
 8014542:	4603      	mov	r3, r0
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe ff8d 	bl	8013464 <println>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 801454a:	485e      	ldr	r0, [pc, #376]	; (80146c4 <sensing_loop+0x1a4>)
 801454c:	f7ef f953 	bl	80037f6 <GPS_lastNMEA>
 8014550:	4603      	mov	r3, r0
 8014552:	4619      	mov	r1, r3
 8014554:	485b      	ldr	r0, [pc, #364]	; (80146c4 <sensing_loop+0x1a4>)
 8014556:	f7ee f9f5 	bl	8002944 <GPS_parse>
			if (gps.fix) log_gps(&gps);
 801455a:	4b5a      	ldr	r3, [pc, #360]	; (80146c4 <sensing_loop+0x1a4>)
 801455c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8014560:	2b00      	cmp	r3, #0
 8014562:	d002      	beq.n	801456a <sensing_loop+0x4a>
 8014564:	4857      	ldr	r0, [pc, #348]	; (80146c4 <sensing_loop+0x1a4>)
 8014566:	f7f1 fcf9 	bl	8005f5c <log_gps>
		}
		lastGpsRead = millis();
 801456a:	f7fe ffaf 	bl	80134cc <millis>
 801456e:	4602      	mov	r2, r0
 8014570:	4b55      	ldr	r3, [pc, #340]	; (80146c8 <sensing_loop+0x1a8>)
 8014572:	601a      	str	r2, [r3, #0]
	}

	if (bmp.active && millis() - lastBmpRead >= 50)
 8014574:	4b55      	ldr	r3, [pc, #340]	; (80146cc <sensing_loop+0x1ac>)
 8014576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801457a:	2b00      	cmp	r3, #0
 801457c:	d01f      	beq.n	80145be <sensing_loop+0x9e>
 801457e:	f7fe ffa5 	bl	80134cc <millis>
 8014582:	4602      	mov	r2, r0
 8014584:	4b52      	ldr	r3, [pc, #328]	; (80146d0 <sensing_loop+0x1b0>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	1ad3      	subs	r3, r2, r3
 801458a:	2b31      	cmp	r3, #49	; 0x31
 801458c:	d917      	bls.n	80145be <sensing_loop+0x9e>
	{

		//bmp280_read_float(&bmp, tee, pee);
		bmp280_update(&bmp);
 801458e:	484f      	ldr	r0, [pc, #316]	; (80146cc <sensing_loop+0x1ac>)
 8014590:	f7ed ffa0 	bl	80024d4 <bmp280_update>
		lastBmpRead = millis();
 8014594:	f7fe ff9a 	bl	80134cc <millis>
 8014598:	4602      	mov	r2, r0
 801459a:	4b4d      	ldr	r3, [pc, #308]	; (80146d0 <sensing_loop+0x1b0>)
 801459c:	601a      	str	r2, [r3, #0]
		if (millis() - lastBmpLog >= 100)
 801459e:	f7fe ff95 	bl	80134cc <millis>
 80145a2:	4602      	mov	r2, r0
 80145a4:	4b4b      	ldr	r3, [pc, #300]	; (80146d4 <sensing_loop+0x1b4>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	1ad3      	subs	r3, r2, r3
 80145aa:	2b63      	cmp	r3, #99	; 0x63
 80145ac:	d907      	bls.n	80145be <sensing_loop+0x9e>
		{
			log_bmp(&bmp);
 80145ae:	4847      	ldr	r0, [pc, #284]	; (80146cc <sensing_loop+0x1ac>)
 80145b0:	f7f1 fc86 	bl	8005ec0 <log_bmp>
			lastBmpLog = millis();
 80145b4:	f7fe ff8a 	bl	80134cc <millis>
 80145b8:	4602      	mov	r2, r0
 80145ba:	4b46      	ldr	r3, [pc, #280]	; (80146d4 <sensing_loop+0x1b4>)
 80145bc:	601a      	str	r2, [r3, #0]
		}
	}


	if (imuActive)
 80145be:	4b46      	ldr	r3, [pc, #280]	; (80146d8 <sensing_loop+0x1b8>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d01f      	beq.n	8014606 <sensing_loop+0xe6>
	{
		imuTest_getData();		// get data from IMU
 80145c6:	f7ff f9ed 	bl	80139a4 <imuTest_getData>
		imuTest_quatUpdate();	// compute data received
 80145ca:	f7ff fadd 	bl	8013b88 <imuTest_quatUpdate>

		if (millis() - lastImuLog >= 100)
 80145ce:	f7fe ff7d 	bl	80134cc <millis>
 80145d2:	4602      	mov	r2, r0
 80145d4:	4b41      	ldr	r3, [pc, #260]	; (80146dc <sensing_loop+0x1bc>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	1ad3      	subs	r3, r2, r3
 80145da:	2b63      	cmp	r3, #99	; 0x63
 80145dc:	d913      	bls.n	8014606 <sensing_loop+0xe6>
		{
			imuTest_getEuler();
 80145de:	f7ff fb83 	bl	8013ce8 <imuTest_getEuler>
			float eulers[3] = {yaw, pitch, roll};
 80145e2:	4b3f      	ldr	r3, [pc, #252]	; (80146e0 <sensing_loop+0x1c0>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	607b      	str	r3, [r7, #4]
 80145e8:	4b3e      	ldr	r3, [pc, #248]	; (80146e4 <sensing_loop+0x1c4>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	60bb      	str	r3, [r7, #8]
 80145ee:	4b3e      	ldr	r3, [pc, #248]	; (80146e8 <sensing_loop+0x1c8>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	60fb      	str	r3, [r7, #12]
			log_imu(eulers);
 80145f4:	1d3b      	adds	r3, r7, #4
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7f1 fcfe 	bl	8005ff8 <log_imu>
			lastImuLog = millis();
 80145fc:	f7fe ff66 	bl	80134cc <millis>
 8014600:	4602      	mov	r2, r0
 8014602:	4b36      	ldr	r3, [pc, #216]	; (80146dc <sensing_loop+0x1bc>)
 8014604:	601a      	str	r2, [r3, #0]
		}

	}


	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8014606:	f7fe ff61 	bl	80134cc <millis>
 801460a:	4602      	mov	r2, r0
 801460c:	4b37      	ldr	r3, [pc, #220]	; (80146ec <sensing_loop+0x1cc>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	1ad3      	subs	r3, r2, r3
 8014612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014616:	d350      	bcc.n	80146ba <sensing_loop+0x19a>
	{
		if (bmp.active)
 8014618:	4b2c      	ldr	r3, [pc, #176]	; (80146cc <sensing_loop+0x1ac>)
 801461a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801461e:	2b00      	cmp	r3, #0
 8014620:	d019      	beq.n	8014656 <sensing_loop+0x136>
		{
			print("Pressure: "); print_float(bmp.pressure); println("");
 8014622:	4833      	ldr	r0, [pc, #204]	; (80146f0 <sensing_loop+0x1d0>)
 8014624:	f7fe ff14 	bl	8013450 <print>
 8014628:	4b28      	ldr	r3, [pc, #160]	; (80146cc <sensing_loop+0x1ac>)
 801462a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801462e:	eeb0 0a67 	vmov.f32	s0, s15
 8014632:	f7fe ff36 	bl	80134a2 <print_float>
 8014636:	482f      	ldr	r0, [pc, #188]	; (80146f4 <sensing_loop+0x1d4>)
 8014638:	f7fe ff14 	bl	8013464 <println>
			print("Temperature: "); print_float(bmp.temperature); println("");
 801463c:	482e      	ldr	r0, [pc, #184]	; (80146f8 <sensing_loop+0x1d8>)
 801463e:	f7fe ff07 	bl	8013450 <print>
 8014642:	4b22      	ldr	r3, [pc, #136]	; (80146cc <sensing_loop+0x1ac>)
 8014644:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014648:	eeb0 0a67 	vmov.f32	s0, s15
 801464c:	f7fe ff29 	bl	80134a2 <print_float>
 8014650:	4828      	ldr	r0, [pc, #160]	; (80146f4 <sensing_loop+0x1d4>)
 8014652:	f7fe ff07 	bl	8013464 <println>
		}
		if (gps.active)
 8014656:	4b1b      	ldr	r3, [pc, #108]	; (80146c4 <sensing_loop+0x1a4>)
 8014658:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 801465c:	2b00      	cmp	r3, #0
 801465e:	d027      	beq.n	80146b0 <sensing_loop+0x190>
		{
			if (gps.fix)
 8014660:	4b18      	ldr	r3, [pc, #96]	; (80146c4 <sensing_loop+0x1a4>)
 8014662:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8014666:	2b00      	cmp	r3, #0
 8014668:	d01a      	beq.n	80146a0 <sensing_loop+0x180>
			{
				print("Latitude: "); print_float(gps.latitudeDegrees); println("");
 801466a:	4824      	ldr	r0, [pc, #144]	; (80146fc <sensing_loop+0x1dc>)
 801466c:	f7fe fef0 	bl	8013450 <print>
 8014670:	4b14      	ldr	r3, [pc, #80]	; (80146c4 <sensing_loop+0x1a4>)
 8014672:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8014676:	eeb0 0a67 	vmov.f32	s0, s15
 801467a:	f7fe ff12 	bl	80134a2 <print_float>
 801467e:	481d      	ldr	r0, [pc, #116]	; (80146f4 <sensing_loop+0x1d4>)
 8014680:	f7fe fef0 	bl	8013464 <println>
				print("Longitude: "); print_float(gps.longitudeDegrees); println("");
 8014684:	481e      	ldr	r0, [pc, #120]	; (8014700 <sensing_loop+0x1e0>)
 8014686:	f7fe fee3 	bl	8013450 <print>
 801468a:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <sensing_loop+0x1a4>)
 801468c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014690:	eeb0 0a67 	vmov.f32	s0, s15
 8014694:	f7fe ff05 	bl	80134a2 <print_float>
 8014698:	4816      	ldr	r0, [pc, #88]	; (80146f4 <sensing_loop+0x1d4>)
 801469a:	f7fe fee3 	bl	8013464 <println>
 801469e:	e007      	b.n	80146b0 <sensing_loop+0x190>
			}
			else
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80146a0:	2200      	movs	r2, #0
 80146a2:	2140      	movs	r1, #64	; 0x40
 80146a4:	4817      	ldr	r0, [pc, #92]	; (8014704 <sensing_loop+0x1e4>)
 80146a6:	f7f2 fc4b 	bl	8006f40 <HAL_GPIO_WritePin>
				println("GPS has no fix!");
 80146aa:	4817      	ldr	r0, [pc, #92]	; (8014708 <sensing_loop+0x1e8>)
 80146ac:	f7fe feda 	bl	8013464 <println>
			}
		}
		lastDataPrint = millis();
 80146b0:	f7fe ff0c 	bl	80134cc <millis>
 80146b4:	4602      	mov	r2, r0
 80146b6:	4b0d      	ldr	r3, [pc, #52]	; (80146ec <sensing_loop+0x1cc>)
 80146b8:	601a      	str	r2, [r3, #0]
	}
}
 80146ba:	bf00      	nop
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	20002ab0 	.word	0x20002ab0
 80146c8:	200062f8 	.word	0x200062f8
 80146cc:	200062c0 	.word	0x200062c0
 80146d0:	200062fc 	.word	0x200062fc
 80146d4:	20006304 	.word	0x20006304
 80146d8:	20002ce6 	.word	0x20002ce6
 80146dc:	200062f4 	.word	0x200062f4
 80146e0:	20002dbc 	.word	0x20002dbc
 80146e4:	20002dc8 	.word	0x20002dc8
 80146e8:	20002dcc 	.word	0x20002dcc
 80146ec:	20006300 	.word	0x20006300
 80146f0:	0801e1c0 	.word	0x0801e1c0
 80146f4:	0801dda0 	.word	0x0801dda0
 80146f8:	0801e1cc 	.word	0x0801e1cc
 80146fc:	0801e1dc 	.word	0x0801e1dc
 8014700:	0801e1e8 	.word	0x0801e1e8
 8014704:	40020800 	.word	0x40020800
 8014708:	0801e1f4 	.word	0x0801e1f4
 801470c:	00000000 	.word	0x00000000

08014710 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 8014710:	b5b0      	push	{r4, r5, r7, lr}
 8014712:	ed2d 8b02 	vpush	{d8}
 8014716:	b08c      	sub	sp, #48	; 0x30
 8014718:	af00      	add	r7, sp, #0
 801471a:	ed87 0a01 	vstr	s0, [r7, #4]
 801471e:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.6;	// scale of motor power
 8014722:	4b95      	ldr	r3, [pc, #596]	; (8014978 <algoGalgo+0x268>)
 8014724:	627b      	str	r3, [r7, #36]	; 0x24
	float TurboMode= 50.0;
 8014726:	4b95      	ldr	r3, [pc, #596]	; (801497c <algoGalgo+0x26c>)
 8014728:	623b      	str	r3, [r7, #32]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 801472a:	ed97 7a00 	vldr	s14, [r7]
 801472e:	edd7 7a01 	vldr	s15, [r7, #4]
 8014732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014736:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust = 180.0+TurboMode;
 801473a:	edd7 7a08 	vldr	s15, [r7, #32]
 801473e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8014980 <algoGalgo+0x270>
 8014742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014746:	edc7 7a07 	vstr	s15, [r7, #28]

	if (error<-180.0)
 801474a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801474e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014984 <algoGalgo+0x274>
 8014752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801475a:	d50c      	bpl.n	8014776 <algoGalgo+0x66>
		error = target_yaw-yaw+360.0;
 801475c:	ed97 7a00 	vldr	s14, [r7]
 8014760:	edd7 7a01 	vldr	s15, [r7, #4]
 8014764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014768:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8014988 <algoGalgo+0x278>
 801476c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014770:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8014774:	e014      	b.n	80147a0 <algoGalgo+0x90>
	else if (error>180.0)
 8014776:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801477a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8014980 <algoGalgo+0x270>
 801477e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014786:	dd0b      	ble.n	80147a0 <algoGalgo+0x90>
		error = target_yaw-yaw-360.0;
 8014788:	ed97 7a00 	vldr	s14, [r7]
 801478c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014794:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8014988 <algoGalgo+0x278>
 8014798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801479c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 80147a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80147a4:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 80147a6:	4b79      	ldr	r3, [pc, #484]	; (801498c <algoGalgo+0x27c>)
 80147a8:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 80147aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80147ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80147b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147b6:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 80147ba:	4b75      	ldr	r3, [pc, #468]	; (8014990 <algoGalgo+0x280>)
 80147bc:	edd3 7a00 	vldr	s15, [r3]
 80147c0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80147c4:	ee37 8a67 	vsub.f32	s16, s14, s15
 80147c8:	f7fe fe80 	bl	80134cc <millis>
 80147cc:	4602      	mov	r2, r0
 80147ce:	4b71      	ldr	r3, [pc, #452]	; (8014994 <algoGalgo+0x284>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	ee07 3a90 	vmov	s15, r3
 80147d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80147dc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80147e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80147e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147e8:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 80147ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80147f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80147f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if (PID>180.0-TurboMode)
 80147fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147fe:	f7eb feb3 	bl	8000568 <__aeabi_f2d>
 8014802:	4604      	mov	r4, r0
 8014804:	460d      	mov	r5, r1
 8014806:	6a38      	ldr	r0, [r7, #32]
 8014808:	f7eb feae 	bl	8000568 <__aeabi_f2d>
 801480c:	4602      	mov	r2, r0
 801480e:	460b      	mov	r3, r1
 8014810:	f04f 0000 	mov.w	r0, #0
 8014814:	4960      	ldr	r1, [pc, #384]	; (8014998 <algoGalgo+0x288>)
 8014816:	f7eb fd47 	bl	80002a8 <__aeabi_dsub>
 801481a:	4602      	mov	r2, r0
 801481c:	460b      	mov	r3, r1
 801481e:	4620      	mov	r0, r4
 8014820:	4629      	mov	r1, r5
 8014822:	f7ec f989 	bl	8000b38 <__aeabi_dcmpgt>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d008      	beq.n	801483e <algoGalgo+0x12e>
			PID=180.0-TurboMode;
 801482c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014980 <algoGalgo+0x270>
 8014830:	edd7 7a08 	vldr	s15, [r7, #32]
 8014834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014838:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801483c:	e01d      	b.n	801487a <algoGalgo+0x16a>
		else if (PID<-180.0+TurboMode)
 801483e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014840:	f7eb fe92 	bl	8000568 <__aeabi_f2d>
 8014844:	4604      	mov	r4, r0
 8014846:	460d      	mov	r5, r1
 8014848:	6a38      	ldr	r0, [r7, #32]
 801484a:	f7eb fe8d 	bl	8000568 <__aeabi_f2d>
 801484e:	f04f 0200 	mov.w	r2, #0
 8014852:	4b51      	ldr	r3, [pc, #324]	; (8014998 <algoGalgo+0x288>)
 8014854:	f7eb fd28 	bl	80002a8 <__aeabi_dsub>
 8014858:	4602      	mov	r2, r0
 801485a:	460b      	mov	r3, r1
 801485c:	4620      	mov	r0, r4
 801485e:	4629      	mov	r1, r5
 8014860:	f7ec f94c 	bl	8000afc <__aeabi_dcmplt>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	d007      	beq.n	801487a <algoGalgo+0x16a>
			PID=-180.0+TurboMode;
 801486a:	edd7 7a08 	vldr	s15, [r7, #32]
 801486e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014980 <algoGalgo+0x270>
 8014872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014876:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 801487a:	ed97 7a07 	vldr	s14, [r7, #28]
 801487e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014886:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801488e:	ee17 0a90 	vmov	r0, s15
 8014892:	f7eb fe69 	bl	8000568 <__aeabi_f2d>
 8014896:	a334      	add	r3, pc, #208	; (adr r3, 8014968 <algoGalgo+0x258>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb febc 	bl	8000618 <__aeabi_dmul>
 80148a0:	4603      	mov	r3, r0
 80148a2:	460c      	mov	r4, r1
 80148a4:	4618      	mov	r0, r3
 80148a6:	4621      	mov	r1, r4
 80148a8:	f7ec f9ae 	bl	8000c08 <__aeabi_d2f>
 80148ac:	4605      	mov	r5, r0
 80148ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80148b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80148b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80148be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148c2:	ee17 0a90 	vmov	r0, s15
 80148c6:	f7eb fe4f 	bl	8000568 <__aeabi_f2d>
 80148ca:	a327      	add	r3, pc, #156	; (adr r3, 8014968 <algoGalgo+0x258>)
 80148cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d0:	f7eb fea2 	bl	8000618 <__aeabi_dmul>
 80148d4:	4603      	mov	r3, r0
 80148d6:	460c      	mov	r4, r1
 80148d8:	4618      	mov	r0, r3
 80148da:	4621      	mov	r1, r4
 80148dc:	a324      	add	r3, pc, #144	; (adr r3, 8014970 <algoGalgo+0x260>)
 80148de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e2:	f7eb fe99 	bl	8000618 <__aeabi_dmul>
 80148e6:	4603      	mov	r3, r0
 80148e8:	460c      	mov	r4, r1
 80148ea:	4618      	mov	r0, r3
 80148ec:	4621      	mov	r1, r4
 80148ee:	f7ec f98b 	bl	8000c08 <__aeabi_d2f>
 80148f2:	4603      	mov	r3, r0
 80148f4:	ee00 3a90 	vmov	s1, r3
 80148f8:	ee00 5a10 	vmov	s0, r5
 80148fc:	f7ec fbae 	bl	800105c <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8014900:	edd7 7a00 	vldr	s15, [r7]
 8014904:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801490c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014918:	db12      	blt.n	8014940 <algoGalgo+0x230>
 801491a:	edd7 7a00 	vldr	s15, [r7]
 801491e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014926:	ed97 7a01 	vldr	s14, [r7, #4]
 801492a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014932:	d805      	bhi.n	8014940 <algoGalgo+0x230>
 8014934:	2201      	movs	r2, #1
 8014936:	2180      	movs	r1, #128	; 0x80
 8014938:	4818      	ldr	r0, [pc, #96]	; (801499c <algoGalgo+0x28c>)
 801493a:	f7f2 fb01 	bl	8006f40 <HAL_GPIO_WritePin>
 801493e:	e004      	b.n	801494a <algoGalgo+0x23a>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014940:	2200      	movs	r2, #0
 8014942:	2180      	movs	r1, #128	; 0x80
 8014944:	4815      	ldr	r0, [pc, #84]	; (801499c <algoGalgo+0x28c>)
 8014946:	f7f2 fafb 	bl	8006f40 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 801494a:	4a11      	ldr	r2, [pc, #68]	; (8014990 <algoGalgo+0x280>)
 801494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494e:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8014950:	f7fe fdbc 	bl	80134cc <millis>
 8014954:	4602      	mov	r2, r0
 8014956:	4b0f      	ldr	r3, [pc, #60]	; (8014994 <algoGalgo+0x284>)
 8014958:	601a      	str	r2, [r3, #0]
}
 801495a:	bf00      	nop
 801495c:	3730      	adds	r7, #48	; 0x30
 801495e:	46bd      	mov	sp, r7
 8014960:	ecbd 8b02 	vpop	{d8}
 8014964:	bdb0      	pop	{r4, r5, r7, pc}
 8014966:	bf00      	nop
 8014968:	16c16c17 	.word	0x16c16c17
 801496c:	3f66c16c 	.word	0x3f66c16c
 8014970:	d70a3d71 	.word	0xd70a3d71
 8014974:	3fed70a3 	.word	0x3fed70a3
 8014978:	3f19999a 	.word	0x3f19999a
 801497c:	42480000 	.word	0x42480000
 8014980:	43340000 	.word	0x43340000
 8014984:	c3340000 	.word	0xc3340000
 8014988:	43b40000 	.word	0x43b40000
 801498c:	43fa0000 	.word	0x43fa0000
 8014990:	20002864 	.word	0x20002864
 8014994:	20002860 	.word	0x20002860
 8014998:	40668000 	.word	0x40668000
 801499c:	40020800 	.word	0x40020800

080149a0 <bearing>:

static float bearing(float lat,float lon,float lat2,float lon2){
 80149a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80149a4:	b08c      	sub	sp, #48	; 0x30
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80149ac:	edc7 0a02 	vstr	s1, [r7, #8]
 80149b0:	ed87 1a01 	vstr	s2, [r7, #4]
 80149b4:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 80149b8:	68f8      	ldr	r0, [r7, #12]
 80149ba:	f7eb fdd5 	bl	8000568 <__aeabi_f2d>
 80149be:	a39e      	add	r3, pc, #632	; (adr r3, 8014c38 <bearing+0x298>)
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	f7eb fe28 	bl	8000618 <__aeabi_dmul>
 80149c8:	4603      	mov	r3, r0
 80149ca:	460c      	mov	r4, r1
 80149cc:	4618      	mov	r0, r3
 80149ce:	4621      	mov	r1, r4
 80149d0:	f04f 0200 	mov.w	r2, #0
 80149d4:	4b9c      	ldr	r3, [pc, #624]	; (8014c48 <bearing+0x2a8>)
 80149d6:	f7eb ff49 	bl	800086c <__aeabi_ddiv>
 80149da:	4603      	mov	r3, r0
 80149dc:	460c      	mov	r4, r1
 80149de:	4618      	mov	r0, r3
 80149e0:	4621      	mov	r1, r4
 80149e2:	f7ec f911 	bl	8000c08 <__aeabi_d2f>
 80149e6:	4603      	mov	r3, r0
 80149e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7eb fdbc 	bl	8000568 <__aeabi_f2d>
 80149f0:	a391      	add	r3, pc, #580	; (adr r3, 8014c38 <bearing+0x298>)
 80149f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f6:	f7eb fe0f 	bl	8000618 <__aeabi_dmul>
 80149fa:	4603      	mov	r3, r0
 80149fc:	460c      	mov	r4, r1
 80149fe:	4618      	mov	r0, r3
 8014a00:	4621      	mov	r1, r4
 8014a02:	f04f 0200 	mov.w	r2, #0
 8014a06:	4b90      	ldr	r3, [pc, #576]	; (8014c48 <bearing+0x2a8>)
 8014a08:	f7eb ff30 	bl	800086c <__aeabi_ddiv>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	460c      	mov	r4, r1
 8014a10:	4618      	mov	r0, r3
 8014a12:	4621      	mov	r1, r4
 8014a14:	f7ec f8f8 	bl	8000c08 <__aeabi_d2f>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 8014a1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014a20:	edd7 7a03 	vldr	s15, [r7, #12]
 8014a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a28:	ee17 0a90 	vmov	r0, s15
 8014a2c:	f7eb fd9c 	bl	8000568 <__aeabi_f2d>
 8014a30:	a381      	add	r3, pc, #516	; (adr r3, 8014c38 <bearing+0x298>)
 8014a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a36:	f7eb fdef 	bl	8000618 <__aeabi_dmul>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	460c      	mov	r4, r1
 8014a3e:	4618      	mov	r0, r3
 8014a40:	4621      	mov	r1, r4
 8014a42:	f04f 0200 	mov.w	r2, #0
 8014a46:	4b80      	ldr	r3, [pc, #512]	; (8014c48 <bearing+0x2a8>)
 8014a48:	f7eb ff10 	bl	800086c <__aeabi_ddiv>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	460c      	mov	r4, r1
 8014a50:	4618      	mov	r0, r3
 8014a52:	4621      	mov	r1, r4
 8014a54:	f7ec f8d8 	bl	8000c08 <__aeabi_d2f>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 8014a5c:	ed97 7a00 	vldr	s14, [r7]
 8014a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8014a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a68:	ee17 0a90 	vmov	r0, s15
 8014a6c:	f7eb fd7c 	bl	8000568 <__aeabi_f2d>
 8014a70:	a371      	add	r3, pc, #452	; (adr r3, 8014c38 <bearing+0x298>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	f7eb fdcf 	bl	8000618 <__aeabi_dmul>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	460c      	mov	r4, r1
 8014a7e:	4618      	mov	r0, r3
 8014a80:	4621      	mov	r1, r4
 8014a82:	f04f 0200 	mov.w	r2, #0
 8014a86:	4b70      	ldr	r3, [pc, #448]	; (8014c48 <bearing+0x2a8>)
 8014a88:	f7eb fef0 	bl	800086c <__aeabi_ddiv>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	460c      	mov	r4, r1
 8014a90:	4618      	mov	r0, r3
 8014a92:	4621      	mov	r1, r4
 8014a94:	f7ec f8b8 	bl	8000c08 <__aeabi_d2f>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8014a9c:	6a38      	ldr	r0, [r7, #32]
 8014a9e:	f7eb fd63 	bl	8000568 <__aeabi_f2d>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	460c      	mov	r4, r1
 8014aa6:	ec44 3b10 	vmov	d0, r3, r4
 8014aaa:	f006 f899 	bl	801abe0 <sin>
 8014aae:	ec55 4b10 	vmov	r4, r5, d0
 8014ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ab4:	f7eb fd58 	bl	8000568 <__aeabi_f2d>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	ec43 2b10 	vmov	d0, r2, r3
 8014ac0:	f006 f84a 	bl	801ab58 <cos>
 8014ac4:	ec53 2b10 	vmov	r2, r3, d0
 8014ac8:	4620      	mov	r0, r4
 8014aca:	4629      	mov	r1, r5
 8014acc:	f7eb fda4 	bl	8000618 <__aeabi_dmul>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	4621      	mov	r1, r4
 8014ad8:	f7ec f896 	bl	8000c08 <__aeabi_d2f>
 8014adc:	4603      	mov	r3, r0
 8014ade:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8014ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ae2:	f7eb fd41 	bl	8000568 <__aeabi_f2d>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	460c      	mov	r4, r1
 8014aea:	ec44 3b10 	vmov	d0, r3, r4
 8014aee:	f006 f833 	bl	801ab58 <cos>
 8014af2:	ec55 4b10 	vmov	r4, r5, d0
 8014af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014af8:	f7eb fd36 	bl	8000568 <__aeabi_f2d>
 8014afc:	4602      	mov	r2, r0
 8014afe:	460b      	mov	r3, r1
 8014b00:	ec43 2b10 	vmov	d0, r2, r3
 8014b04:	f006 f86c 	bl	801abe0 <sin>
 8014b08:	ec53 2b10 	vmov	r2, r3, d0
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	4629      	mov	r1, r5
 8014b10:	f7eb fd82 	bl	8000618 <__aeabi_dmul>
 8014b14:	4603      	mov	r3, r0
 8014b16:	460c      	mov	r4, r1
 8014b18:	4625      	mov	r5, r4
 8014b1a:	461c      	mov	r4, r3
 8014b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b1e:	f7eb fd23 	bl	8000568 <__aeabi_f2d>
 8014b22:	4602      	mov	r2, r0
 8014b24:	460b      	mov	r3, r1
 8014b26:	ec43 2b10 	vmov	d0, r2, r3
 8014b2a:	f006 f859 	bl	801abe0 <sin>
 8014b2e:	ec59 8b10 	vmov	r8, r9, d0
 8014b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b34:	f7eb fd18 	bl	8000568 <__aeabi_f2d>
 8014b38:	4602      	mov	r2, r0
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	ec43 2b10 	vmov	d0, r2, r3
 8014b40:	f006 f80a 	bl	801ab58 <cos>
 8014b44:	ec53 2b10 	vmov	r2, r3, d0
 8014b48:	4640      	mov	r0, r8
 8014b4a:	4649      	mov	r1, r9
 8014b4c:	f7eb fd64 	bl	8000618 <__aeabi_dmul>
 8014b50:	4602      	mov	r2, r0
 8014b52:	460b      	mov	r3, r1
 8014b54:	4690      	mov	r8, r2
 8014b56:	4699      	mov	r9, r3
 8014b58:	6a38      	ldr	r0, [r7, #32]
 8014b5a:	f7eb fd05 	bl	8000568 <__aeabi_f2d>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	460b      	mov	r3, r1
 8014b62:	ec43 2b10 	vmov	d0, r2, r3
 8014b66:	f005 fff7 	bl	801ab58 <cos>
 8014b6a:	ec53 2b10 	vmov	r2, r3, d0
 8014b6e:	4640      	mov	r0, r8
 8014b70:	4649      	mov	r1, r9
 8014b72:	f7eb fd51 	bl	8000618 <__aeabi_dmul>
 8014b76:	4602      	mov	r2, r0
 8014b78:	460b      	mov	r3, r1
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	4629      	mov	r1, r5
 8014b7e:	f7eb fb93 	bl	80002a8 <__aeabi_dsub>
 8014b82:	4603      	mov	r3, r0
 8014b84:	460c      	mov	r4, r1
 8014b86:	4618      	mov	r0, r3
 8014b88:	4621      	mov	r1, r4
 8014b8a:	f7ec f83d 	bl	8000c08 <__aeabi_d2f>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8014b92:	69f8      	ldr	r0, [r7, #28]
 8014b94:	f7eb fce8 	bl	8000568 <__aeabi_f2d>
 8014b98:	4604      	mov	r4, r0
 8014b9a:	460d      	mov	r5, r1
 8014b9c:	69b8      	ldr	r0, [r7, #24]
 8014b9e:	f7eb fce3 	bl	8000568 <__aeabi_f2d>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	ec43 2b11 	vmov	d1, r2, r3
 8014baa:	ec45 4b10 	vmov	d0, r4, r5
 8014bae:	f006 f8b7 	bl	801ad20 <atan2>
 8014bb2:	ec54 3b10 	vmov	r3, r4, d0
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	4621      	mov	r1, r4
 8014bba:	f7ec f825 	bl	8000c08 <__aeabi_d2f>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;// radians to degrees
 8014bc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8014bc6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014c4c <bearing+0x2ac>
 8014bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014bce:	ee17 0a90 	vmov	r0, s15
 8014bd2:	f7eb fcc9 	bl	8000568 <__aeabi_f2d>
 8014bd6:	a318      	add	r3, pc, #96	; (adr r3, 8014c38 <bearing+0x298>)
 8014bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bdc:	f7eb fe46 	bl	800086c <__aeabi_ddiv>
 8014be0:	4603      	mov	r3, r0
 8014be2:	460c      	mov	r4, r1
 8014be4:	4618      	mov	r0, r3
 8014be6:	4621      	mov	r1, r4
 8014be8:	f7ec f80e 	bl	8000c08 <__aeabi_d2f>
 8014bec:	4603      	mov	r3, r0
 8014bee:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8014bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8014bf4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014c50 <bearing+0x2b0>
 8014bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bfc:	ee17 0a90 	vmov	r0, s15
 8014c00:	f7eb fcb2 	bl	8000568 <__aeabi_f2d>
 8014c04:	4603      	mov	r3, r0
 8014c06:	460c      	mov	r4, r1
 8014c08:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8014c40 <bearing+0x2a0>
 8014c0c:	ec44 3b10 	vmov	d0, r3, r4
 8014c10:	f006 f888 	bl	801ad24 <fmod>
 8014c14:	ec54 3b10 	vmov	r3, r4, d0
 8014c18:	4618      	mov	r0, r3
 8014c1a:	4621      	mov	r1, r4
 8014c1c:	f7eb fff4 	bl	8000c08 <__aeabi_d2f>
 8014c20:	4603      	mov	r3, r0
 8014c22:	617b      	str	r3, [r7, #20]
   // std::cout<< brng;
    return brng;
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	ee07 3a90 	vmov	s15, r3
    }
 8014c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014c2e:	3730      	adds	r7, #48	; 0x30
 8014c30:	46bd      	mov	sp, r7
 8014c32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014c36:	bf00      	nop
 8014c38:	54442d18 	.word	0x54442d18
 8014c3c:	400921fb 	.word	0x400921fb
 8014c40:	00000000 	.word	0x00000000
 8014c44:	40768000 	.word	0x40768000
 8014c48:	40668000 	.word	0x40668000
 8014c4c:	43340000 	.word	0x43340000
 8014c50:	43b40000 	.word	0x43b40000

08014c54 <setup>:
float target_lat;
float target_lon;
uint8_t servoState;

static void setup(void)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8014c58:	f000 fea0 	bl	801599c <Get_TIM3_Instance>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2108      	movs	r1, #8
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7f7 f89f 	bl	800bda4 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 990;
 8014c66:	4b26      	ldr	r3, [pc, #152]	; (8014d00 <setup+0xac>)
 8014c68:	f240 32de 	movw	r2, #990	; 0x3de
 8014c6c:	63da      	str	r2, [r3, #60]	; 0x3c

	// wait for USR button press
	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8014c6e:	2201      	movs	r2, #1
 8014c70:	2140      	movs	r1, #64	; 0x40
 8014c72:	4824      	ldr	r0, [pc, #144]	; (8014d04 <setup+0xb0>)
 8014c74:	f7f2 f964 	bl	8006f40 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8014c78:	4823      	ldr	r0, [pc, #140]	; (8014d08 <setup+0xb4>)
 8014c7a:	f7fe fbf3 	bl	8013464 <println>
 8014c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014c82:	f7f1 fadf 	bl	8006244 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014c86:	2200      	movs	r2, #0
 8014c88:	2140      	movs	r1, #64	; 0x40
 8014c8a:	481e      	ldr	r0, [pc, #120]	; (8014d04 <setup+0xb0>)
 8014c8c:	f7f2 f958 	bl	8006f40 <HAL_GPIO_WritePin>

	TIM3->CCR3 = 510;
 8014c90:	4b1b      	ldr	r3, [pc, #108]	; (8014d00 <setup+0xac>)
 8014c92:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8014c96:	63da      	str	r2, [r3, #60]	; 0x3c

	if (sdTest_begin()) { println("SD card is working!");}
 8014c98:	f7fe fc78 	bl	801358c <sdTest_begin>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d002      	beq.n	8014ca8 <setup+0x54>
 8014ca2:	481a      	ldr	r0, [pc, #104]	; (8014d0c <setup+0xb8>)
 8014ca4:	f7fe fbde 	bl	8013464 <println>
	log_new();
 8014ca8:	f7f0 ff06 	bl	8005ab8 <log_new>
	SD_init();
 8014cac:	f7ec faa0 	bl	80011f0 <SD_init>
	if (duplex_begin()) { println("Radio is working");}
 8014cb0:	f7fe fd0e 	bl	80136d0 <duplex_begin>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d002      	beq.n	8014cc0 <setup+0x6c>
 8014cba:	4815      	ldr	r0, [pc, #84]	; (8014d10 <setup+0xbc>)
 8014cbc:	f7fe fbd2 	bl	8013464 <println>

	sensing_begin();
 8014cc0:	f7ff fb84 	bl	80143cc <sensing_begin>

	target_lat = 20.0;
 8014cc4:	4b13      	ldr	r3, [pc, #76]	; (8014d14 <setup+0xc0>)
 8014cc6:	4a14      	ldr	r2, [pc, #80]	; (8014d18 <setup+0xc4>)
 8014cc8:	601a      	str	r2, [r3, #0]
	target_lon = 30.0;
 8014cca:	4b14      	ldr	r3, [pc, #80]	; (8014d1c <setup+0xc8>)
 8014ccc:	4a14      	ldr	r2, [pc, #80]	; (8014d20 <setup+0xcc>)
 8014cce:	601a      	str	r2, [r3, #0]
	target_yaw = 180.0; //statyczne 180.0
 8014cd0:	4b14      	ldr	r3, [pc, #80]	; (8014d24 <setup+0xd0>)
 8014cd2:	4a15      	ldr	r2, [pc, #84]	; (8014d28 <setup+0xd4>)
 8014cd4:	601a      	str	r2, [r3, #0]

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014cdc:	4813      	ldr	r0, [pc, #76]	; (8014d2c <setup+0xd8>)
 8014cde:	f7f2 f92f 	bl	8006f40 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);

	duplex_loop("new transmit", 14, true);
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	210e      	movs	r1, #14
 8014ce6:	4812      	ldr	r0, [pc, #72]	; (8014d30 <setup+0xdc>)
 8014ce8:	f7fe fd7a 	bl	80137e0 <duplex_loop>
	lastSave = millis();
 8014cec:	f7fe fbee 	bl	80134cc <millis>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	4b10      	ldr	r3, [pc, #64]	; (8014d34 <setup+0xe0>)
 8014cf4:	601a      	str	r2, [r3, #0]
	servoState = 0;
 8014cf6:	4b10      	ldr	r3, [pc, #64]	; (8014d38 <setup+0xe4>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	701a      	strb	r2, [r3, #0]
}
 8014cfc:	bf00      	nop
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	40000400 	.word	0x40000400
 8014d04:	40020800 	.word	0x40020800
 8014d08:	0801e218 	.word	0x0801e218
 8014d0c:	0801e228 	.word	0x0801e228
 8014d10:	0801e23c 	.word	0x0801e23c
 8014d14:	20006320 	.word	0x20006320
 8014d18:	41a00000 	.word	0x41a00000
 8014d1c:	20006324 	.word	0x20006324
 8014d20:	41f00000 	.word	0x41f00000
 8014d24:	20006318 	.word	0x20006318
 8014d28:	43340000 	.word	0x43340000
 8014d2c:	40020400 	.word	0x40020400
 8014d30:	0801e250 	.word	0x0801e250
 8014d34:	20006328 	.word	0x20006328
 8014d38:	2000631c 	.word	0x2000631c
 8014d3c:	00000000 	.word	0x00000000

08014d40 <preparePacket>:

static void preparePacket()
{
 8014d40:	b590      	push	{r4, r7, lr}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
	uint32_t temv = 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	607b      	str	r3, [r7, #4]
	temv = (uint32_t)(bmp.pressure * 10);
 8014d4a:	4b6d      	ldr	r3, [pc, #436]	; (8014f00 <preparePacket+0x1c0>)
 8014d4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014d50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d5c:	ee17 3a90 	vmov	r3, s15
 8014d60:	607b      	str	r3, [r7, #4]
	radio.txBuffer[0] = (uint8_t)(temv >> 0) & 0xFF;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	b2da      	uxtb	r2, r3
 8014d66:	4b67      	ldr	r3, [pc, #412]	; (8014f04 <preparePacket+0x1c4>)
 8014d68:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	radio.txBuffer[1] = (uint8_t)(temv >> 8) & 0xFF;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	0a1b      	lsrs	r3, r3, #8
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	4b64      	ldr	r3, [pc, #400]	; (8014f04 <preparePacket+0x1c4>)
 8014d74:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	radio.txBuffer[2] = (uint8_t)(temv >> 16) & 0xFF;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	0c1b      	lsrs	r3, r3, #16
 8014d7c:	b2da      	uxtb	r2, r3
 8014d7e:	4b61      	ldr	r3, [pc, #388]	; (8014f04 <preparePacket+0x1c4>)
 8014d80:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	radio.txBuffer[3] = (uint8_t)(temv >> 24) & 0xFF;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	0e1b      	lsrs	r3, r3, #24
 8014d88:	b2da      	uxtb	r2, r3
 8014d8a:	4b5e      	ldr	r3, [pc, #376]	; (8014f04 <preparePacket+0x1c4>)
 8014d8c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

	temv = (uint32_t)(bmp.temperature * 10);
 8014d90:	4b5b      	ldr	r3, [pc, #364]	; (8014f00 <preparePacket+0x1c0>)
 8014d92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014d96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014da2:	ee17 3a90 	vmov	r3, s15
 8014da6:	607b      	str	r3, [r7, #4]
	radio.txBuffer[4] = (uint8_t)(temv >> 0) & 0xFF;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	b2da      	uxtb	r2, r3
 8014dac:	4b55      	ldr	r3, [pc, #340]	; (8014f04 <preparePacket+0x1c4>)
 8014dae:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	radio.txBuffer[5] = (uint8_t)(temv >> 8) & 0xFF;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	0a1b      	lsrs	r3, r3, #8
 8014db6:	b2da      	uxtb	r2, r3
 8014db8:	4b52      	ldr	r3, [pc, #328]	; (8014f04 <preparePacket+0x1c4>)
 8014dba:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	radio.txBuffer[6] = (uint8_t)(temv >> 16) & 0xFF;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	0c1b      	lsrs	r3, r3, #16
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	4b4f      	ldr	r3, [pc, #316]	; (8014f04 <preparePacket+0x1c4>)
 8014dc6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	radio.txBuffer[7] = (uint8_t)(temv >> 24) & 0xFF;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	0e1b      	lsrs	r3, r3, #24
 8014dce:	b2da      	uxtb	r2, r3
 8014dd0:	4b4c      	ldr	r3, [pc, #304]	; (8014f04 <preparePacket+0x1c4>)
 8014dd2:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	temv = (uint32_t)(gps.latitudeDegrees * 10000000);
 8014dd6:	4b4c      	ldr	r3, [pc, #304]	; (8014f08 <preparePacket+0x1c8>)
 8014dd8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8014ddc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014f0c <preparePacket+0x1cc>
 8014de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014de8:	ee17 3a90 	vmov	r3, s15
 8014dec:	607b      	str	r3, [r7, #4]
	radio.txBuffer[8] = (uint8_t)(temv >> 0) & 0xFF;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	4b44      	ldr	r3, [pc, #272]	; (8014f04 <preparePacket+0x1c4>)
 8014df4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	radio.txBuffer[9] = (uint8_t)(temv >> 8) & 0xFF;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	0a1b      	lsrs	r3, r3, #8
 8014dfc:	b2da      	uxtb	r2, r3
 8014dfe:	4b41      	ldr	r3, [pc, #260]	; (8014f04 <preparePacket+0x1c4>)
 8014e00:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	radio.txBuffer[10] = (uint8_t)(temv >> 16) & 0xFF;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	0c1b      	lsrs	r3, r3, #16
 8014e08:	b2da      	uxtb	r2, r3
 8014e0a:	4b3e      	ldr	r3, [pc, #248]	; (8014f04 <preparePacket+0x1c4>)
 8014e0c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	radio.txBuffer[11] = (uint8_t)(temv >> 24) & 0xFF;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	0e1b      	lsrs	r3, r3, #24
 8014e14:	b2da      	uxtb	r2, r3
 8014e16:	4b3b      	ldr	r3, [pc, #236]	; (8014f04 <preparePacket+0x1c4>)
 8014e18:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

	temv = (uint32_t)(gps.longitudeDegrees * 10000000);
 8014e1c:	4b3a      	ldr	r3, [pc, #232]	; (8014f08 <preparePacket+0x1c8>)
 8014e1e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014e22:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8014f0c <preparePacket+0x1cc>
 8014e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014e2e:	ee17 3a90 	vmov	r3, s15
 8014e32:	607b      	str	r3, [r7, #4]
	radio.txBuffer[12] = (uint8_t)(temv >> 0) & 0xFF;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	b2da      	uxtb	r2, r3
 8014e38:	4b32      	ldr	r3, [pc, #200]	; (8014f04 <preparePacket+0x1c4>)
 8014e3a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	radio.txBuffer[13] = (uint8_t)(temv >> 8) & 0xFF;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	0a1b      	lsrs	r3, r3, #8
 8014e42:	b2da      	uxtb	r2, r3
 8014e44:	4b2f      	ldr	r3, [pc, #188]	; (8014f04 <preparePacket+0x1c4>)
 8014e46:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	radio.txBuffer[14] = (uint8_t)(temv >> 16) & 0xFF;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	0c1b      	lsrs	r3, r3, #16
 8014e4e:	b2da      	uxtb	r2, r3
 8014e50:	4b2c      	ldr	r3, [pc, #176]	; (8014f04 <preparePacket+0x1c4>)
 8014e52:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	radio.txBuffer[15] = (uint8_t)(temv >> 24) & 0xFF;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	0e1b      	lsrs	r3, r3, #24
 8014e5a:	b2da      	uxtb	r2, r3
 8014e5c:	4b29      	ldr	r3, [pc, #164]	; (8014f04 <preparePacket+0x1c4>)
 8014e5e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

	radio.txBuffer[16] = (uint8_t)(yaw * (255.0 / 360.0));
 8014e62:	4b2b      	ldr	r3, [pc, #172]	; (8014f10 <preparePacket+0x1d0>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7eb fb7e 	bl	8000568 <__aeabi_f2d>
 8014e6c:	a322      	add	r3, pc, #136	; (adr r3, 8014ef8 <preparePacket+0x1b8>)
 8014e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e72:	f7eb fbd1 	bl	8000618 <__aeabi_dmul>
 8014e76:	4603      	mov	r3, r0
 8014e78:	460c      	mov	r4, r1
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	f7eb fea3 	bl	8000bc8 <__aeabi_d2uiz>
 8014e82:	4603      	mov	r3, r0
 8014e84:	b2da      	uxtb	r2, r3
 8014e86:	4b1f      	ldr	r3, [pc, #124]	; (8014f04 <preparePacket+0x1c4>)
 8014e88:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	radio.txBuffer[17] = (uint8_t)(pitch * (255.0 / 360.0));
 8014e8c:	4b21      	ldr	r3, [pc, #132]	; (8014f14 <preparePacket+0x1d4>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7eb fb69 	bl	8000568 <__aeabi_f2d>
 8014e96:	a318      	add	r3, pc, #96	; (adr r3, 8014ef8 <preparePacket+0x1b8>)
 8014e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9c:	f7eb fbbc 	bl	8000618 <__aeabi_dmul>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	460c      	mov	r4, r1
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	4621      	mov	r1, r4
 8014ea8:	f7eb fe8e 	bl	8000bc8 <__aeabi_d2uiz>
 8014eac:	4603      	mov	r3, r0
 8014eae:	b2da      	uxtb	r2, r3
 8014eb0:	4b14      	ldr	r3, [pc, #80]	; (8014f04 <preparePacket+0x1c4>)
 8014eb2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	radio.txBuffer[18] = (uint8_t)(roll * (255.0 / 360.0));
 8014eb6:	4b18      	ldr	r3, [pc, #96]	; (8014f18 <preparePacket+0x1d8>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7eb fb54 	bl	8000568 <__aeabi_f2d>
 8014ec0:	a30d      	add	r3, pc, #52	; (adr r3, 8014ef8 <preparePacket+0x1b8>)
 8014ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec6:	f7eb fba7 	bl	8000618 <__aeabi_dmul>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	460c      	mov	r4, r1
 8014ece:	4618      	mov	r0, r3
 8014ed0:	4621      	mov	r1, r4
 8014ed2:	f7eb fe79 	bl	8000bc8 <__aeabi_d2uiz>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	b2da      	uxtb	r2, r3
 8014eda:	4b0a      	ldr	r3, [pc, #40]	; (8014f04 <preparePacket+0x1c4>)
 8014edc:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	radio.txBuffer[19] = 0x00;
 8014ee0:	4b08      	ldr	r3, [pc, #32]	; (8014f04 <preparePacket+0x1c4>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	radio.txLen = 20;
 8014ee8:	4b06      	ldr	r3, [pc, #24]	; (8014f04 <preparePacket+0x1c4>)
 8014eea:	2214      	movs	r2, #20
 8014eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd90      	pop	{r4, r7, pc}
 8014ef8:	aaaaaaab 	.word	0xaaaaaaab
 8014efc:	3fe6aaaa 	.word	0x3fe6aaaa
 8014f00:	200062c0 	.word	0x200062c0
 8014f04:	20002868 	.word	0x20002868
 8014f08:	20002ab0 	.word	0x20002ab0
 8014f0c:	4b189680 	.word	0x4b189680
 8014f10:	20002dbc 	.word	0x20002dbc
 8014f14:	20002dc8 	.word	0x20002dc8
 8014f18:	20002dcc 	.word	0x20002dcc
 8014f1c:	00000000 	.word	0x00000000

08014f20 <loop>:


static void loop(void)
{
 8014f20:	b590      	push	{r4, r7, lr}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
	sensing_loop();
 8014f26:	f7ff fafb 	bl	8014520 <sensing_loop>

	if (millis() - lastSave >= 1137)	// save SD buffers while waiting for packet but no frequent than 1Hz
 8014f2a:	f7fe facf 	bl	80134cc <millis>
 8014f2e:	4602      	mov	r2, r0
 8014f30:	4b65      	ldr	r3, [pc, #404]	; (80150c8 <loop+0x1a8>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8014f3a:	d906      	bls.n	8014f4a <loop+0x2a>
	{
		log_save();
 8014f3c:	f7f0 fe9a 	bl	8005c74 <log_save>
		lastSave = millis();
 8014f40:	f7fe fac4 	bl	80134cc <millis>
 8014f44:	4602      	mov	r2, r0
 8014f46:	4b60      	ldr	r3, [pc, #384]	; (80150c8 <loop+0x1a8>)
 8014f48:	601a      	str	r2, [r3, #0]
	}

	if (duplex_checkINT())
 8014f4a:	f7fe fc21 	bl	8013790 <duplex_checkINT>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d07e      	beq.n	8015052 <loop+0x132>
	{
		//radio.txLen = sprintf(radio.txBuffer, "%.01f_%.01f_%.07f_%.07f ", bmp.pressure, bmp.temperature, gps.latitudeDegrees, gps.longitudeDegrees); //imortant to leave last byte
		preparePacket();
 8014f54:	f7ff fef4 	bl	8014d40 <preparePacket>
		duplex_loop(radio.txBuffer, radio.txLen, true);
 8014f58:	4b5c      	ldr	r3, [pc, #368]	; (80150cc <loop+0x1ac>)
 8014f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f5e:	2201      	movs	r2, #1
 8014f60:	4619      	mov	r1, r3
 8014f62:	485b      	ldr	r0, [pc, #364]	; (80150d0 <loop+0x1b0>)
 8014f64:	f7fe fc3c 	bl	80137e0 <duplex_loop>

		if ((float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0))
 8014f68:	4b58      	ldr	r3, [pc, #352]	; (80150cc <loop+0x1ac>)
 8014f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f6e:	3b01      	subs	r3, #1
 8014f70:	4a56      	ldr	r2, [pc, #344]	; (80150cc <loop+0x1ac>)
 8014f72:	4413      	add	r3, r2
 8014f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f78:	ee07 3a90 	vmov	s15, r3
 8014f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f80:	ee17 0a90 	vmov	r0, s15
 8014f84:	f7eb faf0 	bl	8000568 <__aeabi_f2d>
 8014f88:	a34d      	add	r3, pc, #308	; (adr r3, 80150c0 <loop+0x1a0>)
 8014f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8e:	f7eb fb43 	bl	8000618 <__aeabi_dmul>
 8014f92:	4603      	mov	r3, r0
 8014f94:	460c      	mov	r4, r1
 8014f96:	4618      	mov	r0, r3
 8014f98:	4621      	mov	r1, r4
 8014f9a:	f04f 0200 	mov.w	r2, #0
 8014f9e:	f04f 0300 	mov.w	r3, #0
 8014fa2:	f7eb fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d11d      	bne.n	8014fe8 <loop+0xc8>
		{
			target_yaw = (float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0);
 8014fac:	4b47      	ldr	r3, [pc, #284]	; (80150cc <loop+0x1ac>)
 8014fae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	4a45      	ldr	r2, [pc, #276]	; (80150cc <loop+0x1ac>)
 8014fb6:	4413      	add	r3, r2
 8014fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014fbc:	ee07 3a90 	vmov	s15, r3
 8014fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fc4:	ee17 0a90 	vmov	r0, s15
 8014fc8:	f7eb face 	bl	8000568 <__aeabi_f2d>
 8014fcc:	a33c      	add	r3, pc, #240	; (adr r3, 80150c0 <loop+0x1a0>)
 8014fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd2:	f7eb fb21 	bl	8000618 <__aeabi_dmul>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	460c      	mov	r4, r1
 8014fda:	4618      	mov	r0, r3
 8014fdc:	4621      	mov	r1, r4
 8014fde:	f7eb fe13 	bl	8000c08 <__aeabi_d2f>
 8014fe2:	4602      	mov	r2, r0
 8014fe4:	4b3b      	ldr	r3, [pc, #236]	; (80150d4 <loop+0x1b4>)
 8014fe6:	601a      	str	r2, [r3, #0]
		}

		print_float(target_yaw); println("<< YAW << YAW");
 8014fe8:	4b3a      	ldr	r3, [pc, #232]	; (80150d4 <loop+0x1b4>)
 8014fea:	edd3 7a00 	vldr	s15, [r3]
 8014fee:	eeb0 0a67 	vmov.f32	s0, s15
 8014ff2:	f7fe fa56 	bl	80134a2 <print_float>
 8014ff6:	4838      	ldr	r0, [pc, #224]	; (80150d8 <loop+0x1b8>)
 8014ff8:	f7fe fa34 	bl	8013464 <println>
		print_int(radio.rxBuffer[0]); println("<< SERVO");
 8014ffc:	4b33      	ldr	r3, [pc, #204]	; (80150cc <loop+0x1ac>)
 8014ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015002:	4618      	mov	r0, r3
 8015004:	f7fe fa43 	bl	801348e <print_int>
 8015008:	4834      	ldr	r0, [pc, #208]	; (80150dc <loop+0x1bc>)
 801500a:	f7fe fa2b 	bl	8013464 <println>
		if (radio.rxBuffer[0] == 1 || radio.rxBuffer[0] == 3) TIM3->CCR3 = 550;
 801500e:	4b2f      	ldr	r3, [pc, #188]	; (80150cc <loop+0x1ac>)
 8015010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015014:	2b01      	cmp	r3, #1
 8015016:	d004      	beq.n	8015022 <loop+0x102>
 8015018:	4b2c      	ldr	r3, [pc, #176]	; (80150cc <loop+0x1ac>)
 801501a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801501e:	2b03      	cmp	r3, #3
 8015020:	d104      	bne.n	801502c <loop+0x10c>
 8015022:	4b2f      	ldr	r3, [pc, #188]	; (80150e0 <loop+0x1c0>)
 8015024:	f240 2226 	movw	r2, #550	; 0x226
 8015028:	63da      	str	r2, [r3, #60]	; 0x3c
 801502a:	e003      	b.n	8015034 <loop+0x114>
		else TIM3->CCR3 = 990;
 801502c:	4b2c      	ldr	r3, [pc, #176]	; (80150e0 <loop+0x1c0>)
 801502e:	f240 32de 	movw	r2, #990	; 0x3de
 8015032:	63da      	str	r2, [r3, #60]	; 0x3c
		if (radio.rxBuffer[0] == 2 || radio.rxBuffer[0] == 3) enableMotors();
 8015034:	4b25      	ldr	r3, [pc, #148]	; (80150cc <loop+0x1ac>)
 8015036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801503a:	2b02      	cmp	r3, #2
 801503c:	d004      	beq.n	8015048 <loop+0x128>
 801503e:	4b23      	ldr	r3, [pc, #140]	; (80150cc <loop+0x1ac>)
 8015040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015044:	2b03      	cmp	r3, #3
 8015046:	d102      	bne.n	801504e <loop+0x12e>
 8015048:	f7ec f86e 	bl	8001128 <enableMotors>
 801504c:	e001      	b.n	8015052 <loop+0x132>
		else disableMotors();
 801504e:	f7ec f8ad 	bl	80011ac <disableMotors>
	}


	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 8015052:	f7fe fa3b 	bl	80134cc <millis>
 8015056:	4602      	mov	r2, r0
 8015058:	4b22      	ldr	r3, [pc, #136]	; (80150e4 <loop+0x1c4>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	1ad3      	subs	r3, r2, r3
 801505e:	2b09      	cmp	r3, #9
 8015060:	d92a      	bls.n	80150b8 <loop+0x198>
	{

		imuTest_getEuler();
 8015062:	f7fe fe41 	bl	8013ce8 <imuTest_getEuler>
		float brng = bearing(gps.latitudeDegrees, gps.longitudeDegrees, target_lat, target_lon);
 8015066:	4b20      	ldr	r3, [pc, #128]	; (80150e8 <loop+0x1c8>)
 8015068:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801506c:	4b1e      	ldr	r3, [pc, #120]	; (80150e8 <loop+0x1c8>)
 801506e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015072:	4b1e      	ldr	r3, [pc, #120]	; (80150ec <loop+0x1cc>)
 8015074:	edd3 6a00 	vldr	s13, [r3]
 8015078:	4b1d      	ldr	r3, [pc, #116]	; (80150f0 <loop+0x1d0>)
 801507a:	ed93 6a00 	vldr	s12, [r3]
 801507e:	eef0 1a46 	vmov.f32	s3, s12
 8015082:	eeb0 1a66 	vmov.f32	s2, s13
 8015086:	eef0 0a47 	vmov.f32	s1, s14
 801508a:	eeb0 0a67 	vmov.f32	s0, s15
 801508e:	f7ff fc87 	bl	80149a0 <bearing>
 8015092:	ed87 0a01 	vstr	s0, [r7, #4]
	//	algoGalgo(yaw, brng); // target_yaw wyliczane z pozycji anteny;
		algoGalgo(yaw, target_yaw); //statyczny target_yaw
 8015096:	4b17      	ldr	r3, [pc, #92]	; (80150f4 <loop+0x1d4>)
 8015098:	edd3 7a00 	vldr	s15, [r3]
 801509c:	4b0d      	ldr	r3, [pc, #52]	; (80150d4 <loop+0x1b4>)
 801509e:	ed93 7a00 	vldr	s14, [r3]
 80150a2:	eef0 0a47 	vmov.f32	s1, s14
 80150a6:	eeb0 0a67 	vmov.f32	s0, s15
 80150aa:	f7ff fb31 	bl	8014710 <algoGalgo>
		//print_float(yaw); println("");
		lastMotUpdate = millis();
 80150ae:	f7fe fa0d 	bl	80134cc <millis>
 80150b2:	4602      	mov	r2, r0
 80150b4:	4b0b      	ldr	r3, [pc, #44]	; (80150e4 <loop+0x1c4>)
 80150b6:	601a      	str	r2, [r3, #0]
	}
}
 80150b8:	bf00      	nop
 80150ba:	370c      	adds	r7, #12
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd90      	pop	{r4, r7, pc}
 80150c0:	96969697 	.word	0x96969697
 80150c4:	3ff69696 	.word	0x3ff69696
 80150c8:	20006328 	.word	0x20006328
 80150cc:	20002868 	.word	0x20002868
 80150d0:	200029ac 	.word	0x200029ac
 80150d4:	20006318 	.word	0x20006318
 80150d8:	0801e260 	.word	0x0801e260
 80150dc:	0801e270 	.word	0x0801e270
 80150e0:	40000400 	.word	0x40000400
 80150e4:	20006310 	.word	0x20006310
 80150e8:	20002ab0 	.word	0x20002ab0
 80150ec:	20006320 	.word	0x20006320
 80150f0:	20006324 	.word	0x20006324
 80150f4:	20002dbc 	.word	0x20002dbc

080150f8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
 8015100:	2201      	movs	r2, #1
 8015102:	4905      	ldr	r1, [pc, #20]	; (8015118 <HAL_UART_RxCpltCallback+0x20>)
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7f7 fc9b 	bl	800ca40 <HAL_UART_Receive_IT>
	GPS_read(&gps);
 801510a:	4804      	ldr	r0, [pc, #16]	; (801511c <HAL_UART_RxCpltCallback+0x24>)
 801510c:	f7ed fa04 	bl	8002518 <GPS_read>
}
 8015110:	bf00      	nop
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	20002cce 	.word	0x20002cce
 801511c:	20002ab0 	.word	0x20002ab0

08015120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015124:	f7f1 f81c 	bl	8006160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015128:	f000 f862 	bl	80151f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801512c:	f000 fb30 	bl	8015790 <MX_GPIO_Init>
  MX_DMA_Init();
 8015130:	f000 fb06 	bl	8015740 <MX_DMA_Init>
  MX_I2C1_Init();
 8015134:	f000 f8de 	bl	80152f4 <MX_I2C1_Init>
  MX_RTC_Init();
 8015138:	f000 f90a 	bl	8015350 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 801513c:	f000 f92e 	bl	801539c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8015140:	f000 f94c 	bl	80153dc <MX_SPI1_Init>
  MX_TIM2_Init();
 8015144:	f000 f980 	bl	8015448 <MX_TIM2_Init>
  MX_TIM3_Init();
 8015148:	f000 f9cc 	bl	80154e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 801514c:	f000 fa4c 	bl	80155e8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8015150:	f000 facc 	bl	80156ec <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8015154:	f7fe f94c 	bl	80133f0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8015158:	f001 f9ee 	bl	8016538 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 801515c:	4820      	ldr	r0, [pc, #128]	; (80151e0 <main+0xc0>)
 801515e:	f7f6 fdc8 	bl	800bcf2 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8015162:	2200      	movs	r2, #0
 8015164:	2180      	movs	r1, #128	; 0x80
 8015166:	481f      	ldr	r0, [pc, #124]	; (80151e4 <main+0xc4>)
 8015168:	f7f1 feea 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801516c:	2200      	movs	r2, #0
 801516e:	2140      	movs	r1, #64	; 0x40
 8015170:	481c      	ldr	r0, [pc, #112]	; (80151e4 <main+0xc4>)
 8015172:	f7f1 fee5 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8015176:	2200      	movs	r2, #0
 8015178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801517c:	481a      	ldr	r0, [pc, #104]	; (80151e8 <main+0xc8>)
 801517e:	f7f1 fedf 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8015182:	2200      	movs	r2, #0
 8015184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015188:	4817      	ldr	r0, [pc, #92]	; (80151e8 <main+0xc8>)
 801518a:	f7f1 fed9 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 801518e:	2200      	movs	r2, #0
 8015190:	2101      	movs	r1, #1
 8015192:	4816      	ldr	r0, [pc, #88]	; (80151ec <main+0xcc>)
 8015194:	f7f1 fed4 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8015198:	2200      	movs	r2, #0
 801519a:	2104      	movs	r1, #4
 801519c:	4813      	ldr	r0, [pc, #76]	; (80151ec <main+0xcc>)
 801519e:	f7f1 fecf 	bl	8006f40 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 80151a2:	2200      	movs	r2, #0
 80151a4:	2101      	movs	r1, #1
 80151a6:	480f      	ldr	r0, [pc, #60]	; (80151e4 <main+0xc4>)
 80151a8:	f7f1 feca 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 80151ac:	2200      	movs	r2, #0
 80151ae:	2104      	movs	r1, #4
 80151b0:	480c      	ldr	r0, [pc, #48]	; (80151e4 <main+0xc4>)
 80151b2:	f7f1 fec5 	bl	8006f40 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 80151b6:	2200      	movs	r2, #0
 80151b8:	2102      	movs	r1, #2
 80151ba:	480a      	ldr	r0, [pc, #40]	; (80151e4 <main+0xc4>)
 80151bc:	f7f1 fec0 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 80151c0:	2201      	movs	r2, #1
 80151c2:	2108      	movs	r1, #8
 80151c4:	4807      	ldr	r0, [pc, #28]	; (80151e4 <main+0xc4>)
 80151c6:	f7f1 febb 	bl	8006f40 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 80151ca:	2200      	movs	r2, #0
 80151cc:	2110      	movs	r1, #16
 80151ce:	4807      	ldr	r0, [pc, #28]	; (80151ec <main+0xcc>)
 80151d0:	f7f1 feb6 	bl	8006f40 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 80151d4:	f7ff fd3e 	bl	8014c54 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 80151d8:	f7ff fea2 	bl	8014f20 <loop>
 80151dc:	e7fc      	b.n	80151d8 <main+0xb8>
 80151de:	bf00      	nop
 80151e0:	2000866c 	.word	0x2000866c
 80151e4:	40020800 	.word	0x40020800
 80151e8:	40020400 	.word	0x40020400
 80151ec:	40020000 	.word	0x40020000

080151f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b098      	sub	sp, #96	; 0x60
 80151f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80151f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80151fa:	2230      	movs	r2, #48	; 0x30
 80151fc:	2100      	movs	r1, #0
 80151fe:	4618      	mov	r0, r3
 8015200:	f001 ff17 	bl	8017032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015204:	f107 031c 	add.w	r3, r7, #28
 8015208:	2200      	movs	r2, #0
 801520a:	601a      	str	r2, [r3, #0]
 801520c:	605a      	str	r2, [r3, #4]
 801520e:	609a      	str	r2, [r3, #8]
 8015210:	60da      	str	r2, [r3, #12]
 8015212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015214:	f107 030c 	add.w	r3, r7, #12
 8015218:	2200      	movs	r2, #0
 801521a:	601a      	str	r2, [r3, #0]
 801521c:	605a      	str	r2, [r3, #4]
 801521e:	609a      	str	r2, [r3, #8]
 8015220:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015222:	2300      	movs	r3, #0
 8015224:	60bb      	str	r3, [r7, #8]
 8015226:	4b31      	ldr	r3, [pc, #196]	; (80152ec <SystemClock_Config+0xfc>)
 8015228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801522a:	4a30      	ldr	r2, [pc, #192]	; (80152ec <SystemClock_Config+0xfc>)
 801522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015230:	6413      	str	r3, [r2, #64]	; 0x40
 8015232:	4b2e      	ldr	r3, [pc, #184]	; (80152ec <SystemClock_Config+0xfc>)
 8015234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801523a:	60bb      	str	r3, [r7, #8]
 801523c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801523e:	2300      	movs	r3, #0
 8015240:	607b      	str	r3, [r7, #4]
 8015242:	4b2b      	ldr	r3, [pc, #172]	; (80152f0 <SystemClock_Config+0x100>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	4a2a      	ldr	r2, [pc, #168]	; (80152f0 <SystemClock_Config+0x100>)
 8015248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801524c:	6013      	str	r3, [r2, #0]
 801524e:	4b28      	ldr	r3, [pc, #160]	; (80152f0 <SystemClock_Config+0x100>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015256:	607b      	str	r3, [r7, #4]
 8015258:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801525a:	2305      	movs	r3, #5
 801525c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801525e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8015264:	2301      	movs	r3, #1
 8015266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015268:	2302      	movs	r3, #2
 801526a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801526c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015270:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8015272:	2306      	movs	r3, #6
 8015274:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8015276:	23a8      	movs	r3, #168	; 0xa8
 8015278:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801527a:	2302      	movs	r3, #2
 801527c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801527e:	2307      	movs	r3, #7
 8015280:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015286:	4618      	mov	r0, r3
 8015288:	f7f3 ff98 	bl	80091bc <HAL_RCC_OscConfig>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d001      	beq.n	8015296 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8015292:	f000 fb97 	bl	80159c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015296:	230f      	movs	r3, #15
 8015298:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801529a:	2302      	movs	r3, #2
 801529c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801529e:	2300      	movs	r3, #0
 80152a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80152a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80152a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80152a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80152ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80152ae:	f107 031c 	add.w	r3, r7, #28
 80152b2:	2105      	movs	r1, #5
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f4 f9c3 	bl	8009640 <HAL_RCC_ClockConfig>
 80152ba:	4603      	mov	r3, r0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d001      	beq.n	80152c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80152c0:	f000 fb80 	bl	80159c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80152c4:	2302      	movs	r3, #2
 80152c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80152c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80152cc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80152ce:	f107 030c 	add.w	r3, r7, #12
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7f4 fb7c 	bl	80099d0 <HAL_RCCEx_PeriphCLKConfig>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d001      	beq.n	80152e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80152de:	f000 fb71 	bl	80159c4 <Error_Handler>
  }
}
 80152e2:	bf00      	nop
 80152e4:	3760      	adds	r7, #96	; 0x60
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	bf00      	nop
 80152ec:	40023800 	.word	0x40023800
 80152f0:	40007000 	.word	0x40007000

080152f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80152f8:	4b12      	ldr	r3, [pc, #72]	; (8015344 <MX_I2C1_Init+0x50>)
 80152fa:	4a13      	ldr	r2, [pc, #76]	; (8015348 <MX_I2C1_Init+0x54>)
 80152fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80152fe:	4b11      	ldr	r3, [pc, #68]	; (8015344 <MX_I2C1_Init+0x50>)
 8015300:	4a12      	ldr	r2, [pc, #72]	; (801534c <MX_I2C1_Init+0x58>)
 8015302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8015304:	4b0f      	ldr	r3, [pc, #60]	; (8015344 <MX_I2C1_Init+0x50>)
 8015306:	2200      	movs	r2, #0
 8015308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801530a:	4b0e      	ldr	r3, [pc, #56]	; (8015344 <MX_I2C1_Init+0x50>)
 801530c:	2200      	movs	r2, #0
 801530e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015310:	4b0c      	ldr	r3, [pc, #48]	; (8015344 <MX_I2C1_Init+0x50>)
 8015312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015318:	4b0a      	ldr	r3, [pc, #40]	; (8015344 <MX_I2C1_Init+0x50>)
 801531a:	2200      	movs	r2, #0
 801531c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <MX_I2C1_Init+0x50>)
 8015320:	2200      	movs	r2, #0
 8015322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015324:	4b07      	ldr	r3, [pc, #28]	; (8015344 <MX_I2C1_Init+0x50>)
 8015326:	2200      	movs	r2, #0
 8015328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801532a:	4b06      	ldr	r3, [pc, #24]	; (8015344 <MX_I2C1_Init+0x50>)
 801532c:	2200      	movs	r2, #0
 801532e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015330:	4804      	ldr	r0, [pc, #16]	; (8015344 <MX_I2C1_Init+0x50>)
 8015332:	f7f1 fe39 	bl	8006fa8 <HAL_I2C_Init>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801533c:	f000 fb42 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015340:	bf00      	nop
 8015342:	bd80      	pop	{r7, pc}
 8015344:	2000843c 	.word	0x2000843c
 8015348:	40005400 	.word	0x40005400
 801534c:	00061a80 	.word	0x00061a80

08015350 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015354:	4b0f      	ldr	r3, [pc, #60]	; (8015394 <MX_RTC_Init+0x44>)
 8015356:	4a10      	ldr	r2, [pc, #64]	; (8015398 <MX_RTC_Init+0x48>)
 8015358:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801535a:	4b0e      	ldr	r3, [pc, #56]	; (8015394 <MX_RTC_Init+0x44>)
 801535c:	2200      	movs	r2, #0
 801535e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015360:	4b0c      	ldr	r3, [pc, #48]	; (8015394 <MX_RTC_Init+0x44>)
 8015362:	227f      	movs	r2, #127	; 0x7f
 8015364:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8015366:	4b0b      	ldr	r3, [pc, #44]	; (8015394 <MX_RTC_Init+0x44>)
 8015368:	22ff      	movs	r2, #255	; 0xff
 801536a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801536c:	4b09      	ldr	r3, [pc, #36]	; (8015394 <MX_RTC_Init+0x44>)
 801536e:	2200      	movs	r2, #0
 8015370:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015372:	4b08      	ldr	r3, [pc, #32]	; (8015394 <MX_RTC_Init+0x44>)
 8015374:	2200      	movs	r2, #0
 8015376:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015378:	4b06      	ldr	r3, [pc, #24]	; (8015394 <MX_RTC_Init+0x44>)
 801537a:	2200      	movs	r2, #0
 801537c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801537e:	4805      	ldr	r0, [pc, #20]	; (8015394 <MX_RTC_Init+0x44>)
 8015380:	f7f4 fc08 	bl	8009b94 <HAL_RTC_Init>
 8015384:	4603      	mov	r3, r0
 8015386:	2b00      	cmp	r3, #0
 8015388:	d001      	beq.n	801538e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 801538a:	f000 fb1b 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801538e:	bf00      	nop
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20008510 	.word	0x20008510
 8015398:	40002800 	.word	0x40002800

0801539c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 801539c:	b480      	push	{r7}
 801539e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80153a0:	4b0c      	ldr	r3, [pc, #48]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153a2:	4a0d      	ldr	r2, [pc, #52]	; (80153d8 <MX_SDIO_SD_Init+0x3c>)
 80153a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80153a6:	4b0b      	ldr	r3, [pc, #44]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153a8:	2200      	movs	r2, #0
 80153aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80153ac:	4b09      	ldr	r3, [pc, #36]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80153b2:	4b08      	ldr	r3, [pc, #32]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153b4:	2200      	movs	r2, #0
 80153b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80153b8:	4b06      	ldr	r3, [pc, #24]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153ba:	2200      	movs	r2, #0
 80153bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80153be:	4b05      	ldr	r3, [pc, #20]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153c0:	2200      	movs	r2, #0
 80153c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80153c4:	4b03      	ldr	r3, [pc, #12]	; (80153d4 <MX_SDIO_SD_Init+0x38>)
 80153c6:	2200      	movs	r2, #0
 80153c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80153ca:	bf00      	nop
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	20008590 	.word	0x20008590
 80153d8:	40012c00 	.word	0x40012c00

080153dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80153e0:	4b17      	ldr	r3, [pc, #92]	; (8015440 <MX_SPI1_Init+0x64>)
 80153e2:	4a18      	ldr	r2, [pc, #96]	; (8015444 <MX_SPI1_Init+0x68>)
 80153e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80153e6:	4b16      	ldr	r3, [pc, #88]	; (8015440 <MX_SPI1_Init+0x64>)
 80153e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80153ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80153ee:	4b14      	ldr	r3, [pc, #80]	; (8015440 <MX_SPI1_Init+0x64>)
 80153f0:	2200      	movs	r2, #0
 80153f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80153f4:	4b12      	ldr	r3, [pc, #72]	; (8015440 <MX_SPI1_Init+0x64>)
 80153f6:	2200      	movs	r2, #0
 80153f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80153fa:	4b11      	ldr	r3, [pc, #68]	; (8015440 <MX_SPI1_Init+0x64>)
 80153fc:	2200      	movs	r2, #0
 80153fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8015400:	4b0f      	ldr	r3, [pc, #60]	; (8015440 <MX_SPI1_Init+0x64>)
 8015402:	2200      	movs	r2, #0
 8015404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8015406:	4b0e      	ldr	r3, [pc, #56]	; (8015440 <MX_SPI1_Init+0x64>)
 8015408:	f44f 7200 	mov.w	r2, #512	; 0x200
 801540c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801540e:	4b0c      	ldr	r3, [pc, #48]	; (8015440 <MX_SPI1_Init+0x64>)
 8015410:	2218      	movs	r2, #24
 8015412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015414:	4b0a      	ldr	r3, [pc, #40]	; (8015440 <MX_SPI1_Init+0x64>)
 8015416:	2200      	movs	r2, #0
 8015418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801541a:	4b09      	ldr	r3, [pc, #36]	; (8015440 <MX_SPI1_Init+0x64>)
 801541c:	2200      	movs	r2, #0
 801541e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015420:	4b07      	ldr	r3, [pc, #28]	; (8015440 <MX_SPI1_Init+0x64>)
 8015422:	2200      	movs	r2, #0
 8015424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8015426:	4b06      	ldr	r3, [pc, #24]	; (8015440 <MX_SPI1_Init+0x64>)
 8015428:	220a      	movs	r2, #10
 801542a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801542c:	4804      	ldr	r0, [pc, #16]	; (8015440 <MX_SPI1_Init+0x64>)
 801542e:	f7f6 f840 	bl	800b4b2 <HAL_SPI_Init>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d001      	beq.n	801543c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8015438:	f000 fac4 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801543c:	bf00      	nop
 801543e:	bd80      	pop	{r7, pc}
 8015440:	20008614 	.word	0x20008614
 8015444:	40013000 	.word	0x40013000

08015448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b086      	sub	sp, #24
 801544c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801544e:	f107 0308 	add.w	r3, r7, #8
 8015452:	2200      	movs	r2, #0
 8015454:	601a      	str	r2, [r3, #0]
 8015456:	605a      	str	r2, [r3, #4]
 8015458:	609a      	str	r2, [r3, #8]
 801545a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801545c:	463b      	mov	r3, r7
 801545e:	2200      	movs	r2, #0
 8015460:	601a      	str	r2, [r3, #0]
 8015462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8015464:	4b1d      	ldr	r3, [pc, #116]	; (80154dc <MX_TIM2_Init+0x94>)
 8015466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801546a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 801546c:	4b1b      	ldr	r3, [pc, #108]	; (80154dc <MX_TIM2_Init+0x94>)
 801546e:	2253      	movs	r2, #83	; 0x53
 8015470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015472:	4b1a      	ldr	r3, [pc, #104]	; (80154dc <MX_TIM2_Init+0x94>)
 8015474:	2200      	movs	r2, #0
 8015476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8015478:	4b18      	ldr	r3, [pc, #96]	; (80154dc <MX_TIM2_Init+0x94>)
 801547a:	4a19      	ldr	r2, [pc, #100]	; (80154e0 <MX_TIM2_Init+0x98>)
 801547c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801547e:	4b17      	ldr	r3, [pc, #92]	; (80154dc <MX_TIM2_Init+0x94>)
 8015480:	2200      	movs	r2, #0
 8015482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015484:	4b15      	ldr	r3, [pc, #84]	; (80154dc <MX_TIM2_Init+0x94>)
 8015486:	2200      	movs	r2, #0
 8015488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801548a:	4814      	ldr	r0, [pc, #80]	; (80154dc <MX_TIM2_Init+0x94>)
 801548c:	f7f6 fc06 	bl	800bc9c <HAL_TIM_Base_Init>
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8015496:	f000 fa95 	bl	80159c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801549a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801549e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80154a0:	f107 0308 	add.w	r3, r7, #8
 80154a4:	4619      	mov	r1, r3
 80154a6:	480d      	ldr	r0, [pc, #52]	; (80154dc <MX_TIM2_Init+0x94>)
 80154a8:	f7f6 fdd8 	bl	800c05c <HAL_TIM_ConfigClockSource>
 80154ac:	4603      	mov	r3, r0
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d001      	beq.n	80154b6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80154b2:	f000 fa87 	bl	80159c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80154b6:	2300      	movs	r3, #0
 80154b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80154ba:	2300      	movs	r3, #0
 80154bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80154be:	463b      	mov	r3, r7
 80154c0:	4619      	mov	r1, r3
 80154c2:	4806      	ldr	r0, [pc, #24]	; (80154dc <MX_TIM2_Init+0x94>)
 80154c4:	f7f7 f991 	bl	800c7ea <HAL_TIMEx_MasterConfigSynchronization>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d001      	beq.n	80154d2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80154ce:	f000 fa79 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80154d2:	bf00      	nop
 80154d4:	3718      	adds	r7, #24
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	2000866c 	.word	0x2000866c
 80154e0:	fa56ea00 	.word	0xfa56ea00

080154e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08e      	sub	sp, #56	; 0x38
 80154e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80154ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80154ee:	2200      	movs	r2, #0
 80154f0:	601a      	str	r2, [r3, #0]
 80154f2:	605a      	str	r2, [r3, #4]
 80154f4:	609a      	str	r2, [r3, #8]
 80154f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80154f8:	f107 0320 	add.w	r3, r7, #32
 80154fc:	2200      	movs	r2, #0
 80154fe:	601a      	str	r2, [r3, #0]
 8015500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015502:	1d3b      	adds	r3, r7, #4
 8015504:	2200      	movs	r2, #0
 8015506:	601a      	str	r2, [r3, #0]
 8015508:	605a      	str	r2, [r3, #4]
 801550a:	609a      	str	r2, [r3, #8]
 801550c:	60da      	str	r2, [r3, #12]
 801550e:	611a      	str	r2, [r3, #16]
 8015510:	615a      	str	r2, [r3, #20]
 8015512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8015514:	4b32      	ldr	r3, [pc, #200]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015516:	4a33      	ldr	r2, [pc, #204]	; (80155e4 <MX_TIM3_Init+0x100>)
 8015518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 801551a:	4b31      	ldr	r3, [pc, #196]	; (80155e0 <MX_TIM3_Init+0xfc>)
 801551c:	22a7      	movs	r2, #167	; 0xa7
 801551e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015520:	4b2f      	ldr	r3, [pc, #188]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015522:	2200      	movs	r2, #0
 8015524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8015526:	4b2e      	ldr	r3, [pc, #184]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015528:	f242 7210 	movw	r2, #10000	; 0x2710
 801552c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801552e:	4b2c      	ldr	r3, [pc, #176]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015530:	2200      	movs	r2, #0
 8015532:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015534:	4b2a      	ldr	r3, [pc, #168]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015536:	2200      	movs	r2, #0
 8015538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801553a:	4829      	ldr	r0, [pc, #164]	; (80155e0 <MX_TIM3_Init+0xfc>)
 801553c:	f7f6 fbae 	bl	800bc9c <HAL_TIM_Base_Init>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d001      	beq.n	801554a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8015546:	f000 fa3d 	bl	80159c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801554a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801554e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8015550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015554:	4619      	mov	r1, r3
 8015556:	4822      	ldr	r0, [pc, #136]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015558:	f7f6 fd80 	bl	800c05c <HAL_TIM_ConfigClockSource>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8015562:	f000 fa2f 	bl	80159c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8015566:	481e      	ldr	r0, [pc, #120]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015568:	f7f6 fbe7 	bl	800bd3a <HAL_TIM_PWM_Init>
 801556c:	4603      	mov	r3, r0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8015572:	f000 fa27 	bl	80159c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015576:	2300      	movs	r3, #0
 8015578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801557a:	2300      	movs	r3, #0
 801557c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801557e:	f107 0320 	add.w	r3, r7, #32
 8015582:	4619      	mov	r1, r3
 8015584:	4816      	ldr	r0, [pc, #88]	; (80155e0 <MX_TIM3_Init+0xfc>)
 8015586:	f7f7 f930 	bl	800c7ea <HAL_TIMEx_MasterConfigSynchronization>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d001      	beq.n	8015594 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8015590:	f000 fa18 	bl	80159c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015594:	2360      	movs	r3, #96	; 0x60
 8015596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8015598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801559c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801559e:	2300      	movs	r3, #0
 80155a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80155a2:	2300      	movs	r3, #0
 80155a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80155a6:	1d3b      	adds	r3, r7, #4
 80155a8:	2208      	movs	r2, #8
 80155aa:	4619      	mov	r1, r3
 80155ac:	480c      	ldr	r0, [pc, #48]	; (80155e0 <MX_TIM3_Init+0xfc>)
 80155ae:	f7f6 fc8f 	bl	800bed0 <HAL_TIM_PWM_ConfigChannel>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d001      	beq.n	80155bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80155b8:	f000 fa04 	bl	80159c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80155bc:	1d3b      	adds	r3, r7, #4
 80155be:	220c      	movs	r2, #12
 80155c0:	4619      	mov	r1, r3
 80155c2:	4807      	ldr	r0, [pc, #28]	; (80155e0 <MX_TIM3_Init+0xfc>)
 80155c4:	f7f6 fc84 	bl	800bed0 <HAL_TIM_PWM_ConfigChannel>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d001      	beq.n	80155d2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80155ce:	f000 f9f9 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80155d2:	4803      	ldr	r0, [pc, #12]	; (80155e0 <MX_TIM3_Init+0xfc>)
 80155d4:	f000 fe3c 	bl	8016250 <HAL_TIM_MspPostInit>

}
 80155d8:	bf00      	nop
 80155da:	3738      	adds	r7, #56	; 0x38
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	200084d0 	.word	0x200084d0
 80155e4:	40000400 	.word	0x40000400

080155e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b08e      	sub	sp, #56	; 0x38
 80155ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80155ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80155f2:	2200      	movs	r2, #0
 80155f4:	601a      	str	r2, [r3, #0]
 80155f6:	605a      	str	r2, [r3, #4]
 80155f8:	609a      	str	r2, [r3, #8]
 80155fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80155fc:	f107 0320 	add.w	r3, r7, #32
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
 8015604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015606:	1d3b      	adds	r3, r7, #4
 8015608:	2200      	movs	r2, #0
 801560a:	601a      	str	r2, [r3, #0]
 801560c:	605a      	str	r2, [r3, #4]
 801560e:	609a      	str	r2, [r3, #8]
 8015610:	60da      	str	r2, [r3, #12]
 8015612:	611a      	str	r2, [r3, #16]
 8015614:	615a      	str	r2, [r3, #20]
 8015616:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8015618:	4b32      	ldr	r3, [pc, #200]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801561a:	4a33      	ldr	r2, [pc, #204]	; (80156e8 <MX_TIM5_Init+0x100>)
 801561c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801561e:	4b31      	ldr	r3, [pc, #196]	; (80156e4 <MX_TIM5_Init+0xfc>)
 8015620:	2200      	movs	r2, #0
 8015622:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8015624:	4b2f      	ldr	r3, [pc, #188]	; (80156e4 <MX_TIM5_Init+0xfc>)
 8015626:	2240      	movs	r2, #64	; 0x40
 8015628:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801562a:	4b2e      	ldr	r3, [pc, #184]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801562c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015630:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015632:	4b2c      	ldr	r3, [pc, #176]	; (80156e4 <MX_TIM5_Init+0xfc>)
 8015634:	2200      	movs	r2, #0
 8015636:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015638:	4b2a      	ldr	r3, [pc, #168]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801563a:	2200      	movs	r2, #0
 801563c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801563e:	4829      	ldr	r0, [pc, #164]	; (80156e4 <MX_TIM5_Init+0xfc>)
 8015640:	f7f6 fb2c 	bl	800bc9c <HAL_TIM_Base_Init>
 8015644:	4603      	mov	r3, r0
 8015646:	2b00      	cmp	r3, #0
 8015648:	d001      	beq.n	801564e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801564a:	f000 f9bb 	bl	80159c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801564e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015652:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8015654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015658:	4619      	mov	r1, r3
 801565a:	4822      	ldr	r0, [pc, #136]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801565c:	f7f6 fcfe 	bl	800c05c <HAL_TIM_ConfigClockSource>
 8015660:	4603      	mov	r3, r0
 8015662:	2b00      	cmp	r3, #0
 8015664:	d001      	beq.n	801566a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8015666:	f000 f9ad 	bl	80159c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801566a:	481e      	ldr	r0, [pc, #120]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801566c:	f7f6 fb65 	bl	800bd3a <HAL_TIM_PWM_Init>
 8015670:	4603      	mov	r3, r0
 8015672:	2b00      	cmp	r3, #0
 8015674:	d001      	beq.n	801567a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8015676:	f000 f9a5 	bl	80159c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801567a:	2300      	movs	r3, #0
 801567c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801567e:	2300      	movs	r3, #0
 8015680:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8015682:	f107 0320 	add.w	r3, r7, #32
 8015686:	4619      	mov	r1, r3
 8015688:	4816      	ldr	r0, [pc, #88]	; (80156e4 <MX_TIM5_Init+0xfc>)
 801568a:	f7f7 f8ae 	bl	800c7ea <HAL_TIMEx_MasterConfigSynchronization>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d001      	beq.n	8015698 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8015694:	f000 f996 	bl	80159c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8015698:	2370      	movs	r3, #112	; 0x70
 801569a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 801569c:	2364      	movs	r3, #100	; 0x64
 801569e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80156a4:	2300      	movs	r3, #0
 80156a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80156a8:	1d3b      	adds	r3, r7, #4
 80156aa:	2204      	movs	r2, #4
 80156ac:	4619      	mov	r1, r3
 80156ae:	480d      	ldr	r0, [pc, #52]	; (80156e4 <MX_TIM5_Init+0xfc>)
 80156b0:	f7f6 fc0e 	bl	800bed0 <HAL_TIM_PWM_ConfigChannel>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d001      	beq.n	80156be <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80156ba:	f000 f983 	bl	80159c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80156be:	1d3b      	adds	r3, r7, #4
 80156c0:	220c      	movs	r2, #12
 80156c2:	4619      	mov	r1, r3
 80156c4:	4807      	ldr	r0, [pc, #28]	; (80156e4 <MX_TIM5_Init+0xfc>)
 80156c6:	f7f6 fc03 	bl	800bed0 <HAL_TIM_PWM_ConfigChannel>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80156d0:	f000 f978 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80156d4:	4803      	ldr	r0, [pc, #12]	; (80156e4 <MX_TIM5_Init+0xfc>)
 80156d6:	f000 fdbb 	bl	8016250 <HAL_TIM_MspPostInit>

}
 80156da:	bf00      	nop
 80156dc:	3738      	adds	r7, #56	; 0x38
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	20008490 	.word	0x20008490
 80156e8:	40000c00 	.word	0x40000c00

080156ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80156f0:	4b11      	ldr	r3, [pc, #68]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 80156f2:	4a12      	ldr	r2, [pc, #72]	; (801573c <MX_USART3_UART_Init+0x50>)
 80156f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80156f6:	4b10      	ldr	r3, [pc, #64]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 80156f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80156fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80156fe:	4b0e      	ldr	r3, [pc, #56]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 8015700:	2200      	movs	r2, #0
 8015702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8015704:	4b0c      	ldr	r3, [pc, #48]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 8015706:	2200      	movs	r2, #0
 8015708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801570a:	4b0b      	ldr	r3, [pc, #44]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 801570c:	2200      	movs	r2, #0
 801570e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8015710:	4b09      	ldr	r3, [pc, #36]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 8015712:	220c      	movs	r2, #12
 8015714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015716:	4b08      	ldr	r3, [pc, #32]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 8015718:	2200      	movs	r2, #0
 801571a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801571c:	4b06      	ldr	r3, [pc, #24]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 801571e:	2200      	movs	r2, #0
 8015720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8015722:	4805      	ldr	r0, [pc, #20]	; (8015738 <MX_USART3_UART_Init+0x4c>)
 8015724:	f7f7 f8a6 	bl	800c874 <HAL_UART_Init>
 8015728:	4603      	mov	r3, r0
 801572a:	2b00      	cmp	r3, #0
 801572c:	d001      	beq.n	8015732 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801572e:	f000 f949 	bl	80159c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8015732:	bf00      	nop
 8015734:	bd80      	pop	{r7, pc}
 8015736:	bf00      	nop
 8015738:	200083fc 	.word	0x200083fc
 801573c:	40004800 	.word	0x40004800

08015740 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8015746:	2300      	movs	r3, #0
 8015748:	607b      	str	r3, [r7, #4]
 801574a:	4b10      	ldr	r3, [pc, #64]	; (801578c <MX_DMA_Init+0x4c>)
 801574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801574e:	4a0f      	ldr	r2, [pc, #60]	; (801578c <MX_DMA_Init+0x4c>)
 8015750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015754:	6313      	str	r3, [r2, #48]	; 0x30
 8015756:	4b0d      	ldr	r3, [pc, #52]	; (801578c <MX_DMA_Init+0x4c>)
 8015758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801575e:	607b      	str	r3, [r7, #4]
 8015760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8015762:	2200      	movs	r2, #0
 8015764:	2100      	movs	r1, #0
 8015766:	203b      	movs	r0, #59	; 0x3b
 8015768:	f7f0 fe69 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801576c:	203b      	movs	r0, #59	; 0x3b
 801576e:	f7f0 fe82 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8015772:	2200      	movs	r2, #0
 8015774:	2100      	movs	r1, #0
 8015776:	2045      	movs	r0, #69	; 0x45
 8015778:	f7f0 fe61 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 801577c:	2045      	movs	r0, #69	; 0x45
 801577e:	f7f0 fe7a 	bl	8006476 <HAL_NVIC_EnableIRQ>

}
 8015782:	bf00      	nop
 8015784:	3708      	adds	r7, #8
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	40023800 	.word	0x40023800

08015790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b08a      	sub	sp, #40	; 0x28
 8015794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015796:	f107 0314 	add.w	r3, r7, #20
 801579a:	2200      	movs	r2, #0
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	605a      	str	r2, [r3, #4]
 80157a0:	609a      	str	r2, [r3, #8]
 80157a2:	60da      	str	r2, [r3, #12]
 80157a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80157a6:	2300      	movs	r3, #0
 80157a8:	613b      	str	r3, [r7, #16]
 80157aa:	4b63      	ldr	r3, [pc, #396]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ae:	4a62      	ldr	r2, [pc, #392]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157b0:	f043 0304 	orr.w	r3, r3, #4
 80157b4:	6313      	str	r3, [r2, #48]	; 0x30
 80157b6:	4b60      	ldr	r3, [pc, #384]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ba:	f003 0304 	and.w	r3, r3, #4
 80157be:	613b      	str	r3, [r7, #16]
 80157c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80157c2:	2300      	movs	r3, #0
 80157c4:	60fb      	str	r3, [r7, #12]
 80157c6:	4b5c      	ldr	r3, [pc, #368]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ca:	4a5b      	ldr	r2, [pc, #364]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157d0:	6313      	str	r3, [r2, #48]	; 0x30
 80157d2:	4b59      	ldr	r3, [pc, #356]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157da:	60fb      	str	r3, [r7, #12]
 80157dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80157de:	2300      	movs	r3, #0
 80157e0:	60bb      	str	r3, [r7, #8]
 80157e2:	4b55      	ldr	r3, [pc, #340]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157e6:	4a54      	ldr	r2, [pc, #336]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157e8:	f043 0301 	orr.w	r3, r3, #1
 80157ec:	6313      	str	r3, [r2, #48]	; 0x30
 80157ee:	4b52      	ldr	r3, [pc, #328]	; (8015938 <MX_GPIO_Init+0x1a8>)
 80157f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157f2:	f003 0301 	and.w	r3, r3, #1
 80157f6:	60bb      	str	r3, [r7, #8]
 80157f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80157fa:	2300      	movs	r3, #0
 80157fc:	607b      	str	r3, [r7, #4]
 80157fe:	4b4e      	ldr	r3, [pc, #312]	; (8015938 <MX_GPIO_Init+0x1a8>)
 8015800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015802:	4a4d      	ldr	r2, [pc, #308]	; (8015938 <MX_GPIO_Init+0x1a8>)
 8015804:	f043 0302 	orr.w	r3, r3, #2
 8015808:	6313      	str	r3, [r2, #48]	; 0x30
 801580a:	4b4b      	ldr	r3, [pc, #300]	; (8015938 <MX_GPIO_Init+0x1a8>)
 801580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801580e:	f003 0302 	and.w	r3, r3, #2
 8015812:	607b      	str	r3, [r7, #4]
 8015814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8015816:	2300      	movs	r3, #0
 8015818:	603b      	str	r3, [r7, #0]
 801581a:	4b47      	ldr	r3, [pc, #284]	; (8015938 <MX_GPIO_Init+0x1a8>)
 801581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801581e:	4a46      	ldr	r2, [pc, #280]	; (8015938 <MX_GPIO_Init+0x1a8>)
 8015820:	f043 0308 	orr.w	r3, r3, #8
 8015824:	6313      	str	r3, [r2, #48]	; 0x30
 8015826:	4b44      	ldr	r3, [pc, #272]	; (8015938 <MX_GPIO_Init+0x1a8>)
 8015828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801582a:	f003 0308 	and.w	r3, r3, #8
 801582e:	603b      	str	r3, [r7, #0]
 8015830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015832:	2200      	movs	r2, #0
 8015834:	21ef      	movs	r1, #239	; 0xef
 8015836:	4841      	ldr	r0, [pc, #260]	; (801593c <MX_GPIO_Init+0x1ac>)
 8015838:	f7f1 fb82 	bl	8006f40 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 801583c:	2200      	movs	r2, #0
 801583e:	2115      	movs	r1, #21
 8015840:	483f      	ldr	r0, [pc, #252]	; (8015940 <MX_GPIO_Init+0x1b0>)
 8015842:	f7f1 fb7d 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8015846:	2200      	movs	r2, #0
 8015848:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 801584c:	483d      	ldr	r0, [pc, #244]	; (8015944 <MX_GPIO_Init+0x1b4>)
 801584e:	f7f1 fb77 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015852:	23cf      	movs	r3, #207	; 0xcf
 8015854:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015856:	2301      	movs	r3, #1
 8015858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801585a:	2300      	movs	r3, #0
 801585c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801585e:	2300      	movs	r3, #0
 8015860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015862:	f107 0314 	add.w	r3, r7, #20
 8015866:	4619      	mov	r1, r3
 8015868:	4834      	ldr	r0, [pc, #208]	; (801593c <MX_GPIO_Init+0x1ac>)
 801586a:	f7f1 f9b7 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 801586e:	2305      	movs	r3, #5
 8015870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015872:	2301      	movs	r3, #1
 8015874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015876:	2302      	movs	r3, #2
 8015878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801587a:	2300      	movs	r3, #0
 801587c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801587e:	f107 0314 	add.w	r3, r7, #20
 8015882:	4619      	mov	r1, r3
 8015884:	482e      	ldr	r0, [pc, #184]	; (8015940 <MX_GPIO_Init+0x1b0>)
 8015886:	f7f1 f9a9 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 801588a:	2310      	movs	r3, #16
 801588c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801588e:	2301      	movs	r3, #1
 8015890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015892:	2300      	movs	r3, #0
 8015894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015896:	2300      	movs	r3, #0
 8015898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 801589a:	f107 0314 	add.w	r3, r7, #20
 801589e:	4619      	mov	r1, r3
 80158a0:	4827      	ldr	r0, [pc, #156]	; (8015940 <MX_GPIO_Init+0x1b0>)
 80158a2:	f7f1 f99b 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 80158a6:	23c0      	movs	r3, #192	; 0xc0
 80158a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80158aa:	4b27      	ldr	r3, [pc, #156]	; (8015948 <MX_GPIO_Init+0x1b8>)
 80158ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80158b2:	f107 0314 	add.w	r3, r7, #20
 80158b6:	4619      	mov	r1, r3
 80158b8:	4821      	ldr	r0, [pc, #132]	; (8015940 <MX_GPIO_Init+0x1b0>)
 80158ba:	f7f1 f98f 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 80158be:	2320      	movs	r3, #32
 80158c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80158c2:	2301      	movs	r3, #1
 80158c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80158c6:	2302      	movs	r3, #2
 80158c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158ca:	2300      	movs	r3, #0
 80158cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 80158ce:	f107 0314 	add.w	r3, r7, #20
 80158d2:	4619      	mov	r1, r3
 80158d4:	4819      	ldr	r0, [pc, #100]	; (801593c <MX_GPIO_Init+0x1ac>)
 80158d6:	f7f1 f981 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 80158da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80158de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80158e0:	2301      	movs	r3, #1
 80158e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158e4:	2300      	movs	r3, #0
 80158e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158e8:	2300      	movs	r3, #0
 80158ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80158ec:	f107 0314 	add.w	r3, r7, #20
 80158f0:	4619      	mov	r1, r3
 80158f2:	4814      	ldr	r0, [pc, #80]	; (8015944 <MX_GPIO_Init+0x1b4>)
 80158f4:	f7f1 f972 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 80158f8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80158fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80158fe:	2300      	movs	r3, #0
 8015900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015902:	2301      	movs	r3, #1
 8015904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015906:	f107 0314 	add.w	r3, r7, #20
 801590a:	4619      	mov	r1, r3
 801590c:	480c      	ldr	r0, [pc, #48]	; (8015940 <MX_GPIO_Init+0x1b0>)
 801590e:	f7f1 f965 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8015912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015918:	2301      	movs	r3, #1
 801591a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801591c:	2302      	movs	r3, #2
 801591e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015920:	2300      	movs	r3, #0
 8015922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8015924:	f107 0314 	add.w	r3, r7, #20
 8015928:	4619      	mov	r1, r3
 801592a:	4806      	ldr	r0, [pc, #24]	; (8015944 <MX_GPIO_Init+0x1b4>)
 801592c:	f7f1 f956 	bl	8006bdc <HAL_GPIO_Init>

}
 8015930:	bf00      	nop
 8015932:	3728      	adds	r7, #40	; 0x28
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	40023800 	.word	0x40023800
 801593c:	40020800 	.word	0x40020800
 8015940:	40020000 	.word	0x40020000
 8015944:	40020400 	.word	0x40020400
 8015948:	10110000 	.word	0x10110000

0801594c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 801594c:	b480      	push	{r7}
 801594e:	af00      	add	r7, sp, #0
 8015950:	4b02      	ldr	r3, [pc, #8]	; (801595c <Get_I2C1_Instance+0x10>)
 8015952:	4618      	mov	r0, r3
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr
 801595c:	2000843c 	.word	0x2000843c

08015960 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8015960:	b480      	push	{r7}
 8015962:	af00      	add	r7, sp, #0
 8015964:	4b02      	ldr	r3, [pc, #8]	; (8015970 <Get_SPI1_Instance+0x10>)
 8015966:	4618      	mov	r0, r3
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr
 8015970:	20008614 	.word	0x20008614

08015974 <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8015974:	b480      	push	{r7}
 8015976:	af00      	add	r7, sp, #0
 8015978:	4b02      	ldr	r3, [pc, #8]	; (8015984 <Get_UART3_Instance+0x10>)
 801597a:	4618      	mov	r0, r3
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr
 8015984:	200083fc 	.word	0x200083fc

08015988 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8015988:	b480      	push	{r7}
 801598a:	af00      	add	r7, sp, #0
 801598c:	4b02      	ldr	r3, [pc, #8]	; (8015998 <Get_RTC_Instance+0x10>)
 801598e:	4618      	mov	r0, r3
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr
 8015998:	20008510 	.word	0x20008510

0801599c <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 801599c:	b480      	push	{r7}
 801599e:	af00      	add	r7, sp, #0
 80159a0:	4b02      	ldr	r3, [pc, #8]	; (80159ac <Get_TIM3_Instance+0x10>)
 80159a2:	4618      	mov	r0, r3
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr
 80159ac:	200084d0 	.word	0x200084d0

080159b0 <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 80159b0:	b480      	push	{r7}
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	4b02      	ldr	r3, [pc, #8]	; (80159c0 <Get_TIM5_Instance+0x10>)
 80159b6:	4618      	mov	r0, r3
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	20008490 	.word	0x20008490

080159c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80159c4:	b480      	push	{r7}
 80159c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80159c8:	bf00      	nop
 80159ca:	46bd      	mov	sp, r7
 80159cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d0:	4770      	bx	lr

080159d2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80159d2:	b580      	push	{r7, lr}
 80159d4:	b084      	sub	sp, #16
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80159da:	f7f0 fc27 	bl	800622c <HAL_GetTick>
 80159de:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80159e0:	e006      	b.n	80159f0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80159e2:	f7fd fcaf 	bl	8013344 <BSP_SD_GetCardState>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d101      	bne.n	80159f0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80159ec:	2300      	movs	r3, #0
 80159ee:	e009      	b.n	8015a04 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80159f0:	f7f0 fc1c 	bl	800622c <HAL_GetTick>
 80159f4:	4602      	mov	r2, r0
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	1ad3      	subs	r3, r2, r3
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d8f0      	bhi.n	80159e2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3710      	adds	r7, #16
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	4603      	mov	r3, r0
 8015a14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015a16:	4b0b      	ldr	r3, [pc, #44]	; (8015a44 <SD_CheckStatus+0x38>)
 8015a18:	2201      	movs	r2, #1
 8015a1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015a1c:	f7fd fc92 	bl	8013344 <BSP_SD_GetCardState>
 8015a20:	4603      	mov	r3, r0
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d107      	bne.n	8015a36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015a26:	4b07      	ldr	r3, [pc, #28]	; (8015a44 <SD_CheckStatus+0x38>)
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	f023 0301 	bic.w	r3, r3, #1
 8015a30:	b2da      	uxtb	r2, r3
 8015a32:	4b04      	ldr	r3, [pc, #16]	; (8015a44 <SD_CheckStatus+0x38>)
 8015a34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015a36:	4b03      	ldr	r3, [pc, #12]	; (8015a44 <SD_CheckStatus+0x38>)
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	b2db      	uxtb	r3, r3
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3708      	adds	r7, #8
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	20000130 	.word	0x20000130

08015a48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	4603      	mov	r3, r0
 8015a50:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015a52:	f7fd fc1d 	bl	8013290 <BSP_SD_Init>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d107      	bne.n	8015a6c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015a5c:	79fb      	ldrb	r3, [r7, #7]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7ff ffd4 	bl	8015a0c <SD_CheckStatus>
 8015a64:	4603      	mov	r3, r0
 8015a66:	461a      	mov	r2, r3
 8015a68:	4b04      	ldr	r3, [pc, #16]	; (8015a7c <SD_initialize+0x34>)
 8015a6a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8015a6c:	4b03      	ldr	r3, [pc, #12]	; (8015a7c <SD_initialize+0x34>)
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	b2db      	uxtb	r3, r3
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3708      	adds	r7, #8
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	20000130 	.word	0x20000130

08015a80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	4603      	mov	r3, r0
 8015a88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015a8a:	79fb      	ldrb	r3, [r7, #7]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7ff ffbd 	bl	8015a0c <SD_CheckStatus>
 8015a92:	4603      	mov	r3, r0
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b088      	sub	sp, #32
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60b9      	str	r1, [r7, #8]
 8015aa4:	607a      	str	r2, [r7, #4]
 8015aa6:	603b      	str	r3, [r7, #0]
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015aac:	2301      	movs	r3, #1
 8015aae:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015ab0:	f247 5030 	movw	r0, #30000	; 0x7530
 8015ab4:	f7ff ff8d 	bl	80159d2 <SD_CheckStatusWithTimeout>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	da01      	bge.n	8015ac2 <SD_read+0x26>
  {
    return res;
 8015abe:	7ffb      	ldrb	r3, [r7, #31]
 8015ac0:	e08b      	b.n	8015bda <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	f003 0303 	and.w	r3, r3, #3
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	f040 8085 	bne.w	8015bd8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015ace:	683a      	ldr	r2, [r7, #0]
 8015ad0:	6879      	ldr	r1, [r7, #4]
 8015ad2:	68b8      	ldr	r0, [r7, #8]
 8015ad4:	f7fd fc02 	bl	80132dc <BSP_SD_ReadBlocks_DMA>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d133      	bne.n	8015b46 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015ade:	4b41      	ldr	r3, [pc, #260]	; (8015be4 <SD_read+0x148>)
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015ae4:	f7f0 fba2 	bl	800622c <HAL_GetTick>
 8015ae8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015aea:	bf00      	nop
 8015aec:	4b3d      	ldr	r3, [pc, #244]	; (8015be4 <SD_read+0x148>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d108      	bne.n	8015b06 <SD_read+0x6a>
 8015af4:	f7f0 fb9a 	bl	800622c <HAL_GetTick>
 8015af8:	4602      	mov	r2, r0
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	1ad3      	subs	r3, r2, r3
 8015afe:	f247 522f 	movw	r2, #29999	; 0x752f
 8015b02:	4293      	cmp	r3, r2
 8015b04:	d9f2      	bls.n	8015aec <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8015b06:	4b37      	ldr	r3, [pc, #220]	; (8015be4 <SD_read+0x148>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d102      	bne.n	8015b14 <SD_read+0x78>
      {
        res = RES_ERROR;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	77fb      	strb	r3, [r7, #31]
 8015b12:	e061      	b.n	8015bd8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8015b14:	4b33      	ldr	r3, [pc, #204]	; (8015be4 <SD_read+0x148>)
 8015b16:	2200      	movs	r2, #0
 8015b18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015b1a:	f7f0 fb87 	bl	800622c <HAL_GetTick>
 8015b1e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015b20:	e007      	b.n	8015b32 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015b22:	f7fd fc0f 	bl	8013344 <BSP_SD_GetCardState>
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d102      	bne.n	8015b32 <SD_read+0x96>
          {
            res = RES_OK;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015b30:	e052      	b.n	8015bd8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015b32:	f7f0 fb7b 	bl	800622c <HAL_GetTick>
 8015b36:	4602      	mov	r2, r0
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	1ad3      	subs	r3, r2, r3
 8015b3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d9ee      	bls.n	8015b22 <SD_read+0x86>
 8015b44:	e048      	b.n	8015bd8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8015b46:	2300      	movs	r3, #0
 8015b48:	61bb      	str	r3, [r7, #24]
 8015b4a:	e034      	b.n	8015bb6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	1c5a      	adds	r2, r3, #1
 8015b50:	607a      	str	r2, [r7, #4]
 8015b52:	2201      	movs	r2, #1
 8015b54:	4619      	mov	r1, r3
 8015b56:	4824      	ldr	r0, [pc, #144]	; (8015be8 <SD_read+0x14c>)
 8015b58:	f7fd fbc0 	bl	80132dc <BSP_SD_ReadBlocks_DMA>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015b60:	7fbb      	ldrb	r3, [r7, #30]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d12c      	bne.n	8015bc0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8015b66:	4b1f      	ldr	r3, [pc, #124]	; (8015be4 <SD_read+0x148>)
 8015b68:	2200      	movs	r2, #0
 8015b6a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8015b6c:	f7f0 fb5e 	bl	800622c <HAL_GetTick>
 8015b70:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015b72:	bf00      	nop
 8015b74:	4b1b      	ldr	r3, [pc, #108]	; (8015be4 <SD_read+0x148>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d108      	bne.n	8015b8e <SD_read+0xf2>
 8015b7c:	f7f0 fb56 	bl	800622c <HAL_GetTick>
 8015b80:	4602      	mov	r2, r0
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	f247 522f 	movw	r2, #29999	; 0x752f
 8015b8a:	4293      	cmp	r3, r2
 8015b8c:	d9f2      	bls.n	8015b74 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8015b8e:	4b15      	ldr	r3, [pc, #84]	; (8015be4 <SD_read+0x148>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d016      	beq.n	8015bc4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	4a13      	ldr	r2, [pc, #76]	; (8015be8 <SD_read+0x14c>)
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ba2:	461a      	mov	r2, r3
 8015ba4:	f001 fa3a 	bl	801701c <memcpy>
          buff += BLOCKSIZE;
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015bae:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8015bb0:	69bb      	ldr	r3, [r7, #24]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	61bb      	str	r3, [r7, #24]
 8015bb6:	69bb      	ldr	r3, [r7, #24]
 8015bb8:	683a      	ldr	r2, [r7, #0]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d8c6      	bhi.n	8015b4c <SD_read+0xb0>
 8015bbe:	e002      	b.n	8015bc6 <SD_read+0x12a>
        }
        else
        {
          break;
 8015bc0:	bf00      	nop
 8015bc2:	e000      	b.n	8015bc6 <SD_read+0x12a>
            break;
 8015bc4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d104      	bne.n	8015bd8 <SD_read+0x13c>
 8015bce:	7fbb      	ldrb	r3, [r7, #30]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d101      	bne.n	8015bd8 <SD_read+0x13c>
        res = RES_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8015bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3720      	adds	r7, #32
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	200007e4 	.word	0x200007e4
 8015be8:	200005e0 	.word	0x200005e0

08015bec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b088      	sub	sp, #32
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60b9      	str	r1, [r7, #8]
 8015bf4:	607a      	str	r2, [r7, #4]
 8015bf6:	603b      	str	r3, [r7, #0]
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8015c00:	4b4c      	ldr	r3, [pc, #304]	; (8015d34 <SD_write+0x148>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015c06:	f247 5030 	movw	r0, #30000	; 0x7530
 8015c0a:	f7ff fee2 	bl	80159d2 <SD_CheckStatusWithTimeout>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	da01      	bge.n	8015c18 <SD_write+0x2c>
  {
    return res;
 8015c14:	7ffb      	ldrb	r3, [r7, #31]
 8015c16:	e088      	b.n	8015d2a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	f003 0303 	and.w	r3, r3, #3
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	f040 8082 	bne.w	8015d28 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015c24:	683a      	ldr	r2, [r7, #0]
 8015c26:	6879      	ldr	r1, [r7, #4]
 8015c28:	68b8      	ldr	r0, [r7, #8]
 8015c2a:	f7fd fb71 	bl	8013310 <BSP_SD_WriteBlocks_DMA>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d130      	bne.n	8015c96 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015c34:	f7f0 fafa 	bl	800622c <HAL_GetTick>
 8015c38:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015c3a:	bf00      	nop
 8015c3c:	4b3d      	ldr	r3, [pc, #244]	; (8015d34 <SD_write+0x148>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d108      	bne.n	8015c56 <SD_write+0x6a>
 8015c44:	f7f0 faf2 	bl	800622c <HAL_GetTick>
 8015c48:	4602      	mov	r2, r0
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015c52:	4293      	cmp	r3, r2
 8015c54:	d9f2      	bls.n	8015c3c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015c56:	4b37      	ldr	r3, [pc, #220]	; (8015d34 <SD_write+0x148>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d102      	bne.n	8015c64 <SD_write+0x78>
      {
        res = RES_ERROR;
 8015c5e:	2301      	movs	r3, #1
 8015c60:	77fb      	strb	r3, [r7, #31]
 8015c62:	e061      	b.n	8015d28 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8015c64:	4b33      	ldr	r3, [pc, #204]	; (8015d34 <SD_write+0x148>)
 8015c66:	2200      	movs	r2, #0
 8015c68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015c6a:	f7f0 fadf 	bl	800622c <HAL_GetTick>
 8015c6e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015c70:	e007      	b.n	8015c82 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015c72:	f7fd fb67 	bl	8013344 <BSP_SD_GetCardState>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d102      	bne.n	8015c82 <SD_write+0x96>
          {
            res = RES_OK;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	77fb      	strb	r3, [r7, #31]
            break;
 8015c80:	e052      	b.n	8015d28 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015c82:	f7f0 fad3 	bl	800622c <HAL_GetTick>
 8015c86:	4602      	mov	r2, r0
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015c90:	4293      	cmp	r3, r2
 8015c92:	d9ee      	bls.n	8015c72 <SD_write+0x86>
 8015c94:	e048      	b.n	8015d28 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8015c96:	2300      	movs	r3, #0
 8015c98:	61bb      	str	r3, [r7, #24]
 8015c9a:	e034      	b.n	8015d06 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8015c9c:	4b25      	ldr	r3, [pc, #148]	; (8015d34 <SD_write+0x148>)
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	1c5a      	adds	r2, r3, #1
 8015ca6:	607a      	str	r2, [r7, #4]
 8015ca8:	2201      	movs	r2, #1
 8015caa:	4619      	mov	r1, r3
 8015cac:	4822      	ldr	r0, [pc, #136]	; (8015d38 <SD_write+0x14c>)
 8015cae:	f7fd fb2f 	bl	8013310 <BSP_SD_WriteBlocks_DMA>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015cb6:	7fbb      	ldrb	r3, [r7, #30]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d129      	bne.n	8015d10 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8015cbc:	f7f0 fab6 	bl	800622c <HAL_GetTick>
 8015cc0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015cc2:	bf00      	nop
 8015cc4:	4b1b      	ldr	r3, [pc, #108]	; (8015d34 <SD_write+0x148>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d108      	bne.n	8015cde <SD_write+0xf2>
 8015ccc:	f7f0 faae 	bl	800622c <HAL_GetTick>
 8015cd0:	4602      	mov	r2, r0
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	f247 522f 	movw	r2, #29999	; 0x752f
 8015cda:	4293      	cmp	r3, r2
 8015cdc:	d9f2      	bls.n	8015cc4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8015cde:	4b15      	ldr	r3, [pc, #84]	; (8015d34 <SD_write+0x148>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d016      	beq.n	8015d14 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	4a13      	ldr	r2, [pc, #76]	; (8015d38 <SD_write+0x14c>)
 8015cea:	4618      	mov	r0, r3
 8015cec:	4611      	mov	r1, r2
 8015cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	f001 f992 	bl	801701c <memcpy>
          buff += BLOCKSIZE;
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015cfe:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	3301      	adds	r3, #1
 8015d04:	61bb      	str	r3, [r7, #24]
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	683a      	ldr	r2, [r7, #0]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d8c6      	bhi.n	8015c9c <SD_write+0xb0>
 8015d0e:	e002      	b.n	8015d16 <SD_write+0x12a>
        }
        else
        {
          break;
 8015d10:	bf00      	nop
 8015d12:	e000      	b.n	8015d16 <SD_write+0x12a>
            break;
 8015d14:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	683a      	ldr	r2, [r7, #0]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d104      	bne.n	8015d28 <SD_write+0x13c>
 8015d1e:	7fbb      	ldrb	r3, [r7, #30]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d101      	bne.n	8015d28 <SD_write+0x13c>
        res = RES_OK;
 8015d24:	2300      	movs	r3, #0
 8015d26:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8015d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3720      	adds	r7, #32
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	200007e0 	.word	0x200007e0
 8015d38:	200005e0 	.word	0x200005e0

08015d3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b08c      	sub	sp, #48	; 0x30
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	4603      	mov	r3, r0
 8015d44:	603a      	str	r2, [r7, #0]
 8015d46:	71fb      	strb	r3, [r7, #7]
 8015d48:	460b      	mov	r3, r1
 8015d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015d52:	4b25      	ldr	r3, [pc, #148]	; (8015de8 <SD_ioctl+0xac>)
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	f003 0301 	and.w	r3, r3, #1
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d001      	beq.n	8015d64 <SD_ioctl+0x28>
 8015d60:	2303      	movs	r3, #3
 8015d62:	e03c      	b.n	8015dde <SD_ioctl+0xa2>

  switch (cmd)
 8015d64:	79bb      	ldrb	r3, [r7, #6]
 8015d66:	2b03      	cmp	r3, #3
 8015d68:	d834      	bhi.n	8015dd4 <SD_ioctl+0x98>
 8015d6a:	a201      	add	r2, pc, #4	; (adr r2, 8015d70 <SD_ioctl+0x34>)
 8015d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d70:	08015d81 	.word	0x08015d81
 8015d74:	08015d89 	.word	0x08015d89
 8015d78:	08015da1 	.word	0x08015da1
 8015d7c:	08015dbb 	.word	0x08015dbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015d80:	2300      	movs	r3, #0
 8015d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015d86:	e028      	b.n	8015dda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015d88:	f107 030c 	add.w	r3, r7, #12
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7fd fae9 	bl	8013364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015d9e:	e01c      	b.n	8015dda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015da0:	f107 030c 	add.w	r3, r7, #12
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7fd fadd 	bl	8013364 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015db2:	2300      	movs	r3, #0
 8015db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015db8:	e00f      	b.n	8015dda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015dba:	f107 030c 	add.w	r3, r7, #12
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fd fad0 	bl	8013364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc6:	0a5a      	lsrs	r2, r3, #9
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015dd2:	e002      	b.n	8015dda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015dd4:	2304      	movs	r3, #4
 8015dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3730      	adds	r7, #48	; 0x30
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	20000130 	.word	0x20000130

08015dec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015dec:	b480      	push	{r7}
 8015dee:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8015df0:	4b03      	ldr	r3, [pc, #12]	; (8015e00 <BSP_SD_WriteCpltCallback+0x14>)
 8015df2:	2201      	movs	r2, #1
 8015df4:	601a      	str	r2, [r3, #0]
}
 8015df6:	bf00      	nop
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfe:	4770      	bx	lr
 8015e00:	200007e0 	.word	0x200007e0

08015e04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015e04:	b480      	push	{r7}
 8015e06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015e08:	4b03      	ldr	r3, [pc, #12]	; (8015e18 <BSP_SD_ReadCpltCallback+0x14>)
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	601a      	str	r2, [r3, #0]
}
 8015e0e:	bf00      	nop
 8015e10:	46bd      	mov	sp, r7
 8015e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e16:	4770      	bx	lr
 8015e18:	200007e4 	.word	0x200007e4

08015e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b083      	sub	sp, #12
 8015e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015e22:	2300      	movs	r3, #0
 8015e24:	607b      	str	r3, [r7, #4]
 8015e26:	4b10      	ldr	r3, [pc, #64]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e2a:	4a0f      	ldr	r2, [pc, #60]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015e30:	6453      	str	r3, [r2, #68]	; 0x44
 8015e32:	4b0d      	ldr	r3, [pc, #52]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015e3a:	607b      	str	r3, [r7, #4]
 8015e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015e3e:	2300      	movs	r3, #0
 8015e40:	603b      	str	r3, [r7, #0]
 8015e42:	4b09      	ldr	r3, [pc, #36]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e46:	4a08      	ldr	r2, [pc, #32]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8015e4e:	4b06      	ldr	r3, [pc, #24]	; (8015e68 <HAL_MspInit+0x4c>)
 8015e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e56:	603b      	str	r3, [r7, #0]
 8015e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015e5a:	bf00      	nop
 8015e5c:	370c      	adds	r7, #12
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr
 8015e66:	bf00      	nop
 8015e68:	40023800 	.word	0x40023800

08015e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b08a      	sub	sp, #40	; 0x28
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e74:	f107 0314 	add.w	r3, r7, #20
 8015e78:	2200      	movs	r2, #0
 8015e7a:	601a      	str	r2, [r3, #0]
 8015e7c:	605a      	str	r2, [r3, #4]
 8015e7e:	609a      	str	r2, [r3, #8]
 8015e80:	60da      	str	r2, [r3, #12]
 8015e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	4a19      	ldr	r2, [pc, #100]	; (8015ef0 <HAL_I2C_MspInit+0x84>)
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	d12b      	bne.n	8015ee6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015e8e:	2300      	movs	r3, #0
 8015e90:	613b      	str	r3, [r7, #16]
 8015e92:	4b18      	ldr	r3, [pc, #96]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e96:	4a17      	ldr	r2, [pc, #92]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015e98:	f043 0302 	orr.w	r3, r3, #2
 8015e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8015e9e:	4b15      	ldr	r3, [pc, #84]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ea2:	f003 0302 	and.w	r3, r3, #2
 8015ea6:	613b      	str	r3, [r7, #16]
 8015ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8015eaa:	23c0      	movs	r3, #192	; 0xc0
 8015eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015eae:	2312      	movs	r3, #18
 8015eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015eb6:	2303      	movs	r3, #3
 8015eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015eba:	2304      	movs	r3, #4
 8015ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015ebe:	f107 0314 	add.w	r3, r7, #20
 8015ec2:	4619      	mov	r1, r3
 8015ec4:	480c      	ldr	r0, [pc, #48]	; (8015ef8 <HAL_I2C_MspInit+0x8c>)
 8015ec6:	f7f0 fe89 	bl	8006bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015eca:	2300      	movs	r3, #0
 8015ecc:	60fb      	str	r3, [r7, #12]
 8015ece:	4b09      	ldr	r3, [pc, #36]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ed2:	4a08      	ldr	r2, [pc, #32]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8015eda:	4b06      	ldr	r3, [pc, #24]	; (8015ef4 <HAL_I2C_MspInit+0x88>)
 8015edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015ee2:	60fb      	str	r3, [r7, #12]
 8015ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8015ee6:	bf00      	nop
 8015ee8:	3728      	adds	r7, #40	; 0x28
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	40005400 	.word	0x40005400
 8015ef4:	40023800 	.word	0x40023800
 8015ef8:	40020400 	.word	0x40020400

08015efc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015efc:	b480      	push	{r7}
 8015efe:	b083      	sub	sp, #12
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	4a05      	ldr	r2, [pc, #20]	; (8015f20 <HAL_RTC_MspInit+0x24>)
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d102      	bne.n	8015f14 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015f0e:	4b05      	ldr	r3, [pc, #20]	; (8015f24 <HAL_RTC_MspInit+0x28>)
 8015f10:	2201      	movs	r2, #1
 8015f12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015f14:	bf00      	nop
 8015f16:	370c      	adds	r7, #12
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr
 8015f20:	40002800 	.word	0x40002800
 8015f24:	42470e3c 	.word	0x42470e3c

08015f28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b08a      	sub	sp, #40	; 0x28
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f30:	f107 0314 	add.w	r3, r7, #20
 8015f34:	2200      	movs	r2, #0
 8015f36:	601a      	str	r2, [r3, #0]
 8015f38:	605a      	str	r2, [r3, #4]
 8015f3a:	609a      	str	r2, [r3, #8]
 8015f3c:	60da      	str	r2, [r3, #12]
 8015f3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4a70      	ldr	r2, [pc, #448]	; (8016108 <HAL_SD_MspInit+0x1e0>)
 8015f46:	4293      	cmp	r3, r2
 8015f48:	f040 80da 	bne.w	8016100 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	613b      	str	r3, [r7, #16]
 8015f50:	4b6e      	ldr	r3, [pc, #440]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f54:	4a6d      	ldr	r2, [pc, #436]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8015f5c:	4b6b      	ldr	r3, [pc, #428]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f64:	613b      	str	r3, [r7, #16]
 8015f66:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015f68:	2300      	movs	r3, #0
 8015f6a:	60fb      	str	r3, [r7, #12]
 8015f6c:	4b67      	ldr	r3, [pc, #412]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f70:	4a66      	ldr	r2, [pc, #408]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f72:	f043 0304 	orr.w	r3, r3, #4
 8015f76:	6313      	str	r3, [r2, #48]	; 0x30
 8015f78:	4b64      	ldr	r3, [pc, #400]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f7c:	f003 0304 	and.w	r3, r3, #4
 8015f80:	60fb      	str	r3, [r7, #12]
 8015f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015f84:	2300      	movs	r3, #0
 8015f86:	60bb      	str	r3, [r7, #8]
 8015f88:	4b60      	ldr	r3, [pc, #384]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f8c:	4a5f      	ldr	r2, [pc, #380]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f8e:	f043 0308 	orr.w	r3, r3, #8
 8015f92:	6313      	str	r3, [r2, #48]	; 0x30
 8015f94:	4b5d      	ldr	r3, [pc, #372]	; (801610c <HAL_SD_MspInit+0x1e4>)
 8015f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f98:	f003 0308 	and.w	r3, r3, #8
 8015f9c:	60bb      	str	r3, [r7, #8]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8015fa0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8015fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fa6:	2302      	movs	r3, #2
 8015fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015faa:	2301      	movs	r3, #1
 8015fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015fae:	2303      	movs	r3, #3
 8015fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015fb2:	230c      	movs	r3, #12
 8015fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015fb6:	f107 0314 	add.w	r3, r7, #20
 8015fba:	4619      	mov	r1, r3
 8015fbc:	4854      	ldr	r0, [pc, #336]	; (8016110 <HAL_SD_MspInit+0x1e8>)
 8015fbe:	f7f0 fe0d 	bl	8006bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015fc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fc8:	2302      	movs	r3, #2
 8015fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015fd0:	2303      	movs	r3, #3
 8015fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015fd4:	230c      	movs	r3, #12
 8015fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015fd8:	f107 0314 	add.w	r3, r7, #20
 8015fdc:	4619      	mov	r1, r3
 8015fde:	484c      	ldr	r0, [pc, #304]	; (8016110 <HAL_SD_MspInit+0x1e8>)
 8015fe0:	f7f0 fdfc 	bl	8006bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015fe4:	2304      	movs	r3, #4
 8015fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fe8:	2302      	movs	r3, #2
 8015fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015fec:	2301      	movs	r3, #1
 8015fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ff0:	2303      	movs	r3, #3
 8015ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015ff4:	230c      	movs	r3, #12
 8015ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015ff8:	f107 0314 	add.w	r3, r7, #20
 8015ffc:	4619      	mov	r1, r3
 8015ffe:	4845      	ldr	r0, [pc, #276]	; (8016114 <HAL_SD_MspInit+0x1ec>)
 8016000:	f7f0 fdec 	bl	8006bdc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8016004:	4b44      	ldr	r3, [pc, #272]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016006:	4a45      	ldr	r2, [pc, #276]	; (801611c <HAL_SD_MspInit+0x1f4>)
 8016008:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 801600a:	4b43      	ldr	r3, [pc, #268]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 801600c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016010:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016012:	4b41      	ldr	r3, [pc, #260]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016014:	2200      	movs	r2, #0
 8016016:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016018:	4b3f      	ldr	r3, [pc, #252]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 801601a:	2200      	movs	r2, #0
 801601c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 801601e:	4b3e      	ldr	r3, [pc, #248]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016024:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016026:	4b3c      	ldr	r3, [pc, #240]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801602c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801602e:	4b3a      	ldr	r3, [pc, #232]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016030:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016034:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8016036:	4b38      	ldr	r3, [pc, #224]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016038:	2220      	movs	r2, #32
 801603a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 801603c:	4b36      	ldr	r3, [pc, #216]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 801603e:	2200      	movs	r2, #0
 8016040:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8016042:	4b35      	ldr	r3, [pc, #212]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016044:	2204      	movs	r2, #4
 8016046:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8016048:	4b33      	ldr	r3, [pc, #204]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 801604a:	2203      	movs	r2, #3
 801604c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 801604e:	4b32      	ldr	r3, [pc, #200]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016050:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8016054:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8016056:	4b30      	ldr	r3, [pc, #192]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016058:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801605c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 801605e:	482e      	ldr	r0, [pc, #184]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016060:	f7f0 fa24 	bl	80064ac <HAL_DMA_Init>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 801606a:	f7ff fcab 	bl	80159c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4a29      	ldr	r2, [pc, #164]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016072:	63da      	str	r2, [r3, #60]	; 0x3c
 8016074:	4a28      	ldr	r2, [pc, #160]	; (8016118 <HAL_SD_MspInit+0x1f0>)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 801607a:	4b29      	ldr	r3, [pc, #164]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 801607c:	4a29      	ldr	r2, [pc, #164]	; (8016124 <HAL_SD_MspInit+0x1fc>)
 801607e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8016080:	4b27      	ldr	r3, [pc, #156]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 8016082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016086:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016088:	4b25      	ldr	r3, [pc, #148]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 801608a:	2240      	movs	r2, #64	; 0x40
 801608c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801608e:	4b24      	ldr	r3, [pc, #144]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 8016090:	2200      	movs	r2, #0
 8016092:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016094:	4b22      	ldr	r3, [pc, #136]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 8016096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801609a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801609c:	4b20      	ldr	r3, [pc, #128]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 801609e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80160a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80160a4:	4b1e      	ldr	r3, [pc, #120]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80160aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80160ac:	4b1c      	ldr	r3, [pc, #112]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160ae:	2220      	movs	r2, #32
 80160b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80160b2:	4b1b      	ldr	r3, [pc, #108]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160b4:	2200      	movs	r2, #0
 80160b6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80160b8:	4b19      	ldr	r3, [pc, #100]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160ba:	2204      	movs	r2, #4
 80160bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80160be:	4b18      	ldr	r3, [pc, #96]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160c0:	2203      	movs	r2, #3
 80160c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80160c4:	4b16      	ldr	r3, [pc, #88]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80160ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80160cc:	4b14      	ldr	r3, [pc, #80]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80160d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80160d4:	4812      	ldr	r0, [pc, #72]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160d6:	f7f0 f9e9 	bl	80064ac <HAL_DMA_Init>
 80160da:	4603      	mov	r3, r0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d001      	beq.n	80160e4 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80160e0:	f7ff fc70 	bl	80159c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	4a0e      	ldr	r2, [pc, #56]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160e8:	641a      	str	r2, [r3, #64]	; 0x40
 80160ea:	4a0d      	ldr	r2, [pc, #52]	; (8016120 <HAL_SD_MspInit+0x1f8>)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80160f0:	2200      	movs	r2, #0
 80160f2:	2100      	movs	r1, #0
 80160f4:	2031      	movs	r0, #49	; 0x31
 80160f6:	f7f0 f9a2 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80160fa:	2031      	movs	r0, #49	; 0x31
 80160fc:	f7f0 f9bb 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8016100:	bf00      	nop
 8016102:	3728      	adds	r7, #40	; 0x28
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	40012c00 	.word	0x40012c00
 801610c:	40023800 	.word	0x40023800
 8016110:	40020800 	.word	0x40020800
 8016114:	40020c00 	.word	0x40020c00
 8016118:	2000839c 	.word	0x2000839c
 801611c:	40026458 	.word	0x40026458
 8016120:	20008530 	.word	0x20008530
 8016124:	400264a0 	.word	0x400264a0

08016128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b08a      	sub	sp, #40	; 0x28
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016130:	f107 0314 	add.w	r3, r7, #20
 8016134:	2200      	movs	r2, #0
 8016136:	601a      	str	r2, [r3, #0]
 8016138:	605a      	str	r2, [r3, #4]
 801613a:	609a      	str	r2, [r3, #8]
 801613c:	60da      	str	r2, [r3, #12]
 801613e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4a19      	ldr	r2, [pc, #100]	; (80161ac <HAL_SPI_MspInit+0x84>)
 8016146:	4293      	cmp	r3, r2
 8016148:	d12b      	bne.n	80161a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801614a:	2300      	movs	r3, #0
 801614c:	613b      	str	r3, [r7, #16]
 801614e:	4b18      	ldr	r3, [pc, #96]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 8016150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016152:	4a17      	ldr	r2, [pc, #92]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 8016154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016158:	6453      	str	r3, [r2, #68]	; 0x44
 801615a:	4b15      	ldr	r3, [pc, #84]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 801615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801615e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016162:	613b      	str	r3, [r7, #16]
 8016164:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016166:	2300      	movs	r3, #0
 8016168:	60fb      	str	r3, [r7, #12]
 801616a:	4b11      	ldr	r3, [pc, #68]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 801616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801616e:	4a10      	ldr	r2, [pc, #64]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 8016170:	f043 0302 	orr.w	r3, r3, #2
 8016174:	6313      	str	r3, [r2, #48]	; 0x30
 8016176:	4b0e      	ldr	r3, [pc, #56]	; (80161b0 <HAL_SPI_MspInit+0x88>)
 8016178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801617a:	f003 0302 	and.w	r3, r3, #2
 801617e:	60fb      	str	r3, [r7, #12]
 8016180:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8016182:	2338      	movs	r3, #56	; 0x38
 8016184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016186:	2302      	movs	r3, #2
 8016188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801618a:	2300      	movs	r3, #0
 801618c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801618e:	2303      	movs	r3, #3
 8016190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8016192:	2305      	movs	r3, #5
 8016194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016196:	f107 0314 	add.w	r3, r7, #20
 801619a:	4619      	mov	r1, r3
 801619c:	4805      	ldr	r0, [pc, #20]	; (80161b4 <HAL_SPI_MspInit+0x8c>)
 801619e:	f7f0 fd1d 	bl	8006bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80161a2:	bf00      	nop
 80161a4:	3728      	adds	r7, #40	; 0x28
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	40013000 	.word	0x40013000
 80161b0:	40023800 	.word	0x40023800
 80161b4:	40020400 	.word	0x40020400

080161b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80161b8:	b480      	push	{r7}
 80161ba:	b087      	sub	sp, #28
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80161c8:	d10e      	bne.n	80161e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80161ca:	2300      	movs	r3, #0
 80161cc:	617b      	str	r3, [r7, #20]
 80161ce:	4b1d      	ldr	r3, [pc, #116]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 80161d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d2:	4a1c      	ldr	r2, [pc, #112]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 80161d4:	f043 0301 	orr.w	r3, r3, #1
 80161d8:	6413      	str	r3, [r2, #64]	; 0x40
 80161da:	4b1a      	ldr	r3, [pc, #104]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 80161dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161de:	f003 0301 	and.w	r3, r3, #1
 80161e2:	617b      	str	r3, [r7, #20]
 80161e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80161e6:	e026      	b.n	8016236 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	4a16      	ldr	r2, [pc, #88]	; (8016248 <HAL_TIM_Base_MspInit+0x90>)
 80161ee:	4293      	cmp	r3, r2
 80161f0:	d10e      	bne.n	8016210 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80161f2:	2300      	movs	r3, #0
 80161f4:	613b      	str	r3, [r7, #16]
 80161f6:	4b13      	ldr	r3, [pc, #76]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 80161f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161fa:	4a12      	ldr	r2, [pc, #72]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 80161fc:	f043 0302 	orr.w	r3, r3, #2
 8016200:	6413      	str	r3, [r2, #64]	; 0x40
 8016202:	4b10      	ldr	r3, [pc, #64]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 8016204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016206:	f003 0302 	and.w	r3, r3, #2
 801620a:	613b      	str	r3, [r7, #16]
 801620c:	693b      	ldr	r3, [r7, #16]
}
 801620e:	e012      	b.n	8016236 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4a0d      	ldr	r2, [pc, #52]	; (801624c <HAL_TIM_Base_MspInit+0x94>)
 8016216:	4293      	cmp	r3, r2
 8016218:	d10d      	bne.n	8016236 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801621a:	2300      	movs	r3, #0
 801621c:	60fb      	str	r3, [r7, #12]
 801621e:	4b09      	ldr	r3, [pc, #36]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 8016220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016222:	4a08      	ldr	r2, [pc, #32]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 8016224:	f043 0308 	orr.w	r3, r3, #8
 8016228:	6413      	str	r3, [r2, #64]	; 0x40
 801622a:	4b06      	ldr	r3, [pc, #24]	; (8016244 <HAL_TIM_Base_MspInit+0x8c>)
 801622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801622e:	f003 0308 	and.w	r3, r3, #8
 8016232:	60fb      	str	r3, [r7, #12]
 8016234:	68fb      	ldr	r3, [r7, #12]
}
 8016236:	bf00      	nop
 8016238:	371c      	adds	r7, #28
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop
 8016244:	40023800 	.word	0x40023800
 8016248:	40000400 	.word	0x40000400
 801624c:	40000c00 	.word	0x40000c00

08016250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b08a      	sub	sp, #40	; 0x28
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016258:	f107 0314 	add.w	r3, r7, #20
 801625c:	2200      	movs	r2, #0
 801625e:	601a      	str	r2, [r3, #0]
 8016260:	605a      	str	r2, [r3, #4]
 8016262:	609a      	str	r2, [r3, #8]
 8016264:	60da      	str	r2, [r3, #12]
 8016266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	4a24      	ldr	r2, [pc, #144]	; (8016300 <HAL_TIM_MspPostInit+0xb0>)
 801626e:	4293      	cmp	r3, r2
 8016270:	d11e      	bne.n	80162b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016272:	2300      	movs	r3, #0
 8016274:	613b      	str	r3, [r7, #16]
 8016276:	4b23      	ldr	r3, [pc, #140]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 8016278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801627a:	4a22      	ldr	r2, [pc, #136]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 801627c:	f043 0302 	orr.w	r3, r3, #2
 8016280:	6313      	str	r3, [r2, #48]	; 0x30
 8016282:	4b20      	ldr	r3, [pc, #128]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 8016284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016286:	f003 0302 	and.w	r3, r3, #2
 801628a:	613b      	str	r3, [r7, #16]
 801628c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 801628e:	2303      	movs	r3, #3
 8016290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016292:	2302      	movs	r3, #2
 8016294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016296:	2300      	movs	r3, #0
 8016298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801629a:	2300      	movs	r3, #0
 801629c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801629e:	2302      	movs	r3, #2
 80162a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80162a2:	f107 0314 	add.w	r3, r7, #20
 80162a6:	4619      	mov	r1, r3
 80162a8:	4817      	ldr	r0, [pc, #92]	; (8016308 <HAL_TIM_MspPostInit+0xb8>)
 80162aa:	f7f0 fc97 	bl	8006bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80162ae:	e022      	b.n	80162f6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	4a15      	ldr	r2, [pc, #84]	; (801630c <HAL_TIM_MspPostInit+0xbc>)
 80162b6:	4293      	cmp	r3, r2
 80162b8:	d11d      	bne.n	80162f6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80162ba:	2300      	movs	r3, #0
 80162bc:	60fb      	str	r3, [r7, #12]
 80162be:	4b11      	ldr	r3, [pc, #68]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 80162c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162c2:	4a10      	ldr	r2, [pc, #64]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 80162c4:	f043 0301 	orr.w	r3, r3, #1
 80162c8:	6313      	str	r3, [r2, #48]	; 0x30
 80162ca:	4b0e      	ldr	r3, [pc, #56]	; (8016304 <HAL_TIM_MspPostInit+0xb4>)
 80162cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ce:	f003 0301 	and.w	r3, r3, #1
 80162d2:	60fb      	str	r3, [r7, #12]
 80162d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 80162d6:	230a      	movs	r3, #10
 80162d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80162da:	2302      	movs	r3, #2
 80162dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162de:	2300      	movs	r3, #0
 80162e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80162e2:	2300      	movs	r3, #0
 80162e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80162e6:	2302      	movs	r3, #2
 80162e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80162ea:	f107 0314 	add.w	r3, r7, #20
 80162ee:	4619      	mov	r1, r3
 80162f0:	4807      	ldr	r0, [pc, #28]	; (8016310 <HAL_TIM_MspPostInit+0xc0>)
 80162f2:	f7f0 fc73 	bl	8006bdc <HAL_GPIO_Init>
}
 80162f6:	bf00      	nop
 80162f8:	3728      	adds	r7, #40	; 0x28
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	40000400 	.word	0x40000400
 8016304:	40023800 	.word	0x40023800
 8016308:	40020400 	.word	0x40020400
 801630c:	40000c00 	.word	0x40000c00
 8016310:	40020000 	.word	0x40020000

08016314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b08a      	sub	sp, #40	; 0x28
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801631c:	f107 0314 	add.w	r3, r7, #20
 8016320:	2200      	movs	r2, #0
 8016322:	601a      	str	r2, [r3, #0]
 8016324:	605a      	str	r2, [r3, #4]
 8016326:	609a      	str	r2, [r3, #8]
 8016328:	60da      	str	r2, [r3, #12]
 801632a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a1d      	ldr	r2, [pc, #116]	; (80163a8 <HAL_UART_MspInit+0x94>)
 8016332:	4293      	cmp	r3, r2
 8016334:	d134      	bne.n	80163a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8016336:	2300      	movs	r3, #0
 8016338:	613b      	str	r3, [r7, #16]
 801633a:	4b1c      	ldr	r3, [pc, #112]	; (80163ac <HAL_UART_MspInit+0x98>)
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	4a1b      	ldr	r2, [pc, #108]	; (80163ac <HAL_UART_MspInit+0x98>)
 8016340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016344:	6413      	str	r3, [r2, #64]	; 0x40
 8016346:	4b19      	ldr	r3, [pc, #100]	; (80163ac <HAL_UART_MspInit+0x98>)
 8016348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801634a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801634e:	613b      	str	r3, [r7, #16]
 8016350:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016352:	2300      	movs	r3, #0
 8016354:	60fb      	str	r3, [r7, #12]
 8016356:	4b15      	ldr	r3, [pc, #84]	; (80163ac <HAL_UART_MspInit+0x98>)
 8016358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801635a:	4a14      	ldr	r2, [pc, #80]	; (80163ac <HAL_UART_MspInit+0x98>)
 801635c:	f043 0302 	orr.w	r3, r3, #2
 8016360:	6313      	str	r3, [r2, #48]	; 0x30
 8016362:	4b12      	ldr	r3, [pc, #72]	; (80163ac <HAL_UART_MspInit+0x98>)
 8016364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016366:	f003 0302 	and.w	r3, r3, #2
 801636a:	60fb      	str	r3, [r7, #12]
 801636c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 801636e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8016372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016374:	2302      	movs	r3, #2
 8016376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016378:	2301      	movs	r3, #1
 801637a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801637c:	2303      	movs	r3, #3
 801637e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016380:	2307      	movs	r3, #7
 8016382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016384:	f107 0314 	add.w	r3, r7, #20
 8016388:	4619      	mov	r1, r3
 801638a:	4809      	ldr	r0, [pc, #36]	; (80163b0 <HAL_UART_MspInit+0x9c>)
 801638c:	f7f0 fc26 	bl	8006bdc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8016390:	2200      	movs	r2, #0
 8016392:	2100      	movs	r1, #0
 8016394:	2027      	movs	r0, #39	; 0x27
 8016396:	f7f0 f852 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 801639a:	2027      	movs	r0, #39	; 0x27
 801639c:	f7f0 f86b 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80163a0:	bf00      	nop
 80163a2:	3728      	adds	r7, #40	; 0x28
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	40004800 	.word	0x40004800
 80163ac:	40023800 	.word	0x40023800
 80163b0:	40020400 	.word	0x40020400

080163b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80163b4:	b480      	push	{r7}
 80163b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80163b8:	bf00      	nop
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr

080163c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80163c2:	b480      	push	{r7}
 80163c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80163c6:	e7fe      	b.n	80163c6 <HardFault_Handler+0x4>

080163c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80163c8:	b480      	push	{r7}
 80163ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80163cc:	e7fe      	b.n	80163cc <MemManage_Handler+0x4>

080163ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80163ce:	b480      	push	{r7}
 80163d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80163d2:	e7fe      	b.n	80163d2 <BusFault_Handler+0x4>

080163d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80163d4:	b480      	push	{r7}
 80163d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80163d8:	e7fe      	b.n	80163d8 <UsageFault_Handler+0x4>

080163da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80163da:	b480      	push	{r7}
 80163dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80163de:	bf00      	nop
 80163e0:	46bd      	mov	sp, r7
 80163e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e6:	4770      	bx	lr

080163e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80163e8:	b480      	push	{r7}
 80163ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80163ec:	bf00      	nop
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr

080163f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80163f6:	b480      	push	{r7}
 80163f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80163fa:	bf00      	nop
 80163fc:	46bd      	mov	sp, r7
 80163fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016402:	4770      	bx	lr

08016404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016408:	f7ef fefc 	bl	8006204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801640c:	bf00      	nop
 801640e:	bd80      	pop	{r7, pc}

08016410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8016414:	4802      	ldr	r0, [pc, #8]	; (8016420 <USART3_IRQHandler+0x10>)
 8016416:	f7f6 fb69 	bl	800caec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 801641a:	bf00      	nop
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	200083fc 	.word	0x200083fc

08016424 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8016428:	4802      	ldr	r0, [pc, #8]	; (8016434 <SDIO_IRQHandler+0x10>)
 801642a:	f7f3 ff83 	bl	800a334 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 801642e:	bf00      	nop
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	20008590 	.word	0x20008590

08016438 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 801643c:	4802      	ldr	r0, [pc, #8]	; (8016448 <DMA2_Stream3_IRQHandler+0x10>)
 801643e:	f7f0 f965 	bl	800670c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8016442:	bf00      	nop
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	2000839c 	.word	0x2000839c

0801644c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016450:	4802      	ldr	r0, [pc, #8]	; (801645c <OTG_FS_IRQHandler+0x10>)
 8016452:	f7f1 fe78 	bl	8008146 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8016456:	bf00      	nop
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	20009948 	.word	0x20009948

08016460 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8016464:	4802      	ldr	r0, [pc, #8]	; (8016470 <DMA2_Stream6_IRQHandler+0x10>)
 8016466:	f7f0 f951 	bl	800670c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 801646a:	bf00      	nop
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	20008530 	.word	0x20008530

08016474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801647c:	4b11      	ldr	r3, [pc, #68]	; (80164c4 <_sbrk+0x50>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d102      	bne.n	801648a <_sbrk+0x16>
		heap_end = &end;
 8016484:	4b0f      	ldr	r3, [pc, #60]	; (80164c4 <_sbrk+0x50>)
 8016486:	4a10      	ldr	r2, [pc, #64]	; (80164c8 <_sbrk+0x54>)
 8016488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801648a:	4b0e      	ldr	r3, [pc, #56]	; (80164c4 <_sbrk+0x50>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8016490:	4b0c      	ldr	r3, [pc, #48]	; (80164c4 <_sbrk+0x50>)
 8016492:	681a      	ldr	r2, [r3, #0]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4413      	add	r3, r2
 8016498:	466a      	mov	r2, sp
 801649a:	4293      	cmp	r3, r2
 801649c:	d907      	bls.n	80164ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801649e:	f000 fd83 	bl	8016fa8 <__errno>
 80164a2:	4602      	mov	r2, r0
 80164a4:	230c      	movs	r3, #12
 80164a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80164a8:	f04f 33ff 	mov.w	r3, #4294967295
 80164ac:	e006      	b.n	80164bc <_sbrk+0x48>
	}

	heap_end += incr;
 80164ae:	4b05      	ldr	r3, [pc, #20]	; (80164c4 <_sbrk+0x50>)
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	4413      	add	r3, r2
 80164b6:	4a03      	ldr	r2, [pc, #12]	; (80164c4 <_sbrk+0x50>)
 80164b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80164ba:	68fb      	ldr	r3, [r7, #12]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	200007e8 	.word	0x200007e8
 80164c8:	20009f58 	.word	0x20009f58

080164cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80164cc:	b480      	push	{r7}
 80164ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80164d0:	4b16      	ldr	r3, [pc, #88]	; (801652c <SystemInit+0x60>)
 80164d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80164d6:	4a15      	ldr	r2, [pc, #84]	; (801652c <SystemInit+0x60>)
 80164d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80164dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80164e0:	4b13      	ldr	r3, [pc, #76]	; (8016530 <SystemInit+0x64>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	4a12      	ldr	r2, [pc, #72]	; (8016530 <SystemInit+0x64>)
 80164e6:	f043 0301 	orr.w	r3, r3, #1
 80164ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80164ec:	4b10      	ldr	r3, [pc, #64]	; (8016530 <SystemInit+0x64>)
 80164ee:	2200      	movs	r2, #0
 80164f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80164f2:	4b0f      	ldr	r3, [pc, #60]	; (8016530 <SystemInit+0x64>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4a0e      	ldr	r2, [pc, #56]	; (8016530 <SystemInit+0x64>)
 80164f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80164fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8016502:	4b0b      	ldr	r3, [pc, #44]	; (8016530 <SystemInit+0x64>)
 8016504:	4a0b      	ldr	r2, [pc, #44]	; (8016534 <SystemInit+0x68>)
 8016506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8016508:	4b09      	ldr	r3, [pc, #36]	; (8016530 <SystemInit+0x64>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	4a08      	ldr	r2, [pc, #32]	; (8016530 <SystemInit+0x64>)
 801650e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8016514:	4b06      	ldr	r3, [pc, #24]	; (8016530 <SystemInit+0x64>)
 8016516:	2200      	movs	r2, #0
 8016518:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801651a:	4b04      	ldr	r3, [pc, #16]	; (801652c <SystemInit+0x60>)
 801651c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016520:	609a      	str	r2, [r3, #8]
#endif
}
 8016522:	bf00      	nop
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr
 801652c:	e000ed00 	.word	0xe000ed00
 8016530:	40023800 	.word	0x40023800
 8016534:	24003010 	.word	0x24003010

08016538 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801653c:	2200      	movs	r2, #0
 801653e:	4912      	ldr	r1, [pc, #72]	; (8016588 <MX_USB_DEVICE_Init+0x50>)
 8016540:	4812      	ldr	r0, [pc, #72]	; (801658c <MX_USB_DEVICE_Init+0x54>)
 8016542:	f7f9 fa5a 	bl	800f9fa <USBD_Init>
 8016546:	4603      	mov	r3, r0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d001      	beq.n	8016550 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801654c:	f7ff fa3a 	bl	80159c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016550:	490f      	ldr	r1, [pc, #60]	; (8016590 <MX_USB_DEVICE_Init+0x58>)
 8016552:	480e      	ldr	r0, [pc, #56]	; (801658c <MX_USB_DEVICE_Init+0x54>)
 8016554:	f7f9 fa7c 	bl	800fa50 <USBD_RegisterClass>
 8016558:	4603      	mov	r3, r0
 801655a:	2b00      	cmp	r3, #0
 801655c:	d001      	beq.n	8016562 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801655e:	f7ff fa31 	bl	80159c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016562:	490c      	ldr	r1, [pc, #48]	; (8016594 <MX_USB_DEVICE_Init+0x5c>)
 8016564:	4809      	ldr	r0, [pc, #36]	; (801658c <MX_USB_DEVICE_Init+0x54>)
 8016566:	f7f9 f9d9 	bl	800f91c <USBD_CDC_RegisterInterface>
 801656a:	4603      	mov	r3, r0
 801656c:	2b00      	cmp	r3, #0
 801656e:	d001      	beq.n	8016574 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016570:	f7ff fa28 	bl	80159c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016574:	4805      	ldr	r0, [pc, #20]	; (801658c <MX_USB_DEVICE_Init+0x54>)
 8016576:	f7f9 fa85 	bl	800fa84 <USBD_Start>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d001      	beq.n	8016584 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016580:	f7ff fa20 	bl	80159c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016584:	bf00      	nop
 8016586:	bd80      	pop	{r7, pc}
 8016588:	20000148 	.word	0x20000148
 801658c:	200086ac 	.word	0x200086ac
 8016590:	20000018 	.word	0x20000018
 8016594:	20000138 	.word	0x20000138

08016598 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801659c:	2200      	movs	r2, #0
 801659e:	4905      	ldr	r1, [pc, #20]	; (80165b4 <CDC_Init_FS+0x1c>)
 80165a0:	4805      	ldr	r0, [pc, #20]	; (80165b8 <CDC_Init_FS+0x20>)
 80165a2:	f7f9 f9d2 	bl	800f94a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80165a6:	4905      	ldr	r1, [pc, #20]	; (80165bc <CDC_Init_FS+0x24>)
 80165a8:	4803      	ldr	r0, [pc, #12]	; (80165b8 <CDC_Init_FS+0x20>)
 80165aa:	f7f9 f9e8 	bl	800f97e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80165ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	20009148 	.word	0x20009148
 80165b8:	200086ac 	.word	0x200086ac
 80165bc:	20008948 	.word	0x20008948

080165c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80165c0:	b480      	push	{r7}
 80165c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80165c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr

080165d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	4603      	mov	r3, r0
 80165d8:	6039      	str	r1, [r7, #0]
 80165da:	71fb      	strb	r3, [r7, #7]
 80165dc:	4613      	mov	r3, r2
 80165de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80165e0:	f107 0308 	add.w	r3, r7, #8
 80165e4:	2200      	movs	r2, #0
 80165e6:	601a      	str	r2, [r3, #0]
 80165e8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80165ec:	79fb      	ldrb	r3, [r7, #7]
 80165ee:	2b23      	cmp	r3, #35	; 0x23
 80165f0:	d87c      	bhi.n	80166ec <CDC_Control_FS+0x11c>
 80165f2:	a201      	add	r2, pc, #4	; (adr r2, 80165f8 <CDC_Control_FS+0x28>)
 80165f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165f8:	080166ed 	.word	0x080166ed
 80165fc:	080166ed 	.word	0x080166ed
 8016600:	080166ed 	.word	0x080166ed
 8016604:	080166ed 	.word	0x080166ed
 8016608:	080166ed 	.word	0x080166ed
 801660c:	080166ed 	.word	0x080166ed
 8016610:	080166ed 	.word	0x080166ed
 8016614:	080166ed 	.word	0x080166ed
 8016618:	080166ed 	.word	0x080166ed
 801661c:	080166ed 	.word	0x080166ed
 8016620:	080166ed 	.word	0x080166ed
 8016624:	080166ed 	.word	0x080166ed
 8016628:	080166ed 	.word	0x080166ed
 801662c:	080166ed 	.word	0x080166ed
 8016630:	080166ed 	.word	0x080166ed
 8016634:	080166ed 	.word	0x080166ed
 8016638:	080166ed 	.word	0x080166ed
 801663c:	080166ed 	.word	0x080166ed
 8016640:	080166ed 	.word	0x080166ed
 8016644:	080166ed 	.word	0x080166ed
 8016648:	080166ed 	.word	0x080166ed
 801664c:	080166ed 	.word	0x080166ed
 8016650:	080166ed 	.word	0x080166ed
 8016654:	080166ed 	.word	0x080166ed
 8016658:	080166ed 	.word	0x080166ed
 801665c:	080166ed 	.word	0x080166ed
 8016660:	080166ed 	.word	0x080166ed
 8016664:	080166ed 	.word	0x080166ed
 8016668:	080166ed 	.word	0x080166ed
 801666c:	080166ed 	.word	0x080166ed
 8016670:	080166ed 	.word	0x080166ed
 8016674:	080166ed 	.word	0x080166ed
 8016678:	08016689 	.word	0x08016689
 801667c:	080166b5 	.word	0x080166b5
 8016680:	080166ed 	.word	0x080166ed
 8016684:	080166ed 	.word	0x080166ed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	781b      	ldrb	r3, [r3, #0]
 801668c:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	785b      	ldrb	r3, [r3, #1]
 8016692:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	789b      	ldrb	r3, [r3, #2]
 8016698:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	78db      	ldrb	r3, [r3, #3]
 801669e:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 80166a0:	683b      	ldr	r3, [r7, #0]
 80166a2:	791b      	ldrb	r3, [r3, #4]
 80166a4:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	795b      	ldrb	r3, [r3, #5]
 80166aa:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 80166ac:	683b      	ldr	r3, [r7, #0]
 80166ae:	799b      	ldrb	r3, [r3, #6]
 80166b0:	73bb      	strb	r3, [r7, #14]
        	break;
 80166b2:	e01c      	b.n	80166ee <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80166b4:	7a3a      	ldrb	r2, [r7, #8]
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	3301      	adds	r3, #1
 80166be:	7a7a      	ldrb	r2, [r7, #9]
 80166c0:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	3302      	adds	r3, #2
 80166c6:	7aba      	ldrb	r2, [r7, #10]
 80166c8:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	3303      	adds	r3, #3
 80166ce:	7afa      	ldrb	r2, [r7, #11]
 80166d0:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	3304      	adds	r3, #4
 80166d6:	7b3a      	ldrb	r2, [r7, #12]
 80166d8:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	3305      	adds	r3, #5
 80166de:	7b7a      	ldrb	r2, [r7, #13]
 80166e0:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	3306      	adds	r3, #6
 80166e6:	7bba      	ldrb	r2, [r7, #14]
 80166e8:	701a      	strb	r2, [r3, #0]
        	break;
 80166ea:	e000      	b.n	80166ee <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80166ec:	bf00      	nop
  }

  return (USBD_OK);
 80166ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3714      	adds	r7, #20
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016706:	6879      	ldr	r1, [r7, #4]
 8016708:	4805      	ldr	r0, [pc, #20]	; (8016720 <CDC_Receive_FS+0x24>)
 801670a:	f7f9 f938 	bl	800f97e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801670e:	4804      	ldr	r0, [pc, #16]	; (8016720 <CDC_Receive_FS+0x24>)
 8016710:	f7f9 f949 	bl	800f9a6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016714:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016716:	4618      	mov	r0, r3
 8016718:	3708      	adds	r7, #8
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	200086ac 	.word	0x200086ac

08016724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b08a      	sub	sp, #40	; 0x28
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801672c:	f107 0314 	add.w	r3, r7, #20
 8016730:	2200      	movs	r2, #0
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	605a      	str	r2, [r3, #4]
 8016736:	609a      	str	r2, [r3, #8]
 8016738:	60da      	str	r2, [r3, #12]
 801673a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016744:	d13a      	bne.n	80167bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016746:	2300      	movs	r3, #0
 8016748:	613b      	str	r3, [r7, #16]
 801674a:	4b1e      	ldr	r3, [pc, #120]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 801674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801674e:	4a1d      	ldr	r2, [pc, #116]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 8016750:	f043 0301 	orr.w	r3, r3, #1
 8016754:	6313      	str	r3, [r2, #48]	; 0x30
 8016756:	4b1b      	ldr	r3, [pc, #108]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 8016758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801675a:	f003 0301 	and.w	r3, r3, #1
 801675e:	613b      	str	r3, [r7, #16]
 8016760:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8016762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016768:	2302      	movs	r3, #2
 801676a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801676c:	2300      	movs	r3, #0
 801676e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016770:	2303      	movs	r3, #3
 8016772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016774:	230a      	movs	r3, #10
 8016776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016778:	f107 0314 	add.w	r3, r7, #20
 801677c:	4619      	mov	r1, r3
 801677e:	4812      	ldr	r0, [pc, #72]	; (80167c8 <HAL_PCD_MspInit+0xa4>)
 8016780:	f7f0 fa2c 	bl	8006bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016784:	4b0f      	ldr	r3, [pc, #60]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 8016786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016788:	4a0e      	ldr	r2, [pc, #56]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 801678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801678e:	6353      	str	r3, [r2, #52]	; 0x34
 8016790:	2300      	movs	r3, #0
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	4b0b      	ldr	r3, [pc, #44]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 8016796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016798:	4a0a      	ldr	r2, [pc, #40]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 801679a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801679e:	6453      	str	r3, [r2, #68]	; 0x44
 80167a0:	4b08      	ldr	r3, [pc, #32]	; (80167c4 <HAL_PCD_MspInit+0xa0>)
 80167a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167a8:	60fb      	str	r3, [r7, #12]
 80167aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80167ac:	2200      	movs	r2, #0
 80167ae:	2100      	movs	r1, #0
 80167b0:	2043      	movs	r0, #67	; 0x43
 80167b2:	f7ef fe44 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167b6:	2043      	movs	r0, #67	; 0x43
 80167b8:	f7ef fe5d 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80167bc:	bf00      	nop
 80167be:	3728      	adds	r7, #40	; 0x28
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}
 80167c4:	40023800 	.word	0x40023800
 80167c8:	40020000 	.word	0x40020000

080167cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80167e0:	4619      	mov	r1, r3
 80167e2:	4610      	mov	r0, r2
 80167e4:	f7f9 f997 	bl	800fb16 <USBD_LL_SetupStage>
}
 80167e8:	bf00      	nop
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	460b      	mov	r3, r1
 80167fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016802:	78fa      	ldrb	r2, [r7, #3]
 8016804:	6879      	ldr	r1, [r7, #4]
 8016806:	4613      	mov	r3, r2
 8016808:	00db      	lsls	r3, r3, #3
 801680a:	1a9b      	subs	r3, r3, r2
 801680c:	009b      	lsls	r3, r3, #2
 801680e:	440b      	add	r3, r1
 8016810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	78fb      	ldrb	r3, [r7, #3]
 8016818:	4619      	mov	r1, r3
 801681a:	f7f9 f9c7 	bl	800fbac <USBD_LL_DataOutStage>
}
 801681e:	bf00      	nop
 8016820:	3708      	adds	r7, #8
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}

08016826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016826:	b580      	push	{r7, lr}
 8016828:	b082      	sub	sp, #8
 801682a:	af00      	add	r7, sp, #0
 801682c:	6078      	str	r0, [r7, #4]
 801682e:	460b      	mov	r3, r1
 8016830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016838:	78fa      	ldrb	r2, [r7, #3]
 801683a:	6879      	ldr	r1, [r7, #4]
 801683c:	4613      	mov	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	1a9b      	subs	r3, r3, r2
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	440b      	add	r3, r1
 8016846:	3348      	adds	r3, #72	; 0x48
 8016848:	681a      	ldr	r2, [r3, #0]
 801684a:	78fb      	ldrb	r3, [r7, #3]
 801684c:	4619      	mov	r1, r3
 801684e:	f7f9 fa1e 	bl	800fc8e <USBD_LL_DataInStage>
}
 8016852:	bf00      	nop
 8016854:	3708      	adds	r7, #8
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}

0801685a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801685a:	b580      	push	{r7, lr}
 801685c:	b082      	sub	sp, #8
 801685e:	af00      	add	r7, sp, #0
 8016860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016868:	4618      	mov	r0, r3
 801686a:	f7f9 fb2c 	bl	800fec6 <USBD_LL_SOF>
}
 801686e:	bf00      	nop
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}

08016876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016876:	b580      	push	{r7, lr}
 8016878:	b084      	sub	sp, #16
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801687e:	2301      	movs	r3, #1
 8016880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	68db      	ldr	r3, [r3, #12]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d102      	bne.n	8016890 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801688a:	2300      	movs	r3, #0
 801688c:	73fb      	strb	r3, [r7, #15]
 801688e:	e008      	b.n	80168a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	68db      	ldr	r3, [r3, #12]
 8016894:	2b02      	cmp	r3, #2
 8016896:	d102      	bne.n	801689e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016898:	2301      	movs	r3, #1
 801689a:	73fb      	strb	r3, [r7, #15]
 801689c:	e001      	b.n	80168a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801689e:	f7ff f891 	bl	80159c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168a8:	7bfa      	ldrb	r2, [r7, #15]
 80168aa:	4611      	mov	r1, r2
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7f9 fad4 	bl	800fe5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7f9 fa8d 	bl	800fdd8 <USBD_LL_Reset>
}
 80168be:	bf00      	nop
 80168c0:	3710      	adds	r7, #16
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
	...

080168c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7f9 facf 	bl	800fe7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	6812      	ldr	r2, [r2, #0]
 80168ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80168ee:	f043 0301 	orr.w	r3, r3, #1
 80168f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	6a1b      	ldr	r3, [r3, #32]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d005      	beq.n	8016908 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80168fc:	4b04      	ldr	r3, [pc, #16]	; (8016910 <HAL_PCD_SuspendCallback+0x48>)
 80168fe:	691b      	ldr	r3, [r3, #16]
 8016900:	4a03      	ldr	r2, [pc, #12]	; (8016910 <HAL_PCD_SuspendCallback+0x48>)
 8016902:	f043 0306 	orr.w	r3, r3, #6
 8016906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016908:	bf00      	nop
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	e000ed00 	.word	0xe000ed00

08016914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016922:	4618      	mov	r0, r3
 8016924:	f7f9 fabe 	bl	800fea4 <USBD_LL_Resume>
}
 8016928:	bf00      	nop
 801692a:	3708      	adds	r7, #8
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}

08016930 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	460b      	mov	r3, r1
 801693a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016942:	78fa      	ldrb	r2, [r7, #3]
 8016944:	4611      	mov	r1, r2
 8016946:	4618      	mov	r0, r3
 8016948:	f7f9 fae4 	bl	800ff14 <USBD_LL_IsoOUTIncomplete>
}
 801694c:	bf00      	nop
 801694e:	3708      	adds	r7, #8
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	460b      	mov	r3, r1
 801695e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016966:	78fa      	ldrb	r2, [r7, #3]
 8016968:	4611      	mov	r1, r2
 801696a:	4618      	mov	r0, r3
 801696c:	f7f9 fac5 	bl	800fefa <USBD_LL_IsoINIncomplete>
}
 8016970:	bf00      	nop
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}

08016978 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016986:	4618      	mov	r0, r3
 8016988:	f7f9 fad1 	bl	800ff2e <USBD_LL_DevConnected>
}
 801698c:	bf00      	nop
 801698e:	3708      	adds	r7, #8
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7f9 face 	bl	800ff44 <USBD_LL_DevDisconnected>
}
 80169a8:	bf00      	nop
 80169aa:	3708      	adds	r7, #8
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d13c      	bne.n	8016a3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80169c0:	4a20      	ldr	r2, [pc, #128]	; (8016a44 <USBD_LL_Init+0x94>)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	4a1e      	ldr	r2, [pc, #120]	; (8016a44 <USBD_LL_Init+0x94>)
 80169cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80169d0:	4b1c      	ldr	r3, [pc, #112]	; (8016a44 <USBD_LL_Init+0x94>)
 80169d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80169d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80169d8:	4b1a      	ldr	r3, [pc, #104]	; (8016a44 <USBD_LL_Init+0x94>)
 80169da:	2204      	movs	r2, #4
 80169dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80169de:	4b19      	ldr	r3, [pc, #100]	; (8016a44 <USBD_LL_Init+0x94>)
 80169e0:	2202      	movs	r2, #2
 80169e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80169e4:	4b17      	ldr	r3, [pc, #92]	; (8016a44 <USBD_LL_Init+0x94>)
 80169e6:	2200      	movs	r2, #0
 80169e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80169ea:	4b16      	ldr	r3, [pc, #88]	; (8016a44 <USBD_LL_Init+0x94>)
 80169ec:	2202      	movs	r2, #2
 80169ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80169f0:	4b14      	ldr	r3, [pc, #80]	; (8016a44 <USBD_LL_Init+0x94>)
 80169f2:	2200      	movs	r2, #0
 80169f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80169f6:	4b13      	ldr	r3, [pc, #76]	; (8016a44 <USBD_LL_Init+0x94>)
 80169f8:	2200      	movs	r2, #0
 80169fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80169fc:	4b11      	ldr	r3, [pc, #68]	; (8016a44 <USBD_LL_Init+0x94>)
 80169fe:	2200      	movs	r2, #0
 8016a00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016a02:	4b10      	ldr	r3, [pc, #64]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a04:	2200      	movs	r2, #0
 8016a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016a08:	4b0e      	ldr	r3, [pc, #56]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016a0e:	480d      	ldr	r0, [pc, #52]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a10:	f7f1 fa49 	bl	8007ea6 <HAL_PCD_Init>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d001      	beq.n	8016a1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016a1a:	f7fe ffd3 	bl	80159c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016a1e:	2180      	movs	r1, #128	; 0x80
 8016a20:	4808      	ldr	r0, [pc, #32]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a22:	f7f2 fbae 	bl	8009182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a26:	2240      	movs	r2, #64	; 0x40
 8016a28:	2100      	movs	r1, #0
 8016a2a:	4806      	ldr	r0, [pc, #24]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a2c:	f7f2 fb62 	bl	80090f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a30:	2280      	movs	r2, #128	; 0x80
 8016a32:	2101      	movs	r1, #1
 8016a34:	4803      	ldr	r0, [pc, #12]	; (8016a44 <USBD_LL_Init+0x94>)
 8016a36:	f7f2 fb5d 	bl	80090f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3708      	adds	r7, #8
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	20009948 	.word	0x20009948

08016a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b084      	sub	sp, #16
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a50:	2300      	movs	r3, #0
 8016a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a54:	2300      	movs	r3, #0
 8016a56:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7f1 fb3e 	bl	80080e0 <HAL_PCD_Start>
 8016a64:	4603      	mov	r3, r0
 8016a66:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016a68:	7bfb      	ldrb	r3, [r7, #15]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f000 f92e 	bl	8016ccc <USBD_Get_USB_Status>
 8016a70:	4603      	mov	r3, r0
 8016a72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3710      	adds	r7, #16
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}

08016a7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a7e:	b580      	push	{r7, lr}
 8016a80:	b084      	sub	sp, #16
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	6078      	str	r0, [r7, #4]
 8016a86:	4608      	mov	r0, r1
 8016a88:	4611      	mov	r1, r2
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	70fb      	strb	r3, [r7, #3]
 8016a90:	460b      	mov	r3, r1
 8016a92:	70bb      	strb	r3, [r7, #2]
 8016a94:	4613      	mov	r3, r2
 8016a96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016aa6:	78bb      	ldrb	r3, [r7, #2]
 8016aa8:	883a      	ldrh	r2, [r7, #0]
 8016aaa:	78f9      	ldrb	r1, [r7, #3]
 8016aac:	f7f1 ff13 	bl	80088d6 <HAL_PCD_EP_Open>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ab4:	7bfb      	ldrb	r3, [r7, #15]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f000 f908 	bl	8016ccc <USBD_Get_USB_Status>
 8016abc:	4603      	mov	r3, r0
 8016abe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3710      	adds	r7, #16
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}

08016aca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b084      	sub	sp, #16
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ada:	2300      	movs	r3, #0
 8016adc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	4611      	mov	r1, r2
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f1 ff5c 	bl	80089a6 <HAL_PCD_EP_Close>
 8016aee:	4603      	mov	r3, r0
 8016af0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016af2:	7bfb      	ldrb	r3, [r7, #15]
 8016af4:	4618      	mov	r0, r3
 8016af6:	f000 f8e9 	bl	8016ccc <USBD_Get_USB_Status>
 8016afa:	4603      	mov	r3, r0
 8016afc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	3710      	adds	r7, #16
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bd80      	pop	{r7, pc}

08016b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b084      	sub	sp, #16
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	460b      	mov	r3, r1
 8016b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b14:	2300      	movs	r3, #0
 8016b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b22:	78fa      	ldrb	r2, [r7, #3]
 8016b24:	4611      	mov	r1, r2
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f2 f834 	bl	8008b94 <HAL_PCD_EP_SetStall>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b30:	7bfb      	ldrb	r3, [r7, #15]
 8016b32:	4618      	mov	r0, r3
 8016b34:	f000 f8ca 	bl	8016ccc <USBD_Get_USB_Status>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3710      	adds	r7, #16
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}

08016b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b46:	b580      	push	{r7, lr}
 8016b48:	b084      	sub	sp, #16
 8016b4a:	af00      	add	r7, sp, #0
 8016b4c:	6078      	str	r0, [r7, #4]
 8016b4e:	460b      	mov	r3, r1
 8016b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b52:	2300      	movs	r3, #0
 8016b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b56:	2300      	movs	r3, #0
 8016b58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b60:	78fa      	ldrb	r2, [r7, #3]
 8016b62:	4611      	mov	r1, r2
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7f2 f879 	bl	8008c5c <HAL_PCD_EP_ClrStall>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016b6e:	7bfb      	ldrb	r3, [r7, #15]
 8016b70:	4618      	mov	r0, r3
 8016b72:	f000 f8ab 	bl	8016ccc <USBD_Get_USB_Status>
 8016b76:	4603      	mov	r3, r0
 8016b78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3710      	adds	r7, #16
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b84:	b480      	push	{r7}
 8016b86:	b085      	sub	sp, #20
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	460b      	mov	r3, r1
 8016b8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b96:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	da0b      	bge.n	8016bb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016ba0:	78fb      	ldrb	r3, [r7, #3]
 8016ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ba6:	68f9      	ldr	r1, [r7, #12]
 8016ba8:	4613      	mov	r3, r2
 8016baa:	00db      	lsls	r3, r3, #3
 8016bac:	1a9b      	subs	r3, r3, r2
 8016bae:	009b      	lsls	r3, r3, #2
 8016bb0:	440b      	add	r3, r1
 8016bb2:	333e      	adds	r3, #62	; 0x3e
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	e00b      	b.n	8016bd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016bb8:	78fb      	ldrb	r3, [r7, #3]
 8016bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bbe:	68f9      	ldr	r1, [r7, #12]
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	1a9b      	subs	r3, r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	440b      	add	r3, r1
 8016bca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016bce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3714      	adds	r7, #20
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr

08016bdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	460b      	mov	r3, r1
 8016be6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bec:	2300      	movs	r3, #0
 8016bee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016bf6:	78fa      	ldrb	r2, [r7, #3]
 8016bf8:	4611      	mov	r1, r2
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f1 fe46 	bl	800888c <HAL_PCD_SetAddress>
 8016c00:	4603      	mov	r3, r0
 8016c02:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c04:	7bfb      	ldrb	r3, [r7, #15]
 8016c06:	4618      	mov	r0, r3
 8016c08:	f000 f860 	bl	8016ccc <USBD_Get_USB_Status>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016c1a:	b580      	push	{r7, lr}
 8016c1c:	b086      	sub	sp, #24
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	60f8      	str	r0, [r7, #12]
 8016c22:	607a      	str	r2, [r7, #4]
 8016c24:	461a      	mov	r2, r3
 8016c26:	460b      	mov	r3, r1
 8016c28:	72fb      	strb	r3, [r7, #11]
 8016c2a:	4613      	mov	r3, r2
 8016c2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c32:	2300      	movs	r3, #0
 8016c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016c3c:	893b      	ldrh	r3, [r7, #8]
 8016c3e:	7af9      	ldrb	r1, [r7, #11]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	f7f1 ff5d 	bl	8008b00 <HAL_PCD_EP_Transmit>
 8016c46:	4603      	mov	r3, r0
 8016c48:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016c4a:	7dfb      	ldrb	r3, [r7, #23]
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f000 f83d 	bl	8016ccc <USBD_Get_USB_Status>
 8016c52:	4603      	mov	r3, r0
 8016c54:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3718      	adds	r7, #24
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b086      	sub	sp, #24
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	607a      	str	r2, [r7, #4]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	72fb      	strb	r3, [r7, #11]
 8016c70:	4613      	mov	r3, r2
 8016c72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c74:	2300      	movs	r3, #0
 8016c76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016c82:	893b      	ldrh	r3, [r7, #8]
 8016c84:	7af9      	ldrb	r1, [r7, #11]
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	f7f1 fed7 	bl	8008a3a <HAL_PCD_EP_Receive>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016c90:	7dfb      	ldrb	r3, [r7, #23]
 8016c92:	4618      	mov	r0, r3
 8016c94:	f000 f81a 	bl	8016ccc <USBD_Get_USB_Status>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016c9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3718      	adds	r7, #24
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b082      	sub	sp, #8
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	6078      	str	r0, [r7, #4]
 8016cae:	460b      	mov	r3, r1
 8016cb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016cb8:	78fa      	ldrb	r2, [r7, #3]
 8016cba:	4611      	mov	r1, r2
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f7f1 ff07 	bl	8008ad0 <HAL_PCD_EP_GetRxCount>
 8016cc2:	4603      	mov	r3, r0
}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b085      	sub	sp, #20
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016cda:	79fb      	ldrb	r3, [r7, #7]
 8016cdc:	2b03      	cmp	r3, #3
 8016cde:	d817      	bhi.n	8016d10 <USBD_Get_USB_Status+0x44>
 8016ce0:	a201      	add	r2, pc, #4	; (adr r2, 8016ce8 <USBD_Get_USB_Status+0x1c>)
 8016ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce6:	bf00      	nop
 8016ce8:	08016cf9 	.word	0x08016cf9
 8016cec:	08016cff 	.word	0x08016cff
 8016cf0:	08016d05 	.word	0x08016d05
 8016cf4:	08016d0b 	.word	0x08016d0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8016cfc:	e00b      	b.n	8016d16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016cfe:	2302      	movs	r3, #2
 8016d00:	73fb      	strb	r3, [r7, #15]
    break;
 8016d02:	e008      	b.n	8016d16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d04:	2301      	movs	r3, #1
 8016d06:	73fb      	strb	r3, [r7, #15]
    break;
 8016d08:	e005      	b.n	8016d16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d0a:	2302      	movs	r3, #2
 8016d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8016d0e:	e002      	b.n	8016d16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d10:	2302      	movs	r3, #2
 8016d12:	73fb      	strb	r3, [r7, #15]
    break;
 8016d14:	bf00      	nop
  }
  return usb_status;
 8016d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	3714      	adds	r7, #20
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr

08016d24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	6039      	str	r1, [r7, #0]
 8016d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	2212      	movs	r2, #18
 8016d34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016d36:	4b03      	ldr	r3, [pc, #12]	; (8016d44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	370c      	adds	r7, #12
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr
 8016d44:	20000164 	.word	0x20000164

08016d48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d48:	b480      	push	{r7}
 8016d4a:	b083      	sub	sp, #12
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	4603      	mov	r3, r0
 8016d50:	6039      	str	r1, [r7, #0]
 8016d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	2204      	movs	r2, #4
 8016d58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016d5a:	4b03      	ldr	r3, [pc, #12]	; (8016d68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr
 8016d68:	20000178 	.word	0x20000178

08016d6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	4603      	mov	r3, r0
 8016d74:	6039      	str	r1, [r7, #0]
 8016d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016d78:	79fb      	ldrb	r3, [r7, #7]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d105      	bne.n	8016d8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d7e:	683a      	ldr	r2, [r7, #0]
 8016d80:	4907      	ldr	r1, [pc, #28]	; (8016da0 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d82:	4808      	ldr	r0, [pc, #32]	; (8016da4 <USBD_FS_ProductStrDescriptor+0x38>)
 8016d84:	f7f9 fdb6 	bl	80108f4 <USBD_GetString>
 8016d88:	e004      	b.n	8016d94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d8a:	683a      	ldr	r2, [r7, #0]
 8016d8c:	4904      	ldr	r1, [pc, #16]	; (8016da0 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d8e:	4805      	ldr	r0, [pc, #20]	; (8016da4 <USBD_FS_ProductStrDescriptor+0x38>)
 8016d90:	f7f9 fdb0 	bl	80108f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d94:	4b02      	ldr	r3, [pc, #8]	; (8016da0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3708      	adds	r7, #8
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop
 8016da0:	20009d50 	.word	0x20009d50
 8016da4:	0801e27c 	.word	0x0801e27c

08016da8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	4603      	mov	r3, r0
 8016db0:	6039      	str	r1, [r7, #0]
 8016db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016db4:	683a      	ldr	r2, [r7, #0]
 8016db6:	4904      	ldr	r1, [pc, #16]	; (8016dc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016db8:	4804      	ldr	r0, [pc, #16]	; (8016dcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016dba:	f7f9 fd9b 	bl	80108f4 <USBD_GetString>
  return USBD_StrDesc;
 8016dbe:	4b02      	ldr	r3, [pc, #8]	; (8016dc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	20009d50 	.word	0x20009d50
 8016dcc:	0801e288 	.word	0x0801e288

08016dd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	6039      	str	r1, [r7, #0]
 8016dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	221a      	movs	r2, #26
 8016de0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016de2:	f000 f843 	bl	8016e6c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016de6:	4b02      	ldr	r3, [pc, #8]	; (8016df0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}
 8016df0:	2000017c 	.word	0x2000017c

08016df4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	6039      	str	r1, [r7, #0]
 8016dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016e00:	79fb      	ldrb	r3, [r7, #7]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d105      	bne.n	8016e12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016e06:	683a      	ldr	r2, [r7, #0]
 8016e08:	4907      	ldr	r1, [pc, #28]	; (8016e28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016e0a:	4808      	ldr	r0, [pc, #32]	; (8016e2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016e0c:	f7f9 fd72 	bl	80108f4 <USBD_GetString>
 8016e10:	e004      	b.n	8016e1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016e12:	683a      	ldr	r2, [r7, #0]
 8016e14:	4904      	ldr	r1, [pc, #16]	; (8016e28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016e16:	4805      	ldr	r0, [pc, #20]	; (8016e2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8016e18:	f7f9 fd6c 	bl	80108f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e1c:	4b02      	ldr	r3, [pc, #8]	; (8016e28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3708      	adds	r7, #8
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	20009d50 	.word	0x20009d50
 8016e2c:	0801e29c 	.word	0x0801e29c

08016e30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	6039      	str	r1, [r7, #0]
 8016e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016e3c:	79fb      	ldrb	r3, [r7, #7]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d105      	bne.n	8016e4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016e42:	683a      	ldr	r2, [r7, #0]
 8016e44:	4907      	ldr	r1, [pc, #28]	; (8016e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016e46:	4808      	ldr	r0, [pc, #32]	; (8016e68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016e48:	f7f9 fd54 	bl	80108f4 <USBD_GetString>
 8016e4c:	e004      	b.n	8016e58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016e4e:	683a      	ldr	r2, [r7, #0]
 8016e50:	4904      	ldr	r1, [pc, #16]	; (8016e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016e52:	4805      	ldr	r0, [pc, #20]	; (8016e68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016e54:	f7f9 fd4e 	bl	80108f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e58:	4b02      	ldr	r3, [pc, #8]	; (8016e64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	20009d50 	.word	0x20009d50
 8016e68:	0801e2a8 	.word	0x0801e2a8

08016e6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016e72:	4b0f      	ldr	r3, [pc, #60]	; (8016eb0 <Get_SerialNum+0x44>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016e78:	4b0e      	ldr	r3, [pc, #56]	; (8016eb4 <Get_SerialNum+0x48>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016e7e:	4b0e      	ldr	r3, [pc, #56]	; (8016eb8 <Get_SerialNum+0x4c>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016e84:	68fa      	ldr	r2, [r7, #12]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	4413      	add	r3, r2
 8016e8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d009      	beq.n	8016ea6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016e92:	2208      	movs	r2, #8
 8016e94:	4909      	ldr	r1, [pc, #36]	; (8016ebc <Get_SerialNum+0x50>)
 8016e96:	68f8      	ldr	r0, [r7, #12]
 8016e98:	f000 f814 	bl	8016ec4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e9c:	2204      	movs	r2, #4
 8016e9e:	4908      	ldr	r1, [pc, #32]	; (8016ec0 <Get_SerialNum+0x54>)
 8016ea0:	68b8      	ldr	r0, [r7, #8]
 8016ea2:	f000 f80f 	bl	8016ec4 <IntToUnicode>
  }
}
 8016ea6:	bf00      	nop
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	1fff7a10 	.word	0x1fff7a10
 8016eb4:	1fff7a14 	.word	0x1fff7a14
 8016eb8:	1fff7a18 	.word	0x1fff7a18
 8016ebc:	2000017e 	.word	0x2000017e
 8016ec0:	2000018e 	.word	0x2000018e

08016ec4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b087      	sub	sp, #28
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	4613      	mov	r3, r2
 8016ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	75fb      	strb	r3, [r7, #23]
 8016eda:	e027      	b.n	8016f2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	0f1b      	lsrs	r3, r3, #28
 8016ee0:	2b09      	cmp	r3, #9
 8016ee2:	d80b      	bhi.n	8016efc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	0f1b      	lsrs	r3, r3, #28
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	7dfb      	ldrb	r3, [r7, #23]
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	4619      	mov	r1, r3
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	440b      	add	r3, r1
 8016ef4:	3230      	adds	r2, #48	; 0x30
 8016ef6:	b2d2      	uxtb	r2, r2
 8016ef8:	701a      	strb	r2, [r3, #0]
 8016efa:	e00a      	b.n	8016f12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	0f1b      	lsrs	r3, r3, #28
 8016f00:	b2da      	uxtb	r2, r3
 8016f02:	7dfb      	ldrb	r3, [r7, #23]
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	4619      	mov	r1, r3
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	440b      	add	r3, r1
 8016f0c:	3237      	adds	r2, #55	; 0x37
 8016f0e:	b2d2      	uxtb	r2, r2
 8016f10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	011b      	lsls	r3, r3, #4
 8016f16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016f18:	7dfb      	ldrb	r3, [r7, #23]
 8016f1a:	005b      	lsls	r3, r3, #1
 8016f1c:	3301      	adds	r3, #1
 8016f1e:	68ba      	ldr	r2, [r7, #8]
 8016f20:	4413      	add	r3, r2
 8016f22:	2200      	movs	r2, #0
 8016f24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016f26:	7dfb      	ldrb	r3, [r7, #23]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	75fb      	strb	r3, [r7, #23]
 8016f2c:	7dfa      	ldrb	r2, [r7, #23]
 8016f2e:	79fb      	ldrb	r3, [r7, #7]
 8016f30:	429a      	cmp	r2, r3
 8016f32:	d3d3      	bcc.n	8016edc <IntToUnicode+0x18>
  }
}
 8016f34:	bf00      	nop
 8016f36:	371c      	adds	r7, #28
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr

08016f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8016f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016f78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016f46:	e003      	b.n	8016f50 <LoopCopyDataInit>

08016f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016f48:	4b0c      	ldr	r3, [pc, #48]	; (8016f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016f4e:	3104      	adds	r1, #4

08016f50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016f50:	480b      	ldr	r0, [pc, #44]	; (8016f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016f52:	4b0c      	ldr	r3, [pc, #48]	; (8016f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016f58:	d3f6      	bcc.n	8016f48 <CopyDataInit>
  ldr  r2, =_sbss
 8016f5a:	4a0b      	ldr	r2, [pc, #44]	; (8016f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016f5c:	e002      	b.n	8016f64 <LoopFillZerobss>

08016f5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016f60:	f842 3b04 	str.w	r3, [r2], #4

08016f64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016f64:	4b09      	ldr	r3, [pc, #36]	; (8016f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016f68:	d3f9      	bcc.n	8016f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016f6a:	f7ff faaf 	bl	80164cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016f6e:	f000 f821 	bl	8016fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016f72:	f7fe f8d5 	bl	8015120 <main>
  bx  lr    
 8016f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8016f78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8016f7c:	0801e8b0 	.word	0x0801e8b0
  ldr  r0, =_sdata
 8016f80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016f84:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 8016f88:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8016f8c:	20009f54 	.word	0x20009f54

08016f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016f90:	e7fe      	b.n	8016f90 <ADC_IRQHandler>

08016f92 <atof>:
 8016f92:	2100      	movs	r1, #0
 8016f94:	f001 bde0 	b.w	8018b58 <strtod>

08016f98 <atoi>:
 8016f98:	220a      	movs	r2, #10
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	f001 be7e 	b.w	8018c9c <strtol>

08016fa0 <atol>:
 8016fa0:	220a      	movs	r2, #10
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	f001 be7a 	b.w	8018c9c <strtol>

08016fa8 <__errno>:
 8016fa8:	4b01      	ldr	r3, [pc, #4]	; (8016fb0 <__errno+0x8>)
 8016faa:	6818      	ldr	r0, [r3, #0]
 8016fac:	4770      	bx	lr
 8016fae:	bf00      	nop
 8016fb0:	20000198 	.word	0x20000198

08016fb4 <__libc_init_array>:
 8016fb4:	b570      	push	{r4, r5, r6, lr}
 8016fb6:	4e0d      	ldr	r6, [pc, #52]	; (8016fec <__libc_init_array+0x38>)
 8016fb8:	4c0d      	ldr	r4, [pc, #52]	; (8016ff0 <__libc_init_array+0x3c>)
 8016fba:	1ba4      	subs	r4, r4, r6
 8016fbc:	10a4      	asrs	r4, r4, #2
 8016fbe:	2500      	movs	r5, #0
 8016fc0:	42a5      	cmp	r5, r4
 8016fc2:	d109      	bne.n	8016fd8 <__libc_init_array+0x24>
 8016fc4:	4e0b      	ldr	r6, [pc, #44]	; (8016ff4 <__libc_init_array+0x40>)
 8016fc6:	4c0c      	ldr	r4, [pc, #48]	; (8016ff8 <__libc_init_array+0x44>)
 8016fc8:	f006 fc9c 	bl	801d904 <_init>
 8016fcc:	1ba4      	subs	r4, r4, r6
 8016fce:	10a4      	asrs	r4, r4, #2
 8016fd0:	2500      	movs	r5, #0
 8016fd2:	42a5      	cmp	r5, r4
 8016fd4:	d105      	bne.n	8016fe2 <__libc_init_array+0x2e>
 8016fd6:	bd70      	pop	{r4, r5, r6, pc}
 8016fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016fdc:	4798      	blx	r3
 8016fde:	3501      	adds	r5, #1
 8016fe0:	e7ee      	b.n	8016fc0 <__libc_init_array+0xc>
 8016fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016fe6:	4798      	blx	r3
 8016fe8:	3501      	adds	r5, #1
 8016fea:	e7f2      	b.n	8016fd2 <__libc_init_array+0x1e>
 8016fec:	0801e8a8 	.word	0x0801e8a8
 8016ff0:	0801e8a8 	.word	0x0801e8a8
 8016ff4:	0801e8a8 	.word	0x0801e8a8
 8016ff8:	0801e8ac 	.word	0x0801e8ac

08016ffc <malloc>:
 8016ffc:	4b02      	ldr	r3, [pc, #8]	; (8017008 <malloc+0xc>)
 8016ffe:	4601      	mov	r1, r0
 8017000:	6818      	ldr	r0, [r3, #0]
 8017002:	f000 b86d 	b.w	80170e0 <_malloc_r>
 8017006:	bf00      	nop
 8017008:	20000198 	.word	0x20000198

0801700c <free>:
 801700c:	4b02      	ldr	r3, [pc, #8]	; (8017018 <free+0xc>)
 801700e:	4601      	mov	r1, r0
 8017010:	6818      	ldr	r0, [r3, #0]
 8017012:	f000 b817 	b.w	8017044 <_free_r>
 8017016:	bf00      	nop
 8017018:	20000198 	.word	0x20000198

0801701c <memcpy>:
 801701c:	b510      	push	{r4, lr}
 801701e:	1e43      	subs	r3, r0, #1
 8017020:	440a      	add	r2, r1
 8017022:	4291      	cmp	r1, r2
 8017024:	d100      	bne.n	8017028 <memcpy+0xc>
 8017026:	bd10      	pop	{r4, pc}
 8017028:	f811 4b01 	ldrb.w	r4, [r1], #1
 801702c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017030:	e7f7      	b.n	8017022 <memcpy+0x6>

08017032 <memset>:
 8017032:	4402      	add	r2, r0
 8017034:	4603      	mov	r3, r0
 8017036:	4293      	cmp	r3, r2
 8017038:	d100      	bne.n	801703c <memset+0xa>
 801703a:	4770      	bx	lr
 801703c:	f803 1b01 	strb.w	r1, [r3], #1
 8017040:	e7f9      	b.n	8017036 <memset+0x4>
	...

08017044 <_free_r>:
 8017044:	b538      	push	{r3, r4, r5, lr}
 8017046:	4605      	mov	r5, r0
 8017048:	2900      	cmp	r1, #0
 801704a:	d045      	beq.n	80170d8 <_free_r+0x94>
 801704c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017050:	1f0c      	subs	r4, r1, #4
 8017052:	2b00      	cmp	r3, #0
 8017054:	bfb8      	it	lt
 8017056:	18e4      	addlt	r4, r4, r3
 8017058:	f002 ffc6 	bl	8019fe8 <__malloc_lock>
 801705c:	4a1f      	ldr	r2, [pc, #124]	; (80170dc <_free_r+0x98>)
 801705e:	6813      	ldr	r3, [r2, #0]
 8017060:	4610      	mov	r0, r2
 8017062:	b933      	cbnz	r3, 8017072 <_free_r+0x2e>
 8017064:	6063      	str	r3, [r4, #4]
 8017066:	6014      	str	r4, [r2, #0]
 8017068:	4628      	mov	r0, r5
 801706a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801706e:	f002 bfbc 	b.w	8019fea <__malloc_unlock>
 8017072:	42a3      	cmp	r3, r4
 8017074:	d90c      	bls.n	8017090 <_free_r+0x4c>
 8017076:	6821      	ldr	r1, [r4, #0]
 8017078:	1862      	adds	r2, r4, r1
 801707a:	4293      	cmp	r3, r2
 801707c:	bf04      	itt	eq
 801707e:	681a      	ldreq	r2, [r3, #0]
 8017080:	685b      	ldreq	r3, [r3, #4]
 8017082:	6063      	str	r3, [r4, #4]
 8017084:	bf04      	itt	eq
 8017086:	1852      	addeq	r2, r2, r1
 8017088:	6022      	streq	r2, [r4, #0]
 801708a:	6004      	str	r4, [r0, #0]
 801708c:	e7ec      	b.n	8017068 <_free_r+0x24>
 801708e:	4613      	mov	r3, r2
 8017090:	685a      	ldr	r2, [r3, #4]
 8017092:	b10a      	cbz	r2, 8017098 <_free_r+0x54>
 8017094:	42a2      	cmp	r2, r4
 8017096:	d9fa      	bls.n	801708e <_free_r+0x4a>
 8017098:	6819      	ldr	r1, [r3, #0]
 801709a:	1858      	adds	r0, r3, r1
 801709c:	42a0      	cmp	r0, r4
 801709e:	d10b      	bne.n	80170b8 <_free_r+0x74>
 80170a0:	6820      	ldr	r0, [r4, #0]
 80170a2:	4401      	add	r1, r0
 80170a4:	1858      	adds	r0, r3, r1
 80170a6:	4282      	cmp	r2, r0
 80170a8:	6019      	str	r1, [r3, #0]
 80170aa:	d1dd      	bne.n	8017068 <_free_r+0x24>
 80170ac:	6810      	ldr	r0, [r2, #0]
 80170ae:	6852      	ldr	r2, [r2, #4]
 80170b0:	605a      	str	r2, [r3, #4]
 80170b2:	4401      	add	r1, r0
 80170b4:	6019      	str	r1, [r3, #0]
 80170b6:	e7d7      	b.n	8017068 <_free_r+0x24>
 80170b8:	d902      	bls.n	80170c0 <_free_r+0x7c>
 80170ba:	230c      	movs	r3, #12
 80170bc:	602b      	str	r3, [r5, #0]
 80170be:	e7d3      	b.n	8017068 <_free_r+0x24>
 80170c0:	6820      	ldr	r0, [r4, #0]
 80170c2:	1821      	adds	r1, r4, r0
 80170c4:	428a      	cmp	r2, r1
 80170c6:	bf04      	itt	eq
 80170c8:	6811      	ldreq	r1, [r2, #0]
 80170ca:	6852      	ldreq	r2, [r2, #4]
 80170cc:	6062      	str	r2, [r4, #4]
 80170ce:	bf04      	itt	eq
 80170d0:	1809      	addeq	r1, r1, r0
 80170d2:	6021      	streq	r1, [r4, #0]
 80170d4:	605c      	str	r4, [r3, #4]
 80170d6:	e7c7      	b.n	8017068 <_free_r+0x24>
 80170d8:	bd38      	pop	{r3, r4, r5, pc}
 80170da:	bf00      	nop
 80170dc:	200007ec 	.word	0x200007ec

080170e0 <_malloc_r>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	1ccd      	adds	r5, r1, #3
 80170e4:	f025 0503 	bic.w	r5, r5, #3
 80170e8:	3508      	adds	r5, #8
 80170ea:	2d0c      	cmp	r5, #12
 80170ec:	bf38      	it	cc
 80170ee:	250c      	movcc	r5, #12
 80170f0:	2d00      	cmp	r5, #0
 80170f2:	4606      	mov	r6, r0
 80170f4:	db01      	blt.n	80170fa <_malloc_r+0x1a>
 80170f6:	42a9      	cmp	r1, r5
 80170f8:	d903      	bls.n	8017102 <_malloc_r+0x22>
 80170fa:	230c      	movs	r3, #12
 80170fc:	6033      	str	r3, [r6, #0]
 80170fe:	2000      	movs	r0, #0
 8017100:	bd70      	pop	{r4, r5, r6, pc}
 8017102:	f002 ff71 	bl	8019fe8 <__malloc_lock>
 8017106:	4a21      	ldr	r2, [pc, #132]	; (801718c <_malloc_r+0xac>)
 8017108:	6814      	ldr	r4, [r2, #0]
 801710a:	4621      	mov	r1, r4
 801710c:	b991      	cbnz	r1, 8017134 <_malloc_r+0x54>
 801710e:	4c20      	ldr	r4, [pc, #128]	; (8017190 <_malloc_r+0xb0>)
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	b91b      	cbnz	r3, 801711c <_malloc_r+0x3c>
 8017114:	4630      	mov	r0, r6
 8017116:	f000 fe7b 	bl	8017e10 <_sbrk_r>
 801711a:	6020      	str	r0, [r4, #0]
 801711c:	4629      	mov	r1, r5
 801711e:	4630      	mov	r0, r6
 8017120:	f000 fe76 	bl	8017e10 <_sbrk_r>
 8017124:	1c43      	adds	r3, r0, #1
 8017126:	d124      	bne.n	8017172 <_malloc_r+0x92>
 8017128:	230c      	movs	r3, #12
 801712a:	6033      	str	r3, [r6, #0]
 801712c:	4630      	mov	r0, r6
 801712e:	f002 ff5c 	bl	8019fea <__malloc_unlock>
 8017132:	e7e4      	b.n	80170fe <_malloc_r+0x1e>
 8017134:	680b      	ldr	r3, [r1, #0]
 8017136:	1b5b      	subs	r3, r3, r5
 8017138:	d418      	bmi.n	801716c <_malloc_r+0x8c>
 801713a:	2b0b      	cmp	r3, #11
 801713c:	d90f      	bls.n	801715e <_malloc_r+0x7e>
 801713e:	600b      	str	r3, [r1, #0]
 8017140:	50cd      	str	r5, [r1, r3]
 8017142:	18cc      	adds	r4, r1, r3
 8017144:	4630      	mov	r0, r6
 8017146:	f002 ff50 	bl	8019fea <__malloc_unlock>
 801714a:	f104 000b 	add.w	r0, r4, #11
 801714e:	1d23      	adds	r3, r4, #4
 8017150:	f020 0007 	bic.w	r0, r0, #7
 8017154:	1ac3      	subs	r3, r0, r3
 8017156:	d0d3      	beq.n	8017100 <_malloc_r+0x20>
 8017158:	425a      	negs	r2, r3
 801715a:	50e2      	str	r2, [r4, r3]
 801715c:	e7d0      	b.n	8017100 <_malloc_r+0x20>
 801715e:	428c      	cmp	r4, r1
 8017160:	684b      	ldr	r3, [r1, #4]
 8017162:	bf16      	itet	ne
 8017164:	6063      	strne	r3, [r4, #4]
 8017166:	6013      	streq	r3, [r2, #0]
 8017168:	460c      	movne	r4, r1
 801716a:	e7eb      	b.n	8017144 <_malloc_r+0x64>
 801716c:	460c      	mov	r4, r1
 801716e:	6849      	ldr	r1, [r1, #4]
 8017170:	e7cc      	b.n	801710c <_malloc_r+0x2c>
 8017172:	1cc4      	adds	r4, r0, #3
 8017174:	f024 0403 	bic.w	r4, r4, #3
 8017178:	42a0      	cmp	r0, r4
 801717a:	d005      	beq.n	8017188 <_malloc_r+0xa8>
 801717c:	1a21      	subs	r1, r4, r0
 801717e:	4630      	mov	r0, r6
 8017180:	f000 fe46 	bl	8017e10 <_sbrk_r>
 8017184:	3001      	adds	r0, #1
 8017186:	d0cf      	beq.n	8017128 <_malloc_r+0x48>
 8017188:	6025      	str	r5, [r4, #0]
 801718a:	e7db      	b.n	8017144 <_malloc_r+0x64>
 801718c:	200007ec 	.word	0x200007ec
 8017190:	200007f0 	.word	0x200007f0

08017194 <__cvt>:
 8017194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017198:	ec55 4b10 	vmov	r4, r5, d0
 801719c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801719e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80171a2:	2d00      	cmp	r5, #0
 80171a4:	460e      	mov	r6, r1
 80171a6:	4691      	mov	r9, r2
 80171a8:	4619      	mov	r1, r3
 80171aa:	bfb8      	it	lt
 80171ac:	4622      	movlt	r2, r4
 80171ae:	462b      	mov	r3, r5
 80171b0:	f027 0720 	bic.w	r7, r7, #32
 80171b4:	bfbb      	ittet	lt
 80171b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80171ba:	461d      	movlt	r5, r3
 80171bc:	2300      	movge	r3, #0
 80171be:	232d      	movlt	r3, #45	; 0x2d
 80171c0:	bfb8      	it	lt
 80171c2:	4614      	movlt	r4, r2
 80171c4:	2f46      	cmp	r7, #70	; 0x46
 80171c6:	700b      	strb	r3, [r1, #0]
 80171c8:	d004      	beq.n	80171d4 <__cvt+0x40>
 80171ca:	2f45      	cmp	r7, #69	; 0x45
 80171cc:	d100      	bne.n	80171d0 <__cvt+0x3c>
 80171ce:	3601      	adds	r6, #1
 80171d0:	2102      	movs	r1, #2
 80171d2:	e000      	b.n	80171d6 <__cvt+0x42>
 80171d4:	2103      	movs	r1, #3
 80171d6:	ab03      	add	r3, sp, #12
 80171d8:	9301      	str	r3, [sp, #4]
 80171da:	ab02      	add	r3, sp, #8
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	4632      	mov	r2, r6
 80171e0:	4653      	mov	r3, sl
 80171e2:	ec45 4b10 	vmov	d0, r4, r5
 80171e6:	f001 fdfb 	bl	8018de0 <_dtoa_r>
 80171ea:	2f47      	cmp	r7, #71	; 0x47
 80171ec:	4680      	mov	r8, r0
 80171ee:	d102      	bne.n	80171f6 <__cvt+0x62>
 80171f0:	f019 0f01 	tst.w	r9, #1
 80171f4:	d026      	beq.n	8017244 <__cvt+0xb0>
 80171f6:	2f46      	cmp	r7, #70	; 0x46
 80171f8:	eb08 0906 	add.w	r9, r8, r6
 80171fc:	d111      	bne.n	8017222 <__cvt+0x8e>
 80171fe:	f898 3000 	ldrb.w	r3, [r8]
 8017202:	2b30      	cmp	r3, #48	; 0x30
 8017204:	d10a      	bne.n	801721c <__cvt+0x88>
 8017206:	2200      	movs	r2, #0
 8017208:	2300      	movs	r3, #0
 801720a:	4620      	mov	r0, r4
 801720c:	4629      	mov	r1, r5
 801720e:	f7e9 fc6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8017212:	b918      	cbnz	r0, 801721c <__cvt+0x88>
 8017214:	f1c6 0601 	rsb	r6, r6, #1
 8017218:	f8ca 6000 	str.w	r6, [sl]
 801721c:	f8da 3000 	ldr.w	r3, [sl]
 8017220:	4499      	add	r9, r3
 8017222:	2200      	movs	r2, #0
 8017224:	2300      	movs	r3, #0
 8017226:	4620      	mov	r0, r4
 8017228:	4629      	mov	r1, r5
 801722a:	f7e9 fc5d 	bl	8000ae8 <__aeabi_dcmpeq>
 801722e:	b938      	cbnz	r0, 8017240 <__cvt+0xac>
 8017230:	2230      	movs	r2, #48	; 0x30
 8017232:	9b03      	ldr	r3, [sp, #12]
 8017234:	454b      	cmp	r3, r9
 8017236:	d205      	bcs.n	8017244 <__cvt+0xb0>
 8017238:	1c59      	adds	r1, r3, #1
 801723a:	9103      	str	r1, [sp, #12]
 801723c:	701a      	strb	r2, [r3, #0]
 801723e:	e7f8      	b.n	8017232 <__cvt+0x9e>
 8017240:	f8cd 900c 	str.w	r9, [sp, #12]
 8017244:	9b03      	ldr	r3, [sp, #12]
 8017246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017248:	eba3 0308 	sub.w	r3, r3, r8
 801724c:	4640      	mov	r0, r8
 801724e:	6013      	str	r3, [r2, #0]
 8017250:	b004      	add	sp, #16
 8017252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017256 <__exponent>:
 8017256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017258:	2900      	cmp	r1, #0
 801725a:	4604      	mov	r4, r0
 801725c:	bfba      	itte	lt
 801725e:	4249      	neglt	r1, r1
 8017260:	232d      	movlt	r3, #45	; 0x2d
 8017262:	232b      	movge	r3, #43	; 0x2b
 8017264:	2909      	cmp	r1, #9
 8017266:	f804 2b02 	strb.w	r2, [r4], #2
 801726a:	7043      	strb	r3, [r0, #1]
 801726c:	dd20      	ble.n	80172b0 <__exponent+0x5a>
 801726e:	f10d 0307 	add.w	r3, sp, #7
 8017272:	461f      	mov	r7, r3
 8017274:	260a      	movs	r6, #10
 8017276:	fb91 f5f6 	sdiv	r5, r1, r6
 801727a:	fb06 1115 	mls	r1, r6, r5, r1
 801727e:	3130      	adds	r1, #48	; 0x30
 8017280:	2d09      	cmp	r5, #9
 8017282:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017286:	f103 32ff 	add.w	r2, r3, #4294967295
 801728a:	4629      	mov	r1, r5
 801728c:	dc09      	bgt.n	80172a2 <__exponent+0x4c>
 801728e:	3130      	adds	r1, #48	; 0x30
 8017290:	3b02      	subs	r3, #2
 8017292:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017296:	42bb      	cmp	r3, r7
 8017298:	4622      	mov	r2, r4
 801729a:	d304      	bcc.n	80172a6 <__exponent+0x50>
 801729c:	1a10      	subs	r0, r2, r0
 801729e:	b003      	add	sp, #12
 80172a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a2:	4613      	mov	r3, r2
 80172a4:	e7e7      	b.n	8017276 <__exponent+0x20>
 80172a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172aa:	f804 2b01 	strb.w	r2, [r4], #1
 80172ae:	e7f2      	b.n	8017296 <__exponent+0x40>
 80172b0:	2330      	movs	r3, #48	; 0x30
 80172b2:	4419      	add	r1, r3
 80172b4:	7083      	strb	r3, [r0, #2]
 80172b6:	1d02      	adds	r2, r0, #4
 80172b8:	70c1      	strb	r1, [r0, #3]
 80172ba:	e7ef      	b.n	801729c <__exponent+0x46>

080172bc <_printf_float>:
 80172bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	b08d      	sub	sp, #52	; 0x34
 80172c2:	460c      	mov	r4, r1
 80172c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80172c8:	4616      	mov	r6, r2
 80172ca:	461f      	mov	r7, r3
 80172cc:	4605      	mov	r5, r0
 80172ce:	f002 fe6b 	bl	8019fa8 <_localeconv_r>
 80172d2:	6803      	ldr	r3, [r0, #0]
 80172d4:	9304      	str	r3, [sp, #16]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7e8 ff84 	bl	80001e4 <strlen>
 80172dc:	2300      	movs	r3, #0
 80172de:	930a      	str	r3, [sp, #40]	; 0x28
 80172e0:	f8d8 3000 	ldr.w	r3, [r8]
 80172e4:	9005      	str	r0, [sp, #20]
 80172e6:	3307      	adds	r3, #7
 80172e8:	f023 0307 	bic.w	r3, r3, #7
 80172ec:	f103 0208 	add.w	r2, r3, #8
 80172f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80172f4:	f8d4 b000 	ldr.w	fp, [r4]
 80172f8:	f8c8 2000 	str.w	r2, [r8]
 80172fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017300:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017304:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017308:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801730c:	9307      	str	r3, [sp, #28]
 801730e:	f8cd 8018 	str.w	r8, [sp, #24]
 8017312:	f04f 32ff 	mov.w	r2, #4294967295
 8017316:	4ba7      	ldr	r3, [pc, #668]	; (80175b4 <_printf_float+0x2f8>)
 8017318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801731c:	f7e9 fc16 	bl	8000b4c <__aeabi_dcmpun>
 8017320:	bb70      	cbnz	r0, 8017380 <_printf_float+0xc4>
 8017322:	f04f 32ff 	mov.w	r2, #4294967295
 8017326:	4ba3      	ldr	r3, [pc, #652]	; (80175b4 <_printf_float+0x2f8>)
 8017328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801732c:	f7e9 fbf0 	bl	8000b10 <__aeabi_dcmple>
 8017330:	bb30      	cbnz	r0, 8017380 <_printf_float+0xc4>
 8017332:	2200      	movs	r2, #0
 8017334:	2300      	movs	r3, #0
 8017336:	4640      	mov	r0, r8
 8017338:	4649      	mov	r1, r9
 801733a:	f7e9 fbdf 	bl	8000afc <__aeabi_dcmplt>
 801733e:	b110      	cbz	r0, 8017346 <_printf_float+0x8a>
 8017340:	232d      	movs	r3, #45	; 0x2d
 8017342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017346:	4a9c      	ldr	r2, [pc, #624]	; (80175b8 <_printf_float+0x2fc>)
 8017348:	4b9c      	ldr	r3, [pc, #624]	; (80175bc <_printf_float+0x300>)
 801734a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801734e:	bf8c      	ite	hi
 8017350:	4690      	movhi	r8, r2
 8017352:	4698      	movls	r8, r3
 8017354:	2303      	movs	r3, #3
 8017356:	f02b 0204 	bic.w	r2, fp, #4
 801735a:	6123      	str	r3, [r4, #16]
 801735c:	6022      	str	r2, [r4, #0]
 801735e:	f04f 0900 	mov.w	r9, #0
 8017362:	9700      	str	r7, [sp, #0]
 8017364:	4633      	mov	r3, r6
 8017366:	aa0b      	add	r2, sp, #44	; 0x2c
 8017368:	4621      	mov	r1, r4
 801736a:	4628      	mov	r0, r5
 801736c:	f000 f9e6 	bl	801773c <_printf_common>
 8017370:	3001      	adds	r0, #1
 8017372:	f040 808d 	bne.w	8017490 <_printf_float+0x1d4>
 8017376:	f04f 30ff 	mov.w	r0, #4294967295
 801737a:	b00d      	add	sp, #52	; 0x34
 801737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017380:	4642      	mov	r2, r8
 8017382:	464b      	mov	r3, r9
 8017384:	4640      	mov	r0, r8
 8017386:	4649      	mov	r1, r9
 8017388:	f7e9 fbe0 	bl	8000b4c <__aeabi_dcmpun>
 801738c:	b110      	cbz	r0, 8017394 <_printf_float+0xd8>
 801738e:	4a8c      	ldr	r2, [pc, #560]	; (80175c0 <_printf_float+0x304>)
 8017390:	4b8c      	ldr	r3, [pc, #560]	; (80175c4 <_printf_float+0x308>)
 8017392:	e7da      	b.n	801734a <_printf_float+0x8e>
 8017394:	6861      	ldr	r1, [r4, #4]
 8017396:	1c4b      	adds	r3, r1, #1
 8017398:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801739c:	a80a      	add	r0, sp, #40	; 0x28
 801739e:	d13e      	bne.n	801741e <_printf_float+0x162>
 80173a0:	2306      	movs	r3, #6
 80173a2:	6063      	str	r3, [r4, #4]
 80173a4:	2300      	movs	r3, #0
 80173a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80173aa:	ab09      	add	r3, sp, #36	; 0x24
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	ec49 8b10 	vmov	d0, r8, r9
 80173b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80173b6:	6022      	str	r2, [r4, #0]
 80173b8:	f8cd a004 	str.w	sl, [sp, #4]
 80173bc:	6861      	ldr	r1, [r4, #4]
 80173be:	4628      	mov	r0, r5
 80173c0:	f7ff fee8 	bl	8017194 <__cvt>
 80173c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80173c8:	2b47      	cmp	r3, #71	; 0x47
 80173ca:	4680      	mov	r8, r0
 80173cc:	d109      	bne.n	80173e2 <_printf_float+0x126>
 80173ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173d0:	1cd8      	adds	r0, r3, #3
 80173d2:	db02      	blt.n	80173da <_printf_float+0x11e>
 80173d4:	6862      	ldr	r2, [r4, #4]
 80173d6:	4293      	cmp	r3, r2
 80173d8:	dd47      	ble.n	801746a <_printf_float+0x1ae>
 80173da:	f1aa 0a02 	sub.w	sl, sl, #2
 80173de:	fa5f fa8a 	uxtb.w	sl, sl
 80173e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80173e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173e8:	d824      	bhi.n	8017434 <_printf_float+0x178>
 80173ea:	3901      	subs	r1, #1
 80173ec:	4652      	mov	r2, sl
 80173ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80173f2:	9109      	str	r1, [sp, #36]	; 0x24
 80173f4:	f7ff ff2f 	bl	8017256 <__exponent>
 80173f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173fa:	1813      	adds	r3, r2, r0
 80173fc:	2a01      	cmp	r2, #1
 80173fe:	4681      	mov	r9, r0
 8017400:	6123      	str	r3, [r4, #16]
 8017402:	dc02      	bgt.n	801740a <_printf_float+0x14e>
 8017404:	6822      	ldr	r2, [r4, #0]
 8017406:	07d1      	lsls	r1, r2, #31
 8017408:	d501      	bpl.n	801740e <_printf_float+0x152>
 801740a:	3301      	adds	r3, #1
 801740c:	6123      	str	r3, [r4, #16]
 801740e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017412:	2b00      	cmp	r3, #0
 8017414:	d0a5      	beq.n	8017362 <_printf_float+0xa6>
 8017416:	232d      	movs	r3, #45	; 0x2d
 8017418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801741c:	e7a1      	b.n	8017362 <_printf_float+0xa6>
 801741e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8017422:	f000 8177 	beq.w	8017714 <_printf_float+0x458>
 8017426:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801742a:	d1bb      	bne.n	80173a4 <_printf_float+0xe8>
 801742c:	2900      	cmp	r1, #0
 801742e:	d1b9      	bne.n	80173a4 <_printf_float+0xe8>
 8017430:	2301      	movs	r3, #1
 8017432:	e7b6      	b.n	80173a2 <_printf_float+0xe6>
 8017434:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8017438:	d119      	bne.n	801746e <_printf_float+0x1b2>
 801743a:	2900      	cmp	r1, #0
 801743c:	6863      	ldr	r3, [r4, #4]
 801743e:	dd0c      	ble.n	801745a <_printf_float+0x19e>
 8017440:	6121      	str	r1, [r4, #16]
 8017442:	b913      	cbnz	r3, 801744a <_printf_float+0x18e>
 8017444:	6822      	ldr	r2, [r4, #0]
 8017446:	07d2      	lsls	r2, r2, #31
 8017448:	d502      	bpl.n	8017450 <_printf_float+0x194>
 801744a:	3301      	adds	r3, #1
 801744c:	440b      	add	r3, r1
 801744e:	6123      	str	r3, [r4, #16]
 8017450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017452:	65a3      	str	r3, [r4, #88]	; 0x58
 8017454:	f04f 0900 	mov.w	r9, #0
 8017458:	e7d9      	b.n	801740e <_printf_float+0x152>
 801745a:	b913      	cbnz	r3, 8017462 <_printf_float+0x1a6>
 801745c:	6822      	ldr	r2, [r4, #0]
 801745e:	07d0      	lsls	r0, r2, #31
 8017460:	d501      	bpl.n	8017466 <_printf_float+0x1aa>
 8017462:	3302      	adds	r3, #2
 8017464:	e7f3      	b.n	801744e <_printf_float+0x192>
 8017466:	2301      	movs	r3, #1
 8017468:	e7f1      	b.n	801744e <_printf_float+0x192>
 801746a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801746e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017472:	4293      	cmp	r3, r2
 8017474:	db05      	blt.n	8017482 <_printf_float+0x1c6>
 8017476:	6822      	ldr	r2, [r4, #0]
 8017478:	6123      	str	r3, [r4, #16]
 801747a:	07d1      	lsls	r1, r2, #31
 801747c:	d5e8      	bpl.n	8017450 <_printf_float+0x194>
 801747e:	3301      	adds	r3, #1
 8017480:	e7e5      	b.n	801744e <_printf_float+0x192>
 8017482:	2b00      	cmp	r3, #0
 8017484:	bfd4      	ite	le
 8017486:	f1c3 0302 	rsble	r3, r3, #2
 801748a:	2301      	movgt	r3, #1
 801748c:	4413      	add	r3, r2
 801748e:	e7de      	b.n	801744e <_printf_float+0x192>
 8017490:	6823      	ldr	r3, [r4, #0]
 8017492:	055a      	lsls	r2, r3, #21
 8017494:	d407      	bmi.n	80174a6 <_printf_float+0x1ea>
 8017496:	6923      	ldr	r3, [r4, #16]
 8017498:	4642      	mov	r2, r8
 801749a:	4631      	mov	r1, r6
 801749c:	4628      	mov	r0, r5
 801749e:	47b8      	blx	r7
 80174a0:	3001      	adds	r0, #1
 80174a2:	d12b      	bne.n	80174fc <_printf_float+0x240>
 80174a4:	e767      	b.n	8017376 <_printf_float+0xba>
 80174a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80174aa:	f240 80dc 	bls.w	8017666 <_printf_float+0x3aa>
 80174ae:	2200      	movs	r2, #0
 80174b0:	2300      	movs	r3, #0
 80174b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80174b6:	f7e9 fb17 	bl	8000ae8 <__aeabi_dcmpeq>
 80174ba:	2800      	cmp	r0, #0
 80174bc:	d033      	beq.n	8017526 <_printf_float+0x26a>
 80174be:	2301      	movs	r3, #1
 80174c0:	4a41      	ldr	r2, [pc, #260]	; (80175c8 <_printf_float+0x30c>)
 80174c2:	4631      	mov	r1, r6
 80174c4:	4628      	mov	r0, r5
 80174c6:	47b8      	blx	r7
 80174c8:	3001      	adds	r0, #1
 80174ca:	f43f af54 	beq.w	8017376 <_printf_float+0xba>
 80174ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80174d2:	429a      	cmp	r2, r3
 80174d4:	db02      	blt.n	80174dc <_printf_float+0x220>
 80174d6:	6823      	ldr	r3, [r4, #0]
 80174d8:	07d8      	lsls	r0, r3, #31
 80174da:	d50f      	bpl.n	80174fc <_printf_float+0x240>
 80174dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174e0:	4631      	mov	r1, r6
 80174e2:	4628      	mov	r0, r5
 80174e4:	47b8      	blx	r7
 80174e6:	3001      	adds	r0, #1
 80174e8:	f43f af45 	beq.w	8017376 <_printf_float+0xba>
 80174ec:	f04f 0800 	mov.w	r8, #0
 80174f0:	f104 091a 	add.w	r9, r4, #26
 80174f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174f6:	3b01      	subs	r3, #1
 80174f8:	4543      	cmp	r3, r8
 80174fa:	dc09      	bgt.n	8017510 <_printf_float+0x254>
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	079b      	lsls	r3, r3, #30
 8017500:	f100 8103 	bmi.w	801770a <_printf_float+0x44e>
 8017504:	68e0      	ldr	r0, [r4, #12]
 8017506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017508:	4298      	cmp	r0, r3
 801750a:	bfb8      	it	lt
 801750c:	4618      	movlt	r0, r3
 801750e:	e734      	b.n	801737a <_printf_float+0xbe>
 8017510:	2301      	movs	r3, #1
 8017512:	464a      	mov	r2, r9
 8017514:	4631      	mov	r1, r6
 8017516:	4628      	mov	r0, r5
 8017518:	47b8      	blx	r7
 801751a:	3001      	adds	r0, #1
 801751c:	f43f af2b 	beq.w	8017376 <_printf_float+0xba>
 8017520:	f108 0801 	add.w	r8, r8, #1
 8017524:	e7e6      	b.n	80174f4 <_printf_float+0x238>
 8017526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017528:	2b00      	cmp	r3, #0
 801752a:	dc2b      	bgt.n	8017584 <_printf_float+0x2c8>
 801752c:	2301      	movs	r3, #1
 801752e:	4a26      	ldr	r2, [pc, #152]	; (80175c8 <_printf_float+0x30c>)
 8017530:	4631      	mov	r1, r6
 8017532:	4628      	mov	r0, r5
 8017534:	47b8      	blx	r7
 8017536:	3001      	adds	r0, #1
 8017538:	f43f af1d 	beq.w	8017376 <_printf_float+0xba>
 801753c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801753e:	b923      	cbnz	r3, 801754a <_printf_float+0x28e>
 8017540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017542:	b913      	cbnz	r3, 801754a <_printf_float+0x28e>
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	07d9      	lsls	r1, r3, #31
 8017548:	d5d8      	bpl.n	80174fc <_printf_float+0x240>
 801754a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801754e:	4631      	mov	r1, r6
 8017550:	4628      	mov	r0, r5
 8017552:	47b8      	blx	r7
 8017554:	3001      	adds	r0, #1
 8017556:	f43f af0e 	beq.w	8017376 <_printf_float+0xba>
 801755a:	f04f 0900 	mov.w	r9, #0
 801755e:	f104 0a1a 	add.w	sl, r4, #26
 8017562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017564:	425b      	negs	r3, r3
 8017566:	454b      	cmp	r3, r9
 8017568:	dc01      	bgt.n	801756e <_printf_float+0x2b2>
 801756a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801756c:	e794      	b.n	8017498 <_printf_float+0x1dc>
 801756e:	2301      	movs	r3, #1
 8017570:	4652      	mov	r2, sl
 8017572:	4631      	mov	r1, r6
 8017574:	4628      	mov	r0, r5
 8017576:	47b8      	blx	r7
 8017578:	3001      	adds	r0, #1
 801757a:	f43f aefc 	beq.w	8017376 <_printf_float+0xba>
 801757e:	f109 0901 	add.w	r9, r9, #1
 8017582:	e7ee      	b.n	8017562 <_printf_float+0x2a6>
 8017584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017588:	429a      	cmp	r2, r3
 801758a:	bfa8      	it	ge
 801758c:	461a      	movge	r2, r3
 801758e:	2a00      	cmp	r2, #0
 8017590:	4691      	mov	r9, r2
 8017592:	dd07      	ble.n	80175a4 <_printf_float+0x2e8>
 8017594:	4613      	mov	r3, r2
 8017596:	4631      	mov	r1, r6
 8017598:	4642      	mov	r2, r8
 801759a:	4628      	mov	r0, r5
 801759c:	47b8      	blx	r7
 801759e:	3001      	adds	r0, #1
 80175a0:	f43f aee9 	beq.w	8017376 <_printf_float+0xba>
 80175a4:	f104 031a 	add.w	r3, r4, #26
 80175a8:	f04f 0b00 	mov.w	fp, #0
 80175ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80175b0:	9306      	str	r3, [sp, #24]
 80175b2:	e015      	b.n	80175e0 <_printf_float+0x324>
 80175b4:	7fefffff 	.word	0x7fefffff
 80175b8:	0801e370 	.word	0x0801e370
 80175bc:	0801e36c 	.word	0x0801e36c
 80175c0:	0801e378 	.word	0x0801e378
 80175c4:	0801e374 	.word	0x0801e374
 80175c8:	0801e37c 	.word	0x0801e37c
 80175cc:	2301      	movs	r3, #1
 80175ce:	9a06      	ldr	r2, [sp, #24]
 80175d0:	4631      	mov	r1, r6
 80175d2:	4628      	mov	r0, r5
 80175d4:	47b8      	blx	r7
 80175d6:	3001      	adds	r0, #1
 80175d8:	f43f aecd 	beq.w	8017376 <_printf_float+0xba>
 80175dc:	f10b 0b01 	add.w	fp, fp, #1
 80175e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80175e4:	ebaa 0309 	sub.w	r3, sl, r9
 80175e8:	455b      	cmp	r3, fp
 80175ea:	dcef      	bgt.n	80175cc <_printf_float+0x310>
 80175ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80175f0:	429a      	cmp	r2, r3
 80175f2:	44d0      	add	r8, sl
 80175f4:	db15      	blt.n	8017622 <_printf_float+0x366>
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	07da      	lsls	r2, r3, #31
 80175fa:	d412      	bmi.n	8017622 <_printf_float+0x366>
 80175fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017600:	eba3 020a 	sub.w	r2, r3, sl
 8017604:	eba3 0a01 	sub.w	sl, r3, r1
 8017608:	4592      	cmp	sl, r2
 801760a:	bfa8      	it	ge
 801760c:	4692      	movge	sl, r2
 801760e:	f1ba 0f00 	cmp.w	sl, #0
 8017612:	dc0e      	bgt.n	8017632 <_printf_float+0x376>
 8017614:	f04f 0800 	mov.w	r8, #0
 8017618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801761c:	f104 091a 	add.w	r9, r4, #26
 8017620:	e019      	b.n	8017656 <_printf_float+0x39a>
 8017622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017626:	4631      	mov	r1, r6
 8017628:	4628      	mov	r0, r5
 801762a:	47b8      	blx	r7
 801762c:	3001      	adds	r0, #1
 801762e:	d1e5      	bne.n	80175fc <_printf_float+0x340>
 8017630:	e6a1      	b.n	8017376 <_printf_float+0xba>
 8017632:	4653      	mov	r3, sl
 8017634:	4642      	mov	r2, r8
 8017636:	4631      	mov	r1, r6
 8017638:	4628      	mov	r0, r5
 801763a:	47b8      	blx	r7
 801763c:	3001      	adds	r0, #1
 801763e:	d1e9      	bne.n	8017614 <_printf_float+0x358>
 8017640:	e699      	b.n	8017376 <_printf_float+0xba>
 8017642:	2301      	movs	r3, #1
 8017644:	464a      	mov	r2, r9
 8017646:	4631      	mov	r1, r6
 8017648:	4628      	mov	r0, r5
 801764a:	47b8      	blx	r7
 801764c:	3001      	adds	r0, #1
 801764e:	f43f ae92 	beq.w	8017376 <_printf_float+0xba>
 8017652:	f108 0801 	add.w	r8, r8, #1
 8017656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801765a:	1a9b      	subs	r3, r3, r2
 801765c:	eba3 030a 	sub.w	r3, r3, sl
 8017660:	4543      	cmp	r3, r8
 8017662:	dcee      	bgt.n	8017642 <_printf_float+0x386>
 8017664:	e74a      	b.n	80174fc <_printf_float+0x240>
 8017666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017668:	2a01      	cmp	r2, #1
 801766a:	dc01      	bgt.n	8017670 <_printf_float+0x3b4>
 801766c:	07db      	lsls	r3, r3, #31
 801766e:	d53a      	bpl.n	80176e6 <_printf_float+0x42a>
 8017670:	2301      	movs	r3, #1
 8017672:	4642      	mov	r2, r8
 8017674:	4631      	mov	r1, r6
 8017676:	4628      	mov	r0, r5
 8017678:	47b8      	blx	r7
 801767a:	3001      	adds	r0, #1
 801767c:	f43f ae7b 	beq.w	8017376 <_printf_float+0xba>
 8017680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017684:	4631      	mov	r1, r6
 8017686:	4628      	mov	r0, r5
 8017688:	47b8      	blx	r7
 801768a:	3001      	adds	r0, #1
 801768c:	f108 0801 	add.w	r8, r8, #1
 8017690:	f43f ae71 	beq.w	8017376 <_printf_float+0xba>
 8017694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017696:	2200      	movs	r2, #0
 8017698:	f103 3aff 	add.w	sl, r3, #4294967295
 801769c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80176a0:	2300      	movs	r3, #0
 80176a2:	f7e9 fa21 	bl	8000ae8 <__aeabi_dcmpeq>
 80176a6:	b9c8      	cbnz	r0, 80176dc <_printf_float+0x420>
 80176a8:	4653      	mov	r3, sl
 80176aa:	4642      	mov	r2, r8
 80176ac:	4631      	mov	r1, r6
 80176ae:	4628      	mov	r0, r5
 80176b0:	47b8      	blx	r7
 80176b2:	3001      	adds	r0, #1
 80176b4:	d10e      	bne.n	80176d4 <_printf_float+0x418>
 80176b6:	e65e      	b.n	8017376 <_printf_float+0xba>
 80176b8:	2301      	movs	r3, #1
 80176ba:	4652      	mov	r2, sl
 80176bc:	4631      	mov	r1, r6
 80176be:	4628      	mov	r0, r5
 80176c0:	47b8      	blx	r7
 80176c2:	3001      	adds	r0, #1
 80176c4:	f43f ae57 	beq.w	8017376 <_printf_float+0xba>
 80176c8:	f108 0801 	add.w	r8, r8, #1
 80176cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176ce:	3b01      	subs	r3, #1
 80176d0:	4543      	cmp	r3, r8
 80176d2:	dcf1      	bgt.n	80176b8 <_printf_float+0x3fc>
 80176d4:	464b      	mov	r3, r9
 80176d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80176da:	e6de      	b.n	801749a <_printf_float+0x1de>
 80176dc:	f04f 0800 	mov.w	r8, #0
 80176e0:	f104 0a1a 	add.w	sl, r4, #26
 80176e4:	e7f2      	b.n	80176cc <_printf_float+0x410>
 80176e6:	2301      	movs	r3, #1
 80176e8:	e7df      	b.n	80176aa <_printf_float+0x3ee>
 80176ea:	2301      	movs	r3, #1
 80176ec:	464a      	mov	r2, r9
 80176ee:	4631      	mov	r1, r6
 80176f0:	4628      	mov	r0, r5
 80176f2:	47b8      	blx	r7
 80176f4:	3001      	adds	r0, #1
 80176f6:	f43f ae3e 	beq.w	8017376 <_printf_float+0xba>
 80176fa:	f108 0801 	add.w	r8, r8, #1
 80176fe:	68e3      	ldr	r3, [r4, #12]
 8017700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017702:	1a9b      	subs	r3, r3, r2
 8017704:	4543      	cmp	r3, r8
 8017706:	dcf0      	bgt.n	80176ea <_printf_float+0x42e>
 8017708:	e6fc      	b.n	8017504 <_printf_float+0x248>
 801770a:	f04f 0800 	mov.w	r8, #0
 801770e:	f104 0919 	add.w	r9, r4, #25
 8017712:	e7f4      	b.n	80176fe <_printf_float+0x442>
 8017714:	2900      	cmp	r1, #0
 8017716:	f43f ae8b 	beq.w	8017430 <_printf_float+0x174>
 801771a:	2300      	movs	r3, #0
 801771c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017720:	ab09      	add	r3, sp, #36	; 0x24
 8017722:	9300      	str	r3, [sp, #0]
 8017724:	ec49 8b10 	vmov	d0, r8, r9
 8017728:	6022      	str	r2, [r4, #0]
 801772a:	f8cd a004 	str.w	sl, [sp, #4]
 801772e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017732:	4628      	mov	r0, r5
 8017734:	f7ff fd2e 	bl	8017194 <__cvt>
 8017738:	4680      	mov	r8, r0
 801773a:	e648      	b.n	80173ce <_printf_float+0x112>

0801773c <_printf_common>:
 801773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017740:	4691      	mov	r9, r2
 8017742:	461f      	mov	r7, r3
 8017744:	688a      	ldr	r2, [r1, #8]
 8017746:	690b      	ldr	r3, [r1, #16]
 8017748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801774c:	4293      	cmp	r3, r2
 801774e:	bfb8      	it	lt
 8017750:	4613      	movlt	r3, r2
 8017752:	f8c9 3000 	str.w	r3, [r9]
 8017756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801775a:	4606      	mov	r6, r0
 801775c:	460c      	mov	r4, r1
 801775e:	b112      	cbz	r2, 8017766 <_printf_common+0x2a>
 8017760:	3301      	adds	r3, #1
 8017762:	f8c9 3000 	str.w	r3, [r9]
 8017766:	6823      	ldr	r3, [r4, #0]
 8017768:	0699      	lsls	r1, r3, #26
 801776a:	bf42      	ittt	mi
 801776c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017770:	3302      	addmi	r3, #2
 8017772:	f8c9 3000 	strmi.w	r3, [r9]
 8017776:	6825      	ldr	r5, [r4, #0]
 8017778:	f015 0506 	ands.w	r5, r5, #6
 801777c:	d107      	bne.n	801778e <_printf_common+0x52>
 801777e:	f104 0a19 	add.w	sl, r4, #25
 8017782:	68e3      	ldr	r3, [r4, #12]
 8017784:	f8d9 2000 	ldr.w	r2, [r9]
 8017788:	1a9b      	subs	r3, r3, r2
 801778a:	42ab      	cmp	r3, r5
 801778c:	dc28      	bgt.n	80177e0 <_printf_common+0xa4>
 801778e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017792:	6822      	ldr	r2, [r4, #0]
 8017794:	3300      	adds	r3, #0
 8017796:	bf18      	it	ne
 8017798:	2301      	movne	r3, #1
 801779a:	0692      	lsls	r2, r2, #26
 801779c:	d42d      	bmi.n	80177fa <_printf_common+0xbe>
 801779e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80177a2:	4639      	mov	r1, r7
 80177a4:	4630      	mov	r0, r6
 80177a6:	47c0      	blx	r8
 80177a8:	3001      	adds	r0, #1
 80177aa:	d020      	beq.n	80177ee <_printf_common+0xb2>
 80177ac:	6823      	ldr	r3, [r4, #0]
 80177ae:	68e5      	ldr	r5, [r4, #12]
 80177b0:	f8d9 2000 	ldr.w	r2, [r9]
 80177b4:	f003 0306 	and.w	r3, r3, #6
 80177b8:	2b04      	cmp	r3, #4
 80177ba:	bf08      	it	eq
 80177bc:	1aad      	subeq	r5, r5, r2
 80177be:	68a3      	ldr	r3, [r4, #8]
 80177c0:	6922      	ldr	r2, [r4, #16]
 80177c2:	bf0c      	ite	eq
 80177c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177c8:	2500      	movne	r5, #0
 80177ca:	4293      	cmp	r3, r2
 80177cc:	bfc4      	itt	gt
 80177ce:	1a9b      	subgt	r3, r3, r2
 80177d0:	18ed      	addgt	r5, r5, r3
 80177d2:	f04f 0900 	mov.w	r9, #0
 80177d6:	341a      	adds	r4, #26
 80177d8:	454d      	cmp	r5, r9
 80177da:	d11a      	bne.n	8017812 <_printf_common+0xd6>
 80177dc:	2000      	movs	r0, #0
 80177de:	e008      	b.n	80177f2 <_printf_common+0xb6>
 80177e0:	2301      	movs	r3, #1
 80177e2:	4652      	mov	r2, sl
 80177e4:	4639      	mov	r1, r7
 80177e6:	4630      	mov	r0, r6
 80177e8:	47c0      	blx	r8
 80177ea:	3001      	adds	r0, #1
 80177ec:	d103      	bne.n	80177f6 <_printf_common+0xba>
 80177ee:	f04f 30ff 	mov.w	r0, #4294967295
 80177f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177f6:	3501      	adds	r5, #1
 80177f8:	e7c3      	b.n	8017782 <_printf_common+0x46>
 80177fa:	18e1      	adds	r1, r4, r3
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	2030      	movs	r0, #48	; 0x30
 8017800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017804:	4422      	add	r2, r4
 8017806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801780a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801780e:	3302      	adds	r3, #2
 8017810:	e7c5      	b.n	801779e <_printf_common+0x62>
 8017812:	2301      	movs	r3, #1
 8017814:	4622      	mov	r2, r4
 8017816:	4639      	mov	r1, r7
 8017818:	4630      	mov	r0, r6
 801781a:	47c0      	blx	r8
 801781c:	3001      	adds	r0, #1
 801781e:	d0e6      	beq.n	80177ee <_printf_common+0xb2>
 8017820:	f109 0901 	add.w	r9, r9, #1
 8017824:	e7d8      	b.n	80177d8 <_printf_common+0x9c>
	...

08017828 <_printf_i>:
 8017828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801782c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017830:	460c      	mov	r4, r1
 8017832:	7e09      	ldrb	r1, [r1, #24]
 8017834:	b085      	sub	sp, #20
 8017836:	296e      	cmp	r1, #110	; 0x6e
 8017838:	4617      	mov	r7, r2
 801783a:	4606      	mov	r6, r0
 801783c:	4698      	mov	r8, r3
 801783e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017840:	f000 80b3 	beq.w	80179aa <_printf_i+0x182>
 8017844:	d822      	bhi.n	801788c <_printf_i+0x64>
 8017846:	2963      	cmp	r1, #99	; 0x63
 8017848:	d036      	beq.n	80178b8 <_printf_i+0x90>
 801784a:	d80a      	bhi.n	8017862 <_printf_i+0x3a>
 801784c:	2900      	cmp	r1, #0
 801784e:	f000 80b9 	beq.w	80179c4 <_printf_i+0x19c>
 8017852:	2958      	cmp	r1, #88	; 0x58
 8017854:	f000 8083 	beq.w	801795e <_printf_i+0x136>
 8017858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801785c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017860:	e032      	b.n	80178c8 <_printf_i+0xa0>
 8017862:	2964      	cmp	r1, #100	; 0x64
 8017864:	d001      	beq.n	801786a <_printf_i+0x42>
 8017866:	2969      	cmp	r1, #105	; 0x69
 8017868:	d1f6      	bne.n	8017858 <_printf_i+0x30>
 801786a:	6820      	ldr	r0, [r4, #0]
 801786c:	6813      	ldr	r3, [r2, #0]
 801786e:	0605      	lsls	r5, r0, #24
 8017870:	f103 0104 	add.w	r1, r3, #4
 8017874:	d52a      	bpl.n	80178cc <_printf_i+0xa4>
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	6011      	str	r1, [r2, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	da03      	bge.n	8017886 <_printf_i+0x5e>
 801787e:	222d      	movs	r2, #45	; 0x2d
 8017880:	425b      	negs	r3, r3
 8017882:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017886:	486f      	ldr	r0, [pc, #444]	; (8017a44 <_printf_i+0x21c>)
 8017888:	220a      	movs	r2, #10
 801788a:	e039      	b.n	8017900 <_printf_i+0xd8>
 801788c:	2973      	cmp	r1, #115	; 0x73
 801788e:	f000 809d 	beq.w	80179cc <_printf_i+0x1a4>
 8017892:	d808      	bhi.n	80178a6 <_printf_i+0x7e>
 8017894:	296f      	cmp	r1, #111	; 0x6f
 8017896:	d020      	beq.n	80178da <_printf_i+0xb2>
 8017898:	2970      	cmp	r1, #112	; 0x70
 801789a:	d1dd      	bne.n	8017858 <_printf_i+0x30>
 801789c:	6823      	ldr	r3, [r4, #0]
 801789e:	f043 0320 	orr.w	r3, r3, #32
 80178a2:	6023      	str	r3, [r4, #0]
 80178a4:	e003      	b.n	80178ae <_printf_i+0x86>
 80178a6:	2975      	cmp	r1, #117	; 0x75
 80178a8:	d017      	beq.n	80178da <_printf_i+0xb2>
 80178aa:	2978      	cmp	r1, #120	; 0x78
 80178ac:	d1d4      	bne.n	8017858 <_printf_i+0x30>
 80178ae:	2378      	movs	r3, #120	; 0x78
 80178b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80178b4:	4864      	ldr	r0, [pc, #400]	; (8017a48 <_printf_i+0x220>)
 80178b6:	e055      	b.n	8017964 <_printf_i+0x13c>
 80178b8:	6813      	ldr	r3, [r2, #0]
 80178ba:	1d19      	adds	r1, r3, #4
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	6011      	str	r1, [r2, #0]
 80178c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178c8:	2301      	movs	r3, #1
 80178ca:	e08c      	b.n	80179e6 <_printf_i+0x1be>
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	6011      	str	r1, [r2, #0]
 80178d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80178d4:	bf18      	it	ne
 80178d6:	b21b      	sxthne	r3, r3
 80178d8:	e7cf      	b.n	801787a <_printf_i+0x52>
 80178da:	6813      	ldr	r3, [r2, #0]
 80178dc:	6825      	ldr	r5, [r4, #0]
 80178de:	1d18      	adds	r0, r3, #4
 80178e0:	6010      	str	r0, [r2, #0]
 80178e2:	0628      	lsls	r0, r5, #24
 80178e4:	d501      	bpl.n	80178ea <_printf_i+0xc2>
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	e002      	b.n	80178f0 <_printf_i+0xc8>
 80178ea:	0668      	lsls	r0, r5, #25
 80178ec:	d5fb      	bpl.n	80178e6 <_printf_i+0xbe>
 80178ee:	881b      	ldrh	r3, [r3, #0]
 80178f0:	4854      	ldr	r0, [pc, #336]	; (8017a44 <_printf_i+0x21c>)
 80178f2:	296f      	cmp	r1, #111	; 0x6f
 80178f4:	bf14      	ite	ne
 80178f6:	220a      	movne	r2, #10
 80178f8:	2208      	moveq	r2, #8
 80178fa:	2100      	movs	r1, #0
 80178fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017900:	6865      	ldr	r5, [r4, #4]
 8017902:	60a5      	str	r5, [r4, #8]
 8017904:	2d00      	cmp	r5, #0
 8017906:	f2c0 8095 	blt.w	8017a34 <_printf_i+0x20c>
 801790a:	6821      	ldr	r1, [r4, #0]
 801790c:	f021 0104 	bic.w	r1, r1, #4
 8017910:	6021      	str	r1, [r4, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d13d      	bne.n	8017992 <_printf_i+0x16a>
 8017916:	2d00      	cmp	r5, #0
 8017918:	f040 808e 	bne.w	8017a38 <_printf_i+0x210>
 801791c:	4665      	mov	r5, ip
 801791e:	2a08      	cmp	r2, #8
 8017920:	d10b      	bne.n	801793a <_printf_i+0x112>
 8017922:	6823      	ldr	r3, [r4, #0]
 8017924:	07db      	lsls	r3, r3, #31
 8017926:	d508      	bpl.n	801793a <_printf_i+0x112>
 8017928:	6923      	ldr	r3, [r4, #16]
 801792a:	6862      	ldr	r2, [r4, #4]
 801792c:	429a      	cmp	r2, r3
 801792e:	bfde      	ittt	le
 8017930:	2330      	movle	r3, #48	; 0x30
 8017932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017936:	f105 35ff 	addle.w	r5, r5, #4294967295
 801793a:	ebac 0305 	sub.w	r3, ip, r5
 801793e:	6123      	str	r3, [r4, #16]
 8017940:	f8cd 8000 	str.w	r8, [sp]
 8017944:	463b      	mov	r3, r7
 8017946:	aa03      	add	r2, sp, #12
 8017948:	4621      	mov	r1, r4
 801794a:	4630      	mov	r0, r6
 801794c:	f7ff fef6 	bl	801773c <_printf_common>
 8017950:	3001      	adds	r0, #1
 8017952:	d14d      	bne.n	80179f0 <_printf_i+0x1c8>
 8017954:	f04f 30ff 	mov.w	r0, #4294967295
 8017958:	b005      	add	sp, #20
 801795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801795e:	4839      	ldr	r0, [pc, #228]	; (8017a44 <_printf_i+0x21c>)
 8017960:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017964:	6813      	ldr	r3, [r2, #0]
 8017966:	6821      	ldr	r1, [r4, #0]
 8017968:	1d1d      	adds	r5, r3, #4
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	6015      	str	r5, [r2, #0]
 801796e:	060a      	lsls	r2, r1, #24
 8017970:	d50b      	bpl.n	801798a <_printf_i+0x162>
 8017972:	07ca      	lsls	r2, r1, #31
 8017974:	bf44      	itt	mi
 8017976:	f041 0120 	orrmi.w	r1, r1, #32
 801797a:	6021      	strmi	r1, [r4, #0]
 801797c:	b91b      	cbnz	r3, 8017986 <_printf_i+0x15e>
 801797e:	6822      	ldr	r2, [r4, #0]
 8017980:	f022 0220 	bic.w	r2, r2, #32
 8017984:	6022      	str	r2, [r4, #0]
 8017986:	2210      	movs	r2, #16
 8017988:	e7b7      	b.n	80178fa <_printf_i+0xd2>
 801798a:	064d      	lsls	r5, r1, #25
 801798c:	bf48      	it	mi
 801798e:	b29b      	uxthmi	r3, r3
 8017990:	e7ef      	b.n	8017972 <_printf_i+0x14a>
 8017992:	4665      	mov	r5, ip
 8017994:	fbb3 f1f2 	udiv	r1, r3, r2
 8017998:	fb02 3311 	mls	r3, r2, r1, r3
 801799c:	5cc3      	ldrb	r3, [r0, r3]
 801799e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80179a2:	460b      	mov	r3, r1
 80179a4:	2900      	cmp	r1, #0
 80179a6:	d1f5      	bne.n	8017994 <_printf_i+0x16c>
 80179a8:	e7b9      	b.n	801791e <_printf_i+0xf6>
 80179aa:	6813      	ldr	r3, [r2, #0]
 80179ac:	6825      	ldr	r5, [r4, #0]
 80179ae:	6961      	ldr	r1, [r4, #20]
 80179b0:	1d18      	adds	r0, r3, #4
 80179b2:	6010      	str	r0, [r2, #0]
 80179b4:	0628      	lsls	r0, r5, #24
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	d501      	bpl.n	80179be <_printf_i+0x196>
 80179ba:	6019      	str	r1, [r3, #0]
 80179bc:	e002      	b.n	80179c4 <_printf_i+0x19c>
 80179be:	066a      	lsls	r2, r5, #25
 80179c0:	d5fb      	bpl.n	80179ba <_printf_i+0x192>
 80179c2:	8019      	strh	r1, [r3, #0]
 80179c4:	2300      	movs	r3, #0
 80179c6:	6123      	str	r3, [r4, #16]
 80179c8:	4665      	mov	r5, ip
 80179ca:	e7b9      	b.n	8017940 <_printf_i+0x118>
 80179cc:	6813      	ldr	r3, [r2, #0]
 80179ce:	1d19      	adds	r1, r3, #4
 80179d0:	6011      	str	r1, [r2, #0]
 80179d2:	681d      	ldr	r5, [r3, #0]
 80179d4:	6862      	ldr	r2, [r4, #4]
 80179d6:	2100      	movs	r1, #0
 80179d8:	4628      	mov	r0, r5
 80179da:	f7e8 fc11 	bl	8000200 <memchr>
 80179de:	b108      	cbz	r0, 80179e4 <_printf_i+0x1bc>
 80179e0:	1b40      	subs	r0, r0, r5
 80179e2:	6060      	str	r0, [r4, #4]
 80179e4:	6863      	ldr	r3, [r4, #4]
 80179e6:	6123      	str	r3, [r4, #16]
 80179e8:	2300      	movs	r3, #0
 80179ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179ee:	e7a7      	b.n	8017940 <_printf_i+0x118>
 80179f0:	6923      	ldr	r3, [r4, #16]
 80179f2:	462a      	mov	r2, r5
 80179f4:	4639      	mov	r1, r7
 80179f6:	4630      	mov	r0, r6
 80179f8:	47c0      	blx	r8
 80179fa:	3001      	adds	r0, #1
 80179fc:	d0aa      	beq.n	8017954 <_printf_i+0x12c>
 80179fe:	6823      	ldr	r3, [r4, #0]
 8017a00:	079b      	lsls	r3, r3, #30
 8017a02:	d413      	bmi.n	8017a2c <_printf_i+0x204>
 8017a04:	68e0      	ldr	r0, [r4, #12]
 8017a06:	9b03      	ldr	r3, [sp, #12]
 8017a08:	4298      	cmp	r0, r3
 8017a0a:	bfb8      	it	lt
 8017a0c:	4618      	movlt	r0, r3
 8017a0e:	e7a3      	b.n	8017958 <_printf_i+0x130>
 8017a10:	2301      	movs	r3, #1
 8017a12:	464a      	mov	r2, r9
 8017a14:	4639      	mov	r1, r7
 8017a16:	4630      	mov	r0, r6
 8017a18:	47c0      	blx	r8
 8017a1a:	3001      	adds	r0, #1
 8017a1c:	d09a      	beq.n	8017954 <_printf_i+0x12c>
 8017a1e:	3501      	adds	r5, #1
 8017a20:	68e3      	ldr	r3, [r4, #12]
 8017a22:	9a03      	ldr	r2, [sp, #12]
 8017a24:	1a9b      	subs	r3, r3, r2
 8017a26:	42ab      	cmp	r3, r5
 8017a28:	dcf2      	bgt.n	8017a10 <_printf_i+0x1e8>
 8017a2a:	e7eb      	b.n	8017a04 <_printf_i+0x1dc>
 8017a2c:	2500      	movs	r5, #0
 8017a2e:	f104 0919 	add.w	r9, r4, #25
 8017a32:	e7f5      	b.n	8017a20 <_printf_i+0x1f8>
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d1ac      	bne.n	8017992 <_printf_i+0x16a>
 8017a38:	7803      	ldrb	r3, [r0, #0]
 8017a3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a42:	e76c      	b.n	801791e <_printf_i+0xf6>
 8017a44:	0801e37e 	.word	0x0801e37e
 8017a48:	0801e38f 	.word	0x0801e38f

08017a4c <_scanf_float>:
 8017a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a50:	469a      	mov	sl, r3
 8017a52:	688b      	ldr	r3, [r1, #8]
 8017a54:	4616      	mov	r6, r2
 8017a56:	1e5a      	subs	r2, r3, #1
 8017a58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017a5c:	b087      	sub	sp, #28
 8017a5e:	bf83      	ittte	hi
 8017a60:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8017a64:	189b      	addhi	r3, r3, r2
 8017a66:	9301      	strhi	r3, [sp, #4]
 8017a68:	2300      	movls	r3, #0
 8017a6a:	bf86      	itte	hi
 8017a6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017a70:	608b      	strhi	r3, [r1, #8]
 8017a72:	9301      	strls	r3, [sp, #4]
 8017a74:	680b      	ldr	r3, [r1, #0]
 8017a76:	4688      	mov	r8, r1
 8017a78:	f04f 0b00 	mov.w	fp, #0
 8017a7c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017a80:	f848 3b1c 	str.w	r3, [r8], #28
 8017a84:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8017a88:	4607      	mov	r7, r0
 8017a8a:	460c      	mov	r4, r1
 8017a8c:	4645      	mov	r5, r8
 8017a8e:	465a      	mov	r2, fp
 8017a90:	46d9      	mov	r9, fp
 8017a92:	f8cd b008 	str.w	fp, [sp, #8]
 8017a96:	68a1      	ldr	r1, [r4, #8]
 8017a98:	b181      	cbz	r1, 8017abc <_scanf_float+0x70>
 8017a9a:	6833      	ldr	r3, [r6, #0]
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	2b49      	cmp	r3, #73	; 0x49
 8017aa0:	d071      	beq.n	8017b86 <_scanf_float+0x13a>
 8017aa2:	d84d      	bhi.n	8017b40 <_scanf_float+0xf4>
 8017aa4:	2b39      	cmp	r3, #57	; 0x39
 8017aa6:	d840      	bhi.n	8017b2a <_scanf_float+0xde>
 8017aa8:	2b31      	cmp	r3, #49	; 0x31
 8017aaa:	f080 8088 	bcs.w	8017bbe <_scanf_float+0x172>
 8017aae:	2b2d      	cmp	r3, #45	; 0x2d
 8017ab0:	f000 8090 	beq.w	8017bd4 <_scanf_float+0x188>
 8017ab4:	d815      	bhi.n	8017ae2 <_scanf_float+0x96>
 8017ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8017ab8:	f000 808c 	beq.w	8017bd4 <_scanf_float+0x188>
 8017abc:	f1b9 0f00 	cmp.w	r9, #0
 8017ac0:	d003      	beq.n	8017aca <_scanf_float+0x7e>
 8017ac2:	6823      	ldr	r3, [r4, #0]
 8017ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017ac8:	6023      	str	r3, [r4, #0]
 8017aca:	3a01      	subs	r2, #1
 8017acc:	2a01      	cmp	r2, #1
 8017ace:	f200 80ea 	bhi.w	8017ca6 <_scanf_float+0x25a>
 8017ad2:	4545      	cmp	r5, r8
 8017ad4:	f200 80dc 	bhi.w	8017c90 <_scanf_float+0x244>
 8017ad8:	2601      	movs	r6, #1
 8017ada:	4630      	mov	r0, r6
 8017adc:	b007      	add	sp, #28
 8017ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8017ae4:	f000 809f 	beq.w	8017c26 <_scanf_float+0x1da>
 8017ae8:	2b30      	cmp	r3, #48	; 0x30
 8017aea:	d1e7      	bne.n	8017abc <_scanf_float+0x70>
 8017aec:	6820      	ldr	r0, [r4, #0]
 8017aee:	f410 7f80 	tst.w	r0, #256	; 0x100
 8017af2:	d064      	beq.n	8017bbe <_scanf_float+0x172>
 8017af4:	9b01      	ldr	r3, [sp, #4]
 8017af6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8017afa:	6020      	str	r0, [r4, #0]
 8017afc:	f109 0901 	add.w	r9, r9, #1
 8017b00:	b11b      	cbz	r3, 8017b0a <_scanf_float+0xbe>
 8017b02:	3b01      	subs	r3, #1
 8017b04:	3101      	adds	r1, #1
 8017b06:	9301      	str	r3, [sp, #4]
 8017b08:	60a1      	str	r1, [r4, #8]
 8017b0a:	68a3      	ldr	r3, [r4, #8]
 8017b0c:	3b01      	subs	r3, #1
 8017b0e:	60a3      	str	r3, [r4, #8]
 8017b10:	6923      	ldr	r3, [r4, #16]
 8017b12:	3301      	adds	r3, #1
 8017b14:	6123      	str	r3, [r4, #16]
 8017b16:	6873      	ldr	r3, [r6, #4]
 8017b18:	3b01      	subs	r3, #1
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	6073      	str	r3, [r6, #4]
 8017b1e:	f340 80ac 	ble.w	8017c7a <_scanf_float+0x22e>
 8017b22:	6833      	ldr	r3, [r6, #0]
 8017b24:	3301      	adds	r3, #1
 8017b26:	6033      	str	r3, [r6, #0]
 8017b28:	e7b5      	b.n	8017a96 <_scanf_float+0x4a>
 8017b2a:	2b45      	cmp	r3, #69	; 0x45
 8017b2c:	f000 8085 	beq.w	8017c3a <_scanf_float+0x1ee>
 8017b30:	2b46      	cmp	r3, #70	; 0x46
 8017b32:	d06a      	beq.n	8017c0a <_scanf_float+0x1be>
 8017b34:	2b41      	cmp	r3, #65	; 0x41
 8017b36:	d1c1      	bne.n	8017abc <_scanf_float+0x70>
 8017b38:	2a01      	cmp	r2, #1
 8017b3a:	d1bf      	bne.n	8017abc <_scanf_float+0x70>
 8017b3c:	2202      	movs	r2, #2
 8017b3e:	e046      	b.n	8017bce <_scanf_float+0x182>
 8017b40:	2b65      	cmp	r3, #101	; 0x65
 8017b42:	d07a      	beq.n	8017c3a <_scanf_float+0x1ee>
 8017b44:	d818      	bhi.n	8017b78 <_scanf_float+0x12c>
 8017b46:	2b54      	cmp	r3, #84	; 0x54
 8017b48:	d066      	beq.n	8017c18 <_scanf_float+0x1cc>
 8017b4a:	d811      	bhi.n	8017b70 <_scanf_float+0x124>
 8017b4c:	2b4e      	cmp	r3, #78	; 0x4e
 8017b4e:	d1b5      	bne.n	8017abc <_scanf_float+0x70>
 8017b50:	2a00      	cmp	r2, #0
 8017b52:	d146      	bne.n	8017be2 <_scanf_float+0x196>
 8017b54:	f1b9 0f00 	cmp.w	r9, #0
 8017b58:	d145      	bne.n	8017be6 <_scanf_float+0x19a>
 8017b5a:	6821      	ldr	r1, [r4, #0]
 8017b5c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017b60:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017b64:	d13f      	bne.n	8017be6 <_scanf_float+0x19a>
 8017b66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017b6a:	6021      	str	r1, [r4, #0]
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	e02e      	b.n	8017bce <_scanf_float+0x182>
 8017b70:	2b59      	cmp	r3, #89	; 0x59
 8017b72:	d01e      	beq.n	8017bb2 <_scanf_float+0x166>
 8017b74:	2b61      	cmp	r3, #97	; 0x61
 8017b76:	e7de      	b.n	8017b36 <_scanf_float+0xea>
 8017b78:	2b6e      	cmp	r3, #110	; 0x6e
 8017b7a:	d0e9      	beq.n	8017b50 <_scanf_float+0x104>
 8017b7c:	d815      	bhi.n	8017baa <_scanf_float+0x15e>
 8017b7e:	2b66      	cmp	r3, #102	; 0x66
 8017b80:	d043      	beq.n	8017c0a <_scanf_float+0x1be>
 8017b82:	2b69      	cmp	r3, #105	; 0x69
 8017b84:	d19a      	bne.n	8017abc <_scanf_float+0x70>
 8017b86:	f1bb 0f00 	cmp.w	fp, #0
 8017b8a:	d138      	bne.n	8017bfe <_scanf_float+0x1b2>
 8017b8c:	f1b9 0f00 	cmp.w	r9, #0
 8017b90:	d197      	bne.n	8017ac2 <_scanf_float+0x76>
 8017b92:	6821      	ldr	r1, [r4, #0]
 8017b94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017b98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017b9c:	d195      	bne.n	8017aca <_scanf_float+0x7e>
 8017b9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017ba2:	6021      	str	r1, [r4, #0]
 8017ba4:	f04f 0b01 	mov.w	fp, #1
 8017ba8:	e011      	b.n	8017bce <_scanf_float+0x182>
 8017baa:	2b74      	cmp	r3, #116	; 0x74
 8017bac:	d034      	beq.n	8017c18 <_scanf_float+0x1cc>
 8017bae:	2b79      	cmp	r3, #121	; 0x79
 8017bb0:	d184      	bne.n	8017abc <_scanf_float+0x70>
 8017bb2:	f1bb 0f07 	cmp.w	fp, #7
 8017bb6:	d181      	bne.n	8017abc <_scanf_float+0x70>
 8017bb8:	f04f 0b08 	mov.w	fp, #8
 8017bbc:	e007      	b.n	8017bce <_scanf_float+0x182>
 8017bbe:	eb12 0f0b 	cmn.w	r2, fp
 8017bc2:	f47f af7b 	bne.w	8017abc <_scanf_float+0x70>
 8017bc6:	6821      	ldr	r1, [r4, #0]
 8017bc8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8017bcc:	6021      	str	r1, [r4, #0]
 8017bce:	702b      	strb	r3, [r5, #0]
 8017bd0:	3501      	adds	r5, #1
 8017bd2:	e79a      	b.n	8017b0a <_scanf_float+0xbe>
 8017bd4:	6821      	ldr	r1, [r4, #0]
 8017bd6:	0608      	lsls	r0, r1, #24
 8017bd8:	f57f af70 	bpl.w	8017abc <_scanf_float+0x70>
 8017bdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017be0:	e7f4      	b.n	8017bcc <_scanf_float+0x180>
 8017be2:	2a02      	cmp	r2, #2
 8017be4:	d047      	beq.n	8017c76 <_scanf_float+0x22a>
 8017be6:	f1bb 0f01 	cmp.w	fp, #1
 8017bea:	d003      	beq.n	8017bf4 <_scanf_float+0x1a8>
 8017bec:	f1bb 0f04 	cmp.w	fp, #4
 8017bf0:	f47f af64 	bne.w	8017abc <_scanf_float+0x70>
 8017bf4:	f10b 0b01 	add.w	fp, fp, #1
 8017bf8:	fa5f fb8b 	uxtb.w	fp, fp
 8017bfc:	e7e7      	b.n	8017bce <_scanf_float+0x182>
 8017bfe:	f1bb 0f03 	cmp.w	fp, #3
 8017c02:	d0f7      	beq.n	8017bf4 <_scanf_float+0x1a8>
 8017c04:	f1bb 0f05 	cmp.w	fp, #5
 8017c08:	e7f2      	b.n	8017bf0 <_scanf_float+0x1a4>
 8017c0a:	f1bb 0f02 	cmp.w	fp, #2
 8017c0e:	f47f af55 	bne.w	8017abc <_scanf_float+0x70>
 8017c12:	f04f 0b03 	mov.w	fp, #3
 8017c16:	e7da      	b.n	8017bce <_scanf_float+0x182>
 8017c18:	f1bb 0f06 	cmp.w	fp, #6
 8017c1c:	f47f af4e 	bne.w	8017abc <_scanf_float+0x70>
 8017c20:	f04f 0b07 	mov.w	fp, #7
 8017c24:	e7d3      	b.n	8017bce <_scanf_float+0x182>
 8017c26:	6821      	ldr	r1, [r4, #0]
 8017c28:	0588      	lsls	r0, r1, #22
 8017c2a:	f57f af47 	bpl.w	8017abc <_scanf_float+0x70>
 8017c2e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017c32:	6021      	str	r1, [r4, #0]
 8017c34:	f8cd 9008 	str.w	r9, [sp, #8]
 8017c38:	e7c9      	b.n	8017bce <_scanf_float+0x182>
 8017c3a:	6821      	ldr	r1, [r4, #0]
 8017c3c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017c40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017c44:	d006      	beq.n	8017c54 <_scanf_float+0x208>
 8017c46:	0548      	lsls	r0, r1, #21
 8017c48:	f57f af38 	bpl.w	8017abc <_scanf_float+0x70>
 8017c4c:	f1b9 0f00 	cmp.w	r9, #0
 8017c50:	f43f af3b 	beq.w	8017aca <_scanf_float+0x7e>
 8017c54:	0588      	lsls	r0, r1, #22
 8017c56:	bf58      	it	pl
 8017c58:	9802      	ldrpl	r0, [sp, #8]
 8017c5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017c5e:	bf58      	it	pl
 8017c60:	eba9 0000 	subpl.w	r0, r9, r0
 8017c64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017c68:	bf58      	it	pl
 8017c6a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017c6e:	6021      	str	r1, [r4, #0]
 8017c70:	f04f 0900 	mov.w	r9, #0
 8017c74:	e7ab      	b.n	8017bce <_scanf_float+0x182>
 8017c76:	2203      	movs	r2, #3
 8017c78:	e7a9      	b.n	8017bce <_scanf_float+0x182>
 8017c7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c7e:	9205      	str	r2, [sp, #20]
 8017c80:	4631      	mov	r1, r6
 8017c82:	4638      	mov	r0, r7
 8017c84:	4798      	blx	r3
 8017c86:	9a05      	ldr	r2, [sp, #20]
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	f43f af04 	beq.w	8017a96 <_scanf_float+0x4a>
 8017c8e:	e715      	b.n	8017abc <_scanf_float+0x70>
 8017c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017c98:	4632      	mov	r2, r6
 8017c9a:	4638      	mov	r0, r7
 8017c9c:	4798      	blx	r3
 8017c9e:	6923      	ldr	r3, [r4, #16]
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	6123      	str	r3, [r4, #16]
 8017ca4:	e715      	b.n	8017ad2 <_scanf_float+0x86>
 8017ca6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017caa:	2b06      	cmp	r3, #6
 8017cac:	d80a      	bhi.n	8017cc4 <_scanf_float+0x278>
 8017cae:	f1bb 0f02 	cmp.w	fp, #2
 8017cb2:	d968      	bls.n	8017d86 <_scanf_float+0x33a>
 8017cb4:	f1ab 0b03 	sub.w	fp, fp, #3
 8017cb8:	fa5f fb8b 	uxtb.w	fp, fp
 8017cbc:	eba5 0b0b 	sub.w	fp, r5, fp
 8017cc0:	455d      	cmp	r5, fp
 8017cc2:	d14b      	bne.n	8017d5c <_scanf_float+0x310>
 8017cc4:	6823      	ldr	r3, [r4, #0]
 8017cc6:	05da      	lsls	r2, r3, #23
 8017cc8:	d51f      	bpl.n	8017d0a <_scanf_float+0x2be>
 8017cca:	055b      	lsls	r3, r3, #21
 8017ccc:	d468      	bmi.n	8017da0 <_scanf_float+0x354>
 8017cce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017cd2:	6923      	ldr	r3, [r4, #16]
 8017cd4:	2965      	cmp	r1, #101	; 0x65
 8017cd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8017cda:	f105 3bff 	add.w	fp, r5, #4294967295
 8017cde:	6123      	str	r3, [r4, #16]
 8017ce0:	d00d      	beq.n	8017cfe <_scanf_float+0x2b2>
 8017ce2:	2945      	cmp	r1, #69	; 0x45
 8017ce4:	d00b      	beq.n	8017cfe <_scanf_float+0x2b2>
 8017ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017cea:	4632      	mov	r2, r6
 8017cec:	4638      	mov	r0, r7
 8017cee:	4798      	blx	r3
 8017cf0:	6923      	ldr	r3, [r4, #16]
 8017cf2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8017cf6:	3b01      	subs	r3, #1
 8017cf8:	f1a5 0b02 	sub.w	fp, r5, #2
 8017cfc:	6123      	str	r3, [r4, #16]
 8017cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d02:	4632      	mov	r2, r6
 8017d04:	4638      	mov	r0, r7
 8017d06:	4798      	blx	r3
 8017d08:	465d      	mov	r5, fp
 8017d0a:	6826      	ldr	r6, [r4, #0]
 8017d0c:	f016 0610 	ands.w	r6, r6, #16
 8017d10:	d17a      	bne.n	8017e08 <_scanf_float+0x3bc>
 8017d12:	702e      	strb	r6, [r5, #0]
 8017d14:	6823      	ldr	r3, [r4, #0]
 8017d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017d1e:	d142      	bne.n	8017da6 <_scanf_float+0x35a>
 8017d20:	9b02      	ldr	r3, [sp, #8]
 8017d22:	eba9 0303 	sub.w	r3, r9, r3
 8017d26:	425a      	negs	r2, r3
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d149      	bne.n	8017dc0 <_scanf_float+0x374>
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	4641      	mov	r1, r8
 8017d30:	4638      	mov	r0, r7
 8017d32:	f000 ff01 	bl	8018b38 <_strtod_r>
 8017d36:	6825      	ldr	r5, [r4, #0]
 8017d38:	f8da 3000 	ldr.w	r3, [sl]
 8017d3c:	f015 0f02 	tst.w	r5, #2
 8017d40:	f103 0204 	add.w	r2, r3, #4
 8017d44:	ec59 8b10 	vmov	r8, r9, d0
 8017d48:	f8ca 2000 	str.w	r2, [sl]
 8017d4c:	d043      	beq.n	8017dd6 <_scanf_float+0x38a>
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	e9c3 8900 	strd	r8, r9, [r3]
 8017d54:	68e3      	ldr	r3, [r4, #12]
 8017d56:	3301      	adds	r3, #1
 8017d58:	60e3      	str	r3, [r4, #12]
 8017d5a:	e6be      	b.n	8017ada <_scanf_float+0x8e>
 8017d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017d64:	4632      	mov	r2, r6
 8017d66:	4638      	mov	r0, r7
 8017d68:	4798      	blx	r3
 8017d6a:	6923      	ldr	r3, [r4, #16]
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	6123      	str	r3, [r4, #16]
 8017d70:	e7a6      	b.n	8017cc0 <_scanf_float+0x274>
 8017d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017d7a:	4632      	mov	r2, r6
 8017d7c:	4638      	mov	r0, r7
 8017d7e:	4798      	blx	r3
 8017d80:	6923      	ldr	r3, [r4, #16]
 8017d82:	3b01      	subs	r3, #1
 8017d84:	6123      	str	r3, [r4, #16]
 8017d86:	4545      	cmp	r5, r8
 8017d88:	d8f3      	bhi.n	8017d72 <_scanf_float+0x326>
 8017d8a:	e6a5      	b.n	8017ad8 <_scanf_float+0x8c>
 8017d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017d94:	4632      	mov	r2, r6
 8017d96:	4638      	mov	r0, r7
 8017d98:	4798      	blx	r3
 8017d9a:	6923      	ldr	r3, [r4, #16]
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	6123      	str	r3, [r4, #16]
 8017da0:	4545      	cmp	r5, r8
 8017da2:	d8f3      	bhi.n	8017d8c <_scanf_float+0x340>
 8017da4:	e698      	b.n	8017ad8 <_scanf_float+0x8c>
 8017da6:	9b03      	ldr	r3, [sp, #12]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d0bf      	beq.n	8017d2c <_scanf_float+0x2e0>
 8017dac:	9904      	ldr	r1, [sp, #16]
 8017dae:	230a      	movs	r3, #10
 8017db0:	4632      	mov	r2, r6
 8017db2:	3101      	adds	r1, #1
 8017db4:	4638      	mov	r0, r7
 8017db6:	f000 ff5f 	bl	8018c78 <_strtol_r>
 8017dba:	9b03      	ldr	r3, [sp, #12]
 8017dbc:	9d04      	ldr	r5, [sp, #16]
 8017dbe:	1ac2      	subs	r2, r0, r3
 8017dc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017dc4:	429d      	cmp	r5, r3
 8017dc6:	bf28      	it	cs
 8017dc8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8017dcc:	490f      	ldr	r1, [pc, #60]	; (8017e0c <_scanf_float+0x3c0>)
 8017dce:	4628      	mov	r0, r5
 8017dd0:	f000 f834 	bl	8017e3c <siprintf>
 8017dd4:	e7aa      	b.n	8017d2c <_scanf_float+0x2e0>
 8017dd6:	f015 0504 	ands.w	r5, r5, #4
 8017dda:	d1b8      	bne.n	8017d4e <_scanf_float+0x302>
 8017ddc:	681f      	ldr	r7, [r3, #0]
 8017dde:	ee10 2a10 	vmov	r2, s0
 8017de2:	464b      	mov	r3, r9
 8017de4:	ee10 0a10 	vmov	r0, s0
 8017de8:	4649      	mov	r1, r9
 8017dea:	f7e8 feaf 	bl	8000b4c <__aeabi_dcmpun>
 8017dee:	b128      	cbz	r0, 8017dfc <_scanf_float+0x3b0>
 8017df0:	4628      	mov	r0, r5
 8017df2:	f000 f81d 	bl	8017e30 <nanf>
 8017df6:	ed87 0a00 	vstr	s0, [r7]
 8017dfa:	e7ab      	b.n	8017d54 <_scanf_float+0x308>
 8017dfc:	4640      	mov	r0, r8
 8017dfe:	4649      	mov	r1, r9
 8017e00:	f7e8 ff02 	bl	8000c08 <__aeabi_d2f>
 8017e04:	6038      	str	r0, [r7, #0]
 8017e06:	e7a5      	b.n	8017d54 <_scanf_float+0x308>
 8017e08:	2600      	movs	r6, #0
 8017e0a:	e666      	b.n	8017ada <_scanf_float+0x8e>
 8017e0c:	0801e3a0 	.word	0x0801e3a0

08017e10 <_sbrk_r>:
 8017e10:	b538      	push	{r3, r4, r5, lr}
 8017e12:	4c06      	ldr	r4, [pc, #24]	; (8017e2c <_sbrk_r+0x1c>)
 8017e14:	2300      	movs	r3, #0
 8017e16:	4605      	mov	r5, r0
 8017e18:	4608      	mov	r0, r1
 8017e1a:	6023      	str	r3, [r4, #0]
 8017e1c:	f7fe fb2a 	bl	8016474 <_sbrk>
 8017e20:	1c43      	adds	r3, r0, #1
 8017e22:	d102      	bne.n	8017e2a <_sbrk_r+0x1a>
 8017e24:	6823      	ldr	r3, [r4, #0]
 8017e26:	b103      	cbz	r3, 8017e2a <_sbrk_r+0x1a>
 8017e28:	602b      	str	r3, [r5, #0]
 8017e2a:	bd38      	pop	{r3, r4, r5, pc}
 8017e2c:	20009f50 	.word	0x20009f50

08017e30 <nanf>:
 8017e30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e38 <nanf+0x8>
 8017e34:	4770      	bx	lr
 8017e36:	bf00      	nop
 8017e38:	7fc00000 	.word	0x7fc00000

08017e3c <siprintf>:
 8017e3c:	b40e      	push	{r1, r2, r3}
 8017e3e:	b500      	push	{lr}
 8017e40:	b09c      	sub	sp, #112	; 0x70
 8017e42:	ab1d      	add	r3, sp, #116	; 0x74
 8017e44:	9002      	str	r0, [sp, #8]
 8017e46:	9006      	str	r0, [sp, #24]
 8017e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e4c:	4809      	ldr	r0, [pc, #36]	; (8017e74 <siprintf+0x38>)
 8017e4e:	9107      	str	r1, [sp, #28]
 8017e50:	9104      	str	r1, [sp, #16]
 8017e52:	4909      	ldr	r1, [pc, #36]	; (8017e78 <siprintf+0x3c>)
 8017e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e58:	9105      	str	r1, [sp, #20]
 8017e5a:	6800      	ldr	r0, [r0, #0]
 8017e5c:	9301      	str	r3, [sp, #4]
 8017e5e:	a902      	add	r1, sp, #8
 8017e60:	f002 fd2c 	bl	801a8bc <_svfiprintf_r>
 8017e64:	9b02      	ldr	r3, [sp, #8]
 8017e66:	2200      	movs	r2, #0
 8017e68:	701a      	strb	r2, [r3, #0]
 8017e6a:	b01c      	add	sp, #112	; 0x70
 8017e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e70:	b003      	add	sp, #12
 8017e72:	4770      	bx	lr
 8017e74:	20000198 	.word	0x20000198
 8017e78:	ffff0208 	.word	0xffff0208

08017e7c <strcat>:
 8017e7c:	b510      	push	{r4, lr}
 8017e7e:	4603      	mov	r3, r0
 8017e80:	781a      	ldrb	r2, [r3, #0]
 8017e82:	1c5c      	adds	r4, r3, #1
 8017e84:	b93a      	cbnz	r2, 8017e96 <strcat+0x1a>
 8017e86:	3b01      	subs	r3, #1
 8017e88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e90:	2a00      	cmp	r2, #0
 8017e92:	d1f9      	bne.n	8017e88 <strcat+0xc>
 8017e94:	bd10      	pop	{r4, pc}
 8017e96:	4623      	mov	r3, r4
 8017e98:	e7f2      	b.n	8017e80 <strcat+0x4>

08017e9a <strchr>:
 8017e9a:	b2c9      	uxtb	r1, r1
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ea2:	b11a      	cbz	r2, 8017eac <strchr+0x12>
 8017ea4:	428a      	cmp	r2, r1
 8017ea6:	d1f9      	bne.n	8017e9c <strchr+0x2>
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	4770      	bx	lr
 8017eac:	2900      	cmp	r1, #0
 8017eae:	bf18      	it	ne
 8017eb0:	2300      	movne	r3, #0
 8017eb2:	e7f9      	b.n	8017ea8 <strchr+0xe>

08017eb4 <strcpy>:
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017eba:	f803 2b01 	strb.w	r2, [r3], #1
 8017ebe:	2a00      	cmp	r2, #0
 8017ec0:	d1f9      	bne.n	8017eb6 <strcpy+0x2>
 8017ec2:	4770      	bx	lr

08017ec4 <strncmp>:
 8017ec4:	b510      	push	{r4, lr}
 8017ec6:	b16a      	cbz	r2, 8017ee4 <strncmp+0x20>
 8017ec8:	3901      	subs	r1, #1
 8017eca:	1884      	adds	r4, r0, r2
 8017ecc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017ed0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017ed4:	4293      	cmp	r3, r2
 8017ed6:	d103      	bne.n	8017ee0 <strncmp+0x1c>
 8017ed8:	42a0      	cmp	r0, r4
 8017eda:	d001      	beq.n	8017ee0 <strncmp+0x1c>
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1f5      	bne.n	8017ecc <strncmp+0x8>
 8017ee0:	1a98      	subs	r0, r3, r2
 8017ee2:	bd10      	pop	{r4, pc}
 8017ee4:	4610      	mov	r0, r2
 8017ee6:	e7fc      	b.n	8017ee2 <strncmp+0x1e>

08017ee8 <strncpy>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	3901      	subs	r1, #1
 8017eec:	4604      	mov	r4, r0
 8017eee:	b902      	cbnz	r2, 8017ef2 <strncpy+0xa>
 8017ef0:	bd70      	pop	{r4, r5, r6, pc}
 8017ef2:	4623      	mov	r3, r4
 8017ef4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017ef8:	f803 5b01 	strb.w	r5, [r3], #1
 8017efc:	1e56      	subs	r6, r2, #1
 8017efe:	b92d      	cbnz	r5, 8017f0c <strncpy+0x24>
 8017f00:	4414      	add	r4, r2
 8017f02:	42a3      	cmp	r3, r4
 8017f04:	d0f4      	beq.n	8017ef0 <strncpy+0x8>
 8017f06:	f803 5b01 	strb.w	r5, [r3], #1
 8017f0a:	e7fa      	b.n	8017f02 <strncpy+0x1a>
 8017f0c:	461c      	mov	r4, r3
 8017f0e:	4632      	mov	r2, r6
 8017f10:	e7ed      	b.n	8017eee <strncpy+0x6>

08017f12 <sulp>:
 8017f12:	b570      	push	{r4, r5, r6, lr}
 8017f14:	4604      	mov	r4, r0
 8017f16:	460d      	mov	r5, r1
 8017f18:	ec45 4b10 	vmov	d0, r4, r5
 8017f1c:	4616      	mov	r6, r2
 8017f1e:	f002 fb31 	bl	801a584 <__ulp>
 8017f22:	ec51 0b10 	vmov	r0, r1, d0
 8017f26:	b17e      	cbz	r6, 8017f48 <sulp+0x36>
 8017f28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017f2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	dd09      	ble.n	8017f48 <sulp+0x36>
 8017f34:	051b      	lsls	r3, r3, #20
 8017f36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017f3a:	2400      	movs	r4, #0
 8017f3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017f40:	4622      	mov	r2, r4
 8017f42:	462b      	mov	r3, r5
 8017f44:	f7e8 fb68 	bl	8000618 <__aeabi_dmul>
 8017f48:	bd70      	pop	{r4, r5, r6, pc}
 8017f4a:	0000      	movs	r0, r0
 8017f4c:	0000      	movs	r0, r0
	...

08017f50 <_strtod_l>:
 8017f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f54:	461f      	mov	r7, r3
 8017f56:	b0a1      	sub	sp, #132	; 0x84
 8017f58:	2300      	movs	r3, #0
 8017f5a:	4681      	mov	r9, r0
 8017f5c:	4638      	mov	r0, r7
 8017f5e:	460e      	mov	r6, r1
 8017f60:	9217      	str	r2, [sp, #92]	; 0x5c
 8017f62:	931c      	str	r3, [sp, #112]	; 0x70
 8017f64:	f002 f81d 	bl	8019fa2 <__localeconv_l>
 8017f68:	4680      	mov	r8, r0
 8017f6a:	6800      	ldr	r0, [r0, #0]
 8017f6c:	f7e8 f93a 	bl	80001e4 <strlen>
 8017f70:	f04f 0a00 	mov.w	sl, #0
 8017f74:	4604      	mov	r4, r0
 8017f76:	f04f 0b00 	mov.w	fp, #0
 8017f7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8017f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f7e:	781a      	ldrb	r2, [r3, #0]
 8017f80:	2a0d      	cmp	r2, #13
 8017f82:	d832      	bhi.n	8017fea <_strtod_l+0x9a>
 8017f84:	2a09      	cmp	r2, #9
 8017f86:	d236      	bcs.n	8017ff6 <_strtod_l+0xa6>
 8017f88:	2a00      	cmp	r2, #0
 8017f8a:	d03e      	beq.n	801800a <_strtod_l+0xba>
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8017f90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017f92:	782b      	ldrb	r3, [r5, #0]
 8017f94:	2b30      	cmp	r3, #48	; 0x30
 8017f96:	f040 80ac 	bne.w	80180f2 <_strtod_l+0x1a2>
 8017f9a:	786b      	ldrb	r3, [r5, #1]
 8017f9c:	2b58      	cmp	r3, #88	; 0x58
 8017f9e:	d001      	beq.n	8017fa4 <_strtod_l+0x54>
 8017fa0:	2b78      	cmp	r3, #120	; 0x78
 8017fa2:	d167      	bne.n	8018074 <_strtod_l+0x124>
 8017fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fa6:	9301      	str	r3, [sp, #4]
 8017fa8:	ab1c      	add	r3, sp, #112	; 0x70
 8017faa:	9300      	str	r3, [sp, #0]
 8017fac:	9702      	str	r7, [sp, #8]
 8017fae:	ab1d      	add	r3, sp, #116	; 0x74
 8017fb0:	4a88      	ldr	r2, [pc, #544]	; (80181d4 <_strtod_l+0x284>)
 8017fb2:	a91b      	add	r1, sp, #108	; 0x6c
 8017fb4:	4648      	mov	r0, r9
 8017fb6:	f001 fd1a 	bl	80199ee <__gethex>
 8017fba:	f010 0407 	ands.w	r4, r0, #7
 8017fbe:	4606      	mov	r6, r0
 8017fc0:	d005      	beq.n	8017fce <_strtod_l+0x7e>
 8017fc2:	2c06      	cmp	r4, #6
 8017fc4:	d12b      	bne.n	801801e <_strtod_l+0xce>
 8017fc6:	3501      	adds	r5, #1
 8017fc8:	2300      	movs	r3, #0
 8017fca:	951b      	str	r5, [sp, #108]	; 0x6c
 8017fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8017fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	f040 859a 	bne.w	8018b0a <_strtod_l+0xbba>
 8017fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fd8:	b1e3      	cbz	r3, 8018014 <_strtod_l+0xc4>
 8017fda:	4652      	mov	r2, sl
 8017fdc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017fe0:	ec43 2b10 	vmov	d0, r2, r3
 8017fe4:	b021      	add	sp, #132	; 0x84
 8017fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fea:	2a2b      	cmp	r2, #43	; 0x2b
 8017fec:	d015      	beq.n	801801a <_strtod_l+0xca>
 8017fee:	2a2d      	cmp	r2, #45	; 0x2d
 8017ff0:	d004      	beq.n	8017ffc <_strtod_l+0xac>
 8017ff2:	2a20      	cmp	r2, #32
 8017ff4:	d1ca      	bne.n	8017f8c <_strtod_l+0x3c>
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ffa:	e7bf      	b.n	8017f7c <_strtod_l+0x2c>
 8017ffc:	2201      	movs	r2, #1
 8017ffe:	920d      	str	r2, [sp, #52]	; 0x34
 8018000:	1c5a      	adds	r2, r3, #1
 8018002:	921b      	str	r2, [sp, #108]	; 0x6c
 8018004:	785b      	ldrb	r3, [r3, #1]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1c2      	bne.n	8017f90 <_strtod_l+0x40>
 801800a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801800c:	961b      	str	r6, [sp, #108]	; 0x6c
 801800e:	2b00      	cmp	r3, #0
 8018010:	f040 8579 	bne.w	8018b06 <_strtod_l+0xbb6>
 8018014:	4652      	mov	r2, sl
 8018016:	465b      	mov	r3, fp
 8018018:	e7e2      	b.n	8017fe0 <_strtod_l+0x90>
 801801a:	2200      	movs	r2, #0
 801801c:	e7ef      	b.n	8017ffe <_strtod_l+0xae>
 801801e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018020:	b13a      	cbz	r2, 8018032 <_strtod_l+0xe2>
 8018022:	2135      	movs	r1, #53	; 0x35
 8018024:	a81e      	add	r0, sp, #120	; 0x78
 8018026:	f002 fba5 	bl	801a774 <__copybits>
 801802a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801802c:	4648      	mov	r0, r9
 801802e:	f002 f811 	bl	801a054 <_Bfree>
 8018032:	3c01      	subs	r4, #1
 8018034:	2c04      	cmp	r4, #4
 8018036:	d806      	bhi.n	8018046 <_strtod_l+0xf6>
 8018038:	e8df f004 	tbb	[pc, r4]
 801803c:	1714030a 	.word	0x1714030a
 8018040:	0a          	.byte	0x0a
 8018041:	00          	.byte	0x00
 8018042:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8018046:	0730      	lsls	r0, r6, #28
 8018048:	d5c1      	bpl.n	8017fce <_strtod_l+0x7e>
 801804a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801804e:	e7be      	b.n	8017fce <_strtod_l+0x7e>
 8018050:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8018054:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018056:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801805a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801805e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018062:	e7f0      	b.n	8018046 <_strtod_l+0xf6>
 8018064:	f8df b170 	ldr.w	fp, [pc, #368]	; 80181d8 <_strtod_l+0x288>
 8018068:	e7ed      	b.n	8018046 <_strtod_l+0xf6>
 801806a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801806e:	f04f 3aff 	mov.w	sl, #4294967295
 8018072:	e7e8      	b.n	8018046 <_strtod_l+0xf6>
 8018074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018076:	1c5a      	adds	r2, r3, #1
 8018078:	921b      	str	r2, [sp, #108]	; 0x6c
 801807a:	785b      	ldrb	r3, [r3, #1]
 801807c:	2b30      	cmp	r3, #48	; 0x30
 801807e:	d0f9      	beq.n	8018074 <_strtod_l+0x124>
 8018080:	2b00      	cmp	r3, #0
 8018082:	d0a4      	beq.n	8017fce <_strtod_l+0x7e>
 8018084:	2301      	movs	r3, #1
 8018086:	2500      	movs	r5, #0
 8018088:	9306      	str	r3, [sp, #24]
 801808a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801808c:	9308      	str	r3, [sp, #32]
 801808e:	9507      	str	r5, [sp, #28]
 8018090:	9505      	str	r5, [sp, #20]
 8018092:	220a      	movs	r2, #10
 8018094:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018096:	7807      	ldrb	r7, [r0, #0]
 8018098:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801809c:	b2d9      	uxtb	r1, r3
 801809e:	2909      	cmp	r1, #9
 80180a0:	d929      	bls.n	80180f6 <_strtod_l+0x1a6>
 80180a2:	4622      	mov	r2, r4
 80180a4:	f8d8 1000 	ldr.w	r1, [r8]
 80180a8:	f7ff ff0c 	bl	8017ec4 <strncmp>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d031      	beq.n	8018114 <_strtod_l+0x1c4>
 80180b0:	2000      	movs	r0, #0
 80180b2:	9c05      	ldr	r4, [sp, #20]
 80180b4:	9004      	str	r0, [sp, #16]
 80180b6:	463b      	mov	r3, r7
 80180b8:	4602      	mov	r2, r0
 80180ba:	2b65      	cmp	r3, #101	; 0x65
 80180bc:	d001      	beq.n	80180c2 <_strtod_l+0x172>
 80180be:	2b45      	cmp	r3, #69	; 0x45
 80180c0:	d114      	bne.n	80180ec <_strtod_l+0x19c>
 80180c2:	b924      	cbnz	r4, 80180ce <_strtod_l+0x17e>
 80180c4:	b910      	cbnz	r0, 80180cc <_strtod_l+0x17c>
 80180c6:	9b06      	ldr	r3, [sp, #24]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d09e      	beq.n	801800a <_strtod_l+0xba>
 80180cc:	2400      	movs	r4, #0
 80180ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80180d0:	1c73      	adds	r3, r6, #1
 80180d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80180d4:	7873      	ldrb	r3, [r6, #1]
 80180d6:	2b2b      	cmp	r3, #43	; 0x2b
 80180d8:	d078      	beq.n	80181cc <_strtod_l+0x27c>
 80180da:	2b2d      	cmp	r3, #45	; 0x2d
 80180dc:	d070      	beq.n	80181c0 <_strtod_l+0x270>
 80180de:	f04f 0c00 	mov.w	ip, #0
 80180e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80180e6:	2f09      	cmp	r7, #9
 80180e8:	d97c      	bls.n	80181e4 <_strtod_l+0x294>
 80180ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80180ec:	f04f 0e00 	mov.w	lr, #0
 80180f0:	e09a      	b.n	8018228 <_strtod_l+0x2d8>
 80180f2:	2300      	movs	r3, #0
 80180f4:	e7c7      	b.n	8018086 <_strtod_l+0x136>
 80180f6:	9905      	ldr	r1, [sp, #20]
 80180f8:	2908      	cmp	r1, #8
 80180fa:	bfdd      	ittte	le
 80180fc:	9907      	ldrle	r1, [sp, #28]
 80180fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8018102:	9307      	strle	r3, [sp, #28]
 8018104:	fb02 3505 	mlagt	r5, r2, r5, r3
 8018108:	9b05      	ldr	r3, [sp, #20]
 801810a:	3001      	adds	r0, #1
 801810c:	3301      	adds	r3, #1
 801810e:	9305      	str	r3, [sp, #20]
 8018110:	901b      	str	r0, [sp, #108]	; 0x6c
 8018112:	e7bf      	b.n	8018094 <_strtod_l+0x144>
 8018114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018116:	191a      	adds	r2, r3, r4
 8018118:	921b      	str	r2, [sp, #108]	; 0x6c
 801811a:	9a05      	ldr	r2, [sp, #20]
 801811c:	5d1b      	ldrb	r3, [r3, r4]
 801811e:	2a00      	cmp	r2, #0
 8018120:	d037      	beq.n	8018192 <_strtod_l+0x242>
 8018122:	9c05      	ldr	r4, [sp, #20]
 8018124:	4602      	mov	r2, r0
 8018126:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801812a:	2909      	cmp	r1, #9
 801812c:	d913      	bls.n	8018156 <_strtod_l+0x206>
 801812e:	2101      	movs	r1, #1
 8018130:	9104      	str	r1, [sp, #16]
 8018132:	e7c2      	b.n	80180ba <_strtod_l+0x16a>
 8018134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018136:	1c5a      	adds	r2, r3, #1
 8018138:	921b      	str	r2, [sp, #108]	; 0x6c
 801813a:	785b      	ldrb	r3, [r3, #1]
 801813c:	3001      	adds	r0, #1
 801813e:	2b30      	cmp	r3, #48	; 0x30
 8018140:	d0f8      	beq.n	8018134 <_strtod_l+0x1e4>
 8018142:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018146:	2a08      	cmp	r2, #8
 8018148:	f200 84e4 	bhi.w	8018b14 <_strtod_l+0xbc4>
 801814c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801814e:	9208      	str	r2, [sp, #32]
 8018150:	4602      	mov	r2, r0
 8018152:	2000      	movs	r0, #0
 8018154:	4604      	mov	r4, r0
 8018156:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801815a:	f100 0101 	add.w	r1, r0, #1
 801815e:	d012      	beq.n	8018186 <_strtod_l+0x236>
 8018160:	440a      	add	r2, r1
 8018162:	eb00 0c04 	add.w	ip, r0, r4
 8018166:	4621      	mov	r1, r4
 8018168:	270a      	movs	r7, #10
 801816a:	458c      	cmp	ip, r1
 801816c:	d113      	bne.n	8018196 <_strtod_l+0x246>
 801816e:	1821      	adds	r1, r4, r0
 8018170:	2908      	cmp	r1, #8
 8018172:	f104 0401 	add.w	r4, r4, #1
 8018176:	4404      	add	r4, r0
 8018178:	dc19      	bgt.n	80181ae <_strtod_l+0x25e>
 801817a:	9b07      	ldr	r3, [sp, #28]
 801817c:	210a      	movs	r1, #10
 801817e:	fb01 e303 	mla	r3, r1, r3, lr
 8018182:	9307      	str	r3, [sp, #28]
 8018184:	2100      	movs	r1, #0
 8018186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018188:	1c58      	adds	r0, r3, #1
 801818a:	901b      	str	r0, [sp, #108]	; 0x6c
 801818c:	785b      	ldrb	r3, [r3, #1]
 801818e:	4608      	mov	r0, r1
 8018190:	e7c9      	b.n	8018126 <_strtod_l+0x1d6>
 8018192:	9805      	ldr	r0, [sp, #20]
 8018194:	e7d3      	b.n	801813e <_strtod_l+0x1ee>
 8018196:	2908      	cmp	r1, #8
 8018198:	f101 0101 	add.w	r1, r1, #1
 801819c:	dc03      	bgt.n	80181a6 <_strtod_l+0x256>
 801819e:	9b07      	ldr	r3, [sp, #28]
 80181a0:	437b      	muls	r3, r7
 80181a2:	9307      	str	r3, [sp, #28]
 80181a4:	e7e1      	b.n	801816a <_strtod_l+0x21a>
 80181a6:	2910      	cmp	r1, #16
 80181a8:	bfd8      	it	le
 80181aa:	437d      	mulle	r5, r7
 80181ac:	e7dd      	b.n	801816a <_strtod_l+0x21a>
 80181ae:	2c10      	cmp	r4, #16
 80181b0:	bfdc      	itt	le
 80181b2:	210a      	movle	r1, #10
 80181b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80181b8:	e7e4      	b.n	8018184 <_strtod_l+0x234>
 80181ba:	2301      	movs	r3, #1
 80181bc:	9304      	str	r3, [sp, #16]
 80181be:	e781      	b.n	80180c4 <_strtod_l+0x174>
 80181c0:	f04f 0c01 	mov.w	ip, #1
 80181c4:	1cb3      	adds	r3, r6, #2
 80181c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80181c8:	78b3      	ldrb	r3, [r6, #2]
 80181ca:	e78a      	b.n	80180e2 <_strtod_l+0x192>
 80181cc:	f04f 0c00 	mov.w	ip, #0
 80181d0:	e7f8      	b.n	80181c4 <_strtod_l+0x274>
 80181d2:	bf00      	nop
 80181d4:	0801e3a8 	.word	0x0801e3a8
 80181d8:	7ff00000 	.word	0x7ff00000
 80181dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181de:	1c5f      	adds	r7, r3, #1
 80181e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80181e2:	785b      	ldrb	r3, [r3, #1]
 80181e4:	2b30      	cmp	r3, #48	; 0x30
 80181e6:	d0f9      	beq.n	80181dc <_strtod_l+0x28c>
 80181e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80181ec:	2f08      	cmp	r7, #8
 80181ee:	f63f af7d 	bhi.w	80180ec <_strtod_l+0x19c>
 80181f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80181f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181f8:	930a      	str	r3, [sp, #40]	; 0x28
 80181fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181fc:	1c5f      	adds	r7, r3, #1
 80181fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8018200:	785b      	ldrb	r3, [r3, #1]
 8018202:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8018206:	f1b8 0f09 	cmp.w	r8, #9
 801820a:	d937      	bls.n	801827c <_strtod_l+0x32c>
 801820c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801820e:	1a7f      	subs	r7, r7, r1
 8018210:	2f08      	cmp	r7, #8
 8018212:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018216:	dc37      	bgt.n	8018288 <_strtod_l+0x338>
 8018218:	45be      	cmp	lr, r7
 801821a:	bfa8      	it	ge
 801821c:	46be      	movge	lr, r7
 801821e:	f1bc 0f00 	cmp.w	ip, #0
 8018222:	d001      	beq.n	8018228 <_strtod_l+0x2d8>
 8018224:	f1ce 0e00 	rsb	lr, lr, #0
 8018228:	2c00      	cmp	r4, #0
 801822a:	d151      	bne.n	80182d0 <_strtod_l+0x380>
 801822c:	2800      	cmp	r0, #0
 801822e:	f47f aece 	bne.w	8017fce <_strtod_l+0x7e>
 8018232:	9a06      	ldr	r2, [sp, #24]
 8018234:	2a00      	cmp	r2, #0
 8018236:	f47f aeca 	bne.w	8017fce <_strtod_l+0x7e>
 801823a:	9a04      	ldr	r2, [sp, #16]
 801823c:	2a00      	cmp	r2, #0
 801823e:	f47f aee4 	bne.w	801800a <_strtod_l+0xba>
 8018242:	2b4e      	cmp	r3, #78	; 0x4e
 8018244:	d027      	beq.n	8018296 <_strtod_l+0x346>
 8018246:	dc21      	bgt.n	801828c <_strtod_l+0x33c>
 8018248:	2b49      	cmp	r3, #73	; 0x49
 801824a:	f47f aede 	bne.w	801800a <_strtod_l+0xba>
 801824e:	49a0      	ldr	r1, [pc, #640]	; (80184d0 <_strtod_l+0x580>)
 8018250:	a81b      	add	r0, sp, #108	; 0x6c
 8018252:	f001 fdff 	bl	8019e54 <__match>
 8018256:	2800      	cmp	r0, #0
 8018258:	f43f aed7 	beq.w	801800a <_strtod_l+0xba>
 801825c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801825e:	499d      	ldr	r1, [pc, #628]	; (80184d4 <_strtod_l+0x584>)
 8018260:	3b01      	subs	r3, #1
 8018262:	a81b      	add	r0, sp, #108	; 0x6c
 8018264:	931b      	str	r3, [sp, #108]	; 0x6c
 8018266:	f001 fdf5 	bl	8019e54 <__match>
 801826a:	b910      	cbnz	r0, 8018272 <_strtod_l+0x322>
 801826c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801826e:	3301      	adds	r3, #1
 8018270:	931b      	str	r3, [sp, #108]	; 0x6c
 8018272:	f8df b274 	ldr.w	fp, [pc, #628]	; 80184e8 <_strtod_l+0x598>
 8018276:	f04f 0a00 	mov.w	sl, #0
 801827a:	e6a8      	b.n	8017fce <_strtod_l+0x7e>
 801827c:	210a      	movs	r1, #10
 801827e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018282:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018286:	e7b8      	b.n	80181fa <_strtod_l+0x2aa>
 8018288:	46be      	mov	lr, r7
 801828a:	e7c8      	b.n	801821e <_strtod_l+0x2ce>
 801828c:	2b69      	cmp	r3, #105	; 0x69
 801828e:	d0de      	beq.n	801824e <_strtod_l+0x2fe>
 8018290:	2b6e      	cmp	r3, #110	; 0x6e
 8018292:	f47f aeba 	bne.w	801800a <_strtod_l+0xba>
 8018296:	4990      	ldr	r1, [pc, #576]	; (80184d8 <_strtod_l+0x588>)
 8018298:	a81b      	add	r0, sp, #108	; 0x6c
 801829a:	f001 fddb 	bl	8019e54 <__match>
 801829e:	2800      	cmp	r0, #0
 80182a0:	f43f aeb3 	beq.w	801800a <_strtod_l+0xba>
 80182a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	2b28      	cmp	r3, #40	; 0x28
 80182aa:	d10e      	bne.n	80182ca <_strtod_l+0x37a>
 80182ac:	aa1e      	add	r2, sp, #120	; 0x78
 80182ae:	498b      	ldr	r1, [pc, #556]	; (80184dc <_strtod_l+0x58c>)
 80182b0:	a81b      	add	r0, sp, #108	; 0x6c
 80182b2:	f001 fde3 	bl	8019e7c <__hexnan>
 80182b6:	2805      	cmp	r0, #5
 80182b8:	d107      	bne.n	80182ca <_strtod_l+0x37a>
 80182ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80182bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80182c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80182c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80182c8:	e681      	b.n	8017fce <_strtod_l+0x7e>
 80182ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80184f0 <_strtod_l+0x5a0>
 80182ce:	e7d2      	b.n	8018276 <_strtod_l+0x326>
 80182d0:	ebae 0302 	sub.w	r3, lr, r2
 80182d4:	9306      	str	r3, [sp, #24]
 80182d6:	9b05      	ldr	r3, [sp, #20]
 80182d8:	9807      	ldr	r0, [sp, #28]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	bf08      	it	eq
 80182de:	4623      	moveq	r3, r4
 80182e0:	2c10      	cmp	r4, #16
 80182e2:	9305      	str	r3, [sp, #20]
 80182e4:	46a0      	mov	r8, r4
 80182e6:	bfa8      	it	ge
 80182e8:	f04f 0810 	movge.w	r8, #16
 80182ec:	f7e8 f91a 	bl	8000524 <__aeabi_ui2d>
 80182f0:	2c09      	cmp	r4, #9
 80182f2:	4682      	mov	sl, r0
 80182f4:	468b      	mov	fp, r1
 80182f6:	dc13      	bgt.n	8018320 <_strtod_l+0x3d0>
 80182f8:	9b06      	ldr	r3, [sp, #24]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	f43f ae67 	beq.w	8017fce <_strtod_l+0x7e>
 8018300:	9b06      	ldr	r3, [sp, #24]
 8018302:	dd7a      	ble.n	80183fa <_strtod_l+0x4aa>
 8018304:	2b16      	cmp	r3, #22
 8018306:	dc61      	bgt.n	80183cc <_strtod_l+0x47c>
 8018308:	4a75      	ldr	r2, [pc, #468]	; (80184e0 <_strtod_l+0x590>)
 801830a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801830e:	e9de 0100 	ldrd	r0, r1, [lr]
 8018312:	4652      	mov	r2, sl
 8018314:	465b      	mov	r3, fp
 8018316:	f7e8 f97f 	bl	8000618 <__aeabi_dmul>
 801831a:	4682      	mov	sl, r0
 801831c:	468b      	mov	fp, r1
 801831e:	e656      	b.n	8017fce <_strtod_l+0x7e>
 8018320:	4b6f      	ldr	r3, [pc, #444]	; (80184e0 <_strtod_l+0x590>)
 8018322:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018326:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801832a:	f7e8 f975 	bl	8000618 <__aeabi_dmul>
 801832e:	4606      	mov	r6, r0
 8018330:	4628      	mov	r0, r5
 8018332:	460f      	mov	r7, r1
 8018334:	f7e8 f8f6 	bl	8000524 <__aeabi_ui2d>
 8018338:	4602      	mov	r2, r0
 801833a:	460b      	mov	r3, r1
 801833c:	4630      	mov	r0, r6
 801833e:	4639      	mov	r1, r7
 8018340:	f7e7 ffb4 	bl	80002ac <__adddf3>
 8018344:	2c0f      	cmp	r4, #15
 8018346:	4682      	mov	sl, r0
 8018348:	468b      	mov	fp, r1
 801834a:	ddd5      	ble.n	80182f8 <_strtod_l+0x3a8>
 801834c:	9b06      	ldr	r3, [sp, #24]
 801834e:	eba4 0808 	sub.w	r8, r4, r8
 8018352:	4498      	add	r8, r3
 8018354:	f1b8 0f00 	cmp.w	r8, #0
 8018358:	f340 8096 	ble.w	8018488 <_strtod_l+0x538>
 801835c:	f018 030f 	ands.w	r3, r8, #15
 8018360:	d00a      	beq.n	8018378 <_strtod_l+0x428>
 8018362:	495f      	ldr	r1, [pc, #380]	; (80184e0 <_strtod_l+0x590>)
 8018364:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018368:	4652      	mov	r2, sl
 801836a:	465b      	mov	r3, fp
 801836c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018370:	f7e8 f952 	bl	8000618 <__aeabi_dmul>
 8018374:	4682      	mov	sl, r0
 8018376:	468b      	mov	fp, r1
 8018378:	f038 080f 	bics.w	r8, r8, #15
 801837c:	d073      	beq.n	8018466 <_strtod_l+0x516>
 801837e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018382:	dd47      	ble.n	8018414 <_strtod_l+0x4c4>
 8018384:	2400      	movs	r4, #0
 8018386:	46a0      	mov	r8, r4
 8018388:	9407      	str	r4, [sp, #28]
 801838a:	9405      	str	r4, [sp, #20]
 801838c:	2322      	movs	r3, #34	; 0x22
 801838e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80184e8 <_strtod_l+0x598>
 8018392:	f8c9 3000 	str.w	r3, [r9]
 8018396:	f04f 0a00 	mov.w	sl, #0
 801839a:	9b07      	ldr	r3, [sp, #28]
 801839c:	2b00      	cmp	r3, #0
 801839e:	f43f ae16 	beq.w	8017fce <_strtod_l+0x7e>
 80183a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80183a4:	4648      	mov	r0, r9
 80183a6:	f001 fe55 	bl	801a054 <_Bfree>
 80183aa:	9905      	ldr	r1, [sp, #20]
 80183ac:	4648      	mov	r0, r9
 80183ae:	f001 fe51 	bl	801a054 <_Bfree>
 80183b2:	4641      	mov	r1, r8
 80183b4:	4648      	mov	r0, r9
 80183b6:	f001 fe4d 	bl	801a054 <_Bfree>
 80183ba:	9907      	ldr	r1, [sp, #28]
 80183bc:	4648      	mov	r0, r9
 80183be:	f001 fe49 	bl	801a054 <_Bfree>
 80183c2:	4621      	mov	r1, r4
 80183c4:	4648      	mov	r0, r9
 80183c6:	f001 fe45 	bl	801a054 <_Bfree>
 80183ca:	e600      	b.n	8017fce <_strtod_l+0x7e>
 80183cc:	9a06      	ldr	r2, [sp, #24]
 80183ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80183d2:	4293      	cmp	r3, r2
 80183d4:	dbba      	blt.n	801834c <_strtod_l+0x3fc>
 80183d6:	4d42      	ldr	r5, [pc, #264]	; (80184e0 <_strtod_l+0x590>)
 80183d8:	f1c4 040f 	rsb	r4, r4, #15
 80183dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80183e0:	4652      	mov	r2, sl
 80183e2:	465b      	mov	r3, fp
 80183e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80183e8:	f7e8 f916 	bl	8000618 <__aeabi_dmul>
 80183ec:	9b06      	ldr	r3, [sp, #24]
 80183ee:	1b1c      	subs	r4, r3, r4
 80183f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80183f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80183f8:	e78d      	b.n	8018316 <_strtod_l+0x3c6>
 80183fa:	f113 0f16 	cmn.w	r3, #22
 80183fe:	dba5      	blt.n	801834c <_strtod_l+0x3fc>
 8018400:	4a37      	ldr	r2, [pc, #220]	; (80184e0 <_strtod_l+0x590>)
 8018402:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8018406:	e9d2 2300 	ldrd	r2, r3, [r2]
 801840a:	4650      	mov	r0, sl
 801840c:	4659      	mov	r1, fp
 801840e:	f7e8 fa2d 	bl	800086c <__aeabi_ddiv>
 8018412:	e782      	b.n	801831a <_strtod_l+0x3ca>
 8018414:	2300      	movs	r3, #0
 8018416:	4e33      	ldr	r6, [pc, #204]	; (80184e4 <_strtod_l+0x594>)
 8018418:	ea4f 1828 	mov.w	r8, r8, asr #4
 801841c:	4650      	mov	r0, sl
 801841e:	4659      	mov	r1, fp
 8018420:	461d      	mov	r5, r3
 8018422:	f1b8 0f01 	cmp.w	r8, #1
 8018426:	dc21      	bgt.n	801846c <_strtod_l+0x51c>
 8018428:	b10b      	cbz	r3, 801842e <_strtod_l+0x4de>
 801842a:	4682      	mov	sl, r0
 801842c:	468b      	mov	fp, r1
 801842e:	4b2d      	ldr	r3, [pc, #180]	; (80184e4 <_strtod_l+0x594>)
 8018430:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018434:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018438:	4652      	mov	r2, sl
 801843a:	465b      	mov	r3, fp
 801843c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018440:	f7e8 f8ea 	bl	8000618 <__aeabi_dmul>
 8018444:	4b28      	ldr	r3, [pc, #160]	; (80184e8 <_strtod_l+0x598>)
 8018446:	460a      	mov	r2, r1
 8018448:	400b      	ands	r3, r1
 801844a:	4928      	ldr	r1, [pc, #160]	; (80184ec <_strtod_l+0x59c>)
 801844c:	428b      	cmp	r3, r1
 801844e:	4682      	mov	sl, r0
 8018450:	d898      	bhi.n	8018384 <_strtod_l+0x434>
 8018452:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018456:	428b      	cmp	r3, r1
 8018458:	bf86      	itte	hi
 801845a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80184f4 <_strtod_l+0x5a4>
 801845e:	f04f 3aff 	movhi.w	sl, #4294967295
 8018462:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018466:	2300      	movs	r3, #0
 8018468:	9304      	str	r3, [sp, #16]
 801846a:	e077      	b.n	801855c <_strtod_l+0x60c>
 801846c:	f018 0f01 	tst.w	r8, #1
 8018470:	d006      	beq.n	8018480 <_strtod_l+0x530>
 8018472:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8018476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847a:	f7e8 f8cd 	bl	8000618 <__aeabi_dmul>
 801847e:	2301      	movs	r3, #1
 8018480:	3501      	adds	r5, #1
 8018482:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018486:	e7cc      	b.n	8018422 <_strtod_l+0x4d2>
 8018488:	d0ed      	beq.n	8018466 <_strtod_l+0x516>
 801848a:	f1c8 0800 	rsb	r8, r8, #0
 801848e:	f018 020f 	ands.w	r2, r8, #15
 8018492:	d00a      	beq.n	80184aa <_strtod_l+0x55a>
 8018494:	4b12      	ldr	r3, [pc, #72]	; (80184e0 <_strtod_l+0x590>)
 8018496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801849a:	4650      	mov	r0, sl
 801849c:	4659      	mov	r1, fp
 801849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a2:	f7e8 f9e3 	bl	800086c <__aeabi_ddiv>
 80184a6:	4682      	mov	sl, r0
 80184a8:	468b      	mov	fp, r1
 80184aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80184ae:	d0da      	beq.n	8018466 <_strtod_l+0x516>
 80184b0:	f1b8 0f1f 	cmp.w	r8, #31
 80184b4:	dd20      	ble.n	80184f8 <_strtod_l+0x5a8>
 80184b6:	2400      	movs	r4, #0
 80184b8:	46a0      	mov	r8, r4
 80184ba:	9407      	str	r4, [sp, #28]
 80184bc:	9405      	str	r4, [sp, #20]
 80184be:	2322      	movs	r3, #34	; 0x22
 80184c0:	f04f 0a00 	mov.w	sl, #0
 80184c4:	f04f 0b00 	mov.w	fp, #0
 80184c8:	f8c9 3000 	str.w	r3, [r9]
 80184cc:	e765      	b.n	801839a <_strtod_l+0x44a>
 80184ce:	bf00      	nop
 80184d0:	0801e371 	.word	0x0801e371
 80184d4:	0801e3fb 	.word	0x0801e3fb
 80184d8:	0801e379 	.word	0x0801e379
 80184dc:	0801e3bc 	.word	0x0801e3bc
 80184e0:	0801e438 	.word	0x0801e438
 80184e4:	0801e410 	.word	0x0801e410
 80184e8:	7ff00000 	.word	0x7ff00000
 80184ec:	7ca00000 	.word	0x7ca00000
 80184f0:	fff80000 	.word	0xfff80000
 80184f4:	7fefffff 	.word	0x7fefffff
 80184f8:	f018 0310 	ands.w	r3, r8, #16
 80184fc:	bf18      	it	ne
 80184fe:	236a      	movne	r3, #106	; 0x6a
 8018500:	4da0      	ldr	r5, [pc, #640]	; (8018784 <_strtod_l+0x834>)
 8018502:	9304      	str	r3, [sp, #16]
 8018504:	4650      	mov	r0, sl
 8018506:	4659      	mov	r1, fp
 8018508:	2300      	movs	r3, #0
 801850a:	f1b8 0f00 	cmp.w	r8, #0
 801850e:	f300 810a 	bgt.w	8018726 <_strtod_l+0x7d6>
 8018512:	b10b      	cbz	r3, 8018518 <_strtod_l+0x5c8>
 8018514:	4682      	mov	sl, r0
 8018516:	468b      	mov	fp, r1
 8018518:	9b04      	ldr	r3, [sp, #16]
 801851a:	b1bb      	cbz	r3, 801854c <_strtod_l+0x5fc>
 801851c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018520:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018524:	2b00      	cmp	r3, #0
 8018526:	4659      	mov	r1, fp
 8018528:	dd10      	ble.n	801854c <_strtod_l+0x5fc>
 801852a:	2b1f      	cmp	r3, #31
 801852c:	f340 8107 	ble.w	801873e <_strtod_l+0x7ee>
 8018530:	2b34      	cmp	r3, #52	; 0x34
 8018532:	bfde      	ittt	le
 8018534:	3b20      	suble	r3, #32
 8018536:	f04f 32ff 	movle.w	r2, #4294967295
 801853a:	fa02 f303 	lslle.w	r3, r2, r3
 801853e:	f04f 0a00 	mov.w	sl, #0
 8018542:	bfcc      	ite	gt
 8018544:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018548:	ea03 0b01 	andle.w	fp, r3, r1
 801854c:	2200      	movs	r2, #0
 801854e:	2300      	movs	r3, #0
 8018550:	4650      	mov	r0, sl
 8018552:	4659      	mov	r1, fp
 8018554:	f7e8 fac8 	bl	8000ae8 <__aeabi_dcmpeq>
 8018558:	2800      	cmp	r0, #0
 801855a:	d1ac      	bne.n	80184b6 <_strtod_l+0x566>
 801855c:	9b07      	ldr	r3, [sp, #28]
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	9a05      	ldr	r2, [sp, #20]
 8018562:	9908      	ldr	r1, [sp, #32]
 8018564:	4623      	mov	r3, r4
 8018566:	4648      	mov	r0, r9
 8018568:	f001 fdc6 	bl	801a0f8 <__s2b>
 801856c:	9007      	str	r0, [sp, #28]
 801856e:	2800      	cmp	r0, #0
 8018570:	f43f af08 	beq.w	8018384 <_strtod_l+0x434>
 8018574:	9a06      	ldr	r2, [sp, #24]
 8018576:	9b06      	ldr	r3, [sp, #24]
 8018578:	2a00      	cmp	r2, #0
 801857a:	f1c3 0300 	rsb	r3, r3, #0
 801857e:	bfa8      	it	ge
 8018580:	2300      	movge	r3, #0
 8018582:	930e      	str	r3, [sp, #56]	; 0x38
 8018584:	2400      	movs	r4, #0
 8018586:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801858a:	9316      	str	r3, [sp, #88]	; 0x58
 801858c:	46a0      	mov	r8, r4
 801858e:	9b07      	ldr	r3, [sp, #28]
 8018590:	4648      	mov	r0, r9
 8018592:	6859      	ldr	r1, [r3, #4]
 8018594:	f001 fd2a 	bl	8019fec <_Balloc>
 8018598:	9005      	str	r0, [sp, #20]
 801859a:	2800      	cmp	r0, #0
 801859c:	f43f aef6 	beq.w	801838c <_strtod_l+0x43c>
 80185a0:	9b07      	ldr	r3, [sp, #28]
 80185a2:	691a      	ldr	r2, [r3, #16]
 80185a4:	3202      	adds	r2, #2
 80185a6:	f103 010c 	add.w	r1, r3, #12
 80185aa:	0092      	lsls	r2, r2, #2
 80185ac:	300c      	adds	r0, #12
 80185ae:	f7fe fd35 	bl	801701c <memcpy>
 80185b2:	aa1e      	add	r2, sp, #120	; 0x78
 80185b4:	a91d      	add	r1, sp, #116	; 0x74
 80185b6:	ec4b ab10 	vmov	d0, sl, fp
 80185ba:	4648      	mov	r0, r9
 80185bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80185c0:	f002 f856 	bl	801a670 <__d2b>
 80185c4:	901c      	str	r0, [sp, #112]	; 0x70
 80185c6:	2800      	cmp	r0, #0
 80185c8:	f43f aee0 	beq.w	801838c <_strtod_l+0x43c>
 80185cc:	2101      	movs	r1, #1
 80185ce:	4648      	mov	r0, r9
 80185d0:	f001 fe1e 	bl	801a210 <__i2b>
 80185d4:	4680      	mov	r8, r0
 80185d6:	2800      	cmp	r0, #0
 80185d8:	f43f aed8 	beq.w	801838c <_strtod_l+0x43c>
 80185dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80185de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80185e0:	2e00      	cmp	r6, #0
 80185e2:	bfab      	itete	ge
 80185e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80185e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80185e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80185ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80185ec:	bfac      	ite	ge
 80185ee:	18f7      	addge	r7, r6, r3
 80185f0:	1b9d      	sublt	r5, r3, r6
 80185f2:	9b04      	ldr	r3, [sp, #16]
 80185f4:	1af6      	subs	r6, r6, r3
 80185f6:	4416      	add	r6, r2
 80185f8:	4b63      	ldr	r3, [pc, #396]	; (8018788 <_strtod_l+0x838>)
 80185fa:	3e01      	subs	r6, #1
 80185fc:	429e      	cmp	r6, r3
 80185fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018602:	f280 80af 	bge.w	8018764 <_strtod_l+0x814>
 8018606:	1b9b      	subs	r3, r3, r6
 8018608:	2b1f      	cmp	r3, #31
 801860a:	eba2 0203 	sub.w	r2, r2, r3
 801860e:	f04f 0101 	mov.w	r1, #1
 8018612:	f300 809b 	bgt.w	801874c <_strtod_l+0x7fc>
 8018616:	fa01 f303 	lsl.w	r3, r1, r3
 801861a:	930f      	str	r3, [sp, #60]	; 0x3c
 801861c:	2300      	movs	r3, #0
 801861e:	930a      	str	r3, [sp, #40]	; 0x28
 8018620:	18be      	adds	r6, r7, r2
 8018622:	9b04      	ldr	r3, [sp, #16]
 8018624:	42b7      	cmp	r7, r6
 8018626:	4415      	add	r5, r2
 8018628:	441d      	add	r5, r3
 801862a:	463b      	mov	r3, r7
 801862c:	bfa8      	it	ge
 801862e:	4633      	movge	r3, r6
 8018630:	42ab      	cmp	r3, r5
 8018632:	bfa8      	it	ge
 8018634:	462b      	movge	r3, r5
 8018636:	2b00      	cmp	r3, #0
 8018638:	bfc2      	ittt	gt
 801863a:	1af6      	subgt	r6, r6, r3
 801863c:	1aed      	subgt	r5, r5, r3
 801863e:	1aff      	subgt	r7, r7, r3
 8018640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018642:	b1bb      	cbz	r3, 8018674 <_strtod_l+0x724>
 8018644:	4641      	mov	r1, r8
 8018646:	461a      	mov	r2, r3
 8018648:	4648      	mov	r0, r9
 801864a:	f001 fe81 	bl	801a350 <__pow5mult>
 801864e:	4680      	mov	r8, r0
 8018650:	2800      	cmp	r0, #0
 8018652:	f43f ae9b 	beq.w	801838c <_strtod_l+0x43c>
 8018656:	4601      	mov	r1, r0
 8018658:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801865a:	4648      	mov	r0, r9
 801865c:	f001 fde1 	bl	801a222 <__multiply>
 8018660:	900c      	str	r0, [sp, #48]	; 0x30
 8018662:	2800      	cmp	r0, #0
 8018664:	f43f ae92 	beq.w	801838c <_strtod_l+0x43c>
 8018668:	991c      	ldr	r1, [sp, #112]	; 0x70
 801866a:	4648      	mov	r0, r9
 801866c:	f001 fcf2 	bl	801a054 <_Bfree>
 8018670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018672:	931c      	str	r3, [sp, #112]	; 0x70
 8018674:	2e00      	cmp	r6, #0
 8018676:	dc7a      	bgt.n	801876e <_strtod_l+0x81e>
 8018678:	9b06      	ldr	r3, [sp, #24]
 801867a:	2b00      	cmp	r3, #0
 801867c:	dd08      	ble.n	8018690 <_strtod_l+0x740>
 801867e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018680:	9905      	ldr	r1, [sp, #20]
 8018682:	4648      	mov	r0, r9
 8018684:	f001 fe64 	bl	801a350 <__pow5mult>
 8018688:	9005      	str	r0, [sp, #20]
 801868a:	2800      	cmp	r0, #0
 801868c:	f43f ae7e 	beq.w	801838c <_strtod_l+0x43c>
 8018690:	2d00      	cmp	r5, #0
 8018692:	dd08      	ble.n	80186a6 <_strtod_l+0x756>
 8018694:	462a      	mov	r2, r5
 8018696:	9905      	ldr	r1, [sp, #20]
 8018698:	4648      	mov	r0, r9
 801869a:	f001 fea7 	bl	801a3ec <__lshift>
 801869e:	9005      	str	r0, [sp, #20]
 80186a0:	2800      	cmp	r0, #0
 80186a2:	f43f ae73 	beq.w	801838c <_strtod_l+0x43c>
 80186a6:	2f00      	cmp	r7, #0
 80186a8:	dd08      	ble.n	80186bc <_strtod_l+0x76c>
 80186aa:	4641      	mov	r1, r8
 80186ac:	463a      	mov	r2, r7
 80186ae:	4648      	mov	r0, r9
 80186b0:	f001 fe9c 	bl	801a3ec <__lshift>
 80186b4:	4680      	mov	r8, r0
 80186b6:	2800      	cmp	r0, #0
 80186b8:	f43f ae68 	beq.w	801838c <_strtod_l+0x43c>
 80186bc:	9a05      	ldr	r2, [sp, #20]
 80186be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80186c0:	4648      	mov	r0, r9
 80186c2:	f001 ff01 	bl	801a4c8 <__mdiff>
 80186c6:	4604      	mov	r4, r0
 80186c8:	2800      	cmp	r0, #0
 80186ca:	f43f ae5f 	beq.w	801838c <_strtod_l+0x43c>
 80186ce:	68c3      	ldr	r3, [r0, #12]
 80186d0:	930c      	str	r3, [sp, #48]	; 0x30
 80186d2:	2300      	movs	r3, #0
 80186d4:	60c3      	str	r3, [r0, #12]
 80186d6:	4641      	mov	r1, r8
 80186d8:	f001 fedc 	bl	801a494 <__mcmp>
 80186dc:	2800      	cmp	r0, #0
 80186de:	da55      	bge.n	801878c <_strtod_l+0x83c>
 80186e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186e2:	b9e3      	cbnz	r3, 801871e <_strtod_l+0x7ce>
 80186e4:	f1ba 0f00 	cmp.w	sl, #0
 80186e8:	d119      	bne.n	801871e <_strtod_l+0x7ce>
 80186ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80186ee:	b9b3      	cbnz	r3, 801871e <_strtod_l+0x7ce>
 80186f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80186f4:	0d1b      	lsrs	r3, r3, #20
 80186f6:	051b      	lsls	r3, r3, #20
 80186f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80186fc:	d90f      	bls.n	801871e <_strtod_l+0x7ce>
 80186fe:	6963      	ldr	r3, [r4, #20]
 8018700:	b913      	cbnz	r3, 8018708 <_strtod_l+0x7b8>
 8018702:	6923      	ldr	r3, [r4, #16]
 8018704:	2b01      	cmp	r3, #1
 8018706:	dd0a      	ble.n	801871e <_strtod_l+0x7ce>
 8018708:	4621      	mov	r1, r4
 801870a:	2201      	movs	r2, #1
 801870c:	4648      	mov	r0, r9
 801870e:	f001 fe6d 	bl	801a3ec <__lshift>
 8018712:	4641      	mov	r1, r8
 8018714:	4604      	mov	r4, r0
 8018716:	f001 febd 	bl	801a494 <__mcmp>
 801871a:	2800      	cmp	r0, #0
 801871c:	dc67      	bgt.n	80187ee <_strtod_l+0x89e>
 801871e:	9b04      	ldr	r3, [sp, #16]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d171      	bne.n	8018808 <_strtod_l+0x8b8>
 8018724:	e63d      	b.n	80183a2 <_strtod_l+0x452>
 8018726:	f018 0f01 	tst.w	r8, #1
 801872a:	d004      	beq.n	8018736 <_strtod_l+0x7e6>
 801872c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018730:	f7e7 ff72 	bl	8000618 <__aeabi_dmul>
 8018734:	2301      	movs	r3, #1
 8018736:	ea4f 0868 	mov.w	r8, r8, asr #1
 801873a:	3508      	adds	r5, #8
 801873c:	e6e5      	b.n	801850a <_strtod_l+0x5ba>
 801873e:	f04f 32ff 	mov.w	r2, #4294967295
 8018742:	fa02 f303 	lsl.w	r3, r2, r3
 8018746:	ea03 0a0a 	and.w	sl, r3, sl
 801874a:	e6ff      	b.n	801854c <_strtod_l+0x5fc>
 801874c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018750:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8018754:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8018758:	36e2      	adds	r6, #226	; 0xe2
 801875a:	fa01 f306 	lsl.w	r3, r1, r6
 801875e:	930a      	str	r3, [sp, #40]	; 0x28
 8018760:	910f      	str	r1, [sp, #60]	; 0x3c
 8018762:	e75d      	b.n	8018620 <_strtod_l+0x6d0>
 8018764:	2300      	movs	r3, #0
 8018766:	930a      	str	r3, [sp, #40]	; 0x28
 8018768:	2301      	movs	r3, #1
 801876a:	930f      	str	r3, [sp, #60]	; 0x3c
 801876c:	e758      	b.n	8018620 <_strtod_l+0x6d0>
 801876e:	4632      	mov	r2, r6
 8018770:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018772:	4648      	mov	r0, r9
 8018774:	f001 fe3a 	bl	801a3ec <__lshift>
 8018778:	901c      	str	r0, [sp, #112]	; 0x70
 801877a:	2800      	cmp	r0, #0
 801877c:	f47f af7c 	bne.w	8018678 <_strtod_l+0x728>
 8018780:	e604      	b.n	801838c <_strtod_l+0x43c>
 8018782:	bf00      	nop
 8018784:	0801e3d0 	.word	0x0801e3d0
 8018788:	fffffc02 	.word	0xfffffc02
 801878c:	465d      	mov	r5, fp
 801878e:	f040 8086 	bne.w	801889e <_strtod_l+0x94e>
 8018792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018798:	b32a      	cbz	r2, 80187e6 <_strtod_l+0x896>
 801879a:	4aaf      	ldr	r2, [pc, #700]	; (8018a58 <_strtod_l+0xb08>)
 801879c:	4293      	cmp	r3, r2
 801879e:	d153      	bne.n	8018848 <_strtod_l+0x8f8>
 80187a0:	9b04      	ldr	r3, [sp, #16]
 80187a2:	4650      	mov	r0, sl
 80187a4:	b1d3      	cbz	r3, 80187dc <_strtod_l+0x88c>
 80187a6:	4aad      	ldr	r2, [pc, #692]	; (8018a5c <_strtod_l+0xb0c>)
 80187a8:	402a      	ands	r2, r5
 80187aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80187ae:	f04f 31ff 	mov.w	r1, #4294967295
 80187b2:	d816      	bhi.n	80187e2 <_strtod_l+0x892>
 80187b4:	0d12      	lsrs	r2, r2, #20
 80187b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80187ba:	fa01 f303 	lsl.w	r3, r1, r3
 80187be:	4298      	cmp	r0, r3
 80187c0:	d142      	bne.n	8018848 <_strtod_l+0x8f8>
 80187c2:	4ba7      	ldr	r3, [pc, #668]	; (8018a60 <_strtod_l+0xb10>)
 80187c4:	429d      	cmp	r5, r3
 80187c6:	d102      	bne.n	80187ce <_strtod_l+0x87e>
 80187c8:	3001      	adds	r0, #1
 80187ca:	f43f addf 	beq.w	801838c <_strtod_l+0x43c>
 80187ce:	4ba3      	ldr	r3, [pc, #652]	; (8018a5c <_strtod_l+0xb0c>)
 80187d0:	402b      	ands	r3, r5
 80187d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80187d6:	f04f 0a00 	mov.w	sl, #0
 80187da:	e7a0      	b.n	801871e <_strtod_l+0x7ce>
 80187dc:	f04f 33ff 	mov.w	r3, #4294967295
 80187e0:	e7ed      	b.n	80187be <_strtod_l+0x86e>
 80187e2:	460b      	mov	r3, r1
 80187e4:	e7eb      	b.n	80187be <_strtod_l+0x86e>
 80187e6:	bb7b      	cbnz	r3, 8018848 <_strtod_l+0x8f8>
 80187e8:	f1ba 0f00 	cmp.w	sl, #0
 80187ec:	d12c      	bne.n	8018848 <_strtod_l+0x8f8>
 80187ee:	9904      	ldr	r1, [sp, #16]
 80187f0:	4a9a      	ldr	r2, [pc, #616]	; (8018a5c <_strtod_l+0xb0c>)
 80187f2:	465b      	mov	r3, fp
 80187f4:	b1f1      	cbz	r1, 8018834 <_strtod_l+0x8e4>
 80187f6:	ea02 010b 	and.w	r1, r2, fp
 80187fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80187fe:	dc19      	bgt.n	8018834 <_strtod_l+0x8e4>
 8018800:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018804:	f77f ae5b 	ble.w	80184be <_strtod_l+0x56e>
 8018808:	4a96      	ldr	r2, [pc, #600]	; (8018a64 <_strtod_l+0xb14>)
 801880a:	2300      	movs	r3, #0
 801880c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8018810:	4650      	mov	r0, sl
 8018812:	4659      	mov	r1, fp
 8018814:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018818:	f7e7 fefe 	bl	8000618 <__aeabi_dmul>
 801881c:	4682      	mov	sl, r0
 801881e:	468b      	mov	fp, r1
 8018820:	2900      	cmp	r1, #0
 8018822:	f47f adbe 	bne.w	80183a2 <_strtod_l+0x452>
 8018826:	2800      	cmp	r0, #0
 8018828:	f47f adbb 	bne.w	80183a2 <_strtod_l+0x452>
 801882c:	2322      	movs	r3, #34	; 0x22
 801882e:	f8c9 3000 	str.w	r3, [r9]
 8018832:	e5b6      	b.n	80183a2 <_strtod_l+0x452>
 8018834:	4013      	ands	r3, r2
 8018836:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801883a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801883e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018842:	f04f 3aff 	mov.w	sl, #4294967295
 8018846:	e76a      	b.n	801871e <_strtod_l+0x7ce>
 8018848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801884a:	b193      	cbz	r3, 8018872 <_strtod_l+0x922>
 801884c:	422b      	tst	r3, r5
 801884e:	f43f af66 	beq.w	801871e <_strtod_l+0x7ce>
 8018852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018854:	9a04      	ldr	r2, [sp, #16]
 8018856:	4650      	mov	r0, sl
 8018858:	4659      	mov	r1, fp
 801885a:	b173      	cbz	r3, 801887a <_strtod_l+0x92a>
 801885c:	f7ff fb59 	bl	8017f12 <sulp>
 8018860:	4602      	mov	r2, r0
 8018862:	460b      	mov	r3, r1
 8018864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018868:	f7e7 fd20 	bl	80002ac <__adddf3>
 801886c:	4682      	mov	sl, r0
 801886e:	468b      	mov	fp, r1
 8018870:	e755      	b.n	801871e <_strtod_l+0x7ce>
 8018872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018874:	ea13 0f0a 	tst.w	r3, sl
 8018878:	e7e9      	b.n	801884e <_strtod_l+0x8fe>
 801887a:	f7ff fb4a 	bl	8017f12 <sulp>
 801887e:	4602      	mov	r2, r0
 8018880:	460b      	mov	r3, r1
 8018882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018886:	f7e7 fd0f 	bl	80002a8 <__aeabi_dsub>
 801888a:	2200      	movs	r2, #0
 801888c:	2300      	movs	r3, #0
 801888e:	4682      	mov	sl, r0
 8018890:	468b      	mov	fp, r1
 8018892:	f7e8 f929 	bl	8000ae8 <__aeabi_dcmpeq>
 8018896:	2800      	cmp	r0, #0
 8018898:	f47f ae11 	bne.w	80184be <_strtod_l+0x56e>
 801889c:	e73f      	b.n	801871e <_strtod_l+0x7ce>
 801889e:	4641      	mov	r1, r8
 80188a0:	4620      	mov	r0, r4
 80188a2:	f001 ff34 	bl	801a70e <__ratio>
 80188a6:	ec57 6b10 	vmov	r6, r7, d0
 80188aa:	2200      	movs	r2, #0
 80188ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80188b0:	ee10 0a10 	vmov	r0, s0
 80188b4:	4639      	mov	r1, r7
 80188b6:	f7e8 f92b 	bl	8000b10 <__aeabi_dcmple>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	d077      	beq.n	80189ae <_strtod_l+0xa5e>
 80188be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d04a      	beq.n	801895a <_strtod_l+0xa0a>
 80188c4:	4b68      	ldr	r3, [pc, #416]	; (8018a68 <_strtod_l+0xb18>)
 80188c6:	2200      	movs	r2, #0
 80188c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80188cc:	4f66      	ldr	r7, [pc, #408]	; (8018a68 <_strtod_l+0xb18>)
 80188ce:	2600      	movs	r6, #0
 80188d0:	4b62      	ldr	r3, [pc, #392]	; (8018a5c <_strtod_l+0xb0c>)
 80188d2:	402b      	ands	r3, r5
 80188d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80188d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188d8:	4b64      	ldr	r3, [pc, #400]	; (8018a6c <_strtod_l+0xb1c>)
 80188da:	429a      	cmp	r2, r3
 80188dc:	f040 80ce 	bne.w	8018a7c <_strtod_l+0xb2c>
 80188e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80188e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80188e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80188ec:	ec4b ab10 	vmov	d0, sl, fp
 80188f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80188f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80188f8:	f001 fe44 	bl	801a584 <__ulp>
 80188fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018900:	ec53 2b10 	vmov	r2, r3, d0
 8018904:	f7e7 fe88 	bl	8000618 <__aeabi_dmul>
 8018908:	4652      	mov	r2, sl
 801890a:	465b      	mov	r3, fp
 801890c:	f7e7 fcce 	bl	80002ac <__adddf3>
 8018910:	460b      	mov	r3, r1
 8018912:	4952      	ldr	r1, [pc, #328]	; (8018a5c <_strtod_l+0xb0c>)
 8018914:	4a56      	ldr	r2, [pc, #344]	; (8018a70 <_strtod_l+0xb20>)
 8018916:	4019      	ands	r1, r3
 8018918:	4291      	cmp	r1, r2
 801891a:	4682      	mov	sl, r0
 801891c:	d95b      	bls.n	80189d6 <_strtod_l+0xa86>
 801891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018920:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018924:	4293      	cmp	r3, r2
 8018926:	d103      	bne.n	8018930 <_strtod_l+0x9e0>
 8018928:	9b08      	ldr	r3, [sp, #32]
 801892a:	3301      	adds	r3, #1
 801892c:	f43f ad2e 	beq.w	801838c <_strtod_l+0x43c>
 8018930:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018a60 <_strtod_l+0xb10>
 8018934:	f04f 3aff 	mov.w	sl, #4294967295
 8018938:	991c      	ldr	r1, [sp, #112]	; 0x70
 801893a:	4648      	mov	r0, r9
 801893c:	f001 fb8a 	bl	801a054 <_Bfree>
 8018940:	9905      	ldr	r1, [sp, #20]
 8018942:	4648      	mov	r0, r9
 8018944:	f001 fb86 	bl	801a054 <_Bfree>
 8018948:	4641      	mov	r1, r8
 801894a:	4648      	mov	r0, r9
 801894c:	f001 fb82 	bl	801a054 <_Bfree>
 8018950:	4621      	mov	r1, r4
 8018952:	4648      	mov	r0, r9
 8018954:	f001 fb7e 	bl	801a054 <_Bfree>
 8018958:	e619      	b.n	801858e <_strtod_l+0x63e>
 801895a:	f1ba 0f00 	cmp.w	sl, #0
 801895e:	d11a      	bne.n	8018996 <_strtod_l+0xa46>
 8018960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018964:	b9eb      	cbnz	r3, 80189a2 <_strtod_l+0xa52>
 8018966:	2200      	movs	r2, #0
 8018968:	4b3f      	ldr	r3, [pc, #252]	; (8018a68 <_strtod_l+0xb18>)
 801896a:	4630      	mov	r0, r6
 801896c:	4639      	mov	r1, r7
 801896e:	f7e8 f8c5 	bl	8000afc <__aeabi_dcmplt>
 8018972:	b9c8      	cbnz	r0, 80189a8 <_strtod_l+0xa58>
 8018974:	4630      	mov	r0, r6
 8018976:	4639      	mov	r1, r7
 8018978:	2200      	movs	r2, #0
 801897a:	4b3e      	ldr	r3, [pc, #248]	; (8018a74 <_strtod_l+0xb24>)
 801897c:	f7e7 fe4c 	bl	8000618 <__aeabi_dmul>
 8018980:	4606      	mov	r6, r0
 8018982:	460f      	mov	r7, r1
 8018984:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018988:	9618      	str	r6, [sp, #96]	; 0x60
 801898a:	9319      	str	r3, [sp, #100]	; 0x64
 801898c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018990:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018994:	e79c      	b.n	80188d0 <_strtod_l+0x980>
 8018996:	f1ba 0f01 	cmp.w	sl, #1
 801899a:	d102      	bne.n	80189a2 <_strtod_l+0xa52>
 801899c:	2d00      	cmp	r5, #0
 801899e:	f43f ad8e 	beq.w	80184be <_strtod_l+0x56e>
 80189a2:	2200      	movs	r2, #0
 80189a4:	4b34      	ldr	r3, [pc, #208]	; (8018a78 <_strtod_l+0xb28>)
 80189a6:	e78f      	b.n	80188c8 <_strtod_l+0x978>
 80189a8:	2600      	movs	r6, #0
 80189aa:	4f32      	ldr	r7, [pc, #200]	; (8018a74 <_strtod_l+0xb24>)
 80189ac:	e7ea      	b.n	8018984 <_strtod_l+0xa34>
 80189ae:	4b31      	ldr	r3, [pc, #196]	; (8018a74 <_strtod_l+0xb24>)
 80189b0:	4630      	mov	r0, r6
 80189b2:	4639      	mov	r1, r7
 80189b4:	2200      	movs	r2, #0
 80189b6:	f7e7 fe2f 	bl	8000618 <__aeabi_dmul>
 80189ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189bc:	4606      	mov	r6, r0
 80189be:	460f      	mov	r7, r1
 80189c0:	b933      	cbnz	r3, 80189d0 <_strtod_l+0xa80>
 80189c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80189c6:	9010      	str	r0, [sp, #64]	; 0x40
 80189c8:	9311      	str	r3, [sp, #68]	; 0x44
 80189ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80189ce:	e7df      	b.n	8018990 <_strtod_l+0xa40>
 80189d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80189d4:	e7f9      	b.n	80189ca <_strtod_l+0xa7a>
 80189d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80189da:	9b04      	ldr	r3, [sp, #16]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d1ab      	bne.n	8018938 <_strtod_l+0x9e8>
 80189e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80189e4:	0d1b      	lsrs	r3, r3, #20
 80189e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189e8:	051b      	lsls	r3, r3, #20
 80189ea:	429a      	cmp	r2, r3
 80189ec:	465d      	mov	r5, fp
 80189ee:	d1a3      	bne.n	8018938 <_strtod_l+0x9e8>
 80189f0:	4639      	mov	r1, r7
 80189f2:	4630      	mov	r0, r6
 80189f4:	f7e8 f8c0 	bl	8000b78 <__aeabi_d2iz>
 80189f8:	f7e7 fda4 	bl	8000544 <__aeabi_i2d>
 80189fc:	460b      	mov	r3, r1
 80189fe:	4602      	mov	r2, r0
 8018a00:	4639      	mov	r1, r7
 8018a02:	4630      	mov	r0, r6
 8018a04:	f7e7 fc50 	bl	80002a8 <__aeabi_dsub>
 8018a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a0a:	4606      	mov	r6, r0
 8018a0c:	460f      	mov	r7, r1
 8018a0e:	b933      	cbnz	r3, 8018a1e <_strtod_l+0xace>
 8018a10:	f1ba 0f00 	cmp.w	sl, #0
 8018a14:	d103      	bne.n	8018a1e <_strtod_l+0xace>
 8018a16:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	d06d      	beq.n	8018afa <_strtod_l+0xbaa>
 8018a1e:	a30a      	add	r3, pc, #40	; (adr r3, 8018a48 <_strtod_l+0xaf8>)
 8018a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a24:	4630      	mov	r0, r6
 8018a26:	4639      	mov	r1, r7
 8018a28:	f7e8 f868 	bl	8000afc <__aeabi_dcmplt>
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	f47f acb8 	bne.w	80183a2 <_strtod_l+0x452>
 8018a32:	a307      	add	r3, pc, #28	; (adr r3, 8018a50 <_strtod_l+0xb00>)
 8018a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a38:	4630      	mov	r0, r6
 8018a3a:	4639      	mov	r1, r7
 8018a3c:	f7e8 f87c 	bl	8000b38 <__aeabi_dcmpgt>
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f43f af79 	beq.w	8018938 <_strtod_l+0x9e8>
 8018a46:	e4ac      	b.n	80183a2 <_strtod_l+0x452>
 8018a48:	94a03595 	.word	0x94a03595
 8018a4c:	3fdfffff 	.word	0x3fdfffff
 8018a50:	35afe535 	.word	0x35afe535
 8018a54:	3fe00000 	.word	0x3fe00000
 8018a58:	000fffff 	.word	0x000fffff
 8018a5c:	7ff00000 	.word	0x7ff00000
 8018a60:	7fefffff 	.word	0x7fefffff
 8018a64:	39500000 	.word	0x39500000
 8018a68:	3ff00000 	.word	0x3ff00000
 8018a6c:	7fe00000 	.word	0x7fe00000
 8018a70:	7c9fffff 	.word	0x7c9fffff
 8018a74:	3fe00000 	.word	0x3fe00000
 8018a78:	bff00000 	.word	0xbff00000
 8018a7c:	9b04      	ldr	r3, [sp, #16]
 8018a7e:	b333      	cbz	r3, 8018ace <_strtod_l+0xb7e>
 8018a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018a86:	d822      	bhi.n	8018ace <_strtod_l+0xb7e>
 8018a88:	a327      	add	r3, pc, #156	; (adr r3, 8018b28 <_strtod_l+0xbd8>)
 8018a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a8e:	4630      	mov	r0, r6
 8018a90:	4639      	mov	r1, r7
 8018a92:	f7e8 f83d 	bl	8000b10 <__aeabi_dcmple>
 8018a96:	b1a0      	cbz	r0, 8018ac2 <_strtod_l+0xb72>
 8018a98:	4639      	mov	r1, r7
 8018a9a:	4630      	mov	r0, r6
 8018a9c:	f7e8 f894 	bl	8000bc8 <__aeabi_d2uiz>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	bf08      	it	eq
 8018aa4:	2001      	moveq	r0, #1
 8018aa6:	f7e7 fd3d 	bl	8000524 <__aeabi_ui2d>
 8018aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018aac:	4606      	mov	r6, r0
 8018aae:	460f      	mov	r7, r1
 8018ab0:	bb03      	cbnz	r3, 8018af4 <_strtod_l+0xba4>
 8018ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ab6:	9012      	str	r0, [sp, #72]	; 0x48
 8018ab8:	9313      	str	r3, [sp, #76]	; 0x4c
 8018aba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018abe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ac4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ac6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018aca:	1a9b      	subs	r3, r3, r2
 8018acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ace:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018ad2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8018ad6:	f001 fd55 	bl	801a584 <__ulp>
 8018ada:	4650      	mov	r0, sl
 8018adc:	ec53 2b10 	vmov	r2, r3, d0
 8018ae0:	4659      	mov	r1, fp
 8018ae2:	f7e7 fd99 	bl	8000618 <__aeabi_dmul>
 8018ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018aea:	f7e7 fbdf 	bl	80002ac <__adddf3>
 8018aee:	4682      	mov	sl, r0
 8018af0:	468b      	mov	fp, r1
 8018af2:	e772      	b.n	80189da <_strtod_l+0xa8a>
 8018af4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8018af8:	e7df      	b.n	8018aba <_strtod_l+0xb6a>
 8018afa:	a30d      	add	r3, pc, #52	; (adr r3, 8018b30 <_strtod_l+0xbe0>)
 8018afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b00:	f7e7 fffc 	bl	8000afc <__aeabi_dcmplt>
 8018b04:	e79c      	b.n	8018a40 <_strtod_l+0xaf0>
 8018b06:	2300      	movs	r3, #0
 8018b08:	930d      	str	r3, [sp, #52]	; 0x34
 8018b0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018b0e:	6013      	str	r3, [r2, #0]
 8018b10:	f7ff ba61 	b.w	8017fd6 <_strtod_l+0x86>
 8018b14:	2b65      	cmp	r3, #101	; 0x65
 8018b16:	f04f 0200 	mov.w	r2, #0
 8018b1a:	f43f ab4e 	beq.w	80181ba <_strtod_l+0x26a>
 8018b1e:	2101      	movs	r1, #1
 8018b20:	4614      	mov	r4, r2
 8018b22:	9104      	str	r1, [sp, #16]
 8018b24:	f7ff bacb 	b.w	80180be <_strtod_l+0x16e>
 8018b28:	ffc00000 	.word	0xffc00000
 8018b2c:	41dfffff 	.word	0x41dfffff
 8018b30:	94a03595 	.word	0x94a03595
 8018b34:	3fcfffff 	.word	0x3fcfffff

08018b38 <_strtod_r>:
 8018b38:	4b05      	ldr	r3, [pc, #20]	; (8018b50 <_strtod_r+0x18>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	b410      	push	{r4}
 8018b3e:	6a1b      	ldr	r3, [r3, #32]
 8018b40:	4c04      	ldr	r4, [pc, #16]	; (8018b54 <_strtod_r+0x1c>)
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	bf08      	it	eq
 8018b46:	4623      	moveq	r3, r4
 8018b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b4c:	f7ff ba00 	b.w	8017f50 <_strtod_l>
 8018b50:	20000198 	.word	0x20000198
 8018b54:	200001fc 	.word	0x200001fc

08018b58 <strtod>:
 8018b58:	4b07      	ldr	r3, [pc, #28]	; (8018b78 <strtod+0x20>)
 8018b5a:	4a08      	ldr	r2, [pc, #32]	; (8018b7c <strtod+0x24>)
 8018b5c:	b410      	push	{r4}
 8018b5e:	681c      	ldr	r4, [r3, #0]
 8018b60:	6a23      	ldr	r3, [r4, #32]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	bf08      	it	eq
 8018b66:	4613      	moveq	r3, r2
 8018b68:	460a      	mov	r2, r1
 8018b6a:	4601      	mov	r1, r0
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b72:	f7ff b9ed 	b.w	8017f50 <_strtod_l>
 8018b76:	bf00      	nop
 8018b78:	20000198 	.word	0x20000198
 8018b7c:	200001fc 	.word	0x200001fc

08018b80 <_strtol_l.isra.0>:
 8018b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b84:	4680      	mov	r8, r0
 8018b86:	4689      	mov	r9, r1
 8018b88:	4692      	mov	sl, r2
 8018b8a:	461e      	mov	r6, r3
 8018b8c:	460f      	mov	r7, r1
 8018b8e:	463d      	mov	r5, r7
 8018b90:	9808      	ldr	r0, [sp, #32]
 8018b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b96:	f001 fa01 	bl	8019f9c <__locale_ctype_ptr_l>
 8018b9a:	4420      	add	r0, r4
 8018b9c:	7843      	ldrb	r3, [r0, #1]
 8018b9e:	f013 0308 	ands.w	r3, r3, #8
 8018ba2:	d132      	bne.n	8018c0a <_strtol_l.isra.0+0x8a>
 8018ba4:	2c2d      	cmp	r4, #45	; 0x2d
 8018ba6:	d132      	bne.n	8018c0e <_strtol_l.isra.0+0x8e>
 8018ba8:	787c      	ldrb	r4, [r7, #1]
 8018baa:	1cbd      	adds	r5, r7, #2
 8018bac:	2201      	movs	r2, #1
 8018bae:	2e00      	cmp	r6, #0
 8018bb0:	d05d      	beq.n	8018c6e <_strtol_l.isra.0+0xee>
 8018bb2:	2e10      	cmp	r6, #16
 8018bb4:	d109      	bne.n	8018bca <_strtol_l.isra.0+0x4a>
 8018bb6:	2c30      	cmp	r4, #48	; 0x30
 8018bb8:	d107      	bne.n	8018bca <_strtol_l.isra.0+0x4a>
 8018bba:	782b      	ldrb	r3, [r5, #0]
 8018bbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018bc0:	2b58      	cmp	r3, #88	; 0x58
 8018bc2:	d14f      	bne.n	8018c64 <_strtol_l.isra.0+0xe4>
 8018bc4:	786c      	ldrb	r4, [r5, #1]
 8018bc6:	2610      	movs	r6, #16
 8018bc8:	3502      	adds	r5, #2
 8018bca:	2a00      	cmp	r2, #0
 8018bcc:	bf14      	ite	ne
 8018bce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8018bd2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018bd6:	2700      	movs	r7, #0
 8018bd8:	fbb1 fcf6 	udiv	ip, r1, r6
 8018bdc:	4638      	mov	r0, r7
 8018bde:	fb06 1e1c 	mls	lr, r6, ip, r1
 8018be2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018be6:	2b09      	cmp	r3, #9
 8018be8:	d817      	bhi.n	8018c1a <_strtol_l.isra.0+0x9a>
 8018bea:	461c      	mov	r4, r3
 8018bec:	42a6      	cmp	r6, r4
 8018bee:	dd23      	ble.n	8018c38 <_strtol_l.isra.0+0xb8>
 8018bf0:	1c7b      	adds	r3, r7, #1
 8018bf2:	d007      	beq.n	8018c04 <_strtol_l.isra.0+0x84>
 8018bf4:	4584      	cmp	ip, r0
 8018bf6:	d31c      	bcc.n	8018c32 <_strtol_l.isra.0+0xb2>
 8018bf8:	d101      	bne.n	8018bfe <_strtol_l.isra.0+0x7e>
 8018bfa:	45a6      	cmp	lr, r4
 8018bfc:	db19      	blt.n	8018c32 <_strtol_l.isra.0+0xb2>
 8018bfe:	fb00 4006 	mla	r0, r0, r6, r4
 8018c02:	2701      	movs	r7, #1
 8018c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018c08:	e7eb      	b.n	8018be2 <_strtol_l.isra.0+0x62>
 8018c0a:	462f      	mov	r7, r5
 8018c0c:	e7bf      	b.n	8018b8e <_strtol_l.isra.0+0xe>
 8018c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8018c10:	bf04      	itt	eq
 8018c12:	1cbd      	addeq	r5, r7, #2
 8018c14:	787c      	ldrbeq	r4, [r7, #1]
 8018c16:	461a      	mov	r2, r3
 8018c18:	e7c9      	b.n	8018bae <_strtol_l.isra.0+0x2e>
 8018c1a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018c1e:	2b19      	cmp	r3, #25
 8018c20:	d801      	bhi.n	8018c26 <_strtol_l.isra.0+0xa6>
 8018c22:	3c37      	subs	r4, #55	; 0x37
 8018c24:	e7e2      	b.n	8018bec <_strtol_l.isra.0+0x6c>
 8018c26:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018c2a:	2b19      	cmp	r3, #25
 8018c2c:	d804      	bhi.n	8018c38 <_strtol_l.isra.0+0xb8>
 8018c2e:	3c57      	subs	r4, #87	; 0x57
 8018c30:	e7dc      	b.n	8018bec <_strtol_l.isra.0+0x6c>
 8018c32:	f04f 37ff 	mov.w	r7, #4294967295
 8018c36:	e7e5      	b.n	8018c04 <_strtol_l.isra.0+0x84>
 8018c38:	1c7b      	adds	r3, r7, #1
 8018c3a:	d108      	bne.n	8018c4e <_strtol_l.isra.0+0xce>
 8018c3c:	2322      	movs	r3, #34	; 0x22
 8018c3e:	f8c8 3000 	str.w	r3, [r8]
 8018c42:	4608      	mov	r0, r1
 8018c44:	f1ba 0f00 	cmp.w	sl, #0
 8018c48:	d107      	bne.n	8018c5a <_strtol_l.isra.0+0xda>
 8018c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c4e:	b102      	cbz	r2, 8018c52 <_strtol_l.isra.0+0xd2>
 8018c50:	4240      	negs	r0, r0
 8018c52:	f1ba 0f00 	cmp.w	sl, #0
 8018c56:	d0f8      	beq.n	8018c4a <_strtol_l.isra.0+0xca>
 8018c58:	b10f      	cbz	r7, 8018c5e <_strtol_l.isra.0+0xde>
 8018c5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8018c5e:	f8ca 9000 	str.w	r9, [sl]
 8018c62:	e7f2      	b.n	8018c4a <_strtol_l.isra.0+0xca>
 8018c64:	2430      	movs	r4, #48	; 0x30
 8018c66:	2e00      	cmp	r6, #0
 8018c68:	d1af      	bne.n	8018bca <_strtol_l.isra.0+0x4a>
 8018c6a:	2608      	movs	r6, #8
 8018c6c:	e7ad      	b.n	8018bca <_strtol_l.isra.0+0x4a>
 8018c6e:	2c30      	cmp	r4, #48	; 0x30
 8018c70:	d0a3      	beq.n	8018bba <_strtol_l.isra.0+0x3a>
 8018c72:	260a      	movs	r6, #10
 8018c74:	e7a9      	b.n	8018bca <_strtol_l.isra.0+0x4a>
	...

08018c78 <_strtol_r>:
 8018c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c7a:	4c06      	ldr	r4, [pc, #24]	; (8018c94 <_strtol_r+0x1c>)
 8018c7c:	4d06      	ldr	r5, [pc, #24]	; (8018c98 <_strtol_r+0x20>)
 8018c7e:	6824      	ldr	r4, [r4, #0]
 8018c80:	6a24      	ldr	r4, [r4, #32]
 8018c82:	2c00      	cmp	r4, #0
 8018c84:	bf08      	it	eq
 8018c86:	462c      	moveq	r4, r5
 8018c88:	9400      	str	r4, [sp, #0]
 8018c8a:	f7ff ff79 	bl	8018b80 <_strtol_l.isra.0>
 8018c8e:	b003      	add	sp, #12
 8018c90:	bd30      	pop	{r4, r5, pc}
 8018c92:	bf00      	nop
 8018c94:	20000198 	.word	0x20000198
 8018c98:	200001fc 	.word	0x200001fc

08018c9c <strtol>:
 8018c9c:	4b08      	ldr	r3, [pc, #32]	; (8018cc0 <strtol+0x24>)
 8018c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ca0:	681c      	ldr	r4, [r3, #0]
 8018ca2:	4d08      	ldr	r5, [pc, #32]	; (8018cc4 <strtol+0x28>)
 8018ca4:	6a23      	ldr	r3, [r4, #32]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	bf08      	it	eq
 8018caa:	462b      	moveq	r3, r5
 8018cac:	9300      	str	r3, [sp, #0]
 8018cae:	4613      	mov	r3, r2
 8018cb0:	460a      	mov	r2, r1
 8018cb2:	4601      	mov	r1, r0
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f7ff ff63 	bl	8018b80 <_strtol_l.isra.0>
 8018cba:	b003      	add	sp, #12
 8018cbc:	bd30      	pop	{r4, r5, pc}
 8018cbe:	bf00      	nop
 8018cc0:	20000198 	.word	0x20000198
 8018cc4:	200001fc 	.word	0x200001fc

08018cc8 <quorem>:
 8018cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ccc:	6903      	ldr	r3, [r0, #16]
 8018cce:	690c      	ldr	r4, [r1, #16]
 8018cd0:	42a3      	cmp	r3, r4
 8018cd2:	4680      	mov	r8, r0
 8018cd4:	f2c0 8082 	blt.w	8018ddc <quorem+0x114>
 8018cd8:	3c01      	subs	r4, #1
 8018cda:	f101 0714 	add.w	r7, r1, #20
 8018cde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8018ce2:	f100 0614 	add.w	r6, r0, #20
 8018ce6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018cea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8018cee:	eb06 030c 	add.w	r3, r6, ip
 8018cf2:	3501      	adds	r5, #1
 8018cf4:	eb07 090c 	add.w	r9, r7, ip
 8018cf8:	9301      	str	r3, [sp, #4]
 8018cfa:	fbb0 f5f5 	udiv	r5, r0, r5
 8018cfe:	b395      	cbz	r5, 8018d66 <quorem+0x9e>
 8018d00:	f04f 0a00 	mov.w	sl, #0
 8018d04:	4638      	mov	r0, r7
 8018d06:	46b6      	mov	lr, r6
 8018d08:	46d3      	mov	fp, sl
 8018d0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8018d0e:	b293      	uxth	r3, r2
 8018d10:	fb05 a303 	mla	r3, r5, r3, sl
 8018d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	ebab 0303 	sub.w	r3, fp, r3
 8018d1e:	0c12      	lsrs	r2, r2, #16
 8018d20:	f8de b000 	ldr.w	fp, [lr]
 8018d24:	fb05 a202 	mla	r2, r5, r2, sl
 8018d28:	fa13 f38b 	uxtah	r3, r3, fp
 8018d2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8018d30:	fa1f fb82 	uxth.w	fp, r2
 8018d34:	f8de 2000 	ldr.w	r2, [lr]
 8018d38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d46:	4581      	cmp	r9, r0
 8018d48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8018d50:	d2db      	bcs.n	8018d0a <quorem+0x42>
 8018d52:	f856 300c 	ldr.w	r3, [r6, ip]
 8018d56:	b933      	cbnz	r3, 8018d66 <quorem+0x9e>
 8018d58:	9b01      	ldr	r3, [sp, #4]
 8018d5a:	3b04      	subs	r3, #4
 8018d5c:	429e      	cmp	r6, r3
 8018d5e:	461a      	mov	r2, r3
 8018d60:	d330      	bcc.n	8018dc4 <quorem+0xfc>
 8018d62:	f8c8 4010 	str.w	r4, [r8, #16]
 8018d66:	4640      	mov	r0, r8
 8018d68:	f001 fb94 	bl	801a494 <__mcmp>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	db25      	blt.n	8018dbc <quorem+0xf4>
 8018d70:	3501      	adds	r5, #1
 8018d72:	4630      	mov	r0, r6
 8018d74:	f04f 0c00 	mov.w	ip, #0
 8018d78:	f857 2b04 	ldr.w	r2, [r7], #4
 8018d7c:	f8d0 e000 	ldr.w	lr, [r0]
 8018d80:	b293      	uxth	r3, r2
 8018d82:	ebac 0303 	sub.w	r3, ip, r3
 8018d86:	0c12      	lsrs	r2, r2, #16
 8018d88:	fa13 f38e 	uxtah	r3, r3, lr
 8018d8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d9a:	45b9      	cmp	r9, r7
 8018d9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018da0:	f840 3b04 	str.w	r3, [r0], #4
 8018da4:	d2e8      	bcs.n	8018d78 <quorem+0xb0>
 8018da6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018daa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018dae:	b92a      	cbnz	r2, 8018dbc <quorem+0xf4>
 8018db0:	3b04      	subs	r3, #4
 8018db2:	429e      	cmp	r6, r3
 8018db4:	461a      	mov	r2, r3
 8018db6:	d30b      	bcc.n	8018dd0 <quorem+0x108>
 8018db8:	f8c8 4010 	str.w	r4, [r8, #16]
 8018dbc:	4628      	mov	r0, r5
 8018dbe:	b003      	add	sp, #12
 8018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc4:	6812      	ldr	r2, [r2, #0]
 8018dc6:	3b04      	subs	r3, #4
 8018dc8:	2a00      	cmp	r2, #0
 8018dca:	d1ca      	bne.n	8018d62 <quorem+0x9a>
 8018dcc:	3c01      	subs	r4, #1
 8018dce:	e7c5      	b.n	8018d5c <quorem+0x94>
 8018dd0:	6812      	ldr	r2, [r2, #0]
 8018dd2:	3b04      	subs	r3, #4
 8018dd4:	2a00      	cmp	r2, #0
 8018dd6:	d1ef      	bne.n	8018db8 <quorem+0xf0>
 8018dd8:	3c01      	subs	r4, #1
 8018dda:	e7ea      	b.n	8018db2 <quorem+0xea>
 8018ddc:	2000      	movs	r0, #0
 8018dde:	e7ee      	b.n	8018dbe <quorem+0xf6>

08018de0 <_dtoa_r>:
 8018de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de4:	ec57 6b10 	vmov	r6, r7, d0
 8018de8:	b097      	sub	sp, #92	; 0x5c
 8018dea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018dec:	9106      	str	r1, [sp, #24]
 8018dee:	4604      	mov	r4, r0
 8018df0:	920b      	str	r2, [sp, #44]	; 0x2c
 8018df2:	9312      	str	r3, [sp, #72]	; 0x48
 8018df4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018df8:	e9cd 6700 	strd	r6, r7, [sp]
 8018dfc:	b93d      	cbnz	r5, 8018e0e <_dtoa_r+0x2e>
 8018dfe:	2010      	movs	r0, #16
 8018e00:	f7fe f8fc 	bl	8016ffc <malloc>
 8018e04:	6260      	str	r0, [r4, #36]	; 0x24
 8018e06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018e0a:	6005      	str	r5, [r0, #0]
 8018e0c:	60c5      	str	r5, [r0, #12]
 8018e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e10:	6819      	ldr	r1, [r3, #0]
 8018e12:	b151      	cbz	r1, 8018e2a <_dtoa_r+0x4a>
 8018e14:	685a      	ldr	r2, [r3, #4]
 8018e16:	604a      	str	r2, [r1, #4]
 8018e18:	2301      	movs	r3, #1
 8018e1a:	4093      	lsls	r3, r2
 8018e1c:	608b      	str	r3, [r1, #8]
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f001 f918 	bl	801a054 <_Bfree>
 8018e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e26:	2200      	movs	r2, #0
 8018e28:	601a      	str	r2, [r3, #0]
 8018e2a:	1e3b      	subs	r3, r7, #0
 8018e2c:	bfbb      	ittet	lt
 8018e2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018e32:	9301      	strlt	r3, [sp, #4]
 8018e34:	2300      	movge	r3, #0
 8018e36:	2201      	movlt	r2, #1
 8018e38:	bfac      	ite	ge
 8018e3a:	f8c8 3000 	strge.w	r3, [r8]
 8018e3e:	f8c8 2000 	strlt.w	r2, [r8]
 8018e42:	4baf      	ldr	r3, [pc, #700]	; (8019100 <_dtoa_r+0x320>)
 8018e44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018e48:	ea33 0308 	bics.w	r3, r3, r8
 8018e4c:	d114      	bne.n	8018e78 <_dtoa_r+0x98>
 8018e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018e50:	f242 730f 	movw	r3, #9999	; 0x270f
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	9b00      	ldr	r3, [sp, #0]
 8018e58:	b923      	cbnz	r3, 8018e64 <_dtoa_r+0x84>
 8018e5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018e5e:	2800      	cmp	r0, #0
 8018e60:	f000 8542 	beq.w	80198e8 <_dtoa_r+0xb08>
 8018e64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8019114 <_dtoa_r+0x334>
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f000 8544 	beq.w	80198f8 <_dtoa_r+0xb18>
 8018e70:	f10b 0303 	add.w	r3, fp, #3
 8018e74:	f000 bd3e 	b.w	80198f4 <_dtoa_r+0xb14>
 8018e78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	2300      	movs	r3, #0
 8018e80:	4630      	mov	r0, r6
 8018e82:	4639      	mov	r1, r7
 8018e84:	f7e7 fe30 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e88:	4681      	mov	r9, r0
 8018e8a:	b168      	cbz	r0, 8018ea8 <_dtoa_r+0xc8>
 8018e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018e8e:	2301      	movs	r3, #1
 8018e90:	6013      	str	r3, [r2, #0]
 8018e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	f000 8524 	beq.w	80198e2 <_dtoa_r+0xb02>
 8018e9a:	4b9a      	ldr	r3, [pc, #616]	; (8019104 <_dtoa_r+0x324>)
 8018e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018e9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8018ea2:	6013      	str	r3, [r2, #0]
 8018ea4:	f000 bd28 	b.w	80198f8 <_dtoa_r+0xb18>
 8018ea8:	aa14      	add	r2, sp, #80	; 0x50
 8018eaa:	a915      	add	r1, sp, #84	; 0x54
 8018eac:	ec47 6b10 	vmov	d0, r6, r7
 8018eb0:	4620      	mov	r0, r4
 8018eb2:	f001 fbdd 	bl	801a670 <__d2b>
 8018eb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8018eba:	9004      	str	r0, [sp, #16]
 8018ebc:	2d00      	cmp	r5, #0
 8018ebe:	d07c      	beq.n	8018fba <_dtoa_r+0x1da>
 8018ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ec4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8018ec8:	46b2      	mov	sl, r6
 8018eca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8018ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018ed2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	4b8b      	ldr	r3, [pc, #556]	; (8019108 <_dtoa_r+0x328>)
 8018eda:	4650      	mov	r0, sl
 8018edc:	4659      	mov	r1, fp
 8018ede:	f7e7 f9e3 	bl	80002a8 <__aeabi_dsub>
 8018ee2:	a381      	add	r3, pc, #516	; (adr r3, 80190e8 <_dtoa_r+0x308>)
 8018ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee8:	f7e7 fb96 	bl	8000618 <__aeabi_dmul>
 8018eec:	a380      	add	r3, pc, #512	; (adr r3, 80190f0 <_dtoa_r+0x310>)
 8018eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef2:	f7e7 f9db 	bl	80002ac <__adddf3>
 8018ef6:	4606      	mov	r6, r0
 8018ef8:	4628      	mov	r0, r5
 8018efa:	460f      	mov	r7, r1
 8018efc:	f7e7 fb22 	bl	8000544 <__aeabi_i2d>
 8018f00:	a37d      	add	r3, pc, #500	; (adr r3, 80190f8 <_dtoa_r+0x318>)
 8018f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f06:	f7e7 fb87 	bl	8000618 <__aeabi_dmul>
 8018f0a:	4602      	mov	r2, r0
 8018f0c:	460b      	mov	r3, r1
 8018f0e:	4630      	mov	r0, r6
 8018f10:	4639      	mov	r1, r7
 8018f12:	f7e7 f9cb 	bl	80002ac <__adddf3>
 8018f16:	4606      	mov	r6, r0
 8018f18:	460f      	mov	r7, r1
 8018f1a:	f7e7 fe2d 	bl	8000b78 <__aeabi_d2iz>
 8018f1e:	2200      	movs	r2, #0
 8018f20:	4682      	mov	sl, r0
 8018f22:	2300      	movs	r3, #0
 8018f24:	4630      	mov	r0, r6
 8018f26:	4639      	mov	r1, r7
 8018f28:	f7e7 fde8 	bl	8000afc <__aeabi_dcmplt>
 8018f2c:	b148      	cbz	r0, 8018f42 <_dtoa_r+0x162>
 8018f2e:	4650      	mov	r0, sl
 8018f30:	f7e7 fb08 	bl	8000544 <__aeabi_i2d>
 8018f34:	4632      	mov	r2, r6
 8018f36:	463b      	mov	r3, r7
 8018f38:	f7e7 fdd6 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f3c:	b908      	cbnz	r0, 8018f42 <_dtoa_r+0x162>
 8018f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f42:	f1ba 0f16 	cmp.w	sl, #22
 8018f46:	d859      	bhi.n	8018ffc <_dtoa_r+0x21c>
 8018f48:	4970      	ldr	r1, [pc, #448]	; (801910c <_dtoa_r+0x32c>)
 8018f4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f56:	f7e7 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d050      	beq.n	8019000 <_dtoa_r+0x220>
 8018f5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f62:	2300      	movs	r3, #0
 8018f64:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f68:	1b5d      	subs	r5, r3, r5
 8018f6a:	f1b5 0801 	subs.w	r8, r5, #1
 8018f6e:	bf49      	itett	mi
 8018f70:	f1c5 0301 	rsbmi	r3, r5, #1
 8018f74:	2300      	movpl	r3, #0
 8018f76:	9305      	strmi	r3, [sp, #20]
 8018f78:	f04f 0800 	movmi.w	r8, #0
 8018f7c:	bf58      	it	pl
 8018f7e:	9305      	strpl	r3, [sp, #20]
 8018f80:	f1ba 0f00 	cmp.w	sl, #0
 8018f84:	db3e      	blt.n	8019004 <_dtoa_r+0x224>
 8018f86:	2300      	movs	r3, #0
 8018f88:	44d0      	add	r8, sl
 8018f8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018f8e:	9307      	str	r3, [sp, #28]
 8018f90:	9b06      	ldr	r3, [sp, #24]
 8018f92:	2b09      	cmp	r3, #9
 8018f94:	f200 8090 	bhi.w	80190b8 <_dtoa_r+0x2d8>
 8018f98:	2b05      	cmp	r3, #5
 8018f9a:	bfc4      	itt	gt
 8018f9c:	3b04      	subgt	r3, #4
 8018f9e:	9306      	strgt	r3, [sp, #24]
 8018fa0:	9b06      	ldr	r3, [sp, #24]
 8018fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8018fa6:	bfcc      	ite	gt
 8018fa8:	2500      	movgt	r5, #0
 8018faa:	2501      	movle	r5, #1
 8018fac:	2b03      	cmp	r3, #3
 8018fae:	f200 808f 	bhi.w	80190d0 <_dtoa_r+0x2f0>
 8018fb2:	e8df f003 	tbb	[pc, r3]
 8018fb6:	7f7d      	.short	0x7f7d
 8018fb8:	7131      	.short	0x7131
 8018fba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8018fbe:	441d      	add	r5, r3
 8018fc0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8018fc4:	2820      	cmp	r0, #32
 8018fc6:	dd13      	ble.n	8018ff0 <_dtoa_r+0x210>
 8018fc8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8018fcc:	9b00      	ldr	r3, [sp, #0]
 8018fce:	fa08 f800 	lsl.w	r8, r8, r0
 8018fd2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8018fd6:	fa23 f000 	lsr.w	r0, r3, r0
 8018fda:	ea48 0000 	orr.w	r0, r8, r0
 8018fde:	f7e7 faa1 	bl	8000524 <__aeabi_ui2d>
 8018fe2:	2301      	movs	r3, #1
 8018fe4:	4682      	mov	sl, r0
 8018fe6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8018fea:	3d01      	subs	r5, #1
 8018fec:	9313      	str	r3, [sp, #76]	; 0x4c
 8018fee:	e772      	b.n	8018ed6 <_dtoa_r+0xf6>
 8018ff0:	9b00      	ldr	r3, [sp, #0]
 8018ff2:	f1c0 0020 	rsb	r0, r0, #32
 8018ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8018ffa:	e7f0      	b.n	8018fde <_dtoa_r+0x1fe>
 8018ffc:	2301      	movs	r3, #1
 8018ffe:	e7b1      	b.n	8018f64 <_dtoa_r+0x184>
 8019000:	900f      	str	r0, [sp, #60]	; 0x3c
 8019002:	e7b0      	b.n	8018f66 <_dtoa_r+0x186>
 8019004:	9b05      	ldr	r3, [sp, #20]
 8019006:	eba3 030a 	sub.w	r3, r3, sl
 801900a:	9305      	str	r3, [sp, #20]
 801900c:	f1ca 0300 	rsb	r3, sl, #0
 8019010:	9307      	str	r3, [sp, #28]
 8019012:	2300      	movs	r3, #0
 8019014:	930e      	str	r3, [sp, #56]	; 0x38
 8019016:	e7bb      	b.n	8018f90 <_dtoa_r+0x1b0>
 8019018:	2301      	movs	r3, #1
 801901a:	930a      	str	r3, [sp, #40]	; 0x28
 801901c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801901e:	2b00      	cmp	r3, #0
 8019020:	dd59      	ble.n	80190d6 <_dtoa_r+0x2f6>
 8019022:	9302      	str	r3, [sp, #8]
 8019024:	4699      	mov	r9, r3
 8019026:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019028:	2200      	movs	r2, #0
 801902a:	6072      	str	r2, [r6, #4]
 801902c:	2204      	movs	r2, #4
 801902e:	f102 0014 	add.w	r0, r2, #20
 8019032:	4298      	cmp	r0, r3
 8019034:	6871      	ldr	r1, [r6, #4]
 8019036:	d953      	bls.n	80190e0 <_dtoa_r+0x300>
 8019038:	4620      	mov	r0, r4
 801903a:	f000 ffd7 	bl	8019fec <_Balloc>
 801903e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019040:	6030      	str	r0, [r6, #0]
 8019042:	f1b9 0f0e 	cmp.w	r9, #14
 8019046:	f8d3 b000 	ldr.w	fp, [r3]
 801904a:	f200 80e6 	bhi.w	801921a <_dtoa_r+0x43a>
 801904e:	2d00      	cmp	r5, #0
 8019050:	f000 80e3 	beq.w	801921a <_dtoa_r+0x43a>
 8019054:	ed9d 7b00 	vldr	d7, [sp]
 8019058:	f1ba 0f00 	cmp.w	sl, #0
 801905c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8019060:	dd74      	ble.n	801914c <_dtoa_r+0x36c>
 8019062:	4a2a      	ldr	r2, [pc, #168]	; (801910c <_dtoa_r+0x32c>)
 8019064:	f00a 030f 	and.w	r3, sl, #15
 8019068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801906c:	ed93 7b00 	vldr	d7, [r3]
 8019070:	ea4f 162a 	mov.w	r6, sl, asr #4
 8019074:	06f0      	lsls	r0, r6, #27
 8019076:	ed8d 7b08 	vstr	d7, [sp, #32]
 801907a:	d565      	bpl.n	8019148 <_dtoa_r+0x368>
 801907c:	4b24      	ldr	r3, [pc, #144]	; (8019110 <_dtoa_r+0x330>)
 801907e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019082:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019086:	f7e7 fbf1 	bl	800086c <__aeabi_ddiv>
 801908a:	e9cd 0100 	strd	r0, r1, [sp]
 801908e:	f006 060f 	and.w	r6, r6, #15
 8019092:	2503      	movs	r5, #3
 8019094:	4f1e      	ldr	r7, [pc, #120]	; (8019110 <_dtoa_r+0x330>)
 8019096:	e04c      	b.n	8019132 <_dtoa_r+0x352>
 8019098:	2301      	movs	r3, #1
 801909a:	930a      	str	r3, [sp, #40]	; 0x28
 801909c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801909e:	4453      	add	r3, sl
 80190a0:	f103 0901 	add.w	r9, r3, #1
 80190a4:	9302      	str	r3, [sp, #8]
 80190a6:	464b      	mov	r3, r9
 80190a8:	2b01      	cmp	r3, #1
 80190aa:	bfb8      	it	lt
 80190ac:	2301      	movlt	r3, #1
 80190ae:	e7ba      	b.n	8019026 <_dtoa_r+0x246>
 80190b0:	2300      	movs	r3, #0
 80190b2:	e7b2      	b.n	801901a <_dtoa_r+0x23a>
 80190b4:	2300      	movs	r3, #0
 80190b6:	e7f0      	b.n	801909a <_dtoa_r+0x2ba>
 80190b8:	2501      	movs	r5, #1
 80190ba:	2300      	movs	r3, #0
 80190bc:	9306      	str	r3, [sp, #24]
 80190be:	950a      	str	r5, [sp, #40]	; 0x28
 80190c0:	f04f 33ff 	mov.w	r3, #4294967295
 80190c4:	9302      	str	r3, [sp, #8]
 80190c6:	4699      	mov	r9, r3
 80190c8:	2200      	movs	r2, #0
 80190ca:	2312      	movs	r3, #18
 80190cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80190ce:	e7aa      	b.n	8019026 <_dtoa_r+0x246>
 80190d0:	2301      	movs	r3, #1
 80190d2:	930a      	str	r3, [sp, #40]	; 0x28
 80190d4:	e7f4      	b.n	80190c0 <_dtoa_r+0x2e0>
 80190d6:	2301      	movs	r3, #1
 80190d8:	9302      	str	r3, [sp, #8]
 80190da:	4699      	mov	r9, r3
 80190dc:	461a      	mov	r2, r3
 80190de:	e7f5      	b.n	80190cc <_dtoa_r+0x2ec>
 80190e0:	3101      	adds	r1, #1
 80190e2:	6071      	str	r1, [r6, #4]
 80190e4:	0052      	lsls	r2, r2, #1
 80190e6:	e7a2      	b.n	801902e <_dtoa_r+0x24e>
 80190e8:	636f4361 	.word	0x636f4361
 80190ec:	3fd287a7 	.word	0x3fd287a7
 80190f0:	8b60c8b3 	.word	0x8b60c8b3
 80190f4:	3fc68a28 	.word	0x3fc68a28
 80190f8:	509f79fb 	.word	0x509f79fb
 80190fc:	3fd34413 	.word	0x3fd34413
 8019100:	7ff00000 	.word	0x7ff00000
 8019104:	0801e37d 	.word	0x0801e37d
 8019108:	3ff80000 	.word	0x3ff80000
 801910c:	0801e438 	.word	0x0801e438
 8019110:	0801e410 	.word	0x0801e410
 8019114:	0801e401 	.word	0x0801e401
 8019118:	07f1      	lsls	r1, r6, #31
 801911a:	d508      	bpl.n	801912e <_dtoa_r+0x34e>
 801911c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019124:	f7e7 fa78 	bl	8000618 <__aeabi_dmul>
 8019128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801912c:	3501      	adds	r5, #1
 801912e:	1076      	asrs	r6, r6, #1
 8019130:	3708      	adds	r7, #8
 8019132:	2e00      	cmp	r6, #0
 8019134:	d1f0      	bne.n	8019118 <_dtoa_r+0x338>
 8019136:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801913a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801913e:	f7e7 fb95 	bl	800086c <__aeabi_ddiv>
 8019142:	e9cd 0100 	strd	r0, r1, [sp]
 8019146:	e01a      	b.n	801917e <_dtoa_r+0x39e>
 8019148:	2502      	movs	r5, #2
 801914a:	e7a3      	b.n	8019094 <_dtoa_r+0x2b4>
 801914c:	f000 80a0 	beq.w	8019290 <_dtoa_r+0x4b0>
 8019150:	f1ca 0600 	rsb	r6, sl, #0
 8019154:	4b9f      	ldr	r3, [pc, #636]	; (80193d4 <_dtoa_r+0x5f4>)
 8019156:	4fa0      	ldr	r7, [pc, #640]	; (80193d8 <_dtoa_r+0x5f8>)
 8019158:	f006 020f 	and.w	r2, r6, #15
 801915c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019164:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019168:	f7e7 fa56 	bl	8000618 <__aeabi_dmul>
 801916c:	e9cd 0100 	strd	r0, r1, [sp]
 8019170:	1136      	asrs	r6, r6, #4
 8019172:	2300      	movs	r3, #0
 8019174:	2502      	movs	r5, #2
 8019176:	2e00      	cmp	r6, #0
 8019178:	d17f      	bne.n	801927a <_dtoa_r+0x49a>
 801917a:	2b00      	cmp	r3, #0
 801917c:	d1e1      	bne.n	8019142 <_dtoa_r+0x362>
 801917e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019180:	2b00      	cmp	r3, #0
 8019182:	f000 8087 	beq.w	8019294 <_dtoa_r+0x4b4>
 8019186:	e9dd 6700 	ldrd	r6, r7, [sp]
 801918a:	2200      	movs	r2, #0
 801918c:	4b93      	ldr	r3, [pc, #588]	; (80193dc <_dtoa_r+0x5fc>)
 801918e:	4630      	mov	r0, r6
 8019190:	4639      	mov	r1, r7
 8019192:	f7e7 fcb3 	bl	8000afc <__aeabi_dcmplt>
 8019196:	2800      	cmp	r0, #0
 8019198:	d07c      	beq.n	8019294 <_dtoa_r+0x4b4>
 801919a:	f1b9 0f00 	cmp.w	r9, #0
 801919e:	d079      	beq.n	8019294 <_dtoa_r+0x4b4>
 80191a0:	9b02      	ldr	r3, [sp, #8]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	dd35      	ble.n	8019212 <_dtoa_r+0x432>
 80191a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80191aa:	9308      	str	r3, [sp, #32]
 80191ac:	4639      	mov	r1, r7
 80191ae:	2200      	movs	r2, #0
 80191b0:	4b8b      	ldr	r3, [pc, #556]	; (80193e0 <_dtoa_r+0x600>)
 80191b2:	4630      	mov	r0, r6
 80191b4:	f7e7 fa30 	bl	8000618 <__aeabi_dmul>
 80191b8:	e9cd 0100 	strd	r0, r1, [sp]
 80191bc:	9f02      	ldr	r7, [sp, #8]
 80191be:	3501      	adds	r5, #1
 80191c0:	4628      	mov	r0, r5
 80191c2:	f7e7 f9bf 	bl	8000544 <__aeabi_i2d>
 80191c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80191ca:	f7e7 fa25 	bl	8000618 <__aeabi_dmul>
 80191ce:	2200      	movs	r2, #0
 80191d0:	4b84      	ldr	r3, [pc, #528]	; (80193e4 <_dtoa_r+0x604>)
 80191d2:	f7e7 f86b 	bl	80002ac <__adddf3>
 80191d6:	4605      	mov	r5, r0
 80191d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80191dc:	2f00      	cmp	r7, #0
 80191de:	d15d      	bne.n	801929c <_dtoa_r+0x4bc>
 80191e0:	2200      	movs	r2, #0
 80191e2:	4b81      	ldr	r3, [pc, #516]	; (80193e8 <_dtoa_r+0x608>)
 80191e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191e8:	f7e7 f85e 	bl	80002a8 <__aeabi_dsub>
 80191ec:	462a      	mov	r2, r5
 80191ee:	4633      	mov	r3, r6
 80191f0:	e9cd 0100 	strd	r0, r1, [sp]
 80191f4:	f7e7 fca0 	bl	8000b38 <__aeabi_dcmpgt>
 80191f8:	2800      	cmp	r0, #0
 80191fa:	f040 8288 	bne.w	801970e <_dtoa_r+0x92e>
 80191fe:	462a      	mov	r2, r5
 8019200:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8019204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019208:	f7e7 fc78 	bl	8000afc <__aeabi_dcmplt>
 801920c:	2800      	cmp	r0, #0
 801920e:	f040 827c 	bne.w	801970a <_dtoa_r+0x92a>
 8019212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019216:	e9cd 2300 	strd	r2, r3, [sp]
 801921a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801921c:	2b00      	cmp	r3, #0
 801921e:	f2c0 8150 	blt.w	80194c2 <_dtoa_r+0x6e2>
 8019222:	f1ba 0f0e 	cmp.w	sl, #14
 8019226:	f300 814c 	bgt.w	80194c2 <_dtoa_r+0x6e2>
 801922a:	4b6a      	ldr	r3, [pc, #424]	; (80193d4 <_dtoa_r+0x5f4>)
 801922c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019230:	ed93 7b00 	vldr	d7, [r3]
 8019234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019236:	2b00      	cmp	r3, #0
 8019238:	ed8d 7b02 	vstr	d7, [sp, #8]
 801923c:	f280 80d8 	bge.w	80193f0 <_dtoa_r+0x610>
 8019240:	f1b9 0f00 	cmp.w	r9, #0
 8019244:	f300 80d4 	bgt.w	80193f0 <_dtoa_r+0x610>
 8019248:	f040 825e 	bne.w	8019708 <_dtoa_r+0x928>
 801924c:	2200      	movs	r2, #0
 801924e:	4b66      	ldr	r3, [pc, #408]	; (80193e8 <_dtoa_r+0x608>)
 8019250:	ec51 0b17 	vmov	r0, r1, d7
 8019254:	f7e7 f9e0 	bl	8000618 <__aeabi_dmul>
 8019258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801925c:	f7e7 fc62 	bl	8000b24 <__aeabi_dcmpge>
 8019260:	464f      	mov	r7, r9
 8019262:	464e      	mov	r6, r9
 8019264:	2800      	cmp	r0, #0
 8019266:	f040 8234 	bne.w	80196d2 <_dtoa_r+0x8f2>
 801926a:	2331      	movs	r3, #49	; 0x31
 801926c:	f10b 0501 	add.w	r5, fp, #1
 8019270:	f88b 3000 	strb.w	r3, [fp]
 8019274:	f10a 0a01 	add.w	sl, sl, #1
 8019278:	e22f      	b.n	80196da <_dtoa_r+0x8fa>
 801927a:	07f2      	lsls	r2, r6, #31
 801927c:	d505      	bpl.n	801928a <_dtoa_r+0x4aa>
 801927e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019282:	f7e7 f9c9 	bl	8000618 <__aeabi_dmul>
 8019286:	3501      	adds	r5, #1
 8019288:	2301      	movs	r3, #1
 801928a:	1076      	asrs	r6, r6, #1
 801928c:	3708      	adds	r7, #8
 801928e:	e772      	b.n	8019176 <_dtoa_r+0x396>
 8019290:	2502      	movs	r5, #2
 8019292:	e774      	b.n	801917e <_dtoa_r+0x39e>
 8019294:	f8cd a020 	str.w	sl, [sp, #32]
 8019298:	464f      	mov	r7, r9
 801929a:	e791      	b.n	80191c0 <_dtoa_r+0x3e0>
 801929c:	4b4d      	ldr	r3, [pc, #308]	; (80193d4 <_dtoa_r+0x5f4>)
 801929e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80192a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80192a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d047      	beq.n	801933c <_dtoa_r+0x55c>
 80192ac:	4602      	mov	r2, r0
 80192ae:	460b      	mov	r3, r1
 80192b0:	2000      	movs	r0, #0
 80192b2:	494e      	ldr	r1, [pc, #312]	; (80193ec <_dtoa_r+0x60c>)
 80192b4:	f7e7 fada 	bl	800086c <__aeabi_ddiv>
 80192b8:	462a      	mov	r2, r5
 80192ba:	4633      	mov	r3, r6
 80192bc:	f7e6 fff4 	bl	80002a8 <__aeabi_dsub>
 80192c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80192c4:	465d      	mov	r5, fp
 80192c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192ca:	f7e7 fc55 	bl	8000b78 <__aeabi_d2iz>
 80192ce:	4606      	mov	r6, r0
 80192d0:	f7e7 f938 	bl	8000544 <__aeabi_i2d>
 80192d4:	4602      	mov	r2, r0
 80192d6:	460b      	mov	r3, r1
 80192d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192dc:	f7e6 ffe4 	bl	80002a8 <__aeabi_dsub>
 80192e0:	3630      	adds	r6, #48	; 0x30
 80192e2:	f805 6b01 	strb.w	r6, [r5], #1
 80192e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80192ea:	e9cd 0100 	strd	r0, r1, [sp]
 80192ee:	f7e7 fc05 	bl	8000afc <__aeabi_dcmplt>
 80192f2:	2800      	cmp	r0, #0
 80192f4:	d163      	bne.n	80193be <_dtoa_r+0x5de>
 80192f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80192fa:	2000      	movs	r0, #0
 80192fc:	4937      	ldr	r1, [pc, #220]	; (80193dc <_dtoa_r+0x5fc>)
 80192fe:	f7e6 ffd3 	bl	80002a8 <__aeabi_dsub>
 8019302:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019306:	f7e7 fbf9 	bl	8000afc <__aeabi_dcmplt>
 801930a:	2800      	cmp	r0, #0
 801930c:	f040 80b7 	bne.w	801947e <_dtoa_r+0x69e>
 8019310:	eba5 030b 	sub.w	r3, r5, fp
 8019314:	429f      	cmp	r7, r3
 8019316:	f77f af7c 	ble.w	8019212 <_dtoa_r+0x432>
 801931a:	2200      	movs	r2, #0
 801931c:	4b30      	ldr	r3, [pc, #192]	; (80193e0 <_dtoa_r+0x600>)
 801931e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019322:	f7e7 f979 	bl	8000618 <__aeabi_dmul>
 8019326:	2200      	movs	r2, #0
 8019328:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801932c:	4b2c      	ldr	r3, [pc, #176]	; (80193e0 <_dtoa_r+0x600>)
 801932e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019332:	f7e7 f971 	bl	8000618 <__aeabi_dmul>
 8019336:	e9cd 0100 	strd	r0, r1, [sp]
 801933a:	e7c4      	b.n	80192c6 <_dtoa_r+0x4e6>
 801933c:	462a      	mov	r2, r5
 801933e:	4633      	mov	r3, r6
 8019340:	f7e7 f96a 	bl	8000618 <__aeabi_dmul>
 8019344:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019348:	eb0b 0507 	add.w	r5, fp, r7
 801934c:	465e      	mov	r6, fp
 801934e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019352:	f7e7 fc11 	bl	8000b78 <__aeabi_d2iz>
 8019356:	4607      	mov	r7, r0
 8019358:	f7e7 f8f4 	bl	8000544 <__aeabi_i2d>
 801935c:	3730      	adds	r7, #48	; 0x30
 801935e:	4602      	mov	r2, r0
 8019360:	460b      	mov	r3, r1
 8019362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019366:	f7e6 ff9f 	bl	80002a8 <__aeabi_dsub>
 801936a:	f806 7b01 	strb.w	r7, [r6], #1
 801936e:	42ae      	cmp	r6, r5
 8019370:	e9cd 0100 	strd	r0, r1, [sp]
 8019374:	f04f 0200 	mov.w	r2, #0
 8019378:	d126      	bne.n	80193c8 <_dtoa_r+0x5e8>
 801937a:	4b1c      	ldr	r3, [pc, #112]	; (80193ec <_dtoa_r+0x60c>)
 801937c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019380:	f7e6 ff94 	bl	80002ac <__adddf3>
 8019384:	4602      	mov	r2, r0
 8019386:	460b      	mov	r3, r1
 8019388:	e9dd 0100 	ldrd	r0, r1, [sp]
 801938c:	f7e7 fbd4 	bl	8000b38 <__aeabi_dcmpgt>
 8019390:	2800      	cmp	r0, #0
 8019392:	d174      	bne.n	801947e <_dtoa_r+0x69e>
 8019394:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019398:	2000      	movs	r0, #0
 801939a:	4914      	ldr	r1, [pc, #80]	; (80193ec <_dtoa_r+0x60c>)
 801939c:	f7e6 ff84 	bl	80002a8 <__aeabi_dsub>
 80193a0:	4602      	mov	r2, r0
 80193a2:	460b      	mov	r3, r1
 80193a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80193a8:	f7e7 fba8 	bl	8000afc <__aeabi_dcmplt>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	f43f af30 	beq.w	8019212 <_dtoa_r+0x432>
 80193b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80193b6:	2b30      	cmp	r3, #48	; 0x30
 80193b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80193bc:	d002      	beq.n	80193c4 <_dtoa_r+0x5e4>
 80193be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80193c2:	e04a      	b.n	801945a <_dtoa_r+0x67a>
 80193c4:	4615      	mov	r5, r2
 80193c6:	e7f4      	b.n	80193b2 <_dtoa_r+0x5d2>
 80193c8:	4b05      	ldr	r3, [pc, #20]	; (80193e0 <_dtoa_r+0x600>)
 80193ca:	f7e7 f925 	bl	8000618 <__aeabi_dmul>
 80193ce:	e9cd 0100 	strd	r0, r1, [sp]
 80193d2:	e7bc      	b.n	801934e <_dtoa_r+0x56e>
 80193d4:	0801e438 	.word	0x0801e438
 80193d8:	0801e410 	.word	0x0801e410
 80193dc:	3ff00000 	.word	0x3ff00000
 80193e0:	40240000 	.word	0x40240000
 80193e4:	401c0000 	.word	0x401c0000
 80193e8:	40140000 	.word	0x40140000
 80193ec:	3fe00000 	.word	0x3fe00000
 80193f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80193f4:	465d      	mov	r5, fp
 80193f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80193fa:	4630      	mov	r0, r6
 80193fc:	4639      	mov	r1, r7
 80193fe:	f7e7 fa35 	bl	800086c <__aeabi_ddiv>
 8019402:	f7e7 fbb9 	bl	8000b78 <__aeabi_d2iz>
 8019406:	4680      	mov	r8, r0
 8019408:	f7e7 f89c 	bl	8000544 <__aeabi_i2d>
 801940c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019410:	f7e7 f902 	bl	8000618 <__aeabi_dmul>
 8019414:	4602      	mov	r2, r0
 8019416:	460b      	mov	r3, r1
 8019418:	4630      	mov	r0, r6
 801941a:	4639      	mov	r1, r7
 801941c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019420:	f7e6 ff42 	bl	80002a8 <__aeabi_dsub>
 8019424:	f805 6b01 	strb.w	r6, [r5], #1
 8019428:	eba5 060b 	sub.w	r6, r5, fp
 801942c:	45b1      	cmp	r9, r6
 801942e:	4602      	mov	r2, r0
 8019430:	460b      	mov	r3, r1
 8019432:	d139      	bne.n	80194a8 <_dtoa_r+0x6c8>
 8019434:	f7e6 ff3a 	bl	80002ac <__adddf3>
 8019438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801943c:	4606      	mov	r6, r0
 801943e:	460f      	mov	r7, r1
 8019440:	f7e7 fb7a 	bl	8000b38 <__aeabi_dcmpgt>
 8019444:	b9c8      	cbnz	r0, 801947a <_dtoa_r+0x69a>
 8019446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801944a:	4630      	mov	r0, r6
 801944c:	4639      	mov	r1, r7
 801944e:	f7e7 fb4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8019452:	b110      	cbz	r0, 801945a <_dtoa_r+0x67a>
 8019454:	f018 0f01 	tst.w	r8, #1
 8019458:	d10f      	bne.n	801947a <_dtoa_r+0x69a>
 801945a:	9904      	ldr	r1, [sp, #16]
 801945c:	4620      	mov	r0, r4
 801945e:	f000 fdf9 	bl	801a054 <_Bfree>
 8019462:	2300      	movs	r3, #0
 8019464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019466:	702b      	strb	r3, [r5, #0]
 8019468:	f10a 0301 	add.w	r3, sl, #1
 801946c:	6013      	str	r3, [r2, #0]
 801946e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019470:	2b00      	cmp	r3, #0
 8019472:	f000 8241 	beq.w	80198f8 <_dtoa_r+0xb18>
 8019476:	601d      	str	r5, [r3, #0]
 8019478:	e23e      	b.n	80198f8 <_dtoa_r+0xb18>
 801947a:	f8cd a020 	str.w	sl, [sp, #32]
 801947e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019482:	2a39      	cmp	r2, #57	; 0x39
 8019484:	f105 33ff 	add.w	r3, r5, #4294967295
 8019488:	d108      	bne.n	801949c <_dtoa_r+0x6bc>
 801948a:	459b      	cmp	fp, r3
 801948c:	d10a      	bne.n	80194a4 <_dtoa_r+0x6c4>
 801948e:	9b08      	ldr	r3, [sp, #32]
 8019490:	3301      	adds	r3, #1
 8019492:	9308      	str	r3, [sp, #32]
 8019494:	2330      	movs	r3, #48	; 0x30
 8019496:	f88b 3000 	strb.w	r3, [fp]
 801949a:	465b      	mov	r3, fp
 801949c:	781a      	ldrb	r2, [r3, #0]
 801949e:	3201      	adds	r2, #1
 80194a0:	701a      	strb	r2, [r3, #0]
 80194a2:	e78c      	b.n	80193be <_dtoa_r+0x5de>
 80194a4:	461d      	mov	r5, r3
 80194a6:	e7ea      	b.n	801947e <_dtoa_r+0x69e>
 80194a8:	2200      	movs	r2, #0
 80194aa:	4b9b      	ldr	r3, [pc, #620]	; (8019718 <_dtoa_r+0x938>)
 80194ac:	f7e7 f8b4 	bl	8000618 <__aeabi_dmul>
 80194b0:	2200      	movs	r2, #0
 80194b2:	2300      	movs	r3, #0
 80194b4:	4606      	mov	r6, r0
 80194b6:	460f      	mov	r7, r1
 80194b8:	f7e7 fb16 	bl	8000ae8 <__aeabi_dcmpeq>
 80194bc:	2800      	cmp	r0, #0
 80194be:	d09a      	beq.n	80193f6 <_dtoa_r+0x616>
 80194c0:	e7cb      	b.n	801945a <_dtoa_r+0x67a>
 80194c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194c4:	2a00      	cmp	r2, #0
 80194c6:	f000 808b 	beq.w	80195e0 <_dtoa_r+0x800>
 80194ca:	9a06      	ldr	r2, [sp, #24]
 80194cc:	2a01      	cmp	r2, #1
 80194ce:	dc6e      	bgt.n	80195ae <_dtoa_r+0x7ce>
 80194d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80194d2:	2a00      	cmp	r2, #0
 80194d4:	d067      	beq.n	80195a6 <_dtoa_r+0x7c6>
 80194d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80194da:	9f07      	ldr	r7, [sp, #28]
 80194dc:	9d05      	ldr	r5, [sp, #20]
 80194de:	9a05      	ldr	r2, [sp, #20]
 80194e0:	2101      	movs	r1, #1
 80194e2:	441a      	add	r2, r3
 80194e4:	4620      	mov	r0, r4
 80194e6:	9205      	str	r2, [sp, #20]
 80194e8:	4498      	add	r8, r3
 80194ea:	f000 fe91 	bl	801a210 <__i2b>
 80194ee:	4606      	mov	r6, r0
 80194f0:	2d00      	cmp	r5, #0
 80194f2:	dd0c      	ble.n	801950e <_dtoa_r+0x72e>
 80194f4:	f1b8 0f00 	cmp.w	r8, #0
 80194f8:	dd09      	ble.n	801950e <_dtoa_r+0x72e>
 80194fa:	4545      	cmp	r5, r8
 80194fc:	9a05      	ldr	r2, [sp, #20]
 80194fe:	462b      	mov	r3, r5
 8019500:	bfa8      	it	ge
 8019502:	4643      	movge	r3, r8
 8019504:	1ad2      	subs	r2, r2, r3
 8019506:	9205      	str	r2, [sp, #20]
 8019508:	1aed      	subs	r5, r5, r3
 801950a:	eba8 0803 	sub.w	r8, r8, r3
 801950e:	9b07      	ldr	r3, [sp, #28]
 8019510:	b1eb      	cbz	r3, 801954e <_dtoa_r+0x76e>
 8019512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019514:	2b00      	cmp	r3, #0
 8019516:	d067      	beq.n	80195e8 <_dtoa_r+0x808>
 8019518:	b18f      	cbz	r7, 801953e <_dtoa_r+0x75e>
 801951a:	4631      	mov	r1, r6
 801951c:	463a      	mov	r2, r7
 801951e:	4620      	mov	r0, r4
 8019520:	f000 ff16 	bl	801a350 <__pow5mult>
 8019524:	9a04      	ldr	r2, [sp, #16]
 8019526:	4601      	mov	r1, r0
 8019528:	4606      	mov	r6, r0
 801952a:	4620      	mov	r0, r4
 801952c:	f000 fe79 	bl	801a222 <__multiply>
 8019530:	9904      	ldr	r1, [sp, #16]
 8019532:	9008      	str	r0, [sp, #32]
 8019534:	4620      	mov	r0, r4
 8019536:	f000 fd8d 	bl	801a054 <_Bfree>
 801953a:	9b08      	ldr	r3, [sp, #32]
 801953c:	9304      	str	r3, [sp, #16]
 801953e:	9b07      	ldr	r3, [sp, #28]
 8019540:	1bda      	subs	r2, r3, r7
 8019542:	d004      	beq.n	801954e <_dtoa_r+0x76e>
 8019544:	9904      	ldr	r1, [sp, #16]
 8019546:	4620      	mov	r0, r4
 8019548:	f000 ff02 	bl	801a350 <__pow5mult>
 801954c:	9004      	str	r0, [sp, #16]
 801954e:	2101      	movs	r1, #1
 8019550:	4620      	mov	r0, r4
 8019552:	f000 fe5d 	bl	801a210 <__i2b>
 8019556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019558:	4607      	mov	r7, r0
 801955a:	2b00      	cmp	r3, #0
 801955c:	f000 81d0 	beq.w	8019900 <_dtoa_r+0xb20>
 8019560:	461a      	mov	r2, r3
 8019562:	4601      	mov	r1, r0
 8019564:	4620      	mov	r0, r4
 8019566:	f000 fef3 	bl	801a350 <__pow5mult>
 801956a:	9b06      	ldr	r3, [sp, #24]
 801956c:	2b01      	cmp	r3, #1
 801956e:	4607      	mov	r7, r0
 8019570:	dc40      	bgt.n	80195f4 <_dtoa_r+0x814>
 8019572:	9b00      	ldr	r3, [sp, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d139      	bne.n	80195ec <_dtoa_r+0x80c>
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801957e:	2b00      	cmp	r3, #0
 8019580:	d136      	bne.n	80195f0 <_dtoa_r+0x810>
 8019582:	9b01      	ldr	r3, [sp, #4]
 8019584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019588:	0d1b      	lsrs	r3, r3, #20
 801958a:	051b      	lsls	r3, r3, #20
 801958c:	b12b      	cbz	r3, 801959a <_dtoa_r+0x7ba>
 801958e:	9b05      	ldr	r3, [sp, #20]
 8019590:	3301      	adds	r3, #1
 8019592:	9305      	str	r3, [sp, #20]
 8019594:	f108 0801 	add.w	r8, r8, #1
 8019598:	2301      	movs	r3, #1
 801959a:	9307      	str	r3, [sp, #28]
 801959c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d12a      	bne.n	80195f8 <_dtoa_r+0x818>
 80195a2:	2001      	movs	r0, #1
 80195a4:	e030      	b.n	8019608 <_dtoa_r+0x828>
 80195a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80195a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80195ac:	e795      	b.n	80194da <_dtoa_r+0x6fa>
 80195ae:	9b07      	ldr	r3, [sp, #28]
 80195b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80195b4:	42bb      	cmp	r3, r7
 80195b6:	bfbf      	itttt	lt
 80195b8:	9b07      	ldrlt	r3, [sp, #28]
 80195ba:	9707      	strlt	r7, [sp, #28]
 80195bc:	1afa      	sublt	r2, r7, r3
 80195be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80195c0:	bfbb      	ittet	lt
 80195c2:	189b      	addlt	r3, r3, r2
 80195c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80195c6:	1bdf      	subge	r7, r3, r7
 80195c8:	2700      	movlt	r7, #0
 80195ca:	f1b9 0f00 	cmp.w	r9, #0
 80195ce:	bfb5      	itete	lt
 80195d0:	9b05      	ldrlt	r3, [sp, #20]
 80195d2:	9d05      	ldrge	r5, [sp, #20]
 80195d4:	eba3 0509 	sublt.w	r5, r3, r9
 80195d8:	464b      	movge	r3, r9
 80195da:	bfb8      	it	lt
 80195dc:	2300      	movlt	r3, #0
 80195de:	e77e      	b.n	80194de <_dtoa_r+0x6fe>
 80195e0:	9f07      	ldr	r7, [sp, #28]
 80195e2:	9d05      	ldr	r5, [sp, #20]
 80195e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80195e6:	e783      	b.n	80194f0 <_dtoa_r+0x710>
 80195e8:	9a07      	ldr	r2, [sp, #28]
 80195ea:	e7ab      	b.n	8019544 <_dtoa_r+0x764>
 80195ec:	2300      	movs	r3, #0
 80195ee:	e7d4      	b.n	801959a <_dtoa_r+0x7ba>
 80195f0:	9b00      	ldr	r3, [sp, #0]
 80195f2:	e7d2      	b.n	801959a <_dtoa_r+0x7ba>
 80195f4:	2300      	movs	r3, #0
 80195f6:	9307      	str	r3, [sp, #28]
 80195f8:	693b      	ldr	r3, [r7, #16]
 80195fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80195fe:	6918      	ldr	r0, [r3, #16]
 8019600:	f000 fdb8 	bl	801a174 <__hi0bits>
 8019604:	f1c0 0020 	rsb	r0, r0, #32
 8019608:	4440      	add	r0, r8
 801960a:	f010 001f 	ands.w	r0, r0, #31
 801960e:	d047      	beq.n	80196a0 <_dtoa_r+0x8c0>
 8019610:	f1c0 0320 	rsb	r3, r0, #32
 8019614:	2b04      	cmp	r3, #4
 8019616:	dd3b      	ble.n	8019690 <_dtoa_r+0x8b0>
 8019618:	9b05      	ldr	r3, [sp, #20]
 801961a:	f1c0 001c 	rsb	r0, r0, #28
 801961e:	4403      	add	r3, r0
 8019620:	9305      	str	r3, [sp, #20]
 8019622:	4405      	add	r5, r0
 8019624:	4480      	add	r8, r0
 8019626:	9b05      	ldr	r3, [sp, #20]
 8019628:	2b00      	cmp	r3, #0
 801962a:	dd05      	ble.n	8019638 <_dtoa_r+0x858>
 801962c:	461a      	mov	r2, r3
 801962e:	9904      	ldr	r1, [sp, #16]
 8019630:	4620      	mov	r0, r4
 8019632:	f000 fedb 	bl	801a3ec <__lshift>
 8019636:	9004      	str	r0, [sp, #16]
 8019638:	f1b8 0f00 	cmp.w	r8, #0
 801963c:	dd05      	ble.n	801964a <_dtoa_r+0x86a>
 801963e:	4639      	mov	r1, r7
 8019640:	4642      	mov	r2, r8
 8019642:	4620      	mov	r0, r4
 8019644:	f000 fed2 	bl	801a3ec <__lshift>
 8019648:	4607      	mov	r7, r0
 801964a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801964c:	b353      	cbz	r3, 80196a4 <_dtoa_r+0x8c4>
 801964e:	4639      	mov	r1, r7
 8019650:	9804      	ldr	r0, [sp, #16]
 8019652:	f000 ff1f 	bl	801a494 <__mcmp>
 8019656:	2800      	cmp	r0, #0
 8019658:	da24      	bge.n	80196a4 <_dtoa_r+0x8c4>
 801965a:	2300      	movs	r3, #0
 801965c:	220a      	movs	r2, #10
 801965e:	9904      	ldr	r1, [sp, #16]
 8019660:	4620      	mov	r0, r4
 8019662:	f000 fd0e 	bl	801a082 <__multadd>
 8019666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019668:	9004      	str	r0, [sp, #16]
 801966a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801966e:	2b00      	cmp	r3, #0
 8019670:	f000 814d 	beq.w	801990e <_dtoa_r+0xb2e>
 8019674:	2300      	movs	r3, #0
 8019676:	4631      	mov	r1, r6
 8019678:	220a      	movs	r2, #10
 801967a:	4620      	mov	r0, r4
 801967c:	f000 fd01 	bl	801a082 <__multadd>
 8019680:	9b02      	ldr	r3, [sp, #8]
 8019682:	2b00      	cmp	r3, #0
 8019684:	4606      	mov	r6, r0
 8019686:	dc4f      	bgt.n	8019728 <_dtoa_r+0x948>
 8019688:	9b06      	ldr	r3, [sp, #24]
 801968a:	2b02      	cmp	r3, #2
 801968c:	dd4c      	ble.n	8019728 <_dtoa_r+0x948>
 801968e:	e011      	b.n	80196b4 <_dtoa_r+0x8d4>
 8019690:	d0c9      	beq.n	8019626 <_dtoa_r+0x846>
 8019692:	9a05      	ldr	r2, [sp, #20]
 8019694:	331c      	adds	r3, #28
 8019696:	441a      	add	r2, r3
 8019698:	9205      	str	r2, [sp, #20]
 801969a:	441d      	add	r5, r3
 801969c:	4498      	add	r8, r3
 801969e:	e7c2      	b.n	8019626 <_dtoa_r+0x846>
 80196a0:	4603      	mov	r3, r0
 80196a2:	e7f6      	b.n	8019692 <_dtoa_r+0x8b2>
 80196a4:	f1b9 0f00 	cmp.w	r9, #0
 80196a8:	dc38      	bgt.n	801971c <_dtoa_r+0x93c>
 80196aa:	9b06      	ldr	r3, [sp, #24]
 80196ac:	2b02      	cmp	r3, #2
 80196ae:	dd35      	ble.n	801971c <_dtoa_r+0x93c>
 80196b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80196b4:	9b02      	ldr	r3, [sp, #8]
 80196b6:	b963      	cbnz	r3, 80196d2 <_dtoa_r+0x8f2>
 80196b8:	4639      	mov	r1, r7
 80196ba:	2205      	movs	r2, #5
 80196bc:	4620      	mov	r0, r4
 80196be:	f000 fce0 	bl	801a082 <__multadd>
 80196c2:	4601      	mov	r1, r0
 80196c4:	4607      	mov	r7, r0
 80196c6:	9804      	ldr	r0, [sp, #16]
 80196c8:	f000 fee4 	bl	801a494 <__mcmp>
 80196cc:	2800      	cmp	r0, #0
 80196ce:	f73f adcc 	bgt.w	801926a <_dtoa_r+0x48a>
 80196d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196d4:	465d      	mov	r5, fp
 80196d6:	ea6f 0a03 	mvn.w	sl, r3
 80196da:	f04f 0900 	mov.w	r9, #0
 80196de:	4639      	mov	r1, r7
 80196e0:	4620      	mov	r0, r4
 80196e2:	f000 fcb7 	bl	801a054 <_Bfree>
 80196e6:	2e00      	cmp	r6, #0
 80196e8:	f43f aeb7 	beq.w	801945a <_dtoa_r+0x67a>
 80196ec:	f1b9 0f00 	cmp.w	r9, #0
 80196f0:	d005      	beq.n	80196fe <_dtoa_r+0x91e>
 80196f2:	45b1      	cmp	r9, r6
 80196f4:	d003      	beq.n	80196fe <_dtoa_r+0x91e>
 80196f6:	4649      	mov	r1, r9
 80196f8:	4620      	mov	r0, r4
 80196fa:	f000 fcab 	bl	801a054 <_Bfree>
 80196fe:	4631      	mov	r1, r6
 8019700:	4620      	mov	r0, r4
 8019702:	f000 fca7 	bl	801a054 <_Bfree>
 8019706:	e6a8      	b.n	801945a <_dtoa_r+0x67a>
 8019708:	2700      	movs	r7, #0
 801970a:	463e      	mov	r6, r7
 801970c:	e7e1      	b.n	80196d2 <_dtoa_r+0x8f2>
 801970e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019712:	463e      	mov	r6, r7
 8019714:	e5a9      	b.n	801926a <_dtoa_r+0x48a>
 8019716:	bf00      	nop
 8019718:	40240000 	.word	0x40240000
 801971c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801971e:	f8cd 9008 	str.w	r9, [sp, #8]
 8019722:	2b00      	cmp	r3, #0
 8019724:	f000 80fa 	beq.w	801991c <_dtoa_r+0xb3c>
 8019728:	2d00      	cmp	r5, #0
 801972a:	dd05      	ble.n	8019738 <_dtoa_r+0x958>
 801972c:	4631      	mov	r1, r6
 801972e:	462a      	mov	r2, r5
 8019730:	4620      	mov	r0, r4
 8019732:	f000 fe5b 	bl	801a3ec <__lshift>
 8019736:	4606      	mov	r6, r0
 8019738:	9b07      	ldr	r3, [sp, #28]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d04c      	beq.n	80197d8 <_dtoa_r+0x9f8>
 801973e:	6871      	ldr	r1, [r6, #4]
 8019740:	4620      	mov	r0, r4
 8019742:	f000 fc53 	bl	8019fec <_Balloc>
 8019746:	6932      	ldr	r2, [r6, #16]
 8019748:	3202      	adds	r2, #2
 801974a:	4605      	mov	r5, r0
 801974c:	0092      	lsls	r2, r2, #2
 801974e:	f106 010c 	add.w	r1, r6, #12
 8019752:	300c      	adds	r0, #12
 8019754:	f7fd fc62 	bl	801701c <memcpy>
 8019758:	2201      	movs	r2, #1
 801975a:	4629      	mov	r1, r5
 801975c:	4620      	mov	r0, r4
 801975e:	f000 fe45 	bl	801a3ec <__lshift>
 8019762:	9b00      	ldr	r3, [sp, #0]
 8019764:	f8cd b014 	str.w	fp, [sp, #20]
 8019768:	f003 0301 	and.w	r3, r3, #1
 801976c:	46b1      	mov	r9, r6
 801976e:	9307      	str	r3, [sp, #28]
 8019770:	4606      	mov	r6, r0
 8019772:	4639      	mov	r1, r7
 8019774:	9804      	ldr	r0, [sp, #16]
 8019776:	f7ff faa7 	bl	8018cc8 <quorem>
 801977a:	4649      	mov	r1, r9
 801977c:	4605      	mov	r5, r0
 801977e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019782:	9804      	ldr	r0, [sp, #16]
 8019784:	f000 fe86 	bl	801a494 <__mcmp>
 8019788:	4632      	mov	r2, r6
 801978a:	9000      	str	r0, [sp, #0]
 801978c:	4639      	mov	r1, r7
 801978e:	4620      	mov	r0, r4
 8019790:	f000 fe9a 	bl	801a4c8 <__mdiff>
 8019794:	68c3      	ldr	r3, [r0, #12]
 8019796:	4602      	mov	r2, r0
 8019798:	bb03      	cbnz	r3, 80197dc <_dtoa_r+0x9fc>
 801979a:	4601      	mov	r1, r0
 801979c:	9008      	str	r0, [sp, #32]
 801979e:	9804      	ldr	r0, [sp, #16]
 80197a0:	f000 fe78 	bl	801a494 <__mcmp>
 80197a4:	9a08      	ldr	r2, [sp, #32]
 80197a6:	4603      	mov	r3, r0
 80197a8:	4611      	mov	r1, r2
 80197aa:	4620      	mov	r0, r4
 80197ac:	9308      	str	r3, [sp, #32]
 80197ae:	f000 fc51 	bl	801a054 <_Bfree>
 80197b2:	9b08      	ldr	r3, [sp, #32]
 80197b4:	b9a3      	cbnz	r3, 80197e0 <_dtoa_r+0xa00>
 80197b6:	9a06      	ldr	r2, [sp, #24]
 80197b8:	b992      	cbnz	r2, 80197e0 <_dtoa_r+0xa00>
 80197ba:	9a07      	ldr	r2, [sp, #28]
 80197bc:	b982      	cbnz	r2, 80197e0 <_dtoa_r+0xa00>
 80197be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80197c2:	d029      	beq.n	8019818 <_dtoa_r+0xa38>
 80197c4:	9b00      	ldr	r3, [sp, #0]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	dd01      	ble.n	80197ce <_dtoa_r+0x9ee>
 80197ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80197ce:	9b05      	ldr	r3, [sp, #20]
 80197d0:	1c5d      	adds	r5, r3, #1
 80197d2:	f883 8000 	strb.w	r8, [r3]
 80197d6:	e782      	b.n	80196de <_dtoa_r+0x8fe>
 80197d8:	4630      	mov	r0, r6
 80197da:	e7c2      	b.n	8019762 <_dtoa_r+0x982>
 80197dc:	2301      	movs	r3, #1
 80197de:	e7e3      	b.n	80197a8 <_dtoa_r+0x9c8>
 80197e0:	9a00      	ldr	r2, [sp, #0]
 80197e2:	2a00      	cmp	r2, #0
 80197e4:	db04      	blt.n	80197f0 <_dtoa_r+0xa10>
 80197e6:	d125      	bne.n	8019834 <_dtoa_r+0xa54>
 80197e8:	9a06      	ldr	r2, [sp, #24]
 80197ea:	bb1a      	cbnz	r2, 8019834 <_dtoa_r+0xa54>
 80197ec:	9a07      	ldr	r2, [sp, #28]
 80197ee:	bb0a      	cbnz	r2, 8019834 <_dtoa_r+0xa54>
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	ddec      	ble.n	80197ce <_dtoa_r+0x9ee>
 80197f4:	2201      	movs	r2, #1
 80197f6:	9904      	ldr	r1, [sp, #16]
 80197f8:	4620      	mov	r0, r4
 80197fa:	f000 fdf7 	bl	801a3ec <__lshift>
 80197fe:	4639      	mov	r1, r7
 8019800:	9004      	str	r0, [sp, #16]
 8019802:	f000 fe47 	bl	801a494 <__mcmp>
 8019806:	2800      	cmp	r0, #0
 8019808:	dc03      	bgt.n	8019812 <_dtoa_r+0xa32>
 801980a:	d1e0      	bne.n	80197ce <_dtoa_r+0x9ee>
 801980c:	f018 0f01 	tst.w	r8, #1
 8019810:	d0dd      	beq.n	80197ce <_dtoa_r+0x9ee>
 8019812:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019816:	d1d8      	bne.n	80197ca <_dtoa_r+0x9ea>
 8019818:	9b05      	ldr	r3, [sp, #20]
 801981a:	9a05      	ldr	r2, [sp, #20]
 801981c:	1c5d      	adds	r5, r3, #1
 801981e:	2339      	movs	r3, #57	; 0x39
 8019820:	7013      	strb	r3, [r2, #0]
 8019822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019826:	2b39      	cmp	r3, #57	; 0x39
 8019828:	f105 32ff 	add.w	r2, r5, #4294967295
 801982c:	d04f      	beq.n	80198ce <_dtoa_r+0xaee>
 801982e:	3301      	adds	r3, #1
 8019830:	7013      	strb	r3, [r2, #0]
 8019832:	e754      	b.n	80196de <_dtoa_r+0x8fe>
 8019834:	9a05      	ldr	r2, [sp, #20]
 8019836:	2b00      	cmp	r3, #0
 8019838:	f102 0501 	add.w	r5, r2, #1
 801983c:	dd06      	ble.n	801984c <_dtoa_r+0xa6c>
 801983e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019842:	d0e9      	beq.n	8019818 <_dtoa_r+0xa38>
 8019844:	f108 0801 	add.w	r8, r8, #1
 8019848:	9b05      	ldr	r3, [sp, #20]
 801984a:	e7c2      	b.n	80197d2 <_dtoa_r+0x9f2>
 801984c:	9a02      	ldr	r2, [sp, #8]
 801984e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019852:	eba5 030b 	sub.w	r3, r5, fp
 8019856:	4293      	cmp	r3, r2
 8019858:	d021      	beq.n	801989e <_dtoa_r+0xabe>
 801985a:	2300      	movs	r3, #0
 801985c:	220a      	movs	r2, #10
 801985e:	9904      	ldr	r1, [sp, #16]
 8019860:	4620      	mov	r0, r4
 8019862:	f000 fc0e 	bl	801a082 <__multadd>
 8019866:	45b1      	cmp	r9, r6
 8019868:	9004      	str	r0, [sp, #16]
 801986a:	f04f 0300 	mov.w	r3, #0
 801986e:	f04f 020a 	mov.w	r2, #10
 8019872:	4649      	mov	r1, r9
 8019874:	4620      	mov	r0, r4
 8019876:	d105      	bne.n	8019884 <_dtoa_r+0xaa4>
 8019878:	f000 fc03 	bl	801a082 <__multadd>
 801987c:	4681      	mov	r9, r0
 801987e:	4606      	mov	r6, r0
 8019880:	9505      	str	r5, [sp, #20]
 8019882:	e776      	b.n	8019772 <_dtoa_r+0x992>
 8019884:	f000 fbfd 	bl	801a082 <__multadd>
 8019888:	4631      	mov	r1, r6
 801988a:	4681      	mov	r9, r0
 801988c:	2300      	movs	r3, #0
 801988e:	220a      	movs	r2, #10
 8019890:	4620      	mov	r0, r4
 8019892:	f000 fbf6 	bl	801a082 <__multadd>
 8019896:	4606      	mov	r6, r0
 8019898:	e7f2      	b.n	8019880 <_dtoa_r+0xaa0>
 801989a:	f04f 0900 	mov.w	r9, #0
 801989e:	2201      	movs	r2, #1
 80198a0:	9904      	ldr	r1, [sp, #16]
 80198a2:	4620      	mov	r0, r4
 80198a4:	f000 fda2 	bl	801a3ec <__lshift>
 80198a8:	4639      	mov	r1, r7
 80198aa:	9004      	str	r0, [sp, #16]
 80198ac:	f000 fdf2 	bl	801a494 <__mcmp>
 80198b0:	2800      	cmp	r0, #0
 80198b2:	dcb6      	bgt.n	8019822 <_dtoa_r+0xa42>
 80198b4:	d102      	bne.n	80198bc <_dtoa_r+0xadc>
 80198b6:	f018 0f01 	tst.w	r8, #1
 80198ba:	d1b2      	bne.n	8019822 <_dtoa_r+0xa42>
 80198bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80198c0:	2b30      	cmp	r3, #48	; 0x30
 80198c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80198c6:	f47f af0a 	bne.w	80196de <_dtoa_r+0x8fe>
 80198ca:	4615      	mov	r5, r2
 80198cc:	e7f6      	b.n	80198bc <_dtoa_r+0xadc>
 80198ce:	4593      	cmp	fp, r2
 80198d0:	d105      	bne.n	80198de <_dtoa_r+0xafe>
 80198d2:	2331      	movs	r3, #49	; 0x31
 80198d4:	f10a 0a01 	add.w	sl, sl, #1
 80198d8:	f88b 3000 	strb.w	r3, [fp]
 80198dc:	e6ff      	b.n	80196de <_dtoa_r+0x8fe>
 80198de:	4615      	mov	r5, r2
 80198e0:	e79f      	b.n	8019822 <_dtoa_r+0xa42>
 80198e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019948 <_dtoa_r+0xb68>
 80198e6:	e007      	b.n	80198f8 <_dtoa_r+0xb18>
 80198e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80198ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 801994c <_dtoa_r+0xb6c>
 80198ee:	b11b      	cbz	r3, 80198f8 <_dtoa_r+0xb18>
 80198f0:	f10b 0308 	add.w	r3, fp, #8
 80198f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80198f6:	6013      	str	r3, [r2, #0]
 80198f8:	4658      	mov	r0, fp
 80198fa:	b017      	add	sp, #92	; 0x5c
 80198fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019900:	9b06      	ldr	r3, [sp, #24]
 8019902:	2b01      	cmp	r3, #1
 8019904:	f77f ae35 	ble.w	8019572 <_dtoa_r+0x792>
 8019908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801990a:	9307      	str	r3, [sp, #28]
 801990c:	e649      	b.n	80195a2 <_dtoa_r+0x7c2>
 801990e:	9b02      	ldr	r3, [sp, #8]
 8019910:	2b00      	cmp	r3, #0
 8019912:	dc03      	bgt.n	801991c <_dtoa_r+0xb3c>
 8019914:	9b06      	ldr	r3, [sp, #24]
 8019916:	2b02      	cmp	r3, #2
 8019918:	f73f aecc 	bgt.w	80196b4 <_dtoa_r+0x8d4>
 801991c:	465d      	mov	r5, fp
 801991e:	4639      	mov	r1, r7
 8019920:	9804      	ldr	r0, [sp, #16]
 8019922:	f7ff f9d1 	bl	8018cc8 <quorem>
 8019926:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801992a:	f805 8b01 	strb.w	r8, [r5], #1
 801992e:	9a02      	ldr	r2, [sp, #8]
 8019930:	eba5 030b 	sub.w	r3, r5, fp
 8019934:	429a      	cmp	r2, r3
 8019936:	ddb0      	ble.n	801989a <_dtoa_r+0xaba>
 8019938:	2300      	movs	r3, #0
 801993a:	220a      	movs	r2, #10
 801993c:	9904      	ldr	r1, [sp, #16]
 801993e:	4620      	mov	r0, r4
 8019940:	f000 fb9f 	bl	801a082 <__multadd>
 8019944:	9004      	str	r0, [sp, #16]
 8019946:	e7ea      	b.n	801991e <_dtoa_r+0xb3e>
 8019948:	0801e37c 	.word	0x0801e37c
 801994c:	0801e3f8 	.word	0x0801e3f8

08019950 <rshift>:
 8019950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019952:	6906      	ldr	r6, [r0, #16]
 8019954:	114b      	asrs	r3, r1, #5
 8019956:	429e      	cmp	r6, r3
 8019958:	f100 0414 	add.w	r4, r0, #20
 801995c:	dd30      	ble.n	80199c0 <rshift+0x70>
 801995e:	f011 011f 	ands.w	r1, r1, #31
 8019962:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019966:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801996a:	d108      	bne.n	801997e <rshift+0x2e>
 801996c:	4621      	mov	r1, r4
 801996e:	42b2      	cmp	r2, r6
 8019970:	460b      	mov	r3, r1
 8019972:	d211      	bcs.n	8019998 <rshift+0x48>
 8019974:	f852 3b04 	ldr.w	r3, [r2], #4
 8019978:	f841 3b04 	str.w	r3, [r1], #4
 801997c:	e7f7      	b.n	801996e <rshift+0x1e>
 801997e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8019982:	f1c1 0c20 	rsb	ip, r1, #32
 8019986:	40cd      	lsrs	r5, r1
 8019988:	3204      	adds	r2, #4
 801998a:	4623      	mov	r3, r4
 801998c:	42b2      	cmp	r2, r6
 801998e:	4617      	mov	r7, r2
 8019990:	d30c      	bcc.n	80199ac <rshift+0x5c>
 8019992:	601d      	str	r5, [r3, #0]
 8019994:	b105      	cbz	r5, 8019998 <rshift+0x48>
 8019996:	3304      	adds	r3, #4
 8019998:	1b1a      	subs	r2, r3, r4
 801999a:	42a3      	cmp	r3, r4
 801999c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80199a0:	bf08      	it	eq
 80199a2:	2300      	moveq	r3, #0
 80199a4:	6102      	str	r2, [r0, #16]
 80199a6:	bf08      	it	eq
 80199a8:	6143      	streq	r3, [r0, #20]
 80199aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199ac:	683f      	ldr	r7, [r7, #0]
 80199ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80199b2:	433d      	orrs	r5, r7
 80199b4:	f843 5b04 	str.w	r5, [r3], #4
 80199b8:	f852 5b04 	ldr.w	r5, [r2], #4
 80199bc:	40cd      	lsrs	r5, r1
 80199be:	e7e5      	b.n	801998c <rshift+0x3c>
 80199c0:	4623      	mov	r3, r4
 80199c2:	e7e9      	b.n	8019998 <rshift+0x48>

080199c4 <__hexdig_fun>:
 80199c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80199c8:	2b09      	cmp	r3, #9
 80199ca:	d802      	bhi.n	80199d2 <__hexdig_fun+0xe>
 80199cc:	3820      	subs	r0, #32
 80199ce:	b2c0      	uxtb	r0, r0
 80199d0:	4770      	bx	lr
 80199d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80199d6:	2b05      	cmp	r3, #5
 80199d8:	d801      	bhi.n	80199de <__hexdig_fun+0x1a>
 80199da:	3847      	subs	r0, #71	; 0x47
 80199dc:	e7f7      	b.n	80199ce <__hexdig_fun+0xa>
 80199de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80199e2:	2b05      	cmp	r3, #5
 80199e4:	d801      	bhi.n	80199ea <__hexdig_fun+0x26>
 80199e6:	3827      	subs	r0, #39	; 0x27
 80199e8:	e7f1      	b.n	80199ce <__hexdig_fun+0xa>
 80199ea:	2000      	movs	r0, #0
 80199ec:	4770      	bx	lr

080199ee <__gethex>:
 80199ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f2:	b08b      	sub	sp, #44	; 0x2c
 80199f4:	468a      	mov	sl, r1
 80199f6:	9002      	str	r0, [sp, #8]
 80199f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80199fa:	9306      	str	r3, [sp, #24]
 80199fc:	4690      	mov	r8, r2
 80199fe:	f000 fad0 	bl	8019fa2 <__localeconv_l>
 8019a02:	6803      	ldr	r3, [r0, #0]
 8019a04:	9303      	str	r3, [sp, #12]
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7e6 fbec 	bl	80001e4 <strlen>
 8019a0c:	9b03      	ldr	r3, [sp, #12]
 8019a0e:	9001      	str	r0, [sp, #4]
 8019a10:	4403      	add	r3, r0
 8019a12:	f04f 0b00 	mov.w	fp, #0
 8019a16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019a1a:	9307      	str	r3, [sp, #28]
 8019a1c:	f8da 3000 	ldr.w	r3, [sl]
 8019a20:	3302      	adds	r3, #2
 8019a22:	461f      	mov	r7, r3
 8019a24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019a28:	2830      	cmp	r0, #48	; 0x30
 8019a2a:	d06c      	beq.n	8019b06 <__gethex+0x118>
 8019a2c:	f7ff ffca 	bl	80199c4 <__hexdig_fun>
 8019a30:	4604      	mov	r4, r0
 8019a32:	2800      	cmp	r0, #0
 8019a34:	d16a      	bne.n	8019b0c <__gethex+0x11e>
 8019a36:	9a01      	ldr	r2, [sp, #4]
 8019a38:	9903      	ldr	r1, [sp, #12]
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	f7fe fa42 	bl	8017ec4 <strncmp>
 8019a40:	2800      	cmp	r0, #0
 8019a42:	d166      	bne.n	8019b12 <__gethex+0x124>
 8019a44:	9b01      	ldr	r3, [sp, #4]
 8019a46:	5cf8      	ldrb	r0, [r7, r3]
 8019a48:	18fe      	adds	r6, r7, r3
 8019a4a:	f7ff ffbb 	bl	80199c4 <__hexdig_fun>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	d062      	beq.n	8019b18 <__gethex+0x12a>
 8019a52:	4633      	mov	r3, r6
 8019a54:	7818      	ldrb	r0, [r3, #0]
 8019a56:	2830      	cmp	r0, #48	; 0x30
 8019a58:	461f      	mov	r7, r3
 8019a5a:	f103 0301 	add.w	r3, r3, #1
 8019a5e:	d0f9      	beq.n	8019a54 <__gethex+0x66>
 8019a60:	f7ff ffb0 	bl	80199c4 <__hexdig_fun>
 8019a64:	fab0 f580 	clz	r5, r0
 8019a68:	096d      	lsrs	r5, r5, #5
 8019a6a:	4634      	mov	r4, r6
 8019a6c:	f04f 0b01 	mov.w	fp, #1
 8019a70:	463a      	mov	r2, r7
 8019a72:	4616      	mov	r6, r2
 8019a74:	3201      	adds	r2, #1
 8019a76:	7830      	ldrb	r0, [r6, #0]
 8019a78:	f7ff ffa4 	bl	80199c4 <__hexdig_fun>
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	d1f8      	bne.n	8019a72 <__gethex+0x84>
 8019a80:	9a01      	ldr	r2, [sp, #4]
 8019a82:	9903      	ldr	r1, [sp, #12]
 8019a84:	4630      	mov	r0, r6
 8019a86:	f7fe fa1d 	bl	8017ec4 <strncmp>
 8019a8a:	b950      	cbnz	r0, 8019aa2 <__gethex+0xb4>
 8019a8c:	b954      	cbnz	r4, 8019aa4 <__gethex+0xb6>
 8019a8e:	9b01      	ldr	r3, [sp, #4]
 8019a90:	18f4      	adds	r4, r6, r3
 8019a92:	4622      	mov	r2, r4
 8019a94:	4616      	mov	r6, r2
 8019a96:	3201      	adds	r2, #1
 8019a98:	7830      	ldrb	r0, [r6, #0]
 8019a9a:	f7ff ff93 	bl	80199c4 <__hexdig_fun>
 8019a9e:	2800      	cmp	r0, #0
 8019aa0:	d1f8      	bne.n	8019a94 <__gethex+0xa6>
 8019aa2:	b10c      	cbz	r4, 8019aa8 <__gethex+0xba>
 8019aa4:	1ba4      	subs	r4, r4, r6
 8019aa6:	00a4      	lsls	r4, r4, #2
 8019aa8:	7833      	ldrb	r3, [r6, #0]
 8019aaa:	2b50      	cmp	r3, #80	; 0x50
 8019aac:	d001      	beq.n	8019ab2 <__gethex+0xc4>
 8019aae:	2b70      	cmp	r3, #112	; 0x70
 8019ab0:	d140      	bne.n	8019b34 <__gethex+0x146>
 8019ab2:	7873      	ldrb	r3, [r6, #1]
 8019ab4:	2b2b      	cmp	r3, #43	; 0x2b
 8019ab6:	d031      	beq.n	8019b1c <__gethex+0x12e>
 8019ab8:	2b2d      	cmp	r3, #45	; 0x2d
 8019aba:	d033      	beq.n	8019b24 <__gethex+0x136>
 8019abc:	1c71      	adds	r1, r6, #1
 8019abe:	f04f 0900 	mov.w	r9, #0
 8019ac2:	7808      	ldrb	r0, [r1, #0]
 8019ac4:	f7ff ff7e 	bl	80199c4 <__hexdig_fun>
 8019ac8:	1e43      	subs	r3, r0, #1
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	2b18      	cmp	r3, #24
 8019ace:	d831      	bhi.n	8019b34 <__gethex+0x146>
 8019ad0:	f1a0 0210 	sub.w	r2, r0, #16
 8019ad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019ad8:	f7ff ff74 	bl	80199c4 <__hexdig_fun>
 8019adc:	1e43      	subs	r3, r0, #1
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	2b18      	cmp	r3, #24
 8019ae2:	d922      	bls.n	8019b2a <__gethex+0x13c>
 8019ae4:	f1b9 0f00 	cmp.w	r9, #0
 8019ae8:	d000      	beq.n	8019aec <__gethex+0xfe>
 8019aea:	4252      	negs	r2, r2
 8019aec:	4414      	add	r4, r2
 8019aee:	f8ca 1000 	str.w	r1, [sl]
 8019af2:	b30d      	cbz	r5, 8019b38 <__gethex+0x14a>
 8019af4:	f1bb 0f00 	cmp.w	fp, #0
 8019af8:	bf0c      	ite	eq
 8019afa:	2706      	moveq	r7, #6
 8019afc:	2700      	movne	r7, #0
 8019afe:	4638      	mov	r0, r7
 8019b00:	b00b      	add	sp, #44	; 0x2c
 8019b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b06:	f10b 0b01 	add.w	fp, fp, #1
 8019b0a:	e78a      	b.n	8019a22 <__gethex+0x34>
 8019b0c:	2500      	movs	r5, #0
 8019b0e:	462c      	mov	r4, r5
 8019b10:	e7ae      	b.n	8019a70 <__gethex+0x82>
 8019b12:	463e      	mov	r6, r7
 8019b14:	2501      	movs	r5, #1
 8019b16:	e7c7      	b.n	8019aa8 <__gethex+0xba>
 8019b18:	4604      	mov	r4, r0
 8019b1a:	e7fb      	b.n	8019b14 <__gethex+0x126>
 8019b1c:	f04f 0900 	mov.w	r9, #0
 8019b20:	1cb1      	adds	r1, r6, #2
 8019b22:	e7ce      	b.n	8019ac2 <__gethex+0xd4>
 8019b24:	f04f 0901 	mov.w	r9, #1
 8019b28:	e7fa      	b.n	8019b20 <__gethex+0x132>
 8019b2a:	230a      	movs	r3, #10
 8019b2c:	fb03 0202 	mla	r2, r3, r2, r0
 8019b30:	3a10      	subs	r2, #16
 8019b32:	e7cf      	b.n	8019ad4 <__gethex+0xe6>
 8019b34:	4631      	mov	r1, r6
 8019b36:	e7da      	b.n	8019aee <__gethex+0x100>
 8019b38:	1bf3      	subs	r3, r6, r7
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	4629      	mov	r1, r5
 8019b3e:	2b07      	cmp	r3, #7
 8019b40:	dc49      	bgt.n	8019bd6 <__gethex+0x1e8>
 8019b42:	9802      	ldr	r0, [sp, #8]
 8019b44:	f000 fa52 	bl	8019fec <_Balloc>
 8019b48:	9b01      	ldr	r3, [sp, #4]
 8019b4a:	f100 0914 	add.w	r9, r0, #20
 8019b4e:	f04f 0b00 	mov.w	fp, #0
 8019b52:	f1c3 0301 	rsb	r3, r3, #1
 8019b56:	4605      	mov	r5, r0
 8019b58:	f8cd 9010 	str.w	r9, [sp, #16]
 8019b5c:	46da      	mov	sl, fp
 8019b5e:	9308      	str	r3, [sp, #32]
 8019b60:	42b7      	cmp	r7, r6
 8019b62:	d33b      	bcc.n	8019bdc <__gethex+0x1ee>
 8019b64:	9804      	ldr	r0, [sp, #16]
 8019b66:	f840 ab04 	str.w	sl, [r0], #4
 8019b6a:	eba0 0009 	sub.w	r0, r0, r9
 8019b6e:	1080      	asrs	r0, r0, #2
 8019b70:	6128      	str	r0, [r5, #16]
 8019b72:	0147      	lsls	r7, r0, #5
 8019b74:	4650      	mov	r0, sl
 8019b76:	f000 fafd 	bl	801a174 <__hi0bits>
 8019b7a:	f8d8 6000 	ldr.w	r6, [r8]
 8019b7e:	1a3f      	subs	r7, r7, r0
 8019b80:	42b7      	cmp	r7, r6
 8019b82:	dd64      	ble.n	8019c4e <__gethex+0x260>
 8019b84:	1bbf      	subs	r7, r7, r6
 8019b86:	4639      	mov	r1, r7
 8019b88:	4628      	mov	r0, r5
 8019b8a:	f000 fe0d 	bl	801a7a8 <__any_on>
 8019b8e:	4682      	mov	sl, r0
 8019b90:	b178      	cbz	r0, 8019bb2 <__gethex+0x1c4>
 8019b92:	1e7b      	subs	r3, r7, #1
 8019b94:	1159      	asrs	r1, r3, #5
 8019b96:	f003 021f 	and.w	r2, r3, #31
 8019b9a:	f04f 0a01 	mov.w	sl, #1
 8019b9e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019ba2:	fa0a f202 	lsl.w	r2, sl, r2
 8019ba6:	420a      	tst	r2, r1
 8019ba8:	d003      	beq.n	8019bb2 <__gethex+0x1c4>
 8019baa:	4553      	cmp	r3, sl
 8019bac:	dc46      	bgt.n	8019c3c <__gethex+0x24e>
 8019bae:	f04f 0a02 	mov.w	sl, #2
 8019bb2:	4639      	mov	r1, r7
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	f7ff fecb 	bl	8019950 <rshift>
 8019bba:	443c      	add	r4, r7
 8019bbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019bc0:	42a3      	cmp	r3, r4
 8019bc2:	da52      	bge.n	8019c6a <__gethex+0x27c>
 8019bc4:	4629      	mov	r1, r5
 8019bc6:	9802      	ldr	r0, [sp, #8]
 8019bc8:	f000 fa44 	bl	801a054 <_Bfree>
 8019bcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019bce:	2300      	movs	r3, #0
 8019bd0:	6013      	str	r3, [r2, #0]
 8019bd2:	27a3      	movs	r7, #163	; 0xa3
 8019bd4:	e793      	b.n	8019afe <__gethex+0x110>
 8019bd6:	3101      	adds	r1, #1
 8019bd8:	105b      	asrs	r3, r3, #1
 8019bda:	e7b0      	b.n	8019b3e <__gethex+0x150>
 8019bdc:	1e73      	subs	r3, r6, #1
 8019bde:	9305      	str	r3, [sp, #20]
 8019be0:	9a07      	ldr	r2, [sp, #28]
 8019be2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019be6:	4293      	cmp	r3, r2
 8019be8:	d018      	beq.n	8019c1c <__gethex+0x22e>
 8019bea:	f1bb 0f20 	cmp.w	fp, #32
 8019bee:	d107      	bne.n	8019c00 <__gethex+0x212>
 8019bf0:	9b04      	ldr	r3, [sp, #16]
 8019bf2:	f8c3 a000 	str.w	sl, [r3]
 8019bf6:	3304      	adds	r3, #4
 8019bf8:	f04f 0a00 	mov.w	sl, #0
 8019bfc:	9304      	str	r3, [sp, #16]
 8019bfe:	46d3      	mov	fp, sl
 8019c00:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019c04:	f7ff fede 	bl	80199c4 <__hexdig_fun>
 8019c08:	f000 000f 	and.w	r0, r0, #15
 8019c0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019c10:	ea4a 0a00 	orr.w	sl, sl, r0
 8019c14:	f10b 0b04 	add.w	fp, fp, #4
 8019c18:	9b05      	ldr	r3, [sp, #20]
 8019c1a:	e00d      	b.n	8019c38 <__gethex+0x24a>
 8019c1c:	9b05      	ldr	r3, [sp, #20]
 8019c1e:	9a08      	ldr	r2, [sp, #32]
 8019c20:	4413      	add	r3, r2
 8019c22:	42bb      	cmp	r3, r7
 8019c24:	d3e1      	bcc.n	8019bea <__gethex+0x1fc>
 8019c26:	4618      	mov	r0, r3
 8019c28:	9a01      	ldr	r2, [sp, #4]
 8019c2a:	9903      	ldr	r1, [sp, #12]
 8019c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c2e:	f7fe f949 	bl	8017ec4 <strncmp>
 8019c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d1d8      	bne.n	8019bea <__gethex+0x1fc>
 8019c38:	461e      	mov	r6, r3
 8019c3a:	e791      	b.n	8019b60 <__gethex+0x172>
 8019c3c:	1eb9      	subs	r1, r7, #2
 8019c3e:	4628      	mov	r0, r5
 8019c40:	f000 fdb2 	bl	801a7a8 <__any_on>
 8019c44:	2800      	cmp	r0, #0
 8019c46:	d0b2      	beq.n	8019bae <__gethex+0x1c0>
 8019c48:	f04f 0a03 	mov.w	sl, #3
 8019c4c:	e7b1      	b.n	8019bb2 <__gethex+0x1c4>
 8019c4e:	da09      	bge.n	8019c64 <__gethex+0x276>
 8019c50:	1bf7      	subs	r7, r6, r7
 8019c52:	4629      	mov	r1, r5
 8019c54:	463a      	mov	r2, r7
 8019c56:	9802      	ldr	r0, [sp, #8]
 8019c58:	f000 fbc8 	bl	801a3ec <__lshift>
 8019c5c:	1be4      	subs	r4, r4, r7
 8019c5e:	4605      	mov	r5, r0
 8019c60:	f100 0914 	add.w	r9, r0, #20
 8019c64:	f04f 0a00 	mov.w	sl, #0
 8019c68:	e7a8      	b.n	8019bbc <__gethex+0x1ce>
 8019c6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019c6e:	42a0      	cmp	r0, r4
 8019c70:	dd6a      	ble.n	8019d48 <__gethex+0x35a>
 8019c72:	1b04      	subs	r4, r0, r4
 8019c74:	42a6      	cmp	r6, r4
 8019c76:	dc2e      	bgt.n	8019cd6 <__gethex+0x2e8>
 8019c78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019c7c:	2b02      	cmp	r3, #2
 8019c7e:	d022      	beq.n	8019cc6 <__gethex+0x2d8>
 8019c80:	2b03      	cmp	r3, #3
 8019c82:	d024      	beq.n	8019cce <__gethex+0x2e0>
 8019c84:	2b01      	cmp	r3, #1
 8019c86:	d115      	bne.n	8019cb4 <__gethex+0x2c6>
 8019c88:	42a6      	cmp	r6, r4
 8019c8a:	d113      	bne.n	8019cb4 <__gethex+0x2c6>
 8019c8c:	2e01      	cmp	r6, #1
 8019c8e:	dc0b      	bgt.n	8019ca8 <__gethex+0x2ba>
 8019c90:	9a06      	ldr	r2, [sp, #24]
 8019c92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019c96:	6013      	str	r3, [r2, #0]
 8019c98:	2301      	movs	r3, #1
 8019c9a:	612b      	str	r3, [r5, #16]
 8019c9c:	f8c9 3000 	str.w	r3, [r9]
 8019ca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ca2:	2762      	movs	r7, #98	; 0x62
 8019ca4:	601d      	str	r5, [r3, #0]
 8019ca6:	e72a      	b.n	8019afe <__gethex+0x110>
 8019ca8:	1e71      	subs	r1, r6, #1
 8019caa:	4628      	mov	r0, r5
 8019cac:	f000 fd7c 	bl	801a7a8 <__any_on>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	d1ed      	bne.n	8019c90 <__gethex+0x2a2>
 8019cb4:	4629      	mov	r1, r5
 8019cb6:	9802      	ldr	r0, [sp, #8]
 8019cb8:	f000 f9cc 	bl	801a054 <_Bfree>
 8019cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	6013      	str	r3, [r2, #0]
 8019cc2:	2750      	movs	r7, #80	; 0x50
 8019cc4:	e71b      	b.n	8019afe <__gethex+0x110>
 8019cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d0e1      	beq.n	8019c90 <__gethex+0x2a2>
 8019ccc:	e7f2      	b.n	8019cb4 <__gethex+0x2c6>
 8019cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d1dd      	bne.n	8019c90 <__gethex+0x2a2>
 8019cd4:	e7ee      	b.n	8019cb4 <__gethex+0x2c6>
 8019cd6:	1e67      	subs	r7, r4, #1
 8019cd8:	f1ba 0f00 	cmp.w	sl, #0
 8019cdc:	d131      	bne.n	8019d42 <__gethex+0x354>
 8019cde:	b127      	cbz	r7, 8019cea <__gethex+0x2fc>
 8019ce0:	4639      	mov	r1, r7
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f000 fd60 	bl	801a7a8 <__any_on>
 8019ce8:	4682      	mov	sl, r0
 8019cea:	117a      	asrs	r2, r7, #5
 8019cec:	2301      	movs	r3, #1
 8019cee:	f007 071f 	and.w	r7, r7, #31
 8019cf2:	fa03 f707 	lsl.w	r7, r3, r7
 8019cf6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019cfa:	4621      	mov	r1, r4
 8019cfc:	421f      	tst	r7, r3
 8019cfe:	4628      	mov	r0, r5
 8019d00:	bf18      	it	ne
 8019d02:	f04a 0a02 	orrne.w	sl, sl, #2
 8019d06:	1b36      	subs	r6, r6, r4
 8019d08:	f7ff fe22 	bl	8019950 <rshift>
 8019d0c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019d10:	2702      	movs	r7, #2
 8019d12:	f1ba 0f00 	cmp.w	sl, #0
 8019d16:	d048      	beq.n	8019daa <__gethex+0x3bc>
 8019d18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d1c:	2b02      	cmp	r3, #2
 8019d1e:	d015      	beq.n	8019d4c <__gethex+0x35e>
 8019d20:	2b03      	cmp	r3, #3
 8019d22:	d017      	beq.n	8019d54 <__gethex+0x366>
 8019d24:	2b01      	cmp	r3, #1
 8019d26:	d109      	bne.n	8019d3c <__gethex+0x34e>
 8019d28:	f01a 0f02 	tst.w	sl, #2
 8019d2c:	d006      	beq.n	8019d3c <__gethex+0x34e>
 8019d2e:	f8d9 3000 	ldr.w	r3, [r9]
 8019d32:	ea4a 0a03 	orr.w	sl, sl, r3
 8019d36:	f01a 0f01 	tst.w	sl, #1
 8019d3a:	d10e      	bne.n	8019d5a <__gethex+0x36c>
 8019d3c:	f047 0710 	orr.w	r7, r7, #16
 8019d40:	e033      	b.n	8019daa <__gethex+0x3bc>
 8019d42:	f04f 0a01 	mov.w	sl, #1
 8019d46:	e7d0      	b.n	8019cea <__gethex+0x2fc>
 8019d48:	2701      	movs	r7, #1
 8019d4a:	e7e2      	b.n	8019d12 <__gethex+0x324>
 8019d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d4e:	f1c3 0301 	rsb	r3, r3, #1
 8019d52:	9315      	str	r3, [sp, #84]	; 0x54
 8019d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d0f0      	beq.n	8019d3c <__gethex+0x34e>
 8019d5a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8019d5e:	f105 0314 	add.w	r3, r5, #20
 8019d62:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8019d66:	eb03 010a 	add.w	r1, r3, sl
 8019d6a:	f04f 0c00 	mov.w	ip, #0
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019d78:	d01c      	beq.n	8019db4 <__gethex+0x3c6>
 8019d7a:	3201      	adds	r2, #1
 8019d7c:	6002      	str	r2, [r0, #0]
 8019d7e:	2f02      	cmp	r7, #2
 8019d80:	f105 0314 	add.w	r3, r5, #20
 8019d84:	d138      	bne.n	8019df8 <__gethex+0x40a>
 8019d86:	f8d8 2000 	ldr.w	r2, [r8]
 8019d8a:	3a01      	subs	r2, #1
 8019d8c:	42b2      	cmp	r2, r6
 8019d8e:	d10a      	bne.n	8019da6 <__gethex+0x3b8>
 8019d90:	1171      	asrs	r1, r6, #5
 8019d92:	2201      	movs	r2, #1
 8019d94:	f006 061f 	and.w	r6, r6, #31
 8019d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019d9c:	fa02 f606 	lsl.w	r6, r2, r6
 8019da0:	421e      	tst	r6, r3
 8019da2:	bf18      	it	ne
 8019da4:	4617      	movne	r7, r2
 8019da6:	f047 0720 	orr.w	r7, r7, #32
 8019daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019dac:	601d      	str	r5, [r3, #0]
 8019dae:	9b06      	ldr	r3, [sp, #24]
 8019db0:	601c      	str	r4, [r3, #0]
 8019db2:	e6a4      	b.n	8019afe <__gethex+0x110>
 8019db4:	4299      	cmp	r1, r3
 8019db6:	f843 cc04 	str.w	ip, [r3, #-4]
 8019dba:	d8d8      	bhi.n	8019d6e <__gethex+0x380>
 8019dbc:	68ab      	ldr	r3, [r5, #8]
 8019dbe:	4599      	cmp	r9, r3
 8019dc0:	db12      	blt.n	8019de8 <__gethex+0x3fa>
 8019dc2:	6869      	ldr	r1, [r5, #4]
 8019dc4:	9802      	ldr	r0, [sp, #8]
 8019dc6:	3101      	adds	r1, #1
 8019dc8:	f000 f910 	bl	8019fec <_Balloc>
 8019dcc:	692a      	ldr	r2, [r5, #16]
 8019dce:	3202      	adds	r2, #2
 8019dd0:	f105 010c 	add.w	r1, r5, #12
 8019dd4:	4683      	mov	fp, r0
 8019dd6:	0092      	lsls	r2, r2, #2
 8019dd8:	300c      	adds	r0, #12
 8019dda:	f7fd f91f 	bl	801701c <memcpy>
 8019dde:	4629      	mov	r1, r5
 8019de0:	9802      	ldr	r0, [sp, #8]
 8019de2:	f000 f937 	bl	801a054 <_Bfree>
 8019de6:	465d      	mov	r5, fp
 8019de8:	692b      	ldr	r3, [r5, #16]
 8019dea:	1c5a      	adds	r2, r3, #1
 8019dec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019df0:	612a      	str	r2, [r5, #16]
 8019df2:	2201      	movs	r2, #1
 8019df4:	615a      	str	r2, [r3, #20]
 8019df6:	e7c2      	b.n	8019d7e <__gethex+0x390>
 8019df8:	692a      	ldr	r2, [r5, #16]
 8019dfa:	454a      	cmp	r2, r9
 8019dfc:	dd0b      	ble.n	8019e16 <__gethex+0x428>
 8019dfe:	2101      	movs	r1, #1
 8019e00:	4628      	mov	r0, r5
 8019e02:	f7ff fda5 	bl	8019950 <rshift>
 8019e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e0a:	3401      	adds	r4, #1
 8019e0c:	42a3      	cmp	r3, r4
 8019e0e:	f6ff aed9 	blt.w	8019bc4 <__gethex+0x1d6>
 8019e12:	2701      	movs	r7, #1
 8019e14:	e7c7      	b.n	8019da6 <__gethex+0x3b8>
 8019e16:	f016 061f 	ands.w	r6, r6, #31
 8019e1a:	d0fa      	beq.n	8019e12 <__gethex+0x424>
 8019e1c:	449a      	add	sl, r3
 8019e1e:	f1c6 0620 	rsb	r6, r6, #32
 8019e22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019e26:	f000 f9a5 	bl	801a174 <__hi0bits>
 8019e2a:	42b0      	cmp	r0, r6
 8019e2c:	dbe7      	blt.n	8019dfe <__gethex+0x410>
 8019e2e:	e7f0      	b.n	8019e12 <__gethex+0x424>

08019e30 <L_shift>:
 8019e30:	f1c2 0208 	rsb	r2, r2, #8
 8019e34:	0092      	lsls	r2, r2, #2
 8019e36:	b570      	push	{r4, r5, r6, lr}
 8019e38:	f1c2 0620 	rsb	r6, r2, #32
 8019e3c:	6843      	ldr	r3, [r0, #4]
 8019e3e:	6804      	ldr	r4, [r0, #0]
 8019e40:	fa03 f506 	lsl.w	r5, r3, r6
 8019e44:	432c      	orrs	r4, r5
 8019e46:	40d3      	lsrs	r3, r2
 8019e48:	6004      	str	r4, [r0, #0]
 8019e4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8019e4e:	4288      	cmp	r0, r1
 8019e50:	d3f4      	bcc.n	8019e3c <L_shift+0xc>
 8019e52:	bd70      	pop	{r4, r5, r6, pc}

08019e54 <__match>:
 8019e54:	b530      	push	{r4, r5, lr}
 8019e56:	6803      	ldr	r3, [r0, #0]
 8019e58:	3301      	adds	r3, #1
 8019e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e5e:	b914      	cbnz	r4, 8019e66 <__match+0x12>
 8019e60:	6003      	str	r3, [r0, #0]
 8019e62:	2001      	movs	r0, #1
 8019e64:	bd30      	pop	{r4, r5, pc}
 8019e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019e6e:	2d19      	cmp	r5, #25
 8019e70:	bf98      	it	ls
 8019e72:	3220      	addls	r2, #32
 8019e74:	42a2      	cmp	r2, r4
 8019e76:	d0f0      	beq.n	8019e5a <__match+0x6>
 8019e78:	2000      	movs	r0, #0
 8019e7a:	e7f3      	b.n	8019e64 <__match+0x10>

08019e7c <__hexnan>:
 8019e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	680b      	ldr	r3, [r1, #0]
 8019e82:	6801      	ldr	r1, [r0, #0]
 8019e84:	115f      	asrs	r7, r3, #5
 8019e86:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019e8a:	f013 031f 	ands.w	r3, r3, #31
 8019e8e:	b087      	sub	sp, #28
 8019e90:	bf18      	it	ne
 8019e92:	3704      	addne	r7, #4
 8019e94:	2500      	movs	r5, #0
 8019e96:	1f3e      	subs	r6, r7, #4
 8019e98:	4682      	mov	sl, r0
 8019e9a:	4690      	mov	r8, r2
 8019e9c:	9301      	str	r3, [sp, #4]
 8019e9e:	f847 5c04 	str.w	r5, [r7, #-4]
 8019ea2:	46b1      	mov	r9, r6
 8019ea4:	4634      	mov	r4, r6
 8019ea6:	9502      	str	r5, [sp, #8]
 8019ea8:	46ab      	mov	fp, r5
 8019eaa:	784a      	ldrb	r2, [r1, #1]
 8019eac:	1c4b      	adds	r3, r1, #1
 8019eae:	9303      	str	r3, [sp, #12]
 8019eb0:	b342      	cbz	r2, 8019f04 <__hexnan+0x88>
 8019eb2:	4610      	mov	r0, r2
 8019eb4:	9105      	str	r1, [sp, #20]
 8019eb6:	9204      	str	r2, [sp, #16]
 8019eb8:	f7ff fd84 	bl	80199c4 <__hexdig_fun>
 8019ebc:	2800      	cmp	r0, #0
 8019ebe:	d143      	bne.n	8019f48 <__hexnan+0xcc>
 8019ec0:	9a04      	ldr	r2, [sp, #16]
 8019ec2:	9905      	ldr	r1, [sp, #20]
 8019ec4:	2a20      	cmp	r2, #32
 8019ec6:	d818      	bhi.n	8019efa <__hexnan+0x7e>
 8019ec8:	9b02      	ldr	r3, [sp, #8]
 8019eca:	459b      	cmp	fp, r3
 8019ecc:	dd13      	ble.n	8019ef6 <__hexnan+0x7a>
 8019ece:	454c      	cmp	r4, r9
 8019ed0:	d206      	bcs.n	8019ee0 <__hexnan+0x64>
 8019ed2:	2d07      	cmp	r5, #7
 8019ed4:	dc04      	bgt.n	8019ee0 <__hexnan+0x64>
 8019ed6:	462a      	mov	r2, r5
 8019ed8:	4649      	mov	r1, r9
 8019eda:	4620      	mov	r0, r4
 8019edc:	f7ff ffa8 	bl	8019e30 <L_shift>
 8019ee0:	4544      	cmp	r4, r8
 8019ee2:	d944      	bls.n	8019f6e <__hexnan+0xf2>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	f1a4 0904 	sub.w	r9, r4, #4
 8019eea:	f844 3c04 	str.w	r3, [r4, #-4]
 8019eee:	f8cd b008 	str.w	fp, [sp, #8]
 8019ef2:	464c      	mov	r4, r9
 8019ef4:	461d      	mov	r5, r3
 8019ef6:	9903      	ldr	r1, [sp, #12]
 8019ef8:	e7d7      	b.n	8019eaa <__hexnan+0x2e>
 8019efa:	2a29      	cmp	r2, #41	; 0x29
 8019efc:	d14a      	bne.n	8019f94 <__hexnan+0x118>
 8019efe:	3102      	adds	r1, #2
 8019f00:	f8ca 1000 	str.w	r1, [sl]
 8019f04:	f1bb 0f00 	cmp.w	fp, #0
 8019f08:	d044      	beq.n	8019f94 <__hexnan+0x118>
 8019f0a:	454c      	cmp	r4, r9
 8019f0c:	d206      	bcs.n	8019f1c <__hexnan+0xa0>
 8019f0e:	2d07      	cmp	r5, #7
 8019f10:	dc04      	bgt.n	8019f1c <__hexnan+0xa0>
 8019f12:	462a      	mov	r2, r5
 8019f14:	4649      	mov	r1, r9
 8019f16:	4620      	mov	r0, r4
 8019f18:	f7ff ff8a 	bl	8019e30 <L_shift>
 8019f1c:	4544      	cmp	r4, r8
 8019f1e:	d928      	bls.n	8019f72 <__hexnan+0xf6>
 8019f20:	4643      	mov	r3, r8
 8019f22:	f854 2b04 	ldr.w	r2, [r4], #4
 8019f26:	f843 2b04 	str.w	r2, [r3], #4
 8019f2a:	42a6      	cmp	r6, r4
 8019f2c:	d2f9      	bcs.n	8019f22 <__hexnan+0xa6>
 8019f2e:	2200      	movs	r2, #0
 8019f30:	f843 2b04 	str.w	r2, [r3], #4
 8019f34:	429e      	cmp	r6, r3
 8019f36:	d2fb      	bcs.n	8019f30 <__hexnan+0xb4>
 8019f38:	6833      	ldr	r3, [r6, #0]
 8019f3a:	b91b      	cbnz	r3, 8019f44 <__hexnan+0xc8>
 8019f3c:	4546      	cmp	r6, r8
 8019f3e:	d127      	bne.n	8019f90 <__hexnan+0x114>
 8019f40:	2301      	movs	r3, #1
 8019f42:	6033      	str	r3, [r6, #0]
 8019f44:	2005      	movs	r0, #5
 8019f46:	e026      	b.n	8019f96 <__hexnan+0x11a>
 8019f48:	3501      	adds	r5, #1
 8019f4a:	2d08      	cmp	r5, #8
 8019f4c:	f10b 0b01 	add.w	fp, fp, #1
 8019f50:	dd06      	ble.n	8019f60 <__hexnan+0xe4>
 8019f52:	4544      	cmp	r4, r8
 8019f54:	d9cf      	bls.n	8019ef6 <__hexnan+0x7a>
 8019f56:	2300      	movs	r3, #0
 8019f58:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f5c:	2501      	movs	r5, #1
 8019f5e:	3c04      	subs	r4, #4
 8019f60:	6822      	ldr	r2, [r4, #0]
 8019f62:	f000 000f 	and.w	r0, r0, #15
 8019f66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019f6a:	6020      	str	r0, [r4, #0]
 8019f6c:	e7c3      	b.n	8019ef6 <__hexnan+0x7a>
 8019f6e:	2508      	movs	r5, #8
 8019f70:	e7c1      	b.n	8019ef6 <__hexnan+0x7a>
 8019f72:	9b01      	ldr	r3, [sp, #4]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d0df      	beq.n	8019f38 <__hexnan+0xbc>
 8019f78:	f04f 32ff 	mov.w	r2, #4294967295
 8019f7c:	f1c3 0320 	rsb	r3, r3, #32
 8019f80:	fa22 f303 	lsr.w	r3, r2, r3
 8019f84:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019f88:	401a      	ands	r2, r3
 8019f8a:	f847 2c04 	str.w	r2, [r7, #-4]
 8019f8e:	e7d3      	b.n	8019f38 <__hexnan+0xbc>
 8019f90:	3e04      	subs	r6, #4
 8019f92:	e7d1      	b.n	8019f38 <__hexnan+0xbc>
 8019f94:	2004      	movs	r0, #4
 8019f96:	b007      	add	sp, #28
 8019f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f9c <__locale_ctype_ptr_l>:
 8019f9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019fa0:	4770      	bx	lr

08019fa2 <__localeconv_l>:
 8019fa2:	30f0      	adds	r0, #240	; 0xf0
 8019fa4:	4770      	bx	lr
	...

08019fa8 <_localeconv_r>:
 8019fa8:	4b04      	ldr	r3, [pc, #16]	; (8019fbc <_localeconv_r+0x14>)
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	6a18      	ldr	r0, [r3, #32]
 8019fae:	4b04      	ldr	r3, [pc, #16]	; (8019fc0 <_localeconv_r+0x18>)
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	bf08      	it	eq
 8019fb4:	4618      	moveq	r0, r3
 8019fb6:	30f0      	adds	r0, #240	; 0xf0
 8019fb8:	4770      	bx	lr
 8019fba:	bf00      	nop
 8019fbc:	20000198 	.word	0x20000198
 8019fc0:	200001fc 	.word	0x200001fc

08019fc4 <__ascii_mbtowc>:
 8019fc4:	b082      	sub	sp, #8
 8019fc6:	b901      	cbnz	r1, 8019fca <__ascii_mbtowc+0x6>
 8019fc8:	a901      	add	r1, sp, #4
 8019fca:	b142      	cbz	r2, 8019fde <__ascii_mbtowc+0x1a>
 8019fcc:	b14b      	cbz	r3, 8019fe2 <__ascii_mbtowc+0x1e>
 8019fce:	7813      	ldrb	r3, [r2, #0]
 8019fd0:	600b      	str	r3, [r1, #0]
 8019fd2:	7812      	ldrb	r2, [r2, #0]
 8019fd4:	1c10      	adds	r0, r2, #0
 8019fd6:	bf18      	it	ne
 8019fd8:	2001      	movne	r0, #1
 8019fda:	b002      	add	sp, #8
 8019fdc:	4770      	bx	lr
 8019fde:	4610      	mov	r0, r2
 8019fe0:	e7fb      	b.n	8019fda <__ascii_mbtowc+0x16>
 8019fe2:	f06f 0001 	mvn.w	r0, #1
 8019fe6:	e7f8      	b.n	8019fda <__ascii_mbtowc+0x16>

08019fe8 <__malloc_lock>:
 8019fe8:	4770      	bx	lr

08019fea <__malloc_unlock>:
 8019fea:	4770      	bx	lr

08019fec <_Balloc>:
 8019fec:	b570      	push	{r4, r5, r6, lr}
 8019fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	460e      	mov	r6, r1
 8019ff4:	b93d      	cbnz	r5, 801a006 <_Balloc+0x1a>
 8019ff6:	2010      	movs	r0, #16
 8019ff8:	f7fd f800 	bl	8016ffc <malloc>
 8019ffc:	6260      	str	r0, [r4, #36]	; 0x24
 8019ffe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a002:	6005      	str	r5, [r0, #0]
 801a004:	60c5      	str	r5, [r0, #12]
 801a006:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a008:	68eb      	ldr	r3, [r5, #12]
 801a00a:	b183      	cbz	r3, 801a02e <_Balloc+0x42>
 801a00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a00e:	68db      	ldr	r3, [r3, #12]
 801a010:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a014:	b9b8      	cbnz	r0, 801a046 <_Balloc+0x5a>
 801a016:	2101      	movs	r1, #1
 801a018:	fa01 f506 	lsl.w	r5, r1, r6
 801a01c:	1d6a      	adds	r2, r5, #5
 801a01e:	0092      	lsls	r2, r2, #2
 801a020:	4620      	mov	r0, r4
 801a022:	f000 fbe2 	bl	801a7ea <_calloc_r>
 801a026:	b160      	cbz	r0, 801a042 <_Balloc+0x56>
 801a028:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801a02c:	e00e      	b.n	801a04c <_Balloc+0x60>
 801a02e:	2221      	movs	r2, #33	; 0x21
 801a030:	2104      	movs	r1, #4
 801a032:	4620      	mov	r0, r4
 801a034:	f000 fbd9 	bl	801a7ea <_calloc_r>
 801a038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a03a:	60e8      	str	r0, [r5, #12]
 801a03c:	68db      	ldr	r3, [r3, #12]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d1e4      	bne.n	801a00c <_Balloc+0x20>
 801a042:	2000      	movs	r0, #0
 801a044:	bd70      	pop	{r4, r5, r6, pc}
 801a046:	6802      	ldr	r2, [r0, #0]
 801a048:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a04c:	2300      	movs	r3, #0
 801a04e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a052:	e7f7      	b.n	801a044 <_Balloc+0x58>

0801a054 <_Bfree>:
 801a054:	b570      	push	{r4, r5, r6, lr}
 801a056:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a058:	4606      	mov	r6, r0
 801a05a:	460d      	mov	r5, r1
 801a05c:	b93c      	cbnz	r4, 801a06e <_Bfree+0x1a>
 801a05e:	2010      	movs	r0, #16
 801a060:	f7fc ffcc 	bl	8016ffc <malloc>
 801a064:	6270      	str	r0, [r6, #36]	; 0x24
 801a066:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a06a:	6004      	str	r4, [r0, #0]
 801a06c:	60c4      	str	r4, [r0, #12]
 801a06e:	b13d      	cbz	r5, 801a080 <_Bfree+0x2c>
 801a070:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a072:	686a      	ldr	r2, [r5, #4]
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a07a:	6029      	str	r1, [r5, #0]
 801a07c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a080:	bd70      	pop	{r4, r5, r6, pc}

0801a082 <__multadd>:
 801a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a086:	690d      	ldr	r5, [r1, #16]
 801a088:	461f      	mov	r7, r3
 801a08a:	4606      	mov	r6, r0
 801a08c:	460c      	mov	r4, r1
 801a08e:	f101 0c14 	add.w	ip, r1, #20
 801a092:	2300      	movs	r3, #0
 801a094:	f8dc 0000 	ldr.w	r0, [ip]
 801a098:	b281      	uxth	r1, r0
 801a09a:	fb02 7101 	mla	r1, r2, r1, r7
 801a09e:	0c0f      	lsrs	r7, r1, #16
 801a0a0:	0c00      	lsrs	r0, r0, #16
 801a0a2:	fb02 7000 	mla	r0, r2, r0, r7
 801a0a6:	b289      	uxth	r1, r1
 801a0a8:	3301      	adds	r3, #1
 801a0aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801a0ae:	429d      	cmp	r5, r3
 801a0b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801a0b4:	f84c 1b04 	str.w	r1, [ip], #4
 801a0b8:	dcec      	bgt.n	801a094 <__multadd+0x12>
 801a0ba:	b1d7      	cbz	r7, 801a0f2 <__multadd+0x70>
 801a0bc:	68a3      	ldr	r3, [r4, #8]
 801a0be:	42ab      	cmp	r3, r5
 801a0c0:	dc12      	bgt.n	801a0e8 <__multadd+0x66>
 801a0c2:	6861      	ldr	r1, [r4, #4]
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	3101      	adds	r1, #1
 801a0c8:	f7ff ff90 	bl	8019fec <_Balloc>
 801a0cc:	6922      	ldr	r2, [r4, #16]
 801a0ce:	3202      	adds	r2, #2
 801a0d0:	f104 010c 	add.w	r1, r4, #12
 801a0d4:	4680      	mov	r8, r0
 801a0d6:	0092      	lsls	r2, r2, #2
 801a0d8:	300c      	adds	r0, #12
 801a0da:	f7fc ff9f 	bl	801701c <memcpy>
 801a0de:	4621      	mov	r1, r4
 801a0e0:	4630      	mov	r0, r6
 801a0e2:	f7ff ffb7 	bl	801a054 <_Bfree>
 801a0e6:	4644      	mov	r4, r8
 801a0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a0ec:	3501      	adds	r5, #1
 801a0ee:	615f      	str	r7, [r3, #20]
 801a0f0:	6125      	str	r5, [r4, #16]
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0f8 <__s2b>:
 801a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0fc:	460c      	mov	r4, r1
 801a0fe:	4615      	mov	r5, r2
 801a100:	461f      	mov	r7, r3
 801a102:	2209      	movs	r2, #9
 801a104:	3308      	adds	r3, #8
 801a106:	4606      	mov	r6, r0
 801a108:	fb93 f3f2 	sdiv	r3, r3, r2
 801a10c:	2100      	movs	r1, #0
 801a10e:	2201      	movs	r2, #1
 801a110:	429a      	cmp	r2, r3
 801a112:	db20      	blt.n	801a156 <__s2b+0x5e>
 801a114:	4630      	mov	r0, r6
 801a116:	f7ff ff69 	bl	8019fec <_Balloc>
 801a11a:	9b08      	ldr	r3, [sp, #32]
 801a11c:	6143      	str	r3, [r0, #20]
 801a11e:	2d09      	cmp	r5, #9
 801a120:	f04f 0301 	mov.w	r3, #1
 801a124:	6103      	str	r3, [r0, #16]
 801a126:	dd19      	ble.n	801a15c <__s2b+0x64>
 801a128:	f104 0809 	add.w	r8, r4, #9
 801a12c:	46c1      	mov	r9, r8
 801a12e:	442c      	add	r4, r5
 801a130:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a134:	4601      	mov	r1, r0
 801a136:	3b30      	subs	r3, #48	; 0x30
 801a138:	220a      	movs	r2, #10
 801a13a:	4630      	mov	r0, r6
 801a13c:	f7ff ffa1 	bl	801a082 <__multadd>
 801a140:	45a1      	cmp	r9, r4
 801a142:	d1f5      	bne.n	801a130 <__s2b+0x38>
 801a144:	eb08 0405 	add.w	r4, r8, r5
 801a148:	3c08      	subs	r4, #8
 801a14a:	1b2d      	subs	r5, r5, r4
 801a14c:	1963      	adds	r3, r4, r5
 801a14e:	42bb      	cmp	r3, r7
 801a150:	db07      	blt.n	801a162 <__s2b+0x6a>
 801a152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a156:	0052      	lsls	r2, r2, #1
 801a158:	3101      	adds	r1, #1
 801a15a:	e7d9      	b.n	801a110 <__s2b+0x18>
 801a15c:	340a      	adds	r4, #10
 801a15e:	2509      	movs	r5, #9
 801a160:	e7f3      	b.n	801a14a <__s2b+0x52>
 801a162:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a166:	4601      	mov	r1, r0
 801a168:	3b30      	subs	r3, #48	; 0x30
 801a16a:	220a      	movs	r2, #10
 801a16c:	4630      	mov	r0, r6
 801a16e:	f7ff ff88 	bl	801a082 <__multadd>
 801a172:	e7eb      	b.n	801a14c <__s2b+0x54>

0801a174 <__hi0bits>:
 801a174:	0c02      	lsrs	r2, r0, #16
 801a176:	0412      	lsls	r2, r2, #16
 801a178:	4603      	mov	r3, r0
 801a17a:	b9b2      	cbnz	r2, 801a1aa <__hi0bits+0x36>
 801a17c:	0403      	lsls	r3, r0, #16
 801a17e:	2010      	movs	r0, #16
 801a180:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a184:	bf04      	itt	eq
 801a186:	021b      	lsleq	r3, r3, #8
 801a188:	3008      	addeq	r0, #8
 801a18a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a18e:	bf04      	itt	eq
 801a190:	011b      	lsleq	r3, r3, #4
 801a192:	3004      	addeq	r0, #4
 801a194:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a198:	bf04      	itt	eq
 801a19a:	009b      	lsleq	r3, r3, #2
 801a19c:	3002      	addeq	r0, #2
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	db06      	blt.n	801a1b0 <__hi0bits+0x3c>
 801a1a2:	005b      	lsls	r3, r3, #1
 801a1a4:	d503      	bpl.n	801a1ae <__hi0bits+0x3a>
 801a1a6:	3001      	adds	r0, #1
 801a1a8:	4770      	bx	lr
 801a1aa:	2000      	movs	r0, #0
 801a1ac:	e7e8      	b.n	801a180 <__hi0bits+0xc>
 801a1ae:	2020      	movs	r0, #32
 801a1b0:	4770      	bx	lr

0801a1b2 <__lo0bits>:
 801a1b2:	6803      	ldr	r3, [r0, #0]
 801a1b4:	f013 0207 	ands.w	r2, r3, #7
 801a1b8:	4601      	mov	r1, r0
 801a1ba:	d00b      	beq.n	801a1d4 <__lo0bits+0x22>
 801a1bc:	07da      	lsls	r2, r3, #31
 801a1be:	d423      	bmi.n	801a208 <__lo0bits+0x56>
 801a1c0:	0798      	lsls	r0, r3, #30
 801a1c2:	bf49      	itett	mi
 801a1c4:	085b      	lsrmi	r3, r3, #1
 801a1c6:	089b      	lsrpl	r3, r3, #2
 801a1c8:	2001      	movmi	r0, #1
 801a1ca:	600b      	strmi	r3, [r1, #0]
 801a1cc:	bf5c      	itt	pl
 801a1ce:	600b      	strpl	r3, [r1, #0]
 801a1d0:	2002      	movpl	r0, #2
 801a1d2:	4770      	bx	lr
 801a1d4:	b298      	uxth	r0, r3
 801a1d6:	b9a8      	cbnz	r0, 801a204 <__lo0bits+0x52>
 801a1d8:	0c1b      	lsrs	r3, r3, #16
 801a1da:	2010      	movs	r0, #16
 801a1dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a1e0:	bf04      	itt	eq
 801a1e2:	0a1b      	lsreq	r3, r3, #8
 801a1e4:	3008      	addeq	r0, #8
 801a1e6:	071a      	lsls	r2, r3, #28
 801a1e8:	bf04      	itt	eq
 801a1ea:	091b      	lsreq	r3, r3, #4
 801a1ec:	3004      	addeq	r0, #4
 801a1ee:	079a      	lsls	r2, r3, #30
 801a1f0:	bf04      	itt	eq
 801a1f2:	089b      	lsreq	r3, r3, #2
 801a1f4:	3002      	addeq	r0, #2
 801a1f6:	07da      	lsls	r2, r3, #31
 801a1f8:	d402      	bmi.n	801a200 <__lo0bits+0x4e>
 801a1fa:	085b      	lsrs	r3, r3, #1
 801a1fc:	d006      	beq.n	801a20c <__lo0bits+0x5a>
 801a1fe:	3001      	adds	r0, #1
 801a200:	600b      	str	r3, [r1, #0]
 801a202:	4770      	bx	lr
 801a204:	4610      	mov	r0, r2
 801a206:	e7e9      	b.n	801a1dc <__lo0bits+0x2a>
 801a208:	2000      	movs	r0, #0
 801a20a:	4770      	bx	lr
 801a20c:	2020      	movs	r0, #32
 801a20e:	4770      	bx	lr

0801a210 <__i2b>:
 801a210:	b510      	push	{r4, lr}
 801a212:	460c      	mov	r4, r1
 801a214:	2101      	movs	r1, #1
 801a216:	f7ff fee9 	bl	8019fec <_Balloc>
 801a21a:	2201      	movs	r2, #1
 801a21c:	6144      	str	r4, [r0, #20]
 801a21e:	6102      	str	r2, [r0, #16]
 801a220:	bd10      	pop	{r4, pc}

0801a222 <__multiply>:
 801a222:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a226:	4614      	mov	r4, r2
 801a228:	690a      	ldr	r2, [r1, #16]
 801a22a:	6923      	ldr	r3, [r4, #16]
 801a22c:	429a      	cmp	r2, r3
 801a22e:	bfb8      	it	lt
 801a230:	460b      	movlt	r3, r1
 801a232:	4688      	mov	r8, r1
 801a234:	bfbc      	itt	lt
 801a236:	46a0      	movlt	r8, r4
 801a238:	461c      	movlt	r4, r3
 801a23a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a23e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a246:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a24a:	eb07 0609 	add.w	r6, r7, r9
 801a24e:	42b3      	cmp	r3, r6
 801a250:	bfb8      	it	lt
 801a252:	3101      	addlt	r1, #1
 801a254:	f7ff feca 	bl	8019fec <_Balloc>
 801a258:	f100 0514 	add.w	r5, r0, #20
 801a25c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801a260:	462b      	mov	r3, r5
 801a262:	2200      	movs	r2, #0
 801a264:	4573      	cmp	r3, lr
 801a266:	d316      	bcc.n	801a296 <__multiply+0x74>
 801a268:	f104 0214 	add.w	r2, r4, #20
 801a26c:	f108 0114 	add.w	r1, r8, #20
 801a270:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a274:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a278:	9300      	str	r3, [sp, #0]
 801a27a:	9b00      	ldr	r3, [sp, #0]
 801a27c:	9201      	str	r2, [sp, #4]
 801a27e:	4293      	cmp	r3, r2
 801a280:	d80c      	bhi.n	801a29c <__multiply+0x7a>
 801a282:	2e00      	cmp	r6, #0
 801a284:	dd03      	ble.n	801a28e <__multiply+0x6c>
 801a286:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d05d      	beq.n	801a34a <__multiply+0x128>
 801a28e:	6106      	str	r6, [r0, #16]
 801a290:	b003      	add	sp, #12
 801a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a296:	f843 2b04 	str.w	r2, [r3], #4
 801a29a:	e7e3      	b.n	801a264 <__multiply+0x42>
 801a29c:	f8b2 b000 	ldrh.w	fp, [r2]
 801a2a0:	f1bb 0f00 	cmp.w	fp, #0
 801a2a4:	d023      	beq.n	801a2ee <__multiply+0xcc>
 801a2a6:	4689      	mov	r9, r1
 801a2a8:	46ac      	mov	ip, r5
 801a2aa:	f04f 0800 	mov.w	r8, #0
 801a2ae:	f859 4b04 	ldr.w	r4, [r9], #4
 801a2b2:	f8dc a000 	ldr.w	sl, [ip]
 801a2b6:	b2a3      	uxth	r3, r4
 801a2b8:	fa1f fa8a 	uxth.w	sl, sl
 801a2bc:	fb0b a303 	mla	r3, fp, r3, sl
 801a2c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a2c4:	f8dc 4000 	ldr.w	r4, [ip]
 801a2c8:	4443      	add	r3, r8
 801a2ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a2ce:	fb0b 840a 	mla	r4, fp, sl, r8
 801a2d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a2d6:	46e2      	mov	sl, ip
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a2de:	454f      	cmp	r7, r9
 801a2e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a2e4:	f84a 3b04 	str.w	r3, [sl], #4
 801a2e8:	d82b      	bhi.n	801a342 <__multiply+0x120>
 801a2ea:	f8cc 8004 	str.w	r8, [ip, #4]
 801a2ee:	9b01      	ldr	r3, [sp, #4]
 801a2f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a2f4:	3204      	adds	r2, #4
 801a2f6:	f1ba 0f00 	cmp.w	sl, #0
 801a2fa:	d020      	beq.n	801a33e <__multiply+0x11c>
 801a2fc:	682b      	ldr	r3, [r5, #0]
 801a2fe:	4689      	mov	r9, r1
 801a300:	46a8      	mov	r8, r5
 801a302:	f04f 0b00 	mov.w	fp, #0
 801a306:	f8b9 c000 	ldrh.w	ip, [r9]
 801a30a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a30e:	fb0a 440c 	mla	r4, sl, ip, r4
 801a312:	445c      	add	r4, fp
 801a314:	46c4      	mov	ip, r8
 801a316:	b29b      	uxth	r3, r3
 801a318:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a31c:	f84c 3b04 	str.w	r3, [ip], #4
 801a320:	f859 3b04 	ldr.w	r3, [r9], #4
 801a324:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a328:	0c1b      	lsrs	r3, r3, #16
 801a32a:	fb0a b303 	mla	r3, sl, r3, fp
 801a32e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a332:	454f      	cmp	r7, r9
 801a334:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a338:	d805      	bhi.n	801a346 <__multiply+0x124>
 801a33a:	f8c8 3004 	str.w	r3, [r8, #4]
 801a33e:	3504      	adds	r5, #4
 801a340:	e79b      	b.n	801a27a <__multiply+0x58>
 801a342:	46d4      	mov	ip, sl
 801a344:	e7b3      	b.n	801a2ae <__multiply+0x8c>
 801a346:	46e0      	mov	r8, ip
 801a348:	e7dd      	b.n	801a306 <__multiply+0xe4>
 801a34a:	3e01      	subs	r6, #1
 801a34c:	e799      	b.n	801a282 <__multiply+0x60>
	...

0801a350 <__pow5mult>:
 801a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a354:	4615      	mov	r5, r2
 801a356:	f012 0203 	ands.w	r2, r2, #3
 801a35a:	4606      	mov	r6, r0
 801a35c:	460f      	mov	r7, r1
 801a35e:	d007      	beq.n	801a370 <__pow5mult+0x20>
 801a360:	3a01      	subs	r2, #1
 801a362:	4c21      	ldr	r4, [pc, #132]	; (801a3e8 <__pow5mult+0x98>)
 801a364:	2300      	movs	r3, #0
 801a366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a36a:	f7ff fe8a 	bl	801a082 <__multadd>
 801a36e:	4607      	mov	r7, r0
 801a370:	10ad      	asrs	r5, r5, #2
 801a372:	d035      	beq.n	801a3e0 <__pow5mult+0x90>
 801a374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a376:	b93c      	cbnz	r4, 801a388 <__pow5mult+0x38>
 801a378:	2010      	movs	r0, #16
 801a37a:	f7fc fe3f 	bl	8016ffc <malloc>
 801a37e:	6270      	str	r0, [r6, #36]	; 0x24
 801a380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a384:	6004      	str	r4, [r0, #0]
 801a386:	60c4      	str	r4, [r0, #12]
 801a388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a390:	b94c      	cbnz	r4, 801a3a6 <__pow5mult+0x56>
 801a392:	f240 2171 	movw	r1, #625	; 0x271
 801a396:	4630      	mov	r0, r6
 801a398:	f7ff ff3a 	bl	801a210 <__i2b>
 801a39c:	2300      	movs	r3, #0
 801a39e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	6003      	str	r3, [r0, #0]
 801a3a6:	f04f 0800 	mov.w	r8, #0
 801a3aa:	07eb      	lsls	r3, r5, #31
 801a3ac:	d50a      	bpl.n	801a3c4 <__pow5mult+0x74>
 801a3ae:	4639      	mov	r1, r7
 801a3b0:	4622      	mov	r2, r4
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f7ff ff35 	bl	801a222 <__multiply>
 801a3b8:	4639      	mov	r1, r7
 801a3ba:	4681      	mov	r9, r0
 801a3bc:	4630      	mov	r0, r6
 801a3be:	f7ff fe49 	bl	801a054 <_Bfree>
 801a3c2:	464f      	mov	r7, r9
 801a3c4:	106d      	asrs	r5, r5, #1
 801a3c6:	d00b      	beq.n	801a3e0 <__pow5mult+0x90>
 801a3c8:	6820      	ldr	r0, [r4, #0]
 801a3ca:	b938      	cbnz	r0, 801a3dc <__pow5mult+0x8c>
 801a3cc:	4622      	mov	r2, r4
 801a3ce:	4621      	mov	r1, r4
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	f7ff ff26 	bl	801a222 <__multiply>
 801a3d6:	6020      	str	r0, [r4, #0]
 801a3d8:	f8c0 8000 	str.w	r8, [r0]
 801a3dc:	4604      	mov	r4, r0
 801a3de:	e7e4      	b.n	801a3aa <__pow5mult+0x5a>
 801a3e0:	4638      	mov	r0, r7
 801a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3e6:	bf00      	nop
 801a3e8:	0801e500 	.word	0x0801e500

0801a3ec <__lshift>:
 801a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a3f6:	6923      	ldr	r3, [r4, #16]
 801a3f8:	6849      	ldr	r1, [r1, #4]
 801a3fa:	eb0a 0903 	add.w	r9, sl, r3
 801a3fe:	68a3      	ldr	r3, [r4, #8]
 801a400:	4607      	mov	r7, r0
 801a402:	4616      	mov	r6, r2
 801a404:	f109 0501 	add.w	r5, r9, #1
 801a408:	42ab      	cmp	r3, r5
 801a40a:	db32      	blt.n	801a472 <__lshift+0x86>
 801a40c:	4638      	mov	r0, r7
 801a40e:	f7ff fded 	bl	8019fec <_Balloc>
 801a412:	2300      	movs	r3, #0
 801a414:	4680      	mov	r8, r0
 801a416:	f100 0114 	add.w	r1, r0, #20
 801a41a:	461a      	mov	r2, r3
 801a41c:	4553      	cmp	r3, sl
 801a41e:	db2b      	blt.n	801a478 <__lshift+0x8c>
 801a420:	6920      	ldr	r0, [r4, #16]
 801a422:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a426:	f104 0314 	add.w	r3, r4, #20
 801a42a:	f016 021f 	ands.w	r2, r6, #31
 801a42e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a432:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a436:	d025      	beq.n	801a484 <__lshift+0x98>
 801a438:	f1c2 0e20 	rsb	lr, r2, #32
 801a43c:	2000      	movs	r0, #0
 801a43e:	681e      	ldr	r6, [r3, #0]
 801a440:	468a      	mov	sl, r1
 801a442:	4096      	lsls	r6, r2
 801a444:	4330      	orrs	r0, r6
 801a446:	f84a 0b04 	str.w	r0, [sl], #4
 801a44a:	f853 0b04 	ldr.w	r0, [r3], #4
 801a44e:	459c      	cmp	ip, r3
 801a450:	fa20 f00e 	lsr.w	r0, r0, lr
 801a454:	d814      	bhi.n	801a480 <__lshift+0x94>
 801a456:	6048      	str	r0, [r1, #4]
 801a458:	b108      	cbz	r0, 801a45e <__lshift+0x72>
 801a45a:	f109 0502 	add.w	r5, r9, #2
 801a45e:	3d01      	subs	r5, #1
 801a460:	4638      	mov	r0, r7
 801a462:	f8c8 5010 	str.w	r5, [r8, #16]
 801a466:	4621      	mov	r1, r4
 801a468:	f7ff fdf4 	bl	801a054 <_Bfree>
 801a46c:	4640      	mov	r0, r8
 801a46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a472:	3101      	adds	r1, #1
 801a474:	005b      	lsls	r3, r3, #1
 801a476:	e7c7      	b.n	801a408 <__lshift+0x1c>
 801a478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a47c:	3301      	adds	r3, #1
 801a47e:	e7cd      	b.n	801a41c <__lshift+0x30>
 801a480:	4651      	mov	r1, sl
 801a482:	e7dc      	b.n	801a43e <__lshift+0x52>
 801a484:	3904      	subs	r1, #4
 801a486:	f853 2b04 	ldr.w	r2, [r3], #4
 801a48a:	f841 2f04 	str.w	r2, [r1, #4]!
 801a48e:	459c      	cmp	ip, r3
 801a490:	d8f9      	bhi.n	801a486 <__lshift+0x9a>
 801a492:	e7e4      	b.n	801a45e <__lshift+0x72>

0801a494 <__mcmp>:
 801a494:	6903      	ldr	r3, [r0, #16]
 801a496:	690a      	ldr	r2, [r1, #16]
 801a498:	1a9b      	subs	r3, r3, r2
 801a49a:	b530      	push	{r4, r5, lr}
 801a49c:	d10c      	bne.n	801a4b8 <__mcmp+0x24>
 801a49e:	0092      	lsls	r2, r2, #2
 801a4a0:	3014      	adds	r0, #20
 801a4a2:	3114      	adds	r1, #20
 801a4a4:	1884      	adds	r4, r0, r2
 801a4a6:	4411      	add	r1, r2
 801a4a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a4ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a4b0:	4295      	cmp	r5, r2
 801a4b2:	d003      	beq.n	801a4bc <__mcmp+0x28>
 801a4b4:	d305      	bcc.n	801a4c2 <__mcmp+0x2e>
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	bd30      	pop	{r4, r5, pc}
 801a4bc:	42a0      	cmp	r0, r4
 801a4be:	d3f3      	bcc.n	801a4a8 <__mcmp+0x14>
 801a4c0:	e7fa      	b.n	801a4b8 <__mcmp+0x24>
 801a4c2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4c6:	e7f7      	b.n	801a4b8 <__mcmp+0x24>

0801a4c8 <__mdiff>:
 801a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4cc:	460d      	mov	r5, r1
 801a4ce:	4607      	mov	r7, r0
 801a4d0:	4611      	mov	r1, r2
 801a4d2:	4628      	mov	r0, r5
 801a4d4:	4614      	mov	r4, r2
 801a4d6:	f7ff ffdd 	bl	801a494 <__mcmp>
 801a4da:	1e06      	subs	r6, r0, #0
 801a4dc:	d108      	bne.n	801a4f0 <__mdiff+0x28>
 801a4de:	4631      	mov	r1, r6
 801a4e0:	4638      	mov	r0, r7
 801a4e2:	f7ff fd83 	bl	8019fec <_Balloc>
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4f0:	bfa4      	itt	ge
 801a4f2:	4623      	movge	r3, r4
 801a4f4:	462c      	movge	r4, r5
 801a4f6:	4638      	mov	r0, r7
 801a4f8:	6861      	ldr	r1, [r4, #4]
 801a4fa:	bfa6      	itte	ge
 801a4fc:	461d      	movge	r5, r3
 801a4fe:	2600      	movge	r6, #0
 801a500:	2601      	movlt	r6, #1
 801a502:	f7ff fd73 	bl	8019fec <_Balloc>
 801a506:	692b      	ldr	r3, [r5, #16]
 801a508:	60c6      	str	r6, [r0, #12]
 801a50a:	6926      	ldr	r6, [r4, #16]
 801a50c:	f105 0914 	add.w	r9, r5, #20
 801a510:	f104 0214 	add.w	r2, r4, #20
 801a514:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a518:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a51c:	f100 0514 	add.w	r5, r0, #20
 801a520:	f04f 0e00 	mov.w	lr, #0
 801a524:	f852 ab04 	ldr.w	sl, [r2], #4
 801a528:	f859 4b04 	ldr.w	r4, [r9], #4
 801a52c:	fa1e f18a 	uxtah	r1, lr, sl
 801a530:	b2a3      	uxth	r3, r4
 801a532:	1ac9      	subs	r1, r1, r3
 801a534:	0c23      	lsrs	r3, r4, #16
 801a536:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a53a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a53e:	b289      	uxth	r1, r1
 801a540:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a544:	45c8      	cmp	r8, r9
 801a546:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a54a:	4694      	mov	ip, r2
 801a54c:	f845 3b04 	str.w	r3, [r5], #4
 801a550:	d8e8      	bhi.n	801a524 <__mdiff+0x5c>
 801a552:	45bc      	cmp	ip, r7
 801a554:	d304      	bcc.n	801a560 <__mdiff+0x98>
 801a556:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a55a:	b183      	cbz	r3, 801a57e <__mdiff+0xb6>
 801a55c:	6106      	str	r6, [r0, #16]
 801a55e:	e7c5      	b.n	801a4ec <__mdiff+0x24>
 801a560:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a564:	fa1e f381 	uxtah	r3, lr, r1
 801a568:	141a      	asrs	r2, r3, #16
 801a56a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a56e:	b29b      	uxth	r3, r3
 801a570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a574:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a578:	f845 3b04 	str.w	r3, [r5], #4
 801a57c:	e7e9      	b.n	801a552 <__mdiff+0x8a>
 801a57e:	3e01      	subs	r6, #1
 801a580:	e7e9      	b.n	801a556 <__mdiff+0x8e>
	...

0801a584 <__ulp>:
 801a584:	4b12      	ldr	r3, [pc, #72]	; (801a5d0 <__ulp+0x4c>)
 801a586:	ee10 2a90 	vmov	r2, s1
 801a58a:	401a      	ands	r2, r3
 801a58c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a590:	2b00      	cmp	r3, #0
 801a592:	dd04      	ble.n	801a59e <__ulp+0x1a>
 801a594:	2000      	movs	r0, #0
 801a596:	4619      	mov	r1, r3
 801a598:	ec41 0b10 	vmov	d0, r0, r1
 801a59c:	4770      	bx	lr
 801a59e:	425b      	negs	r3, r3
 801a5a0:	151b      	asrs	r3, r3, #20
 801a5a2:	2b13      	cmp	r3, #19
 801a5a4:	f04f 0000 	mov.w	r0, #0
 801a5a8:	f04f 0100 	mov.w	r1, #0
 801a5ac:	dc04      	bgt.n	801a5b8 <__ulp+0x34>
 801a5ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a5b2:	fa42 f103 	asr.w	r1, r2, r3
 801a5b6:	e7ef      	b.n	801a598 <__ulp+0x14>
 801a5b8:	3b14      	subs	r3, #20
 801a5ba:	2b1e      	cmp	r3, #30
 801a5bc:	f04f 0201 	mov.w	r2, #1
 801a5c0:	bfda      	itte	le
 801a5c2:	f1c3 031f 	rsble	r3, r3, #31
 801a5c6:	fa02 f303 	lslle.w	r3, r2, r3
 801a5ca:	4613      	movgt	r3, r2
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	e7e3      	b.n	801a598 <__ulp+0x14>
 801a5d0:	7ff00000 	.word	0x7ff00000

0801a5d4 <__b2d>:
 801a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5d6:	6905      	ldr	r5, [r0, #16]
 801a5d8:	f100 0714 	add.w	r7, r0, #20
 801a5dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a5e0:	1f2e      	subs	r6, r5, #4
 801a5e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f7ff fdc4 	bl	801a174 <__hi0bits>
 801a5ec:	f1c0 0320 	rsb	r3, r0, #32
 801a5f0:	280a      	cmp	r0, #10
 801a5f2:	600b      	str	r3, [r1, #0]
 801a5f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a66c <__b2d+0x98>
 801a5f8:	dc14      	bgt.n	801a624 <__b2d+0x50>
 801a5fa:	f1c0 0e0b 	rsb	lr, r0, #11
 801a5fe:	fa24 f10e 	lsr.w	r1, r4, lr
 801a602:	42b7      	cmp	r7, r6
 801a604:	ea41 030c 	orr.w	r3, r1, ip
 801a608:	bf34      	ite	cc
 801a60a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a60e:	2100      	movcs	r1, #0
 801a610:	3015      	adds	r0, #21
 801a612:	fa04 f000 	lsl.w	r0, r4, r0
 801a616:	fa21 f10e 	lsr.w	r1, r1, lr
 801a61a:	ea40 0201 	orr.w	r2, r0, r1
 801a61e:	ec43 2b10 	vmov	d0, r2, r3
 801a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a624:	42b7      	cmp	r7, r6
 801a626:	bf3a      	itte	cc
 801a628:	f1a5 0608 	subcc.w	r6, r5, #8
 801a62c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a630:	2100      	movcs	r1, #0
 801a632:	380b      	subs	r0, #11
 801a634:	d015      	beq.n	801a662 <__b2d+0x8e>
 801a636:	4084      	lsls	r4, r0
 801a638:	f1c0 0520 	rsb	r5, r0, #32
 801a63c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a640:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a644:	42be      	cmp	r6, r7
 801a646:	fa21 fc05 	lsr.w	ip, r1, r5
 801a64a:	ea44 030c 	orr.w	r3, r4, ip
 801a64e:	bf8c      	ite	hi
 801a650:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a654:	2400      	movls	r4, #0
 801a656:	fa01 f000 	lsl.w	r0, r1, r0
 801a65a:	40ec      	lsrs	r4, r5
 801a65c:	ea40 0204 	orr.w	r2, r0, r4
 801a660:	e7dd      	b.n	801a61e <__b2d+0x4a>
 801a662:	ea44 030c 	orr.w	r3, r4, ip
 801a666:	460a      	mov	r2, r1
 801a668:	e7d9      	b.n	801a61e <__b2d+0x4a>
 801a66a:	bf00      	nop
 801a66c:	3ff00000 	.word	0x3ff00000

0801a670 <__d2b>:
 801a670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a674:	460e      	mov	r6, r1
 801a676:	2101      	movs	r1, #1
 801a678:	ec59 8b10 	vmov	r8, r9, d0
 801a67c:	4615      	mov	r5, r2
 801a67e:	f7ff fcb5 	bl	8019fec <_Balloc>
 801a682:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a686:	4607      	mov	r7, r0
 801a688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a68c:	bb34      	cbnz	r4, 801a6dc <__d2b+0x6c>
 801a68e:	9301      	str	r3, [sp, #4]
 801a690:	f1b8 0300 	subs.w	r3, r8, #0
 801a694:	d027      	beq.n	801a6e6 <__d2b+0x76>
 801a696:	a802      	add	r0, sp, #8
 801a698:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a69c:	f7ff fd89 	bl	801a1b2 <__lo0bits>
 801a6a0:	9900      	ldr	r1, [sp, #0]
 801a6a2:	b1f0      	cbz	r0, 801a6e2 <__d2b+0x72>
 801a6a4:	9a01      	ldr	r2, [sp, #4]
 801a6a6:	f1c0 0320 	rsb	r3, r0, #32
 801a6aa:	fa02 f303 	lsl.w	r3, r2, r3
 801a6ae:	430b      	orrs	r3, r1
 801a6b0:	40c2      	lsrs	r2, r0
 801a6b2:	617b      	str	r3, [r7, #20]
 801a6b4:	9201      	str	r2, [sp, #4]
 801a6b6:	9b01      	ldr	r3, [sp, #4]
 801a6b8:	61bb      	str	r3, [r7, #24]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	bf14      	ite	ne
 801a6be:	2102      	movne	r1, #2
 801a6c0:	2101      	moveq	r1, #1
 801a6c2:	6139      	str	r1, [r7, #16]
 801a6c4:	b1c4      	cbz	r4, 801a6f8 <__d2b+0x88>
 801a6c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a6ca:	4404      	add	r4, r0
 801a6cc:	6034      	str	r4, [r6, #0]
 801a6ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a6d2:	6028      	str	r0, [r5, #0]
 801a6d4:	4638      	mov	r0, r7
 801a6d6:	b003      	add	sp, #12
 801a6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a6e0:	e7d5      	b.n	801a68e <__d2b+0x1e>
 801a6e2:	6179      	str	r1, [r7, #20]
 801a6e4:	e7e7      	b.n	801a6b6 <__d2b+0x46>
 801a6e6:	a801      	add	r0, sp, #4
 801a6e8:	f7ff fd63 	bl	801a1b2 <__lo0bits>
 801a6ec:	9b01      	ldr	r3, [sp, #4]
 801a6ee:	617b      	str	r3, [r7, #20]
 801a6f0:	2101      	movs	r1, #1
 801a6f2:	6139      	str	r1, [r7, #16]
 801a6f4:	3020      	adds	r0, #32
 801a6f6:	e7e5      	b.n	801a6c4 <__d2b+0x54>
 801a6f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a6fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a700:	6030      	str	r0, [r6, #0]
 801a702:	6918      	ldr	r0, [r3, #16]
 801a704:	f7ff fd36 	bl	801a174 <__hi0bits>
 801a708:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a70c:	e7e1      	b.n	801a6d2 <__d2b+0x62>

0801a70e <__ratio>:
 801a70e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a712:	4688      	mov	r8, r1
 801a714:	4669      	mov	r1, sp
 801a716:	4681      	mov	r9, r0
 801a718:	f7ff ff5c 	bl	801a5d4 <__b2d>
 801a71c:	a901      	add	r1, sp, #4
 801a71e:	4640      	mov	r0, r8
 801a720:	ec57 6b10 	vmov	r6, r7, d0
 801a724:	f7ff ff56 	bl	801a5d4 <__b2d>
 801a728:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a72c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a730:	eba3 0c02 	sub.w	ip, r3, r2
 801a734:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a738:	1a9b      	subs	r3, r3, r2
 801a73a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a73e:	ec5b ab10 	vmov	sl, fp, d0
 801a742:	2b00      	cmp	r3, #0
 801a744:	bfce      	itee	gt
 801a746:	463a      	movgt	r2, r7
 801a748:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a74c:	465a      	movle	r2, fp
 801a74e:	4659      	mov	r1, fp
 801a750:	463d      	mov	r5, r7
 801a752:	bfd4      	ite	le
 801a754:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a758:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801a75c:	4630      	mov	r0, r6
 801a75e:	ee10 2a10 	vmov	r2, s0
 801a762:	460b      	mov	r3, r1
 801a764:	4629      	mov	r1, r5
 801a766:	f7e6 f881 	bl	800086c <__aeabi_ddiv>
 801a76a:	ec41 0b10 	vmov	d0, r0, r1
 801a76e:	b003      	add	sp, #12
 801a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a774 <__copybits>:
 801a774:	3901      	subs	r1, #1
 801a776:	b510      	push	{r4, lr}
 801a778:	1149      	asrs	r1, r1, #5
 801a77a:	6914      	ldr	r4, [r2, #16]
 801a77c:	3101      	adds	r1, #1
 801a77e:	f102 0314 	add.w	r3, r2, #20
 801a782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a78a:	42a3      	cmp	r3, r4
 801a78c:	4602      	mov	r2, r0
 801a78e:	d303      	bcc.n	801a798 <__copybits+0x24>
 801a790:	2300      	movs	r3, #0
 801a792:	428a      	cmp	r2, r1
 801a794:	d305      	bcc.n	801a7a2 <__copybits+0x2e>
 801a796:	bd10      	pop	{r4, pc}
 801a798:	f853 2b04 	ldr.w	r2, [r3], #4
 801a79c:	f840 2b04 	str.w	r2, [r0], #4
 801a7a0:	e7f3      	b.n	801a78a <__copybits+0x16>
 801a7a2:	f842 3b04 	str.w	r3, [r2], #4
 801a7a6:	e7f4      	b.n	801a792 <__copybits+0x1e>

0801a7a8 <__any_on>:
 801a7a8:	f100 0214 	add.w	r2, r0, #20
 801a7ac:	6900      	ldr	r0, [r0, #16]
 801a7ae:	114b      	asrs	r3, r1, #5
 801a7b0:	4298      	cmp	r0, r3
 801a7b2:	b510      	push	{r4, lr}
 801a7b4:	db11      	blt.n	801a7da <__any_on+0x32>
 801a7b6:	dd0a      	ble.n	801a7ce <__any_on+0x26>
 801a7b8:	f011 011f 	ands.w	r1, r1, #31
 801a7bc:	d007      	beq.n	801a7ce <__any_on+0x26>
 801a7be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a7c2:	fa24 f001 	lsr.w	r0, r4, r1
 801a7c6:	fa00 f101 	lsl.w	r1, r0, r1
 801a7ca:	428c      	cmp	r4, r1
 801a7cc:	d10b      	bne.n	801a7e6 <__any_on+0x3e>
 801a7ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a7d2:	4293      	cmp	r3, r2
 801a7d4:	d803      	bhi.n	801a7de <__any_on+0x36>
 801a7d6:	2000      	movs	r0, #0
 801a7d8:	bd10      	pop	{r4, pc}
 801a7da:	4603      	mov	r3, r0
 801a7dc:	e7f7      	b.n	801a7ce <__any_on+0x26>
 801a7de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a7e2:	2900      	cmp	r1, #0
 801a7e4:	d0f5      	beq.n	801a7d2 <__any_on+0x2a>
 801a7e6:	2001      	movs	r0, #1
 801a7e8:	e7f6      	b.n	801a7d8 <__any_on+0x30>

0801a7ea <_calloc_r>:
 801a7ea:	b538      	push	{r3, r4, r5, lr}
 801a7ec:	fb02 f401 	mul.w	r4, r2, r1
 801a7f0:	4621      	mov	r1, r4
 801a7f2:	f7fc fc75 	bl	80170e0 <_malloc_r>
 801a7f6:	4605      	mov	r5, r0
 801a7f8:	b118      	cbz	r0, 801a802 <_calloc_r+0x18>
 801a7fa:	4622      	mov	r2, r4
 801a7fc:	2100      	movs	r1, #0
 801a7fe:	f7fc fc18 	bl	8017032 <memset>
 801a802:	4628      	mov	r0, r5
 801a804:	bd38      	pop	{r3, r4, r5, pc}

0801a806 <__ssputs_r>:
 801a806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a80a:	688e      	ldr	r6, [r1, #8]
 801a80c:	429e      	cmp	r6, r3
 801a80e:	4682      	mov	sl, r0
 801a810:	460c      	mov	r4, r1
 801a812:	4690      	mov	r8, r2
 801a814:	4699      	mov	r9, r3
 801a816:	d837      	bhi.n	801a888 <__ssputs_r+0x82>
 801a818:	898a      	ldrh	r2, [r1, #12]
 801a81a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a81e:	d031      	beq.n	801a884 <__ssputs_r+0x7e>
 801a820:	6825      	ldr	r5, [r4, #0]
 801a822:	6909      	ldr	r1, [r1, #16]
 801a824:	1a6f      	subs	r7, r5, r1
 801a826:	6965      	ldr	r5, [r4, #20]
 801a828:	2302      	movs	r3, #2
 801a82a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a82e:	fb95 f5f3 	sdiv	r5, r5, r3
 801a832:	f109 0301 	add.w	r3, r9, #1
 801a836:	443b      	add	r3, r7
 801a838:	429d      	cmp	r5, r3
 801a83a:	bf38      	it	cc
 801a83c:	461d      	movcc	r5, r3
 801a83e:	0553      	lsls	r3, r2, #21
 801a840:	d530      	bpl.n	801a8a4 <__ssputs_r+0x9e>
 801a842:	4629      	mov	r1, r5
 801a844:	f7fc fc4c 	bl	80170e0 <_malloc_r>
 801a848:	4606      	mov	r6, r0
 801a84a:	b950      	cbnz	r0, 801a862 <__ssputs_r+0x5c>
 801a84c:	230c      	movs	r3, #12
 801a84e:	f8ca 3000 	str.w	r3, [sl]
 801a852:	89a3      	ldrh	r3, [r4, #12]
 801a854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a858:	81a3      	strh	r3, [r4, #12]
 801a85a:	f04f 30ff 	mov.w	r0, #4294967295
 801a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a862:	463a      	mov	r2, r7
 801a864:	6921      	ldr	r1, [r4, #16]
 801a866:	f7fc fbd9 	bl	801701c <memcpy>
 801a86a:	89a3      	ldrh	r3, [r4, #12]
 801a86c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a874:	81a3      	strh	r3, [r4, #12]
 801a876:	6126      	str	r6, [r4, #16]
 801a878:	6165      	str	r5, [r4, #20]
 801a87a:	443e      	add	r6, r7
 801a87c:	1bed      	subs	r5, r5, r7
 801a87e:	6026      	str	r6, [r4, #0]
 801a880:	60a5      	str	r5, [r4, #8]
 801a882:	464e      	mov	r6, r9
 801a884:	454e      	cmp	r6, r9
 801a886:	d900      	bls.n	801a88a <__ssputs_r+0x84>
 801a888:	464e      	mov	r6, r9
 801a88a:	4632      	mov	r2, r6
 801a88c:	4641      	mov	r1, r8
 801a88e:	6820      	ldr	r0, [r4, #0]
 801a890:	f000 f919 	bl	801aac6 <memmove>
 801a894:	68a3      	ldr	r3, [r4, #8]
 801a896:	1b9b      	subs	r3, r3, r6
 801a898:	60a3      	str	r3, [r4, #8]
 801a89a:	6823      	ldr	r3, [r4, #0]
 801a89c:	441e      	add	r6, r3
 801a89e:	6026      	str	r6, [r4, #0]
 801a8a0:	2000      	movs	r0, #0
 801a8a2:	e7dc      	b.n	801a85e <__ssputs_r+0x58>
 801a8a4:	462a      	mov	r2, r5
 801a8a6:	f000 f927 	bl	801aaf8 <_realloc_r>
 801a8aa:	4606      	mov	r6, r0
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	d1e2      	bne.n	801a876 <__ssputs_r+0x70>
 801a8b0:	6921      	ldr	r1, [r4, #16]
 801a8b2:	4650      	mov	r0, sl
 801a8b4:	f7fc fbc6 	bl	8017044 <_free_r>
 801a8b8:	e7c8      	b.n	801a84c <__ssputs_r+0x46>
	...

0801a8bc <_svfiprintf_r>:
 801a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8c0:	461d      	mov	r5, r3
 801a8c2:	898b      	ldrh	r3, [r1, #12]
 801a8c4:	061f      	lsls	r7, r3, #24
 801a8c6:	b09d      	sub	sp, #116	; 0x74
 801a8c8:	4680      	mov	r8, r0
 801a8ca:	460c      	mov	r4, r1
 801a8cc:	4616      	mov	r6, r2
 801a8ce:	d50f      	bpl.n	801a8f0 <_svfiprintf_r+0x34>
 801a8d0:	690b      	ldr	r3, [r1, #16]
 801a8d2:	b96b      	cbnz	r3, 801a8f0 <_svfiprintf_r+0x34>
 801a8d4:	2140      	movs	r1, #64	; 0x40
 801a8d6:	f7fc fc03 	bl	80170e0 <_malloc_r>
 801a8da:	6020      	str	r0, [r4, #0]
 801a8dc:	6120      	str	r0, [r4, #16]
 801a8de:	b928      	cbnz	r0, 801a8ec <_svfiprintf_r+0x30>
 801a8e0:	230c      	movs	r3, #12
 801a8e2:	f8c8 3000 	str.w	r3, [r8]
 801a8e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ea:	e0c8      	b.n	801aa7e <_svfiprintf_r+0x1c2>
 801a8ec:	2340      	movs	r3, #64	; 0x40
 801a8ee:	6163      	str	r3, [r4, #20]
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f4:	2320      	movs	r3, #32
 801a8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8fa:	2330      	movs	r3, #48	; 0x30
 801a8fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a900:	9503      	str	r5, [sp, #12]
 801a902:	f04f 0b01 	mov.w	fp, #1
 801a906:	4637      	mov	r7, r6
 801a908:	463d      	mov	r5, r7
 801a90a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a90e:	b10b      	cbz	r3, 801a914 <_svfiprintf_r+0x58>
 801a910:	2b25      	cmp	r3, #37	; 0x25
 801a912:	d13e      	bne.n	801a992 <_svfiprintf_r+0xd6>
 801a914:	ebb7 0a06 	subs.w	sl, r7, r6
 801a918:	d00b      	beq.n	801a932 <_svfiprintf_r+0x76>
 801a91a:	4653      	mov	r3, sl
 801a91c:	4632      	mov	r2, r6
 801a91e:	4621      	mov	r1, r4
 801a920:	4640      	mov	r0, r8
 801a922:	f7ff ff70 	bl	801a806 <__ssputs_r>
 801a926:	3001      	adds	r0, #1
 801a928:	f000 80a4 	beq.w	801aa74 <_svfiprintf_r+0x1b8>
 801a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a92e:	4453      	add	r3, sl
 801a930:	9309      	str	r3, [sp, #36]	; 0x24
 801a932:	783b      	ldrb	r3, [r7, #0]
 801a934:	2b00      	cmp	r3, #0
 801a936:	f000 809d 	beq.w	801aa74 <_svfiprintf_r+0x1b8>
 801a93a:	2300      	movs	r3, #0
 801a93c:	f04f 32ff 	mov.w	r2, #4294967295
 801a940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a944:	9304      	str	r3, [sp, #16]
 801a946:	9307      	str	r3, [sp, #28]
 801a948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a94c:	931a      	str	r3, [sp, #104]	; 0x68
 801a94e:	462f      	mov	r7, r5
 801a950:	2205      	movs	r2, #5
 801a952:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a956:	4850      	ldr	r0, [pc, #320]	; (801aa98 <_svfiprintf_r+0x1dc>)
 801a958:	f7e5 fc52 	bl	8000200 <memchr>
 801a95c:	9b04      	ldr	r3, [sp, #16]
 801a95e:	b9d0      	cbnz	r0, 801a996 <_svfiprintf_r+0xda>
 801a960:	06d9      	lsls	r1, r3, #27
 801a962:	bf44      	itt	mi
 801a964:	2220      	movmi	r2, #32
 801a966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a96a:	071a      	lsls	r2, r3, #28
 801a96c:	bf44      	itt	mi
 801a96e:	222b      	movmi	r2, #43	; 0x2b
 801a970:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a974:	782a      	ldrb	r2, [r5, #0]
 801a976:	2a2a      	cmp	r2, #42	; 0x2a
 801a978:	d015      	beq.n	801a9a6 <_svfiprintf_r+0xea>
 801a97a:	9a07      	ldr	r2, [sp, #28]
 801a97c:	462f      	mov	r7, r5
 801a97e:	2000      	movs	r0, #0
 801a980:	250a      	movs	r5, #10
 801a982:	4639      	mov	r1, r7
 801a984:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a988:	3b30      	subs	r3, #48	; 0x30
 801a98a:	2b09      	cmp	r3, #9
 801a98c:	d94d      	bls.n	801aa2a <_svfiprintf_r+0x16e>
 801a98e:	b1b8      	cbz	r0, 801a9c0 <_svfiprintf_r+0x104>
 801a990:	e00f      	b.n	801a9b2 <_svfiprintf_r+0xf6>
 801a992:	462f      	mov	r7, r5
 801a994:	e7b8      	b.n	801a908 <_svfiprintf_r+0x4c>
 801a996:	4a40      	ldr	r2, [pc, #256]	; (801aa98 <_svfiprintf_r+0x1dc>)
 801a998:	1a80      	subs	r0, r0, r2
 801a99a:	fa0b f000 	lsl.w	r0, fp, r0
 801a99e:	4318      	orrs	r0, r3
 801a9a0:	9004      	str	r0, [sp, #16]
 801a9a2:	463d      	mov	r5, r7
 801a9a4:	e7d3      	b.n	801a94e <_svfiprintf_r+0x92>
 801a9a6:	9a03      	ldr	r2, [sp, #12]
 801a9a8:	1d11      	adds	r1, r2, #4
 801a9aa:	6812      	ldr	r2, [r2, #0]
 801a9ac:	9103      	str	r1, [sp, #12]
 801a9ae:	2a00      	cmp	r2, #0
 801a9b0:	db01      	blt.n	801a9b6 <_svfiprintf_r+0xfa>
 801a9b2:	9207      	str	r2, [sp, #28]
 801a9b4:	e004      	b.n	801a9c0 <_svfiprintf_r+0x104>
 801a9b6:	4252      	negs	r2, r2
 801a9b8:	f043 0302 	orr.w	r3, r3, #2
 801a9bc:	9207      	str	r2, [sp, #28]
 801a9be:	9304      	str	r3, [sp, #16]
 801a9c0:	783b      	ldrb	r3, [r7, #0]
 801a9c2:	2b2e      	cmp	r3, #46	; 0x2e
 801a9c4:	d10c      	bne.n	801a9e0 <_svfiprintf_r+0x124>
 801a9c6:	787b      	ldrb	r3, [r7, #1]
 801a9c8:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ca:	d133      	bne.n	801aa34 <_svfiprintf_r+0x178>
 801a9cc:	9b03      	ldr	r3, [sp, #12]
 801a9ce:	1d1a      	adds	r2, r3, #4
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	9203      	str	r2, [sp, #12]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	bfb8      	it	lt
 801a9d8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a9dc:	3702      	adds	r7, #2
 801a9de:	9305      	str	r3, [sp, #20]
 801a9e0:	4d2e      	ldr	r5, [pc, #184]	; (801aa9c <_svfiprintf_r+0x1e0>)
 801a9e2:	7839      	ldrb	r1, [r7, #0]
 801a9e4:	2203      	movs	r2, #3
 801a9e6:	4628      	mov	r0, r5
 801a9e8:	f7e5 fc0a 	bl	8000200 <memchr>
 801a9ec:	b138      	cbz	r0, 801a9fe <_svfiprintf_r+0x142>
 801a9ee:	2340      	movs	r3, #64	; 0x40
 801a9f0:	1b40      	subs	r0, r0, r5
 801a9f2:	fa03 f000 	lsl.w	r0, r3, r0
 801a9f6:	9b04      	ldr	r3, [sp, #16]
 801a9f8:	4303      	orrs	r3, r0
 801a9fa:	3701      	adds	r7, #1
 801a9fc:	9304      	str	r3, [sp, #16]
 801a9fe:	7839      	ldrb	r1, [r7, #0]
 801aa00:	4827      	ldr	r0, [pc, #156]	; (801aaa0 <_svfiprintf_r+0x1e4>)
 801aa02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa06:	2206      	movs	r2, #6
 801aa08:	1c7e      	adds	r6, r7, #1
 801aa0a:	f7e5 fbf9 	bl	8000200 <memchr>
 801aa0e:	2800      	cmp	r0, #0
 801aa10:	d038      	beq.n	801aa84 <_svfiprintf_r+0x1c8>
 801aa12:	4b24      	ldr	r3, [pc, #144]	; (801aaa4 <_svfiprintf_r+0x1e8>)
 801aa14:	bb13      	cbnz	r3, 801aa5c <_svfiprintf_r+0x1a0>
 801aa16:	9b03      	ldr	r3, [sp, #12]
 801aa18:	3307      	adds	r3, #7
 801aa1a:	f023 0307 	bic.w	r3, r3, #7
 801aa1e:	3308      	adds	r3, #8
 801aa20:	9303      	str	r3, [sp, #12]
 801aa22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa24:	444b      	add	r3, r9
 801aa26:	9309      	str	r3, [sp, #36]	; 0x24
 801aa28:	e76d      	b.n	801a906 <_svfiprintf_r+0x4a>
 801aa2a:	fb05 3202 	mla	r2, r5, r2, r3
 801aa2e:	2001      	movs	r0, #1
 801aa30:	460f      	mov	r7, r1
 801aa32:	e7a6      	b.n	801a982 <_svfiprintf_r+0xc6>
 801aa34:	2300      	movs	r3, #0
 801aa36:	3701      	adds	r7, #1
 801aa38:	9305      	str	r3, [sp, #20]
 801aa3a:	4619      	mov	r1, r3
 801aa3c:	250a      	movs	r5, #10
 801aa3e:	4638      	mov	r0, r7
 801aa40:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa44:	3a30      	subs	r2, #48	; 0x30
 801aa46:	2a09      	cmp	r2, #9
 801aa48:	d903      	bls.n	801aa52 <_svfiprintf_r+0x196>
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d0c8      	beq.n	801a9e0 <_svfiprintf_r+0x124>
 801aa4e:	9105      	str	r1, [sp, #20]
 801aa50:	e7c6      	b.n	801a9e0 <_svfiprintf_r+0x124>
 801aa52:	fb05 2101 	mla	r1, r5, r1, r2
 801aa56:	2301      	movs	r3, #1
 801aa58:	4607      	mov	r7, r0
 801aa5a:	e7f0      	b.n	801aa3e <_svfiprintf_r+0x182>
 801aa5c:	ab03      	add	r3, sp, #12
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	4622      	mov	r2, r4
 801aa62:	4b11      	ldr	r3, [pc, #68]	; (801aaa8 <_svfiprintf_r+0x1ec>)
 801aa64:	a904      	add	r1, sp, #16
 801aa66:	4640      	mov	r0, r8
 801aa68:	f7fc fc28 	bl	80172bc <_printf_float>
 801aa6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801aa70:	4681      	mov	r9, r0
 801aa72:	d1d6      	bne.n	801aa22 <_svfiprintf_r+0x166>
 801aa74:	89a3      	ldrh	r3, [r4, #12]
 801aa76:	065b      	lsls	r3, r3, #25
 801aa78:	f53f af35 	bmi.w	801a8e6 <_svfiprintf_r+0x2a>
 801aa7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa7e:	b01d      	add	sp, #116	; 0x74
 801aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa84:	ab03      	add	r3, sp, #12
 801aa86:	9300      	str	r3, [sp, #0]
 801aa88:	4622      	mov	r2, r4
 801aa8a:	4b07      	ldr	r3, [pc, #28]	; (801aaa8 <_svfiprintf_r+0x1ec>)
 801aa8c:	a904      	add	r1, sp, #16
 801aa8e:	4640      	mov	r0, r8
 801aa90:	f7fc feca 	bl	8017828 <_printf_i>
 801aa94:	e7ea      	b.n	801aa6c <_svfiprintf_r+0x1b0>
 801aa96:	bf00      	nop
 801aa98:	0801e50c 	.word	0x0801e50c
 801aa9c:	0801e512 	.word	0x0801e512
 801aaa0:	0801e516 	.word	0x0801e516
 801aaa4:	080172bd 	.word	0x080172bd
 801aaa8:	0801a807 	.word	0x0801a807

0801aaac <__ascii_wctomb>:
 801aaac:	b149      	cbz	r1, 801aac2 <__ascii_wctomb+0x16>
 801aaae:	2aff      	cmp	r2, #255	; 0xff
 801aab0:	bf85      	ittet	hi
 801aab2:	238a      	movhi	r3, #138	; 0x8a
 801aab4:	6003      	strhi	r3, [r0, #0]
 801aab6:	700a      	strbls	r2, [r1, #0]
 801aab8:	f04f 30ff 	movhi.w	r0, #4294967295
 801aabc:	bf98      	it	ls
 801aabe:	2001      	movls	r0, #1
 801aac0:	4770      	bx	lr
 801aac2:	4608      	mov	r0, r1
 801aac4:	4770      	bx	lr

0801aac6 <memmove>:
 801aac6:	4288      	cmp	r0, r1
 801aac8:	b510      	push	{r4, lr}
 801aaca:	eb01 0302 	add.w	r3, r1, r2
 801aace:	d807      	bhi.n	801aae0 <memmove+0x1a>
 801aad0:	1e42      	subs	r2, r0, #1
 801aad2:	4299      	cmp	r1, r3
 801aad4:	d00a      	beq.n	801aaec <memmove+0x26>
 801aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aada:	f802 4f01 	strb.w	r4, [r2, #1]!
 801aade:	e7f8      	b.n	801aad2 <memmove+0xc>
 801aae0:	4283      	cmp	r3, r0
 801aae2:	d9f5      	bls.n	801aad0 <memmove+0xa>
 801aae4:	1881      	adds	r1, r0, r2
 801aae6:	1ad2      	subs	r2, r2, r3
 801aae8:	42d3      	cmn	r3, r2
 801aaea:	d100      	bne.n	801aaee <memmove+0x28>
 801aaec:	bd10      	pop	{r4, pc}
 801aaee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aaf2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801aaf6:	e7f7      	b.n	801aae8 <memmove+0x22>

0801aaf8 <_realloc_r>:
 801aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aafa:	4607      	mov	r7, r0
 801aafc:	4614      	mov	r4, r2
 801aafe:	460e      	mov	r6, r1
 801ab00:	b921      	cbnz	r1, 801ab0c <_realloc_r+0x14>
 801ab02:	4611      	mov	r1, r2
 801ab04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ab08:	f7fc baea 	b.w	80170e0 <_malloc_r>
 801ab0c:	b922      	cbnz	r2, 801ab18 <_realloc_r+0x20>
 801ab0e:	f7fc fa99 	bl	8017044 <_free_r>
 801ab12:	4625      	mov	r5, r4
 801ab14:	4628      	mov	r0, r5
 801ab16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab18:	f000 f814 	bl	801ab44 <_malloc_usable_size_r>
 801ab1c:	42a0      	cmp	r0, r4
 801ab1e:	d20f      	bcs.n	801ab40 <_realloc_r+0x48>
 801ab20:	4621      	mov	r1, r4
 801ab22:	4638      	mov	r0, r7
 801ab24:	f7fc fadc 	bl	80170e0 <_malloc_r>
 801ab28:	4605      	mov	r5, r0
 801ab2a:	2800      	cmp	r0, #0
 801ab2c:	d0f2      	beq.n	801ab14 <_realloc_r+0x1c>
 801ab2e:	4631      	mov	r1, r6
 801ab30:	4622      	mov	r2, r4
 801ab32:	f7fc fa73 	bl	801701c <memcpy>
 801ab36:	4631      	mov	r1, r6
 801ab38:	4638      	mov	r0, r7
 801ab3a:	f7fc fa83 	bl	8017044 <_free_r>
 801ab3e:	e7e9      	b.n	801ab14 <_realloc_r+0x1c>
 801ab40:	4635      	mov	r5, r6
 801ab42:	e7e7      	b.n	801ab14 <_realloc_r+0x1c>

0801ab44 <_malloc_usable_size_r>:
 801ab44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab48:	1f18      	subs	r0, r3, #4
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	bfbc      	itt	lt
 801ab4e:	580b      	ldrlt	r3, [r1, r0]
 801ab50:	18c0      	addlt	r0, r0, r3
 801ab52:	4770      	bx	lr
 801ab54:	0000      	movs	r0, r0
	...

0801ab58 <cos>:
 801ab58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab5a:	ec51 0b10 	vmov	r0, r1, d0
 801ab5e:	4a1e      	ldr	r2, [pc, #120]	; (801abd8 <cos+0x80>)
 801ab60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ab64:	4293      	cmp	r3, r2
 801ab66:	dc06      	bgt.n	801ab76 <cos+0x1e>
 801ab68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801abd0 <cos+0x78>
 801ab6c:	f001 feb8 	bl	801c8e0 <__kernel_cos>
 801ab70:	ec51 0b10 	vmov	r0, r1, d0
 801ab74:	e007      	b.n	801ab86 <cos+0x2e>
 801ab76:	4a19      	ldr	r2, [pc, #100]	; (801abdc <cos+0x84>)
 801ab78:	4293      	cmp	r3, r2
 801ab7a:	dd09      	ble.n	801ab90 <cos+0x38>
 801ab7c:	ee10 2a10 	vmov	r2, s0
 801ab80:	460b      	mov	r3, r1
 801ab82:	f7e5 fb91 	bl	80002a8 <__aeabi_dsub>
 801ab86:	ec41 0b10 	vmov	d0, r0, r1
 801ab8a:	b005      	add	sp, #20
 801ab8c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab90:	4668      	mov	r0, sp
 801ab92:	f001 fbfd 	bl	801c390 <__ieee754_rem_pio2>
 801ab96:	f000 0003 	and.w	r0, r0, #3
 801ab9a:	2801      	cmp	r0, #1
 801ab9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aba0:	ed9d 0b00 	vldr	d0, [sp]
 801aba4:	d007      	beq.n	801abb6 <cos+0x5e>
 801aba6:	2802      	cmp	r0, #2
 801aba8:	d00e      	beq.n	801abc8 <cos+0x70>
 801abaa:	2800      	cmp	r0, #0
 801abac:	d0de      	beq.n	801ab6c <cos+0x14>
 801abae:	2001      	movs	r0, #1
 801abb0:	f002 fa9e 	bl	801d0f0 <__kernel_sin>
 801abb4:	e7dc      	b.n	801ab70 <cos+0x18>
 801abb6:	f002 fa9b 	bl	801d0f0 <__kernel_sin>
 801abba:	ec53 2b10 	vmov	r2, r3, d0
 801abbe:	ee10 0a10 	vmov	r0, s0
 801abc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801abc6:	e7de      	b.n	801ab86 <cos+0x2e>
 801abc8:	f001 fe8a 	bl	801c8e0 <__kernel_cos>
 801abcc:	e7f5      	b.n	801abba <cos+0x62>
 801abce:	bf00      	nop
	...
 801abd8:	3fe921fb 	.word	0x3fe921fb
 801abdc:	7fefffff 	.word	0x7fefffff

0801abe0 <sin>:
 801abe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801abe2:	ec51 0b10 	vmov	r0, r1, d0
 801abe6:	4a20      	ldr	r2, [pc, #128]	; (801ac68 <sin+0x88>)
 801abe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801abec:	4293      	cmp	r3, r2
 801abee:	dc07      	bgt.n	801ac00 <sin+0x20>
 801abf0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801ac60 <sin+0x80>
 801abf4:	2000      	movs	r0, #0
 801abf6:	f002 fa7b 	bl	801d0f0 <__kernel_sin>
 801abfa:	ec51 0b10 	vmov	r0, r1, d0
 801abfe:	e007      	b.n	801ac10 <sin+0x30>
 801ac00:	4a1a      	ldr	r2, [pc, #104]	; (801ac6c <sin+0x8c>)
 801ac02:	4293      	cmp	r3, r2
 801ac04:	dd09      	ble.n	801ac1a <sin+0x3a>
 801ac06:	ee10 2a10 	vmov	r2, s0
 801ac0a:	460b      	mov	r3, r1
 801ac0c:	f7e5 fb4c 	bl	80002a8 <__aeabi_dsub>
 801ac10:	ec41 0b10 	vmov	d0, r0, r1
 801ac14:	b005      	add	sp, #20
 801ac16:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac1a:	4668      	mov	r0, sp
 801ac1c:	f001 fbb8 	bl	801c390 <__ieee754_rem_pio2>
 801ac20:	f000 0003 	and.w	r0, r0, #3
 801ac24:	2801      	cmp	r0, #1
 801ac26:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ac2a:	ed9d 0b00 	vldr	d0, [sp]
 801ac2e:	d004      	beq.n	801ac3a <sin+0x5a>
 801ac30:	2802      	cmp	r0, #2
 801ac32:	d005      	beq.n	801ac40 <sin+0x60>
 801ac34:	b970      	cbnz	r0, 801ac54 <sin+0x74>
 801ac36:	2001      	movs	r0, #1
 801ac38:	e7dd      	b.n	801abf6 <sin+0x16>
 801ac3a:	f001 fe51 	bl	801c8e0 <__kernel_cos>
 801ac3e:	e7dc      	b.n	801abfa <sin+0x1a>
 801ac40:	2001      	movs	r0, #1
 801ac42:	f002 fa55 	bl	801d0f0 <__kernel_sin>
 801ac46:	ec53 2b10 	vmov	r2, r3, d0
 801ac4a:	ee10 0a10 	vmov	r0, s0
 801ac4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ac52:	e7dd      	b.n	801ac10 <sin+0x30>
 801ac54:	f001 fe44 	bl	801c8e0 <__kernel_cos>
 801ac58:	e7f5      	b.n	801ac46 <sin+0x66>
 801ac5a:	bf00      	nop
 801ac5c:	f3af 8000 	nop.w
	...
 801ac68:	3fe921fb 	.word	0x3fe921fb
 801ac6c:	7fefffff 	.word	0x7fefffff

0801ac70 <asin>:
 801ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac72:	ed2d 8b02 	vpush	{d8}
 801ac76:	4e26      	ldr	r6, [pc, #152]	; (801ad10 <asin+0xa0>)
 801ac78:	b08b      	sub	sp, #44	; 0x2c
 801ac7a:	ec55 4b10 	vmov	r4, r5, d0
 801ac7e:	f000 fa77 	bl	801b170 <__ieee754_asin>
 801ac82:	f996 3000 	ldrsb.w	r3, [r6]
 801ac86:	eeb0 8a40 	vmov.f32	s16, s0
 801ac8a:	eef0 8a60 	vmov.f32	s17, s1
 801ac8e:	3301      	adds	r3, #1
 801ac90:	d036      	beq.n	801ad00 <asin+0x90>
 801ac92:	4622      	mov	r2, r4
 801ac94:	462b      	mov	r3, r5
 801ac96:	4620      	mov	r0, r4
 801ac98:	4629      	mov	r1, r5
 801ac9a:	f7e5 ff57 	bl	8000b4c <__aeabi_dcmpun>
 801ac9e:	4607      	mov	r7, r0
 801aca0:	bb70      	cbnz	r0, 801ad00 <asin+0x90>
 801aca2:	ec45 4b10 	vmov	d0, r4, r5
 801aca6:	f002 fc7f 	bl	801d5a8 <fabs>
 801acaa:	2200      	movs	r2, #0
 801acac:	4b19      	ldr	r3, [pc, #100]	; (801ad14 <asin+0xa4>)
 801acae:	ec51 0b10 	vmov	r0, r1, d0
 801acb2:	f7e5 ff41 	bl	8000b38 <__aeabi_dcmpgt>
 801acb6:	b318      	cbz	r0, 801ad00 <asin+0x90>
 801acb8:	2301      	movs	r3, #1
 801acba:	9300      	str	r3, [sp, #0]
 801acbc:	4816      	ldr	r0, [pc, #88]	; (801ad18 <asin+0xa8>)
 801acbe:	4b17      	ldr	r3, [pc, #92]	; (801ad1c <asin+0xac>)
 801acc0:	9301      	str	r3, [sp, #4]
 801acc2:	9708      	str	r7, [sp, #32]
 801acc4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801acc8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801accc:	f002 fd08 	bl	801d6e0 <nan>
 801acd0:	f996 3000 	ldrsb.w	r3, [r6]
 801acd4:	2b02      	cmp	r3, #2
 801acd6:	ed8d 0b06 	vstr	d0, [sp, #24]
 801acda:	d104      	bne.n	801ace6 <asin+0x76>
 801acdc:	f7fc f964 	bl	8016fa8 <__errno>
 801ace0:	2321      	movs	r3, #33	; 0x21
 801ace2:	6003      	str	r3, [r0, #0]
 801ace4:	e004      	b.n	801acf0 <asin+0x80>
 801ace6:	4668      	mov	r0, sp
 801ace8:	f002 fcf6 	bl	801d6d8 <matherr>
 801acec:	2800      	cmp	r0, #0
 801acee:	d0f5      	beq.n	801acdc <asin+0x6c>
 801acf0:	9b08      	ldr	r3, [sp, #32]
 801acf2:	b11b      	cbz	r3, 801acfc <asin+0x8c>
 801acf4:	f7fc f958 	bl	8016fa8 <__errno>
 801acf8:	9b08      	ldr	r3, [sp, #32]
 801acfa:	6003      	str	r3, [r0, #0]
 801acfc:	ed9d 8b06 	vldr	d8, [sp, #24]
 801ad00:	eeb0 0a48 	vmov.f32	s0, s16
 801ad04:	eef0 0a68 	vmov.f32	s1, s17
 801ad08:	b00b      	add	sp, #44	; 0x2c
 801ad0a:	ecbd 8b02 	vpop	{d8}
 801ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad10:	20000368 	.word	0x20000368
 801ad14:	3ff00000 	.word	0x3ff00000
 801ad18:	0801e511 	.word	0x0801e511
 801ad1c:	0801e61e 	.word	0x0801e61e

0801ad20 <atan2>:
 801ad20:	f000 bc36 	b.w	801b590 <__ieee754_atan2>

0801ad24 <fmod>:
 801ad24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad28:	ed2d 8b02 	vpush	{d8}
 801ad2c:	b08b      	sub	sp, #44	; 0x2c
 801ad2e:	ec55 4b10 	vmov	r4, r5, d0
 801ad32:	ec57 6b11 	vmov	r6, r7, d1
 801ad36:	f000 fd09 	bl	801b74c <__ieee754_fmod>
 801ad3a:	4b2a      	ldr	r3, [pc, #168]	; (801ade4 <fmod+0xc0>)
 801ad3c:	eeb0 8a40 	vmov.f32	s16, s0
 801ad40:	eef0 8a60 	vmov.f32	s17, s1
 801ad44:	f993 8000 	ldrsb.w	r8, [r3]
 801ad48:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ad4c:	d030      	beq.n	801adb0 <fmod+0x8c>
 801ad4e:	4632      	mov	r2, r6
 801ad50:	463b      	mov	r3, r7
 801ad52:	4630      	mov	r0, r6
 801ad54:	4639      	mov	r1, r7
 801ad56:	f7e5 fef9 	bl	8000b4c <__aeabi_dcmpun>
 801ad5a:	bb48      	cbnz	r0, 801adb0 <fmod+0x8c>
 801ad5c:	4622      	mov	r2, r4
 801ad5e:	462b      	mov	r3, r5
 801ad60:	4620      	mov	r0, r4
 801ad62:	4629      	mov	r1, r5
 801ad64:	f7e5 fef2 	bl	8000b4c <__aeabi_dcmpun>
 801ad68:	4681      	mov	r9, r0
 801ad6a:	bb08      	cbnz	r0, 801adb0 <fmod+0x8c>
 801ad6c:	2200      	movs	r2, #0
 801ad6e:	2300      	movs	r3, #0
 801ad70:	4630      	mov	r0, r6
 801ad72:	4639      	mov	r1, r7
 801ad74:	f7e5 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad78:	b1d0      	cbz	r0, 801adb0 <fmod+0x8c>
 801ad7a:	2301      	movs	r3, #1
 801ad7c:	9300      	str	r3, [sp, #0]
 801ad7e:	4b1a      	ldr	r3, [pc, #104]	; (801ade8 <fmod+0xc4>)
 801ad80:	9301      	str	r3, [sp, #4]
 801ad82:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ad86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ad8a:	f8cd 9020 	str.w	r9, [sp, #32]
 801ad8e:	f1b8 0f00 	cmp.w	r8, #0
 801ad92:	d116      	bne.n	801adc2 <fmod+0x9e>
 801ad94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ad98:	4668      	mov	r0, sp
 801ad9a:	f002 fc9d 	bl	801d6d8 <matherr>
 801ad9e:	b1d8      	cbz	r0, 801add8 <fmod+0xb4>
 801ada0:	9b08      	ldr	r3, [sp, #32]
 801ada2:	b11b      	cbz	r3, 801adac <fmod+0x88>
 801ada4:	f7fc f900 	bl	8016fa8 <__errno>
 801ada8:	9b08      	ldr	r3, [sp, #32]
 801adaa:	6003      	str	r3, [r0, #0]
 801adac:	ed9d 8b06 	vldr	d8, [sp, #24]
 801adb0:	eeb0 0a48 	vmov.f32	s0, s16
 801adb4:	eef0 0a68 	vmov.f32	s1, s17
 801adb8:	b00b      	add	sp, #44	; 0x2c
 801adba:	ecbd 8b02 	vpop	{d8}
 801adbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adc2:	2200      	movs	r2, #0
 801adc4:	2300      	movs	r3, #0
 801adc6:	4610      	mov	r0, r2
 801adc8:	4619      	mov	r1, r3
 801adca:	f7e5 fd4f 	bl	800086c <__aeabi_ddiv>
 801adce:	f1b8 0f02 	cmp.w	r8, #2
 801add2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801add6:	d1df      	bne.n	801ad98 <fmod+0x74>
 801add8:	f7fc f8e6 	bl	8016fa8 <__errno>
 801addc:	2321      	movs	r3, #33	; 0x21
 801adde:	6003      	str	r3, [r0, #0]
 801ade0:	e7de      	b.n	801ada0 <fmod+0x7c>
 801ade2:	bf00      	nop
 801ade4:	20000368 	.word	0x20000368
 801ade8:	0801e623 	.word	0x0801e623

0801adec <pow>:
 801adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adf0:	ed2d 8b04 	vpush	{d8-d9}
 801adf4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b0c8 <pow+0x2dc>
 801adf8:	b08d      	sub	sp, #52	; 0x34
 801adfa:	ec57 6b10 	vmov	r6, r7, d0
 801adfe:	ec55 4b11 	vmov	r4, r5, d1
 801ae02:	f000 fdb5 	bl	801b970 <__ieee754_pow>
 801ae06:	f999 3000 	ldrsb.w	r3, [r9]
 801ae0a:	9300      	str	r3, [sp, #0]
 801ae0c:	3301      	adds	r3, #1
 801ae0e:	eeb0 8a40 	vmov.f32	s16, s0
 801ae12:	eef0 8a60 	vmov.f32	s17, s1
 801ae16:	46c8      	mov	r8, r9
 801ae18:	d05f      	beq.n	801aeda <pow+0xee>
 801ae1a:	4622      	mov	r2, r4
 801ae1c:	462b      	mov	r3, r5
 801ae1e:	4620      	mov	r0, r4
 801ae20:	4629      	mov	r1, r5
 801ae22:	f7e5 fe93 	bl	8000b4c <__aeabi_dcmpun>
 801ae26:	4683      	mov	fp, r0
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	d156      	bne.n	801aeda <pow+0xee>
 801ae2c:	4632      	mov	r2, r6
 801ae2e:	463b      	mov	r3, r7
 801ae30:	4630      	mov	r0, r6
 801ae32:	4639      	mov	r1, r7
 801ae34:	f7e5 fe8a 	bl	8000b4c <__aeabi_dcmpun>
 801ae38:	9001      	str	r0, [sp, #4]
 801ae3a:	b1e8      	cbz	r0, 801ae78 <pow+0x8c>
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	2300      	movs	r3, #0
 801ae40:	4620      	mov	r0, r4
 801ae42:	4629      	mov	r1, r5
 801ae44:	f7e5 fe50 	bl	8000ae8 <__aeabi_dcmpeq>
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	d046      	beq.n	801aeda <pow+0xee>
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	9302      	str	r3, [sp, #8]
 801ae50:	4b96      	ldr	r3, [pc, #600]	; (801b0ac <pow+0x2c0>)
 801ae52:	9303      	str	r3, [sp, #12]
 801ae54:	4b96      	ldr	r3, [pc, #600]	; (801b0b0 <pow+0x2c4>)
 801ae56:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ae60:	9b00      	ldr	r3, [sp, #0]
 801ae62:	2b02      	cmp	r3, #2
 801ae64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ae68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ae6c:	d033      	beq.n	801aed6 <pow+0xea>
 801ae6e:	a802      	add	r0, sp, #8
 801ae70:	f002 fc32 	bl	801d6d8 <matherr>
 801ae74:	bb48      	cbnz	r0, 801aeca <pow+0xde>
 801ae76:	e05d      	b.n	801af34 <pow+0x148>
 801ae78:	f04f 0a00 	mov.w	sl, #0
 801ae7c:	f04f 0b00 	mov.w	fp, #0
 801ae80:	4652      	mov	r2, sl
 801ae82:	465b      	mov	r3, fp
 801ae84:	4630      	mov	r0, r6
 801ae86:	4639      	mov	r1, r7
 801ae88:	f7e5 fe2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801ae8c:	ec4b ab19 	vmov	d9, sl, fp
 801ae90:	2800      	cmp	r0, #0
 801ae92:	d054      	beq.n	801af3e <pow+0x152>
 801ae94:	4652      	mov	r2, sl
 801ae96:	465b      	mov	r3, fp
 801ae98:	4620      	mov	r0, r4
 801ae9a:	4629      	mov	r1, r5
 801ae9c:	f7e5 fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 801aea0:	4680      	mov	r8, r0
 801aea2:	b318      	cbz	r0, 801aeec <pow+0x100>
 801aea4:	2301      	movs	r3, #1
 801aea6:	9302      	str	r3, [sp, #8]
 801aea8:	4b80      	ldr	r3, [pc, #512]	; (801b0ac <pow+0x2c0>)
 801aeaa:	9303      	str	r3, [sp, #12]
 801aeac:	9b01      	ldr	r3, [sp, #4]
 801aeae:	930a      	str	r3, [sp, #40]	; 0x28
 801aeb0:	9b00      	ldr	r3, [sp, #0]
 801aeb2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aeb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801aeba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d0d5      	beq.n	801ae6e <pow+0x82>
 801aec2:	4b7b      	ldr	r3, [pc, #492]	; (801b0b0 <pow+0x2c4>)
 801aec4:	2200      	movs	r2, #0
 801aec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aeca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aecc:	b11b      	cbz	r3, 801aed6 <pow+0xea>
 801aece:	f7fc f86b 	bl	8016fa8 <__errno>
 801aed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aed4:	6003      	str	r3, [r0, #0]
 801aed6:	ed9d 8b08 	vldr	d8, [sp, #32]
 801aeda:	eeb0 0a48 	vmov.f32	s0, s16
 801aede:	eef0 0a68 	vmov.f32	s1, s17
 801aee2:	b00d      	add	sp, #52	; 0x34
 801aee4:	ecbd 8b04 	vpop	{d8-d9}
 801aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeec:	ec45 4b10 	vmov	d0, r4, r5
 801aef0:	f002 fb63 	bl	801d5ba <finite>
 801aef4:	2800      	cmp	r0, #0
 801aef6:	d0f0      	beq.n	801aeda <pow+0xee>
 801aef8:	4652      	mov	r2, sl
 801aefa:	465b      	mov	r3, fp
 801aefc:	4620      	mov	r0, r4
 801aefe:	4629      	mov	r1, r5
 801af00:	f7e5 fdfc 	bl	8000afc <__aeabi_dcmplt>
 801af04:	2800      	cmp	r0, #0
 801af06:	d0e8      	beq.n	801aeda <pow+0xee>
 801af08:	2301      	movs	r3, #1
 801af0a:	9302      	str	r3, [sp, #8]
 801af0c:	4b67      	ldr	r3, [pc, #412]	; (801b0ac <pow+0x2c0>)
 801af0e:	9303      	str	r3, [sp, #12]
 801af10:	f999 3000 	ldrsb.w	r3, [r9]
 801af14:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801af18:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af20:	b913      	cbnz	r3, 801af28 <pow+0x13c>
 801af22:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801af26:	e7a2      	b.n	801ae6e <pow+0x82>
 801af28:	4962      	ldr	r1, [pc, #392]	; (801b0b4 <pow+0x2c8>)
 801af2a:	2000      	movs	r0, #0
 801af2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801af30:	2b02      	cmp	r3, #2
 801af32:	d19c      	bne.n	801ae6e <pow+0x82>
 801af34:	f7fc f838 	bl	8016fa8 <__errno>
 801af38:	2321      	movs	r3, #33	; 0x21
 801af3a:	6003      	str	r3, [r0, #0]
 801af3c:	e7c5      	b.n	801aeca <pow+0xde>
 801af3e:	eeb0 0a48 	vmov.f32	s0, s16
 801af42:	eef0 0a68 	vmov.f32	s1, s17
 801af46:	f002 fb38 	bl	801d5ba <finite>
 801af4a:	9000      	str	r0, [sp, #0]
 801af4c:	2800      	cmp	r0, #0
 801af4e:	f040 8081 	bne.w	801b054 <pow+0x268>
 801af52:	ec47 6b10 	vmov	d0, r6, r7
 801af56:	f002 fb30 	bl	801d5ba <finite>
 801af5a:	2800      	cmp	r0, #0
 801af5c:	d07a      	beq.n	801b054 <pow+0x268>
 801af5e:	ec45 4b10 	vmov	d0, r4, r5
 801af62:	f002 fb2a 	bl	801d5ba <finite>
 801af66:	2800      	cmp	r0, #0
 801af68:	d074      	beq.n	801b054 <pow+0x268>
 801af6a:	ec53 2b18 	vmov	r2, r3, d8
 801af6e:	ee18 0a10 	vmov	r0, s16
 801af72:	4619      	mov	r1, r3
 801af74:	f7e5 fdea 	bl	8000b4c <__aeabi_dcmpun>
 801af78:	f999 9000 	ldrsb.w	r9, [r9]
 801af7c:	4b4b      	ldr	r3, [pc, #300]	; (801b0ac <pow+0x2c0>)
 801af7e:	b1b0      	cbz	r0, 801afae <pow+0x1c2>
 801af80:	2201      	movs	r2, #1
 801af82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801af86:	9b00      	ldr	r3, [sp, #0]
 801af88:	930a      	str	r3, [sp, #40]	; 0x28
 801af8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af92:	f1b9 0f00 	cmp.w	r9, #0
 801af96:	d0c4      	beq.n	801af22 <pow+0x136>
 801af98:	4652      	mov	r2, sl
 801af9a:	465b      	mov	r3, fp
 801af9c:	4650      	mov	r0, sl
 801af9e:	4659      	mov	r1, fp
 801afa0:	f7e5 fc64 	bl	800086c <__aeabi_ddiv>
 801afa4:	f1b9 0f02 	cmp.w	r9, #2
 801afa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801afac:	e7c1      	b.n	801af32 <pow+0x146>
 801afae:	2203      	movs	r2, #3
 801afb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801afb4:	900a      	str	r0, [sp, #40]	; 0x28
 801afb6:	4629      	mov	r1, r5
 801afb8:	4620      	mov	r0, r4
 801afba:	2200      	movs	r2, #0
 801afbc:	4b3e      	ldr	r3, [pc, #248]	; (801b0b8 <pow+0x2cc>)
 801afbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801afc2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801afc6:	f7e5 fb27 	bl	8000618 <__aeabi_dmul>
 801afca:	4604      	mov	r4, r0
 801afcc:	460d      	mov	r5, r1
 801afce:	f1b9 0f00 	cmp.w	r9, #0
 801afd2:	d124      	bne.n	801b01e <pow+0x232>
 801afd4:	4b39      	ldr	r3, [pc, #228]	; (801b0bc <pow+0x2d0>)
 801afd6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801afda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801afde:	4630      	mov	r0, r6
 801afe0:	4652      	mov	r2, sl
 801afe2:	465b      	mov	r3, fp
 801afe4:	4639      	mov	r1, r7
 801afe6:	f7e5 fd89 	bl	8000afc <__aeabi_dcmplt>
 801afea:	2800      	cmp	r0, #0
 801afec:	d056      	beq.n	801b09c <pow+0x2b0>
 801afee:	ec45 4b10 	vmov	d0, r4, r5
 801aff2:	f002 fb7d 	bl	801d6f0 <rint>
 801aff6:	4622      	mov	r2, r4
 801aff8:	462b      	mov	r3, r5
 801affa:	ec51 0b10 	vmov	r0, r1, d0
 801affe:	f7e5 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 801b002:	b920      	cbnz	r0, 801b00e <pow+0x222>
 801b004:	4b2e      	ldr	r3, [pc, #184]	; (801b0c0 <pow+0x2d4>)
 801b006:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b00a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b00e:	f998 3000 	ldrsb.w	r3, [r8]
 801b012:	2b02      	cmp	r3, #2
 801b014:	d142      	bne.n	801b09c <pow+0x2b0>
 801b016:	f7fb ffc7 	bl	8016fa8 <__errno>
 801b01a:	2322      	movs	r3, #34	; 0x22
 801b01c:	e78d      	b.n	801af3a <pow+0x14e>
 801b01e:	4b29      	ldr	r3, [pc, #164]	; (801b0c4 <pow+0x2d8>)
 801b020:	2200      	movs	r2, #0
 801b022:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b026:	4630      	mov	r0, r6
 801b028:	4652      	mov	r2, sl
 801b02a:	465b      	mov	r3, fp
 801b02c:	4639      	mov	r1, r7
 801b02e:	f7e5 fd65 	bl	8000afc <__aeabi_dcmplt>
 801b032:	2800      	cmp	r0, #0
 801b034:	d0eb      	beq.n	801b00e <pow+0x222>
 801b036:	ec45 4b10 	vmov	d0, r4, r5
 801b03a:	f002 fb59 	bl	801d6f0 <rint>
 801b03e:	4622      	mov	r2, r4
 801b040:	462b      	mov	r3, r5
 801b042:	ec51 0b10 	vmov	r0, r1, d0
 801b046:	f7e5 fd4f 	bl	8000ae8 <__aeabi_dcmpeq>
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d1df      	bne.n	801b00e <pow+0x222>
 801b04e:	2200      	movs	r2, #0
 801b050:	4b18      	ldr	r3, [pc, #96]	; (801b0b4 <pow+0x2c8>)
 801b052:	e7da      	b.n	801b00a <pow+0x21e>
 801b054:	2200      	movs	r2, #0
 801b056:	2300      	movs	r3, #0
 801b058:	ec51 0b18 	vmov	r0, r1, d8
 801b05c:	f7e5 fd44 	bl	8000ae8 <__aeabi_dcmpeq>
 801b060:	2800      	cmp	r0, #0
 801b062:	f43f af3a 	beq.w	801aeda <pow+0xee>
 801b066:	ec47 6b10 	vmov	d0, r6, r7
 801b06a:	f002 faa6 	bl	801d5ba <finite>
 801b06e:	2800      	cmp	r0, #0
 801b070:	f43f af33 	beq.w	801aeda <pow+0xee>
 801b074:	ec45 4b10 	vmov	d0, r4, r5
 801b078:	f002 fa9f 	bl	801d5ba <finite>
 801b07c:	2800      	cmp	r0, #0
 801b07e:	f43f af2c 	beq.w	801aeda <pow+0xee>
 801b082:	2304      	movs	r3, #4
 801b084:	9302      	str	r3, [sp, #8]
 801b086:	4b09      	ldr	r3, [pc, #36]	; (801b0ac <pow+0x2c0>)
 801b088:	9303      	str	r3, [sp, #12]
 801b08a:	2300      	movs	r3, #0
 801b08c:	930a      	str	r3, [sp, #40]	; 0x28
 801b08e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b092:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b096:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b09a:	e7b8      	b.n	801b00e <pow+0x222>
 801b09c:	a802      	add	r0, sp, #8
 801b09e:	f002 fb1b 	bl	801d6d8 <matherr>
 801b0a2:	2800      	cmp	r0, #0
 801b0a4:	f47f af11 	bne.w	801aeca <pow+0xde>
 801b0a8:	e7b5      	b.n	801b016 <pow+0x22a>
 801b0aa:	bf00      	nop
 801b0ac:	0801e628 	.word	0x0801e628
 801b0b0:	3ff00000 	.word	0x3ff00000
 801b0b4:	fff00000 	.word	0xfff00000
 801b0b8:	3fe00000 	.word	0x3fe00000
 801b0bc:	47efffff 	.word	0x47efffff
 801b0c0:	c7efffff 	.word	0xc7efffff
 801b0c4:	7ff00000 	.word	0x7ff00000
 801b0c8:	20000368 	.word	0x20000368

0801b0cc <sqrtf>:
 801b0cc:	b510      	push	{r4, lr}
 801b0ce:	ed2d 8b02 	vpush	{d8}
 801b0d2:	b08a      	sub	sp, #40	; 0x28
 801b0d4:	eeb0 8a40 	vmov.f32	s16, s0
 801b0d8:	f001 fbfc 	bl	801c8d4 <__ieee754_sqrtf>
 801b0dc:	4b21      	ldr	r3, [pc, #132]	; (801b164 <sqrtf+0x98>)
 801b0de:	f993 4000 	ldrsb.w	r4, [r3]
 801b0e2:	1c63      	adds	r3, r4, #1
 801b0e4:	d02c      	beq.n	801b140 <sqrtf+0x74>
 801b0e6:	eeb4 8a48 	vcmp.f32	s16, s16
 801b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ee:	d627      	bvs.n	801b140 <sqrtf+0x74>
 801b0f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0f8:	d522      	bpl.n	801b140 <sqrtf+0x74>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	4b1a      	ldr	r3, [pc, #104]	; (801b168 <sqrtf+0x9c>)
 801b100:	9301      	str	r3, [sp, #4]
 801b102:	ee18 0a10 	vmov	r0, s16
 801b106:	2300      	movs	r3, #0
 801b108:	9308      	str	r3, [sp, #32]
 801b10a:	f7e5 fa2d 	bl	8000568 <__aeabi_f2d>
 801b10e:	2200      	movs	r2, #0
 801b110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b118:	2300      	movs	r3, #0
 801b11a:	b9ac      	cbnz	r4, 801b148 <sqrtf+0x7c>
 801b11c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b120:	4668      	mov	r0, sp
 801b122:	f002 fad9 	bl	801d6d8 <matherr>
 801b126:	b1b8      	cbz	r0, 801b158 <sqrtf+0x8c>
 801b128:	9b08      	ldr	r3, [sp, #32]
 801b12a:	b11b      	cbz	r3, 801b134 <sqrtf+0x68>
 801b12c:	f7fb ff3c 	bl	8016fa8 <__errno>
 801b130:	9b08      	ldr	r3, [sp, #32]
 801b132:	6003      	str	r3, [r0, #0]
 801b134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b138:	f7e5 fd66 	bl	8000c08 <__aeabi_d2f>
 801b13c:	ee00 0a10 	vmov	s0, r0
 801b140:	b00a      	add	sp, #40	; 0x28
 801b142:	ecbd 8b02 	vpop	{d8}
 801b146:	bd10      	pop	{r4, pc}
 801b148:	4610      	mov	r0, r2
 801b14a:	4619      	mov	r1, r3
 801b14c:	f7e5 fb8e 	bl	800086c <__aeabi_ddiv>
 801b150:	2c02      	cmp	r4, #2
 801b152:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b156:	d1e3      	bne.n	801b120 <sqrtf+0x54>
 801b158:	f7fb ff26 	bl	8016fa8 <__errno>
 801b15c:	2321      	movs	r3, #33	; 0x21
 801b15e:	6003      	str	r3, [r0, #0]
 801b160:	e7e2      	b.n	801b128 <sqrtf+0x5c>
 801b162:	bf00      	nop
 801b164:	20000368 	.word	0x20000368
 801b168:	0801e62c 	.word	0x0801e62c
 801b16c:	00000000 	.word	0x00000000

0801b170 <__ieee754_asin>:
 801b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b174:	ec55 4b10 	vmov	r4, r5, d0
 801b178:	4bcb      	ldr	r3, [pc, #812]	; (801b4a8 <__ieee754_asin+0x338>)
 801b17a:	b087      	sub	sp, #28
 801b17c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801b180:	429f      	cmp	r7, r3
 801b182:	9501      	str	r5, [sp, #4]
 801b184:	dd31      	ble.n	801b1ea <__ieee754_asin+0x7a>
 801b186:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b18a:	ee10 3a10 	vmov	r3, s0
 801b18e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b192:	433b      	orrs	r3, r7
 801b194:	d117      	bne.n	801b1c6 <__ieee754_asin+0x56>
 801b196:	a3aa      	add	r3, pc, #680	; (adr r3, 801b440 <__ieee754_asin+0x2d0>)
 801b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b19c:	ee10 0a10 	vmov	r0, s0
 801b1a0:	4629      	mov	r1, r5
 801b1a2:	f7e5 fa39 	bl	8000618 <__aeabi_dmul>
 801b1a6:	a3a8      	add	r3, pc, #672	; (adr r3, 801b448 <__ieee754_asin+0x2d8>)
 801b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ac:	4606      	mov	r6, r0
 801b1ae:	460f      	mov	r7, r1
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	4629      	mov	r1, r5
 801b1b4:	f7e5 fa30 	bl	8000618 <__aeabi_dmul>
 801b1b8:	4602      	mov	r2, r0
 801b1ba:	460b      	mov	r3, r1
 801b1bc:	4630      	mov	r0, r6
 801b1be:	4639      	mov	r1, r7
 801b1c0:	f7e5 f874 	bl	80002ac <__adddf3>
 801b1c4:	e00a      	b.n	801b1dc <__ieee754_asin+0x6c>
 801b1c6:	ee10 2a10 	vmov	r2, s0
 801b1ca:	462b      	mov	r3, r5
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e5 f86a 	bl	80002a8 <__aeabi_dsub>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	f7e5 fb48 	bl	800086c <__aeabi_ddiv>
 801b1dc:	4604      	mov	r4, r0
 801b1de:	460d      	mov	r5, r1
 801b1e0:	ec45 4b10 	vmov	d0, r4, r5
 801b1e4:	b007      	add	sp, #28
 801b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ea:	4bb0      	ldr	r3, [pc, #704]	; (801b4ac <__ieee754_asin+0x33c>)
 801b1ec:	429f      	cmp	r7, r3
 801b1ee:	dc11      	bgt.n	801b214 <__ieee754_asin+0xa4>
 801b1f0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b1f4:	f280 80ae 	bge.w	801b354 <__ieee754_asin+0x1e4>
 801b1f8:	a395      	add	r3, pc, #596	; (adr r3, 801b450 <__ieee754_asin+0x2e0>)
 801b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1fe:	ee10 0a10 	vmov	r0, s0
 801b202:	4629      	mov	r1, r5
 801b204:	f7e5 f852 	bl	80002ac <__adddf3>
 801b208:	2200      	movs	r2, #0
 801b20a:	4ba9      	ldr	r3, [pc, #676]	; (801b4b0 <__ieee754_asin+0x340>)
 801b20c:	f7e5 fc94 	bl	8000b38 <__aeabi_dcmpgt>
 801b210:	2800      	cmp	r0, #0
 801b212:	d1e5      	bne.n	801b1e0 <__ieee754_asin+0x70>
 801b214:	ec45 4b10 	vmov	d0, r4, r5
 801b218:	f002 f9c6 	bl	801d5a8 <fabs>
 801b21c:	2000      	movs	r0, #0
 801b21e:	ec53 2b10 	vmov	r2, r3, d0
 801b222:	49a3      	ldr	r1, [pc, #652]	; (801b4b0 <__ieee754_asin+0x340>)
 801b224:	f7e5 f840 	bl	80002a8 <__aeabi_dsub>
 801b228:	2200      	movs	r2, #0
 801b22a:	4ba2      	ldr	r3, [pc, #648]	; (801b4b4 <__ieee754_asin+0x344>)
 801b22c:	f7e5 f9f4 	bl	8000618 <__aeabi_dmul>
 801b230:	a389      	add	r3, pc, #548	; (adr r3, 801b458 <__ieee754_asin+0x2e8>)
 801b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b236:	4604      	mov	r4, r0
 801b238:	460d      	mov	r5, r1
 801b23a:	f7e5 f9ed 	bl	8000618 <__aeabi_dmul>
 801b23e:	a388      	add	r3, pc, #544	; (adr r3, 801b460 <__ieee754_asin+0x2f0>)
 801b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b244:	f7e5 f832 	bl	80002ac <__adddf3>
 801b248:	4622      	mov	r2, r4
 801b24a:	462b      	mov	r3, r5
 801b24c:	f7e5 f9e4 	bl	8000618 <__aeabi_dmul>
 801b250:	a385      	add	r3, pc, #532	; (adr r3, 801b468 <__ieee754_asin+0x2f8>)
 801b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b256:	f7e5 f827 	bl	80002a8 <__aeabi_dsub>
 801b25a:	4622      	mov	r2, r4
 801b25c:	462b      	mov	r3, r5
 801b25e:	f7e5 f9db 	bl	8000618 <__aeabi_dmul>
 801b262:	a383      	add	r3, pc, #524	; (adr r3, 801b470 <__ieee754_asin+0x300>)
 801b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b268:	f7e5 f820 	bl	80002ac <__adddf3>
 801b26c:	4622      	mov	r2, r4
 801b26e:	462b      	mov	r3, r5
 801b270:	f7e5 f9d2 	bl	8000618 <__aeabi_dmul>
 801b274:	a380      	add	r3, pc, #512	; (adr r3, 801b478 <__ieee754_asin+0x308>)
 801b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b27a:	f7e5 f815 	bl	80002a8 <__aeabi_dsub>
 801b27e:	4622      	mov	r2, r4
 801b280:	462b      	mov	r3, r5
 801b282:	f7e5 f9c9 	bl	8000618 <__aeabi_dmul>
 801b286:	a37e      	add	r3, pc, #504	; (adr r3, 801b480 <__ieee754_asin+0x310>)
 801b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28c:	f7e5 f80e 	bl	80002ac <__adddf3>
 801b290:	4622      	mov	r2, r4
 801b292:	462b      	mov	r3, r5
 801b294:	f7e5 f9c0 	bl	8000618 <__aeabi_dmul>
 801b298:	a37b      	add	r3, pc, #492	; (adr r3, 801b488 <__ieee754_asin+0x318>)
 801b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b29e:	4680      	mov	r8, r0
 801b2a0:	4689      	mov	r9, r1
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	4629      	mov	r1, r5
 801b2a6:	f7e5 f9b7 	bl	8000618 <__aeabi_dmul>
 801b2aa:	a379      	add	r3, pc, #484	; (adr r3, 801b490 <__ieee754_asin+0x320>)
 801b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b0:	f7e4 fffa 	bl	80002a8 <__aeabi_dsub>
 801b2b4:	4622      	mov	r2, r4
 801b2b6:	462b      	mov	r3, r5
 801b2b8:	f7e5 f9ae 	bl	8000618 <__aeabi_dmul>
 801b2bc:	a376      	add	r3, pc, #472	; (adr r3, 801b498 <__ieee754_asin+0x328>)
 801b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c2:	f7e4 fff3 	bl	80002ac <__adddf3>
 801b2c6:	4622      	mov	r2, r4
 801b2c8:	462b      	mov	r3, r5
 801b2ca:	f7e5 f9a5 	bl	8000618 <__aeabi_dmul>
 801b2ce:	a374      	add	r3, pc, #464	; (adr r3, 801b4a0 <__ieee754_asin+0x330>)
 801b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d4:	f7e4 ffe8 	bl	80002a8 <__aeabi_dsub>
 801b2d8:	4622      	mov	r2, r4
 801b2da:	462b      	mov	r3, r5
 801b2dc:	f7e5 f99c 	bl	8000618 <__aeabi_dmul>
 801b2e0:	4b73      	ldr	r3, [pc, #460]	; (801b4b0 <__ieee754_asin+0x340>)
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	f7e4 ffe2 	bl	80002ac <__adddf3>
 801b2e8:	ec45 4b10 	vmov	d0, r4, r5
 801b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2f0:	f001 fa40 	bl	801c774 <__ieee754_sqrt>
 801b2f4:	4b70      	ldr	r3, [pc, #448]	; (801b4b8 <__ieee754_asin+0x348>)
 801b2f6:	429f      	cmp	r7, r3
 801b2f8:	ec5b ab10 	vmov	sl, fp, d0
 801b2fc:	f340 80de 	ble.w	801b4bc <__ieee754_asin+0x34c>
 801b300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b304:	4640      	mov	r0, r8
 801b306:	4649      	mov	r1, r9
 801b308:	f7e5 fab0 	bl	800086c <__aeabi_ddiv>
 801b30c:	4652      	mov	r2, sl
 801b30e:	465b      	mov	r3, fp
 801b310:	f7e5 f982 	bl	8000618 <__aeabi_dmul>
 801b314:	4652      	mov	r2, sl
 801b316:	465b      	mov	r3, fp
 801b318:	f7e4 ffc8 	bl	80002ac <__adddf3>
 801b31c:	4602      	mov	r2, r0
 801b31e:	460b      	mov	r3, r1
 801b320:	f7e4 ffc4 	bl	80002ac <__adddf3>
 801b324:	a348      	add	r3, pc, #288	; (adr r3, 801b448 <__ieee754_asin+0x2d8>)
 801b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b32a:	f7e4 ffbd 	bl	80002a8 <__aeabi_dsub>
 801b32e:	4602      	mov	r2, r0
 801b330:	460b      	mov	r3, r1
 801b332:	a143      	add	r1, pc, #268	; (adr r1, 801b440 <__ieee754_asin+0x2d0>)
 801b334:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b338:	f7e4 ffb6 	bl	80002a8 <__aeabi_dsub>
 801b33c:	9b01      	ldr	r3, [sp, #4]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	bfdc      	itt	le
 801b342:	4602      	movle	r2, r0
 801b344:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b348:	4604      	mov	r4, r0
 801b34a:	460d      	mov	r5, r1
 801b34c:	bfdc      	itt	le
 801b34e:	4614      	movle	r4, r2
 801b350:	461d      	movle	r5, r3
 801b352:	e745      	b.n	801b1e0 <__ieee754_asin+0x70>
 801b354:	ee10 2a10 	vmov	r2, s0
 801b358:	ee10 0a10 	vmov	r0, s0
 801b35c:	462b      	mov	r3, r5
 801b35e:	4629      	mov	r1, r5
 801b360:	f7e5 f95a 	bl	8000618 <__aeabi_dmul>
 801b364:	a33c      	add	r3, pc, #240	; (adr r3, 801b458 <__ieee754_asin+0x2e8>)
 801b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36a:	4606      	mov	r6, r0
 801b36c:	460f      	mov	r7, r1
 801b36e:	f7e5 f953 	bl	8000618 <__aeabi_dmul>
 801b372:	a33b      	add	r3, pc, #236	; (adr r3, 801b460 <__ieee754_asin+0x2f0>)
 801b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b378:	f7e4 ff98 	bl	80002ac <__adddf3>
 801b37c:	4632      	mov	r2, r6
 801b37e:	463b      	mov	r3, r7
 801b380:	f7e5 f94a 	bl	8000618 <__aeabi_dmul>
 801b384:	a338      	add	r3, pc, #224	; (adr r3, 801b468 <__ieee754_asin+0x2f8>)
 801b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b38a:	f7e4 ff8d 	bl	80002a8 <__aeabi_dsub>
 801b38e:	4632      	mov	r2, r6
 801b390:	463b      	mov	r3, r7
 801b392:	f7e5 f941 	bl	8000618 <__aeabi_dmul>
 801b396:	a336      	add	r3, pc, #216	; (adr r3, 801b470 <__ieee754_asin+0x300>)
 801b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b39c:	f7e4 ff86 	bl	80002ac <__adddf3>
 801b3a0:	4632      	mov	r2, r6
 801b3a2:	463b      	mov	r3, r7
 801b3a4:	f7e5 f938 	bl	8000618 <__aeabi_dmul>
 801b3a8:	a333      	add	r3, pc, #204	; (adr r3, 801b478 <__ieee754_asin+0x308>)
 801b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ae:	f7e4 ff7b 	bl	80002a8 <__aeabi_dsub>
 801b3b2:	4632      	mov	r2, r6
 801b3b4:	463b      	mov	r3, r7
 801b3b6:	f7e5 f92f 	bl	8000618 <__aeabi_dmul>
 801b3ba:	a331      	add	r3, pc, #196	; (adr r3, 801b480 <__ieee754_asin+0x310>)
 801b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c0:	f7e4 ff74 	bl	80002ac <__adddf3>
 801b3c4:	4632      	mov	r2, r6
 801b3c6:	463b      	mov	r3, r7
 801b3c8:	f7e5 f926 	bl	8000618 <__aeabi_dmul>
 801b3cc:	a32e      	add	r3, pc, #184	; (adr r3, 801b488 <__ieee754_asin+0x318>)
 801b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d2:	4680      	mov	r8, r0
 801b3d4:	4689      	mov	r9, r1
 801b3d6:	4630      	mov	r0, r6
 801b3d8:	4639      	mov	r1, r7
 801b3da:	f7e5 f91d 	bl	8000618 <__aeabi_dmul>
 801b3de:	a32c      	add	r3, pc, #176	; (adr r3, 801b490 <__ieee754_asin+0x320>)
 801b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e4:	f7e4 ff60 	bl	80002a8 <__aeabi_dsub>
 801b3e8:	4632      	mov	r2, r6
 801b3ea:	463b      	mov	r3, r7
 801b3ec:	f7e5 f914 	bl	8000618 <__aeabi_dmul>
 801b3f0:	a329      	add	r3, pc, #164	; (adr r3, 801b498 <__ieee754_asin+0x328>)
 801b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f6:	f7e4 ff59 	bl	80002ac <__adddf3>
 801b3fa:	4632      	mov	r2, r6
 801b3fc:	463b      	mov	r3, r7
 801b3fe:	f7e5 f90b 	bl	8000618 <__aeabi_dmul>
 801b402:	a327      	add	r3, pc, #156	; (adr r3, 801b4a0 <__ieee754_asin+0x330>)
 801b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b408:	f7e4 ff4e 	bl	80002a8 <__aeabi_dsub>
 801b40c:	4632      	mov	r2, r6
 801b40e:	463b      	mov	r3, r7
 801b410:	f7e5 f902 	bl	8000618 <__aeabi_dmul>
 801b414:	2200      	movs	r2, #0
 801b416:	4b26      	ldr	r3, [pc, #152]	; (801b4b0 <__ieee754_asin+0x340>)
 801b418:	f7e4 ff48 	bl	80002ac <__adddf3>
 801b41c:	4602      	mov	r2, r0
 801b41e:	460b      	mov	r3, r1
 801b420:	4640      	mov	r0, r8
 801b422:	4649      	mov	r1, r9
 801b424:	f7e5 fa22 	bl	800086c <__aeabi_ddiv>
 801b428:	4622      	mov	r2, r4
 801b42a:	462b      	mov	r3, r5
 801b42c:	f7e5 f8f4 	bl	8000618 <__aeabi_dmul>
 801b430:	4602      	mov	r2, r0
 801b432:	460b      	mov	r3, r1
 801b434:	4620      	mov	r0, r4
 801b436:	4629      	mov	r1, r5
 801b438:	e6c2      	b.n	801b1c0 <__ieee754_asin+0x50>
 801b43a:	bf00      	nop
 801b43c:	f3af 8000 	nop.w
 801b440:	54442d18 	.word	0x54442d18
 801b444:	3ff921fb 	.word	0x3ff921fb
 801b448:	33145c07 	.word	0x33145c07
 801b44c:	3c91a626 	.word	0x3c91a626
 801b450:	8800759c 	.word	0x8800759c
 801b454:	7e37e43c 	.word	0x7e37e43c
 801b458:	0dfdf709 	.word	0x0dfdf709
 801b45c:	3f023de1 	.word	0x3f023de1
 801b460:	7501b288 	.word	0x7501b288
 801b464:	3f49efe0 	.word	0x3f49efe0
 801b468:	b5688f3b 	.word	0xb5688f3b
 801b46c:	3fa48228 	.word	0x3fa48228
 801b470:	0e884455 	.word	0x0e884455
 801b474:	3fc9c155 	.word	0x3fc9c155
 801b478:	03eb6f7d 	.word	0x03eb6f7d
 801b47c:	3fd4d612 	.word	0x3fd4d612
 801b480:	55555555 	.word	0x55555555
 801b484:	3fc55555 	.word	0x3fc55555
 801b488:	b12e9282 	.word	0xb12e9282
 801b48c:	3fb3b8c5 	.word	0x3fb3b8c5
 801b490:	1b8d0159 	.word	0x1b8d0159
 801b494:	3fe6066c 	.word	0x3fe6066c
 801b498:	9c598ac8 	.word	0x9c598ac8
 801b49c:	40002ae5 	.word	0x40002ae5
 801b4a0:	1c8a2d4b 	.word	0x1c8a2d4b
 801b4a4:	40033a27 	.word	0x40033a27
 801b4a8:	3fefffff 	.word	0x3fefffff
 801b4ac:	3fdfffff 	.word	0x3fdfffff
 801b4b0:	3ff00000 	.word	0x3ff00000
 801b4b4:	3fe00000 	.word	0x3fe00000
 801b4b8:	3fef3332 	.word	0x3fef3332
 801b4bc:	ee10 2a10 	vmov	r2, s0
 801b4c0:	ee10 0a10 	vmov	r0, s0
 801b4c4:	465b      	mov	r3, fp
 801b4c6:	4659      	mov	r1, fp
 801b4c8:	f7e4 fef0 	bl	80002ac <__adddf3>
 801b4cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4d4:	4640      	mov	r0, r8
 801b4d6:	4649      	mov	r1, r9
 801b4d8:	f7e5 f9c8 	bl	800086c <__aeabi_ddiv>
 801b4dc:	4602      	mov	r2, r0
 801b4de:	460b      	mov	r3, r1
 801b4e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b4e4:	f7e5 f898 	bl	8000618 <__aeabi_dmul>
 801b4e8:	2600      	movs	r6, #0
 801b4ea:	4680      	mov	r8, r0
 801b4ec:	4689      	mov	r9, r1
 801b4ee:	4632      	mov	r2, r6
 801b4f0:	465b      	mov	r3, fp
 801b4f2:	4630      	mov	r0, r6
 801b4f4:	4659      	mov	r1, fp
 801b4f6:	f7e5 f88f 	bl	8000618 <__aeabi_dmul>
 801b4fa:	4602      	mov	r2, r0
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	4620      	mov	r0, r4
 801b500:	4629      	mov	r1, r5
 801b502:	f7e4 fed1 	bl	80002a8 <__aeabi_dsub>
 801b506:	4632      	mov	r2, r6
 801b508:	4604      	mov	r4, r0
 801b50a:	460d      	mov	r5, r1
 801b50c:	465b      	mov	r3, fp
 801b50e:	4650      	mov	r0, sl
 801b510:	4659      	mov	r1, fp
 801b512:	f7e4 fecb 	bl	80002ac <__adddf3>
 801b516:	4602      	mov	r2, r0
 801b518:	460b      	mov	r3, r1
 801b51a:	4620      	mov	r0, r4
 801b51c:	4629      	mov	r1, r5
 801b51e:	f7e5 f9a5 	bl	800086c <__aeabi_ddiv>
 801b522:	4602      	mov	r2, r0
 801b524:	460b      	mov	r3, r1
 801b526:	f7e4 fec1 	bl	80002ac <__adddf3>
 801b52a:	4602      	mov	r2, r0
 801b52c:	460b      	mov	r3, r1
 801b52e:	a114      	add	r1, pc, #80	; (adr r1, 801b580 <__ieee754_asin+0x410>)
 801b530:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b534:	f7e4 feb8 	bl	80002a8 <__aeabi_dsub>
 801b538:	4602      	mov	r2, r0
 801b53a:	460b      	mov	r3, r1
 801b53c:	4640      	mov	r0, r8
 801b53e:	4649      	mov	r1, r9
 801b540:	f7e4 feb2 	bl	80002a8 <__aeabi_dsub>
 801b544:	465f      	mov	r7, fp
 801b546:	4604      	mov	r4, r0
 801b548:	460d      	mov	r5, r1
 801b54a:	4632      	mov	r2, r6
 801b54c:	465b      	mov	r3, fp
 801b54e:	4630      	mov	r0, r6
 801b550:	4639      	mov	r1, r7
 801b552:	f7e4 feab 	bl	80002ac <__adddf3>
 801b556:	4602      	mov	r2, r0
 801b558:	460b      	mov	r3, r1
 801b55a:	a10b      	add	r1, pc, #44	; (adr r1, 801b588 <__ieee754_asin+0x418>)
 801b55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b560:	f7e4 fea2 	bl	80002a8 <__aeabi_dsub>
 801b564:	4602      	mov	r2, r0
 801b566:	460b      	mov	r3, r1
 801b568:	4620      	mov	r0, r4
 801b56a:	4629      	mov	r1, r5
 801b56c:	f7e4 fe9c 	bl	80002a8 <__aeabi_dsub>
 801b570:	4602      	mov	r2, r0
 801b572:	460b      	mov	r3, r1
 801b574:	a104      	add	r1, pc, #16	; (adr r1, 801b588 <__ieee754_asin+0x418>)
 801b576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b57a:	e6dd      	b.n	801b338 <__ieee754_asin+0x1c8>
 801b57c:	f3af 8000 	nop.w
 801b580:	33145c07 	.word	0x33145c07
 801b584:	3c91a626 	.word	0x3c91a626
 801b588:	54442d18 	.word	0x54442d18
 801b58c:	3fe921fb 	.word	0x3fe921fb

0801b590 <__ieee754_atan2>:
 801b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b594:	ec57 6b11 	vmov	r6, r7, d1
 801b598:	4273      	negs	r3, r6
 801b59a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b59e:	4333      	orrs	r3, r6
 801b5a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801b748 <__ieee754_atan2+0x1b8>
 801b5a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b5a8:	4573      	cmp	r3, lr
 801b5aa:	ec51 0b10 	vmov	r0, r1, d0
 801b5ae:	ee11 8a10 	vmov	r8, s2
 801b5b2:	d80a      	bhi.n	801b5ca <__ieee754_atan2+0x3a>
 801b5b4:	4244      	negs	r4, r0
 801b5b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b5ba:	4304      	orrs	r4, r0
 801b5bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b5c0:	4574      	cmp	r4, lr
 801b5c2:	468c      	mov	ip, r1
 801b5c4:	ee10 9a10 	vmov	r9, s0
 801b5c8:	d907      	bls.n	801b5da <__ieee754_atan2+0x4a>
 801b5ca:	4632      	mov	r2, r6
 801b5cc:	463b      	mov	r3, r7
 801b5ce:	f7e4 fe6d 	bl	80002ac <__adddf3>
 801b5d2:	ec41 0b10 	vmov	d0, r0, r1
 801b5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b5de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b5e2:	4334      	orrs	r4, r6
 801b5e4:	d103      	bne.n	801b5ee <__ieee754_atan2+0x5e>
 801b5e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5ea:	f001 be3d 	b.w	801d268 <atan>
 801b5ee:	17bc      	asrs	r4, r7, #30
 801b5f0:	f004 0402 	and.w	r4, r4, #2
 801b5f4:	ea53 0909 	orrs.w	r9, r3, r9
 801b5f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b5fc:	d107      	bne.n	801b60e <__ieee754_atan2+0x7e>
 801b5fe:	2c02      	cmp	r4, #2
 801b600:	d073      	beq.n	801b6ea <__ieee754_atan2+0x15a>
 801b602:	2c03      	cmp	r4, #3
 801b604:	d1e5      	bne.n	801b5d2 <__ieee754_atan2+0x42>
 801b606:	a13e      	add	r1, pc, #248	; (adr r1, 801b700 <__ieee754_atan2+0x170>)
 801b608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b60c:	e7e1      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b60e:	ea52 0808 	orrs.w	r8, r2, r8
 801b612:	d106      	bne.n	801b622 <__ieee754_atan2+0x92>
 801b614:	f1bc 0f00 	cmp.w	ip, #0
 801b618:	da6b      	bge.n	801b6f2 <__ieee754_atan2+0x162>
 801b61a:	a13b      	add	r1, pc, #236	; (adr r1, 801b708 <__ieee754_atan2+0x178>)
 801b61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b620:	e7d7      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b622:	4572      	cmp	r2, lr
 801b624:	d120      	bne.n	801b668 <__ieee754_atan2+0xd8>
 801b626:	4293      	cmp	r3, r2
 801b628:	d111      	bne.n	801b64e <__ieee754_atan2+0xbe>
 801b62a:	2c02      	cmp	r4, #2
 801b62c:	d007      	beq.n	801b63e <__ieee754_atan2+0xae>
 801b62e:	2c03      	cmp	r4, #3
 801b630:	d009      	beq.n	801b646 <__ieee754_atan2+0xb6>
 801b632:	2c01      	cmp	r4, #1
 801b634:	d155      	bne.n	801b6e2 <__ieee754_atan2+0x152>
 801b636:	a136      	add	r1, pc, #216	; (adr r1, 801b710 <__ieee754_atan2+0x180>)
 801b638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b63c:	e7c9      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b63e:	a136      	add	r1, pc, #216	; (adr r1, 801b718 <__ieee754_atan2+0x188>)
 801b640:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b644:	e7c5      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b646:	a136      	add	r1, pc, #216	; (adr r1, 801b720 <__ieee754_atan2+0x190>)
 801b648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b64c:	e7c1      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b64e:	2c02      	cmp	r4, #2
 801b650:	d04b      	beq.n	801b6ea <__ieee754_atan2+0x15a>
 801b652:	2c03      	cmp	r4, #3
 801b654:	d0d7      	beq.n	801b606 <__ieee754_atan2+0x76>
 801b656:	2c01      	cmp	r4, #1
 801b658:	f04f 0000 	mov.w	r0, #0
 801b65c:	d102      	bne.n	801b664 <__ieee754_atan2+0xd4>
 801b65e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b662:	e7b6      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b664:	2100      	movs	r1, #0
 801b666:	e7b4      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b668:	4573      	cmp	r3, lr
 801b66a:	d0d3      	beq.n	801b614 <__ieee754_atan2+0x84>
 801b66c:	1a9b      	subs	r3, r3, r2
 801b66e:	151b      	asrs	r3, r3, #20
 801b670:	2b3c      	cmp	r3, #60	; 0x3c
 801b672:	dc1e      	bgt.n	801b6b2 <__ieee754_atan2+0x122>
 801b674:	2f00      	cmp	r7, #0
 801b676:	da01      	bge.n	801b67c <__ieee754_atan2+0xec>
 801b678:	333c      	adds	r3, #60	; 0x3c
 801b67a:	db1e      	blt.n	801b6ba <__ieee754_atan2+0x12a>
 801b67c:	4632      	mov	r2, r6
 801b67e:	463b      	mov	r3, r7
 801b680:	f7e5 f8f4 	bl	800086c <__aeabi_ddiv>
 801b684:	ec41 0b10 	vmov	d0, r0, r1
 801b688:	f001 ff8e 	bl	801d5a8 <fabs>
 801b68c:	f001 fdec 	bl	801d268 <atan>
 801b690:	ec51 0b10 	vmov	r0, r1, d0
 801b694:	2c01      	cmp	r4, #1
 801b696:	d013      	beq.n	801b6c0 <__ieee754_atan2+0x130>
 801b698:	2c02      	cmp	r4, #2
 801b69a:	d015      	beq.n	801b6c8 <__ieee754_atan2+0x138>
 801b69c:	2c00      	cmp	r4, #0
 801b69e:	d098      	beq.n	801b5d2 <__ieee754_atan2+0x42>
 801b6a0:	a321      	add	r3, pc, #132	; (adr r3, 801b728 <__ieee754_atan2+0x198>)
 801b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a6:	f7e4 fdff 	bl	80002a8 <__aeabi_dsub>
 801b6aa:	a321      	add	r3, pc, #132	; (adr r3, 801b730 <__ieee754_atan2+0x1a0>)
 801b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b0:	e014      	b.n	801b6dc <__ieee754_atan2+0x14c>
 801b6b2:	a121      	add	r1, pc, #132	; (adr r1, 801b738 <__ieee754_atan2+0x1a8>)
 801b6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6b8:	e7ec      	b.n	801b694 <__ieee754_atan2+0x104>
 801b6ba:	2000      	movs	r0, #0
 801b6bc:	2100      	movs	r1, #0
 801b6be:	e7e9      	b.n	801b694 <__ieee754_atan2+0x104>
 801b6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6c4:	4619      	mov	r1, r3
 801b6c6:	e784      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b6c8:	a317      	add	r3, pc, #92	; (adr r3, 801b728 <__ieee754_atan2+0x198>)
 801b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ce:	f7e4 fdeb 	bl	80002a8 <__aeabi_dsub>
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	460b      	mov	r3, r1
 801b6d6:	a116      	add	r1, pc, #88	; (adr r1, 801b730 <__ieee754_atan2+0x1a0>)
 801b6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6dc:	f7e4 fde4 	bl	80002a8 <__aeabi_dsub>
 801b6e0:	e777      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b6e2:	a117      	add	r1, pc, #92	; (adr r1, 801b740 <__ieee754_atan2+0x1b0>)
 801b6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6e8:	e773      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b6ea:	a111      	add	r1, pc, #68	; (adr r1, 801b730 <__ieee754_atan2+0x1a0>)
 801b6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6f0:	e76f      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b6f2:	a111      	add	r1, pc, #68	; (adr r1, 801b738 <__ieee754_atan2+0x1a8>)
 801b6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6f8:	e76b      	b.n	801b5d2 <__ieee754_atan2+0x42>
 801b6fa:	bf00      	nop
 801b6fc:	f3af 8000 	nop.w
 801b700:	54442d18 	.word	0x54442d18
 801b704:	c00921fb 	.word	0xc00921fb
 801b708:	54442d18 	.word	0x54442d18
 801b70c:	bff921fb 	.word	0xbff921fb
 801b710:	54442d18 	.word	0x54442d18
 801b714:	bfe921fb 	.word	0xbfe921fb
 801b718:	7f3321d2 	.word	0x7f3321d2
 801b71c:	4002d97c 	.word	0x4002d97c
 801b720:	7f3321d2 	.word	0x7f3321d2
 801b724:	c002d97c 	.word	0xc002d97c
 801b728:	33145c07 	.word	0x33145c07
 801b72c:	3ca1a626 	.word	0x3ca1a626
 801b730:	54442d18 	.word	0x54442d18
 801b734:	400921fb 	.word	0x400921fb
 801b738:	54442d18 	.word	0x54442d18
 801b73c:	3ff921fb 	.word	0x3ff921fb
 801b740:	54442d18 	.word	0x54442d18
 801b744:	3fe921fb 	.word	0x3fe921fb
 801b748:	7ff00000 	.word	0x7ff00000

0801b74c <__ieee754_fmod>:
 801b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b750:	ec53 2b11 	vmov	r2, r3, d1
 801b754:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801b758:	ea5e 0402 	orrs.w	r4, lr, r2
 801b75c:	ec51 0b10 	vmov	r0, r1, d0
 801b760:	461e      	mov	r6, r3
 801b762:	ee11 5a10 	vmov	r5, s2
 801b766:	4694      	mov	ip, r2
 801b768:	d00c      	beq.n	801b784 <__ieee754_fmod+0x38>
 801b76a:	4c7a      	ldr	r4, [pc, #488]	; (801b954 <__ieee754_fmod+0x208>)
 801b76c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b770:	45a0      	cmp	r8, r4
 801b772:	4689      	mov	r9, r1
 801b774:	dc06      	bgt.n	801b784 <__ieee754_fmod+0x38>
 801b776:	4254      	negs	r4, r2
 801b778:	4314      	orrs	r4, r2
 801b77a:	4f77      	ldr	r7, [pc, #476]	; (801b958 <__ieee754_fmod+0x20c>)
 801b77c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801b780:	42bc      	cmp	r4, r7
 801b782:	d909      	bls.n	801b798 <__ieee754_fmod+0x4c>
 801b784:	f7e4 ff48 	bl	8000618 <__aeabi_dmul>
 801b788:	4602      	mov	r2, r0
 801b78a:	460b      	mov	r3, r1
 801b78c:	f7e5 f86e 	bl	800086c <__aeabi_ddiv>
 801b790:	ec41 0b10 	vmov	d0, r0, r1
 801b794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b798:	45f0      	cmp	r8, lr
 801b79a:	ee10 2a10 	vmov	r2, s0
 801b79e:	4607      	mov	r7, r0
 801b7a0:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801b7a4:	dc0a      	bgt.n	801b7bc <__ieee754_fmod+0x70>
 801b7a6:	dbf3      	blt.n	801b790 <__ieee754_fmod+0x44>
 801b7a8:	42a8      	cmp	r0, r5
 801b7aa:	d3f1      	bcc.n	801b790 <__ieee754_fmod+0x44>
 801b7ac:	d106      	bne.n	801b7bc <__ieee754_fmod+0x70>
 801b7ae:	496b      	ldr	r1, [pc, #428]	; (801b95c <__ieee754_fmod+0x210>)
 801b7b0:	0fe4      	lsrs	r4, r4, #31
 801b7b2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b7b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b7ba:	e7e9      	b.n	801b790 <__ieee754_fmod+0x44>
 801b7bc:	4b68      	ldr	r3, [pc, #416]	; (801b960 <__ieee754_fmod+0x214>)
 801b7be:	4598      	cmp	r8, r3
 801b7c0:	dc49      	bgt.n	801b856 <__ieee754_fmod+0x10a>
 801b7c2:	f1b8 0f00 	cmp.w	r8, #0
 801b7c6:	d13d      	bne.n	801b844 <__ieee754_fmod+0xf8>
 801b7c8:	4866      	ldr	r0, [pc, #408]	; (801b964 <__ieee754_fmod+0x218>)
 801b7ca:	4611      	mov	r1, r2
 801b7cc:	2900      	cmp	r1, #0
 801b7ce:	dc36      	bgt.n	801b83e <__ieee754_fmod+0xf2>
 801b7d0:	459e      	cmp	lr, r3
 801b7d2:	dc51      	bgt.n	801b878 <__ieee754_fmod+0x12c>
 801b7d4:	f1be 0f00 	cmp.w	lr, #0
 801b7d8:	d145      	bne.n	801b866 <__ieee754_fmod+0x11a>
 801b7da:	4b62      	ldr	r3, [pc, #392]	; (801b964 <__ieee754_fmod+0x218>)
 801b7dc:	4629      	mov	r1, r5
 801b7de:	2900      	cmp	r1, #0
 801b7e0:	dc3e      	bgt.n	801b860 <__ieee754_fmod+0x114>
 801b7e2:	4961      	ldr	r1, [pc, #388]	; (801b968 <__ieee754_fmod+0x21c>)
 801b7e4:	4288      	cmp	r0, r1
 801b7e6:	db4c      	blt.n	801b882 <__ieee754_fmod+0x136>
 801b7e8:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801b7ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b7f0:	4a5d      	ldr	r2, [pc, #372]	; (801b968 <__ieee754_fmod+0x21c>)
 801b7f2:	4293      	cmp	r3, r2
 801b7f4:	db59      	blt.n	801b8aa <__ieee754_fmod+0x15e>
 801b7f6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b7fa:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b7fe:	1ac0      	subs	r0, r0, r3
 801b800:	1b8a      	subs	r2, r1, r6
 801b802:	eba7 050c 	sub.w	r5, r7, ip
 801b806:	2800      	cmp	r0, #0
 801b808:	d166      	bne.n	801b8d8 <__ieee754_fmod+0x18c>
 801b80a:	4567      	cmp	r7, ip
 801b80c:	bf38      	it	cc
 801b80e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b812:	2a00      	cmp	r2, #0
 801b814:	bfbc      	itt	lt
 801b816:	463d      	movlt	r5, r7
 801b818:	460a      	movlt	r2, r1
 801b81a:	ea52 0105 	orrs.w	r1, r2, r5
 801b81e:	d0c6      	beq.n	801b7ae <__ieee754_fmod+0x62>
 801b820:	494f      	ldr	r1, [pc, #316]	; (801b960 <__ieee754_fmod+0x214>)
 801b822:	428a      	cmp	r2, r1
 801b824:	dd6d      	ble.n	801b902 <__ieee754_fmod+0x1b6>
 801b826:	4950      	ldr	r1, [pc, #320]	; (801b968 <__ieee754_fmod+0x21c>)
 801b828:	428b      	cmp	r3, r1
 801b82a:	db70      	blt.n	801b90e <__ieee754_fmod+0x1c2>
 801b82c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801b830:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801b834:	4314      	orrs	r4, r2
 801b836:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801b83a:	4628      	mov	r0, r5
 801b83c:	e7a8      	b.n	801b790 <__ieee754_fmod+0x44>
 801b83e:	3801      	subs	r0, #1
 801b840:	0049      	lsls	r1, r1, #1
 801b842:	e7c3      	b.n	801b7cc <__ieee754_fmod+0x80>
 801b844:	4848      	ldr	r0, [pc, #288]	; (801b968 <__ieee754_fmod+0x21c>)
 801b846:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801b84a:	0049      	lsls	r1, r1, #1
 801b84c:	2900      	cmp	r1, #0
 801b84e:	f100 30ff 	add.w	r0, r0, #4294967295
 801b852:	dcfa      	bgt.n	801b84a <__ieee754_fmod+0xfe>
 801b854:	e7bc      	b.n	801b7d0 <__ieee754_fmod+0x84>
 801b856:	ea4f 5028 	mov.w	r0, r8, asr #20
 801b85a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b85e:	e7b7      	b.n	801b7d0 <__ieee754_fmod+0x84>
 801b860:	3b01      	subs	r3, #1
 801b862:	0049      	lsls	r1, r1, #1
 801b864:	e7bb      	b.n	801b7de <__ieee754_fmod+0x92>
 801b866:	4b40      	ldr	r3, [pc, #256]	; (801b968 <__ieee754_fmod+0x21c>)
 801b868:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801b86c:	0049      	lsls	r1, r1, #1
 801b86e:	2900      	cmp	r1, #0
 801b870:	f103 33ff 	add.w	r3, r3, #4294967295
 801b874:	dcfa      	bgt.n	801b86c <__ieee754_fmod+0x120>
 801b876:	e7b4      	b.n	801b7e2 <__ieee754_fmod+0x96>
 801b878:	ea4f 532e 	mov.w	r3, lr, asr #20
 801b87c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b880:	e7af      	b.n	801b7e2 <__ieee754_fmod+0x96>
 801b882:	1a0f      	subs	r7, r1, r0
 801b884:	2f1f      	cmp	r7, #31
 801b886:	dc0a      	bgt.n	801b89e <__ieee754_fmod+0x152>
 801b888:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801b88c:	fa08 f807 	lsl.w	r8, r8, r7
 801b890:	fa22 f101 	lsr.w	r1, r2, r1
 801b894:	ea41 0108 	orr.w	r1, r1, r8
 801b898:	fa02 f707 	lsl.w	r7, r2, r7
 801b89c:	e7a8      	b.n	801b7f0 <__ieee754_fmod+0xa4>
 801b89e:	4933      	ldr	r1, [pc, #204]	; (801b96c <__ieee754_fmod+0x220>)
 801b8a0:	1a09      	subs	r1, r1, r0
 801b8a2:	fa02 f101 	lsl.w	r1, r2, r1
 801b8a6:	2700      	movs	r7, #0
 801b8a8:	e7a2      	b.n	801b7f0 <__ieee754_fmod+0xa4>
 801b8aa:	eba2 0c03 	sub.w	ip, r2, r3
 801b8ae:	f1bc 0f1f 	cmp.w	ip, #31
 801b8b2:	dc0a      	bgt.n	801b8ca <__ieee754_fmod+0x17e>
 801b8b4:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801b8b8:	fa0e fe0c 	lsl.w	lr, lr, ip
 801b8bc:	fa25 f606 	lsr.w	r6, r5, r6
 801b8c0:	ea46 060e 	orr.w	r6, r6, lr
 801b8c4:	fa05 fc0c 	lsl.w	ip, r5, ip
 801b8c8:	e799      	b.n	801b7fe <__ieee754_fmod+0xb2>
 801b8ca:	4e28      	ldr	r6, [pc, #160]	; (801b96c <__ieee754_fmod+0x220>)
 801b8cc:	1af6      	subs	r6, r6, r3
 801b8ce:	fa05 f606 	lsl.w	r6, r5, r6
 801b8d2:	f04f 0c00 	mov.w	ip, #0
 801b8d6:	e792      	b.n	801b7fe <__ieee754_fmod+0xb2>
 801b8d8:	4567      	cmp	r7, ip
 801b8da:	bf38      	it	cc
 801b8dc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b8e0:	2a00      	cmp	r2, #0
 801b8e2:	da05      	bge.n	801b8f0 <__ieee754_fmod+0x1a4>
 801b8e4:	0ffa      	lsrs	r2, r7, #31
 801b8e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b8ea:	007f      	lsls	r7, r7, #1
 801b8ec:	3801      	subs	r0, #1
 801b8ee:	e787      	b.n	801b800 <__ieee754_fmod+0xb4>
 801b8f0:	ea52 0105 	orrs.w	r1, r2, r5
 801b8f4:	f43f af5b 	beq.w	801b7ae <__ieee754_fmod+0x62>
 801b8f8:	0fe9      	lsrs	r1, r5, #31
 801b8fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801b8fe:	006f      	lsls	r7, r5, #1
 801b900:	e7f4      	b.n	801b8ec <__ieee754_fmod+0x1a0>
 801b902:	0fe8      	lsrs	r0, r5, #31
 801b904:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b908:	006d      	lsls	r5, r5, #1
 801b90a:	3b01      	subs	r3, #1
 801b90c:	e789      	b.n	801b822 <__ieee754_fmod+0xd6>
 801b90e:	1ac9      	subs	r1, r1, r3
 801b910:	2914      	cmp	r1, #20
 801b912:	dc0a      	bgt.n	801b92a <__ieee754_fmod+0x1de>
 801b914:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b918:	fa02 f303 	lsl.w	r3, r2, r3
 801b91c:	40cd      	lsrs	r5, r1
 801b91e:	432b      	orrs	r3, r5
 801b920:	410a      	asrs	r2, r1
 801b922:	ea42 0104 	orr.w	r1, r2, r4
 801b926:	4618      	mov	r0, r3
 801b928:	e732      	b.n	801b790 <__ieee754_fmod+0x44>
 801b92a:	291f      	cmp	r1, #31
 801b92c:	dc07      	bgt.n	801b93e <__ieee754_fmod+0x1f2>
 801b92e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b932:	40cd      	lsrs	r5, r1
 801b934:	fa02 f303 	lsl.w	r3, r2, r3
 801b938:	432b      	orrs	r3, r5
 801b93a:	4622      	mov	r2, r4
 801b93c:	e7f1      	b.n	801b922 <__ieee754_fmod+0x1d6>
 801b93e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801b942:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801b946:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801b94a:	33e2      	adds	r3, #226	; 0xe2
 801b94c:	fa42 f303 	asr.w	r3, r2, r3
 801b950:	e7f3      	b.n	801b93a <__ieee754_fmod+0x1ee>
 801b952:	bf00      	nop
 801b954:	7fefffff 	.word	0x7fefffff
 801b958:	7ff00000 	.word	0x7ff00000
 801b95c:	0801e638 	.word	0x0801e638
 801b960:	000fffff 	.word	0x000fffff
 801b964:	fffffbed 	.word	0xfffffbed
 801b968:	fffffc02 	.word	0xfffffc02
 801b96c:	fffffbe2 	.word	0xfffffbe2

0801b970 <__ieee754_pow>:
 801b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b974:	b091      	sub	sp, #68	; 0x44
 801b976:	ed8d 1b00 	vstr	d1, [sp]
 801b97a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b97e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b982:	ea58 0302 	orrs.w	r3, r8, r2
 801b986:	ec57 6b10 	vmov	r6, r7, d0
 801b98a:	f000 84be 	beq.w	801c30a <__ieee754_pow+0x99a>
 801b98e:	4b7a      	ldr	r3, [pc, #488]	; (801bb78 <__ieee754_pow+0x208>)
 801b990:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b994:	429c      	cmp	r4, r3
 801b996:	463d      	mov	r5, r7
 801b998:	ee10 aa10 	vmov	sl, s0
 801b99c:	dc09      	bgt.n	801b9b2 <__ieee754_pow+0x42>
 801b99e:	d103      	bne.n	801b9a8 <__ieee754_pow+0x38>
 801b9a0:	b93e      	cbnz	r6, 801b9b2 <__ieee754_pow+0x42>
 801b9a2:	45a0      	cmp	r8, r4
 801b9a4:	dc0d      	bgt.n	801b9c2 <__ieee754_pow+0x52>
 801b9a6:	e001      	b.n	801b9ac <__ieee754_pow+0x3c>
 801b9a8:	4598      	cmp	r8, r3
 801b9aa:	dc02      	bgt.n	801b9b2 <__ieee754_pow+0x42>
 801b9ac:	4598      	cmp	r8, r3
 801b9ae:	d10e      	bne.n	801b9ce <__ieee754_pow+0x5e>
 801b9b0:	b16a      	cbz	r2, 801b9ce <__ieee754_pow+0x5e>
 801b9b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b9b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b9ba:	ea54 030a 	orrs.w	r3, r4, sl
 801b9be:	f000 84a4 	beq.w	801c30a <__ieee754_pow+0x99a>
 801b9c2:	486e      	ldr	r0, [pc, #440]	; (801bb7c <__ieee754_pow+0x20c>)
 801b9c4:	b011      	add	sp, #68	; 0x44
 801b9c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ca:	f001 be89 	b.w	801d6e0 <nan>
 801b9ce:	2d00      	cmp	r5, #0
 801b9d0:	da53      	bge.n	801ba7a <__ieee754_pow+0x10a>
 801b9d2:	4b6b      	ldr	r3, [pc, #428]	; (801bb80 <__ieee754_pow+0x210>)
 801b9d4:	4598      	cmp	r8, r3
 801b9d6:	dc4d      	bgt.n	801ba74 <__ieee754_pow+0x104>
 801b9d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b9dc:	4598      	cmp	r8, r3
 801b9de:	dd4c      	ble.n	801ba7a <__ieee754_pow+0x10a>
 801b9e0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b9e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b9e8:	2b14      	cmp	r3, #20
 801b9ea:	dd26      	ble.n	801ba3a <__ieee754_pow+0xca>
 801b9ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b9f0:	fa22 f103 	lsr.w	r1, r2, r3
 801b9f4:	fa01 f303 	lsl.w	r3, r1, r3
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	d13e      	bne.n	801ba7a <__ieee754_pow+0x10a>
 801b9fc:	f001 0101 	and.w	r1, r1, #1
 801ba00:	f1c1 0b02 	rsb	fp, r1, #2
 801ba04:	2a00      	cmp	r2, #0
 801ba06:	d15b      	bne.n	801bac0 <__ieee754_pow+0x150>
 801ba08:	4b5b      	ldr	r3, [pc, #364]	; (801bb78 <__ieee754_pow+0x208>)
 801ba0a:	4598      	cmp	r8, r3
 801ba0c:	d124      	bne.n	801ba58 <__ieee754_pow+0xe8>
 801ba0e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ba12:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ba16:	ea53 030a 	orrs.w	r3, r3, sl
 801ba1a:	f000 8476 	beq.w	801c30a <__ieee754_pow+0x99a>
 801ba1e:	4b59      	ldr	r3, [pc, #356]	; (801bb84 <__ieee754_pow+0x214>)
 801ba20:	429c      	cmp	r4, r3
 801ba22:	dd2d      	ble.n	801ba80 <__ieee754_pow+0x110>
 801ba24:	f1b9 0f00 	cmp.w	r9, #0
 801ba28:	f280 8473 	bge.w	801c312 <__ieee754_pow+0x9a2>
 801ba2c:	2000      	movs	r0, #0
 801ba2e:	2100      	movs	r1, #0
 801ba30:	ec41 0b10 	vmov	d0, r0, r1
 801ba34:	b011      	add	sp, #68	; 0x44
 801ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba3a:	2a00      	cmp	r2, #0
 801ba3c:	d13e      	bne.n	801babc <__ieee754_pow+0x14c>
 801ba3e:	f1c3 0314 	rsb	r3, r3, #20
 801ba42:	fa48 f103 	asr.w	r1, r8, r3
 801ba46:	fa01 f303 	lsl.w	r3, r1, r3
 801ba4a:	4543      	cmp	r3, r8
 801ba4c:	f040 8469 	bne.w	801c322 <__ieee754_pow+0x9b2>
 801ba50:	f001 0101 	and.w	r1, r1, #1
 801ba54:	f1c1 0b02 	rsb	fp, r1, #2
 801ba58:	4b4b      	ldr	r3, [pc, #300]	; (801bb88 <__ieee754_pow+0x218>)
 801ba5a:	4598      	cmp	r8, r3
 801ba5c:	d118      	bne.n	801ba90 <__ieee754_pow+0x120>
 801ba5e:	f1b9 0f00 	cmp.w	r9, #0
 801ba62:	f280 845a 	bge.w	801c31a <__ieee754_pow+0x9aa>
 801ba66:	4948      	ldr	r1, [pc, #288]	; (801bb88 <__ieee754_pow+0x218>)
 801ba68:	4632      	mov	r2, r6
 801ba6a:	463b      	mov	r3, r7
 801ba6c:	2000      	movs	r0, #0
 801ba6e:	f7e4 fefd 	bl	800086c <__aeabi_ddiv>
 801ba72:	e7dd      	b.n	801ba30 <__ieee754_pow+0xc0>
 801ba74:	f04f 0b02 	mov.w	fp, #2
 801ba78:	e7c4      	b.n	801ba04 <__ieee754_pow+0x94>
 801ba7a:	f04f 0b00 	mov.w	fp, #0
 801ba7e:	e7c1      	b.n	801ba04 <__ieee754_pow+0x94>
 801ba80:	f1b9 0f00 	cmp.w	r9, #0
 801ba84:	dad2      	bge.n	801ba2c <__ieee754_pow+0xbc>
 801ba86:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ba8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ba8e:	e7cf      	b.n	801ba30 <__ieee754_pow+0xc0>
 801ba90:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ba94:	d106      	bne.n	801baa4 <__ieee754_pow+0x134>
 801ba96:	4632      	mov	r2, r6
 801ba98:	463b      	mov	r3, r7
 801ba9a:	4610      	mov	r0, r2
 801ba9c:	4619      	mov	r1, r3
 801ba9e:	f7e4 fdbb 	bl	8000618 <__aeabi_dmul>
 801baa2:	e7c5      	b.n	801ba30 <__ieee754_pow+0xc0>
 801baa4:	4b39      	ldr	r3, [pc, #228]	; (801bb8c <__ieee754_pow+0x21c>)
 801baa6:	4599      	cmp	r9, r3
 801baa8:	d10a      	bne.n	801bac0 <__ieee754_pow+0x150>
 801baaa:	2d00      	cmp	r5, #0
 801baac:	db08      	blt.n	801bac0 <__ieee754_pow+0x150>
 801baae:	ec47 6b10 	vmov	d0, r6, r7
 801bab2:	b011      	add	sp, #68	; 0x44
 801bab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bab8:	f000 be5c 	b.w	801c774 <__ieee754_sqrt>
 801babc:	f04f 0b00 	mov.w	fp, #0
 801bac0:	ec47 6b10 	vmov	d0, r6, r7
 801bac4:	f001 fd70 	bl	801d5a8 <fabs>
 801bac8:	ec51 0b10 	vmov	r0, r1, d0
 801bacc:	f1ba 0f00 	cmp.w	sl, #0
 801bad0:	d127      	bne.n	801bb22 <__ieee754_pow+0x1b2>
 801bad2:	b124      	cbz	r4, 801bade <__ieee754_pow+0x16e>
 801bad4:	4b2c      	ldr	r3, [pc, #176]	; (801bb88 <__ieee754_pow+0x218>)
 801bad6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801bada:	429a      	cmp	r2, r3
 801badc:	d121      	bne.n	801bb22 <__ieee754_pow+0x1b2>
 801bade:	f1b9 0f00 	cmp.w	r9, #0
 801bae2:	da05      	bge.n	801baf0 <__ieee754_pow+0x180>
 801bae4:	4602      	mov	r2, r0
 801bae6:	460b      	mov	r3, r1
 801bae8:	2000      	movs	r0, #0
 801baea:	4927      	ldr	r1, [pc, #156]	; (801bb88 <__ieee754_pow+0x218>)
 801baec:	f7e4 febe 	bl	800086c <__aeabi_ddiv>
 801baf0:	2d00      	cmp	r5, #0
 801baf2:	da9d      	bge.n	801ba30 <__ieee754_pow+0xc0>
 801baf4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801baf8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bafc:	ea54 030b 	orrs.w	r3, r4, fp
 801bb00:	d108      	bne.n	801bb14 <__ieee754_pow+0x1a4>
 801bb02:	4602      	mov	r2, r0
 801bb04:	460b      	mov	r3, r1
 801bb06:	4610      	mov	r0, r2
 801bb08:	4619      	mov	r1, r3
 801bb0a:	f7e4 fbcd 	bl	80002a8 <__aeabi_dsub>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	460b      	mov	r3, r1
 801bb12:	e7ac      	b.n	801ba6e <__ieee754_pow+0xfe>
 801bb14:	f1bb 0f01 	cmp.w	fp, #1
 801bb18:	d18a      	bne.n	801ba30 <__ieee754_pow+0xc0>
 801bb1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb1e:	4619      	mov	r1, r3
 801bb20:	e786      	b.n	801ba30 <__ieee754_pow+0xc0>
 801bb22:	0fed      	lsrs	r5, r5, #31
 801bb24:	1e6b      	subs	r3, r5, #1
 801bb26:	930d      	str	r3, [sp, #52]	; 0x34
 801bb28:	ea5b 0303 	orrs.w	r3, fp, r3
 801bb2c:	d102      	bne.n	801bb34 <__ieee754_pow+0x1c4>
 801bb2e:	4632      	mov	r2, r6
 801bb30:	463b      	mov	r3, r7
 801bb32:	e7e8      	b.n	801bb06 <__ieee754_pow+0x196>
 801bb34:	4b16      	ldr	r3, [pc, #88]	; (801bb90 <__ieee754_pow+0x220>)
 801bb36:	4598      	cmp	r8, r3
 801bb38:	f340 80fe 	ble.w	801bd38 <__ieee754_pow+0x3c8>
 801bb3c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801bb40:	4598      	cmp	r8, r3
 801bb42:	dd0a      	ble.n	801bb5a <__ieee754_pow+0x1ea>
 801bb44:	4b0f      	ldr	r3, [pc, #60]	; (801bb84 <__ieee754_pow+0x214>)
 801bb46:	429c      	cmp	r4, r3
 801bb48:	dc0d      	bgt.n	801bb66 <__ieee754_pow+0x1f6>
 801bb4a:	f1b9 0f00 	cmp.w	r9, #0
 801bb4e:	f6bf af6d 	bge.w	801ba2c <__ieee754_pow+0xbc>
 801bb52:	a307      	add	r3, pc, #28	; (adr r3, 801bb70 <__ieee754_pow+0x200>)
 801bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb58:	e79f      	b.n	801ba9a <__ieee754_pow+0x12a>
 801bb5a:	4b0e      	ldr	r3, [pc, #56]	; (801bb94 <__ieee754_pow+0x224>)
 801bb5c:	429c      	cmp	r4, r3
 801bb5e:	ddf4      	ble.n	801bb4a <__ieee754_pow+0x1da>
 801bb60:	4b09      	ldr	r3, [pc, #36]	; (801bb88 <__ieee754_pow+0x218>)
 801bb62:	429c      	cmp	r4, r3
 801bb64:	dd18      	ble.n	801bb98 <__ieee754_pow+0x228>
 801bb66:	f1b9 0f00 	cmp.w	r9, #0
 801bb6a:	dcf2      	bgt.n	801bb52 <__ieee754_pow+0x1e2>
 801bb6c:	e75e      	b.n	801ba2c <__ieee754_pow+0xbc>
 801bb6e:	bf00      	nop
 801bb70:	8800759c 	.word	0x8800759c
 801bb74:	7e37e43c 	.word	0x7e37e43c
 801bb78:	7ff00000 	.word	0x7ff00000
 801bb7c:	0801e511 	.word	0x0801e511
 801bb80:	433fffff 	.word	0x433fffff
 801bb84:	3fefffff 	.word	0x3fefffff
 801bb88:	3ff00000 	.word	0x3ff00000
 801bb8c:	3fe00000 	.word	0x3fe00000
 801bb90:	41e00000 	.word	0x41e00000
 801bb94:	3feffffe 	.word	0x3feffffe
 801bb98:	2200      	movs	r2, #0
 801bb9a:	4b63      	ldr	r3, [pc, #396]	; (801bd28 <__ieee754_pow+0x3b8>)
 801bb9c:	f7e4 fb84 	bl	80002a8 <__aeabi_dsub>
 801bba0:	a355      	add	r3, pc, #340	; (adr r3, 801bcf8 <__ieee754_pow+0x388>)
 801bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba6:	4604      	mov	r4, r0
 801bba8:	460d      	mov	r5, r1
 801bbaa:	f7e4 fd35 	bl	8000618 <__aeabi_dmul>
 801bbae:	a354      	add	r3, pc, #336	; (adr r3, 801bd00 <__ieee754_pow+0x390>)
 801bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb4:	4606      	mov	r6, r0
 801bbb6:	460f      	mov	r7, r1
 801bbb8:	4620      	mov	r0, r4
 801bbba:	4629      	mov	r1, r5
 801bbbc:	f7e4 fd2c 	bl	8000618 <__aeabi_dmul>
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbc6:	4b59      	ldr	r3, [pc, #356]	; (801bd2c <__ieee754_pow+0x3bc>)
 801bbc8:	4620      	mov	r0, r4
 801bbca:	4629      	mov	r1, r5
 801bbcc:	f7e4 fd24 	bl	8000618 <__aeabi_dmul>
 801bbd0:	4602      	mov	r2, r0
 801bbd2:	460b      	mov	r3, r1
 801bbd4:	a14c      	add	r1, pc, #304	; (adr r1, 801bd08 <__ieee754_pow+0x398>)
 801bbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbda:	f7e4 fb65 	bl	80002a8 <__aeabi_dsub>
 801bbde:	4622      	mov	r2, r4
 801bbe0:	462b      	mov	r3, r5
 801bbe2:	f7e4 fd19 	bl	8000618 <__aeabi_dmul>
 801bbe6:	4602      	mov	r2, r0
 801bbe8:	460b      	mov	r3, r1
 801bbea:	2000      	movs	r0, #0
 801bbec:	4950      	ldr	r1, [pc, #320]	; (801bd30 <__ieee754_pow+0x3c0>)
 801bbee:	f7e4 fb5b 	bl	80002a8 <__aeabi_dsub>
 801bbf2:	4622      	mov	r2, r4
 801bbf4:	462b      	mov	r3, r5
 801bbf6:	4680      	mov	r8, r0
 801bbf8:	4689      	mov	r9, r1
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	4629      	mov	r1, r5
 801bbfe:	f7e4 fd0b 	bl	8000618 <__aeabi_dmul>
 801bc02:	4602      	mov	r2, r0
 801bc04:	460b      	mov	r3, r1
 801bc06:	4640      	mov	r0, r8
 801bc08:	4649      	mov	r1, r9
 801bc0a:	f7e4 fd05 	bl	8000618 <__aeabi_dmul>
 801bc0e:	a340      	add	r3, pc, #256	; (adr r3, 801bd10 <__ieee754_pow+0x3a0>)
 801bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc14:	f7e4 fd00 	bl	8000618 <__aeabi_dmul>
 801bc18:	4602      	mov	r2, r0
 801bc1a:	460b      	mov	r3, r1
 801bc1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc20:	f7e4 fb42 	bl	80002a8 <__aeabi_dsub>
 801bc24:	4602      	mov	r2, r0
 801bc26:	460b      	mov	r3, r1
 801bc28:	4604      	mov	r4, r0
 801bc2a:	460d      	mov	r5, r1
 801bc2c:	4630      	mov	r0, r6
 801bc2e:	4639      	mov	r1, r7
 801bc30:	f7e4 fb3c 	bl	80002ac <__adddf3>
 801bc34:	2000      	movs	r0, #0
 801bc36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc3a:	4632      	mov	r2, r6
 801bc3c:	463b      	mov	r3, r7
 801bc3e:	f7e4 fb33 	bl	80002a8 <__aeabi_dsub>
 801bc42:	4602      	mov	r2, r0
 801bc44:	460b      	mov	r3, r1
 801bc46:	4620      	mov	r0, r4
 801bc48:	4629      	mov	r1, r5
 801bc4a:	f7e4 fb2d 	bl	80002a8 <__aeabi_dsub>
 801bc4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc50:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bc54:	4313      	orrs	r3, r2
 801bc56:	4606      	mov	r6, r0
 801bc58:	460f      	mov	r7, r1
 801bc5a:	f040 81eb 	bne.w	801c034 <__ieee754_pow+0x6c4>
 801bc5e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bd18 <__ieee754_pow+0x3a8>
 801bc62:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bc66:	2400      	movs	r4, #0
 801bc68:	4622      	mov	r2, r4
 801bc6a:	462b      	mov	r3, r5
 801bc6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bc70:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bc74:	f7e4 fb18 	bl	80002a8 <__aeabi_dsub>
 801bc78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc7c:	f7e4 fccc 	bl	8000618 <__aeabi_dmul>
 801bc80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc84:	4680      	mov	r8, r0
 801bc86:	4689      	mov	r9, r1
 801bc88:	4630      	mov	r0, r6
 801bc8a:	4639      	mov	r1, r7
 801bc8c:	f7e4 fcc4 	bl	8000618 <__aeabi_dmul>
 801bc90:	4602      	mov	r2, r0
 801bc92:	460b      	mov	r3, r1
 801bc94:	4640      	mov	r0, r8
 801bc96:	4649      	mov	r1, r9
 801bc98:	f7e4 fb08 	bl	80002ac <__adddf3>
 801bc9c:	4622      	mov	r2, r4
 801bc9e:	462b      	mov	r3, r5
 801bca0:	4680      	mov	r8, r0
 801bca2:	4689      	mov	r9, r1
 801bca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bca8:	f7e4 fcb6 	bl	8000618 <__aeabi_dmul>
 801bcac:	460b      	mov	r3, r1
 801bcae:	4604      	mov	r4, r0
 801bcb0:	460d      	mov	r5, r1
 801bcb2:	4602      	mov	r2, r0
 801bcb4:	4649      	mov	r1, r9
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	e9cd 4500 	strd	r4, r5, [sp]
 801bcbc:	f7e4 faf6 	bl	80002ac <__adddf3>
 801bcc0:	4b1c      	ldr	r3, [pc, #112]	; (801bd34 <__ieee754_pow+0x3c4>)
 801bcc2:	4299      	cmp	r1, r3
 801bcc4:	4606      	mov	r6, r0
 801bcc6:	460f      	mov	r7, r1
 801bcc8:	468b      	mov	fp, r1
 801bcca:	f340 82f7 	ble.w	801c2bc <__ieee754_pow+0x94c>
 801bcce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801bcd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801bcd6:	4303      	orrs	r3, r0
 801bcd8:	f000 81ea 	beq.w	801c0b0 <__ieee754_pow+0x740>
 801bcdc:	a310      	add	r3, pc, #64	; (adr r3, 801bd20 <__ieee754_pow+0x3b0>)
 801bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bce6:	f7e4 fc97 	bl	8000618 <__aeabi_dmul>
 801bcea:	a30d      	add	r3, pc, #52	; (adr r3, 801bd20 <__ieee754_pow+0x3b0>)
 801bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf0:	e6d5      	b.n	801ba9e <__ieee754_pow+0x12e>
 801bcf2:	bf00      	nop
 801bcf4:	f3af 8000 	nop.w
 801bcf8:	60000000 	.word	0x60000000
 801bcfc:	3ff71547 	.word	0x3ff71547
 801bd00:	f85ddf44 	.word	0xf85ddf44
 801bd04:	3e54ae0b 	.word	0x3e54ae0b
 801bd08:	55555555 	.word	0x55555555
 801bd0c:	3fd55555 	.word	0x3fd55555
 801bd10:	652b82fe 	.word	0x652b82fe
 801bd14:	3ff71547 	.word	0x3ff71547
 801bd18:	00000000 	.word	0x00000000
 801bd1c:	bff00000 	.word	0xbff00000
 801bd20:	8800759c 	.word	0x8800759c
 801bd24:	7e37e43c 	.word	0x7e37e43c
 801bd28:	3ff00000 	.word	0x3ff00000
 801bd2c:	3fd00000 	.word	0x3fd00000
 801bd30:	3fe00000 	.word	0x3fe00000
 801bd34:	408fffff 	.word	0x408fffff
 801bd38:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bd3c:	f04f 0200 	mov.w	r2, #0
 801bd40:	da05      	bge.n	801bd4e <__ieee754_pow+0x3de>
 801bd42:	4bd3      	ldr	r3, [pc, #844]	; (801c090 <__ieee754_pow+0x720>)
 801bd44:	f7e4 fc68 	bl	8000618 <__aeabi_dmul>
 801bd48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801bd4c:	460c      	mov	r4, r1
 801bd4e:	1523      	asrs	r3, r4, #20
 801bd50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bd54:	4413      	add	r3, r2
 801bd56:	9309      	str	r3, [sp, #36]	; 0x24
 801bd58:	4bce      	ldr	r3, [pc, #824]	; (801c094 <__ieee754_pow+0x724>)
 801bd5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801bd5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bd62:	429c      	cmp	r4, r3
 801bd64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bd68:	dd08      	ble.n	801bd7c <__ieee754_pow+0x40c>
 801bd6a:	4bcb      	ldr	r3, [pc, #812]	; (801c098 <__ieee754_pow+0x728>)
 801bd6c:	429c      	cmp	r4, r3
 801bd6e:	f340 815e 	ble.w	801c02e <__ieee754_pow+0x6be>
 801bd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd74:	3301      	adds	r3, #1
 801bd76:	9309      	str	r3, [sp, #36]	; 0x24
 801bd78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801bd7c:	f04f 0a00 	mov.w	sl, #0
 801bd80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bd84:	930c      	str	r3, [sp, #48]	; 0x30
 801bd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd88:	4bc4      	ldr	r3, [pc, #784]	; (801c09c <__ieee754_pow+0x72c>)
 801bd8a:	4413      	add	r3, r2
 801bd8c:	ed93 7b00 	vldr	d7, [r3]
 801bd90:	4629      	mov	r1, r5
 801bd92:	ec53 2b17 	vmov	r2, r3, d7
 801bd96:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bd9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bd9e:	f7e4 fa83 	bl	80002a8 <__aeabi_dsub>
 801bda2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bda6:	4606      	mov	r6, r0
 801bda8:	460f      	mov	r7, r1
 801bdaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bdae:	f7e4 fa7d 	bl	80002ac <__adddf3>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	2000      	movs	r0, #0
 801bdb8:	49b9      	ldr	r1, [pc, #740]	; (801c0a0 <__ieee754_pow+0x730>)
 801bdba:	f7e4 fd57 	bl	800086c <__aeabi_ddiv>
 801bdbe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bdc2:	4602      	mov	r2, r0
 801bdc4:	460b      	mov	r3, r1
 801bdc6:	4630      	mov	r0, r6
 801bdc8:	4639      	mov	r1, r7
 801bdca:	f7e4 fc25 	bl	8000618 <__aeabi_dmul>
 801bdce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bdd2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bdd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bdda:	2300      	movs	r3, #0
 801bddc:	9302      	str	r3, [sp, #8]
 801bdde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bde2:	106d      	asrs	r5, r5, #1
 801bde4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bde8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bdec:	2200      	movs	r2, #0
 801bdee:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bdf2:	4640      	mov	r0, r8
 801bdf4:	4649      	mov	r1, r9
 801bdf6:	4614      	mov	r4, r2
 801bdf8:	461d      	mov	r5, r3
 801bdfa:	f7e4 fc0d 	bl	8000618 <__aeabi_dmul>
 801bdfe:	4602      	mov	r2, r0
 801be00:	460b      	mov	r3, r1
 801be02:	4630      	mov	r0, r6
 801be04:	4639      	mov	r1, r7
 801be06:	f7e4 fa4f 	bl	80002a8 <__aeabi_dsub>
 801be0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801be0e:	4606      	mov	r6, r0
 801be10:	460f      	mov	r7, r1
 801be12:	4620      	mov	r0, r4
 801be14:	4629      	mov	r1, r5
 801be16:	f7e4 fa47 	bl	80002a8 <__aeabi_dsub>
 801be1a:	4602      	mov	r2, r0
 801be1c:	460b      	mov	r3, r1
 801be1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801be22:	f7e4 fa41 	bl	80002a8 <__aeabi_dsub>
 801be26:	4642      	mov	r2, r8
 801be28:	464b      	mov	r3, r9
 801be2a:	f7e4 fbf5 	bl	8000618 <__aeabi_dmul>
 801be2e:	4602      	mov	r2, r0
 801be30:	460b      	mov	r3, r1
 801be32:	4630      	mov	r0, r6
 801be34:	4639      	mov	r1, r7
 801be36:	f7e4 fa37 	bl	80002a8 <__aeabi_dsub>
 801be3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801be3e:	f7e4 fbeb 	bl	8000618 <__aeabi_dmul>
 801be42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801be4a:	4610      	mov	r0, r2
 801be4c:	4619      	mov	r1, r3
 801be4e:	f7e4 fbe3 	bl	8000618 <__aeabi_dmul>
 801be52:	a37b      	add	r3, pc, #492	; (adr r3, 801c040 <__ieee754_pow+0x6d0>)
 801be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be58:	4604      	mov	r4, r0
 801be5a:	460d      	mov	r5, r1
 801be5c:	f7e4 fbdc 	bl	8000618 <__aeabi_dmul>
 801be60:	a379      	add	r3, pc, #484	; (adr r3, 801c048 <__ieee754_pow+0x6d8>)
 801be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be66:	f7e4 fa21 	bl	80002ac <__adddf3>
 801be6a:	4622      	mov	r2, r4
 801be6c:	462b      	mov	r3, r5
 801be6e:	f7e4 fbd3 	bl	8000618 <__aeabi_dmul>
 801be72:	a377      	add	r3, pc, #476	; (adr r3, 801c050 <__ieee754_pow+0x6e0>)
 801be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be78:	f7e4 fa18 	bl	80002ac <__adddf3>
 801be7c:	4622      	mov	r2, r4
 801be7e:	462b      	mov	r3, r5
 801be80:	f7e4 fbca 	bl	8000618 <__aeabi_dmul>
 801be84:	a374      	add	r3, pc, #464	; (adr r3, 801c058 <__ieee754_pow+0x6e8>)
 801be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be8a:	f7e4 fa0f 	bl	80002ac <__adddf3>
 801be8e:	4622      	mov	r2, r4
 801be90:	462b      	mov	r3, r5
 801be92:	f7e4 fbc1 	bl	8000618 <__aeabi_dmul>
 801be96:	a372      	add	r3, pc, #456	; (adr r3, 801c060 <__ieee754_pow+0x6f0>)
 801be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9c:	f7e4 fa06 	bl	80002ac <__adddf3>
 801bea0:	4622      	mov	r2, r4
 801bea2:	462b      	mov	r3, r5
 801bea4:	f7e4 fbb8 	bl	8000618 <__aeabi_dmul>
 801bea8:	a36f      	add	r3, pc, #444	; (adr r3, 801c068 <__ieee754_pow+0x6f8>)
 801beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beae:	f7e4 f9fd 	bl	80002ac <__adddf3>
 801beb2:	4622      	mov	r2, r4
 801beb4:	4606      	mov	r6, r0
 801beb6:	460f      	mov	r7, r1
 801beb8:	462b      	mov	r3, r5
 801beba:	4620      	mov	r0, r4
 801bebc:	4629      	mov	r1, r5
 801bebe:	f7e4 fbab 	bl	8000618 <__aeabi_dmul>
 801bec2:	4602      	mov	r2, r0
 801bec4:	460b      	mov	r3, r1
 801bec6:	4630      	mov	r0, r6
 801bec8:	4639      	mov	r1, r7
 801beca:	f7e4 fba5 	bl	8000618 <__aeabi_dmul>
 801bece:	4642      	mov	r2, r8
 801bed0:	4604      	mov	r4, r0
 801bed2:	460d      	mov	r5, r1
 801bed4:	464b      	mov	r3, r9
 801bed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801beda:	f7e4 f9e7 	bl	80002ac <__adddf3>
 801bede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bee2:	f7e4 fb99 	bl	8000618 <__aeabi_dmul>
 801bee6:	4622      	mov	r2, r4
 801bee8:	462b      	mov	r3, r5
 801beea:	f7e4 f9df 	bl	80002ac <__adddf3>
 801beee:	4642      	mov	r2, r8
 801bef0:	4606      	mov	r6, r0
 801bef2:	460f      	mov	r7, r1
 801bef4:	464b      	mov	r3, r9
 801bef6:	4640      	mov	r0, r8
 801bef8:	4649      	mov	r1, r9
 801befa:	f7e4 fb8d 	bl	8000618 <__aeabi_dmul>
 801befe:	2200      	movs	r2, #0
 801bf00:	4b68      	ldr	r3, [pc, #416]	; (801c0a4 <__ieee754_pow+0x734>)
 801bf02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bf06:	f7e4 f9d1 	bl	80002ac <__adddf3>
 801bf0a:	4632      	mov	r2, r6
 801bf0c:	463b      	mov	r3, r7
 801bf0e:	f7e4 f9cd 	bl	80002ac <__adddf3>
 801bf12:	9802      	ldr	r0, [sp, #8]
 801bf14:	460d      	mov	r5, r1
 801bf16:	4604      	mov	r4, r0
 801bf18:	4602      	mov	r2, r0
 801bf1a:	460b      	mov	r3, r1
 801bf1c:	4640      	mov	r0, r8
 801bf1e:	4649      	mov	r1, r9
 801bf20:	f7e4 fb7a 	bl	8000618 <__aeabi_dmul>
 801bf24:	2200      	movs	r2, #0
 801bf26:	4680      	mov	r8, r0
 801bf28:	4689      	mov	r9, r1
 801bf2a:	4b5e      	ldr	r3, [pc, #376]	; (801c0a4 <__ieee754_pow+0x734>)
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	4629      	mov	r1, r5
 801bf30:	f7e4 f9ba 	bl	80002a8 <__aeabi_dsub>
 801bf34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bf38:	f7e4 f9b6 	bl	80002a8 <__aeabi_dsub>
 801bf3c:	4602      	mov	r2, r0
 801bf3e:	460b      	mov	r3, r1
 801bf40:	4630      	mov	r0, r6
 801bf42:	4639      	mov	r1, r7
 801bf44:	f7e4 f9b0 	bl	80002a8 <__aeabi_dsub>
 801bf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf4c:	f7e4 fb64 	bl	8000618 <__aeabi_dmul>
 801bf50:	4622      	mov	r2, r4
 801bf52:	4606      	mov	r6, r0
 801bf54:	460f      	mov	r7, r1
 801bf56:	462b      	mov	r3, r5
 801bf58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf5c:	f7e4 fb5c 	bl	8000618 <__aeabi_dmul>
 801bf60:	4602      	mov	r2, r0
 801bf62:	460b      	mov	r3, r1
 801bf64:	4630      	mov	r0, r6
 801bf66:	4639      	mov	r1, r7
 801bf68:	f7e4 f9a0 	bl	80002ac <__adddf3>
 801bf6c:	4606      	mov	r6, r0
 801bf6e:	460f      	mov	r7, r1
 801bf70:	4602      	mov	r2, r0
 801bf72:	460b      	mov	r3, r1
 801bf74:	4640      	mov	r0, r8
 801bf76:	4649      	mov	r1, r9
 801bf78:	f7e4 f998 	bl	80002ac <__adddf3>
 801bf7c:	9802      	ldr	r0, [sp, #8]
 801bf7e:	a33c      	add	r3, pc, #240	; (adr r3, 801c070 <__ieee754_pow+0x700>)
 801bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf84:	4604      	mov	r4, r0
 801bf86:	460d      	mov	r5, r1
 801bf88:	f7e4 fb46 	bl	8000618 <__aeabi_dmul>
 801bf8c:	4642      	mov	r2, r8
 801bf8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bf92:	464b      	mov	r3, r9
 801bf94:	4620      	mov	r0, r4
 801bf96:	4629      	mov	r1, r5
 801bf98:	f7e4 f986 	bl	80002a8 <__aeabi_dsub>
 801bf9c:	4602      	mov	r2, r0
 801bf9e:	460b      	mov	r3, r1
 801bfa0:	4630      	mov	r0, r6
 801bfa2:	4639      	mov	r1, r7
 801bfa4:	f7e4 f980 	bl	80002a8 <__aeabi_dsub>
 801bfa8:	a333      	add	r3, pc, #204	; (adr r3, 801c078 <__ieee754_pow+0x708>)
 801bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfae:	f7e4 fb33 	bl	8000618 <__aeabi_dmul>
 801bfb2:	a333      	add	r3, pc, #204	; (adr r3, 801c080 <__ieee754_pow+0x710>)
 801bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb8:	4606      	mov	r6, r0
 801bfba:	460f      	mov	r7, r1
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	4629      	mov	r1, r5
 801bfc0:	f7e4 fb2a 	bl	8000618 <__aeabi_dmul>
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	460b      	mov	r3, r1
 801bfc8:	4630      	mov	r0, r6
 801bfca:	4639      	mov	r1, r7
 801bfcc:	f7e4 f96e 	bl	80002ac <__adddf3>
 801bfd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bfd2:	4b35      	ldr	r3, [pc, #212]	; (801c0a8 <__ieee754_pow+0x738>)
 801bfd4:	4413      	add	r3, r2
 801bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfda:	f7e4 f967 	bl	80002ac <__adddf3>
 801bfde:	4604      	mov	r4, r0
 801bfe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bfe2:	460d      	mov	r5, r1
 801bfe4:	f7e4 faae 	bl	8000544 <__aeabi_i2d>
 801bfe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bfea:	4b30      	ldr	r3, [pc, #192]	; (801c0ac <__ieee754_pow+0x73c>)
 801bfec:	4413      	add	r3, r2
 801bfee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bff2:	4606      	mov	r6, r0
 801bff4:	460f      	mov	r7, r1
 801bff6:	4622      	mov	r2, r4
 801bff8:	462b      	mov	r3, r5
 801bffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bffe:	f7e4 f955 	bl	80002ac <__adddf3>
 801c002:	4642      	mov	r2, r8
 801c004:	464b      	mov	r3, r9
 801c006:	f7e4 f951 	bl	80002ac <__adddf3>
 801c00a:	4632      	mov	r2, r6
 801c00c:	463b      	mov	r3, r7
 801c00e:	f7e4 f94d 	bl	80002ac <__adddf3>
 801c012:	9802      	ldr	r0, [sp, #8]
 801c014:	4632      	mov	r2, r6
 801c016:	463b      	mov	r3, r7
 801c018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c01c:	f7e4 f944 	bl	80002a8 <__aeabi_dsub>
 801c020:	4642      	mov	r2, r8
 801c022:	464b      	mov	r3, r9
 801c024:	f7e4 f940 	bl	80002a8 <__aeabi_dsub>
 801c028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c02c:	e607      	b.n	801bc3e <__ieee754_pow+0x2ce>
 801c02e:	f04f 0a01 	mov.w	sl, #1
 801c032:	e6a5      	b.n	801bd80 <__ieee754_pow+0x410>
 801c034:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c088 <__ieee754_pow+0x718>
 801c038:	e613      	b.n	801bc62 <__ieee754_pow+0x2f2>
 801c03a:	bf00      	nop
 801c03c:	f3af 8000 	nop.w
 801c040:	4a454eef 	.word	0x4a454eef
 801c044:	3fca7e28 	.word	0x3fca7e28
 801c048:	93c9db65 	.word	0x93c9db65
 801c04c:	3fcd864a 	.word	0x3fcd864a
 801c050:	a91d4101 	.word	0xa91d4101
 801c054:	3fd17460 	.word	0x3fd17460
 801c058:	518f264d 	.word	0x518f264d
 801c05c:	3fd55555 	.word	0x3fd55555
 801c060:	db6fabff 	.word	0xdb6fabff
 801c064:	3fdb6db6 	.word	0x3fdb6db6
 801c068:	33333303 	.word	0x33333303
 801c06c:	3fe33333 	.word	0x3fe33333
 801c070:	e0000000 	.word	0xe0000000
 801c074:	3feec709 	.word	0x3feec709
 801c078:	dc3a03fd 	.word	0xdc3a03fd
 801c07c:	3feec709 	.word	0x3feec709
 801c080:	145b01f5 	.word	0x145b01f5
 801c084:	be3e2fe0 	.word	0xbe3e2fe0
 801c088:	00000000 	.word	0x00000000
 801c08c:	3ff00000 	.word	0x3ff00000
 801c090:	43400000 	.word	0x43400000
 801c094:	0003988e 	.word	0x0003988e
 801c098:	000bb679 	.word	0x000bb679
 801c09c:	0801e648 	.word	0x0801e648
 801c0a0:	3ff00000 	.word	0x3ff00000
 801c0a4:	40080000 	.word	0x40080000
 801c0a8:	0801e668 	.word	0x0801e668
 801c0ac:	0801e658 	.word	0x0801e658
 801c0b0:	a3b4      	add	r3, pc, #720	; (adr r3, 801c384 <__ieee754_pow+0xa14>)
 801c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0b6:	4640      	mov	r0, r8
 801c0b8:	4649      	mov	r1, r9
 801c0ba:	f7e4 f8f7 	bl	80002ac <__adddf3>
 801c0be:	4622      	mov	r2, r4
 801c0c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c0c4:	462b      	mov	r3, r5
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	4639      	mov	r1, r7
 801c0ca:	f7e4 f8ed 	bl	80002a8 <__aeabi_dsub>
 801c0ce:	4602      	mov	r2, r0
 801c0d0:	460b      	mov	r3, r1
 801c0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c0d6:	f7e4 fd2f 	bl	8000b38 <__aeabi_dcmpgt>
 801c0da:	2800      	cmp	r0, #0
 801c0dc:	f47f adfe 	bne.w	801bcdc <__ieee754_pow+0x36c>
 801c0e0:	4aa3      	ldr	r2, [pc, #652]	; (801c370 <__ieee754_pow+0xa00>)
 801c0e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	f340 810a 	ble.w	801c300 <__ieee754_pow+0x990>
 801c0ec:	151b      	asrs	r3, r3, #20
 801c0ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c0f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c0f6:	fa4a f303 	asr.w	r3, sl, r3
 801c0fa:	445b      	add	r3, fp
 801c0fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c100:	4e9c      	ldr	r6, [pc, #624]	; (801c374 <__ieee754_pow+0xa04>)
 801c102:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c106:	4116      	asrs	r6, r2
 801c108:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c10c:	2000      	movs	r0, #0
 801c10e:	ea23 0106 	bic.w	r1, r3, r6
 801c112:	f1c2 0214 	rsb	r2, r2, #20
 801c116:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c11a:	fa4a fa02 	asr.w	sl, sl, r2
 801c11e:	f1bb 0f00 	cmp.w	fp, #0
 801c122:	4602      	mov	r2, r0
 801c124:	460b      	mov	r3, r1
 801c126:	4620      	mov	r0, r4
 801c128:	4629      	mov	r1, r5
 801c12a:	bfb8      	it	lt
 801c12c:	f1ca 0a00 	rsblt	sl, sl, #0
 801c130:	f7e4 f8ba 	bl	80002a8 <__aeabi_dsub>
 801c134:	e9cd 0100 	strd	r0, r1, [sp]
 801c138:	4642      	mov	r2, r8
 801c13a:	464b      	mov	r3, r9
 801c13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c140:	f7e4 f8b4 	bl	80002ac <__adddf3>
 801c144:	2000      	movs	r0, #0
 801c146:	a378      	add	r3, pc, #480	; (adr r3, 801c328 <__ieee754_pow+0x9b8>)
 801c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c14c:	4604      	mov	r4, r0
 801c14e:	460d      	mov	r5, r1
 801c150:	f7e4 fa62 	bl	8000618 <__aeabi_dmul>
 801c154:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c158:	4606      	mov	r6, r0
 801c15a:	460f      	mov	r7, r1
 801c15c:	4620      	mov	r0, r4
 801c15e:	4629      	mov	r1, r5
 801c160:	f7e4 f8a2 	bl	80002a8 <__aeabi_dsub>
 801c164:	4602      	mov	r2, r0
 801c166:	460b      	mov	r3, r1
 801c168:	4640      	mov	r0, r8
 801c16a:	4649      	mov	r1, r9
 801c16c:	f7e4 f89c 	bl	80002a8 <__aeabi_dsub>
 801c170:	a36f      	add	r3, pc, #444	; (adr r3, 801c330 <__ieee754_pow+0x9c0>)
 801c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c176:	f7e4 fa4f 	bl	8000618 <__aeabi_dmul>
 801c17a:	a36f      	add	r3, pc, #444	; (adr r3, 801c338 <__ieee754_pow+0x9c8>)
 801c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c180:	4680      	mov	r8, r0
 801c182:	4689      	mov	r9, r1
 801c184:	4620      	mov	r0, r4
 801c186:	4629      	mov	r1, r5
 801c188:	f7e4 fa46 	bl	8000618 <__aeabi_dmul>
 801c18c:	4602      	mov	r2, r0
 801c18e:	460b      	mov	r3, r1
 801c190:	4640      	mov	r0, r8
 801c192:	4649      	mov	r1, r9
 801c194:	f7e4 f88a 	bl	80002ac <__adddf3>
 801c198:	4604      	mov	r4, r0
 801c19a:	460d      	mov	r5, r1
 801c19c:	4602      	mov	r2, r0
 801c19e:	460b      	mov	r3, r1
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	4639      	mov	r1, r7
 801c1a4:	f7e4 f882 	bl	80002ac <__adddf3>
 801c1a8:	4632      	mov	r2, r6
 801c1aa:	463b      	mov	r3, r7
 801c1ac:	4680      	mov	r8, r0
 801c1ae:	4689      	mov	r9, r1
 801c1b0:	f7e4 f87a 	bl	80002a8 <__aeabi_dsub>
 801c1b4:	4602      	mov	r2, r0
 801c1b6:	460b      	mov	r3, r1
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	4629      	mov	r1, r5
 801c1bc:	f7e4 f874 	bl	80002a8 <__aeabi_dsub>
 801c1c0:	4642      	mov	r2, r8
 801c1c2:	4606      	mov	r6, r0
 801c1c4:	460f      	mov	r7, r1
 801c1c6:	464b      	mov	r3, r9
 801c1c8:	4640      	mov	r0, r8
 801c1ca:	4649      	mov	r1, r9
 801c1cc:	f7e4 fa24 	bl	8000618 <__aeabi_dmul>
 801c1d0:	a35b      	add	r3, pc, #364	; (adr r3, 801c340 <__ieee754_pow+0x9d0>)
 801c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d6:	4604      	mov	r4, r0
 801c1d8:	460d      	mov	r5, r1
 801c1da:	f7e4 fa1d 	bl	8000618 <__aeabi_dmul>
 801c1de:	a35a      	add	r3, pc, #360	; (adr r3, 801c348 <__ieee754_pow+0x9d8>)
 801c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e4:	f7e4 f860 	bl	80002a8 <__aeabi_dsub>
 801c1e8:	4622      	mov	r2, r4
 801c1ea:	462b      	mov	r3, r5
 801c1ec:	f7e4 fa14 	bl	8000618 <__aeabi_dmul>
 801c1f0:	a357      	add	r3, pc, #348	; (adr r3, 801c350 <__ieee754_pow+0x9e0>)
 801c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f6:	f7e4 f859 	bl	80002ac <__adddf3>
 801c1fa:	4622      	mov	r2, r4
 801c1fc:	462b      	mov	r3, r5
 801c1fe:	f7e4 fa0b 	bl	8000618 <__aeabi_dmul>
 801c202:	a355      	add	r3, pc, #340	; (adr r3, 801c358 <__ieee754_pow+0x9e8>)
 801c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c208:	f7e4 f84e 	bl	80002a8 <__aeabi_dsub>
 801c20c:	4622      	mov	r2, r4
 801c20e:	462b      	mov	r3, r5
 801c210:	f7e4 fa02 	bl	8000618 <__aeabi_dmul>
 801c214:	a352      	add	r3, pc, #328	; (adr r3, 801c360 <__ieee754_pow+0x9f0>)
 801c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c21a:	f7e4 f847 	bl	80002ac <__adddf3>
 801c21e:	4622      	mov	r2, r4
 801c220:	462b      	mov	r3, r5
 801c222:	f7e4 f9f9 	bl	8000618 <__aeabi_dmul>
 801c226:	4602      	mov	r2, r0
 801c228:	460b      	mov	r3, r1
 801c22a:	4640      	mov	r0, r8
 801c22c:	4649      	mov	r1, r9
 801c22e:	f7e4 f83b 	bl	80002a8 <__aeabi_dsub>
 801c232:	4604      	mov	r4, r0
 801c234:	460d      	mov	r5, r1
 801c236:	4602      	mov	r2, r0
 801c238:	460b      	mov	r3, r1
 801c23a:	4640      	mov	r0, r8
 801c23c:	4649      	mov	r1, r9
 801c23e:	f7e4 f9eb 	bl	8000618 <__aeabi_dmul>
 801c242:	2200      	movs	r2, #0
 801c244:	e9cd 0100 	strd	r0, r1, [sp]
 801c248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c24c:	4620      	mov	r0, r4
 801c24e:	4629      	mov	r1, r5
 801c250:	f7e4 f82a 	bl	80002a8 <__aeabi_dsub>
 801c254:	4602      	mov	r2, r0
 801c256:	460b      	mov	r3, r1
 801c258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c25c:	f7e4 fb06 	bl	800086c <__aeabi_ddiv>
 801c260:	4632      	mov	r2, r6
 801c262:	4604      	mov	r4, r0
 801c264:	460d      	mov	r5, r1
 801c266:	463b      	mov	r3, r7
 801c268:	4640      	mov	r0, r8
 801c26a:	4649      	mov	r1, r9
 801c26c:	f7e4 f9d4 	bl	8000618 <__aeabi_dmul>
 801c270:	4632      	mov	r2, r6
 801c272:	463b      	mov	r3, r7
 801c274:	f7e4 f81a 	bl	80002ac <__adddf3>
 801c278:	4602      	mov	r2, r0
 801c27a:	460b      	mov	r3, r1
 801c27c:	4620      	mov	r0, r4
 801c27e:	4629      	mov	r1, r5
 801c280:	f7e4 f812 	bl	80002a8 <__aeabi_dsub>
 801c284:	4642      	mov	r2, r8
 801c286:	464b      	mov	r3, r9
 801c288:	f7e4 f80e 	bl	80002a8 <__aeabi_dsub>
 801c28c:	4602      	mov	r2, r0
 801c28e:	460b      	mov	r3, r1
 801c290:	2000      	movs	r0, #0
 801c292:	4939      	ldr	r1, [pc, #228]	; (801c378 <__ieee754_pow+0xa08>)
 801c294:	f7e4 f808 	bl	80002a8 <__aeabi_dsub>
 801c298:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c29c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c2a0:	4602      	mov	r2, r0
 801c2a2:	460b      	mov	r3, r1
 801c2a4:	da2f      	bge.n	801c306 <__ieee754_pow+0x996>
 801c2a6:	4650      	mov	r0, sl
 801c2a8:	ec43 2b10 	vmov	d0, r2, r3
 801c2ac:	f001 faa4 	bl	801d7f8 <scalbn>
 801c2b0:	ec51 0b10 	vmov	r0, r1, d0
 801c2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c2b8:	f7ff bbf1 	b.w	801ba9e <__ieee754_pow+0x12e>
 801c2bc:	4b2f      	ldr	r3, [pc, #188]	; (801c37c <__ieee754_pow+0xa0c>)
 801c2be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c2c2:	429e      	cmp	r6, r3
 801c2c4:	f77f af0c 	ble.w	801c0e0 <__ieee754_pow+0x770>
 801c2c8:	4b2d      	ldr	r3, [pc, #180]	; (801c380 <__ieee754_pow+0xa10>)
 801c2ca:	440b      	add	r3, r1
 801c2cc:	4303      	orrs	r3, r0
 801c2ce:	d00b      	beq.n	801c2e8 <__ieee754_pow+0x978>
 801c2d0:	a325      	add	r3, pc, #148	; (adr r3, 801c368 <__ieee754_pow+0x9f8>)
 801c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c2da:	f7e4 f99d 	bl	8000618 <__aeabi_dmul>
 801c2de:	a322      	add	r3, pc, #136	; (adr r3, 801c368 <__ieee754_pow+0x9f8>)
 801c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e4:	f7ff bbdb 	b.w	801ba9e <__ieee754_pow+0x12e>
 801c2e8:	4622      	mov	r2, r4
 801c2ea:	462b      	mov	r3, r5
 801c2ec:	f7e3 ffdc 	bl	80002a8 <__aeabi_dsub>
 801c2f0:	4642      	mov	r2, r8
 801c2f2:	464b      	mov	r3, r9
 801c2f4:	f7e4 fc16 	bl	8000b24 <__aeabi_dcmpge>
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	f43f aef1 	beq.w	801c0e0 <__ieee754_pow+0x770>
 801c2fe:	e7e7      	b.n	801c2d0 <__ieee754_pow+0x960>
 801c300:	f04f 0a00 	mov.w	sl, #0
 801c304:	e718      	b.n	801c138 <__ieee754_pow+0x7c8>
 801c306:	4621      	mov	r1, r4
 801c308:	e7d4      	b.n	801c2b4 <__ieee754_pow+0x944>
 801c30a:	2000      	movs	r0, #0
 801c30c:	491a      	ldr	r1, [pc, #104]	; (801c378 <__ieee754_pow+0xa08>)
 801c30e:	f7ff bb8f 	b.w	801ba30 <__ieee754_pow+0xc0>
 801c312:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c316:	f7ff bb8b 	b.w	801ba30 <__ieee754_pow+0xc0>
 801c31a:	4630      	mov	r0, r6
 801c31c:	4639      	mov	r1, r7
 801c31e:	f7ff bb87 	b.w	801ba30 <__ieee754_pow+0xc0>
 801c322:	4693      	mov	fp, r2
 801c324:	f7ff bb98 	b.w	801ba58 <__ieee754_pow+0xe8>
 801c328:	00000000 	.word	0x00000000
 801c32c:	3fe62e43 	.word	0x3fe62e43
 801c330:	fefa39ef 	.word	0xfefa39ef
 801c334:	3fe62e42 	.word	0x3fe62e42
 801c338:	0ca86c39 	.word	0x0ca86c39
 801c33c:	be205c61 	.word	0xbe205c61
 801c340:	72bea4d0 	.word	0x72bea4d0
 801c344:	3e663769 	.word	0x3e663769
 801c348:	c5d26bf1 	.word	0xc5d26bf1
 801c34c:	3ebbbd41 	.word	0x3ebbbd41
 801c350:	af25de2c 	.word	0xaf25de2c
 801c354:	3f11566a 	.word	0x3f11566a
 801c358:	16bebd93 	.word	0x16bebd93
 801c35c:	3f66c16c 	.word	0x3f66c16c
 801c360:	5555553e 	.word	0x5555553e
 801c364:	3fc55555 	.word	0x3fc55555
 801c368:	c2f8f359 	.word	0xc2f8f359
 801c36c:	01a56e1f 	.word	0x01a56e1f
 801c370:	3fe00000 	.word	0x3fe00000
 801c374:	000fffff 	.word	0x000fffff
 801c378:	3ff00000 	.word	0x3ff00000
 801c37c:	4090cbff 	.word	0x4090cbff
 801c380:	3f6f3400 	.word	0x3f6f3400
 801c384:	652b82fe 	.word	0x652b82fe
 801c388:	3c971547 	.word	0x3c971547
 801c38c:	00000000 	.word	0x00000000

0801c390 <__ieee754_rem_pio2>:
 801c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c394:	ec57 6b10 	vmov	r6, r7, d0
 801c398:	4bc3      	ldr	r3, [pc, #780]	; (801c6a8 <__ieee754_rem_pio2+0x318>)
 801c39a:	b08d      	sub	sp, #52	; 0x34
 801c39c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801c3a0:	4598      	cmp	r8, r3
 801c3a2:	4604      	mov	r4, r0
 801c3a4:	9704      	str	r7, [sp, #16]
 801c3a6:	dc07      	bgt.n	801c3b8 <__ieee754_rem_pio2+0x28>
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	ed84 0b00 	vstr	d0, [r4]
 801c3b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c3b4:	2500      	movs	r5, #0
 801c3b6:	e027      	b.n	801c408 <__ieee754_rem_pio2+0x78>
 801c3b8:	4bbc      	ldr	r3, [pc, #752]	; (801c6ac <__ieee754_rem_pio2+0x31c>)
 801c3ba:	4598      	cmp	r8, r3
 801c3bc:	dc75      	bgt.n	801c4aa <__ieee754_rem_pio2+0x11a>
 801c3be:	9b04      	ldr	r3, [sp, #16]
 801c3c0:	4dbb      	ldr	r5, [pc, #748]	; (801c6b0 <__ieee754_rem_pio2+0x320>)
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	ee10 0a10 	vmov	r0, s0
 801c3c8:	a3a9      	add	r3, pc, #676	; (adr r3, 801c670 <__ieee754_rem_pio2+0x2e0>)
 801c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ce:	4639      	mov	r1, r7
 801c3d0:	dd36      	ble.n	801c440 <__ieee754_rem_pio2+0xb0>
 801c3d2:	f7e3 ff69 	bl	80002a8 <__aeabi_dsub>
 801c3d6:	45a8      	cmp	r8, r5
 801c3d8:	4606      	mov	r6, r0
 801c3da:	460f      	mov	r7, r1
 801c3dc:	d018      	beq.n	801c410 <__ieee754_rem_pio2+0x80>
 801c3de:	a3a6      	add	r3, pc, #664	; (adr r3, 801c678 <__ieee754_rem_pio2+0x2e8>)
 801c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e4:	f7e3 ff60 	bl	80002a8 <__aeabi_dsub>
 801c3e8:	4602      	mov	r2, r0
 801c3ea:	460b      	mov	r3, r1
 801c3ec:	e9c4 2300 	strd	r2, r3, [r4]
 801c3f0:	4630      	mov	r0, r6
 801c3f2:	4639      	mov	r1, r7
 801c3f4:	f7e3 ff58 	bl	80002a8 <__aeabi_dsub>
 801c3f8:	a39f      	add	r3, pc, #636	; (adr r3, 801c678 <__ieee754_rem_pio2+0x2e8>)
 801c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3fe:	f7e3 ff53 	bl	80002a8 <__aeabi_dsub>
 801c402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c406:	2501      	movs	r5, #1
 801c408:	4628      	mov	r0, r5
 801c40a:	b00d      	add	sp, #52	; 0x34
 801c40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c410:	a39b      	add	r3, pc, #620	; (adr r3, 801c680 <__ieee754_rem_pio2+0x2f0>)
 801c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c416:	f7e3 ff47 	bl	80002a8 <__aeabi_dsub>
 801c41a:	a39b      	add	r3, pc, #620	; (adr r3, 801c688 <__ieee754_rem_pio2+0x2f8>)
 801c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c420:	4606      	mov	r6, r0
 801c422:	460f      	mov	r7, r1
 801c424:	f7e3 ff40 	bl	80002a8 <__aeabi_dsub>
 801c428:	4602      	mov	r2, r0
 801c42a:	460b      	mov	r3, r1
 801c42c:	e9c4 2300 	strd	r2, r3, [r4]
 801c430:	4630      	mov	r0, r6
 801c432:	4639      	mov	r1, r7
 801c434:	f7e3 ff38 	bl	80002a8 <__aeabi_dsub>
 801c438:	a393      	add	r3, pc, #588	; (adr r3, 801c688 <__ieee754_rem_pio2+0x2f8>)
 801c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c43e:	e7de      	b.n	801c3fe <__ieee754_rem_pio2+0x6e>
 801c440:	f7e3 ff34 	bl	80002ac <__adddf3>
 801c444:	45a8      	cmp	r8, r5
 801c446:	4606      	mov	r6, r0
 801c448:	460f      	mov	r7, r1
 801c44a:	d016      	beq.n	801c47a <__ieee754_rem_pio2+0xea>
 801c44c:	a38a      	add	r3, pc, #552	; (adr r3, 801c678 <__ieee754_rem_pio2+0x2e8>)
 801c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c452:	f7e3 ff2b 	bl	80002ac <__adddf3>
 801c456:	4602      	mov	r2, r0
 801c458:	460b      	mov	r3, r1
 801c45a:	e9c4 2300 	strd	r2, r3, [r4]
 801c45e:	4630      	mov	r0, r6
 801c460:	4639      	mov	r1, r7
 801c462:	f7e3 ff21 	bl	80002a8 <__aeabi_dsub>
 801c466:	a384      	add	r3, pc, #528	; (adr r3, 801c678 <__ieee754_rem_pio2+0x2e8>)
 801c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c46c:	f7e3 ff1e 	bl	80002ac <__adddf3>
 801c470:	f04f 35ff 	mov.w	r5, #4294967295
 801c474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c478:	e7c6      	b.n	801c408 <__ieee754_rem_pio2+0x78>
 801c47a:	a381      	add	r3, pc, #516	; (adr r3, 801c680 <__ieee754_rem_pio2+0x2f0>)
 801c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c480:	f7e3 ff14 	bl	80002ac <__adddf3>
 801c484:	a380      	add	r3, pc, #512	; (adr r3, 801c688 <__ieee754_rem_pio2+0x2f8>)
 801c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c48a:	4606      	mov	r6, r0
 801c48c:	460f      	mov	r7, r1
 801c48e:	f7e3 ff0d 	bl	80002ac <__adddf3>
 801c492:	4602      	mov	r2, r0
 801c494:	460b      	mov	r3, r1
 801c496:	e9c4 2300 	strd	r2, r3, [r4]
 801c49a:	4630      	mov	r0, r6
 801c49c:	4639      	mov	r1, r7
 801c49e:	f7e3 ff03 	bl	80002a8 <__aeabi_dsub>
 801c4a2:	a379      	add	r3, pc, #484	; (adr r3, 801c688 <__ieee754_rem_pio2+0x2f8>)
 801c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4a8:	e7e0      	b.n	801c46c <__ieee754_rem_pio2+0xdc>
 801c4aa:	4b82      	ldr	r3, [pc, #520]	; (801c6b4 <__ieee754_rem_pio2+0x324>)
 801c4ac:	4598      	cmp	r8, r3
 801c4ae:	f300 80d0 	bgt.w	801c652 <__ieee754_rem_pio2+0x2c2>
 801c4b2:	f001 f879 	bl	801d5a8 <fabs>
 801c4b6:	ec57 6b10 	vmov	r6, r7, d0
 801c4ba:	ee10 0a10 	vmov	r0, s0
 801c4be:	a374      	add	r3, pc, #464	; (adr r3, 801c690 <__ieee754_rem_pio2+0x300>)
 801c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4c4:	4639      	mov	r1, r7
 801c4c6:	f7e4 f8a7 	bl	8000618 <__aeabi_dmul>
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	4b7a      	ldr	r3, [pc, #488]	; (801c6b8 <__ieee754_rem_pio2+0x328>)
 801c4ce:	f7e3 feed 	bl	80002ac <__adddf3>
 801c4d2:	f7e4 fb51 	bl	8000b78 <__aeabi_d2iz>
 801c4d6:	4605      	mov	r5, r0
 801c4d8:	f7e4 f834 	bl	8000544 <__aeabi_i2d>
 801c4dc:	a364      	add	r3, pc, #400	; (adr r3, 801c670 <__ieee754_rem_pio2+0x2e0>)
 801c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c4e6:	f7e4 f897 	bl	8000618 <__aeabi_dmul>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	4630      	mov	r0, r6
 801c4f0:	4639      	mov	r1, r7
 801c4f2:	f7e3 fed9 	bl	80002a8 <__aeabi_dsub>
 801c4f6:	a360      	add	r3, pc, #384	; (adr r3, 801c678 <__ieee754_rem_pio2+0x2e8>)
 801c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4fc:	4682      	mov	sl, r0
 801c4fe:	468b      	mov	fp, r1
 801c500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c504:	f7e4 f888 	bl	8000618 <__aeabi_dmul>
 801c508:	2d1f      	cmp	r5, #31
 801c50a:	4606      	mov	r6, r0
 801c50c:	460f      	mov	r7, r1
 801c50e:	dc0c      	bgt.n	801c52a <__ieee754_rem_pio2+0x19a>
 801c510:	1e6a      	subs	r2, r5, #1
 801c512:	4b6a      	ldr	r3, [pc, #424]	; (801c6bc <__ieee754_rem_pio2+0x32c>)
 801c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c518:	4543      	cmp	r3, r8
 801c51a:	d006      	beq.n	801c52a <__ieee754_rem_pio2+0x19a>
 801c51c:	4632      	mov	r2, r6
 801c51e:	463b      	mov	r3, r7
 801c520:	4650      	mov	r0, sl
 801c522:	4659      	mov	r1, fp
 801c524:	f7e3 fec0 	bl	80002a8 <__aeabi_dsub>
 801c528:	e00e      	b.n	801c548 <__ieee754_rem_pio2+0x1b8>
 801c52a:	4632      	mov	r2, r6
 801c52c:	463b      	mov	r3, r7
 801c52e:	4650      	mov	r0, sl
 801c530:	4659      	mov	r1, fp
 801c532:	f7e3 feb9 	bl	80002a8 <__aeabi_dsub>
 801c536:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c53a:	9305      	str	r3, [sp, #20]
 801c53c:	9a05      	ldr	r2, [sp, #20]
 801c53e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c542:	1ad3      	subs	r3, r2, r3
 801c544:	2b10      	cmp	r3, #16
 801c546:	dc02      	bgt.n	801c54e <__ieee754_rem_pio2+0x1be>
 801c548:	e9c4 0100 	strd	r0, r1, [r4]
 801c54c:	e039      	b.n	801c5c2 <__ieee754_rem_pio2+0x232>
 801c54e:	a34c      	add	r3, pc, #304	; (adr r3, 801c680 <__ieee754_rem_pio2+0x2f0>)
 801c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c558:	f7e4 f85e 	bl	8000618 <__aeabi_dmul>
 801c55c:	4606      	mov	r6, r0
 801c55e:	460f      	mov	r7, r1
 801c560:	4602      	mov	r2, r0
 801c562:	460b      	mov	r3, r1
 801c564:	4650      	mov	r0, sl
 801c566:	4659      	mov	r1, fp
 801c568:	f7e3 fe9e 	bl	80002a8 <__aeabi_dsub>
 801c56c:	4602      	mov	r2, r0
 801c56e:	460b      	mov	r3, r1
 801c570:	4680      	mov	r8, r0
 801c572:	4689      	mov	r9, r1
 801c574:	4650      	mov	r0, sl
 801c576:	4659      	mov	r1, fp
 801c578:	f7e3 fe96 	bl	80002a8 <__aeabi_dsub>
 801c57c:	4632      	mov	r2, r6
 801c57e:	463b      	mov	r3, r7
 801c580:	f7e3 fe92 	bl	80002a8 <__aeabi_dsub>
 801c584:	a340      	add	r3, pc, #256	; (adr r3, 801c688 <__ieee754_rem_pio2+0x2f8>)
 801c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c58a:	4606      	mov	r6, r0
 801c58c:	460f      	mov	r7, r1
 801c58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c592:	f7e4 f841 	bl	8000618 <__aeabi_dmul>
 801c596:	4632      	mov	r2, r6
 801c598:	463b      	mov	r3, r7
 801c59a:	f7e3 fe85 	bl	80002a8 <__aeabi_dsub>
 801c59e:	4602      	mov	r2, r0
 801c5a0:	460b      	mov	r3, r1
 801c5a2:	4606      	mov	r6, r0
 801c5a4:	460f      	mov	r7, r1
 801c5a6:	4640      	mov	r0, r8
 801c5a8:	4649      	mov	r1, r9
 801c5aa:	f7e3 fe7d 	bl	80002a8 <__aeabi_dsub>
 801c5ae:	9a05      	ldr	r2, [sp, #20]
 801c5b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c5b4:	1ad3      	subs	r3, r2, r3
 801c5b6:	2b31      	cmp	r3, #49	; 0x31
 801c5b8:	dc20      	bgt.n	801c5fc <__ieee754_rem_pio2+0x26c>
 801c5ba:	e9c4 0100 	strd	r0, r1, [r4]
 801c5be:	46c2      	mov	sl, r8
 801c5c0:	46cb      	mov	fp, r9
 801c5c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c5c6:	4650      	mov	r0, sl
 801c5c8:	4642      	mov	r2, r8
 801c5ca:	464b      	mov	r3, r9
 801c5cc:	4659      	mov	r1, fp
 801c5ce:	f7e3 fe6b 	bl	80002a8 <__aeabi_dsub>
 801c5d2:	463b      	mov	r3, r7
 801c5d4:	4632      	mov	r2, r6
 801c5d6:	f7e3 fe67 	bl	80002a8 <__aeabi_dsub>
 801c5da:	9b04      	ldr	r3, [sp, #16]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c5e2:	f6bf af11 	bge.w	801c408 <__ieee754_rem_pio2+0x78>
 801c5e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c5ea:	6063      	str	r3, [r4, #4]
 801c5ec:	f8c4 8000 	str.w	r8, [r4]
 801c5f0:	60a0      	str	r0, [r4, #8]
 801c5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c5f6:	60e3      	str	r3, [r4, #12]
 801c5f8:	426d      	negs	r5, r5
 801c5fa:	e705      	b.n	801c408 <__ieee754_rem_pio2+0x78>
 801c5fc:	a326      	add	r3, pc, #152	; (adr r3, 801c698 <__ieee754_rem_pio2+0x308>)
 801c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c606:	f7e4 f807 	bl	8000618 <__aeabi_dmul>
 801c60a:	4606      	mov	r6, r0
 801c60c:	460f      	mov	r7, r1
 801c60e:	4602      	mov	r2, r0
 801c610:	460b      	mov	r3, r1
 801c612:	4640      	mov	r0, r8
 801c614:	4649      	mov	r1, r9
 801c616:	f7e3 fe47 	bl	80002a8 <__aeabi_dsub>
 801c61a:	4602      	mov	r2, r0
 801c61c:	460b      	mov	r3, r1
 801c61e:	4682      	mov	sl, r0
 801c620:	468b      	mov	fp, r1
 801c622:	4640      	mov	r0, r8
 801c624:	4649      	mov	r1, r9
 801c626:	f7e3 fe3f 	bl	80002a8 <__aeabi_dsub>
 801c62a:	4632      	mov	r2, r6
 801c62c:	463b      	mov	r3, r7
 801c62e:	f7e3 fe3b 	bl	80002a8 <__aeabi_dsub>
 801c632:	a31b      	add	r3, pc, #108	; (adr r3, 801c6a0 <__ieee754_rem_pio2+0x310>)
 801c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c638:	4606      	mov	r6, r0
 801c63a:	460f      	mov	r7, r1
 801c63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c640:	f7e3 ffea 	bl	8000618 <__aeabi_dmul>
 801c644:	4632      	mov	r2, r6
 801c646:	463b      	mov	r3, r7
 801c648:	f7e3 fe2e 	bl	80002a8 <__aeabi_dsub>
 801c64c:	4606      	mov	r6, r0
 801c64e:	460f      	mov	r7, r1
 801c650:	e764      	b.n	801c51c <__ieee754_rem_pio2+0x18c>
 801c652:	4b1b      	ldr	r3, [pc, #108]	; (801c6c0 <__ieee754_rem_pio2+0x330>)
 801c654:	4598      	cmp	r8, r3
 801c656:	dd35      	ble.n	801c6c4 <__ieee754_rem_pio2+0x334>
 801c658:	ee10 2a10 	vmov	r2, s0
 801c65c:	463b      	mov	r3, r7
 801c65e:	4630      	mov	r0, r6
 801c660:	4639      	mov	r1, r7
 801c662:	f7e3 fe21 	bl	80002a8 <__aeabi_dsub>
 801c666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c66a:	e9c4 0100 	strd	r0, r1, [r4]
 801c66e:	e6a1      	b.n	801c3b4 <__ieee754_rem_pio2+0x24>
 801c670:	54400000 	.word	0x54400000
 801c674:	3ff921fb 	.word	0x3ff921fb
 801c678:	1a626331 	.word	0x1a626331
 801c67c:	3dd0b461 	.word	0x3dd0b461
 801c680:	1a600000 	.word	0x1a600000
 801c684:	3dd0b461 	.word	0x3dd0b461
 801c688:	2e037073 	.word	0x2e037073
 801c68c:	3ba3198a 	.word	0x3ba3198a
 801c690:	6dc9c883 	.word	0x6dc9c883
 801c694:	3fe45f30 	.word	0x3fe45f30
 801c698:	2e000000 	.word	0x2e000000
 801c69c:	3ba3198a 	.word	0x3ba3198a
 801c6a0:	252049c1 	.word	0x252049c1
 801c6a4:	397b839a 	.word	0x397b839a
 801c6a8:	3fe921fb 	.word	0x3fe921fb
 801c6ac:	4002d97b 	.word	0x4002d97b
 801c6b0:	3ff921fb 	.word	0x3ff921fb
 801c6b4:	413921fb 	.word	0x413921fb
 801c6b8:	3fe00000 	.word	0x3fe00000
 801c6bc:	0801e678 	.word	0x0801e678
 801c6c0:	7fefffff 	.word	0x7fefffff
 801c6c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c6c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801c6cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c6d0:	4630      	mov	r0, r6
 801c6d2:	460f      	mov	r7, r1
 801c6d4:	f7e4 fa50 	bl	8000b78 <__aeabi_d2iz>
 801c6d8:	f7e3 ff34 	bl	8000544 <__aeabi_i2d>
 801c6dc:	4602      	mov	r2, r0
 801c6de:	460b      	mov	r3, r1
 801c6e0:	4630      	mov	r0, r6
 801c6e2:	4639      	mov	r1, r7
 801c6e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c6e8:	f7e3 fdde 	bl	80002a8 <__aeabi_dsub>
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	4b1f      	ldr	r3, [pc, #124]	; (801c76c <__ieee754_rem_pio2+0x3dc>)
 801c6f0:	f7e3 ff92 	bl	8000618 <__aeabi_dmul>
 801c6f4:	460f      	mov	r7, r1
 801c6f6:	4606      	mov	r6, r0
 801c6f8:	f7e4 fa3e 	bl	8000b78 <__aeabi_d2iz>
 801c6fc:	f7e3 ff22 	bl	8000544 <__aeabi_i2d>
 801c700:	4602      	mov	r2, r0
 801c702:	460b      	mov	r3, r1
 801c704:	4630      	mov	r0, r6
 801c706:	4639      	mov	r1, r7
 801c708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c70c:	f7e3 fdcc 	bl	80002a8 <__aeabi_dsub>
 801c710:	2200      	movs	r2, #0
 801c712:	4b16      	ldr	r3, [pc, #88]	; (801c76c <__ieee754_rem_pio2+0x3dc>)
 801c714:	f7e3 ff80 	bl	8000618 <__aeabi_dmul>
 801c718:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c71c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801c720:	f04f 0803 	mov.w	r8, #3
 801c724:	2600      	movs	r6, #0
 801c726:	2700      	movs	r7, #0
 801c728:	4632      	mov	r2, r6
 801c72a:	463b      	mov	r3, r7
 801c72c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c730:	f108 3aff 	add.w	sl, r8, #4294967295
 801c734:	f7e4 f9d8 	bl	8000ae8 <__aeabi_dcmpeq>
 801c738:	b9b0      	cbnz	r0, 801c768 <__ieee754_rem_pio2+0x3d8>
 801c73a:	4b0d      	ldr	r3, [pc, #52]	; (801c770 <__ieee754_rem_pio2+0x3e0>)
 801c73c:	9301      	str	r3, [sp, #4]
 801c73e:	2302      	movs	r3, #2
 801c740:	9300      	str	r3, [sp, #0]
 801c742:	462a      	mov	r2, r5
 801c744:	4643      	mov	r3, r8
 801c746:	4621      	mov	r1, r4
 801c748:	a806      	add	r0, sp, #24
 801c74a:	f000 f991 	bl	801ca70 <__kernel_rem_pio2>
 801c74e:	9b04      	ldr	r3, [sp, #16]
 801c750:	2b00      	cmp	r3, #0
 801c752:	4605      	mov	r5, r0
 801c754:	f6bf ae58 	bge.w	801c408 <__ieee754_rem_pio2+0x78>
 801c758:	6863      	ldr	r3, [r4, #4]
 801c75a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c75e:	6063      	str	r3, [r4, #4]
 801c760:	68e3      	ldr	r3, [r4, #12]
 801c762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c766:	e746      	b.n	801c5f6 <__ieee754_rem_pio2+0x266>
 801c768:	46d0      	mov	r8, sl
 801c76a:	e7dd      	b.n	801c728 <__ieee754_rem_pio2+0x398>
 801c76c:	41700000 	.word	0x41700000
 801c770:	0801e6f8 	.word	0x0801e6f8

0801c774 <__ieee754_sqrt>:
 801c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c778:	4955      	ldr	r1, [pc, #340]	; (801c8d0 <__ieee754_sqrt+0x15c>)
 801c77a:	ec55 4b10 	vmov	r4, r5, d0
 801c77e:	43a9      	bics	r1, r5
 801c780:	462b      	mov	r3, r5
 801c782:	462a      	mov	r2, r5
 801c784:	d112      	bne.n	801c7ac <__ieee754_sqrt+0x38>
 801c786:	ee10 2a10 	vmov	r2, s0
 801c78a:	ee10 0a10 	vmov	r0, s0
 801c78e:	4629      	mov	r1, r5
 801c790:	f7e3 ff42 	bl	8000618 <__aeabi_dmul>
 801c794:	4602      	mov	r2, r0
 801c796:	460b      	mov	r3, r1
 801c798:	4620      	mov	r0, r4
 801c79a:	4629      	mov	r1, r5
 801c79c:	f7e3 fd86 	bl	80002ac <__adddf3>
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	460d      	mov	r5, r1
 801c7a4:	ec45 4b10 	vmov	d0, r4, r5
 801c7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7ac:	2d00      	cmp	r5, #0
 801c7ae:	ee10 0a10 	vmov	r0, s0
 801c7b2:	4621      	mov	r1, r4
 801c7b4:	dc0f      	bgt.n	801c7d6 <__ieee754_sqrt+0x62>
 801c7b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c7ba:	4330      	orrs	r0, r6
 801c7bc:	d0f2      	beq.n	801c7a4 <__ieee754_sqrt+0x30>
 801c7be:	b155      	cbz	r5, 801c7d6 <__ieee754_sqrt+0x62>
 801c7c0:	ee10 2a10 	vmov	r2, s0
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	4629      	mov	r1, r5
 801c7c8:	f7e3 fd6e 	bl	80002a8 <__aeabi_dsub>
 801c7cc:	4602      	mov	r2, r0
 801c7ce:	460b      	mov	r3, r1
 801c7d0:	f7e4 f84c 	bl	800086c <__aeabi_ddiv>
 801c7d4:	e7e4      	b.n	801c7a0 <__ieee754_sqrt+0x2c>
 801c7d6:	151b      	asrs	r3, r3, #20
 801c7d8:	d073      	beq.n	801c8c2 <__ieee754_sqrt+0x14e>
 801c7da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c7de:	07dd      	lsls	r5, r3, #31
 801c7e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c7e4:	bf48      	it	mi
 801c7e6:	0fc8      	lsrmi	r0, r1, #31
 801c7e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c7ec:	bf44      	itt	mi
 801c7ee:	0049      	lslmi	r1, r1, #1
 801c7f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c7f4:	2500      	movs	r5, #0
 801c7f6:	1058      	asrs	r0, r3, #1
 801c7f8:	0fcb      	lsrs	r3, r1, #31
 801c7fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c7fe:	0049      	lsls	r1, r1, #1
 801c800:	2316      	movs	r3, #22
 801c802:	462c      	mov	r4, r5
 801c804:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c808:	19a7      	adds	r7, r4, r6
 801c80a:	4297      	cmp	r7, r2
 801c80c:	bfde      	ittt	le
 801c80e:	19bc      	addle	r4, r7, r6
 801c810:	1bd2      	suble	r2, r2, r7
 801c812:	19ad      	addle	r5, r5, r6
 801c814:	0fcf      	lsrs	r7, r1, #31
 801c816:	3b01      	subs	r3, #1
 801c818:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c81c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c820:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c824:	d1f0      	bne.n	801c808 <__ieee754_sqrt+0x94>
 801c826:	f04f 0c20 	mov.w	ip, #32
 801c82a:	469e      	mov	lr, r3
 801c82c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c830:	42a2      	cmp	r2, r4
 801c832:	eb06 070e 	add.w	r7, r6, lr
 801c836:	dc02      	bgt.n	801c83e <__ieee754_sqrt+0xca>
 801c838:	d112      	bne.n	801c860 <__ieee754_sqrt+0xec>
 801c83a:	428f      	cmp	r7, r1
 801c83c:	d810      	bhi.n	801c860 <__ieee754_sqrt+0xec>
 801c83e:	2f00      	cmp	r7, #0
 801c840:	eb07 0e06 	add.w	lr, r7, r6
 801c844:	da42      	bge.n	801c8cc <__ieee754_sqrt+0x158>
 801c846:	f1be 0f00 	cmp.w	lr, #0
 801c84a:	db3f      	blt.n	801c8cc <__ieee754_sqrt+0x158>
 801c84c:	f104 0801 	add.w	r8, r4, #1
 801c850:	1b12      	subs	r2, r2, r4
 801c852:	428f      	cmp	r7, r1
 801c854:	bf88      	it	hi
 801c856:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c85a:	1bc9      	subs	r1, r1, r7
 801c85c:	4433      	add	r3, r6
 801c85e:	4644      	mov	r4, r8
 801c860:	0052      	lsls	r2, r2, #1
 801c862:	f1bc 0c01 	subs.w	ip, ip, #1
 801c866:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c86a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c86e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c872:	d1dd      	bne.n	801c830 <__ieee754_sqrt+0xbc>
 801c874:	430a      	orrs	r2, r1
 801c876:	d006      	beq.n	801c886 <__ieee754_sqrt+0x112>
 801c878:	1c5c      	adds	r4, r3, #1
 801c87a:	bf13      	iteet	ne
 801c87c:	3301      	addne	r3, #1
 801c87e:	3501      	addeq	r5, #1
 801c880:	4663      	moveq	r3, ip
 801c882:	f023 0301 	bicne.w	r3, r3, #1
 801c886:	106a      	asrs	r2, r5, #1
 801c888:	085b      	lsrs	r3, r3, #1
 801c88a:	07e9      	lsls	r1, r5, #31
 801c88c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c890:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c894:	bf48      	it	mi
 801c896:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c89a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c89e:	461c      	mov	r4, r3
 801c8a0:	e780      	b.n	801c7a4 <__ieee754_sqrt+0x30>
 801c8a2:	0aca      	lsrs	r2, r1, #11
 801c8a4:	3815      	subs	r0, #21
 801c8a6:	0549      	lsls	r1, r1, #21
 801c8a8:	2a00      	cmp	r2, #0
 801c8aa:	d0fa      	beq.n	801c8a2 <__ieee754_sqrt+0x12e>
 801c8ac:	02d6      	lsls	r6, r2, #11
 801c8ae:	d50a      	bpl.n	801c8c6 <__ieee754_sqrt+0x152>
 801c8b0:	f1c3 0420 	rsb	r4, r3, #32
 801c8b4:	fa21 f404 	lsr.w	r4, r1, r4
 801c8b8:	1e5d      	subs	r5, r3, #1
 801c8ba:	4099      	lsls	r1, r3
 801c8bc:	4322      	orrs	r2, r4
 801c8be:	1b43      	subs	r3, r0, r5
 801c8c0:	e78b      	b.n	801c7da <__ieee754_sqrt+0x66>
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	e7f0      	b.n	801c8a8 <__ieee754_sqrt+0x134>
 801c8c6:	0052      	lsls	r2, r2, #1
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	e7ef      	b.n	801c8ac <__ieee754_sqrt+0x138>
 801c8cc:	46a0      	mov	r8, r4
 801c8ce:	e7bf      	b.n	801c850 <__ieee754_sqrt+0xdc>
 801c8d0:	7ff00000 	.word	0x7ff00000

0801c8d4 <__ieee754_sqrtf>:
 801c8d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c8d8:	4770      	bx	lr
 801c8da:	0000      	movs	r0, r0
 801c8dc:	0000      	movs	r0, r0
	...

0801c8e0 <__kernel_cos>:
 801c8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e4:	ec59 8b10 	vmov	r8, r9, d0
 801c8e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801c8ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801c8f0:	ed2d 8b02 	vpush	{d8}
 801c8f4:	eeb0 8a41 	vmov.f32	s16, s2
 801c8f8:	eef0 8a61 	vmov.f32	s17, s3
 801c8fc:	da07      	bge.n	801c90e <__kernel_cos+0x2e>
 801c8fe:	ee10 0a10 	vmov	r0, s0
 801c902:	4649      	mov	r1, r9
 801c904:	f7e4 f938 	bl	8000b78 <__aeabi_d2iz>
 801c908:	2800      	cmp	r0, #0
 801c90a:	f000 8089 	beq.w	801ca20 <__kernel_cos+0x140>
 801c90e:	4642      	mov	r2, r8
 801c910:	464b      	mov	r3, r9
 801c912:	4640      	mov	r0, r8
 801c914:	4649      	mov	r1, r9
 801c916:	f7e3 fe7f 	bl	8000618 <__aeabi_dmul>
 801c91a:	2200      	movs	r2, #0
 801c91c:	4b4e      	ldr	r3, [pc, #312]	; (801ca58 <__kernel_cos+0x178>)
 801c91e:	4604      	mov	r4, r0
 801c920:	460d      	mov	r5, r1
 801c922:	f7e3 fe79 	bl	8000618 <__aeabi_dmul>
 801c926:	a340      	add	r3, pc, #256	; (adr r3, 801ca28 <__kernel_cos+0x148>)
 801c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c92c:	4682      	mov	sl, r0
 801c92e:	468b      	mov	fp, r1
 801c930:	4620      	mov	r0, r4
 801c932:	4629      	mov	r1, r5
 801c934:	f7e3 fe70 	bl	8000618 <__aeabi_dmul>
 801c938:	a33d      	add	r3, pc, #244	; (adr r3, 801ca30 <__kernel_cos+0x150>)
 801c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c93e:	f7e3 fcb5 	bl	80002ac <__adddf3>
 801c942:	4622      	mov	r2, r4
 801c944:	462b      	mov	r3, r5
 801c946:	f7e3 fe67 	bl	8000618 <__aeabi_dmul>
 801c94a:	a33b      	add	r3, pc, #236	; (adr r3, 801ca38 <__kernel_cos+0x158>)
 801c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c950:	f7e3 fcaa 	bl	80002a8 <__aeabi_dsub>
 801c954:	4622      	mov	r2, r4
 801c956:	462b      	mov	r3, r5
 801c958:	f7e3 fe5e 	bl	8000618 <__aeabi_dmul>
 801c95c:	a338      	add	r3, pc, #224	; (adr r3, 801ca40 <__kernel_cos+0x160>)
 801c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c962:	f7e3 fca3 	bl	80002ac <__adddf3>
 801c966:	4622      	mov	r2, r4
 801c968:	462b      	mov	r3, r5
 801c96a:	f7e3 fe55 	bl	8000618 <__aeabi_dmul>
 801c96e:	a336      	add	r3, pc, #216	; (adr r3, 801ca48 <__kernel_cos+0x168>)
 801c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c974:	f7e3 fc98 	bl	80002a8 <__aeabi_dsub>
 801c978:	4622      	mov	r2, r4
 801c97a:	462b      	mov	r3, r5
 801c97c:	f7e3 fe4c 	bl	8000618 <__aeabi_dmul>
 801c980:	a333      	add	r3, pc, #204	; (adr r3, 801ca50 <__kernel_cos+0x170>)
 801c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c986:	f7e3 fc91 	bl	80002ac <__adddf3>
 801c98a:	4622      	mov	r2, r4
 801c98c:	462b      	mov	r3, r5
 801c98e:	f7e3 fe43 	bl	8000618 <__aeabi_dmul>
 801c992:	4622      	mov	r2, r4
 801c994:	462b      	mov	r3, r5
 801c996:	f7e3 fe3f 	bl	8000618 <__aeabi_dmul>
 801c99a:	ec53 2b18 	vmov	r2, r3, d8
 801c99e:	4604      	mov	r4, r0
 801c9a0:	460d      	mov	r5, r1
 801c9a2:	4640      	mov	r0, r8
 801c9a4:	4649      	mov	r1, r9
 801c9a6:	f7e3 fe37 	bl	8000618 <__aeabi_dmul>
 801c9aa:	460b      	mov	r3, r1
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	4629      	mov	r1, r5
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	f7e3 fc79 	bl	80002a8 <__aeabi_dsub>
 801c9b6:	4b29      	ldr	r3, [pc, #164]	; (801ca5c <__kernel_cos+0x17c>)
 801c9b8:	429e      	cmp	r6, r3
 801c9ba:	4680      	mov	r8, r0
 801c9bc:	4689      	mov	r9, r1
 801c9be:	dc11      	bgt.n	801c9e4 <__kernel_cos+0x104>
 801c9c0:	4602      	mov	r2, r0
 801c9c2:	460b      	mov	r3, r1
 801c9c4:	4650      	mov	r0, sl
 801c9c6:	4659      	mov	r1, fp
 801c9c8:	f7e3 fc6e 	bl	80002a8 <__aeabi_dsub>
 801c9cc:	460b      	mov	r3, r1
 801c9ce:	4924      	ldr	r1, [pc, #144]	; (801ca60 <__kernel_cos+0x180>)
 801c9d0:	4602      	mov	r2, r0
 801c9d2:	2000      	movs	r0, #0
 801c9d4:	f7e3 fc68 	bl	80002a8 <__aeabi_dsub>
 801c9d8:	ecbd 8b02 	vpop	{d8}
 801c9dc:	ec41 0b10 	vmov	d0, r0, r1
 801c9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e4:	4b1f      	ldr	r3, [pc, #124]	; (801ca64 <__kernel_cos+0x184>)
 801c9e6:	491e      	ldr	r1, [pc, #120]	; (801ca60 <__kernel_cos+0x180>)
 801c9e8:	429e      	cmp	r6, r3
 801c9ea:	bfcc      	ite	gt
 801c9ec:	4d1e      	ldrgt	r5, [pc, #120]	; (801ca68 <__kernel_cos+0x188>)
 801c9ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801c9f2:	2400      	movs	r4, #0
 801c9f4:	4622      	mov	r2, r4
 801c9f6:	462b      	mov	r3, r5
 801c9f8:	2000      	movs	r0, #0
 801c9fa:	f7e3 fc55 	bl	80002a8 <__aeabi_dsub>
 801c9fe:	4622      	mov	r2, r4
 801ca00:	4606      	mov	r6, r0
 801ca02:	460f      	mov	r7, r1
 801ca04:	462b      	mov	r3, r5
 801ca06:	4650      	mov	r0, sl
 801ca08:	4659      	mov	r1, fp
 801ca0a:	f7e3 fc4d 	bl	80002a8 <__aeabi_dsub>
 801ca0e:	4642      	mov	r2, r8
 801ca10:	464b      	mov	r3, r9
 801ca12:	f7e3 fc49 	bl	80002a8 <__aeabi_dsub>
 801ca16:	4602      	mov	r2, r0
 801ca18:	460b      	mov	r3, r1
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	4639      	mov	r1, r7
 801ca1e:	e7d9      	b.n	801c9d4 <__kernel_cos+0xf4>
 801ca20:	2000      	movs	r0, #0
 801ca22:	490f      	ldr	r1, [pc, #60]	; (801ca60 <__kernel_cos+0x180>)
 801ca24:	e7d8      	b.n	801c9d8 <__kernel_cos+0xf8>
 801ca26:	bf00      	nop
 801ca28:	be8838d4 	.word	0xbe8838d4
 801ca2c:	bda8fae9 	.word	0xbda8fae9
 801ca30:	bdb4b1c4 	.word	0xbdb4b1c4
 801ca34:	3e21ee9e 	.word	0x3e21ee9e
 801ca38:	809c52ad 	.word	0x809c52ad
 801ca3c:	3e927e4f 	.word	0x3e927e4f
 801ca40:	19cb1590 	.word	0x19cb1590
 801ca44:	3efa01a0 	.word	0x3efa01a0
 801ca48:	16c15177 	.word	0x16c15177
 801ca4c:	3f56c16c 	.word	0x3f56c16c
 801ca50:	5555554c 	.word	0x5555554c
 801ca54:	3fa55555 	.word	0x3fa55555
 801ca58:	3fe00000 	.word	0x3fe00000
 801ca5c:	3fd33332 	.word	0x3fd33332
 801ca60:	3ff00000 	.word	0x3ff00000
 801ca64:	3fe90000 	.word	0x3fe90000
 801ca68:	3fd20000 	.word	0x3fd20000
 801ca6c:	00000000 	.word	0x00000000

0801ca70 <__kernel_rem_pio2>:
 801ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca74:	ed2d 8b02 	vpush	{d8}
 801ca78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801ca7c:	1ed4      	subs	r4, r2, #3
 801ca7e:	9308      	str	r3, [sp, #32]
 801ca80:	9101      	str	r1, [sp, #4]
 801ca82:	4bc5      	ldr	r3, [pc, #788]	; (801cd98 <__kernel_rem_pio2+0x328>)
 801ca84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801ca86:	9009      	str	r0, [sp, #36]	; 0x24
 801ca88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ca8c:	9304      	str	r3, [sp, #16]
 801ca8e:	9b08      	ldr	r3, [sp, #32]
 801ca90:	3b01      	subs	r3, #1
 801ca92:	9307      	str	r3, [sp, #28]
 801ca94:	2318      	movs	r3, #24
 801ca96:	fb94 f4f3 	sdiv	r4, r4, r3
 801ca9a:	f06f 0317 	mvn.w	r3, #23
 801ca9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801caa2:	fb04 3303 	mla	r3, r4, r3, r3
 801caa6:	eb03 0a02 	add.w	sl, r3, r2
 801caaa:	9b04      	ldr	r3, [sp, #16]
 801caac:	9a07      	ldr	r2, [sp, #28]
 801caae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801cd88 <__kernel_rem_pio2+0x318>
 801cab2:	eb03 0802 	add.w	r8, r3, r2
 801cab6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801cab8:	1aa7      	subs	r7, r4, r2
 801caba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801cabe:	ae22      	add	r6, sp, #136	; 0x88
 801cac0:	2500      	movs	r5, #0
 801cac2:	4545      	cmp	r5, r8
 801cac4:	dd13      	ble.n	801caee <__kernel_rem_pio2+0x7e>
 801cac6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801cd88 <__kernel_rem_pio2+0x318>
 801caca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801cace:	2600      	movs	r6, #0
 801cad0:	9b04      	ldr	r3, [sp, #16]
 801cad2:	429e      	cmp	r6, r3
 801cad4:	dc32      	bgt.n	801cb3c <__kernel_rem_pio2+0xcc>
 801cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cad8:	9302      	str	r3, [sp, #8]
 801cada:	9b08      	ldr	r3, [sp, #32]
 801cadc:	199d      	adds	r5, r3, r6
 801cade:	ab22      	add	r3, sp, #136	; 0x88
 801cae0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cae4:	9306      	str	r3, [sp, #24]
 801cae6:	ec59 8b18 	vmov	r8, r9, d8
 801caea:	2700      	movs	r7, #0
 801caec:	e01f      	b.n	801cb2e <__kernel_rem_pio2+0xbe>
 801caee:	42ef      	cmn	r7, r5
 801caf0:	d407      	bmi.n	801cb02 <__kernel_rem_pio2+0x92>
 801caf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801caf6:	f7e3 fd25 	bl	8000544 <__aeabi_i2d>
 801cafa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801cafe:	3501      	adds	r5, #1
 801cb00:	e7df      	b.n	801cac2 <__kernel_rem_pio2+0x52>
 801cb02:	ec51 0b18 	vmov	r0, r1, d8
 801cb06:	e7f8      	b.n	801cafa <__kernel_rem_pio2+0x8a>
 801cb08:	9906      	ldr	r1, [sp, #24]
 801cb0a:	9d02      	ldr	r5, [sp, #8]
 801cb0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801cb10:	9106      	str	r1, [sp, #24]
 801cb12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801cb16:	9502      	str	r5, [sp, #8]
 801cb18:	f7e3 fd7e 	bl	8000618 <__aeabi_dmul>
 801cb1c:	4602      	mov	r2, r0
 801cb1e:	460b      	mov	r3, r1
 801cb20:	4640      	mov	r0, r8
 801cb22:	4649      	mov	r1, r9
 801cb24:	f7e3 fbc2 	bl	80002ac <__adddf3>
 801cb28:	3701      	adds	r7, #1
 801cb2a:	4680      	mov	r8, r0
 801cb2c:	4689      	mov	r9, r1
 801cb2e:	9b07      	ldr	r3, [sp, #28]
 801cb30:	429f      	cmp	r7, r3
 801cb32:	dde9      	ble.n	801cb08 <__kernel_rem_pio2+0x98>
 801cb34:	e8eb 8902 	strd	r8, r9, [fp], #8
 801cb38:	3601      	adds	r6, #1
 801cb3a:	e7c9      	b.n	801cad0 <__kernel_rem_pio2+0x60>
 801cb3c:	9b04      	ldr	r3, [sp, #16]
 801cb3e:	aa0e      	add	r2, sp, #56	; 0x38
 801cb40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb44:	930c      	str	r3, [sp, #48]	; 0x30
 801cb46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801cb48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cb4c:	9c04      	ldr	r4, [sp, #16]
 801cb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb50:	ab9a      	add	r3, sp, #616	; 0x268
 801cb52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801cb56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cb5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cb5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801cb62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801cb66:	ab9a      	add	r3, sp, #616	; 0x268
 801cb68:	445b      	add	r3, fp
 801cb6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801cb6e:	2500      	movs	r5, #0
 801cb70:	1b63      	subs	r3, r4, r5
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	dc78      	bgt.n	801cc68 <__kernel_rem_pio2+0x1f8>
 801cb76:	4650      	mov	r0, sl
 801cb78:	ec49 8b10 	vmov	d0, r8, r9
 801cb7c:	f000 fe3c 	bl	801d7f8 <scalbn>
 801cb80:	ec57 6b10 	vmov	r6, r7, d0
 801cb84:	2200      	movs	r2, #0
 801cb86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801cb8a:	ee10 0a10 	vmov	r0, s0
 801cb8e:	4639      	mov	r1, r7
 801cb90:	f7e3 fd42 	bl	8000618 <__aeabi_dmul>
 801cb94:	ec41 0b10 	vmov	d0, r0, r1
 801cb98:	f000 fd1a 	bl	801d5d0 <floor>
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	ec51 0b10 	vmov	r0, r1, d0
 801cba2:	4b7e      	ldr	r3, [pc, #504]	; (801cd9c <__kernel_rem_pio2+0x32c>)
 801cba4:	f7e3 fd38 	bl	8000618 <__aeabi_dmul>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	460b      	mov	r3, r1
 801cbac:	4630      	mov	r0, r6
 801cbae:	4639      	mov	r1, r7
 801cbb0:	f7e3 fb7a 	bl	80002a8 <__aeabi_dsub>
 801cbb4:	460f      	mov	r7, r1
 801cbb6:	4606      	mov	r6, r0
 801cbb8:	f7e3 ffde 	bl	8000b78 <__aeabi_d2iz>
 801cbbc:	9006      	str	r0, [sp, #24]
 801cbbe:	f7e3 fcc1 	bl	8000544 <__aeabi_i2d>
 801cbc2:	4602      	mov	r2, r0
 801cbc4:	460b      	mov	r3, r1
 801cbc6:	4630      	mov	r0, r6
 801cbc8:	4639      	mov	r1, r7
 801cbca:	f7e3 fb6d 	bl	80002a8 <__aeabi_dsub>
 801cbce:	f1ba 0f00 	cmp.w	sl, #0
 801cbd2:	4606      	mov	r6, r0
 801cbd4:	460f      	mov	r7, r1
 801cbd6:	dd6c      	ble.n	801ccb2 <__kernel_rem_pio2+0x242>
 801cbd8:	1e62      	subs	r2, r4, #1
 801cbda:	ab0e      	add	r3, sp, #56	; 0x38
 801cbdc:	f1ca 0118 	rsb	r1, sl, #24
 801cbe0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cbe4:	9d06      	ldr	r5, [sp, #24]
 801cbe6:	fa40 f301 	asr.w	r3, r0, r1
 801cbea:	441d      	add	r5, r3
 801cbec:	408b      	lsls	r3, r1
 801cbee:	1ac0      	subs	r0, r0, r3
 801cbf0:	ab0e      	add	r3, sp, #56	; 0x38
 801cbf2:	9506      	str	r5, [sp, #24]
 801cbf4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801cbf8:	f1ca 0317 	rsb	r3, sl, #23
 801cbfc:	fa40 f303 	asr.w	r3, r0, r3
 801cc00:	9302      	str	r3, [sp, #8]
 801cc02:	9b02      	ldr	r3, [sp, #8]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	dd62      	ble.n	801ccce <__kernel_rem_pio2+0x25e>
 801cc08:	9b06      	ldr	r3, [sp, #24]
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	3301      	adds	r3, #1
 801cc0e:	9306      	str	r3, [sp, #24]
 801cc10:	4615      	mov	r5, r2
 801cc12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801cc16:	4294      	cmp	r4, r2
 801cc18:	f300 8095 	bgt.w	801cd46 <__kernel_rem_pio2+0x2d6>
 801cc1c:	f1ba 0f00 	cmp.w	sl, #0
 801cc20:	dd07      	ble.n	801cc32 <__kernel_rem_pio2+0x1c2>
 801cc22:	f1ba 0f01 	cmp.w	sl, #1
 801cc26:	f000 80a2 	beq.w	801cd6e <__kernel_rem_pio2+0x2fe>
 801cc2a:	f1ba 0f02 	cmp.w	sl, #2
 801cc2e:	f000 80c1 	beq.w	801cdb4 <__kernel_rem_pio2+0x344>
 801cc32:	9b02      	ldr	r3, [sp, #8]
 801cc34:	2b02      	cmp	r3, #2
 801cc36:	d14a      	bne.n	801ccce <__kernel_rem_pio2+0x25e>
 801cc38:	4632      	mov	r2, r6
 801cc3a:	463b      	mov	r3, r7
 801cc3c:	2000      	movs	r0, #0
 801cc3e:	4958      	ldr	r1, [pc, #352]	; (801cda0 <__kernel_rem_pio2+0x330>)
 801cc40:	f7e3 fb32 	bl	80002a8 <__aeabi_dsub>
 801cc44:	4606      	mov	r6, r0
 801cc46:	460f      	mov	r7, r1
 801cc48:	2d00      	cmp	r5, #0
 801cc4a:	d040      	beq.n	801ccce <__kernel_rem_pio2+0x25e>
 801cc4c:	4650      	mov	r0, sl
 801cc4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801cd90 <__kernel_rem_pio2+0x320>
 801cc52:	f000 fdd1 	bl	801d7f8 <scalbn>
 801cc56:	4630      	mov	r0, r6
 801cc58:	4639      	mov	r1, r7
 801cc5a:	ec53 2b10 	vmov	r2, r3, d0
 801cc5e:	f7e3 fb23 	bl	80002a8 <__aeabi_dsub>
 801cc62:	4606      	mov	r6, r0
 801cc64:	460f      	mov	r7, r1
 801cc66:	e032      	b.n	801ccce <__kernel_rem_pio2+0x25e>
 801cc68:	2200      	movs	r2, #0
 801cc6a:	4b4e      	ldr	r3, [pc, #312]	; (801cda4 <__kernel_rem_pio2+0x334>)
 801cc6c:	4640      	mov	r0, r8
 801cc6e:	4649      	mov	r1, r9
 801cc70:	f7e3 fcd2 	bl	8000618 <__aeabi_dmul>
 801cc74:	f7e3 ff80 	bl	8000b78 <__aeabi_d2iz>
 801cc78:	f7e3 fc64 	bl	8000544 <__aeabi_i2d>
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	4b4a      	ldr	r3, [pc, #296]	; (801cda8 <__kernel_rem_pio2+0x338>)
 801cc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc84:	f7e3 fcc8 	bl	8000618 <__aeabi_dmul>
 801cc88:	4602      	mov	r2, r0
 801cc8a:	460b      	mov	r3, r1
 801cc8c:	4640      	mov	r0, r8
 801cc8e:	4649      	mov	r1, r9
 801cc90:	f7e3 fb0a 	bl	80002a8 <__aeabi_dsub>
 801cc94:	f7e3 ff70 	bl	8000b78 <__aeabi_d2iz>
 801cc98:	ab0e      	add	r3, sp, #56	; 0x38
 801cc9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801cc9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801cca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cca6:	f7e3 fb01 	bl	80002ac <__adddf3>
 801ccaa:	3501      	adds	r5, #1
 801ccac:	4680      	mov	r8, r0
 801ccae:	4689      	mov	r9, r1
 801ccb0:	e75e      	b.n	801cb70 <__kernel_rem_pio2+0x100>
 801ccb2:	d105      	bne.n	801ccc0 <__kernel_rem_pio2+0x250>
 801ccb4:	1e63      	subs	r3, r4, #1
 801ccb6:	aa0e      	add	r2, sp, #56	; 0x38
 801ccb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ccbc:	15c3      	asrs	r3, r0, #23
 801ccbe:	e79f      	b.n	801cc00 <__kernel_rem_pio2+0x190>
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	4b3a      	ldr	r3, [pc, #232]	; (801cdac <__kernel_rem_pio2+0x33c>)
 801ccc4:	f7e3 ff2e 	bl	8000b24 <__aeabi_dcmpge>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d139      	bne.n	801cd40 <__kernel_rem_pio2+0x2d0>
 801cccc:	9002      	str	r0, [sp, #8]
 801ccce:	2200      	movs	r2, #0
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	4630      	mov	r0, r6
 801ccd4:	4639      	mov	r1, r7
 801ccd6:	f7e3 ff07 	bl	8000ae8 <__aeabi_dcmpeq>
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	f000 80c7 	beq.w	801ce6e <__kernel_rem_pio2+0x3fe>
 801cce0:	1e65      	subs	r5, r4, #1
 801cce2:	462b      	mov	r3, r5
 801cce4:	2200      	movs	r2, #0
 801cce6:	9904      	ldr	r1, [sp, #16]
 801cce8:	428b      	cmp	r3, r1
 801ccea:	da6a      	bge.n	801cdc2 <__kernel_rem_pio2+0x352>
 801ccec:	2a00      	cmp	r2, #0
 801ccee:	f000 8088 	beq.w	801ce02 <__kernel_rem_pio2+0x392>
 801ccf2:	ab0e      	add	r3, sp, #56	; 0x38
 801ccf4:	f1aa 0a18 	sub.w	sl, sl, #24
 801ccf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	f000 80b4 	beq.w	801ce6a <__kernel_rem_pio2+0x3fa>
 801cd02:	4650      	mov	r0, sl
 801cd04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801cd90 <__kernel_rem_pio2+0x320>
 801cd08:	f000 fd76 	bl	801d7f8 <scalbn>
 801cd0c:	00ec      	lsls	r4, r5, #3
 801cd0e:	ab72      	add	r3, sp, #456	; 0x1c8
 801cd10:	191e      	adds	r6, r3, r4
 801cd12:	ec59 8b10 	vmov	r8, r9, d0
 801cd16:	f106 0a08 	add.w	sl, r6, #8
 801cd1a:	462f      	mov	r7, r5
 801cd1c:	2f00      	cmp	r7, #0
 801cd1e:	f280 80df 	bge.w	801cee0 <__kernel_rem_pio2+0x470>
 801cd22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801cd88 <__kernel_rem_pio2+0x318>
 801cd26:	f04f 0a00 	mov.w	sl, #0
 801cd2a:	eba5 030a 	sub.w	r3, r5, sl
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	f2c0 810a 	blt.w	801cf48 <__kernel_rem_pio2+0x4d8>
 801cd34:	f8df b078 	ldr.w	fp, [pc, #120]	; 801cdb0 <__kernel_rem_pio2+0x340>
 801cd38:	ec59 8b18 	vmov	r8, r9, d8
 801cd3c:	2700      	movs	r7, #0
 801cd3e:	e0f5      	b.n	801cf2c <__kernel_rem_pio2+0x4bc>
 801cd40:	2302      	movs	r3, #2
 801cd42:	9302      	str	r3, [sp, #8]
 801cd44:	e760      	b.n	801cc08 <__kernel_rem_pio2+0x198>
 801cd46:	ab0e      	add	r3, sp, #56	; 0x38
 801cd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd4c:	b94d      	cbnz	r5, 801cd62 <__kernel_rem_pio2+0x2f2>
 801cd4e:	b12b      	cbz	r3, 801cd5c <__kernel_rem_pio2+0x2ec>
 801cd50:	a80e      	add	r0, sp, #56	; 0x38
 801cd52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801cd56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801cd5a:	2301      	movs	r3, #1
 801cd5c:	3201      	adds	r2, #1
 801cd5e:	461d      	mov	r5, r3
 801cd60:	e759      	b.n	801cc16 <__kernel_rem_pio2+0x1a6>
 801cd62:	a80e      	add	r0, sp, #56	; 0x38
 801cd64:	1acb      	subs	r3, r1, r3
 801cd66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801cd6a:	462b      	mov	r3, r5
 801cd6c:	e7f6      	b.n	801cd5c <__kernel_rem_pio2+0x2ec>
 801cd6e:	1e62      	subs	r2, r4, #1
 801cd70:	ab0e      	add	r3, sp, #56	; 0x38
 801cd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cd7a:	a90e      	add	r1, sp, #56	; 0x38
 801cd7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cd80:	e757      	b.n	801cc32 <__kernel_rem_pio2+0x1c2>
 801cd82:	bf00      	nop
 801cd84:	f3af 8000 	nop.w
	...
 801cd94:	3ff00000 	.word	0x3ff00000
 801cd98:	0801e840 	.word	0x0801e840
 801cd9c:	40200000 	.word	0x40200000
 801cda0:	3ff00000 	.word	0x3ff00000
 801cda4:	3e700000 	.word	0x3e700000
 801cda8:	41700000 	.word	0x41700000
 801cdac:	3fe00000 	.word	0x3fe00000
 801cdb0:	0801e800 	.word	0x0801e800
 801cdb4:	1e62      	subs	r2, r4, #1
 801cdb6:	ab0e      	add	r3, sp, #56	; 0x38
 801cdb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cdc0:	e7db      	b.n	801cd7a <__kernel_rem_pio2+0x30a>
 801cdc2:	a90e      	add	r1, sp, #56	; 0x38
 801cdc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cdc8:	3b01      	subs	r3, #1
 801cdca:	430a      	orrs	r2, r1
 801cdcc:	e78b      	b.n	801cce6 <__kernel_rem_pio2+0x276>
 801cdce:	3301      	adds	r3, #1
 801cdd0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801cdd4:	2900      	cmp	r1, #0
 801cdd6:	d0fa      	beq.n	801cdce <__kernel_rem_pio2+0x35e>
 801cdd8:	9a08      	ldr	r2, [sp, #32]
 801cdda:	4422      	add	r2, r4
 801cddc:	00d2      	lsls	r2, r2, #3
 801cdde:	a922      	add	r1, sp, #136	; 0x88
 801cde0:	18e3      	adds	r3, r4, r3
 801cde2:	9206      	str	r2, [sp, #24]
 801cde4:	440a      	add	r2, r1
 801cde6:	9302      	str	r3, [sp, #8]
 801cde8:	f10b 0108 	add.w	r1, fp, #8
 801cdec:	f102 0308 	add.w	r3, r2, #8
 801cdf0:	1c66      	adds	r6, r4, #1
 801cdf2:	910a      	str	r1, [sp, #40]	; 0x28
 801cdf4:	2500      	movs	r5, #0
 801cdf6:	930d      	str	r3, [sp, #52]	; 0x34
 801cdf8:	9b02      	ldr	r3, [sp, #8]
 801cdfa:	42b3      	cmp	r3, r6
 801cdfc:	da04      	bge.n	801ce08 <__kernel_rem_pio2+0x398>
 801cdfe:	461c      	mov	r4, r3
 801ce00:	e6a6      	b.n	801cb50 <__kernel_rem_pio2+0xe0>
 801ce02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce04:	2301      	movs	r3, #1
 801ce06:	e7e3      	b.n	801cdd0 <__kernel_rem_pio2+0x360>
 801ce08:	9b06      	ldr	r3, [sp, #24]
 801ce0a:	18ef      	adds	r7, r5, r3
 801ce0c:	ab22      	add	r3, sp, #136	; 0x88
 801ce0e:	441f      	add	r7, r3
 801ce10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ce16:	f7e3 fb95 	bl	8000544 <__aeabi_i2d>
 801ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce1c:	461c      	mov	r4, r3
 801ce1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce20:	e9c7 0100 	strd	r0, r1, [r7]
 801ce24:	eb03 0b05 	add.w	fp, r3, r5
 801ce28:	2700      	movs	r7, #0
 801ce2a:	f04f 0800 	mov.w	r8, #0
 801ce2e:	f04f 0900 	mov.w	r9, #0
 801ce32:	9b07      	ldr	r3, [sp, #28]
 801ce34:	429f      	cmp	r7, r3
 801ce36:	dd08      	ble.n	801ce4a <__kernel_rem_pio2+0x3da>
 801ce38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce3a:	aa72      	add	r2, sp, #456	; 0x1c8
 801ce3c:	18eb      	adds	r3, r5, r3
 801ce3e:	4413      	add	r3, r2
 801ce40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801ce44:	3601      	adds	r6, #1
 801ce46:	3508      	adds	r5, #8
 801ce48:	e7d6      	b.n	801cdf8 <__kernel_rem_pio2+0x388>
 801ce4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ce4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ce52:	f7e3 fbe1 	bl	8000618 <__aeabi_dmul>
 801ce56:	4602      	mov	r2, r0
 801ce58:	460b      	mov	r3, r1
 801ce5a:	4640      	mov	r0, r8
 801ce5c:	4649      	mov	r1, r9
 801ce5e:	f7e3 fa25 	bl	80002ac <__adddf3>
 801ce62:	3701      	adds	r7, #1
 801ce64:	4680      	mov	r8, r0
 801ce66:	4689      	mov	r9, r1
 801ce68:	e7e3      	b.n	801ce32 <__kernel_rem_pio2+0x3c2>
 801ce6a:	3d01      	subs	r5, #1
 801ce6c:	e741      	b.n	801ccf2 <__kernel_rem_pio2+0x282>
 801ce6e:	f1ca 0000 	rsb	r0, sl, #0
 801ce72:	ec47 6b10 	vmov	d0, r6, r7
 801ce76:	f000 fcbf 	bl	801d7f8 <scalbn>
 801ce7a:	ec57 6b10 	vmov	r6, r7, d0
 801ce7e:	2200      	movs	r2, #0
 801ce80:	4b99      	ldr	r3, [pc, #612]	; (801d0e8 <__kernel_rem_pio2+0x678>)
 801ce82:	ee10 0a10 	vmov	r0, s0
 801ce86:	4639      	mov	r1, r7
 801ce88:	f7e3 fe4c 	bl	8000b24 <__aeabi_dcmpge>
 801ce8c:	b1f8      	cbz	r0, 801cece <__kernel_rem_pio2+0x45e>
 801ce8e:	2200      	movs	r2, #0
 801ce90:	4b96      	ldr	r3, [pc, #600]	; (801d0ec <__kernel_rem_pio2+0x67c>)
 801ce92:	4630      	mov	r0, r6
 801ce94:	4639      	mov	r1, r7
 801ce96:	f7e3 fbbf 	bl	8000618 <__aeabi_dmul>
 801ce9a:	f7e3 fe6d 	bl	8000b78 <__aeabi_d2iz>
 801ce9e:	4680      	mov	r8, r0
 801cea0:	f7e3 fb50 	bl	8000544 <__aeabi_i2d>
 801cea4:	2200      	movs	r2, #0
 801cea6:	4b90      	ldr	r3, [pc, #576]	; (801d0e8 <__kernel_rem_pio2+0x678>)
 801cea8:	f7e3 fbb6 	bl	8000618 <__aeabi_dmul>
 801ceac:	460b      	mov	r3, r1
 801ceae:	4602      	mov	r2, r0
 801ceb0:	4639      	mov	r1, r7
 801ceb2:	4630      	mov	r0, r6
 801ceb4:	f7e3 f9f8 	bl	80002a8 <__aeabi_dsub>
 801ceb8:	f7e3 fe5e 	bl	8000b78 <__aeabi_d2iz>
 801cebc:	1c65      	adds	r5, r4, #1
 801cebe:	ab0e      	add	r3, sp, #56	; 0x38
 801cec0:	f10a 0a18 	add.w	sl, sl, #24
 801cec4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cec8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801cecc:	e719      	b.n	801cd02 <__kernel_rem_pio2+0x292>
 801cece:	4630      	mov	r0, r6
 801ced0:	4639      	mov	r1, r7
 801ced2:	f7e3 fe51 	bl	8000b78 <__aeabi_d2iz>
 801ced6:	ab0e      	add	r3, sp, #56	; 0x38
 801ced8:	4625      	mov	r5, r4
 801ceda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cede:	e710      	b.n	801cd02 <__kernel_rem_pio2+0x292>
 801cee0:	ab0e      	add	r3, sp, #56	; 0x38
 801cee2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801cee6:	f7e3 fb2d 	bl	8000544 <__aeabi_i2d>
 801ceea:	4642      	mov	r2, r8
 801ceec:	464b      	mov	r3, r9
 801ceee:	f7e3 fb93 	bl	8000618 <__aeabi_dmul>
 801cef2:	2200      	movs	r2, #0
 801cef4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801cef8:	4b7c      	ldr	r3, [pc, #496]	; (801d0ec <__kernel_rem_pio2+0x67c>)
 801cefa:	4640      	mov	r0, r8
 801cefc:	4649      	mov	r1, r9
 801cefe:	f7e3 fb8b 	bl	8000618 <__aeabi_dmul>
 801cf02:	3f01      	subs	r7, #1
 801cf04:	4680      	mov	r8, r0
 801cf06:	4689      	mov	r9, r1
 801cf08:	e708      	b.n	801cd1c <__kernel_rem_pio2+0x2ac>
 801cf0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801cf16:	f7e3 fb7f 	bl	8000618 <__aeabi_dmul>
 801cf1a:	4602      	mov	r2, r0
 801cf1c:	460b      	mov	r3, r1
 801cf1e:	4640      	mov	r0, r8
 801cf20:	4649      	mov	r1, r9
 801cf22:	f7e3 f9c3 	bl	80002ac <__adddf3>
 801cf26:	3701      	adds	r7, #1
 801cf28:	4680      	mov	r8, r0
 801cf2a:	4689      	mov	r9, r1
 801cf2c:	9b04      	ldr	r3, [sp, #16]
 801cf2e:	429f      	cmp	r7, r3
 801cf30:	dc01      	bgt.n	801cf36 <__kernel_rem_pio2+0x4c6>
 801cf32:	45ba      	cmp	sl, r7
 801cf34:	dae9      	bge.n	801cf0a <__kernel_rem_pio2+0x49a>
 801cf36:	ab4a      	add	r3, sp, #296	; 0x128
 801cf38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cf3c:	e9c3 8900 	strd	r8, r9, [r3]
 801cf40:	f10a 0a01 	add.w	sl, sl, #1
 801cf44:	3e08      	subs	r6, #8
 801cf46:	e6f0      	b.n	801cd2a <__kernel_rem_pio2+0x2ba>
 801cf48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801cf4a:	2b03      	cmp	r3, #3
 801cf4c:	d85b      	bhi.n	801d006 <__kernel_rem_pio2+0x596>
 801cf4e:	e8df f003 	tbb	[pc, r3]
 801cf52:	264a      	.short	0x264a
 801cf54:	0226      	.short	0x0226
 801cf56:	ab9a      	add	r3, sp, #616	; 0x268
 801cf58:	441c      	add	r4, r3
 801cf5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801cf5e:	46a2      	mov	sl, r4
 801cf60:	46ab      	mov	fp, r5
 801cf62:	f1bb 0f00 	cmp.w	fp, #0
 801cf66:	dc6c      	bgt.n	801d042 <__kernel_rem_pio2+0x5d2>
 801cf68:	46a2      	mov	sl, r4
 801cf6a:	46ab      	mov	fp, r5
 801cf6c:	f1bb 0f01 	cmp.w	fp, #1
 801cf70:	f300 8086 	bgt.w	801d080 <__kernel_rem_pio2+0x610>
 801cf74:	2000      	movs	r0, #0
 801cf76:	2100      	movs	r1, #0
 801cf78:	2d01      	cmp	r5, #1
 801cf7a:	f300 80a0 	bgt.w	801d0be <__kernel_rem_pio2+0x64e>
 801cf7e:	9b02      	ldr	r3, [sp, #8]
 801cf80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801cf84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	f040 809e 	bne.w	801d0ca <__kernel_rem_pio2+0x65a>
 801cf8e:	9b01      	ldr	r3, [sp, #4]
 801cf90:	e9c3 7800 	strd	r7, r8, [r3]
 801cf94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801cf98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801cf9c:	e033      	b.n	801d006 <__kernel_rem_pio2+0x596>
 801cf9e:	3408      	adds	r4, #8
 801cfa0:	ab4a      	add	r3, sp, #296	; 0x128
 801cfa2:	441c      	add	r4, r3
 801cfa4:	462e      	mov	r6, r5
 801cfa6:	2000      	movs	r0, #0
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	2e00      	cmp	r6, #0
 801cfac:	da3a      	bge.n	801d024 <__kernel_rem_pio2+0x5b4>
 801cfae:	9b02      	ldr	r3, [sp, #8]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d03d      	beq.n	801d030 <__kernel_rem_pio2+0x5c0>
 801cfb4:	4602      	mov	r2, r0
 801cfb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cfba:	9c01      	ldr	r4, [sp, #4]
 801cfbc:	e9c4 2300 	strd	r2, r3, [r4]
 801cfc0:	4602      	mov	r2, r0
 801cfc2:	460b      	mov	r3, r1
 801cfc4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801cfc8:	f7e3 f96e 	bl	80002a8 <__aeabi_dsub>
 801cfcc:	ae4c      	add	r6, sp, #304	; 0x130
 801cfce:	2401      	movs	r4, #1
 801cfd0:	42a5      	cmp	r5, r4
 801cfd2:	da30      	bge.n	801d036 <__kernel_rem_pio2+0x5c6>
 801cfd4:	9b02      	ldr	r3, [sp, #8]
 801cfd6:	b113      	cbz	r3, 801cfde <__kernel_rem_pio2+0x56e>
 801cfd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cfdc:	4619      	mov	r1, r3
 801cfde:	9b01      	ldr	r3, [sp, #4]
 801cfe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801cfe4:	e00f      	b.n	801d006 <__kernel_rem_pio2+0x596>
 801cfe6:	ab9a      	add	r3, sp, #616	; 0x268
 801cfe8:	441c      	add	r4, r3
 801cfea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801cfee:	2000      	movs	r0, #0
 801cff0:	2100      	movs	r1, #0
 801cff2:	2d00      	cmp	r5, #0
 801cff4:	da10      	bge.n	801d018 <__kernel_rem_pio2+0x5a8>
 801cff6:	9b02      	ldr	r3, [sp, #8]
 801cff8:	b113      	cbz	r3, 801d000 <__kernel_rem_pio2+0x590>
 801cffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cffe:	4619      	mov	r1, r3
 801d000:	9b01      	ldr	r3, [sp, #4]
 801d002:	e9c3 0100 	strd	r0, r1, [r3]
 801d006:	9b06      	ldr	r3, [sp, #24]
 801d008:	f003 0007 	and.w	r0, r3, #7
 801d00c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801d010:	ecbd 8b02 	vpop	{d8}
 801d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d018:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d01c:	f7e3 f946 	bl	80002ac <__adddf3>
 801d020:	3d01      	subs	r5, #1
 801d022:	e7e6      	b.n	801cff2 <__kernel_rem_pio2+0x582>
 801d024:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d028:	f7e3 f940 	bl	80002ac <__adddf3>
 801d02c:	3e01      	subs	r6, #1
 801d02e:	e7bc      	b.n	801cfaa <__kernel_rem_pio2+0x53a>
 801d030:	4602      	mov	r2, r0
 801d032:	460b      	mov	r3, r1
 801d034:	e7c1      	b.n	801cfba <__kernel_rem_pio2+0x54a>
 801d036:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801d03a:	f7e3 f937 	bl	80002ac <__adddf3>
 801d03e:	3401      	adds	r4, #1
 801d040:	e7c6      	b.n	801cfd0 <__kernel_rem_pio2+0x560>
 801d042:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801d046:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d04a:	4640      	mov	r0, r8
 801d04c:	ec53 2b17 	vmov	r2, r3, d7
 801d050:	4649      	mov	r1, r9
 801d052:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d056:	f7e3 f929 	bl	80002ac <__adddf3>
 801d05a:	4602      	mov	r2, r0
 801d05c:	460b      	mov	r3, r1
 801d05e:	4606      	mov	r6, r0
 801d060:	460f      	mov	r7, r1
 801d062:	4640      	mov	r0, r8
 801d064:	4649      	mov	r1, r9
 801d066:	f7e3 f91f 	bl	80002a8 <__aeabi_dsub>
 801d06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d06e:	f7e3 f91d 	bl	80002ac <__adddf3>
 801d072:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d076:	e9ca 0100 	strd	r0, r1, [sl]
 801d07a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801d07e:	e770      	b.n	801cf62 <__kernel_rem_pio2+0x4f2>
 801d080:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801d084:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d088:	4630      	mov	r0, r6
 801d08a:	ec53 2b17 	vmov	r2, r3, d7
 801d08e:	4639      	mov	r1, r7
 801d090:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d094:	f7e3 f90a 	bl	80002ac <__adddf3>
 801d098:	4602      	mov	r2, r0
 801d09a:	460b      	mov	r3, r1
 801d09c:	4680      	mov	r8, r0
 801d09e:	4689      	mov	r9, r1
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	4639      	mov	r1, r7
 801d0a4:	f7e3 f900 	bl	80002a8 <__aeabi_dsub>
 801d0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0ac:	f7e3 f8fe 	bl	80002ac <__adddf3>
 801d0b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d0b4:	e9ca 0100 	strd	r0, r1, [sl]
 801d0b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801d0bc:	e756      	b.n	801cf6c <__kernel_rem_pio2+0x4fc>
 801d0be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d0c2:	f7e3 f8f3 	bl	80002ac <__adddf3>
 801d0c6:	3d01      	subs	r5, #1
 801d0c8:	e756      	b.n	801cf78 <__kernel_rem_pio2+0x508>
 801d0ca:	9b01      	ldr	r3, [sp, #4]
 801d0cc:	9a01      	ldr	r2, [sp, #4]
 801d0ce:	601f      	str	r7, [r3, #0]
 801d0d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801d0d4:	605c      	str	r4, [r3, #4]
 801d0d6:	609d      	str	r5, [r3, #8]
 801d0d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d0dc:	60d3      	str	r3, [r2, #12]
 801d0de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d0e2:	6110      	str	r0, [r2, #16]
 801d0e4:	6153      	str	r3, [r2, #20]
 801d0e6:	e78e      	b.n	801d006 <__kernel_rem_pio2+0x596>
 801d0e8:	41700000 	.word	0x41700000
 801d0ec:	3e700000 	.word	0x3e700000

0801d0f0 <__kernel_sin>:
 801d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f4:	ec55 4b10 	vmov	r4, r5, d0
 801d0f8:	b085      	sub	sp, #20
 801d0fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d0fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801d102:	ed8d 1b00 	vstr	d1, [sp]
 801d106:	9002      	str	r0, [sp, #8]
 801d108:	da06      	bge.n	801d118 <__kernel_sin+0x28>
 801d10a:	ee10 0a10 	vmov	r0, s0
 801d10e:	4629      	mov	r1, r5
 801d110:	f7e3 fd32 	bl	8000b78 <__aeabi_d2iz>
 801d114:	2800      	cmp	r0, #0
 801d116:	d051      	beq.n	801d1bc <__kernel_sin+0xcc>
 801d118:	4622      	mov	r2, r4
 801d11a:	462b      	mov	r3, r5
 801d11c:	4620      	mov	r0, r4
 801d11e:	4629      	mov	r1, r5
 801d120:	f7e3 fa7a 	bl	8000618 <__aeabi_dmul>
 801d124:	4682      	mov	sl, r0
 801d126:	468b      	mov	fp, r1
 801d128:	4602      	mov	r2, r0
 801d12a:	460b      	mov	r3, r1
 801d12c:	4620      	mov	r0, r4
 801d12e:	4629      	mov	r1, r5
 801d130:	f7e3 fa72 	bl	8000618 <__aeabi_dmul>
 801d134:	a341      	add	r3, pc, #260	; (adr r3, 801d23c <__kernel_sin+0x14c>)
 801d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13a:	4680      	mov	r8, r0
 801d13c:	4689      	mov	r9, r1
 801d13e:	4650      	mov	r0, sl
 801d140:	4659      	mov	r1, fp
 801d142:	f7e3 fa69 	bl	8000618 <__aeabi_dmul>
 801d146:	a33f      	add	r3, pc, #252	; (adr r3, 801d244 <__kernel_sin+0x154>)
 801d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14c:	f7e3 f8ac 	bl	80002a8 <__aeabi_dsub>
 801d150:	4652      	mov	r2, sl
 801d152:	465b      	mov	r3, fp
 801d154:	f7e3 fa60 	bl	8000618 <__aeabi_dmul>
 801d158:	a33c      	add	r3, pc, #240	; (adr r3, 801d24c <__kernel_sin+0x15c>)
 801d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15e:	f7e3 f8a5 	bl	80002ac <__adddf3>
 801d162:	4652      	mov	r2, sl
 801d164:	465b      	mov	r3, fp
 801d166:	f7e3 fa57 	bl	8000618 <__aeabi_dmul>
 801d16a:	a33a      	add	r3, pc, #232	; (adr r3, 801d254 <__kernel_sin+0x164>)
 801d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d170:	f7e3 f89a 	bl	80002a8 <__aeabi_dsub>
 801d174:	4652      	mov	r2, sl
 801d176:	465b      	mov	r3, fp
 801d178:	f7e3 fa4e 	bl	8000618 <__aeabi_dmul>
 801d17c:	a337      	add	r3, pc, #220	; (adr r3, 801d25c <__kernel_sin+0x16c>)
 801d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d182:	f7e3 f893 	bl	80002ac <__adddf3>
 801d186:	9b02      	ldr	r3, [sp, #8]
 801d188:	4606      	mov	r6, r0
 801d18a:	460f      	mov	r7, r1
 801d18c:	b9db      	cbnz	r3, 801d1c6 <__kernel_sin+0xd6>
 801d18e:	4602      	mov	r2, r0
 801d190:	460b      	mov	r3, r1
 801d192:	4650      	mov	r0, sl
 801d194:	4659      	mov	r1, fp
 801d196:	f7e3 fa3f 	bl	8000618 <__aeabi_dmul>
 801d19a:	a325      	add	r3, pc, #148	; (adr r3, 801d230 <__kernel_sin+0x140>)
 801d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1a0:	f7e3 f882 	bl	80002a8 <__aeabi_dsub>
 801d1a4:	4642      	mov	r2, r8
 801d1a6:	464b      	mov	r3, r9
 801d1a8:	f7e3 fa36 	bl	8000618 <__aeabi_dmul>
 801d1ac:	4602      	mov	r2, r0
 801d1ae:	460b      	mov	r3, r1
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	4629      	mov	r1, r5
 801d1b4:	f7e3 f87a 	bl	80002ac <__adddf3>
 801d1b8:	4604      	mov	r4, r0
 801d1ba:	460d      	mov	r5, r1
 801d1bc:	ec45 4b10 	vmov	d0, r4, r5
 801d1c0:	b005      	add	sp, #20
 801d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c6:	2200      	movs	r2, #0
 801d1c8:	4b1b      	ldr	r3, [pc, #108]	; (801d238 <__kernel_sin+0x148>)
 801d1ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d1ce:	f7e3 fa23 	bl	8000618 <__aeabi_dmul>
 801d1d2:	4632      	mov	r2, r6
 801d1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d1d8:	463b      	mov	r3, r7
 801d1da:	4640      	mov	r0, r8
 801d1dc:	4649      	mov	r1, r9
 801d1de:	f7e3 fa1b 	bl	8000618 <__aeabi_dmul>
 801d1e2:	4602      	mov	r2, r0
 801d1e4:	460b      	mov	r3, r1
 801d1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d1ea:	f7e3 f85d 	bl	80002a8 <__aeabi_dsub>
 801d1ee:	4652      	mov	r2, sl
 801d1f0:	465b      	mov	r3, fp
 801d1f2:	f7e3 fa11 	bl	8000618 <__aeabi_dmul>
 801d1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1fa:	f7e3 f855 	bl	80002a8 <__aeabi_dsub>
 801d1fe:	a30c      	add	r3, pc, #48	; (adr r3, 801d230 <__kernel_sin+0x140>)
 801d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d204:	4606      	mov	r6, r0
 801d206:	460f      	mov	r7, r1
 801d208:	4640      	mov	r0, r8
 801d20a:	4649      	mov	r1, r9
 801d20c:	f7e3 fa04 	bl	8000618 <__aeabi_dmul>
 801d210:	4602      	mov	r2, r0
 801d212:	460b      	mov	r3, r1
 801d214:	4630      	mov	r0, r6
 801d216:	4639      	mov	r1, r7
 801d218:	f7e3 f848 	bl	80002ac <__adddf3>
 801d21c:	4602      	mov	r2, r0
 801d21e:	460b      	mov	r3, r1
 801d220:	4620      	mov	r0, r4
 801d222:	4629      	mov	r1, r5
 801d224:	f7e3 f840 	bl	80002a8 <__aeabi_dsub>
 801d228:	e7c6      	b.n	801d1b8 <__kernel_sin+0xc8>
 801d22a:	bf00      	nop
 801d22c:	f3af 8000 	nop.w
 801d230:	55555549 	.word	0x55555549
 801d234:	3fc55555 	.word	0x3fc55555
 801d238:	3fe00000 	.word	0x3fe00000
 801d23c:	5acfd57c 	.word	0x5acfd57c
 801d240:	3de5d93a 	.word	0x3de5d93a
 801d244:	8a2b9ceb 	.word	0x8a2b9ceb
 801d248:	3e5ae5e6 	.word	0x3e5ae5e6
 801d24c:	57b1fe7d 	.word	0x57b1fe7d
 801d250:	3ec71de3 	.word	0x3ec71de3
 801d254:	19c161d5 	.word	0x19c161d5
 801d258:	3f2a01a0 	.word	0x3f2a01a0
 801d25c:	1110f8a6 	.word	0x1110f8a6
 801d260:	3f811111 	.word	0x3f811111
 801d264:	00000000 	.word	0x00000000

0801d268 <atan>:
 801d268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d26c:	ec55 4b10 	vmov	r4, r5, d0
 801d270:	4bc3      	ldr	r3, [pc, #780]	; (801d580 <atan+0x318>)
 801d272:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d276:	429e      	cmp	r6, r3
 801d278:	46ab      	mov	fp, r5
 801d27a:	dd18      	ble.n	801d2ae <atan+0x46>
 801d27c:	4bc1      	ldr	r3, [pc, #772]	; (801d584 <atan+0x31c>)
 801d27e:	429e      	cmp	r6, r3
 801d280:	dc01      	bgt.n	801d286 <atan+0x1e>
 801d282:	d109      	bne.n	801d298 <atan+0x30>
 801d284:	b144      	cbz	r4, 801d298 <atan+0x30>
 801d286:	4622      	mov	r2, r4
 801d288:	462b      	mov	r3, r5
 801d28a:	4620      	mov	r0, r4
 801d28c:	4629      	mov	r1, r5
 801d28e:	f7e3 f80d 	bl	80002ac <__adddf3>
 801d292:	4604      	mov	r4, r0
 801d294:	460d      	mov	r5, r1
 801d296:	e006      	b.n	801d2a6 <atan+0x3e>
 801d298:	f1bb 0f00 	cmp.w	fp, #0
 801d29c:	f340 8131 	ble.w	801d502 <atan+0x29a>
 801d2a0:	a59b      	add	r5, pc, #620	; (adr r5, 801d510 <atan+0x2a8>)
 801d2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d2a6:	ec45 4b10 	vmov	d0, r4, r5
 801d2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ae:	4bb6      	ldr	r3, [pc, #728]	; (801d588 <atan+0x320>)
 801d2b0:	429e      	cmp	r6, r3
 801d2b2:	dc14      	bgt.n	801d2de <atan+0x76>
 801d2b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d2b8:	429e      	cmp	r6, r3
 801d2ba:	dc0d      	bgt.n	801d2d8 <atan+0x70>
 801d2bc:	a396      	add	r3, pc, #600	; (adr r3, 801d518 <atan+0x2b0>)
 801d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2c2:	ee10 0a10 	vmov	r0, s0
 801d2c6:	4629      	mov	r1, r5
 801d2c8:	f7e2 fff0 	bl	80002ac <__adddf3>
 801d2cc:	2200      	movs	r2, #0
 801d2ce:	4baf      	ldr	r3, [pc, #700]	; (801d58c <atan+0x324>)
 801d2d0:	f7e3 fc32 	bl	8000b38 <__aeabi_dcmpgt>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	d1e6      	bne.n	801d2a6 <atan+0x3e>
 801d2d8:	f04f 3aff 	mov.w	sl, #4294967295
 801d2dc:	e02b      	b.n	801d336 <atan+0xce>
 801d2de:	f000 f963 	bl	801d5a8 <fabs>
 801d2e2:	4bab      	ldr	r3, [pc, #684]	; (801d590 <atan+0x328>)
 801d2e4:	429e      	cmp	r6, r3
 801d2e6:	ec55 4b10 	vmov	r4, r5, d0
 801d2ea:	f300 80bf 	bgt.w	801d46c <atan+0x204>
 801d2ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d2f2:	429e      	cmp	r6, r3
 801d2f4:	f300 80a0 	bgt.w	801d438 <atan+0x1d0>
 801d2f8:	ee10 2a10 	vmov	r2, s0
 801d2fc:	ee10 0a10 	vmov	r0, s0
 801d300:	462b      	mov	r3, r5
 801d302:	4629      	mov	r1, r5
 801d304:	f7e2 ffd2 	bl	80002ac <__adddf3>
 801d308:	2200      	movs	r2, #0
 801d30a:	4ba0      	ldr	r3, [pc, #640]	; (801d58c <atan+0x324>)
 801d30c:	f7e2 ffcc 	bl	80002a8 <__aeabi_dsub>
 801d310:	2200      	movs	r2, #0
 801d312:	4606      	mov	r6, r0
 801d314:	460f      	mov	r7, r1
 801d316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d31a:	4620      	mov	r0, r4
 801d31c:	4629      	mov	r1, r5
 801d31e:	f7e2 ffc5 	bl	80002ac <__adddf3>
 801d322:	4602      	mov	r2, r0
 801d324:	460b      	mov	r3, r1
 801d326:	4630      	mov	r0, r6
 801d328:	4639      	mov	r1, r7
 801d32a:	f7e3 fa9f 	bl	800086c <__aeabi_ddiv>
 801d32e:	f04f 0a00 	mov.w	sl, #0
 801d332:	4604      	mov	r4, r0
 801d334:	460d      	mov	r5, r1
 801d336:	4622      	mov	r2, r4
 801d338:	462b      	mov	r3, r5
 801d33a:	4620      	mov	r0, r4
 801d33c:	4629      	mov	r1, r5
 801d33e:	f7e3 f96b 	bl	8000618 <__aeabi_dmul>
 801d342:	4602      	mov	r2, r0
 801d344:	460b      	mov	r3, r1
 801d346:	4680      	mov	r8, r0
 801d348:	4689      	mov	r9, r1
 801d34a:	f7e3 f965 	bl	8000618 <__aeabi_dmul>
 801d34e:	a374      	add	r3, pc, #464	; (adr r3, 801d520 <atan+0x2b8>)
 801d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d354:	4606      	mov	r6, r0
 801d356:	460f      	mov	r7, r1
 801d358:	f7e3 f95e 	bl	8000618 <__aeabi_dmul>
 801d35c:	a372      	add	r3, pc, #456	; (adr r3, 801d528 <atan+0x2c0>)
 801d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d362:	f7e2 ffa3 	bl	80002ac <__adddf3>
 801d366:	4632      	mov	r2, r6
 801d368:	463b      	mov	r3, r7
 801d36a:	f7e3 f955 	bl	8000618 <__aeabi_dmul>
 801d36e:	a370      	add	r3, pc, #448	; (adr r3, 801d530 <atan+0x2c8>)
 801d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d374:	f7e2 ff9a 	bl	80002ac <__adddf3>
 801d378:	4632      	mov	r2, r6
 801d37a:	463b      	mov	r3, r7
 801d37c:	f7e3 f94c 	bl	8000618 <__aeabi_dmul>
 801d380:	a36d      	add	r3, pc, #436	; (adr r3, 801d538 <atan+0x2d0>)
 801d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d386:	f7e2 ff91 	bl	80002ac <__adddf3>
 801d38a:	4632      	mov	r2, r6
 801d38c:	463b      	mov	r3, r7
 801d38e:	f7e3 f943 	bl	8000618 <__aeabi_dmul>
 801d392:	a36b      	add	r3, pc, #428	; (adr r3, 801d540 <atan+0x2d8>)
 801d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d398:	f7e2 ff88 	bl	80002ac <__adddf3>
 801d39c:	4632      	mov	r2, r6
 801d39e:	463b      	mov	r3, r7
 801d3a0:	f7e3 f93a 	bl	8000618 <__aeabi_dmul>
 801d3a4:	a368      	add	r3, pc, #416	; (adr r3, 801d548 <atan+0x2e0>)
 801d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3aa:	f7e2 ff7f 	bl	80002ac <__adddf3>
 801d3ae:	4642      	mov	r2, r8
 801d3b0:	464b      	mov	r3, r9
 801d3b2:	f7e3 f931 	bl	8000618 <__aeabi_dmul>
 801d3b6:	a366      	add	r3, pc, #408	; (adr r3, 801d550 <atan+0x2e8>)
 801d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3bc:	4680      	mov	r8, r0
 801d3be:	4689      	mov	r9, r1
 801d3c0:	4630      	mov	r0, r6
 801d3c2:	4639      	mov	r1, r7
 801d3c4:	f7e3 f928 	bl	8000618 <__aeabi_dmul>
 801d3c8:	a363      	add	r3, pc, #396	; (adr r3, 801d558 <atan+0x2f0>)
 801d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ce:	f7e2 ff6b 	bl	80002a8 <__aeabi_dsub>
 801d3d2:	4632      	mov	r2, r6
 801d3d4:	463b      	mov	r3, r7
 801d3d6:	f7e3 f91f 	bl	8000618 <__aeabi_dmul>
 801d3da:	a361      	add	r3, pc, #388	; (adr r3, 801d560 <atan+0x2f8>)
 801d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e0:	f7e2 ff62 	bl	80002a8 <__aeabi_dsub>
 801d3e4:	4632      	mov	r2, r6
 801d3e6:	463b      	mov	r3, r7
 801d3e8:	f7e3 f916 	bl	8000618 <__aeabi_dmul>
 801d3ec:	a35e      	add	r3, pc, #376	; (adr r3, 801d568 <atan+0x300>)
 801d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3f2:	f7e2 ff59 	bl	80002a8 <__aeabi_dsub>
 801d3f6:	4632      	mov	r2, r6
 801d3f8:	463b      	mov	r3, r7
 801d3fa:	f7e3 f90d 	bl	8000618 <__aeabi_dmul>
 801d3fe:	a35c      	add	r3, pc, #368	; (adr r3, 801d570 <atan+0x308>)
 801d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d404:	f7e2 ff50 	bl	80002a8 <__aeabi_dsub>
 801d408:	4632      	mov	r2, r6
 801d40a:	463b      	mov	r3, r7
 801d40c:	f7e3 f904 	bl	8000618 <__aeabi_dmul>
 801d410:	4602      	mov	r2, r0
 801d412:	460b      	mov	r3, r1
 801d414:	4640      	mov	r0, r8
 801d416:	4649      	mov	r1, r9
 801d418:	f7e2 ff48 	bl	80002ac <__adddf3>
 801d41c:	4622      	mov	r2, r4
 801d41e:	462b      	mov	r3, r5
 801d420:	f7e3 f8fa 	bl	8000618 <__aeabi_dmul>
 801d424:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d428:	4602      	mov	r2, r0
 801d42a:	460b      	mov	r3, r1
 801d42c:	d14b      	bne.n	801d4c6 <atan+0x25e>
 801d42e:	4620      	mov	r0, r4
 801d430:	4629      	mov	r1, r5
 801d432:	f7e2 ff39 	bl	80002a8 <__aeabi_dsub>
 801d436:	e72c      	b.n	801d292 <atan+0x2a>
 801d438:	ee10 0a10 	vmov	r0, s0
 801d43c:	2200      	movs	r2, #0
 801d43e:	4b53      	ldr	r3, [pc, #332]	; (801d58c <atan+0x324>)
 801d440:	4629      	mov	r1, r5
 801d442:	f7e2 ff31 	bl	80002a8 <__aeabi_dsub>
 801d446:	2200      	movs	r2, #0
 801d448:	4606      	mov	r6, r0
 801d44a:	460f      	mov	r7, r1
 801d44c:	4b4f      	ldr	r3, [pc, #316]	; (801d58c <atan+0x324>)
 801d44e:	4620      	mov	r0, r4
 801d450:	4629      	mov	r1, r5
 801d452:	f7e2 ff2b 	bl	80002ac <__adddf3>
 801d456:	4602      	mov	r2, r0
 801d458:	460b      	mov	r3, r1
 801d45a:	4630      	mov	r0, r6
 801d45c:	4639      	mov	r1, r7
 801d45e:	f7e3 fa05 	bl	800086c <__aeabi_ddiv>
 801d462:	f04f 0a01 	mov.w	sl, #1
 801d466:	4604      	mov	r4, r0
 801d468:	460d      	mov	r5, r1
 801d46a:	e764      	b.n	801d336 <atan+0xce>
 801d46c:	4b49      	ldr	r3, [pc, #292]	; (801d594 <atan+0x32c>)
 801d46e:	429e      	cmp	r6, r3
 801d470:	dc1d      	bgt.n	801d4ae <atan+0x246>
 801d472:	ee10 0a10 	vmov	r0, s0
 801d476:	2200      	movs	r2, #0
 801d478:	4b47      	ldr	r3, [pc, #284]	; (801d598 <atan+0x330>)
 801d47a:	4629      	mov	r1, r5
 801d47c:	f7e2 ff14 	bl	80002a8 <__aeabi_dsub>
 801d480:	2200      	movs	r2, #0
 801d482:	4606      	mov	r6, r0
 801d484:	460f      	mov	r7, r1
 801d486:	4b44      	ldr	r3, [pc, #272]	; (801d598 <atan+0x330>)
 801d488:	4620      	mov	r0, r4
 801d48a:	4629      	mov	r1, r5
 801d48c:	f7e3 f8c4 	bl	8000618 <__aeabi_dmul>
 801d490:	2200      	movs	r2, #0
 801d492:	4b3e      	ldr	r3, [pc, #248]	; (801d58c <atan+0x324>)
 801d494:	f7e2 ff0a 	bl	80002ac <__adddf3>
 801d498:	4602      	mov	r2, r0
 801d49a:	460b      	mov	r3, r1
 801d49c:	4630      	mov	r0, r6
 801d49e:	4639      	mov	r1, r7
 801d4a0:	f7e3 f9e4 	bl	800086c <__aeabi_ddiv>
 801d4a4:	f04f 0a02 	mov.w	sl, #2
 801d4a8:	4604      	mov	r4, r0
 801d4aa:	460d      	mov	r5, r1
 801d4ac:	e743      	b.n	801d336 <atan+0xce>
 801d4ae:	462b      	mov	r3, r5
 801d4b0:	ee10 2a10 	vmov	r2, s0
 801d4b4:	2000      	movs	r0, #0
 801d4b6:	4939      	ldr	r1, [pc, #228]	; (801d59c <atan+0x334>)
 801d4b8:	f7e3 f9d8 	bl	800086c <__aeabi_ddiv>
 801d4bc:	f04f 0a03 	mov.w	sl, #3
 801d4c0:	4604      	mov	r4, r0
 801d4c2:	460d      	mov	r5, r1
 801d4c4:	e737      	b.n	801d336 <atan+0xce>
 801d4c6:	4b36      	ldr	r3, [pc, #216]	; (801d5a0 <atan+0x338>)
 801d4c8:	4e36      	ldr	r6, [pc, #216]	; (801d5a4 <atan+0x33c>)
 801d4ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d4ce:	4456      	add	r6, sl
 801d4d0:	449a      	add	sl, r3
 801d4d2:	e9da 2300 	ldrd	r2, r3, [sl]
 801d4d6:	f7e2 fee7 	bl	80002a8 <__aeabi_dsub>
 801d4da:	4622      	mov	r2, r4
 801d4dc:	462b      	mov	r3, r5
 801d4de:	f7e2 fee3 	bl	80002a8 <__aeabi_dsub>
 801d4e2:	4602      	mov	r2, r0
 801d4e4:	460b      	mov	r3, r1
 801d4e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d4ea:	f7e2 fedd 	bl	80002a8 <__aeabi_dsub>
 801d4ee:	f1bb 0f00 	cmp.w	fp, #0
 801d4f2:	4604      	mov	r4, r0
 801d4f4:	460d      	mov	r5, r1
 801d4f6:	f6bf aed6 	bge.w	801d2a6 <atan+0x3e>
 801d4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d4fe:	461d      	mov	r5, r3
 801d500:	e6d1      	b.n	801d2a6 <atan+0x3e>
 801d502:	a51d      	add	r5, pc, #116	; (adr r5, 801d578 <atan+0x310>)
 801d504:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d508:	e6cd      	b.n	801d2a6 <atan+0x3e>
 801d50a:	bf00      	nop
 801d50c:	f3af 8000 	nop.w
 801d510:	54442d18 	.word	0x54442d18
 801d514:	3ff921fb 	.word	0x3ff921fb
 801d518:	8800759c 	.word	0x8800759c
 801d51c:	7e37e43c 	.word	0x7e37e43c
 801d520:	e322da11 	.word	0xe322da11
 801d524:	3f90ad3a 	.word	0x3f90ad3a
 801d528:	24760deb 	.word	0x24760deb
 801d52c:	3fa97b4b 	.word	0x3fa97b4b
 801d530:	a0d03d51 	.word	0xa0d03d51
 801d534:	3fb10d66 	.word	0x3fb10d66
 801d538:	c54c206e 	.word	0xc54c206e
 801d53c:	3fb745cd 	.word	0x3fb745cd
 801d540:	920083ff 	.word	0x920083ff
 801d544:	3fc24924 	.word	0x3fc24924
 801d548:	5555550d 	.word	0x5555550d
 801d54c:	3fd55555 	.word	0x3fd55555
 801d550:	2c6a6c2f 	.word	0x2c6a6c2f
 801d554:	bfa2b444 	.word	0xbfa2b444
 801d558:	52defd9a 	.word	0x52defd9a
 801d55c:	3fadde2d 	.word	0x3fadde2d
 801d560:	af749a6d 	.word	0xaf749a6d
 801d564:	3fb3b0f2 	.word	0x3fb3b0f2
 801d568:	fe231671 	.word	0xfe231671
 801d56c:	3fbc71c6 	.word	0x3fbc71c6
 801d570:	9998ebc4 	.word	0x9998ebc4
 801d574:	3fc99999 	.word	0x3fc99999
 801d578:	54442d18 	.word	0x54442d18
 801d57c:	bff921fb 	.word	0xbff921fb
 801d580:	440fffff 	.word	0x440fffff
 801d584:	7ff00000 	.word	0x7ff00000
 801d588:	3fdbffff 	.word	0x3fdbffff
 801d58c:	3ff00000 	.word	0x3ff00000
 801d590:	3ff2ffff 	.word	0x3ff2ffff
 801d594:	40037fff 	.word	0x40037fff
 801d598:	3ff80000 	.word	0x3ff80000
 801d59c:	bff00000 	.word	0xbff00000
 801d5a0:	0801e870 	.word	0x0801e870
 801d5a4:	0801e850 	.word	0x0801e850

0801d5a8 <fabs>:
 801d5a8:	ec51 0b10 	vmov	r0, r1, d0
 801d5ac:	ee10 2a10 	vmov	r2, s0
 801d5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d5b4:	ec43 2b10 	vmov	d0, r2, r3
 801d5b8:	4770      	bx	lr

0801d5ba <finite>:
 801d5ba:	ee10 3a90 	vmov	r3, s1
 801d5be:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d5c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d5c6:	0fc0      	lsrs	r0, r0, #31
 801d5c8:	4770      	bx	lr
 801d5ca:	0000      	movs	r0, r0
 801d5cc:	0000      	movs	r0, r0
	...

0801d5d0 <floor>:
 801d5d0:	ec51 0b10 	vmov	r0, r1, d0
 801d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d5dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801d5e0:	2e13      	cmp	r6, #19
 801d5e2:	460c      	mov	r4, r1
 801d5e4:	ee10 5a10 	vmov	r5, s0
 801d5e8:	4680      	mov	r8, r0
 801d5ea:	dc34      	bgt.n	801d656 <floor+0x86>
 801d5ec:	2e00      	cmp	r6, #0
 801d5ee:	da16      	bge.n	801d61e <floor+0x4e>
 801d5f0:	a335      	add	r3, pc, #212	; (adr r3, 801d6c8 <floor+0xf8>)
 801d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5f6:	f7e2 fe59 	bl	80002ac <__adddf3>
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	f7e3 fa9b 	bl	8000b38 <__aeabi_dcmpgt>
 801d602:	b148      	cbz	r0, 801d618 <floor+0x48>
 801d604:	2c00      	cmp	r4, #0
 801d606:	da59      	bge.n	801d6bc <floor+0xec>
 801d608:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d60c:	4a30      	ldr	r2, [pc, #192]	; (801d6d0 <floor+0x100>)
 801d60e:	432b      	orrs	r3, r5
 801d610:	2500      	movs	r5, #0
 801d612:	42ab      	cmp	r3, r5
 801d614:	bf18      	it	ne
 801d616:	4614      	movne	r4, r2
 801d618:	4621      	mov	r1, r4
 801d61a:	4628      	mov	r0, r5
 801d61c:	e025      	b.n	801d66a <floor+0x9a>
 801d61e:	4f2d      	ldr	r7, [pc, #180]	; (801d6d4 <floor+0x104>)
 801d620:	4137      	asrs	r7, r6
 801d622:	ea01 0307 	and.w	r3, r1, r7
 801d626:	4303      	orrs	r3, r0
 801d628:	d01f      	beq.n	801d66a <floor+0x9a>
 801d62a:	a327      	add	r3, pc, #156	; (adr r3, 801d6c8 <floor+0xf8>)
 801d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d630:	f7e2 fe3c 	bl	80002ac <__adddf3>
 801d634:	2200      	movs	r2, #0
 801d636:	2300      	movs	r3, #0
 801d638:	f7e3 fa7e 	bl	8000b38 <__aeabi_dcmpgt>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	d0eb      	beq.n	801d618 <floor+0x48>
 801d640:	2c00      	cmp	r4, #0
 801d642:	bfbe      	ittt	lt
 801d644:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d648:	fa43 f606 	asrlt.w	r6, r3, r6
 801d64c:	19a4      	addlt	r4, r4, r6
 801d64e:	ea24 0407 	bic.w	r4, r4, r7
 801d652:	2500      	movs	r5, #0
 801d654:	e7e0      	b.n	801d618 <floor+0x48>
 801d656:	2e33      	cmp	r6, #51	; 0x33
 801d658:	dd0b      	ble.n	801d672 <floor+0xa2>
 801d65a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d65e:	d104      	bne.n	801d66a <floor+0x9a>
 801d660:	ee10 2a10 	vmov	r2, s0
 801d664:	460b      	mov	r3, r1
 801d666:	f7e2 fe21 	bl	80002ac <__adddf3>
 801d66a:	ec41 0b10 	vmov	d0, r0, r1
 801d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d672:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801d676:	f04f 33ff 	mov.w	r3, #4294967295
 801d67a:	fa23 f707 	lsr.w	r7, r3, r7
 801d67e:	4207      	tst	r7, r0
 801d680:	d0f3      	beq.n	801d66a <floor+0x9a>
 801d682:	a311      	add	r3, pc, #68	; (adr r3, 801d6c8 <floor+0xf8>)
 801d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d688:	f7e2 fe10 	bl	80002ac <__adddf3>
 801d68c:	2200      	movs	r2, #0
 801d68e:	2300      	movs	r3, #0
 801d690:	f7e3 fa52 	bl	8000b38 <__aeabi_dcmpgt>
 801d694:	2800      	cmp	r0, #0
 801d696:	d0bf      	beq.n	801d618 <floor+0x48>
 801d698:	2c00      	cmp	r4, #0
 801d69a:	da02      	bge.n	801d6a2 <floor+0xd2>
 801d69c:	2e14      	cmp	r6, #20
 801d69e:	d103      	bne.n	801d6a8 <floor+0xd8>
 801d6a0:	3401      	adds	r4, #1
 801d6a2:	ea25 0507 	bic.w	r5, r5, r7
 801d6a6:	e7b7      	b.n	801d618 <floor+0x48>
 801d6a8:	2301      	movs	r3, #1
 801d6aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d6ae:	fa03 f606 	lsl.w	r6, r3, r6
 801d6b2:	4435      	add	r5, r6
 801d6b4:	4545      	cmp	r5, r8
 801d6b6:	bf38      	it	cc
 801d6b8:	18e4      	addcc	r4, r4, r3
 801d6ba:	e7f2      	b.n	801d6a2 <floor+0xd2>
 801d6bc:	2500      	movs	r5, #0
 801d6be:	462c      	mov	r4, r5
 801d6c0:	e7aa      	b.n	801d618 <floor+0x48>
 801d6c2:	bf00      	nop
 801d6c4:	f3af 8000 	nop.w
 801d6c8:	8800759c 	.word	0x8800759c
 801d6cc:	7e37e43c 	.word	0x7e37e43c
 801d6d0:	bff00000 	.word	0xbff00000
 801d6d4:	000fffff 	.word	0x000fffff

0801d6d8 <matherr>:
 801d6d8:	2000      	movs	r0, #0
 801d6da:	4770      	bx	lr
 801d6dc:	0000      	movs	r0, r0
	...

0801d6e0 <nan>:
 801d6e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d6e8 <nan+0x8>
 801d6e4:	4770      	bx	lr
 801d6e6:	bf00      	nop
 801d6e8:	00000000 	.word	0x00000000
 801d6ec:	7ff80000 	.word	0x7ff80000

0801d6f0 <rint>:
 801d6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d6f2:	ec51 0b10 	vmov	r0, r1, d0
 801d6f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d6fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d6fe:	2e13      	cmp	r6, #19
 801d700:	460b      	mov	r3, r1
 801d702:	ee10 4a10 	vmov	r4, s0
 801d706:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d70a:	dc56      	bgt.n	801d7ba <rint+0xca>
 801d70c:	2e00      	cmp	r6, #0
 801d70e:	da2b      	bge.n	801d768 <rint+0x78>
 801d710:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d714:	4302      	orrs	r2, r0
 801d716:	d023      	beq.n	801d760 <rint+0x70>
 801d718:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d71c:	4302      	orrs	r2, r0
 801d71e:	4254      	negs	r4, r2
 801d720:	4314      	orrs	r4, r2
 801d722:	0c4b      	lsrs	r3, r1, #17
 801d724:	0b24      	lsrs	r4, r4, #12
 801d726:	045b      	lsls	r3, r3, #17
 801d728:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d72c:	ea44 0103 	orr.w	r1, r4, r3
 801d730:	460b      	mov	r3, r1
 801d732:	492f      	ldr	r1, [pc, #188]	; (801d7f0 <rint+0x100>)
 801d734:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d738:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d73c:	4602      	mov	r2, r0
 801d73e:	4639      	mov	r1, r7
 801d740:	4630      	mov	r0, r6
 801d742:	f7e2 fdb3 	bl	80002ac <__adddf3>
 801d746:	e9cd 0100 	strd	r0, r1, [sp]
 801d74a:	463b      	mov	r3, r7
 801d74c:	4632      	mov	r2, r6
 801d74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d752:	f7e2 fda9 	bl	80002a8 <__aeabi_dsub>
 801d756:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d75a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d75e:	4639      	mov	r1, r7
 801d760:	ec41 0b10 	vmov	d0, r0, r1
 801d764:	b003      	add	sp, #12
 801d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d768:	4a22      	ldr	r2, [pc, #136]	; (801d7f4 <rint+0x104>)
 801d76a:	4132      	asrs	r2, r6
 801d76c:	ea01 0702 	and.w	r7, r1, r2
 801d770:	4307      	orrs	r7, r0
 801d772:	d0f5      	beq.n	801d760 <rint+0x70>
 801d774:	0852      	lsrs	r2, r2, #1
 801d776:	4011      	ands	r1, r2
 801d778:	430c      	orrs	r4, r1
 801d77a:	d00b      	beq.n	801d794 <rint+0xa4>
 801d77c:	ea23 0202 	bic.w	r2, r3, r2
 801d780:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d784:	2e13      	cmp	r6, #19
 801d786:	fa43 f306 	asr.w	r3, r3, r6
 801d78a:	bf0c      	ite	eq
 801d78c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d790:	2400      	movne	r4, #0
 801d792:	4313      	orrs	r3, r2
 801d794:	4916      	ldr	r1, [pc, #88]	; (801d7f0 <rint+0x100>)
 801d796:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d79a:	4622      	mov	r2, r4
 801d79c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	4629      	mov	r1, r5
 801d7a4:	f7e2 fd82 	bl	80002ac <__adddf3>
 801d7a8:	e9cd 0100 	strd	r0, r1, [sp]
 801d7ac:	4622      	mov	r2, r4
 801d7ae:	462b      	mov	r3, r5
 801d7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d7b4:	f7e2 fd78 	bl	80002a8 <__aeabi_dsub>
 801d7b8:	e7d2      	b.n	801d760 <rint+0x70>
 801d7ba:	2e33      	cmp	r6, #51	; 0x33
 801d7bc:	dd07      	ble.n	801d7ce <rint+0xde>
 801d7be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d7c2:	d1cd      	bne.n	801d760 <rint+0x70>
 801d7c4:	ee10 2a10 	vmov	r2, s0
 801d7c8:	f7e2 fd70 	bl	80002ac <__adddf3>
 801d7cc:	e7c8      	b.n	801d760 <rint+0x70>
 801d7ce:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d7d2:	f04f 32ff 	mov.w	r2, #4294967295
 801d7d6:	40f2      	lsrs	r2, r6
 801d7d8:	4210      	tst	r0, r2
 801d7da:	d0c1      	beq.n	801d760 <rint+0x70>
 801d7dc:	0852      	lsrs	r2, r2, #1
 801d7de:	4210      	tst	r0, r2
 801d7e0:	bf1f      	itttt	ne
 801d7e2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d7e6:	ea20 0202 	bicne.w	r2, r0, r2
 801d7ea:	4134      	asrne	r4, r6
 801d7ec:	4314      	orrne	r4, r2
 801d7ee:	e7d1      	b.n	801d794 <rint+0xa4>
 801d7f0:	0801e890 	.word	0x0801e890
 801d7f4:	000fffff 	.word	0x000fffff

0801d7f8 <scalbn>:
 801d7f8:	b570      	push	{r4, r5, r6, lr}
 801d7fa:	ec55 4b10 	vmov	r4, r5, d0
 801d7fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d802:	4606      	mov	r6, r0
 801d804:	462b      	mov	r3, r5
 801d806:	b9aa      	cbnz	r2, 801d834 <scalbn+0x3c>
 801d808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d80c:	4323      	orrs	r3, r4
 801d80e:	d03b      	beq.n	801d888 <scalbn+0x90>
 801d810:	4b31      	ldr	r3, [pc, #196]	; (801d8d8 <scalbn+0xe0>)
 801d812:	4629      	mov	r1, r5
 801d814:	2200      	movs	r2, #0
 801d816:	ee10 0a10 	vmov	r0, s0
 801d81a:	f7e2 fefd 	bl	8000618 <__aeabi_dmul>
 801d81e:	4b2f      	ldr	r3, [pc, #188]	; (801d8dc <scalbn+0xe4>)
 801d820:	429e      	cmp	r6, r3
 801d822:	4604      	mov	r4, r0
 801d824:	460d      	mov	r5, r1
 801d826:	da12      	bge.n	801d84e <scalbn+0x56>
 801d828:	a327      	add	r3, pc, #156	; (adr r3, 801d8c8 <scalbn+0xd0>)
 801d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d82e:	f7e2 fef3 	bl	8000618 <__aeabi_dmul>
 801d832:	e009      	b.n	801d848 <scalbn+0x50>
 801d834:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d838:	428a      	cmp	r2, r1
 801d83a:	d10c      	bne.n	801d856 <scalbn+0x5e>
 801d83c:	ee10 2a10 	vmov	r2, s0
 801d840:	4620      	mov	r0, r4
 801d842:	4629      	mov	r1, r5
 801d844:	f7e2 fd32 	bl	80002ac <__adddf3>
 801d848:	4604      	mov	r4, r0
 801d84a:	460d      	mov	r5, r1
 801d84c:	e01c      	b.n	801d888 <scalbn+0x90>
 801d84e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d852:	460b      	mov	r3, r1
 801d854:	3a36      	subs	r2, #54	; 0x36
 801d856:	4432      	add	r2, r6
 801d858:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d85c:	428a      	cmp	r2, r1
 801d85e:	dd0b      	ble.n	801d878 <scalbn+0x80>
 801d860:	ec45 4b11 	vmov	d1, r4, r5
 801d864:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d8d0 <scalbn+0xd8>
 801d868:	f000 f83c 	bl	801d8e4 <copysign>
 801d86c:	a318      	add	r3, pc, #96	; (adr r3, 801d8d0 <scalbn+0xd8>)
 801d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d872:	ec51 0b10 	vmov	r0, r1, d0
 801d876:	e7da      	b.n	801d82e <scalbn+0x36>
 801d878:	2a00      	cmp	r2, #0
 801d87a:	dd08      	ble.n	801d88e <scalbn+0x96>
 801d87c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d884:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d888:	ec45 4b10 	vmov	d0, r4, r5
 801d88c:	bd70      	pop	{r4, r5, r6, pc}
 801d88e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d892:	da0d      	bge.n	801d8b0 <scalbn+0xb8>
 801d894:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d898:	429e      	cmp	r6, r3
 801d89a:	ec45 4b11 	vmov	d1, r4, r5
 801d89e:	dce1      	bgt.n	801d864 <scalbn+0x6c>
 801d8a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d8c8 <scalbn+0xd0>
 801d8a4:	f000 f81e 	bl	801d8e4 <copysign>
 801d8a8:	a307      	add	r3, pc, #28	; (adr r3, 801d8c8 <scalbn+0xd0>)
 801d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ae:	e7e0      	b.n	801d872 <scalbn+0x7a>
 801d8b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d8b4:	3236      	adds	r2, #54	; 0x36
 801d8b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d8ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d8be:	4620      	mov	r0, r4
 801d8c0:	4629      	mov	r1, r5
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	4b06      	ldr	r3, [pc, #24]	; (801d8e0 <scalbn+0xe8>)
 801d8c6:	e7b2      	b.n	801d82e <scalbn+0x36>
 801d8c8:	c2f8f359 	.word	0xc2f8f359
 801d8cc:	01a56e1f 	.word	0x01a56e1f
 801d8d0:	8800759c 	.word	0x8800759c
 801d8d4:	7e37e43c 	.word	0x7e37e43c
 801d8d8:	43500000 	.word	0x43500000
 801d8dc:	ffff3cb0 	.word	0xffff3cb0
 801d8e0:	3c900000 	.word	0x3c900000

0801d8e4 <copysign>:
 801d8e4:	ec51 0b10 	vmov	r0, r1, d0
 801d8e8:	ee11 0a90 	vmov	r0, s3
 801d8ec:	ee10 2a10 	vmov	r2, s0
 801d8f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d8f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d8f8:	ea41 0300 	orr.w	r3, r1, r0
 801d8fc:	ec43 2b10 	vmov	d0, r2, r3
 801d900:	4770      	bx	lr
	...

0801d904 <_init>:
 801d904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d906:	bf00      	nop
 801d908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d90a:	bc08      	pop	{r3}
 801d90c:	469e      	mov	lr, r3
 801d90e:	4770      	bx	lr

0801d910 <_fini>:
 801d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d912:	bf00      	nop
 801d914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d916:	bc08      	pop	{r3}
 801d918:	469e      	mov	lr, r3
 801d91a:	4770      	bx	lr
