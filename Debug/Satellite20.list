
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001128c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08011420  08011420  00021420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b98  08011b98  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08011b98  08011b98  00021b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ba0  08011ba0  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ba0  08011ba0  00021ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ba4  08011ba4  00021ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08011ba8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b54  2000034c  08011ef4  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009ea0  08011ef4  00039ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037311  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006049  00000000  00000000  0006768d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  0006d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002080  00000000  00000000  0006f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d31  00000000  00000000  00071a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000212f8  00000000  00000000  0009a781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d675c  00000000  00000000  000bba79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001921d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a240  00000000  00000000  00192250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011404 	.word	0x08011404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	08011404 	.word	0x08011404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <haltMotors>:
		Common.mot_r = dutyR;
	}
}

void haltMotors(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM3->CCR2 = TIM3->ARR;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <haltMotors+0x3c>)
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <haltMotors+0x3c>)
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = TIM3->ARR;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <haltMotors+0x3c>)
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <haltMotors+0x3c>)
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <haltMotors+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

	Common.mot_l = 0;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <haltMotors+0x44>)
 8000fa4:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	Common.mot_r = 0;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <haltMotors+0x44>)
 8000fb0:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	2000036c 	.word	0x2000036c

08000fd0 <enableMotors>:

void enableMotors(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <enableMotors+0x74>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d02d      	beq.n	800103e <enableMotors+0x6e>
	{
		haltMotors();
 8000fe2:	f7ff ffd1 	bl	8000f88 <haltMotors>
		motorsEnabled = true;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <enableMotors+0x74>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		writePin(PH_L, MOTOR_L_DIR);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <enableMotors+0x78>)
 8000ff4:	f001 fb0c 	bl	8002610 <HAL_GPIO_WritePin>
		writePin(PH_R, MOTOR_R_DIR);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <enableMotors+0x78>)
 8001000:	f001 fb06 	bl	8002610 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_2);
 8001004:	f00b f8f4 	bl	800c1f0 <Get_TIM3_Instance>
 8001008:	4603      	mov	r3, r0
 800100a:	2104      	movs	r1, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f004 ff7d 	bl	8005f0c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001012:	f00b f8ed 	bl	800c1f0 <Get_TIM3_Instance>
 8001016:	4603      	mov	r3, r0
 8001018:	2108      	movs	r1, #8
 800101a:	4618      	mov	r0, r3
 800101c:	f004 ff76 	bl	8005f0c <HAL_TIM_PWM_Start>

		haltMotors();
 8001020:	f7ff ffb2 	bl	8000f88 <haltMotors>

		writePin(MOT_STBY, LOW);
 8001024:	2200      	movs	r2, #0
 8001026:	2104      	movs	r1, #4
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <enableMotors+0x78>)
 800102a:	f001 faf1 	bl	8002610 <HAL_GPIO_WritePin>
		delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f000 fc70 	bl	8001914 <HAL_Delay>
		writePin(MOT_STBY, HIGH);
 8001034:	2201      	movs	r2, #1
 8001036:	2104      	movs	r1, #4
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <enableMotors+0x78>)
 800103a:	f001 fae9 	bl	8002610 <HAL_GPIO_WritePin>
	}
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000368 	.word	0x20000368
 8001048:	40020400 	.word	0x40020400

0800104c <disableMotors>:

void disableMotors(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <disableMotors+0x40>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <disableMotors+0x3c>
	{
		writePin(MOT_STBY, LOW);
 8001058:	2200      	movs	r2, #0
 800105a:	2104      	movs	r1, #4
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <disableMotors+0x44>)
 800105e:	f001 fad7 	bl	8002610 <HAL_GPIO_WritePin>
		haltMotors();
 8001062:	f7ff ff91 	bl	8000f88 <haltMotors>
		motorsEnabled = false;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <disableMotors+0x40>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_2);
 800106c:	f00b f8c0 	bl	800c1f0 <Get_TIM3_Instance>
 8001070:	4603      	mov	r3, r0
 8001072:	2104      	movs	r1, #4
 8001074:	4618      	mov	r0, r3
 8001076:	f004 ff87 	bl	8005f88 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_3);
 800107a:	f00b f8b9 	bl	800c1f0 <Get_TIM3_Instance>
 800107e:	4603      	mov	r3, r0
 8001080:	2108      	movs	r1, #8
 8001082:	4618      	mov	r0, r3
 8001084:	f004 ff80 	bl	8005f88 <HAL_TIM_PWM_Stop>
	}
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000368 	.word	0x20000368
 8001090:	40020400 	.word	0x40020400

08001094 <millis>:
#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
 8001098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <millis+0x1c>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	099b      	lsrs	r3, r3, #6
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	10624dd3 	.word	0x10624dd3

080010b4 <GPS_read>:
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
	return true;
}

char GPS_read(GPS* inst)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	static uint32_t firstChar = 0;	// first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 80010bc:	f7ff ffea 	bl	8001094 <millis>
 80010c0:	60f8      	str	r0, [r7, #12]
	char c = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	72fb      	strb	r3, [r7, #11]
	if (inst->paused) return c;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <GPS_read+0x20>
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	e069      	b.n	80011a8 <GPS_read+0xf4>

	c = (char)inst->uartBuffer[0];
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 80010da:	72fb      	strb	r3, [r7, #11]
	//char ca[2] = {c, '\0'};
	//print(ca);

	inst->currentline[inst->lineidx++] = c;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	1c59      	adds	r1, r3, #1
 80010ec:	b2c8      	uxtb	r0, r1
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 80010f4:	4413      	add	r3, r2
 80010f6:	7afa      	ldrb	r2, [r7, #11]
 80010f8:	701a      	strb	r2, [r3, #0]
	// [!!!] \/ wtf is that
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b77      	cmp	r3, #119	; 0x77
 8001104:	d903      	bls.n	800110e <GPS_read+0x5a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2277      	movs	r2, #119	; 0x77
 800110a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	2b0a      	cmp	r3, #10
 8001112:	d141      	bne.n	8001198 <GPS_read+0xe4>
	{
		inst->currentline[inst->lineidx] = 0;	// add endline character
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	4413      	add	r3, r2
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	33d8      	adds	r3, #216	; 0xd8
 8001132:	429a      	cmp	r2, r3
 8001134:	d10c      	bne.n	8001150 <GPS_read+0x9c>
		{
			inst->currentline = inst->line2;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800114e:	e00b      	b.n	8001168 <GPS_read+0xb4>
		}
		else
		{
			inst->currentline = inst->line1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		inst->lineidx = 0;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis();	// time we got the end of the string
 8001178:	f7ff ff8c 	bl	8001094 <millis>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <GPS_read+0xfc>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0;				// there are no characters yet
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <GPS_read+0xfc>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
		return c;					// wait until next character to set time
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	e007      	b.n	80011a8 <GPS_read+0xf4>
	}

	if (firstChar == 0) firstChar = tStart;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <GPS_read+0xfc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <GPS_read+0xf2>
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <GPS_read+0xfc>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6013      	str	r3, [r2, #0]
	return c;
 80011a6:	7afb      	ldrb	r3, [r7, #11]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000b30 	.word	0x20000b30

080011b4 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 80011c8:	b40f      	push	{r0, r1, r2, r3}
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
	if (usbPresent)
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <println+0xb0>)
 80011d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d145      	bne.n	8001266 <println+0x9e>
	{
		writePin(LEDD, HIGH);
 80011da:	2201      	movs	r2, #1
 80011dc:	2108      	movs	r1, #8
 80011de:	4827      	ldr	r0, [pc, #156]	; (800127c <println+0xb4>)
 80011e0:	f001 fa16 	bl	8002610 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <println+0xb8>)
 80011f0:	f00e f9b6 	bl	800f560 <vsiprintf>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <println+0xbc>)
 80011fa:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <println+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <println+0xb8>)
 8001202:	210d      	movs	r1, #13
 8001204:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <println+0xbc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <println+0xb8>)
 800120e:	210a      	movs	r1, #10
 8001210:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <println+0xbc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3302      	adds	r3, #2
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <println+0xb8>)
 800121a:	2100      	movs	r1, #0
 800121c:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <println+0xbc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3303      	adds	r3, #3
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <println+0xbc>)
 8001226:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 8001228:	f7ff ffc4 	bl	80011b4 <micros>
 800122c:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <println+0xbc>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	3346      	adds	r3, #70	; 0x46
 800123c:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800123e:	e001      	b.n	8001244 <println+0x7c>
		{
			if (micros() - printStart > timeout && false)
 8001240:	f7ff ffb8 	bl	80011b4 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <println+0xbc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <println+0xb8>)
 800124e:	f00b fee9 	bl	800d024 <CDC_Transmit_FS>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d0f3      	beq.n	8001240 <println+0x78>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 8001258:	2200      	movs	r2, #0
 800125a:	2108      	movs	r1, #8
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <println+0xb4>)
 800125e:	f001 f9d7 	bl	8002610 <HAL_GPIO_WritePin>
		return true;
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <println+0xa0>
	}
	return false;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001272:	b004      	add	sp, #16
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20001924 	.word	0x20001924
 800127c:	40020800 	.word	0x40020800
 8001280:	20000b38 	.word	0x20000b38
 8001284:	20000b34 	.word	0x20000b34

08001288 <bytesToFloatRev>:
}

// ############### Useful #################
static inline void floatToBytes(float* value, uint8_t* buffer) { for (uint8_t i = 0; i < 4; i++) buffer[i] = *((uint8_t*)(value) + i); }
static inline void bytesToFloat(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + i) = buffer[i]; }
static inline void bytesToFloatRev(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + 3 - i) = buffer[i]; }
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e00c      	b.n	80012b2 <bytesToFloatRev+0x2a>
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	441a      	add	r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f1c3 0303 	rsb	r3, r3, #3
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	440b      	add	r3, r1
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d9ef      	bls.n	8001298 <bytesToFloatRev+0x10>
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SPS30_read>:
#include "stm32f4xx_hal.h"
#include "run.h"
#include "clock.h"

static bool SPS30_read(SPS30* inst)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	uint32_t temp_checksum = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
	uint8_t incoming[1] = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	723b      	strb	r3, [r7, #8]
	HAL_UART_Receive(inst->uart, incoming, 1, 1000); if (incoming[0] != 0x7E) return false; // Start byte
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	2201      	movs	r2, #1
 80012e2:	f005 fc61 	bl	8006ba8 <HAL_UART_Receive>
 80012e6:	7a3b      	ldrb	r3, [r7, #8]
 80012e8:	2b7e      	cmp	r3, #126	; 0x7e
 80012ea:	d001      	beq.n	80012f0 <SPS30_read+0x2c>
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0f1      	b.n	80014d4 <SPS30_read+0x210>
	HAL_UART_Receive(inst->uart, incoming, 1, 1000); if (incoming[0] != 0x00) return false;	// Address byte
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	f107 0108 	add.w	r1, r7, #8
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	2201      	movs	r2, #1
 80012fe:	f005 fc53 	bl	8006ba8 <HAL_UART_Receive>
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SPS30_read+0x48>
 8001308:	2300      	movs	r3, #0
 800130a:	e0e3      	b.n	80014d4 <SPS30_read+0x210>
	HAL_UART_Receive(inst->uart, incoming, 1, 1000); temp_checksum += incoming[0];			// Command byte
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	2201      	movs	r2, #1
 800131a:	f005 fc45 	bl	8006ba8 <HAL_UART_Receive>
 800131e:	7a3b      	ldrb	r3, [r7, #8]
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(inst->uart, incoming, 1, 1000);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f107 0108 	add.w	r1, r7, #8
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	2201      	movs	r2, #1
 8001336:	f005 fc37 	bl	8006ba8 <HAL_UART_Receive>
	if (incoming[0] != 0x00)						// State byte (contains errors)
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <SPS30_read+0x8a>
	{
		println("Error: code 0x%x", (uint8_t)incoming[0]);
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	4619      	mov	r1, r3
 8001344:	4865      	ldr	r0, [pc, #404]	; (80014dc <SPS30_read+0x218>)
 8001346:	f7ff ff3f 	bl	80011c8 <println>
		return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e0c2      	b.n	80014d4 <SPS30_read+0x210>
	}
	temp_checksum += incoming[0];
 800134e:	7a3b      	ldrb	r3, [r7, #8]
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(inst->uart, incoming, 1, 1000);	inst->rxLen = incoming[0]; // Lenght byte
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	f107 0108 	add.w	r1, r7, #8
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	2201      	movs	r2, #1
 8001366:	f005 fc1f 	bl	8006ba8 <HAL_UART_Receive>
 800136a:	7a3a      	ldrb	r2, [r7, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
	temp_checksum += incoming[0];
 8001372:	7a3b      	ldrb	r3, [r7, #8]
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

	if (inst->rxLen > 0)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8001382:	2b00      	cmp	r3, #0
 8001384:	d018      	beq.n	80013b8 <SPS30_read+0xf4>
	{
		memset(inst->rxBuffer, 0x00, 255);				// Clear buffer and receive stuffed data
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	333c      	adds	r3, #60	; 0x3c
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00c faeb 	bl	800d96a <memset>
		if (HAL_UART_Receive(inst->uart, inst->rxBuffer, inst->rxLen, 2000) != HAL_OK) return false;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013aa:	f005 fbfd 	bl	8006ba8 <HAL_UART_Receive>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SPS30_read+0xf4>
 80013b4:	2300      	movs	r3, #0
 80013b6:	e08d      	b.n	80014d4 <SPS30_read+0x210>
	}
	HAL_UART_Receive(inst->uart, incoming, 1, 1000); inst->checksum = incoming[0];	// Checksum byte
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	f107 0108 	add.w	r1, r7, #8
 80013c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c4:	2201      	movs	r2, #1
 80013c6:	f005 fbef 	bl	8006ba8 <HAL_UART_Receive>
 80013ca:	7a3a      	ldrb	r2, [r7, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	HAL_UART_Receive(inst->uart, incoming, 1, 1000); if (incoming[0] != 0x7E) return false;	// Stop byte
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	2201      	movs	r2, #1
 80013e0:	f005 fbe2 	bl	8006ba8 <HAL_UART_Receive>
 80013e4:	7a3b      	ldrb	r3, [r7, #8]
 80013e6:	2b7e      	cmp	r3, #126	; 0x7e
 80013e8:	d001      	beq.n	80013ee <SPS30_read+0x12a>
 80013ea:	2300      	movs	r3, #0
 80013ec:	e072      	b.n	80014d4 <SPS30_read+0x210>

	uint8_t BD = 0;	// byte index of rxData array
 80013ee:	2300      	movs	r3, #0
 80013f0:	72fb      	strb	r3, [r7, #11]
	memset(inst->rxData, 0x00, 255);				// Data un-stuffing, clear buffer
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00c fab4 	bl	800d96a <memset>
	for (uint8_t B = 0; B < inst->rxLen; B++)
 8001402:	2300      	movs	r3, #0
 8001404:	72bb      	strb	r3, [r7, #10]
 8001406:	e050      	b.n	80014aa <SPS30_read+0x1e6>
	{
		if (inst->rxBuffer[B] == 0x7D)
 8001408:	7abb      	ldrb	r3, [r7, #10]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001412:	2b7d      	cmp	r3, #125	; 0x7d
 8001414:	d12f      	bne.n	8001476 <SPS30_read+0x1b2>
		{
			B++;
 8001416:	7abb      	ldrb	r3, [r7, #10]
 8001418:	3301      	adds	r3, #1
 800141a:	72bb      	strb	r3, [r7, #10]
			switch (inst->rxBuffer[B])				// Values for un-stuffing are from SPS30 datasheet
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001426:	2b33      	cmp	r3, #51	; 0x33
 8001428:	d01e      	beq.n	8001468 <SPS30_read+0x1a4>
 800142a:	2b33      	cmp	r3, #51	; 0x33
 800142c:	dc02      	bgt.n	8001434 <SPS30_read+0x170>
 800142e:	2b31      	cmp	r3, #49	; 0x31
 8001430:	d013      	beq.n	800145a <SPS30_read+0x196>
					break;
				case 0x33:
					inst->rxData[BD] = 0x13;
					break;
				default:
					break;
 8001432:	e02b      	b.n	800148c <SPS30_read+0x1c8>
			switch (inst->rxBuffer[B])				// Values for un-stuffing are from SPS30 datasheet
 8001434:	2b5d      	cmp	r3, #93	; 0x5d
 8001436:	d009      	beq.n	800144c <SPS30_read+0x188>
 8001438:	2b5e      	cmp	r3, #94	; 0x5e
 800143a:	d000      	beq.n	800143e <SPS30_read+0x17a>
					break;
 800143c:	e026      	b.n	800148c <SPS30_read+0x1c8>
					inst->rxData[BD] = 0x7E;
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	227e      	movs	r2, #126	; 0x7e
 8001446:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 800144a:	e01f      	b.n	800148c <SPS30_read+0x1c8>
					inst->rxData[BD] = 0x7D;
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	227d      	movs	r2, #125	; 0x7d
 8001454:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 8001458:	e018      	b.n	800148c <SPS30_read+0x1c8>
					inst->rxData[BD] = 0x11;
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	2211      	movs	r2, #17
 8001462:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 8001466:	e011      	b.n	800148c <SPS30_read+0x1c8>
					inst->rxData[BD] = 0x13;
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	2213      	movs	r2, #19
 8001470:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 8001474:	e00a      	b.n	800148c <SPS30_read+0x1c8>
			}
			//inst->rxData[BD] = inst->rxBuffer[B] + 0x20;	// [!!!] Shortcut, may not work
		}
		else
		{
			inst->rxData[BD] = inst->rxBuffer[B];
 8001476:	7aba      	ldrb	r2, [r7, #10]
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	440a      	add	r2, r1
 800147e:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	460a      	mov	r2, r1
 8001488:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		}
		temp_checksum += inst->rxData[BD];
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
		BD++;
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	3301      	adds	r3, #1
 80014a2:	72fb      	strb	r3, [r7, #11]
	for (uint8_t B = 0; B < inst->rxLen; B++)
 80014a4:	7abb      	ldrb	r3, [r7, #10]
 80014a6:	3301      	adds	r3, #1
 80014a8:	72bb      	strb	r3, [r7, #10]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 80014b0:	7aba      	ldrb	r2, [r7, #10]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3a8      	bcc.n	8001408 <SPS30_read+0x144>
	}
	if (inst->checksum != (uint8_t)~((temp_checksum & 0xFF))) { println("Error: bad checksum"); return false;	}// Check checksum
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d004      	beq.n	80014d2 <SPS30_read+0x20e>
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <SPS30_read+0x21c>)
 80014ca:	f7ff fe7d 	bl	80011c8 <println>
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <SPS30_read+0x210>
	else return true;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	08011420 	.word	0x08011420
 80014e0:	08011434 	.word	0x08011434

080014e4 <SPS30_write>:
static bool SPS30_write(SPS30* inst, uint8_t* buffer, uint8_t len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	4613      	mov	r3, r2
 80014f0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2] = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	823b      	strh	r3, [r7, #16]
	inst->checksum = 0;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	for (int B = 0; B < len; B++)
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e00e      	b.n	8001522 <SPS30_write+0x3e>
	{
		inst->checksum += buffer[B];
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	440b      	add	r3, r1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	for (int B = 0; B < len; B++)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbec      	blt.n	8001504 <SPS30_write+0x20>
	}
	inst->checksum = ~(inst->checksum);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 8001530:	43db      	mvns	r3, r3
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b

	temp[0] = 0x7E; temp[1] = 0x00;
 800153a:	237e      	movs	r3, #126	; 0x7e
 800153c:	743b      	strb	r3, [r7, #16]
 800153e:	2300      	movs	r3, #0
 8001540:	747b      	strb	r3, [r7, #17]
	HAL_UART_Transmit(inst->uart, temp, 2, 100);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	f107 0110 	add.w	r1, r7, #16
 800154a:	2364      	movs	r3, #100	; 0x64
 800154c:	2202      	movs	r2, #2
 800154e:	f005 fa92 	bl	8006a76 <HAL_UART_Transmit>

	HAL_UART_Transmit(inst->uart, buffer, len, 100);				// transmit bytes
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	f005 fa8a 	bl	8006a76 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 8001562:	bf00      	nop
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fd29 	bl	8006fc0 <HAL_UART_GetState>
 800156e:	4603      	mov	r3, r0
 8001570:	2b20      	cmp	r3, #32
 8001572:	d1f7      	bne.n	8001564 <SPS30_write+0x80>

	temp[0] = inst->checksum; temp[1] = 0x7E;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 800157a:	743b      	strb	r3, [r7, #16]
 800157c:	237e      	movs	r3, #126	; 0x7e
 800157e:	747b      	strb	r3, [r7, #17]
	HAL_UART_Transmit(inst->uart, temp, 2, 100);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f107 0110 	add.w	r1, r7, #16
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	2202      	movs	r2, #2
 800158c:	f005 fa73 	bl	8006a76 <HAL_UART_Transmit>
	return true;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <SPS30_init>:

bool SPS30_init(SPS30* inst)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

	if (!SPS30_present(inst)) return false;
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f918 	bl	80017d8 <SPS30_present>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f083 0301 	eor.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SPS30_init+0x1e>
 80015b4:	2300      	movs	r3, #0
 80015b6:	e014      	b.n	80015e2 <SPS30_init+0x48>

	delay(400);
 80015b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015bc:	f000 f9aa 	bl	8001914 <HAL_Delay>
	SPS30_reset(inst);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8ef 	bl	80017a4 <SPS30_reset>
	delay(400);
 80015c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80015ca:	f000 f9a3 	bl	8001914 <HAL_Delay>

	SPS30_start_meas(inst);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8ac 	bl	800172c <SPS30_start_meas>

	inst->active = true;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	//SPS30_clean(inst);

	return inst->active;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <SPS30_update>:

bool SPS30_update(SPS30* inst)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	SPS30_stop_meas(inst);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8bb 	bl	8001770 <SPS30_stop_meas>
	// Read measurement
	inst->txBuffer[0] = SPS30_READ_MEAS;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x00;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SPS30_write(inst, inst->txBuffer, 2);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	332c      	adds	r3, #44	; 0x2c
 800160e:	2202      	movs	r2, #2
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff66 	bl	80014e4 <SPS30_write>
	if (SPS30_read(inst) && inst->rxLen >= 0x28)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe53 	bl	80012c4 <SPS30_read>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d076      	beq.n	8001712 <SPS30_update+0x126>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 800162a:	2b27      	cmp	r3, #39	; 0x27
 800162c:	d971      	bls.n	8001712 <SPS30_update+0x126>
	{
		bytesToFloatRev(inst->rxData + 0, &(inst->pm1));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f203 123b 	addw	r2, r3, #315	; 0x13b
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fe24 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 4, &(inst->pm2));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3308      	adds	r3, #8
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fe1a 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 8, &(inst->pm4));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800165a:	f103 0208 	add.w	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	330c      	adds	r3, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4610      	mov	r0, r2
 8001666:	f7ff fe0f 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 12, &(inst->pm10));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8001670:	f103 020c 	add.w	r2, r3, #12
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3310      	adds	r3, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f7ff fe04 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 16, &(inst->n_pm05));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8001686:	f103 0210 	add.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3314      	adds	r3, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f7ff fdf9 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 20, &(inst->n_pm1));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800169c:	f103 0214 	add.w	r2, r3, #20
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3318      	adds	r3, #24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff fdee 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 24, &(inst->n_pm2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80016b2:	f103 0218 	add.w	r2, r3, #24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	331c      	adds	r3, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f7ff fde3 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 28, &(inst->n_pm4));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80016c8:	f103 021c 	add.w	r2, r3, #28
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3320      	adds	r3, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fdd8 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 32, &(inst->n_pm10));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80016de:	f103 0220 	add.w	r2, r3, #32
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3324      	adds	r3, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fdcd 	bl	8001288 <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 36, &(inst->typical_size));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80016f4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3328      	adds	r3, #40	; 0x28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff fdc2 	bl	8001288 <bytesToFloatRev>

		println("New data received!");
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <SPS30_update+0x13c>)
 8001706:	f7ff fd5f 	bl	80011c8 <println>
		inst->newData = true;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	}
	SPS30_start_meas(inst);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f80a 	bl	800172c <SPS30_start_meas>
	return inst->newData;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	08011448 	.word	0x08011448

0800172c <SPS30_start_meas>:

void SPS30_start_meas(SPS30* inst)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_START_MEAS;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x02;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->txBuffer[2] = 0x01;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->txBuffer[3] = 0x03;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	SPS30_write(inst, inst->txBuffer, 4);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	332c      	adds	r3, #44	; 0x2c
 8001758:	2204      	movs	r2, #4
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fec1 	bl	80014e4 <SPS30_write>
	SPS30_read(inst);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fdae 	bl	80012c4 <SPS30_read>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <SPS30_stop_meas>:

void SPS30_stop_meas(SPS30* inst)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_STOP_MEAS;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x00;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SPS30_write(inst, inst->txBuffer, 2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	332c      	adds	r3, #44	; 0x2c
 800178c:	2202      	movs	r2, #2
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fea7 	bl	80014e4 <SPS30_write>
	SPS30_read(inst);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd94 	bl	80012c4 <SPS30_read>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <SPS30_reset>:

void SPS30_reset(SPS30* inst)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_RESET;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	22d3      	movs	r2, #211	; 0xd3
 80017b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x00;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SPS30_write(inst, inst->txBuffer, 2);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	332c      	adds	r3, #44	; 0x2c
 80017c0:	2202      	movs	r2, #2
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fe8d 	bl	80014e4 <SPS30_write>
	SPS30_read(inst);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fd7a 	bl	80012c4 <SPS30_read>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <SPS30_present>:

bool SPS30_present(SPS30* inst)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_DEVICE_INFO;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	22d0      	movs	r2, #208	; 0xd0
 80017e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x01;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->txBuffer[2] = 0x01;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	SPS30_write(inst, inst->txBuffer, 3);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	332c      	adds	r3, #44	; 0x2c
 80017fc:	2203      	movs	r2, #3
 80017fe:	4619      	mov	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fe6f 	bl	80014e4 <SPS30_write>

	if (!SPS30_read(inst)) { println("Not present!"); return false; }
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fd5c 	bl	80012c4 <SPS30_read>
 800180c:	4603      	mov	r3, r0
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <SPS30_present+0x4a>
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <SPS30_present+0x54>)
 800181a:	f7ff fcd5 	bl	80011c8 <println>
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <SPS30_present+0x4c>
	else return true;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0801145c 	.word	0x0801145c

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f94d 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f00a fefa 	bl	800c65c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f965 	bl	8001b62 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f92d 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000118 	.word	0x20000118
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000004 	.word	0x20000004
 80018f8:	20006480 	.word	0x20006480

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20006480 	.word	0x20006480

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_Delay+0x40>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000004 	.word	0x20000004

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff feb8 	bl	80018fc <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e099      	b.n	8001ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb8:	e00f      	b.n	8001bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bba:	f7ff fe9f 	bl	80018fc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d908      	bls.n	8001bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e078      	b.n	8001ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e8      	bne.n	8001bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_DMA_Init+0x158>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 0307 	bic.w	r3, r3, #7
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d117      	bne.n	8001c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00e      	beq.n	8001c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fa99 	bl	80021b8 <DMA_CheckFifoParam>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa50 	bl	800214c <DMA_CalcBaseAndBitshift>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	223f      	movs	r2, #63	; 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f010803f 	.word	0xf010803f

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Start_IT+0x26>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e048      	b.n	8001d90 <HAL_DMA_Start_IT+0xb8>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d137      	bne.n	8001d82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f9e2 	bl	80020f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	223f      	movs	r2, #63	; 0x3f
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0216 	orr.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d004      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00c      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2205      	movs	r2, #5
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de8:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_DMA_IRQHandler+0x258>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a92      	ldr	r2, [pc, #584]	; (8002038 <HAL_DMA_IRQHandler+0x25c>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2208      	movs	r2, #8
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2208      	movs	r2, #8
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2204      	movs	r2, #4
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d012      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2210      	movs	r2, #16
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d043      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03c      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d018      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d024      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
 8001f0a:	e01f      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e016      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0208 	bic.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	2220      	movs	r2, #32
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 808e 	beq.w	800207a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8086 	beq.w	800207a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2220      	movs	r2, #32
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d136      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0216 	bic.w	r2, r2, #22
 8001f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x1da>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	223f      	movs	r2, #63	; 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d07d      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
        }
        return;
 8001ff2:	e078      	b.n	80020e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01c      	beq.n	800203c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	2b00      	cmp	r3, #0
 8002016:	d030      	beq.n	800207a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
 8002020:	e02b      	b.n	800207a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d027      	beq.n	800207a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
 8002032:	e022      	b.n	800207a <HAL_DMA_IRQHandler+0x29e>
 8002034:	20000118 	.word	0x20000118
 8002038:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0210 	bic.w	r2, r2, #16
 8002058:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	2b00      	cmp	r3, #0
 8002080:	d032      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d022      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d307      	bcc.n	80020c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f2      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x2ca>
 80020c0:	e000      	b.n	80020c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020e6:	bf00      	nop
    }
  }
}
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop

080020f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800210c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d108      	bne.n	8002130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800212e:	e007      	b.n	8002140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3b10      	subs	r3, #16
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <DMA_CalcBaseAndBitshift+0x64>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002166:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d909      	bls.n	800218e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	1d1a      	adds	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	659a      	str	r2, [r3, #88]	; 0x58
 800218c:	e007      	b.n	800219e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	aaaaaaab 	.word	0xaaaaaaab
 80021b4:	080118ac 	.word	0x080118ac

080021b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11f      	bne.n	8002212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d855      	bhi.n	8002284 <DMA_CheckFifoParam+0xcc>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <DMA_CheckFifoParam+0x28>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	08002203 	.word	0x08002203
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002285 	.word	0x08002285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d045      	beq.n	8002288 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e042      	b.n	8002288 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800220a:	d13f      	bne.n	800228c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e03c      	b.n	800228c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221a:	d121      	bne.n	8002260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d836      	bhi.n	8002290 <DMA_CheckFifoParam+0xd8>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <DMA_CheckFifoParam+0x70>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002239 	.word	0x08002239
 800222c:	0800223f 	.word	0x0800223f
 8002230:	08002239 	.word	0x08002239
 8002234:	08002251 	.word	0x08002251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e02f      	b.n	800229e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d024      	beq.n	8002294 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224e:	e021      	b.n	8002294 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002258:	d11e      	bne.n	8002298 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800225e:	e01b      	b.n	8002298 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d902      	bls.n	800226c <DMA_CheckFifoParam+0xb4>
 8002266:	2b03      	cmp	r3, #3
 8002268:	d003      	beq.n	8002272 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800226a:	e018      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e015      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e00b      	b.n	800229c <DMA_CheckFifoParam+0xe4>
      break;
 8002284:	bf00      	nop
 8002286:	e00a      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002288:	bf00      	nop
 800228a:	e008      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 800228c:	bf00      	nop
 800228e:	e006      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002290:	bf00      	nop
 8002292:	e004      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
 8002296:	e002      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;   
 8002298:	bf00      	nop
 800229a:	e000      	b.n	800229e <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
    }
  } 
  
  return status; 
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e16b      	b.n	80025a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 815a 	bne.w	800259a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x4a>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d123      	bne.n	800233e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d00b      	beq.n	8002392 <HAL_GPIO_Init+0xe6>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b12      	cmp	r3, #18
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80b4 	beq.w	800259a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_GPIO_Init+0x308>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <HAL_GPIO_Init+0x308>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_GPIO_Init+0x308>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_GPIO_Init+0x310>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_GPIO_Init+0x314>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_GPIO_Init+0x318>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x320>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_GPIO_Init+0x324>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <HAL_GPIO_Init+0x328>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4a      	ldr	r2, [pc, #296]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20a>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024b6:	2308      	movs	r3, #8
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_GPIO_Init+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002516:	4a31      	ldr	r2, [pc, #196]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800251c:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HAL_GPIO_Init+0x330>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002540:	4a26      	ldr	r2, [pc, #152]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_GPIO_Init+0x330>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae90 	bls.w	80022c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	3724      	adds	r7, #36	; 0x24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40021c00 	.word	0x40021c00
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e001      	b.n	8002602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	401a      	ands	r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	429a      	cmp	r2, r3
 800265a:	d104      	bne.n	8002666 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	041a      	lsls	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002664:	e002      	b.n	800266c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e10f      	b.n	80028aa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f00a f804 	bl	800c6ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026bc:	f001 fe70 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80026c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a7b      	ldr	r2, [pc, #492]	; (80028b4 <HAL_I2C_Init+0x23c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d807      	bhi.n	80026dc <HAL_I2C_Init+0x64>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_I2C_Init+0x240>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bf94      	ite	ls
 80026d4:	2301      	movls	r3, #1
 80026d6:	2300      	movhi	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e006      	b.n	80026ea <HAL_I2C_Init+0x72>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_I2C_Init+0x244>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	bf94      	ite	ls
 80026e4:	2301      	movls	r3, #1
 80026e6:	2300      	movhi	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0db      	b.n	80028aa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <HAL_I2C_Init+0x248>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a64      	ldr	r2, [pc, #400]	; (80028b4 <HAL_I2C_Init+0x23c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d802      	bhi.n	800272c <HAL_I2C_Init+0xb4>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3301      	adds	r3, #1
 800272a:	e009      	b.n	8002740 <HAL_I2C_Init+0xc8>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_I2C_Init+0x24c>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	3301      	adds	r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	430b      	orrs	r3, r1
 8002746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002752:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4956      	ldr	r1, [pc, #344]	; (80028b4 <HAL_I2C_Init+0x23c>)
 800275c:	428b      	cmp	r3, r1
 800275e:	d80d      	bhi.n	800277c <HAL_I2C_Init+0x104>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e59      	subs	r1, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fbb1 f3f3 	udiv	r3, r1, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	bf38      	it	cc
 8002778:	2304      	movcc	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1a4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x130>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x156>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x15e>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1a4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x184>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1a4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b08f      	sub	sp, #60	; 0x3c
 80028cc:	af0a      	add	r7, sp, #40	; 0x28
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e10f      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f00a fbbb 	bl	800d070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f005 fd5a 	bl	80083d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	687e      	ldr	r6, [r7, #4]
 8002926:	466d      	mov	r5, sp
 8002928:	f106 0410 	add.w	r4, r6, #16
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	1d33      	adds	r3, r6, #4
 800293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	f005 fc31 	bl	80081a8 <USB_CoreInit>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f005 fd48 	bl	80083f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e04a      	b.n	8002a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	333d      	adds	r3, #61	; 0x3d
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	333c      	adds	r3, #60	; 0x3c
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	b298      	uxth	r0, r3
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3342      	adds	r3, #66	; 0x42
 80029a6:	4602      	mov	r2, r0
 80029a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	333f      	adds	r3, #63	; 0x3f
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	; 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3348      	adds	r3, #72	; 0x48
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3350      	adds	r3, #80	; 0x50
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3301      	adds	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3af      	bcc.n	800296a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e044      	b.n	8002a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	3301      	adds	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3b5      	bcc.n	8002a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	687e      	ldr	r6, [r7, #4]
 8002aac:	466d      	mov	r5, sp
 8002aae:	f106 0410 	add.w	r4, r6, #16
 8002ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac2:	1d33      	adds	r3, r6, #4
 8002ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f005 fcbe 	bl	8008448 <USB_DevInit>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00d      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f006 fcb3 	bl	800945e <USB_DevDisconnect>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Start+0x1c>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e020      	b.n	8002b60 <HAL_PCD_Start+0x5e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d109      	bne.n	8002b42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f006 fc71 	bl	800942e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 fc2d 	bl	80083b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08d      	sub	sp, #52	; 0x34
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f006 fd18 	bl	80095b4 <USB_GetMode>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 838e 	bne.w	80032a8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 fc7c 	bl	800948e <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8384 	beq.w	80032a6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 fc73 	bl	800948e <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f002 0202 	and.w	r2, r2, #2
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f006 fc61 	bl	800948e <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bd6:	d17b      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f006 fc67 	bl	80094b4 <USB_ReadDevAllOutEpInterrupt>
 8002be6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002be8:	e06f      	b.n	8002cca <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d064      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f006 fc8c 	bl	800951c <USB_ReadDevOutEPInterrupt>
 8002c04:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fe0d 	bl	8003844 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 ff0c 	bl	8003a54 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c64:	461a      	mov	r2, r3
 8002c66:	2310      	movs	r3, #16
 8002c68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d108      	bne.n	8002c8e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c86:	461a      	mov	r2, r3
 8002c88:	2101      	movs	r1, #1
 8002c8a:	f006 fcd7 	bl	800963c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d18c      	bne.n	8002bea <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f006 fbda 	bl	800948e <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce4:	f040 80c4 	bne.w	8002e70 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f006 fbfb 	bl	80094e8 <USB_ReadDevAllInEpInterrupt>
 8002cf2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cf8:	e0b6      	b.n	8002e68 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80ab 	beq.w	8002e5c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f006 fc21 	bl	8009558 <USB_ReadDevInEPInterrupt>
 8002d16:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d05b      	beq.n	8002dda <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	2201      	movs	r2, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69f9      	ldr	r1, [r7, #28]
 8002d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d42:	4013      	ands	r3, r2
 8002d44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d52:	461a      	mov	r2, r3
 8002d54:	2301      	movs	r3, #1
 8002d56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d11b      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3348      	adds	r3, #72	; 0x48
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4403      	add	r3, r0
 8002d80:	3344      	adds	r3, #68	; 0x44
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4419      	add	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4403      	add	r3, r0
 8002d94:	3348      	adds	r3, #72	; 0x48
 8002d96:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f00a f9e7 	bl	800d172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d116      	bne.n	8002dda <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d113      	bne.n	8002dda <HAL_PCD_IRQHandler+0x272>
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3350      	adds	r3, #80	; 0x50
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d108      	bne.n	8002dda <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	f006 fc31 	bl	800963c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df0:	461a      	mov	r2, r3
 8002df2:	2308      	movs	r3, #8
 8002df4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2310      	movs	r3, #16
 8002e10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2340      	movs	r3, #64	; 0x40
 8002e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e44:	461a      	mov	r2, r3
 8002e46:	2302      	movs	r3, #2
 8002e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc67 	bl	800372a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	3301      	adds	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f af45 	bne.w	8002cfa <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f006 fb0a 	bl	800948e <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e84:	d122      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d108      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eac:	2100      	movs	r1, #0
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fe88 	bl	8003bc4 <HAL_PCDEx_LPM_Callback>
 8002eb4:	e002      	b.n	8002ebc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f00a f9d2 	bl	800d260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f006 fadc 	bl	800948e <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee0:	d112      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f00a f98e 	bl	800d214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f06:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f006 fabe 	bl	800948e <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	f040 80a7 	bne.w	800306e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2110      	movs	r1, #16
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f005 fbf6 	bl	800872c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f44:	e036      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	461a      	mov	r2, r3
 8002f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6a:	0151      	lsls	r1, r2, #5
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	440a      	add	r2, r1
 8002f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3c3      	bcc.n	8002f46 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fcc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fd0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fea:	f043 030b 	orr.w	r3, r3, #11
 8002fee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003000:	f043 030b 	orr.w	r3, r3, #11
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	e015      	b.n	8003034 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800301a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800301e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302e:	f043 030b 	orr.w	r3, r3, #11
 8003032:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003042:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003046:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003058:	461a      	mov	r2, r3
 800305a:	f006 faef 	bl	800963c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800306c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f006 fa0b 	bl	800948e <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d124      	bne.n	80030ce <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f006 faa1 	bl	80095d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f005 fbab 	bl	80087ee <USB_GetDevSpeed>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681c      	ldr	r4, [r3, #0]
 80030a4:	f001 f970 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80030a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	4620      	mov	r0, r4
 80030b4:	f005 f8da 	bl	800826c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f00a f882 	bl	800d1c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f006 f9db 	bl	800948e <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d161      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0210 	bic.w	r2, r2, #16
 80030f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	2b02      	cmp	r3, #2
 800311c:	d124      	bne.n	8003168 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d035      	beq.n	8003196 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6a38      	ldr	r0, [r7, #32]
 800313e:	f006 f853 	bl	80091e8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]
 8003166:	e016      	b.n	8003196 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	0c5b      	lsrs	r3, r3, #17
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	2b06      	cmp	r3, #6
 8003172:	d110      	bne.n	8003196 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800317a:	2208      	movs	r2, #8
 800317c:	4619      	mov	r1, r3
 800317e:	6a38      	ldr	r0, [r7, #32]
 8003180:	f006 f832 	bl	80091e8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003190:	441a      	add	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0210 	orr.w	r2, r2, #16
 80031a4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f006 f96f 	bl	800948e <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d10a      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f009 fff3 	bl	800d1a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f002 0208 	and.w	r2, r2, #8
 80031ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f006 f95a 	bl	800948e <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e4:	d10f      	bne.n	8003206 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f00a f855 	bl	800d2a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f006 f93f 	bl	800948e <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321a:	d10f      	bne.n	800323c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f00a f828 	bl	800d27c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f006 f924 	bl	800948e <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d10a      	bne.n	8003268 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f00a f836 	bl	800d2c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f006 f90e 	bl	800948e <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d115      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f00a f826 	bl	800d2e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e000      	b.n	80032a8 <HAL_PCD_IRQHandler+0x740>
      return;
 80032a6:	bf00      	nop
    }
  }
}
 80032a8:	3734      	adds	r7, #52	; 0x34
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}

080032ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_PCD_SetAddress+0x1a>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e013      	b.n	80032f0 <HAL_PCD_SetAddress+0x42>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f006 f87e 	bl	80093e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
 800330a:	460b      	mov	r3, r1
 800330c:	803b      	strh	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0f      	bge.n	800333e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3338      	adds	r3, #56	; 0x38
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	705a      	strb	r2, [r3, #1]
 800333c:	e00f      	b.n	800335e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800336a:	883a      	ldrh	r2, [r7, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	78ba      	ldrb	r2, [r7, #2]
 8003374:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003388:	78bb      	ldrb	r3, [r7, #2]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d102      	bne.n	8003394 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_EP_Open+0xaa>
 800339e:	2302      	movs	r3, #2
 80033a0:	e00e      	b.n	80033c0 <HAL_PCD_EP_Open+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 fa41 	bl	8008838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033be:	7afb      	ldrb	r3, [r7, #11]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da0f      	bge.n	80033fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 020f 	and.w	r2, r3, #15
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3338      	adds	r3, #56	; 0x38
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
 80033fa:	e00f      	b.n	800341c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_Close+0x6e>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_Close+0x8c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f005 fa7f 	bl	8008948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	f005 fd02 	bl	8008ed8 <USB_EP0StartXfer>
 80034d4:	e008      	b.n	80034e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	f005 fab4 	bl	8008a50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003514:	681b      	ldr	r3, [r3, #0]
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	460b      	mov	r3, r1
 8003530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2201      	movs	r2, #1
 8003560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003562:	7afb      	ldrb	r3, [r7, #11]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	f005 fca0 	bl	8008ed8 <USB_EP0StartXfer>
 8003598:	e008      	b.n	80035ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	f005 fa52 	bl	8008a50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d901      	bls.n	80035d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e050      	b.n	8003676 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da0f      	bge.n	80035fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	3338      	adds	r3, #56	; 0x38
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	705a      	strb	r2, [r3, #1]
 80035fa:	e00d      	b.n	8003618 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_SetStall+0x82>
 8003634:	2302      	movs	r3, #2
 8003636:	e01e      	b.n	8003676 <HAL_PCD_EP_SetStall+0xc0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f005 fdf7 	bl	800923a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003666:	461a      	mov	r2, r3
 8003668:	f005 ffe8 	bl	800963c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d901      	bls.n	800369c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e042      	b.n	8003722 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800369c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da0f      	bge.n	80036c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3338      	adds	r3, #56	; 0x38
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	705a      	strb	r2, [r3, #1]
 80036c2:	e00f      	b.n	80036e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_PCD_EP_ClrStall+0x86>
 8003700:	2302      	movs	r3, #2
 8003702:	e00e      	b.n	8003722 <HAL_PCD_EP_ClrStall+0xa4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 fdff 	bl	8009316 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08a      	sub	sp, #40	; 0x28
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	429a      	cmp	r2, r3
 800375c:	d901      	bls.n	8003762 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06c      	b.n	800383c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	d902      	bls.n	800377e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3303      	adds	r3, #3
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003786:	e02b      	b.n	80037e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d902      	bls.n	80037a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3303      	adds	r3, #3
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f005 fcdb 	bl	800917e <USB_WritePacket>

    ep->xfer_buff  += len;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	441a      	add	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d809      	bhi.n	800380a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fe:	429a      	cmp	r2, r3
 8003800:	d203      	bcs.n	800380a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1be      	bne.n	8003788 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d811      	bhi.n	800383a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	43db      	mvns	r3, r3
 8003830:	6939      	ldr	r1, [r7, #16]
 8003832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003836:	4013      	ands	r3, r2
 8003838:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	333c      	adds	r3, #60	; 0x3c
 800385c:	3304      	adds	r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 80b3 	bne.w	80039e2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d028      	beq.n	80038d8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a70      	ldr	r2, [pc, #448]	; (8003a4c <PCD_EP_OutXfrComplete_int+0x208>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d90e      	bls.n	80038ac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f009 fc33 	bl	800d118 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038bc:	461a      	mov	r2, r3
 80038be:	2101      	movs	r1, #1
 80038c0:	f005 febc 	bl	800963c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	6093      	str	r3, [r2, #8]
 80038d6:	e0b3      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	2320      	movs	r3, #32
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	e0a4      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 809f 	bne.w	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <PCD_EP_OutXfrComplete_int+0x208>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d90f      	bls.n	800392a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003920:	461a      	mov	r2, r3
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	6093      	str	r3, [r2, #8]
 8003928:	e08a      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800393c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	440b      	add	r3, r1
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003950:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4403      	add	r3, r0
 8003960:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003964:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4403      	add	r3, r0
 8003988:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4419      	add	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4403      	add	r3, r0
 800399e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039a2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f009 fbc6 	bl	800d13c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d144      	bne.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d138      	bne.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039d8:	461a      	mov	r2, r3
 80039da:	2101      	movs	r1, #1
 80039dc:	f005 fe2e 	bl	800963c <USB_EP0_OutStart>
 80039e0:	e02e      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <PCD_EP_OutXfrComplete_int+0x20c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d124      	bne.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	6093      	str	r3, [r2, #8]
 8003a08:	e01a      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2320      	movs	r3, #32
 8003a24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f009 fb85 	bl	800d13c <HAL_PCD_DataOutStageCallback>
 8003a32:	e005      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f009 fb7e 	bl	800d13c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	4f54300a 	.word	0x4f54300a
 8003a50:	4f54310a 	.word	0x4f54310a

08003a54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	333c      	adds	r3, #60	; 0x3c
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d113      	bne.n	8003ab2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d922      	bls.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01d      	beq.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	6093      	str	r3, [r2, #8]
 8003ab0:	e012      	b.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10e      	bne.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f009 fb1d 	bl	800d118 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d90c      	bls.n	8003b00 <PCD_EP_OutSetupPacket_int+0xac>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af8:	461a      	mov	r2, r3
 8003afa:	2101      	movs	r1, #1
 8003afc:	f005 fd9e 	bl	800963c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	4f54300a 	.word	0x4f54300a
 8003b10:	4f54310a 	.word	0x4f54310a

08003b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	4613      	mov	r3, r2
 8003b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	0419      	lsls	r1, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	e028      	b.n	8003b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e00d      	b.n	8003b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3340      	adds	r3, #64	; 0x40
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3ec      	bcc.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b7c:	883b      	ldrh	r3, [r7, #0]
 8003b7e:	0418      	lsls	r0, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4302      	orrs	r2, r0
 8003b8c:	3340      	adds	r3, #64	; 0x40
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e22d      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	4ba3      	ldr	r3, [pc, #652]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4ba0      	ldr	r3, [pc, #640]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b9d      	ldr	r3, [pc, #628]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b99      	ldr	r3, [pc, #612]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e208      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b91      	ldr	r3, [pc, #580]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a90      	ldr	r2, [pc, #576]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a8a      	ldr	r2, [pc, #552]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a87      	ldr	r2, [pc, #540]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b84      	ldr	r3, [pc, #528]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a80      	ldr	r2, [pc, #512]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fe32 	bl	80018fc <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fe2e 	bl	80018fc <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1cd      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fe1e 	bl	80018fc <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fe1a 	bl	80018fc <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1b9      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e18d      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4952      	ldr	r1, [pc, #328]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <HAL_RCC_OscConfig+0x2b0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd fdd3 	bl	80018fc <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd fdcf 	bl	80018fc <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e16e      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4940      	ldr	r1, [pc, #256]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_OscConfig+0x2b0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fdb2 	bl	80018fc <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fdae 	bl	80018fc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e14d      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d030      	beq.n	8003e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x2b4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd fd92 	bl	80018fc <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fd8e 	bl	80018fc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e12d      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e015      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x2b4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fd7b 	bl	80018fc <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd fd77 	bl	80018fc <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e116      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a0 	beq.w	8003f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	; 0x40
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d121      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_RCC_OscConfig+0x2b8>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fd3d 	bl	80018fc <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e011      	b.n	8003eaa <HAL_RCC_OscConfig+0x2ce>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	42470000 	.word	0x42470000
 8003e90:	42470e80 	.word	0x42470e80
 8003e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fd30 	bl	80018fc <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0cf      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2f0>
 8003ebe:	4b66      	ldr	r3, [pc, #408]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a65      	ldr	r2, [pc, #404]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eca:	e01c      	b.n	8003f06 <HAL_RCC_OscConfig+0x32a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x312>
 8003ed4:	4b60      	ldr	r3, [pc, #384]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a5f      	ldr	r2, [pc, #380]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003eda:	f043 0304 	orr.w	r3, r3, #4
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x32a>
 8003eee:	4b5a      	ldr	r3, [pc, #360]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a59      	ldr	r2, [pc, #356]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b57      	ldr	r3, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a56      	ldr	r2, [pc, #344]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d015      	beq.n	8003f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fcf5 	bl	80018fc <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd fcf1 	bl	80018fc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e08e      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCC_OscConfig+0x33a>
 8003f38:	e014      	b.n	8003f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fcdf 	bl	80018fc <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd fcdb 	bl	80018fc <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e078      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ee      	bne.n	8003f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a3a      	ldr	r2, [pc, #232]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d064      	beq.n	8004048 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d05c      	beq.n	8004044 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d141      	bne.n	8004016 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCC_OscConfig+0x480>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fcb0 	bl	80018fc <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fcac 	bl	80018fc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04b      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	019b      	lsls	r3, r3, #6
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	491d      	ldr	r1, [pc, #116]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_RCC_OscConfig+0x480>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fd fc85 	bl	80018fc <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd fc81 	bl	80018fc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e020      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x41a>
 8004014:	e018      	b.n	8004048 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_RCC_OscConfig+0x480>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd fc6e 	bl	80018fc <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fc6a 	bl	80018fc <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e009      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x47c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x448>
 8004042:	e001      	b.n	8004048 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40007000 	.word	0x40007000
 8004058:	40023800 	.word	0x40023800
 800405c:	42470060 	.word	0x42470060

08004060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ca      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d90c      	bls.n	800409c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b64      	ldr	r3, [pc, #400]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0b6      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b4:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a57      	ldr	r2, [pc, #348]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a51      	ldr	r2, [pc, #324]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	494c      	ldr	r1, [pc, #304]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d044      	beq.n	8004180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d119      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07d      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d003      	beq.n	800411e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b3e      	ldr	r3, [pc, #248]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06d      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e065      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4933      	ldr	r1, [pc, #204]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004150:	f7fd fbd4 	bl	80018fc <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fd fbd0 	bl	80018fc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04d      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d20c      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <HAL_RCC_ClockConfig+0x1b4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e030      	b.n	800420a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4915      	ldr	r1, [pc, #84]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	490d      	ldr	r1, [pc, #52]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e6:	f000 f81d 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041ea:	4601      	mov	r1, r0
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	fa21 f303 	lsr.w	r3, r1, r3
 80041fe:	4a08      	ldr	r2, [pc, #32]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fd fb36 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	080118c8 	.word	0x080118c8
 8004220:	20000118 	.word	0x20000118

08004224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	2300      	movs	r3, #0
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423a:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d007      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x32>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d008      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x38>
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 808d 	bne.w	800436a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004252:	60bb      	str	r3, [r7, #8]
       break;
 8004254:	e08c      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCC_GetSysClockFreq+0x160>)
 8004258:	60bb      	str	r3, [r7, #8]
      break;
 800425a:	e089      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004266:	4b45      	ldr	r3, [pc, #276]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d023      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b42      	ldr	r3, [pc, #264]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	ea03 0501 	and.w	r5, r3, r1
 8004288:	ea04 0602 	and.w	r6, r4, r2
 800428c:	4a3d      	ldr	r2, [pc, #244]	; (8004384 <HAL_RCC_GetSysClockFreq+0x160>)
 800428e:	fb02 f106 	mul.w	r1, r2, r6
 8004292:	2200      	movs	r2, #0
 8004294:	fb02 f205 	mul.w	r2, r2, r5
 8004298:	440a      	add	r2, r1
 800429a:	493a      	ldr	r1, [pc, #232]	; (8004384 <HAL_RCC_GetSysClockFreq+0x160>)
 800429c:	fba5 0101 	umull	r0, r1, r5, r1
 80042a0:	1853      	adds	r3, r2, r1
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4623      	mov	r3, r4
 80042ae:	f7fc fceb 	bl	8000c88 <__aeabi_uldivmod>
 80042b2:	4603      	mov	r3, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e049      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	f04f 0400 	mov.w	r4, #0
 80042c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	ea03 0501 	and.w	r5, r3, r1
 80042d0:	ea04 0602 	and.w	r6, r4, r2
 80042d4:	4629      	mov	r1, r5
 80042d6:	4632      	mov	r2, r6
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	0154      	lsls	r4, r2, #5
 80042e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042e6:	014b      	lsls	r3, r1, #5
 80042e8:	4619      	mov	r1, r3
 80042ea:	4622      	mov	r2, r4
 80042ec:	1b49      	subs	r1, r1, r5
 80042ee:	eb62 0206 	sbc.w	r2, r2, r6
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	f04f 0400 	mov.w	r4, #0
 80042fa:	0194      	lsls	r4, r2, #6
 80042fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004300:	018b      	lsls	r3, r1, #6
 8004302:	1a5b      	subs	r3, r3, r1
 8004304:	eb64 0402 	sbc.w	r4, r4, r2
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	00e2      	lsls	r2, r4, #3
 8004312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004316:	00d9      	lsls	r1, r3, #3
 8004318:	460b      	mov	r3, r1
 800431a:	4614      	mov	r4, r2
 800431c:	195b      	adds	r3, r3, r5
 800431e:	eb44 0406 	adc.w	r4, r4, r6
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	02a2      	lsls	r2, r4, #10
 800432c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004330:	0299      	lsls	r1, r3, #10
 8004332:	460b      	mov	r3, r1
 8004334:	4614      	mov	r4, r2
 8004336:	4618      	mov	r0, r3
 8004338:	4621      	mov	r1, r4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	461a      	mov	r2, r3
 8004342:	4623      	mov	r3, r4
 8004344:	f7fc fca0 	bl	8000c88 <__aeabi_uldivmod>
 8004348:	4603      	mov	r3, r0
 800434a:	460c      	mov	r4, r1
 800434c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_GetSysClockFreq+0x158>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	3301      	adds	r3, #1
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	60bb      	str	r3, [r7, #8]
      break;
 8004368:	e002      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetSysClockFreq+0x15c>)
 800436c:	60bb      	str	r3, [r7, #8]
      break;
 800436e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004370:	68bb      	ldr	r3, [r7, #8]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	00f42400 	.word	0x00f42400
 8004384:	00b71b00 	.word	0x00b71b00

08004388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000118 	.word	0x20000118

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a4:	f7ff fff0 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a8:	4601      	mov	r1, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4a03      	ldr	r2, [pc, #12]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	080118d8 	.word	0x080118d8

080043c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043cc:	f7ff ffdc 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043d0:	4601      	mov	r1, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0b5b      	lsrs	r3, r3, #13
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	080118d8 	.word	0x080118d8

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004414:	2b00      	cmp	r3, #0
 8004416:	d035      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004418:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fd fa6d 	bl	80018fc <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004426:	f7fd fa69 	bl	80018fc <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0b0      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004438:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	019a      	lsls	r2, r3, #6
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	4955      	ldr	r1, [pc, #340]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004458:	4b52      	ldr	r3, [pc, #328]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800445e:	f7fd fa4d 	bl	80018fc <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004466:	f7fd fa49 	bl	80018fc <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e090      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004478:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8083 	beq.w	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a43      	ldr	r2, [pc, #268]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3e      	ldr	r2, [pc, #248]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7fd fa1f 	bl	80018fc <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fa1b 	bl	80018fc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e062      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02f      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d114      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd f9e9 	bl	80018fc <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd f9e5 	bl	80018fc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e02a      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455c:	d10d      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	490d      	ldr	r1, [pc, #52]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]
 8004578:	e005      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004584:	6093      	str	r3, [r2, #8]
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004592:	4905      	ldr	r1, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	42470068 	.word	0x42470068
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42470e40 	.word	0x42470e40

080045b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e083      	b.n	80046ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7f5b      	ldrb	r3, [r3, #29]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f008 f8e4 	bl	800c7a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	22ca      	movs	r2, #202	; 0xca
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2253      	movs	r2, #83	; 0x53
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f897 	bl	8004726 <RTC_EnterInitMode>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ff      	movs	r2, #255	; 0xff
 8004604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e05e      	b.n	80046ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800461e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004622:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6919      	ldr	r1, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	041a      	lsls	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800466e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f829 	bl	80046d6 <HAL_RTC_WaitForSynchro>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	22ff      	movs	r2, #255	; 0xff
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2204      	movs	r2, #4
 8004696:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e018      	b.n	80046ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	22ff      	movs	r2, #255	; 0xff
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046f2:	f7fd f903 	bl	80018fc <HAL_GetTick>
 80046f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80046f8:	e009      	b.n	800470e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046fa:	f7fd f8ff 	bl	80018fc <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004708:	d901      	bls.n	800470e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e007      	b.n	800471e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d119      	bne.n	8004774 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800474a:	f7fd f8d7 	bl	80018fc <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004750:	e009      	b.n	8004766 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004752:	f7fd f8d3 	bl	80018fc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004760:	d901      	bls.n	8004766 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e007      	b.n	8004776 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ee      	beq.n	8004752 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e01d      	b.n	80047cc <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f008 f814 	bl	800c7d0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f80f 	bl	80047d4 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b08e      	sub	sp, #56	; 0x38
 80047d8:	af04      	add	r7, sp, #16
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80047f4:	2376      	movs	r3, #118	; 0x76
 80047f6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681d      	ldr	r5, [r3, #0]
 80047fc:	466c      	mov	r4, sp
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004810:	4628      	mov	r0, r5
 8004812:	f002 ff69 	bl	80076e8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_SD_InitCard+0xb4>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f002 ffaa 	bl	800777a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_SD_InitCard+0xb4>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800482c:	2002      	movs	r0, #2
 800482e:	f7fd f871 	bl	8001914 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fffe 	bl	8005834 <SD_PowerON>
 8004838:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e013      	b.n	8004880 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 ff22 	bl	80056a2 <SD_InitCard>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bdb0      	pop	{r4, r5, r7, pc}
 8004888:	422580a0 	.word	0x422580a0

0800488c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0ad      	b.n	8004a10 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f040 80a6 	bne.w	8004a0e <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d907      	bls.n	80048e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e094      	b.n	8004a10 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2203      	movs	r2, #3
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004910:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <HAL_SD_ReadBlocks_DMA+0x190>)
 8004918:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	2200      	movs	r2, #0
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3380      	adds	r3, #128	; 0x80
 800492c:	4619      	mov	r1, r3
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	025b      	lsls	r3, r3, #9
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	f7fd f9cf 	bl	8001cd8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_SD_ReadBlocks_DMA+0x194>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	025b      	lsls	r3, r3, #9
 800494c:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800495a:	2390      	movs	r3, #144	; 0x90
 800495c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800495e:	2302      	movs	r3, #2
 8004960:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004966:	2301      	movs	r3, #1
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f107 0214 	add.w	r2, r7, #20
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f002 ff68 	bl	800784a <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004982:	4618      	mov	r0, r3
 8004984:	f002 ff8d 	bl	80078a2 <SDMMC_CmdBlockLength>
 8004988:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e02e      	b.n	8004a10 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d90a      	bls.n	80049ce <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2282      	movs	r2, #130	; 0x82
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f002 ffb4 	bl	8007932 <SDMMC_CmdReadMultiBlock>
 80049ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80049cc:	e009      	b.n	80049e2 <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2281      	movs	r2, #129	; 0x81
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4618      	mov	r0, r3
 80049dc:	f002 ff85 	bl	80078ea <SDMMC_CmdReadSingleBlock>
 80049e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e002      	b.n	8004a10 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	080054b3 	.word	0x080054b3
 8004a1c:	08005521 	.word	0x08005521
 8004a20:	4225858c 	.word	0x4225858c

08004a24 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0ad      	b.n	8004ba8 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 80a6 	bne.w	8004ba6 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d907      	bls.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e094      	b.n	8004ba8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2203      	movs	r2, #3
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	4a42      	ldr	r2, [pc, #264]	; (8004bb0 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <HAL_SD_WriteBlocks_DMA+0x190>)
 8004ab0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	025b      	lsls	r3, r3, #9
 8004ac6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f002 fee6 	bl	80078a2 <SDMMC_CmdBlockLength>
 8004ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e053      	b.n	8004ba8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d90a      	bls.n	8004b1c <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	22a0      	movs	r2, #160	; 0xa0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 ff55 	bl	80079c2 <SDMMC_CmdWriteMultiBlock>
 8004b18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b1a:	e009      	b.n	8004b30 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2290      	movs	r2, #144	; 0x90
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f002 ff26 	bl	800797a <SDMMC_CmdWriteSingleBlock>
 8004b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	431a      	orrs	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e027      	b.n	8004ba8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3380      	adds	r3, #128	; 0x80
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	025b      	lsls	r3, r3, #9
 8004b70:	089b      	lsrs	r3, r3, #2
 8004b72:	f7fd f8b1 	bl	8001cd8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	025b      	lsls	r3, r3, #9
 8004b80:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b82:	2390      	movs	r3, #144	; 0x90
 8004b84:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f107 0214 	add.w	r2, r7, #20
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f002 fe54 	bl	800784a <SDIO_ConfigData>
    
    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3730      	adds	r7, #48	; 0x30
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	08005489 	.word	0x08005489
 8004bb4:	08005521 	.word	0x08005521
 8004bb8:	4225858c 	.word	0x4225858c

08004bbc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 808d 	beq.w	8004cf2 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004bf0:	f023 0302 	bic.w	r3, r3, #2
 8004bf4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d03a      	beq.n	8004c78 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_SD_IRQHandler+0x5e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d011      	beq.n	8004c3e <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f002 fef4 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8004c24:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f925 	bl	8004e88 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_SD_IRQHandler+0xac>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f006 f991 	bl	800af90 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8004c6e:	e103      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f006 f983 	bl	800af7c <HAL_SD_TxCpltCallback>
}
 8004c76:	e0ff      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80f9 	beq.w	8004e78 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f002 feb8 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8004c9c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8e9 	bl	8004e88 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80da 	bne.w	8004e78 <HAL_SD_IRQHandler+0x2bc>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 80d3 	bne.w	8004e78 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0208 	bic.w	r2, r2, #8
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f006 f946 	bl	800af7c <HAL_SD_TxCpltCallback>
}
 8004cf0:	e0c2      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 ffef 	bl	8005cee <SD_Write_IT>
}
 8004d10:	e0b2      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 ffb7 	bl	8005c9e <SD_Read_IT>
}
 8004d30:	e0a2      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d38:	f240 233a 	movw	r3, #570	; 0x23a
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 809a 	beq.w	8004e78 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f043 0202 	orr.w	r2, r3, #2
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	f043 0208 	orr.w	r2, r3, #8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	f043 0210 	orr.w	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	f043 0208 	orr.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004dde:	f023 0302 	bic.w	r3, r3, #2
 8004de2:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d036      	beq.n	8004e5e <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d011      	beq.n	8004e1c <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <HAL_SD_IRQHandler+0x2c4>)
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fc ffc7 	bl	8001d98 <HAL_DMA_Abort_IT>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d033      	beq.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fbc8 	bl	80055aa <SD_DMATxAbort>
}
 8004e1a:	e02d      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <HAL_SD_IRQHandler+0x2c8>)
 8004e2a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fc ffb1 	bl	8001d98 <HAL_DMA_Abort_IT>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01d      	beq.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fbf0 	bl	8005626 <SD_DMARxAbort>
}
 8004e46:	e017      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f006 f886 	bl	800af68 <HAL_SD_AbortCallback>
}
 8004e5c:	e00c      	b.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f808 	bl	8004e88 <HAL_SD_ErrorCallback>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	080055ab 	.word	0x080055ab
 8004e84:	08005627 	.word	0x08005627

08004e88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eae:	0e1b      	lsrs	r3, r3, #24
 8004eb0:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	099b      	lsrs	r3, r3, #6
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	88db      	ldrh	r3, [r3, #6]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4313      	orrs	r3, r2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 8087 	bne.w	80050c2 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	029b      	lsls	r3, r3, #10
 8004fb8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fda:	0e1b      	lsrs	r3, r3, #24
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	431a      	orrs	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	b2db      	uxtb	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	b2da      	uxtb	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	089b      	lsrs	r3, r3, #2
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	b2da      	uxtb	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	b2da      	uxtb	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	b2db      	uxtb	r3, r3
 8005054:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	7e1b      	ldrb	r3, [r3, #24]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	4313      	orrs	r3, r2
 800506a:	b2da      	uxtb	r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	7e1b      	ldrb	r3, [r3, #24]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3302      	adds	r3, #2
 8005082:	2201      	movs	r2, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800508c:	fb02 f203 	mul.w	r2, r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	7a1b      	ldrb	r3, [r3, #8]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	2301      	movs	r3, #1
 800509e:	fa03 f202 	lsl.w	r2, r3, r2
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80050ae:	0a52      	lsrs	r2, r2, #9
 80050b0:	fb02 f203 	mul.w	r2, r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050be:	661a      	str	r2, [r3, #96]	; 0x60
 80050c0:	e04d      	b.n	800515e <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d138      	bne.n	800513c <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e2:	0e1b      	lsrs	r3, r3, #24
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	431a      	orrs	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	431a      	orrs	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	b2db      	uxtb	r3, r3
 8005114:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	3301      	adds	r3, #1
 800511c:	029a      	lsls	r2, r3, #10
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005130:	659a      	str	r2, [r3, #88]	; 0x58
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	661a      	str	r2, [r3, #96]	; 0x60
 800513a:	e010      	b.n	800515e <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0c1      	b.n	80052e2 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	b2da      	uxtb	r2, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800517a:	b2da      	uxtb	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005184:	b2db      	uxtb	r3, r3
 8005186:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	7e9b      	ldrb	r3, [r3, #26]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	09db      	lsrs	r3, r3, #7
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	b2da      	uxtb	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	b2db      	uxtb	r3, r3
 8005204:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	7fdb      	ldrb	r3, [r3, #31]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b2da      	uxtb	r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	b2db      	uxtb	r3, r3
 8005252:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	09db      	lsrs	r3, r3, #7
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	b2da      	uxtb	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005346:	b5b0      	push	{r4, r5, r7, lr}
 8005348:	b08e      	sub	sp, #56	; 0x38
 800534a:	af04      	add	r7, sp, #16
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005350:	2300      	movs	r3, #0
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	2b03      	cmp	r3, #3
 8005362:	d02e      	beq.n	80053c2 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d106      	bne.n	800537a <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
 8005378:	e029      	b.n	80053ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005380:	d10a      	bne.n	8005398 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fb28 	bl	80059d8 <SD_WideBus_Enable>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
 8005396:	e01a      	b.n	80053ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fb67 	bl	8005a72 <SD_WideBus_Disable>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
 80053b2:	e00c      	b.n	80053ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
 80053c0:	e005      	b.n	80053ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e024      	b.n	8005436 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681d      	ldr	r5, [r3, #0]
 8005412:	466c      	mov	r4, sp
 8005414:	f107 0318 	add.w	r3, r7, #24
 8005418:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800541c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005426:	4628      	mov	r0, r5
 8005428:	f002 f95e 	bl	80076e8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	; 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bdb0      	pop	{r4, r5, r7, pc}

0800543e <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8005446:	2304      	movs	r3, #4
 8005448:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa93 	bl	8005984 <SD_SendStatus>
 800545e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b82      	cmp	r3, #130	; 0x82
 80054ca:	d111      	bne.n	80054f0 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f002 fa9b 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80054d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fccc 	bl	8004e88 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0208 	bic.w	r2, r2, #8
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f005 fd3c 	bl	800af90 <HAL_SD_RxCpltCallback>
#endif
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	2b01      	cmp	r3, #1
 8005536:	d004      	beq.n	8005542 <SD_DMAError+0x22>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	2b01      	cmp	r3, #1
 8005540:	d12c      	bne.n	800559c <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800555a:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff68 	bl	800543e <HAL_SD_GetCardState>
 800556e:	4603      	mov	r3, r0
 8005570:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d002      	beq.n	800557e <SD_DMAError+0x5e>
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d10a      	bne.n	8005594 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f002 fa42 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	431a      	orrs	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff fc73 	bl	8004e88 <HAL_SD_ErrorCallback>
#endif
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d127      	bne.n	800561e <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff ff35 	bl	800543e <HAL_SD_GetCardState>
 80055d4:	4603      	mov	r3, r0
 80055d6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d002      	beq.n	80055f2 <SD_DMATxAbort+0x48>
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d115      	bne.n	800561e <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f002 fa08 	bl	8007a0c <SDMMC_CmdStopTransfer>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	431a      	orrs	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f005 fca9 	bl	800af68 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8005616:	e002      	b.n	800561e <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fc35 	bl	8004e88 <HAL_SD_ErrorCallback>
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d127      	bne.n	800569a <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fef7 	bl	800543e <HAL_SD_GetCardState>
 8005650:	4603      	mov	r3, r0
 8005652:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005662:	7afb      	ldrb	r3, [r7, #11]
 8005664:	2b06      	cmp	r3, #6
 8005666:	d002      	beq.n	800566e <SD_DMARxAbort+0x48>
 8005668:	7afb      	ldrb	r3, [r7, #11]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d115      	bne.n	800569a <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f002 f9ca 	bl	8007a0c <SDMMC_CmdStopTransfer>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f005 fc6b 	bl	800af68 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8005692:	e002      	b.n	800569a <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fbf7 	bl	8004e88 <HAL_SD_ErrorCallback>
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80056a2:	b5b0      	push	{r4, r5, r7, lr}
 80056a4:	b094      	sub	sp, #80	; 0x50
 80056a6:	af04      	add	r7, sp, #16
 80056a8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80056ae:	2301      	movs	r3, #1
 80056b0:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 f86d 	bl	8007796 <SDIO_GetPowerState>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80056c6:	e0b1      	b.n	800582c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d02f      	beq.n	8005730 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 fab3 	bl	8007c40 <SDMMC_CmdSendCID>
 80056da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <SD_InitCard+0x44>
    {
      return errorstate;
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	e0a2      	b.n	800582c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 f897 	bl	8007820 <SDIO_GetResponse>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2104      	movs	r1, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f002 f88e 	bl	8007820 <SDIO_GetResponse>
 8005704:	4602      	mov	r2, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2108      	movs	r1, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f002 f885 	bl	8007820 <SDIO_GetResponse>
 8005716:	4602      	mov	r2, r0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	210c      	movs	r1, #12
 8005722:	4618      	mov	r0, r3
 8005724:	f002 f87c 	bl	8007820 <SDIO_GetResponse>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005734:	2b03      	cmp	r3, #3
 8005736:	d00d      	beq.n	8005754 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f107 020e 	add.w	r2, r7, #14
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f002 fabd 	bl	8007cc2 <SDMMC_CmdSetRelAdd>
 8005748:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <SD_InitCard+0xb2>
    {
      return errorstate;
 8005750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005752:	e06b      	b.n	800582c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	2b03      	cmp	r3, #3
 800575a:	d036      	beq.n	80057ca <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	461a      	mov	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f002 fa85 	bl	8007c80 <SDMMC_CmdSendCSD>
 8005776:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <SD_InitCard+0xe0>
    {
      return errorstate;
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	e054      	b.n	800582c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f002 f849 	bl	8007820 <SDIO_GetResponse>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2104      	movs	r1, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f002 f840 	bl	8007820 <SDIO_GetResponse>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2108      	movs	r1, #8
 80057ac:	4618      	mov	r0, r3
 80057ae:	f002 f837 	bl	8007820 <SDIO_GetResponse>
 80057b2:	4602      	mov	r2, r0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	210c      	movs	r1, #12
 80057be:	4618      	mov	r0, r3
 80057c0:	f002 f82e 	bl	8007820 <SDIO_GetResponse>
 80057c4:	4602      	mov	r2, r0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2104      	movs	r1, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f825 	bl	8007820 <SDIO_GetResponse>
 80057d6:	4603      	mov	r3, r0
 80057d8:	0d1a      	lsrs	r2, r3, #20
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80057de:	f107 0310 	add.w	r3, r7, #16
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fb59 	bl	8004e9c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	f04f 0400 	mov.w	r4, #0
 80057f8:	461a      	mov	r2, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	4608      	mov	r0, r1
 80057fe:	f002 f929 	bl	8007a54 <SDMMC_CmdSelDesel>
 8005802:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <SD_InitCard+0x16c>
  {
    return errorstate;
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	e00e      	b.n	800582c <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681d      	ldr	r5, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	466c      	mov	r4, sp
 8005816:	f103 0210 	add.w	r2, r3, #16
 800581a:	ca07      	ldmia	r2, {r0, r1, r2}
 800581c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005820:	3304      	adds	r3, #4
 8005822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005824:	4628      	mov	r0, r5
 8005826:	f001 ff5f 	bl	80076e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3740      	adds	r7, #64	; 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bdb0      	pop	{r4, r5, r7, pc}

08005834 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f002 f924 	bl	8007a9e <SDMMC_CmdGoIdleState>
 8005856:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <SD_PowerON+0x2e>
  {
    return errorstate;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	e08c      	b.n	800597c <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f002 f939 	bl	8007ade <SDMMC_CmdOperCond>
 800586c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d03d      	beq.n	80058f0 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800587a:	e032      	b.n	80058e2 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	60ba      	str	r2, [r7, #8]
 8005882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005886:	4293      	cmp	r3, r2
 8005888:	d102      	bne.n	8005890 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800588a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800588e:	e075      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f002 f942 	bl	8007b20 <SDMMC_CmdAppCommand>
 800589c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058a8:	e068      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f002 f959 	bl	8007b68 <SDMMC_CmdAppOperCommand>
 80058b6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058c2:	e05b      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 ffa8 	bl	8007820 <SDIO_GetResponse>
 80058d0:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	0fdb      	lsrs	r3, r3, #31
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <SD_PowerON+0xaa>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <SD_PowerON+0xac>
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0c9      	beq.n	800587c <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
 80058ee:	e044      	b.n	800597a <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80058f6:	e031      	b.n	800595c <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	60ba      	str	r2, [r7, #8]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	4293      	cmp	r3, r2
 8005904:	d102      	bne.n	800590c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800590a:	e037      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f002 f904 	bl	8007b20 <SDMMC_CmdAppCommand>
 8005918:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <SD_PowerON+0xf0>
      {
        return errorstate;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e02b      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800592c:	4618      	mov	r0, r3
 800592e:	f002 f91b 	bl	8007b68 <SDMMC_CmdAppOperCommand>
 8005932:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <SD_PowerON+0x10a>
      {
        return errorstate;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	e01e      	b.n	800597c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f001 ff6b 	bl	8007820 <SDIO_GetResponse>
 800594a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	0fdb      	lsrs	r3, r3, #31
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <SD_PowerON+0x124>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <SD_PowerON+0x126>
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0ca      	beq.n	80058f8 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
 8005972:	e002      	b.n	800597a <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8005998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800599c:	e018      	b.n	80059d0 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f002 f9ac 	bl	8007d08 <SDMMC_CmdSendStatus>
 80059b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <SD_SendStatus+0x38>
  {
    return errorstate;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	e009      	b.n	80059d0 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 ff2c 	bl	8007820 <SDIO_GetResponse>
 80059c8:	4602      	mov	r2, r0
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 ff14 	bl	8007820 <SDIO_GetResponse>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a02:	d102      	bne.n	8005a0a <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a08:	e02f      	b.n	8005a6a <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f87b 	bl	8005b0c <SD_FindSCR>
 8005a16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	e023      	b.n	8005a6a <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01c      	beq.n	8005a66 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f002 f871 	bl	8007b20 <SDMMC_CmdAppCommand>
 8005a3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	e00f      	b.n	8005a6a <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2102      	movs	r1, #2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 f8ae 	bl	8007bb2 <SDMMC_CmdBusWidth>
 8005a56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	e003      	b.n	8005a6a <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e001      	b.n	8005a6a <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fec7 	bl	8007820 <SDIO_GetResponse>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a9c:	d102      	bne.n	8005aa4 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aa2:	e02f      	b.n	8005b04 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f82e 	bl	8005b0c <SD_FindSCR>
 8005ab0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	e023      	b.n	8005b04 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01c      	beq.n	8005b00 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f002 f824 	bl	8007b20 <SDMMC_CmdAppCommand>
 8005ad8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	e00f      	b.n	8005b04 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 f861 	bl	8007bb2 <SDMMC_CmdBusWidth>
 8005af0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	e003      	b.n	8005b04 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e001      	b.n	8005b04 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b08f      	sub	sp, #60	; 0x3c
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7fb feef 	bl	80018fc <HAL_GetTick>
 8005b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2108      	movs	r1, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 feb5 	bl	80078a2 <SDMMC_CmdBlockLength>
 8005b38:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	e0a8      	b.n	8005c96 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f001 ffe5 	bl	8007b20 <SDMMC_CmdAppCommand>
 8005b56:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	e099      	b.n	8005c96 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8005b68:	2308      	movs	r3, #8
 8005b6a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005b6c:	2330      	movs	r3, #48	; 0x30
 8005b6e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005b70:	2302      	movs	r3, #2
 8005b72:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f107 0214 	add.w	r2, r7, #20
 8005b84:	4611      	mov	r1, r2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fe5f 	bl	800784a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 f832 	bl	8007bfa <SDMMC_CmdSendSCR>
 8005b96:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d022      	beq.n	8005be4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	e079      	b.n	8005c96 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	f107 020c 	add.w	r2, r7, #12
 8005bbc:	18d4      	adds	r4, r2, r3
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	f001 fdbd 	bl	800773e <SDIO_ReadFIFO>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	6023      	str	r3, [r4, #0]
      index++;
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	3301      	adds	r3, #1
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005bce:	f7fb fe95 	bl	80018fc <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d102      	bne.n	8005be4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005bde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005be2:	e058      	b.n	8005c96 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	f240 432a 	movw	r3, #1066	; 0x42a
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0d6      	beq.n	8005ba2 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2208      	movs	r2, #8
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	e043      	b.n	8005c96 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2202      	movs	r2, #2
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c24:	2302      	movs	r3, #2
 8005c26:	e036      	b.n	8005c96 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8005c3e:	2320      	movs	r3, #32
 8005c40:	e029      	b.n	8005c96 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	061a      	lsls	r2, r3, #24
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c58:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005c62:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005c6e:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005c70:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	061a      	lsls	r2, r3, #24
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c7e:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005c88:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	373c      	adds	r7, #60	; 0x3c
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}

08005c9e <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005c9e:	b590      	push	{r4, r7, lr}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e00d      	b.n	8005cd2 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	18d4      	adds	r4, r2, r3
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	f001 fd3b 	bl	800773e <SDIO_ReadFIFO>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b07      	cmp	r3, #7
 8005cd6:	d9ee      	bls.n	8005cb6 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	f103 0220 	add.w	r2, r3, #32
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}

08005cee <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e00b      	b.n	8005d1e <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	4619      	mov	r1, r3
 8005d14:	f001 fd20 	bl	8007758 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d9f0      	bls.n	8005d06 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f103 0220 	add.w	r2, r3, #32
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e056      	b.n	8005dfa <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f006 fe32 	bl	800c9d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	ea42 0103 	orr.w	r1, r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	f003 0104 	and.w	r1, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e01d      	b.n	8005e50 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f006 fe19 	bl	800ca60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 fa77 	bl	8006334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d007      	beq.n	8005e8a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e01d      	b.n	8005eee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f815 	bl	8005ef6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f000 fa28 	bl	8006334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fcf2 	bl	8006908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_TIM_PWM_Start+0x74>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIM_PWM_Start+0x2c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <HAL_TIM_PWM_Start+0x78>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_PWM_Start+0x30>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_TIM_PWM_Start+0x32>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b06      	cmp	r3, #6
 8005f62:	d007      	beq.n	8005f74 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40010400 	.word	0x40010400

08005f88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fcb4 	bl	8006908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	; (8006030 <HAL_TIM_PWM_Stop+0xa8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIM_PWM_Stop+0x2c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a21      	ldr	r2, [pc, #132]	; (8006034 <HAL_TIM_PWM_Stop+0xac>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_PWM_Stop+0x30>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_TIM_PWM_Stop+0x32>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a1a      	ldr	r2, [r3, #32]
 8005fc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <HAL_TIM_PWM_Stop+0x66>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a1a      	ldr	r2, [r3, #32]
 8005fd4:	f240 4344 	movw	r3, #1092	; 0x444
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <HAL_TIM_PWM_Stop+0x66>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <HAL_TIM_PWM_Stop+0x96>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	f240 4344 	movw	r3, #1092	; 0x444
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <HAL_TIM_PWM_Stop+0x96>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800604e:	2302      	movs	r3, #2
 8006050:	e0b4      	b.n	80061bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b0c      	cmp	r3, #12
 8006066:	f200 809f 	bhi.w	80061a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080061a9 	.word	0x080061a9
 8006078:	080061a9 	.word	0x080061a9
 800607c:	080061a9 	.word	0x080061a9
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080061a9 	.word	0x080061a9
 8006088:	080061a9 	.word	0x080061a9
 800608c:	080061a9 	.word	0x080061a9
 8006090:	08006127 	.word	0x08006127
 8006094:	080061a9 	.word	0x080061a9
 8006098:	080061a9 	.word	0x080061a9
 800609c:	080061a9 	.word	0x080061a9
 80060a0:	08006167 	.word	0x08006167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f9e2 	bl	8006474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0208 	orr.w	r2, r2, #8
 80060be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0204 	bic.w	r2, r2, #4
 80060ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6999      	ldr	r1, [r3, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	619a      	str	r2, [r3, #24]
      break;
 80060e2:	e062      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa32 	bl	8006554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	619a      	str	r2, [r3, #24]
      break;
 8006124:	e041      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fa87 	bl	8006640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0208 	orr.w	r2, r2, #8
 8006140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0204 	bic.w	r2, r2, #4
 8006150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	61da      	str	r2, [r3, #28]
      break;
 8006164:	e021      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fadb 	bl	8006728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	021a      	lsls	r2, r3, #8
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	61da      	str	r2, [r3, #28]
      break;
 80061a6:	e000      	b.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80061a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_TIM_ConfigClockSource+0x18>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0a6      	b.n	800632a <HAL_TIM_ConfigClockSource+0x166>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d067      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x120>
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d80b      	bhi.n	8006230 <HAL_TIM_ConfigClockSource+0x6c>
 8006218:	2b10      	cmp	r3, #16
 800621a:	d073      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0x140>
 800621c:	2b10      	cmp	r3, #16
 800621e:	d802      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x62>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d06f      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006224:	e078      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006226:	2b20      	cmp	r3, #32
 8006228:	d06c      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0x140>
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d06a      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800622e:	e073      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006230:	2b70      	cmp	r3, #112	; 0x70
 8006232:	d00d      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x8c>
 8006234:	2b70      	cmp	r3, #112	; 0x70
 8006236:	d804      	bhi.n	8006242 <HAL_TIM_ConfigClockSource+0x7e>
 8006238:	2b50      	cmp	r3, #80	; 0x50
 800623a:	d033      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0xe0>
 800623c:	2b60      	cmp	r3, #96	; 0x60
 800623e:	d041      	beq.n	80062c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006240:	e06a      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d066      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x152>
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d017      	beq.n	800627e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800624e:	e063      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f000 fb32 	bl	80068c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006272:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	609a      	str	r2, [r3, #8]
      break;
 800627c:	e04c      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6899      	ldr	r1, [r3, #8]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f000 fb1b 	bl	80068c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a0:	609a      	str	r2, [r3, #8]
      break;
 80062a2:	e039      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	461a      	mov	r2, r3
 80062b2:	f000 fa8f 	bl	80067d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2150      	movs	r1, #80	; 0x50
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fae8 	bl	8006892 <TIM_ITRx_SetConfig>
      break;
 80062c2:	e029      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f000 faae 	bl	8006832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2160      	movs	r1, #96	; 0x60
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fad8 	bl	8006892 <TIM_ITRx_SetConfig>
      break;
 80062e2:	e019      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f000 fa6f 	bl	80067d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2140      	movs	r1, #64	; 0x40
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fac8 	bl	8006892 <TIM_ITRx_SetConfig>
      break;
 8006302:	e009      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f000 fabf 	bl	8006892 <TIM_ITRx_SetConfig>
      break;
 8006314:	e000      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a40      	ldr	r2, [pc, #256]	; (8006448 <TIM_Base_SetConfig+0x114>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d013      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006352:	d00f      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a3d      	ldr	r2, [pc, #244]	; (800644c <TIM_Base_SetConfig+0x118>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a3c      	ldr	r2, [pc, #240]	; (8006450 <TIM_Base_SetConfig+0x11c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a3b      	ldr	r2, [pc, #236]	; (8006454 <TIM_Base_SetConfig+0x120>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <TIM_Base_SetConfig+0x124>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d108      	bne.n	8006386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <TIM_Base_SetConfig+0x114>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d02b      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d027      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2c      	ldr	r2, [pc, #176]	; (800644c <TIM_Base_SetConfig+0x118>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d023      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2b      	ldr	r2, [pc, #172]	; (8006450 <TIM_Base_SetConfig+0x11c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01f      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <TIM_Base_SetConfig+0x120>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01b      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a29      	ldr	r2, [pc, #164]	; (8006458 <TIM_Base_SetConfig+0x124>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d017      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a28      	ldr	r2, [pc, #160]	; (800645c <TIM_Base_SetConfig+0x128>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a27      	ldr	r2, [pc, #156]	; (8006460 <TIM_Base_SetConfig+0x12c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00f      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a26      	ldr	r2, [pc, #152]	; (8006464 <TIM_Base_SetConfig+0x130>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00b      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <TIM_Base_SetConfig+0x134>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d007      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a24      	ldr	r2, [pc, #144]	; (800646c <TIM_Base_SetConfig+0x138>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a23      	ldr	r2, [pc, #140]	; (8006470 <TIM_Base_SetConfig+0x13c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d108      	bne.n	80063f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <TIM_Base_SetConfig+0x114>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_Base_SetConfig+0xf8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a0c      	ldr	r2, [pc, #48]	; (8006458 <TIM_Base_SetConfig+0x124>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d103      	bne.n	8006434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	615a      	str	r2, [r3, #20]
}
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800
 8006468:	40001800 	.word	0x40001800
 800646c:	40001c00 	.word	0x40001c00
 8006470:	40002000 	.word	0x40002000

08006474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 0302 	bic.w	r3, r3, #2
 80064bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a20      	ldr	r2, [pc, #128]	; (800654c <TIM_OC1_SetConfig+0xd8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d003      	beq.n	80064d8 <TIM_OC1_SetConfig+0x64>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <TIM_OC1_SetConfig+0xdc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d10c      	bne.n	80064f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0308 	bic.w	r3, r3, #8
 80064de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <TIM_OC1_SetConfig+0xd8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC1_SetConfig+0x8e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a14      	ldr	r2, [pc, #80]	; (8006550 <TIM_OC1_SetConfig+0xdc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f023 0210 	bic.w	r2, r3, #16
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0320 	bic.w	r3, r3, #32
 800659e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a22      	ldr	r2, [pc, #136]	; (8006638 <TIM_OC2_SetConfig+0xe4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC2_SetConfig+0x68>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a21      	ldr	r2, [pc, #132]	; (800663c <TIM_OC2_SetConfig+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10d      	bne.n	80065d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <TIM_OC2_SetConfig+0xe4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC2_SetConfig+0x94>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a16      	ldr	r2, [pc, #88]	; (800663c <TIM_OC2_SetConfig+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d113      	bne.n	8006610 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a21      	ldr	r2, [pc, #132]	; (8006720 <TIM_OC3_SetConfig+0xe0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_OC3_SetConfig+0x66>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a20      	ldr	r2, [pc, #128]	; (8006724 <TIM_OC3_SetConfig+0xe4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10d      	bne.n	80066c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <TIM_OC3_SetConfig+0xe0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC3_SetConfig+0x92>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a15      	ldr	r2, [pc, #84]	; (8006724 <TIM_OC3_SetConfig+0xe4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d113      	bne.n	80066fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400

08006728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	031b      	lsls	r3, r3, #12
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <TIM_OC4_SetConfig+0xa4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC4_SetConfig+0x68>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <TIM_OC4_SetConfig+0xa8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d109      	bne.n	80067a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	019b      	lsls	r3, r3, #6
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	621a      	str	r2, [r3, #32]
}
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400

080067d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f023 0201 	bic.w	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f023 030a 	bic.w	r3, r3, #10
 8006810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006832:	b480      	push	{r7}
 8006834:	b087      	sub	sp, #28
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0210 	bic.w	r2, r3, #16
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800685c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	031b      	lsls	r3, r3, #12
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800686e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f043 0307 	orr.w	r3, r3, #7
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]
}
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	021a      	lsls	r2, r3, #8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	609a      	str	r2, [r3, #8]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2201      	movs	r2, #1
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	43db      	mvns	r3, r3
 800692a:	401a      	ands	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	fa01 f303 	lsl.w	r3, r1, r3
 8006940:	431a      	orrs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006966:	2302      	movs	r3, #2
 8006968:	e032      	b.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e03f      	b.n	8006a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f006 f8d2 	bl	800cbac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2224      	movs	r2, #36	; 0x24
 8006a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc57 	bl	80072d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b088      	sub	sp, #32
 8006a7a:	af02      	add	r7, sp, #8
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	f040 8083 	bne.w	8006b9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Transmit+0x2e>
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e07b      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Transmit+0x40>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e074      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006acc:	f7fa ff16 	bl	80018fc <HAL_GetTick>
 8006ad0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ade:	e042      	b.n	8006b66 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	d122      	bne.n	8006b3e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fa7a 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e046      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b24:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	3302      	adds	r3, #2
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	e017      	b.n	8006b66 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60bb      	str	r3, [r7, #8]
 8006b3c:	e013      	b.n	8006b66 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2180      	movs	r1, #128	; 0x80
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fa57 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e023      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	60ba      	str	r2, [r7, #8]
 8006b5e:	781a      	ldrb	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1b7      	bne.n	8006ae0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fa3e 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e00a      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	f040 8090 	bne.w	8006cea <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_UART_Receive+0x2e>
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e088      	b.n	8006cec <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_UART_Receive+0x40>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e081      	b.n	8006cec <HAL_UART_Receive+0x144>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2222      	movs	r2, #34	; 0x22
 8006bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006bfe:	f7fa fe7d 	bl	80018fc <HAL_GetTick>
 8006c02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c10:	e05c      	b.n	8006ccc <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c28:	d12b      	bne.n	8006c82 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2200      	movs	r2, #0
 8006c32:	2120      	movs	r1, #32
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f9e1 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e053      	b.n	8006cec <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10c      	bne.n	8006c6a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3302      	adds	r3, #2
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	e030      	b.n	8006ccc <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	e024      	b.n	8006ccc <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2120      	movs	r1, #32
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f9b5 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e027      	b.n	8006cec <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6859      	ldr	r1, [r3, #4]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	60ba      	str	r2, [r7, #8]
 8006cb0:	b2ca      	uxtb	r2, r1
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e00a      	b.n	8006ccc <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d19d      	bne.n	8006c12 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d140      	bne.n	8006d90 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_UART_Receive_IT+0x26>
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e039      	b.n	8006d92 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UART_Receive_IT+0x38>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e032      	b.n	8006d92 <HAL_UART_Receive_IT+0x9e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2222      	movs	r2, #34	; 0x22
 8006d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0220 	orr.w	r2, r2, #32
 8006d8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_UART_IRQHandler+0x52>
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9f0 	bl	80071d0 <UART_Receive_IT>
      return;
 8006df0:	e0cc      	b.n	8006f8c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80ab 	beq.w	8006f50 <HAL_UART_IRQHandler+0x1b0>
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_UART_IRQHandler+0x70>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80a0 	beq.w	8006f50 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_UART_IRQHandler+0x90>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	f043 0201 	orr.w	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <HAL_UART_IRQHandler+0xb0>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e48:	f043 0202 	orr.w	r2, r3, #2
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_UART_IRQHandler+0xd0>
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	f043 0204 	orr.w	r2, r3, #4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_UART_IRQHandler+0xf0>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	f043 0208 	orr.w	r2, r3, #8
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d078      	beq.n	8006f8a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x112>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f98f 	bl	80071d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <HAL_UART_IRQHandler+0x13a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d031      	beq.n	8006f3e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8d8 	bl	8007090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d123      	bne.n	8006f36 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d013      	beq.n	8006f2e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <HAL_UART_IRQHandler+0x1f4>)
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fa ff40 	bl	8001d98 <HAL_DMA_Abort_IT>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d016      	beq.n	8006f4c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	e00e      	b.n	8006f4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f83c 	bl	8006fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	e00a      	b.n	8006f4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f838 	bl	8006fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3c:	e006      	b.n	8006f4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f834 	bl	8006fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006f4a:	e01e      	b.n	8006f8a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	bf00      	nop
    return;
 8006f4e:	e01c      	b.n	8006f8a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d008      	beq.n	8006f6c <HAL_UART_IRQHandler+0x1cc>
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8c5 	bl	80070f4 <UART_Transmit_IT>
    return;
 8006f6a:	e00f      	b.n	8006f8c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_UART_IRQHandler+0x1ec>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f90d 	bl	80071a0 <UART_EndTransmit_IT>
    return;
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <HAL_UART_IRQHandler+0x1ec>
    return;
 8006f8a:	bf00      	nop
  }
}
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	080070cd 	.word	0x080070cd

08006f98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b2db      	uxtb	r3, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700c:	e02c      	b.n	8007068 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d028      	beq.n	8007068 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <UART_WaitOnFlagUntilTimeout+0x30>
 800701c:	f7fa fc6e 	bl	80018fc <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	429a      	cmp	r2, r3
 800702a:	d21d      	bcs.n	8007068 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800703a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695a      	ldr	r2, [r3, #20]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e00f      	b.n	8007088 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4013      	ands	r3, r2
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	429a      	cmp	r2, r3
 8007084:	d0c3      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff ff60 	bl	8006fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b21      	cmp	r3, #33	; 0x21
 8007106:	d144      	bne.n	8007192 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d11a      	bne.n	8007148 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007126:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]
 800713a:	e00e      	b.n	800715a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	621a      	str	r2, [r3, #32]
 8007146:	e008      	b.n	800715a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	1c59      	adds	r1, r3, #1
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6211      	str	r1, [r2, #32]
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4619      	mov	r1, r3
 8007168:	84d1      	strh	r1, [r2, #38]	; 0x26
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10f      	bne.n	800718e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800717c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800718c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007192:	2302      	movs	r3, #2
  }
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fee9 	bl	8006f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b22      	cmp	r3, #34	; 0x22
 80071e2:	d171      	bne.n	80072c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ec:	d123      	bne.n	8007236 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10e      	bne.n	800721a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	1c9a      	adds	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
 8007218:	e029      	b.n	800726e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	b29b      	uxth	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28
 8007234:	e01b      	b.n	800726e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6858      	ldr	r0, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	1c59      	adds	r1, r3, #1
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6291      	str	r1, [r2, #40]	; 0x28
 800724e:	b2c2      	uxtb	r2, r0
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	e00c      	b.n	800726e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	1c58      	adds	r0, r3, #1
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	6288      	str	r0, [r1, #40]	; 0x28
 8007266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29b      	uxth	r3, r3
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4619      	mov	r1, r3
 800727c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800727e:	2b00      	cmp	r3, #0
 8007280:	d120      	bne.n	80072c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0220 	bic.w	r2, r2, #32
 8007290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f004 fb52 	bl	800b964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e002      	b.n	80072ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007314:	f023 030c 	bic.w	r3, r3, #12
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	430b      	orrs	r3, r1
 8007320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007340:	f040 80e4 	bne.w	800750c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4aab      	ldr	r2, [pc, #684]	; (80075f8 <UART_SetConfig+0x324>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <UART_SetConfig+0x84>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4aaa      	ldr	r2, [pc, #680]	; (80075fc <UART_SetConfig+0x328>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d16c      	bne.n	8007432 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007358:	f7fd f836 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 800735c:	4602      	mov	r2, r0
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009a      	lsls	r2, r3, #2
 8007366:	441a      	add	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	4aa3      	ldr	r2, [pc, #652]	; (8007600 <UART_SetConfig+0x32c>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	011c      	lsls	r4, r3, #4
 800737c:	f7fd f824 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8007380:	4602      	mov	r2, r0
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009a      	lsls	r2, r3, #2
 800738a:	441a      	add	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	fbb2 f5f3 	udiv	r5, r2, r3
 8007396:	f7fd f817 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 800739a:	4602      	mov	r2, r0
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009a      	lsls	r2, r3, #2
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	4a93      	ldr	r2, [pc, #588]	; (8007600 <UART_SetConfig+0x32c>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2264      	movs	r2, #100	; 0x64
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	1aeb      	subs	r3, r5, r3
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	3332      	adds	r3, #50	; 0x32
 80073c4:	4a8e      	ldr	r2, [pc, #568]	; (8007600 <UART_SetConfig+0x32c>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d2:	441c      	add	r4, r3
 80073d4:	f7fc fff8 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80073d8:	4602      	mov	r2, r0
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009a      	lsls	r2, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80073ee:	f7fc ffeb 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009a      	lsls	r2, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	4a7d      	ldr	r2, [pc, #500]	; (8007600 <UART_SetConfig+0x32c>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	2264      	movs	r2, #100	; 0x64
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	1aeb      	subs	r3, r5, r3
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	3332      	adds	r3, #50	; 0x32
 800741c:	4a78      	ldr	r2, [pc, #480]	; (8007600 <UART_SetConfig+0x32c>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	f003 0207 	and.w	r2, r3, #7
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4422      	add	r2, r4
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	e154      	b.n	80076dc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007432:	f7fc ffb5 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8007436:	4602      	mov	r2, r0
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009a      	lsls	r2, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	4a6c      	ldr	r2, [pc, #432]	; (8007600 <UART_SetConfig+0x32c>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	011c      	lsls	r4, r3, #4
 8007456:	f7fc ffa3 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800745a:	4602      	mov	r2, r0
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009a      	lsls	r2, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007470:	f7fc ff96 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8007474:	4602      	mov	r2, r0
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009a      	lsls	r2, r3, #2
 800747e:	441a      	add	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	4a5d      	ldr	r2, [pc, #372]	; (8007600 <UART_SetConfig+0x32c>)
 800748c:	fba2 2303 	umull	r2, r3, r2, r3
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	2264      	movs	r2, #100	; 0x64
 8007494:	fb02 f303 	mul.w	r3, r2, r3
 8007498:	1aeb      	subs	r3, r5, r3
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	3332      	adds	r3, #50	; 0x32
 800749e:	4a58      	ldr	r2, [pc, #352]	; (8007600 <UART_SetConfig+0x32c>)
 80074a0:	fba2 2303 	umull	r2, r3, r2, r3
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074ac:	441c      	add	r4, r3
 80074ae:	f7fc ff77 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80074b2:	4602      	mov	r2, r0
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80074c8:	f7fc ff6a 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80074cc:	4602      	mov	r2, r0
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009a      	lsls	r2, r3, #2
 80074d6:	441a      	add	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e2:	4a47      	ldr	r2, [pc, #284]	; (8007600 <UART_SetConfig+0x32c>)
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2264      	movs	r2, #100	; 0x64
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	1aeb      	subs	r3, r5, r3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3332      	adds	r3, #50	; 0x32
 80074f6:	4a42      	ldr	r2, [pc, #264]	; (8007600 <UART_SetConfig+0x32c>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	f003 0207 	and.w	r2, r3, #7
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4422      	add	r2, r4
 8007508:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800750a:	e0e7      	b.n	80076dc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a39      	ldr	r2, [pc, #228]	; (80075f8 <UART_SetConfig+0x324>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <UART_SetConfig+0x24c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a38      	ldr	r2, [pc, #224]	; (80075fc <UART_SetConfig+0x328>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d171      	bne.n	8007604 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007520:	f7fc ff52 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8007524:	4602      	mov	r2, r0
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009a      	lsls	r2, r3, #2
 800752e:	441a      	add	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	4a31      	ldr	r2, [pc, #196]	; (8007600 <UART_SetConfig+0x32c>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	011c      	lsls	r4, r3, #4
 8007544:	f7fc ff40 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8007548:	4602      	mov	r2, r0
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009a      	lsls	r2, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	fbb2 f5f3 	udiv	r5, r2, r3
 800755e:	f7fc ff33 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8007562:	4602      	mov	r2, r0
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009a      	lsls	r2, r3, #2
 800756c:	441a      	add	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	fbb2 f3f3 	udiv	r3, r2, r3
 8007578:	4a21      	ldr	r2, [pc, #132]	; (8007600 <UART_SetConfig+0x32c>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	2264      	movs	r2, #100	; 0x64
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	1aeb      	subs	r3, r5, r3
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	3332      	adds	r3, #50	; 0x32
 800758c:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <UART_SetConfig+0x32c>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007598:	441c      	add	r4, r3
 800759a:	f7fc ff15 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 800759e:	4602      	mov	r2, r0
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009a      	lsls	r2, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80075b4:	f7fc ff08 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80075b8:	4602      	mov	r2, r0
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009a      	lsls	r2, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ce:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <UART_SetConfig+0x32c>)
 80075d0:	fba2 2303 	umull	r2, r3, r2, r3
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2264      	movs	r2, #100	; 0x64
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	1aeb      	subs	r3, r5, r3
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	3332      	adds	r3, #50	; 0x32
 80075e2:	4a07      	ldr	r2, [pc, #28]	; (8007600 <UART_SetConfig+0x32c>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4422      	add	r2, r4
 80075f4:	609a      	str	r2, [r3, #8]
 80075f6:	e071      	b.n	80076dc <UART_SetConfig+0x408>
 80075f8:	40011000 	.word	0x40011000
 80075fc:	40011400 	.word	0x40011400
 8007600:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007604:	f7fc fecc 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8007608:	4602      	mov	r2, r0
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009a      	lsls	r2, r3, #2
 8007612:	441a      	add	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	fbb2 f3f3 	udiv	r3, r2, r3
 800761e:	4a31      	ldr	r2, [pc, #196]	; (80076e4 <UART_SetConfig+0x410>)
 8007620:	fba2 2303 	umull	r2, r3, r2, r3
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	011c      	lsls	r4, r3, #4
 8007628:	f7fc feba 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800762c:	4602      	mov	r2, r0
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009a      	lsls	r2, r3, #2
 8007636:	441a      	add	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007642:	f7fc fead 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8007646:	4602      	mov	r2, r0
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009a      	lsls	r2, r3, #2
 8007650:	441a      	add	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <UART_SetConfig+0x410>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	2264      	movs	r2, #100	; 0x64
 8007666:	fb02 f303 	mul.w	r3, r2, r3
 800766a:	1aeb      	subs	r3, r5, r3
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	3332      	adds	r3, #50	; 0x32
 8007670:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <UART_SetConfig+0x410>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800767c:	441c      	add	r4, r3
 800767e:	f7fc fe8f 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 8007682:	4602      	mov	r2, r0
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009a      	lsls	r2, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	fbb2 f5f3 	udiv	r5, r2, r3
 8007698:	f7fc fe82 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800769c:	4602      	mov	r2, r0
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009a      	lsls	r2, r3, #2
 80076a6:	441a      	add	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <UART_SetConfig+0x410>)
 80076b4:	fba2 2303 	umull	r2, r3, r2, r3
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	2264      	movs	r2, #100	; 0x64
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	1aeb      	subs	r3, r5, r3
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	3332      	adds	r3, #50	; 0x32
 80076c6:	4a07      	ldr	r2, [pc, #28]	; (80076e4 <UART_SetConfig+0x410>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f003 020f 	and.w	r2, r3, #15
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4422      	add	r2, r4
 80076d8:	609a      	str	r2, [r3, #8]
}
 80076da:	e7ff      	b.n	80076dc <UART_SetConfig+0x408>
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bdb0      	pop	{r4, r5, r7, pc}
 80076e4:	51eb851f 	.word	0x51eb851f

080076e8 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80076e8:	b084      	sub	sp, #16
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	f107 001c 	add.w	r0, r7, #28
 80076f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80076fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007700:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007702:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007706:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800770a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800770e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007712:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	b004      	add	sp, #16
 800773c:	4770      	bx	lr

0800773e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2203      	movs	r2, #3
 8007786:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0303 	and.w	r3, r3, #3
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80077ec:	f023 030f 	bic.w	r3, r3, #15
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	b2db      	uxtb	r3, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3314      	adds	r3, #20
 8007832:	461a      	mov	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	4413      	add	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
}  
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007870:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007876:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800787c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007894:	2300      	movs	r3, #0

}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b088      	sub	sp, #32
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078b4:	2310      	movs	r3, #16
 80078b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078b8:	2340      	movs	r3, #64	; 0x40
 80078ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078c6:	f107 0308 	add.w	r3, r7, #8
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ff70 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80078d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d6:	2110      	movs	r1, #16
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa63 	bl	8007da4 <SDMMC_GetCmdResp1>
 80078de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078e0:	69fb      	ldr	r3, [r7, #28]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b088      	sub	sp, #32
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80078fc:	2311      	movs	r3, #17
 80078fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800790c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ff4c 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	2111      	movs	r1, #17
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa3f 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007928:	69fb      	ldr	r3, [r7, #28]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b088      	sub	sp, #32
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007944:	2312      	movs	r3, #18
 8007946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007954:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007956:	f107 0308 	add.w	r3, r7, #8
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ff28 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007962:	f241 3288 	movw	r2, #5000	; 0x1388
 8007966:	2112      	movs	r1, #18
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa1b 	bl	8007da4 <SDMMC_GetCmdResp1>
 800796e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007970:	69fb      	ldr	r3, [r7, #28]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b088      	sub	sp, #32
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800798c:	2318      	movs	r3, #24
 800798e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007990:	2340      	movs	r3, #64	; 0x40
 8007992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff ff04 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ae:	2118      	movs	r1, #24
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9f7 	bl	8007da4 <SDMMC_GetCmdResp1>
 80079b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b8:	69fb      	ldr	r3, [r7, #28]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b088      	sub	sp, #32
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80079d4:	2319      	movs	r3, #25
 80079d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d8:	2340      	movs	r3, #64	; 0x40
 80079da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fee0 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f6:	2119      	movs	r1, #25
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9d3 	bl	8007da4 <SDMMC_GetCmdResp1>
 80079fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a00:	69fb      	ldr	r3, [r7, #28]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a2e:	f107 0308 	add.w	r3, r7, #8
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff febc 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8007a3a:	4a05      	ldr	r2, [pc, #20]	; (8007a50 <SDMMC_CmdStopTransfer+0x44>)
 8007a3c:	210c      	movs	r1, #12
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9b0 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	05f5e100 	.word	0x05f5e100

08007a54 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a68:	2307      	movs	r3, #7
 8007a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a7a:	f107 0310 	add.w	r3, r7, #16
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff fe96 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8a:	2107      	movs	r1, #7
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f989 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	; 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007abe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fe73 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f93f 	bl	8007d50 <SDMMC_GetCmdError>
 8007ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b088      	sub	sp, #32
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007aea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007af0:	2308      	movs	r3, #8
 8007af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fe52 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb10 	bl	8008134 <SDMMC_GetCmdResp7>
 8007b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b32:	2337      	movs	r3, #55	; 0x37
 8007b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b36:	2340      	movs	r3, #64	; 0x40
 8007b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b42:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fe31 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	2137      	movs	r1, #55	; 0x37
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f924 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b82:	2329      	movs	r3, #41	; 0x29
 8007b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b86:	2340      	movs	r3, #64	; 0x40
 8007b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b92:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fe09 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa25 	bl	8007ff0 <SDMMC_GetCmdResp3>
 8007ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b088      	sub	sp, #32
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007bc4:	2306      	movs	r3, #6
 8007bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fde8 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	2106      	movs	r1, #6
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8db 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007c0a:	2333      	movs	r3, #51	; 0x33
 8007c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c1c:	f107 0308 	add.w	r3, r7, #8
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fdc5 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2c:	2133      	movs	r1, #51	; 0x33
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8b8 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c36:	69fb      	ldr	r3, [r7, #28]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c50:	2302      	movs	r3, #2
 8007c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c54:	23c0      	movs	r3, #192	; 0xc0
 8007c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c60:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c62:	f107 0308 	add.w	r3, r7, #8
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fda2 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f97e 	bl	8007f70 <SDMMC_GetCmdResp2>
 8007c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c76:	69fb      	ldr	r3, [r7, #28]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c92:	2309      	movs	r3, #9
 8007c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c96:	23c0      	movs	r3, #192	; 0xc0
 8007c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ca4:	f107 0308 	add.w	r3, r7, #8
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fd81 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f95d 	bl	8007f70 <SDMMC_GetCmdResp2>
 8007cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3720      	adds	r7, #32
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ce6:	f107 0308 	add.w	r3, r7, #8
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fd60 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	2103      	movs	r1, #3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f9ae 	bl	8008058 <SDMMC_GetCmdResp6>
 8007cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007d1a:	230d      	movs	r3, #13
 8007d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d2a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d2c:	f107 0308 	add.w	r3, r7, #8
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fd3d 	bl	80077b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3c:	210d      	movs	r1, #13
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f830 	bl	8007da4 <SDMMC_GetCmdResp1>
 8007d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d46:	69fb      	ldr	r3, [r7, #28]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007d50:	b490      	push	{r4, r7}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d58:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <SDMMC_GetCmdError+0x4c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <SDMMC_GetCmdError+0x50>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	0a5b      	lsrs	r3, r3, #9
 8007d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	1e5c      	subs	r4, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d78:	e00a      	b.n	8007d90 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f2      	beq.n	8007d6c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc90      	pop	{r4, r7}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000118 	.word	0x20000118
 8007da0:	10624dd3 	.word	0x10624dd3

08007da4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007db2:	4b6c      	ldr	r3, [pc, #432]	; (8007f64 <SDMMC_GetCmdResp1+0x1c0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a6c      	ldr	r2, [pc, #432]	; (8007f68 <SDMMC_GetCmdResp1+0x1c4>)
 8007db8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbc:	0a5b      	lsrs	r3, r3, #9
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	1e5c      	subs	r4, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dd0:	e0c3      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f2      	beq.n	8007dc4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2204      	movs	r2, #4
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007df0:	2304      	movs	r3, #4
 8007df2:	e0b2      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e0a7      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff fcfb 	bl	8007806 <SDIO_GetCommandResponse>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d001      	beq.n	8007e1e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e09d      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff fcf9 	bl	8007820 <SDIO_GetResponse>
 8007e2e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4b4e      	ldr	r3, [pc, #312]	; (8007f6c <SDMMC_GetCmdResp1+0x1c8>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e08d      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	da02      	bge.n	8007e4a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e48:	e087      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	e080      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e62:	2380      	movs	r3, #128	; 0x80
 8007e64:	e079      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e74:	e071      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e84:	e069      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e94:	e061      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ea4:	e059      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eb4:	e051      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ec4:	e049      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ed4:	e041      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee4:	e039      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ef4:	e031      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f04:	e029      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f14:	e021      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f24:	e019      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f34:	e011      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f44:	e009      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f54:	e001      	b.n	8007f5a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd90      	pop	{r4, r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000118 	.word	0x20000118
 8007f68:	10624dd3 	.word	0x10624dd3
 8007f6c:	fdffe008 	.word	0xfdffe008

08007f70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007f70:	b490      	push	{r4, r7}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f78:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <SDMMC_GetCmdResp2+0x78>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <SDMMC_GetCmdResp2+0x7c>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	0a5b      	lsrs	r3, r3, #9
 8007f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	1e5c      	subs	r4, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f98:	e020      	b.n	8007fdc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f2      	beq.n	8007f8c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fb8:	2304      	movs	r3, #4
 8007fba:	e00f      	b.n	8007fdc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e004      	b.n	8007fdc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc90      	pop	{r4, r7}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000118 	.word	0x20000118
 8007fec:	10624dd3 	.word	0x10624dd3

08007ff0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007ff0:	b490      	push	{r4, r7}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ff8:	4b15      	ldr	r3, [pc, #84]	; (8008050 <SDMMC_GetCmdResp3+0x60>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <SDMMC_GetCmdResp3+0x64>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	0a5b      	lsrs	r3, r3, #9
 8008004:	f241 3288 	movw	r2, #5000	; 0x1388
 8008008:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800800c:	4623      	mov	r3, r4
 800800e:	1e5c      	subs	r4, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008018:	e015      	b.n	8008046 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f2      	beq.n	800800c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008038:	2304      	movs	r3, #4
 800803a:	e004      	b.n	8008046 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008042:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bc90      	pop	{r4, r7}
 800804e:	4770      	bx	lr
 8008050:	20000118 	.word	0x20000118
 8008054:	10624dd3 	.word	0x10624dd3

08008058 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	460b      	mov	r3, r1
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008066:	4b31      	ldr	r3, [pc, #196]	; (800812c <SDMMC_GetCmdResp6+0xd4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a31      	ldr	r2, [pc, #196]	; (8008130 <SDMMC_GetCmdResp6+0xd8>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	0a5b      	lsrs	r3, r3, #9
 8008072:	f241 3288 	movw	r2, #5000	; 0x1388
 8008076:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800807a:	4623      	mov	r3, r4
 800807c:	1e5c      	subs	r4, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008086:	e04c      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f2      	beq.n	800807a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2204      	movs	r2, #4
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080a6:	2304      	movs	r3, #4
 80080a8:	e03b      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080bc:	2301      	movs	r3, #1
 80080be:	e030      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fba0 	bl	8007806 <SDIO_GetCommandResponse>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d001      	beq.n	80080d4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e026      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80080dc:	2100      	movs	r1, #0
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff fb9e 	bl	8007820 <SDIO_GetResponse>
 80080e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e011      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800810c:	e009      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800811c:	e001      	b.n	8008122 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800811e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd90      	pop	{r4, r7, pc}
 800812a:	bf00      	nop
 800812c:	20000118 	.word	0x20000118
 8008130:	10624dd3 	.word	0x10624dd3

08008134 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008134:	b490      	push	{r4, r7}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <SDMMC_GetCmdResp7+0x6c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <SDMMC_GetCmdResp7+0x70>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	0a5b      	lsrs	r3, r3, #9
 8008148:	f241 3288 	movw	r2, #5000	; 0x1388
 800814c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008150:	4623      	mov	r3, r4
 8008152:	1e5c      	subs	r4, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800815c:	e01a      	b.n	8008194 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f2      	beq.n	8008150 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2240      	movs	r2, #64	; 0x40
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800817c:	2304      	movs	r3, #4
 800817e:	e009      	b.n	8008194 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2240      	movs	r2, #64	; 0x40
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008192:	2300      	movs	r3, #0
  
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bc90      	pop	{r4, r7}
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000118 	.word	0x20000118
 80081a4:	10624dd3 	.word	0x10624dd3

080081a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081a8:	b084      	sub	sp, #16
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	f107 001c 	add.w	r0, r7, #28
 80081b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d122      	bne.n	8008206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d105      	bne.n	80081fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 fa7c 	bl	80096f8 <USB_CoreReset>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
 8008204:	e01a      	b.n	800823c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fa70 	bl	80096f8 <USB_CoreReset>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
 800822e:	e005      	b.n	800823c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10b      	bne.n	800825a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f043 0206 	orr.w	r2, r3, #6
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f043 0220 	orr.w	r2, r3, #32
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008266:	b004      	add	sp, #16
 8008268:	4770      	bx	lr
	...

0800826c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d165      	bne.n	800834c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4a41      	ldr	r2, [pc, #260]	; (8008388 <USB_SetTurnaroundTime+0x11c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d906      	bls.n	8008296 <USB_SetTurnaroundTime+0x2a>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4a40      	ldr	r2, [pc, #256]	; (800838c <USB_SetTurnaroundTime+0x120>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d802      	bhi.n	8008296 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008290:	230f      	movs	r3, #15
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	e062      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4a3c      	ldr	r2, [pc, #240]	; (800838c <USB_SetTurnaroundTime+0x120>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d906      	bls.n	80082ac <USB_SetTurnaroundTime+0x40>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4a3b      	ldr	r2, [pc, #236]	; (8008390 <USB_SetTurnaroundTime+0x124>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d802      	bhi.n	80082ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082a6:	230e      	movs	r3, #14
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e057      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4a38      	ldr	r2, [pc, #224]	; (8008390 <USB_SetTurnaroundTime+0x124>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d906      	bls.n	80082c2 <USB_SetTurnaroundTime+0x56>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4a37      	ldr	r2, [pc, #220]	; (8008394 <USB_SetTurnaroundTime+0x128>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d802      	bhi.n	80082c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082bc:	230d      	movs	r3, #13
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e04c      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4a33      	ldr	r2, [pc, #204]	; (8008394 <USB_SetTurnaroundTime+0x128>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d906      	bls.n	80082d8 <USB_SetTurnaroundTime+0x6c>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4a32      	ldr	r2, [pc, #200]	; (8008398 <USB_SetTurnaroundTime+0x12c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d802      	bhi.n	80082d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80082d2:	230c      	movs	r3, #12
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e041      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4a2f      	ldr	r2, [pc, #188]	; (8008398 <USB_SetTurnaroundTime+0x12c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d906      	bls.n	80082ee <USB_SetTurnaroundTime+0x82>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a2e      	ldr	r2, [pc, #184]	; (800839c <USB_SetTurnaroundTime+0x130>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d802      	bhi.n	80082ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082e8:	230b      	movs	r3, #11
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e036      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4a2a      	ldr	r2, [pc, #168]	; (800839c <USB_SetTurnaroundTime+0x130>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d906      	bls.n	8008304 <USB_SetTurnaroundTime+0x98>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <USB_SetTurnaroundTime+0x134>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d802      	bhi.n	8008304 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80082fe:	230a      	movs	r3, #10
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e02b      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <USB_SetTurnaroundTime+0x134>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d906      	bls.n	800831a <USB_SetTurnaroundTime+0xae>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4a25      	ldr	r2, [pc, #148]	; (80083a4 <USB_SetTurnaroundTime+0x138>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d802      	bhi.n	800831a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008314:	2309      	movs	r3, #9
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e020      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4a21      	ldr	r2, [pc, #132]	; (80083a4 <USB_SetTurnaroundTime+0x138>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d906      	bls.n	8008330 <USB_SetTurnaroundTime+0xc4>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <USB_SetTurnaroundTime+0x13c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d802      	bhi.n	8008330 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800832a:	2308      	movs	r3, #8
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e015      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <USB_SetTurnaroundTime+0x13c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d906      	bls.n	8008346 <USB_SetTurnaroundTime+0xda>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <USB_SetTurnaroundTime+0x140>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d802      	bhi.n	8008346 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008340:	2307      	movs	r3, #7
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e00a      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008346:	2306      	movs	r3, #6
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	e007      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008352:	2309      	movs	r3, #9
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	e001      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008358:	2309      	movs	r3, #9
 800835a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008374:	431a      	orrs	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	00d8acbf 	.word	0x00d8acbf
 800838c:	00e4e1bf 	.word	0x00e4e1bf
 8008390:	00f423ff 	.word	0x00f423ff
 8008394:	0106737f 	.word	0x0106737f
 8008398:	011a499f 	.word	0x011a499f
 800839c:	01312cff 	.word	0x01312cff
 80083a0:	014ca43f 	.word	0x014ca43f
 80083a4:	016e35ff 	.word	0x016e35ff
 80083a8:	01a6ab1f 	.word	0x01a6ab1f
 80083ac:	01e847ff 	.word	0x01e847ff

080083b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f043 0201 	orr.w	r2, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d106      	bne.n	8008420 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	e00b      	b.n	8008438 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e001      	b.n	8008438 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e003      	b.n	8008440 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008438:	2032      	movs	r0, #50	; 0x32
 800843a:	f7f9 fa6b 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008448:	b084      	sub	sp, #16
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	e009      	b.n	800847c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3340      	adds	r3, #64	; 0x40
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	2200      	movs	r2, #0
 8008474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3301      	adds	r3, #1
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b0e      	cmp	r3, #14
 8008480:	d9f2      	bls.n	8008468 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d112      	bne.n	80084ae <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
 80084ac:	e00b      	b.n	80084c6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084cc:	461a      	mov	r2, r3
 80084ce:	2300      	movs	r3, #0
 80084d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d8:	4619      	mov	r1, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e0:	461a      	mov	r2, r3
 80084e2:	680b      	ldr	r3, [r1, #0]
 80084e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d10c      	bne.n	8008506 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084f2:	2100      	movs	r1, #0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f961 	bl	80087bc <USB_SetDevSpeed>
 80084fa:	e008      	b.n	800850e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084fc:	2101      	movs	r1, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f95c 	bl	80087bc <USB_SetDevSpeed>
 8008504:	e003      	b.n	800850e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008506:	2103      	movs	r1, #3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f957 	bl	80087bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800850e:	2110      	movs	r1, #16
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f90b 	bl	800872c <USB_FlushTxFifo>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f929 	bl	8008778 <USB_FlushRxFifo>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008536:	461a      	mov	r2, r3
 8008538:	2300      	movs	r3, #0
 800853a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008542:	461a      	mov	r2, r3
 8008544:	2300      	movs	r3, #0
 8008546:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854e:	461a      	mov	r2, r3
 8008550:	2300      	movs	r3, #0
 8008552:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008554:	2300      	movs	r3, #0
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	e043      	b.n	80085e2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800856c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008570:	d118      	bne.n	80085a4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008584:	461a      	mov	r2, r3
 8008586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	e013      	b.n	80085b6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859a:	461a      	mov	r2, r3
 800859c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e008      	b.n	80085b6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	461a      	mov	r2, r3
 80085b2:	2300      	movs	r3, #0
 80085b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c2:	461a      	mov	r2, r3
 80085c4:	2300      	movs	r3, #0
 80085c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	461a      	mov	r2, r3
 80085d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3301      	adds	r3, #1
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d3b7      	bcc.n	800855a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	e043      	b.n	8008678 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008606:	d118      	bne.n	800863a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861a:	461a      	mov	r2, r3
 800861c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	e013      	b.n	800864c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008630:	461a      	mov	r2, r3
 8008632:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	e008      	b.n	800864c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008646:	461a      	mov	r2, r3
 8008648:	2300      	movs	r3, #0
 800864a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	2300      	movs	r3, #0
 800865c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	461a      	mov	r2, r3
 800866c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3301      	adds	r3, #1
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	d3b7      	bcc.n	80085f0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008692:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2b01      	cmp	r3, #1
 8008698:	d111      	bne.n	80086be <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <USB_DevInit+0x2dc>)
 80086a4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b8:	f043 0303 	orr.w	r3, r3, #3
 80086bc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d105      	bne.n	80086de <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f043 0210 	orr.w	r2, r3, #16
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <USB_DevInit+0x2e0>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f043 0208 	orr.w	r2, r3, #8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d107      	bne.n	8008712 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800870a:	f043 0304 	orr.w	r3, r3, #4
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800871e:	b004      	add	sp, #16
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	00800100 	.word	0x00800100
 8008728:	803c3800 	.word	0x803c3800

0800872c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	019b      	lsls	r3, r3, #6
 800873e:	f043 0220 	orr.w	r2, r3, #32
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <USB_FlushTxFifo+0x48>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e006      	b.n	8008766 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b20      	cmp	r3, #32
 8008762:	d0f0      	beq.n	8008746 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	00030d40 	.word	0x00030d40

08008778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2210      	movs	r2, #16
 8008788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <USB_FlushRxFifo+0x40>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d901      	bls.n	800879c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e006      	b.n	80087aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0310 	and.w	r3, r3, #16
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d0f0      	beq.n	800878a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	00030d40 	.word	0x00030d40

080087bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087dc:	4313      	orrs	r3, r2
 80087de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 0306 	and.w	r3, r3, #6
 8008806:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
 8008812:	e00a      	b.n	800882a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b02      	cmp	r3, #2
 8008818:	d002      	beq.n	8008820 <USB_GetDevSpeed+0x32>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b06      	cmp	r3, #6
 800881e:	d102      	bne.n	8008826 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008820:	2302      	movs	r3, #2
 8008822:	75fb      	strb	r3, [r7, #23]
 8008824:	e001      	b.n	800882a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008826:	230f      	movs	r3, #15
 8008828:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
}
 800882c:	4618      	mov	r0, r3
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d13a      	bne.n	80088ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	2101      	movs	r1, #1
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	b29b      	uxth	r3, r3
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008872:	4313      	orrs	r3, r2
 8008874:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d155      	bne.n	8008938 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	059b      	lsls	r3, r3, #22
 80088ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088b0:	4313      	orrs	r3, r2
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	e036      	b.n	8008938 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d0:	69da      	ldr	r2, [r3, #28]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	2101      	movs	r1, #1
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11a      	bne.n	8008938 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	78db      	ldrb	r3, [r3, #3]
 800891c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800891e:	430b      	orrs	r3, r1
 8008920:	4313      	orrs	r3, r2
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008936:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d135      	bne.n	80089d0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	2101      	movs	r1, #1
 8008976:	fa01 f303 	lsl.w	r3, r1, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	43db      	mvns	r3, r3
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008984:	4013      	ands	r3, r2
 8008986:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 030f 	and.w	r3, r3, #15
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f303 	lsl.w	r3, r1, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	43db      	mvns	r3, r3
 80089a2:	68f9      	ldr	r1, [r7, #12]
 80089a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a8:	4013      	ands	r3, r2
 80089aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	0159      	lsls	r1, r3, #5
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	440b      	add	r3, r1
 80089c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c6:	4619      	mov	r1, r3
 80089c8:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <USB_DeactivateEndpoint+0x100>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	600b      	str	r3, [r1, #0]
 80089ce:	e034      	b.n	8008a3a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	2101      	movs	r1, #1
 80089e2:	fa01 f303 	lsl.w	r3, r1, r3
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	43db      	mvns	r3, r3
 80089ea:	68f9      	ldr	r1, [r7, #12]
 80089ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f0:	4013      	ands	r3, r2
 80089f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fa:	69da      	ldr	r2, [r3, #28]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	2101      	movs	r1, #1
 8008a06:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a14:	4013      	ands	r3, r2
 8008a16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	0159      	lsls	r1, r3, #5
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	440b      	add	r3, r1
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a32:	4619      	mov	r1, r3
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <USB_DeactivateEndpoint+0x104>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	ec337800 	.word	0xec337800
 8008a4c:	eff37800 	.word	0xeff37800

08008a50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	f040 815c 	bne.w	8008d2a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d132      	bne.n	8008ae0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008abc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad8:	0cdb      	lsrs	r3, r3, #19
 8008ada:	04db      	lsls	r3, r3, #19
 8008adc:	6113      	str	r3, [r2, #16]
 8008ade:	e074      	b.n	8008bca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	0151      	lsls	r1, r2, #5
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	440a      	add	r2, r1
 8008af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afa:	0cdb      	lsrs	r3, r3, #19
 8008afc:	04db      	lsls	r3, r3, #19
 8008afe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	6959      	ldr	r1, [r3, #20]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	440b      	add	r3, r1
 8008b3c:	1e59      	subs	r1, r3, #1
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b46:	04d9      	lsls	r1, r3, #19
 8008b48:	4b9d      	ldr	r3, [pc, #628]	; (8008dc0 <USB_EPStartXfer+0x370>)
 8008b4a:	400b      	ands	r3, r1
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	0148      	lsls	r0, r1, #5
 8008b50:	69f9      	ldr	r1, [r7, #28]
 8008b52:	4401      	add	r1, r0
 8008b54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	0148      	lsls	r0, r1, #5
 8008b76:	69f9      	ldr	r1, [r7, #28]
 8008b78:	4401      	add	r1, r0
 8008b7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	78db      	ldrb	r3, [r3, #3]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d11f      	bne.n	8008bca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ba8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d14b      	bne.n	8008c68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d009      	beq.n	8008bec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be4:	461a      	mov	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	78db      	ldrb	r3, [r3, #3]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d128      	bne.n	8008c46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d110      	bne.n	8008c26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	e00f      	b.n	8008c46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	0151      	lsls	r1, r2, #5
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	440a      	add	r2, r1
 8008c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	e12f      	b.n	8008ec8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	78db      	ldrb	r3, [r3, #3]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d015      	beq.n	8008cbc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8117 	beq.w	8008ec8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	2101      	movs	r1, #1
 8008cac:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	634b      	str	r3, [r1, #52]	; 0x34
 8008cba:	e105      	b.n	8008ec8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d110      	bne.n	8008cee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e00f      	b.n	8008d0e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	68d9      	ldr	r1, [r3, #12]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	781a      	ldrb	r2, [r3, #0]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	b298      	uxth	r0, r3
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	4603      	mov	r3, r0
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fa2b 	bl	800917e <USB_WritePacket>
 8008d28:	e0ce      	b.n	8008ec8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d44:	0cdb      	lsrs	r3, r3, #19
 8008d46:	04db      	lsls	r3, r3, #19
 8008d48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d126      	bne.n	8008dc4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	0148      	lsls	r0, r1, #5
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	4401      	add	r1, r0
 8008d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dba:	6113      	str	r3, [r2, #16]
 8008dbc:	e036      	b.n	8008e2c <USB_EPStartXfer+0x3dc>
 8008dbe:	bf00      	nop
 8008dc0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	695a      	ldr	r2, [r3, #20]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	4413      	add	r3, r2
 8008dce:	1e5a      	subs	r2, r3, #1
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	8afb      	ldrh	r3, [r7, #22]
 8008dea:	04d9      	lsls	r1, r3, #19
 8008dec:	4b39      	ldr	r3, [pc, #228]	; (8008ed4 <USB_EPStartXfer+0x484>)
 8008dee:	400b      	ands	r3, r1
 8008df0:	69b9      	ldr	r1, [r7, #24]
 8008df2:	0148      	lsls	r0, r1, #5
 8008df4:	69f9      	ldr	r1, [r7, #28]
 8008df6:	4401      	add	r1, r0
 8008df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	8af9      	ldrh	r1, [r7, #22]
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	69b9      	ldr	r1, [r7, #24]
 8008e1e:	0148      	lsls	r0, r1, #5
 8008e20:	69f9      	ldr	r1, [r7, #28]
 8008e22:	4401      	add	r1, r0
 8008e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d10d      	bne.n	8008e4e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	68d9      	ldr	r1, [r3, #12]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	78db      	ldrb	r3, [r3, #3]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d128      	bne.n	8008ea8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d110      	bne.n	8008e88 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	e00f      	b.n	8008ea8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	1ff80000 	.word	0x1ff80000

08008ed8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	f040 80cd 	bne.w	8009094 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d132      	bne.n	8008f68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f60:	0cdb      	lsrs	r3, r3, #19
 8008f62:	04db      	lsls	r3, r3, #19
 8008f64:	6113      	str	r3, [r2, #16]
 8008f66:	e04e      	b.n	8009006 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f82:	0cdb      	lsrs	r3, r3, #19
 8008f84:	04db      	lsls	r3, r3, #19
 8008f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008faa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	695a      	ldr	r2, [r3, #20]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d903      	bls.n	8008fc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	691a      	ldr	r2, [r3, #16]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff6:	6939      	ldr	r1, [r7, #16]
 8008ff8:	0148      	lsls	r0, r1, #5
 8008ffa:	6979      	ldr	r1, [r7, #20]
 8008ffc:	4401      	add	r1, r0
 8008ffe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009002:	4313      	orrs	r3, r2
 8009004:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d11e      	bne.n	800904a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	0151      	lsls	r1, r2, #5
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	440a      	add	r2, r1
 800903e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	e092      	b.n	8009170 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009064:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009068:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d07e      	beq.n	8009170 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	2101      	movs	r1, #1
 8009084:	fa01 f303 	lsl.w	r3, r1, r3
 8009088:	6979      	ldr	r1, [r7, #20]
 800908a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800908e:	4313      	orrs	r3, r2
 8009090:	634b      	str	r3, [r1, #52]	; 0x34
 8009092:	e06d      	b.n	8009170 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ae:	0cdb      	lsrs	r3, r3, #19
 80090b0:	04db      	lsls	r3, r3, #19
 80090b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009106:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800911e:	6939      	ldr	r1, [r7, #16]
 8009120:	0148      	lsls	r0, r1, #5
 8009122:	6979      	ldr	r1, [r7, #20]
 8009124:	4401      	add	r1, r0
 8009126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800912a:	4313      	orrs	r3, r2
 800912c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d10d      	bne.n	8009150 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d009      	beq.n	8009150 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	68d9      	ldr	r1, [r3, #12]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	460a      	mov	r2, r1
 800914e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	440a      	add	r2, r1
 8009166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800916a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800916e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800917e:	b480      	push	{r7}
 8009180:	b089      	sub	sp, #36	; 0x24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	4611      	mov	r1, r2
 800918a:	461a      	mov	r2, r3
 800918c:	460b      	mov	r3, r1
 800918e:	71fb      	strb	r3, [r7, #7]
 8009190:	4613      	mov	r3, r2
 8009192:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800919c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d11a      	bne.n	80091da <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091a4:	88bb      	ldrh	r3, [r7, #4]
 80091a6:	3303      	adds	r3, #3
 80091a8:	089b      	lsrs	r3, r3, #2
 80091aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e00f      	b.n	80091d2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	031a      	lsls	r2, r3, #12
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091be:	461a      	mov	r2, r3
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	3304      	adds	r3, #4
 80091ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	3301      	adds	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d3eb      	bcc.n	80091b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3724      	adds	r7, #36	; 0x24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b089      	sub	sp, #36	; 0x24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	3303      	adds	r3, #3
 8009202:	089b      	lsrs	r3, r3, #2
 8009204:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009206:	2300      	movs	r3, #0
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	e00b      	b.n	8009224 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	601a      	str	r2, [r3, #0]
    pDest++;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3304      	adds	r3, #4
 800921c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	3301      	adds	r3, #1
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	429a      	cmp	r2, r3
 800922a:	d3ef      	bcc.n	800920c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3724      	adds	r7, #36	; 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d12c      	bne.n	80092b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	db12      	blt.n	800928e <USB_EPSetStall+0x54>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00f      	beq.n	800928e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800928c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	e02b      	b.n	8009308 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	db12      	blt.n	80092e8 <USB_EPSetStall+0xae>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00f      	beq.n	80092e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d128      	bne.n	8009384 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	0151      	lsls	r1, r2, #5
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	440a      	add	r2, r1
 8009348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	78db      	ldrb	r3, [r3, #3]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d003      	beq.n	8009362 <USB_EPClearStall+0x4c>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	78db      	ldrb	r3, [r3, #3]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d138      	bne.n	80093d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	e027      	b.n	80093d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800939e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	78db      	ldrb	r3, [r3, #3]
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d003      	beq.n	80093b4 <USB_EPClearStall+0x9e>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	78db      	ldrb	r3, [r3, #3]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d10f      	bne.n	80093d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009400:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009404:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800941c:	4313      	orrs	r3, r2
 800941e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009448:	f023 0302 	bic.w	r3, r3, #2
 800944c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800944e:	2003      	movs	r0, #3
 8009450:	f7f8 fa60 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009478:	f043 0302 	orr.w	r3, r3, #2
 800947c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800947e:	2003      	movs	r0, #3
 8009480:	f7f8 fa48 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4013      	ands	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094a6:	68fb      	ldr	r3, [r7, #12]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4013      	ands	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	0c1b      	lsrs	r3, r3, #16
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	4013      	ands	r3, r2
 800950a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	b29b      	uxth	r3, r3
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4013      	ands	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800954a:	68bb      	ldr	r3, [r7, #8]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	f003 030f 	and.w	r3, r3, #15
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	fa22 f303 	lsr.w	r3, r2, r3
 8009588:	01db      	lsls	r3, r3, #7
 800958a:	b2db      	uxtb	r3, r3
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4013      	ands	r3, r2
 80095a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095a6:	68bb      	ldr	r3, [r7, #8]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	f003 0301 	and.w	r3, r3, #1
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095ee:	f023 0307 	bic.w	r3, r3, #7
 80095f2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 0306 	and.w	r3, r3, #6
 8009600:	2b04      	cmp	r3, #4
 8009602:	d109      	bne.n	8009618 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009612:	f043 0303 	orr.w	r3, r3, #3
 8009616:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800962a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
	...

0800963c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	460b      	mov	r3, r1
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	333c      	adds	r3, #60	; 0x3c
 8009652:	3304      	adds	r3, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	4a26      	ldr	r2, [pc, #152]	; (80096f4 <USB_EP0_OutStart+0xb8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d90a      	bls.n	8009676 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800966c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009670:	d101      	bne.n	8009676 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	e037      	b.n	80096e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	461a      	mov	r2, r3
 800967e:	2300      	movs	r3, #0
 8009680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a4:	f043 0318 	orr.w	r3, r3, #24
 80096a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096be:	7afb      	ldrb	r3, [r7, #11]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d10f      	bne.n	80096e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	4f54300a 	.word	0x4f54300a

080096f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a13      	ldr	r2, [pc, #76]	; (800975c <USB_CoreReset+0x64>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d901      	bls.n	8009716 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e01b      	b.n	800974e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	daf2      	bge.n	8009704 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f043 0201 	orr.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <USB_CoreReset+0x64>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d901      	bls.n	8009740 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e006      	b.n	800974e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b01      	cmp	r3, #1
 800974a:	d0f0      	beq.n	800972e <USB_CoreReset+0x36>

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	00030d40 	.word	0x00030d40

08009760 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7c1b      	ldrb	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d115      	bne.n	80097a4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800977c:	2202      	movs	r2, #2
 800977e:	2181      	movs	r1, #129	; 0x81
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f003 fe22 	bl	800d3ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800978c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009790:	2202      	movs	r2, #2
 8009792:	2101      	movs	r1, #1
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 fe18 	bl	800d3ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80097a2:	e012      	b.n	80097ca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2202      	movs	r2, #2
 80097a8:	2181      	movs	r1, #129	; 0x81
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f003 fe0d 	bl	800d3ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097b6:	2340      	movs	r3, #64	; 0x40
 80097b8:	2202      	movs	r2, #2
 80097ba:	2101      	movs	r1, #1
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f003 fe04 	bl	800d3ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097ca:	2308      	movs	r3, #8
 80097cc:	2203      	movs	r2, #3
 80097ce:	2182      	movs	r1, #130	; 0x82
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f003 fdfa 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80097dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80097e0:	f004 f8a8 	bl	800d934 <malloc>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73fb      	strb	r3, [r7, #15]
 80097fc:	e026      	b.n	800984c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009804:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7c1b      	ldrb	r3, [r3, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800982e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009832:	2101      	movs	r1, #1
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f003 feb9 	bl	800d5ac <USBD_LL_PrepareReceive>
 800983a:	e007      	b.n	800984c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009842:	2340      	movs	r3, #64	; 0x40
 8009844:	2101      	movs	r1, #1
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f003 feb0 	bl	800d5ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009866:	2181      	movs	r1, #129	; 0x81
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f003 fdd4 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009874:	2101      	movs	r1, #1
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f003 fdcd 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009884:	2182      	movs	r1, #130	; 0x82
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f003 fdc5 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00e      	beq.n	80098ba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80098ac:	4618      	mov	r0, r3
 80098ae:	f004 f849 	bl	800d944 <free>
    pdev->pClassData = NULL;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80098d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d039      	beq.n	8009962 <USBD_CDC_Setup+0x9e>
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d17c      	bne.n	80099ec <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	88db      	ldrh	r3, [r3, #6]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d029      	beq.n	800994e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	da11      	bge.n	8009928 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009910:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	88d2      	ldrh	r2, [r2, #6]
 8009916:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009918:	6939      	ldr	r1, [r7, #16]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	461a      	mov	r2, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f9c9 	bl	800acb8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009926:	e068      	b.n	80099fa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785a      	ldrb	r2, [r3, #1]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800993e:	6939      	ldr	r1, [r7, #16]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	88db      	ldrh	r3, [r3, #6]
 8009944:	461a      	mov	r2, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 f9e4 	bl	800ad14 <USBD_CtlPrepareRx>
    break;
 800994c:	e055      	b.n	80099fa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	7850      	ldrb	r0, [r2, #1]
 800995a:	2200      	movs	r2, #0
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	4798      	blx	r3
    break;
 8009960:	e04b      	b.n	80099fa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b0a      	cmp	r3, #10
 8009968:	d017      	beq.n	800999a <USBD_CDC_Setup+0xd6>
 800996a:	2b0b      	cmp	r3, #11
 800996c:	d029      	beq.n	80099c2 <USBD_CDC_Setup+0xfe>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d133      	bne.n	80099da <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009978:	2b03      	cmp	r3, #3
 800997a:	d107      	bne.n	800998c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	2202      	movs	r2, #2
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f997 	bl	800acb8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800998a:	e02e      	b.n	80099ea <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 f927 	bl	800abe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8009994:	2302      	movs	r3, #2
 8009996:	75fb      	strb	r3, [r7, #23]
      break;
 8009998:	e027      	b.n	80099ea <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d107      	bne.n	80099b4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80099a4:	f107 030f 	add.w	r3, r7, #15
 80099a8:	2201      	movs	r2, #1
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f983 	bl	800acb8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80099b2:	e01a      	b.n	80099ea <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 f913 	bl	800abe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80099bc:	2302      	movs	r3, #2
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e013      	b.n	80099ea <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d00d      	beq.n	80099e8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 f907 	bl	800abe2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80099d4:	2302      	movs	r3, #2
 80099d6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80099d8:	e006      	b.n	80099e8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 f900 	bl	800abe2 <USBD_CtlError>
      ret = USBD_FAIL;
 80099e2:	2302      	movs	r3, #2
 80099e4:	75fb      	strb	r3, [r7, #23]
      break;
 80099e6:	e000      	b.n	80099ea <USBD_CDC_Setup+0x126>
      break;
 80099e8:	bf00      	nop
    }
    break;
 80099ea:	e006      	b.n	80099fa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f8f7 	bl	800abe2 <USBD_CtlError>
    ret = USBD_FAIL;
 80099f4:	2302      	movs	r3, #2
 80099f6:	75fb      	strb	r3, [r7, #23]
    break;
 80099f8:	bf00      	nop
  }

  return ret;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a16:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a1e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d03a      	beq.n	8009aa0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	331c      	adds	r3, #28
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d029      	beq.n	8009a94 <USBD_CDC_DataIn+0x90>
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	331c      	adds	r3, #28
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	78f9      	ldrb	r1, [r7, #3]
 8009a54:	68b8      	ldr	r0, [r7, #8]
 8009a56:	460b      	mov	r3, r1
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	1a5b      	subs	r3, r3, r1
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4403      	add	r3, r0
 8009a60:	3344      	adds	r3, #68	; 0x44
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a68:	fb03 f301 	mul.w	r3, r3, r1
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d110      	bne.n	8009a94 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	331c      	adds	r3, #28
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009a86:	78f9      	ldrb	r1, [r7, #3]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f003 fd6a 	bl	800d566 <USBD_LL_Transmit>
 8009a92:	e003      	b.n	8009a9c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e000      	b.n	8009aa2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009aa0:	2302      	movs	r3, #2
  }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f003 fd95 	bl	800d5f2 <USBD_LL_GetRxDataSize>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009aee:	4611      	mov	r1, r2
 8009af0:	4798      	blx	r3

    return USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e000      	b.n	8009af8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009af6:	2302      	movs	r3, #2
  }
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009b0e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d015      	beq.n	8009b46 <USBD_CDC_EP0_RxReady+0x46>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b20:	2bff      	cmp	r3, #255	; 0xff
 8009b22:	d010      	beq.n	8009b46 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b3a:	b292      	uxth	r2, r2
 8009b3c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	22ff      	movs	r2, #255	; 0xff
 8009b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2243      	movs	r2, #67	; 0x43
 8009b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b5e:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20000090 	.word	0x20000090

08009b70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2243      	movs	r2, #67	; 0x43
 8009b7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b7e:	4b03      	ldr	r3, [pc, #12]	; (8009b8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	2000004c 	.word	0x2000004c

08009b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2243      	movs	r2, #67	; 0x43
 8009b9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b9e:	4b03      	ldr	r3, [pc, #12]	; (8009bac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	200000d4 	.word	0x200000d4

08009bb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	220a      	movs	r2, #10
 8009bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000008 	.word	0x20000008

08009bd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c12:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c42:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c68:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01c      	beq.n	8009cae <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d115      	bne.n	8009caa <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2181      	movs	r1, #129	; 0x81
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f003 fc60 	bl	800d566 <USBD_LL_Transmit>

      return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e002      	b.n	8009cb0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009cae:	2302      	movs	r3, #2
  }
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d017      	beq.n	8009d02 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7c1b      	ldrb	r3, [r3, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f003 fc60 	bl	800d5ac <USBD_LL_PrepareReceive>
 8009cec:	e007      	b.n	8009cfe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f003 fc57 	bl	800d5ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d02:	2302      	movs	r3, #2
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d20:	2302      	movs	r3, #2
 8009d22:	e01a      	b.n	8009d5a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	79fa      	ldrb	r2, [r7, #7]
 8009d50:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f003 fad2 	bl	800d2fc <USBD_LL_Init>

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d006      	beq.n	8009d84 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	e001      	b.n	8009d88 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d84:	2302      	movs	r3, #2
 8009d86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f003 faf8 	bl	800d394 <USBD_LL_Start>

  return USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00c      	beq.n	8009df8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	78fa      	ldrb	r2, [r7, #3]
 8009de8:	4611      	mov	r1, r2
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
  return USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fe94 	bl	800ab68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009e4e:	461a      	mov	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009e5c:	f003 031f 	and.w	r3, r3, #31
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d00c      	beq.n	8009e7e <USBD_LL_SetupStage+0x56>
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d302      	bcc.n	8009e6e <USBD_LL_SetupStage+0x46>
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d010      	beq.n	8009e8e <USBD_LL_SetupStage+0x66>
 8009e6c:	e017      	b.n	8009e9e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa04 	bl	800a284 <USBD_StdDevReq>
    break;
 8009e7c:	e01a      	b.n	8009eb4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa66 	bl	800a358 <USBD_StdItfReq>
    break;
 8009e8c:	e012      	b.n	8009eb4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 faa4 	bl	800a3e4 <USBD_StdEPReq>
    break;
 8009e9c:	e00a      	b.n	8009eb4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f003 fad1 	bl	800d454 <USBD_LL_StallEP>
    break;
 8009eb2:	bf00      	nop
  }

  return USBD_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d14b      	bne.n	8009f6a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009ed8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d134      	bne.n	8009f4e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d919      	bls.n	8009f24 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	1ad2      	subs	r2, r2, r3
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d203      	bcs.n	8009f12 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	e002      	b.n	8009f18 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 ff17 	bl	800ad50 <USBD_CtlContinueRx>
 8009f22:	e038      	b.n	8009f96 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d105      	bne.n	8009f46 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 ff14 	bl	800ad74 <USBD_CtlSendStatus>
 8009f4c:	e023      	b.n	8009f96 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	d11e      	bne.n	8009f96 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009f60:	2100      	movs	r1, #0
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f003 fa76 	bl	800d454 <USBD_LL_StallEP>
 8009f68:	e015      	b.n	8009f96 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00d      	beq.n	8009f92 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d108      	bne.n	8009f92 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	7afa      	ldrb	r2, [r7, #11]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	4798      	blx	r3
 8009f90:	e001      	b.n	8009f96 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f92:	2302      	movs	r3, #2
 8009f94:	e000      	b.n	8009f98 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d17f      	bne.n	800a0b4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d15c      	bne.n	800a07e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	68da      	ldr	r2, [r3, #12]
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d915      	bls.n	8009ffc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 fe81 	bl	800acf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f003 fad9 	bl	800d5ac <USBD_LL_PrepareReceive>
 8009ffa:	e04e      	b.n	800a09a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	6912      	ldr	r2, [r2, #16]
 800a004:	fbb3 f1f2 	udiv	r1, r3, r2
 800a008:	fb02 f201 	mul.w	r2, r2, r1
 800a00c:	1a9b      	subs	r3, r3, r2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d11c      	bne.n	800a04c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	689a      	ldr	r2, [r3, #8]
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d316      	bcc.n	800a04c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a028:	429a      	cmp	r2, r3
 800a02a:	d20f      	bcs.n	800a04c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a02c:	2200      	movs	r2, #0
 800a02e:	2100      	movs	r1, #0
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fe5d 	bl	800acf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a03e:	2300      	movs	r3, #0
 800a040:	2200      	movs	r2, #0
 800a042:	2100      	movs	r1, #0
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f003 fab1 	bl	800d5ac <USBD_LL_PrepareReceive>
 800a04a:	e026      	b.n	800a09a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00a      	beq.n	800a06e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d105      	bne.n	800a06e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a06e:	2180      	movs	r1, #128	; 0x80
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f003 f9ef 	bl	800d454 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fe8f 	bl	800ad9a <USBD_CtlReceiveStatus>
 800a07c:	e00d      	b.n	800a09a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a084:	2b04      	cmp	r3, #4
 800a086:	d004      	beq.n	800a092 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a092:	2180      	movs	r1, #128	; 0x80
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f003 f9dd 	bl	800d454 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d11d      	bne.n	800a0e0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7ff fe82 	bl	8009dae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a0b2:	e015      	b.n	800a0e0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00d      	beq.n	800a0dc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d108      	bne.n	800a0dc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	7afa      	ldrb	r2, [r7, #11]
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	4798      	blx	r3
 800a0da:	e001      	b.n	800a0e0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e000      	b.n	800a0e2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f003 f966 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2240      	movs	r2, #64	; 0x40
 800a10a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a10e:	2340      	movs	r3, #64	; 0x40
 800a110:	2200      	movs	r2, #0
 800a112:	2180      	movs	r1, #128	; 0x80
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f003 f958 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2240      	movs	r2, #64	; 0x40
 800a124:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6852      	ldr	r2, [r2, #4]
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	4611      	mov	r1, r2
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
  }

  return USBD_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2204      	movs	r2, #4
 800a1a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d10b      	bne.n	800a202 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6852      	ldr	r2, [r2, #4]
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	4611      	mov	r1, r2
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3

  return USBD_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d004      	beq.n	800a2a8 <USBD_StdDevReq+0x24>
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d002      	beq.n	800a2a8 <USBD_StdDevReq+0x24>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <USBD_StdDevReq+0x34>
 800a2a6:	e04c      	b.n	800a342 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
    break;
 800a2b6:	e049      	b.n	800a34c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d83a      	bhi.n	800a336 <USBD_StdDevReq+0xb2>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USBD_StdDevReq+0x44>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a32d 	.word	0x0800a32d
 800a2d0:	0800a337 	.word	0x0800a337
 800a2d4:	0800a323 	.word	0x0800a323
 800a2d8:	0800a337 	.word	0x0800a337
 800a2dc:	0800a2fb 	.word	0x0800a2fb
 800a2e0:	0800a2f1 	.word	0x0800a2f1
 800a2e4:	0800a337 	.word	0x0800a337
 800a2e8:	0800a30f 	.word	0x0800a30f
 800a2ec:	0800a305 	.word	0x0800a305
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f9d2 	bl	800a69c <USBD_GetDescriptor>
      break;
 800a2f8:	e022      	b.n	800a340 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fac7 	bl	800a890 <USBD_SetAddress>
      break;
 800a302:	e01d      	b.n	800a340 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fb04 	bl	800a914 <USBD_SetConfig>
      break;
 800a30c:	e018      	b.n	800a340 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fb8d 	bl	800aa30 <USBD_GetConfig>
      break;
 800a316:	e013      	b.n	800a340 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fbbc 	bl	800aa98 <USBD_GetStatus>
      break;
 800a320:	e00e      	b.n	800a340 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fbea 	bl	800aafe <USBD_SetFeature>
      break;
 800a32a:	e009      	b.n	800a340 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fbf9 	bl	800ab26 <USBD_ClrFeature>
      break;
 800a334:	e004      	b.n	800a340 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fc52 	bl	800abe2 <USBD_CtlError>
      break;
 800a33e:	bf00      	nop
    }
    break;
 800a340:	e004      	b.n	800a34c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fc4c 	bl	800abe2 <USBD_CtlError>
    break;
 800a34a:	bf00      	nop
  }

  return ret;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop

0800a358 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d003      	beq.n	800a37a <USBD_StdItfReq+0x22>
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d001      	beq.n	800a37a <USBD_StdItfReq+0x22>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d12a      	bne.n	800a3d0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a380:	3b01      	subs	r3, #1
 800a382:	2b02      	cmp	r3, #2
 800a384:	d81d      	bhi.n	800a3c2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	889b      	ldrh	r3, [r3, #4]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d813      	bhi.n	800a3b8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d110      	bne.n	800a3cc <USBD_StdItfReq+0x74>
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10d      	bne.n	800a3cc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fcdf 	bl	800ad74 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a3b6:	e009      	b.n	800a3cc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fc11 	bl	800abe2 <USBD_CtlError>
      break;
 800a3c0:	e004      	b.n	800a3cc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fc0c 	bl	800abe2 <USBD_CtlError>
      break;
 800a3ca:	e000      	b.n	800a3ce <USBD_StdItfReq+0x76>
      break;
 800a3cc:	bf00      	nop
    }
    break;
 800a3ce:	e004      	b.n	800a3da <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fc05 	bl	800abe2 <USBD_CtlError>
    break;
 800a3d8:	bf00      	nop
  }

  return USBD_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	889b      	ldrh	r3, [r3, #4]
 800a3f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a400:	2b20      	cmp	r3, #32
 800a402:	d004      	beq.n	800a40e <USBD_StdEPReq+0x2a>
 800a404:	2b40      	cmp	r3, #64	; 0x40
 800a406:	d002      	beq.n	800a40e <USBD_StdEPReq+0x2a>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d008      	beq.n	800a41e <USBD_StdEPReq+0x3a>
 800a40c:	e13b      	b.n	800a686 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	4798      	blx	r3
    break;
 800a41c:	e138      	b.n	800a690 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a426:	2b20      	cmp	r3, #32
 800a428:	d10a      	bne.n	800a440 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	4798      	blx	r3
 800a438:	4603      	mov	r3, r0
 800a43a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	e128      	b.n	800a692 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d03e      	beq.n	800a4c6 <USBD_StdEPReq+0xe2>
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d002      	beq.n	800a452 <USBD_StdEPReq+0x6e>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d070      	beq.n	800a532 <USBD_StdEPReq+0x14e>
 800a450:	e113      	b.n	800a67a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d002      	beq.n	800a462 <USBD_StdEPReq+0x7e>
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d015      	beq.n	800a48c <USBD_StdEPReq+0xa8>
 800a460:	e02b      	b.n	800a4ba <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00c      	beq.n	800a482 <USBD_StdEPReq+0x9e>
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b80      	cmp	r3, #128	; 0x80
 800a46c:	d009      	beq.n	800a482 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f002 ffee 	bl	800d454 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a478:	2180      	movs	r1, #128	; 0x80
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f002 ffea 	bl	800d454 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a480:	e020      	b.n	800a4c4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fbac 	bl	800abe2 <USBD_CtlError>
        break;
 800a48a:	e01b      	b.n	800a4c4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	885b      	ldrh	r3, [r3, #2]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10e      	bne.n	800a4b2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <USBD_StdEPReq+0xce>
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b80      	cmp	r3, #128	; 0x80
 800a49e:	d008      	beq.n	800a4b2 <USBD_StdEPReq+0xce>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	88db      	ldrh	r3, [r3, #6]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d104      	bne.n	800a4b2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f002 ffd1 	bl	800d454 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fc5e 	bl	800ad74 <USBD_CtlSendStatus>

        break;
 800a4b8:	e004      	b.n	800a4c4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fb90 	bl	800abe2 <USBD_CtlError>
        break;
 800a4c2:	bf00      	nop
      }
      break;
 800a4c4:	e0de      	b.n	800a684 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d002      	beq.n	800a4d6 <USBD_StdEPReq+0xf2>
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d015      	beq.n	800a500 <USBD_StdEPReq+0x11c>
 800a4d4:	e026      	b.n	800a524 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <USBD_StdEPReq+0x112>
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b80      	cmp	r3, #128	; 0x80
 800a4e0:	d009      	beq.n	800a4f6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f002 ffb4 	bl	800d454 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a4ec:	2180      	movs	r1, #128	; 0x80
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f002 ffb0 	bl	800d454 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a4f4:	e01c      	b.n	800a530 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fb72 	bl	800abe2 <USBD_CtlError>
        break;
 800a4fe:	e017      	b.n	800a530 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	885b      	ldrh	r3, [r3, #2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d112      	bne.n	800a52e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f002 ffbb 	bl	800d492 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fc29 	bl	800ad74 <USBD_CtlSendStatus>
        }
        break;
 800a522:	e004      	b.n	800a52e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fb5b 	bl	800abe2 <USBD_CtlError>
        break;
 800a52c:	e000      	b.n	800a530 <USBD_StdEPReq+0x14c>
        break;
 800a52e:	bf00      	nop
      }
      break;
 800a530:	e0a8      	b.n	800a684 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d002      	beq.n	800a542 <USBD_StdEPReq+0x15e>
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d031      	beq.n	800a5a4 <USBD_StdEPReq+0x1c0>
 800a540:	e095      	b.n	800a66e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <USBD_StdEPReq+0x174>
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	d004      	beq.n	800a558 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fb46 	bl	800abe2 <USBD_CtlError>
          break;
 800a556:	e08f      	b.n	800a678 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da0b      	bge.n	800a578 <USBD_StdEPReq+0x194>
 800a560:	7bbb      	ldrb	r3, [r7, #14]
 800a562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	3310      	adds	r3, #16
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	4413      	add	r3, r2
 800a574:	3304      	adds	r3, #4
 800a576:	e00a      	b.n	800a58e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2202      	movs	r2, #2
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fb8b 	bl	800acb8 <USBD_CtlSendData>
          break;
 800a5a2:	e069      	b.n	800a678 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da11      	bge.n	800a5d0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	f003 020f 	and.w	r2, r3, #15
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	440b      	add	r3, r1
 800a5be:	3318      	adds	r3, #24
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d117      	bne.n	800a5f6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fb0a 	bl	800abe2 <USBD_CtlError>
            break;
 800a5ce:	e053      	b.n	800a678 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d104      	bne.n	800a5f6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 faf7 	bl	800abe2 <USBD_CtlError>
            break;
 800a5f4:	e040      	b.n	800a678 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da0b      	bge.n	800a616 <USBD_StdEPReq+0x232>
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	3310      	adds	r3, #16
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	3304      	adds	r3, #4
 800a614:	e00a      	b.n	800a62c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	4413      	add	r3, r2
 800a62c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <USBD_StdEPReq+0x256>
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b80      	cmp	r3, #128	; 0x80
 800a638:	d103      	bne.n	800a642 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e00e      	b.n	800a660 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f002 ff42 	bl	800d4d0 <USBD_LL_IsStallEP>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2201      	movs	r2, #1
 800a656:	601a      	str	r2, [r3, #0]
 800a658:	e002      	b.n	800a660 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2202      	movs	r2, #2
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fb26 	bl	800acb8 <USBD_CtlSendData>
          break;
 800a66c:	e004      	b.n	800a678 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fab6 	bl	800abe2 <USBD_CtlError>
        break;
 800a676:	bf00      	nop
      }
      break;
 800a678:	e004      	b.n	800a684 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fab0 	bl	800abe2 <USBD_CtlError>
      break;
 800a682:	bf00      	nop
    }
    break;
 800a684:	e004      	b.n	800a690 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 faaa 	bl	800abe2 <USBD_CtlError>
    break;
 800a68e:	bf00      	nop
  }

  return ret;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	885b      	ldrh	r3, [r3, #2]
 800a6aa:	0a1b      	lsrs	r3, r3, #8
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	2b06      	cmp	r3, #6
 800a6b2:	f200 80c9 	bhi.w	800a848 <USBD_GetDescriptor+0x1ac>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <USBD_GetDescriptor+0x20>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6d9 	.word	0x0800a6d9
 800a6c0:	0800a6f1 	.word	0x0800a6f1
 800a6c4:	0800a731 	.word	0x0800a731
 800a6c8:	0800a849 	.word	0x0800a849
 800a6cc:	0800a849 	.word	0x0800a849
 800a6d0:	0800a7f5 	.word	0x0800a7f5
 800a6d4:	0800a81b 	.word	0x0800a81b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 010a 	add.w	r1, r7, #10
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
    break;
 800a6ee:	e0b0      	b.n	800a852 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7c1b      	ldrb	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10d      	bne.n	800a714 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	f107 020a 	add.w	r2, r7, #10
 800a704:	4610      	mov	r0, r2
 800a706:	4798      	blx	r3
 800a708:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	2202      	movs	r2, #2
 800a710:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a712:	e09e      	b.n	800a852 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	f107 020a 	add.w	r2, r7, #10
 800a720:	4610      	mov	r0, r2
 800a722:	4798      	blx	r3
 800a724:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	2202      	movs	r2, #2
 800a72c:	701a      	strb	r2, [r3, #0]
    break;
 800a72e:	e090      	b.n	800a852 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	885b      	ldrh	r3, [r3, #2]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b05      	cmp	r3, #5
 800a738:	d856      	bhi.n	800a7e8 <USBD_GetDescriptor+0x14c>
 800a73a:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <USBD_GetDescriptor+0xa4>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a759 	.word	0x0800a759
 800a744:	0800a771 	.word	0x0800a771
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a7a1 	.word	0x0800a7a1
 800a750:	0800a7b9 	.word	0x0800a7b9
 800a754:	0800a7d1 	.word	0x0800a7d1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	7c12      	ldrb	r2, [r2, #16]
 800a764:	f107 010a 	add.w	r1, r7, #10
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
 800a76c:	60f8      	str	r0, [r7, #12]
      break;
 800a76e:	e040      	b.n	800a7f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	7c12      	ldrb	r2, [r2, #16]
 800a77c:	f107 010a 	add.w	r1, r7, #10
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
 800a784:	60f8      	str	r0, [r7, #12]
      break;
 800a786:	e034      	b.n	800a7f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	f107 010a 	add.w	r1, r7, #10
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
      break;
 800a79e:	e028      	b.n	800a7f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7c12      	ldrb	r2, [r2, #16]
 800a7ac:	f107 010a 	add.w	r1, r7, #10
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	60f8      	str	r0, [r7, #12]
      break;
 800a7b6:	e01c      	b.n	800a7f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	7c12      	ldrb	r2, [r2, #16]
 800a7c4:	f107 010a 	add.w	r1, r7, #10
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
 800a7cc:	60f8      	str	r0, [r7, #12]
      break;
 800a7ce:	e010      	b.n	800a7f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 010a 	add.w	r1, r7, #10
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
      break;
 800a7e6:	e004      	b.n	800a7f2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f9f9 	bl	800abe2 <USBD_CtlError>
      return;
 800a7f0:	e04b      	b.n	800a88a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800a7f2:	e02e      	b.n	800a852 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7c1b      	ldrb	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a804:	f107 020a 	add.w	r2, r7, #10
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
 800a80c:	60f8      	str	r0, [r7, #12]
      break;
 800a80e:	e020      	b.n	800a852 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9e5 	bl	800abe2 <USBD_CtlError>
      return;
 800a818:	e037      	b.n	800a88a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	7c1b      	ldrb	r3, [r3, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10d      	bne.n	800a83e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	f107 020a 	add.w	r2, r7, #10
 800a82e:	4610      	mov	r0, r2
 800a830:	4798      	blx	r3
 800a832:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3301      	adds	r3, #1
 800a838:	2207      	movs	r2, #7
 800a83a:	701a      	strb	r2, [r3, #0]
      break;
 800a83c:	e009      	b.n	800a852 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f9ce 	bl	800abe2 <USBD_CtlError>
      return;
 800a846:	e020      	b.n	800a88a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f9c9 	bl	800abe2 <USBD_CtlError>
    return;
 800a850:	e01b      	b.n	800a88a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800a852:	897b      	ldrh	r3, [r7, #10]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d011      	beq.n	800a87c <USBD_GetDescriptor+0x1e0>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	88db      	ldrh	r3, [r3, #6]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00d      	beq.n	800a87c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	88da      	ldrh	r2, [r3, #6]
 800a864:	897b      	ldrh	r3, [r7, #10]
 800a866:	4293      	cmp	r3, r2
 800a868:	bf28      	it	cs
 800a86a:	4613      	movcs	r3, r2
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800a870:	897b      	ldrh	r3, [r7, #10]
 800a872:	461a      	mov	r2, r3
 800a874:	68f9      	ldr	r1, [r7, #12]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa1e 	bl	800acb8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	88db      	ldrh	r3, [r3, #6]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fa75 	bl	800ad74 <USBD_CtlSendStatus>
  }
}
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	889b      	ldrh	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d130      	bne.n	800a904 <USBD_SetAddress+0x74>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	88db      	ldrh	r3, [r3, #6]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12c      	bne.n	800a904 <USBD_SetAddress+0x74>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b0:	d828      	bhi.n	800a904 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d104      	bne.n	800a8d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f989 	bl	800abe2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d0:	e01c      	b.n	800a90c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7bfa      	ldrb	r2, [r7, #15]
 800a8d6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f002 fe22 	bl	800d528 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fa45 	bl	800ad74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d004      	beq.n	800a8fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f8:	e008      	b.n	800a90c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a902:	e003      	b.n	800a90c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f96b 	bl	800abe2 <USBD_CtlError>
  }
}
 800a90c:	bf00      	nop
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	885b      	ldrh	r3, [r3, #2]
 800a922:	b2da      	uxtb	r2, r3
 800a924:	4b41      	ldr	r3, [pc, #260]	; (800aa2c <USBD_SetConfig+0x118>)
 800a926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a928:	4b40      	ldr	r3, [pc, #256]	; (800aa2c <USBD_SetConfig+0x118>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d904      	bls.n	800a93a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f955 	bl	800abe2 <USBD_CtlError>
 800a938:	e075      	b.n	800aa26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a940:	2b02      	cmp	r3, #2
 800a942:	d002      	beq.n	800a94a <USBD_SetConfig+0x36>
 800a944:	2b03      	cmp	r3, #3
 800a946:	d023      	beq.n	800a990 <USBD_SetConfig+0x7c>
 800a948:	e062      	b.n	800aa10 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800a94a:	4b38      	ldr	r3, [pc, #224]	; (800aa2c <USBD_SetConfig+0x118>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d01a      	beq.n	800a988 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800a952:	4b36      	ldr	r3, [pc, #216]	; (800aa2c <USBD_SetConfig+0x118>)
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2203      	movs	r2, #3
 800a960:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a964:	4b31      	ldr	r3, [pc, #196]	; (800aa2c <USBD_SetConfig+0x118>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fa2a 	bl	8009dc4 <USBD_SetClassConfig>
 800a970:	4603      	mov	r3, r0
 800a972:	2b02      	cmp	r3, #2
 800a974:	d104      	bne.n	800a980 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f932 	bl	800abe2 <USBD_CtlError>
          return;
 800a97e:	e052      	b.n	800aa26 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9f7 	bl	800ad74 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a986:	e04e      	b.n	800aa26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f9f3 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800a98e:	e04a      	b.n	800aa26 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a990:	4b26      	ldr	r3, [pc, #152]	; (800aa2c <USBD_SetConfig+0x118>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d112      	bne.n	800a9be <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800a9a0:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <USBD_SetConfig+0x118>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800a9aa:	4b20      	ldr	r3, [pc, #128]	; (800aa2c <USBD_SetConfig+0x118>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff fa26 	bl	8009e02 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f9dc 	bl	800ad74 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a9bc:	e033      	b.n	800aa26 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800a9be:	4b1b      	ldr	r3, [pc, #108]	; (800aa2c <USBD_SetConfig+0x118>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d01d      	beq.n	800aa08 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fa14 	bl	8009e02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9da:	4b14      	ldr	r3, [pc, #80]	; (800aa2c <USBD_SetConfig+0x118>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9e4:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <USBD_SetConfig+0x118>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff f9ea 	bl	8009dc4 <USBD_SetClassConfig>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d104      	bne.n	800aa00 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f8f2 	bl	800abe2 <USBD_CtlError>
          return;
 800a9fe:	e012      	b.n	800aa26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f9b7 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800aa06:	e00e      	b.n	800aa26 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f9b3 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800aa0e:	e00a      	b.n	800aa26 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f8e5 	bl	800abe2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <USBD_SetConfig+0x118>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff f9ef 	bl	8009e02 <USBD_ClrClassConfig>
      break;
 800aa24:	bf00      	nop
    }
  }
}
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000d38 	.word	0x20000d38

0800aa30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	88db      	ldrh	r3, [r3, #6]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d004      	beq.n	800aa4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f8cc 	bl	800abe2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800aa4a:	e021      	b.n	800aa90 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	db17      	blt.n	800aa86 <USBD_GetConfig+0x56>
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	dd02      	ble.n	800aa60 <USBD_GetConfig+0x30>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d00b      	beq.n	800aa76 <USBD_GetConfig+0x46>
 800aa5e:	e012      	b.n	800aa86 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f922 	bl	800acb8 <USBD_CtlSendData>
      break;
 800aa74:	e00c      	b.n	800aa90 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f91a 	bl	800acb8 <USBD_CtlSendData>
      break;
 800aa84:	e004      	b.n	800aa90 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f8aa 	bl	800abe2 <USBD_CtlError>
      break;
 800aa8e:	bf00      	nop
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d81e      	bhi.n	800aaec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	88db      	ldrh	r3, [r3, #6]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d004      	beq.n	800aac0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f892 	bl	800abe2 <USBD_CtlError>
      break;
 800aabe:	e01a      	b.n	800aaf6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f043 0202 	orr.w	r2, r3, #2
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	330c      	adds	r3, #12
 800aae0:	2202      	movs	r2, #2
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f8e7 	bl	800acb8 <USBD_CtlSendData>
    break;
 800aaea:	e004      	b.n	800aaf6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f877 	bl	800abe2 <USBD_CtlError>
    break;
 800aaf4:	bf00      	nop
  }
}
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d106      	bne.n	800ab1e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f92b 	bl	800ad74 <USBD_CtlSendStatus>
  }

}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d80b      	bhi.n	800ab54 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	885b      	ldrh	r3, [r3, #2]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d10c      	bne.n	800ab5e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f911 	bl	800ad74 <USBD_CtlSendStatus>
    }
    break;
 800ab52:	e004      	b.n	800ab5e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f843 	bl	800abe2 <USBD_CtlError>
    break;
 800ab5c:	e000      	b.n	800ab60 <USBD_ClrFeature+0x3a>
    break;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	785a      	ldrb	r2, [r3, #1]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	3302      	adds	r3, #2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4413      	add	r3, r2
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	3304      	adds	r3, #4
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	3305      	adds	r3, #5
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4413      	add	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	3306      	adds	r3, #6
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	3307      	adds	r3, #7
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	021b      	lsls	r3, r3, #8
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4413      	add	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	80da      	strh	r2, [r3, #6]

}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800abec:	2180      	movs	r1, #128	; 0x80
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f002 fc30 	bl	800d454 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800abf4:	2100      	movs	r1, #0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f002 fc2c 	bl	800d454 <USBD_LL_StallEP>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d032      	beq.n	800ac80 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 f834 	bl	800ac88 <USBD_GetLen>
 800ac20:	4603      	mov	r3, r0
 800ac22:	3301      	adds	r3, #1
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	75fa      	strb	r2, [r7, #23]
 800ac34:	461a      	mov	r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4413      	add	r3, r2
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	75fa      	strb	r2, [r7, #23]
 800ac46:	461a      	mov	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ac50:	e012      	b.n	800ac78 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	60fa      	str	r2, [r7, #12]
 800ac58:	7dfa      	ldrb	r2, [r7, #23]
 800ac5a:	1c51      	adds	r1, r2, #1
 800ac5c:	75f9      	strb	r1, [r7, #23]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	440a      	add	r2, r1
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	75fa      	strb	r2, [r7, #23]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	4413      	add	r3, r2
 800ac74:	2200      	movs	r2, #0
 800ac76:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e8      	bne.n	800ac52 <USBD_GetString+0x4e>
    }
  }
}
 800ac80:	bf00      	nop
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800ac94:	e005      	b.n	800aca2 <USBD_GetLen+0x1a>
    {
        len++;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f5      	bne.n	800ac96 <USBD_GetLen+0xe>
    }

    return len;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2202      	movs	r2, #2
 800acca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800acce:	88fa      	ldrh	r2, [r7, #6]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800acd4:	88fa      	ldrh	r2, [r7, #6]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	2100      	movs	r1, #0
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f002 fc40 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	4613      	mov	r3, r2
 800acfc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800acfe:	88fb      	ldrh	r3, [r7, #6]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	2100      	movs	r1, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f002 fc2e 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2203      	movs	r2, #3
 800ad26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800ad2a:	88fa      	ldrh	r2, [r7, #6]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800ad32:	88fa      	ldrh	r2, [r7, #6]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	2100      	movs	r1, #0
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f002 fc33 	bl	800d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	2100      	movs	r1, #0
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f002 fc21 	bl	800d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad84:	2300      	movs	r3, #0
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 fbeb 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2205      	movs	r2, #5
 800ada6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800adaa:	2300      	movs	r3, #0
 800adac:	2200      	movs	r2, #0
 800adae:	2100      	movs	r1, #0
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f002 fbfb 	bl	800d5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adce:	2301      	movs	r3, #1
 800add0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800add8:	7a5b      	ldrb	r3, [r3, #9]
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d131      	bne.n	800ae44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ade0:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800ade2:	7a5b      	ldrb	r3, [r3, #9]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	461a      	mov	r2, r3
 800ade8:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800adea:	2100      	movs	r1, #0
 800adec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800adee:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800adf0:	7a5b      	ldrb	r3, [r3, #9]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	4a17      	ldr	r2, [pc, #92]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800adfe:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800ae00:	7a5b      	ldrb	r3, [r3, #9]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800ae08:	4413      	add	r3, r2
 800ae0a:	79fa      	ldrb	r2, [r7, #7]
 800ae0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae0e:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800ae10:	7a5b      	ldrb	r3, [r3, #9]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	b2d1      	uxtb	r1, r2
 800ae18:	4a0e      	ldr	r2, [pc, #56]	; (800ae54 <FATFS_LinkDriverEx+0x94>)
 800ae1a:	7251      	strb	r1, [r2, #9]
 800ae1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae1e:	7dbb      	ldrb	r3, [r7, #22]
 800ae20:	3330      	adds	r3, #48	; 0x30
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	223a      	movs	r2, #58	; 0x3a
 800ae2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	3302      	adds	r3, #2
 800ae34:	222f      	movs	r2, #47	; 0x2f
 800ae36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	3303      	adds	r3, #3
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20000d3c 	.word	0x20000d3c

0800ae58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae62:	2200      	movs	r2, #0
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff ffaa 	bl	800adc0 <FATFS_LinkDriverEx>
 800ae6c:	4603      	mov	r3, r0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae82:	f000 f896 	bl	800afb2 <BSP_SD_IsDetected>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d001      	beq.n	800ae90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e012      	b.n	800aeb6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae90:	480b      	ldr	r0, [pc, #44]	; (800aec0 <BSP_SD_Init+0x48>)
 800ae92:	f7f9 fc74 	bl	800477e <HAL_SD_Init>
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d109      	bne.n	800aeb4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800aea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aea4:	4806      	ldr	r0, [pc, #24]	; (800aec0 <BSP_SD_Init+0x48>)
 800aea6:	f7fa fa4e 	bl	8005346 <HAL_SD_ConfigWideBusOperation>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20008738 	.word	0x20008738

0800aec4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	68f9      	ldr	r1, [r7, #12]
 800aeda:	4806      	ldr	r0, [pc, #24]	; (800aef4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aedc:	f7f9 fcd6 	bl	800488c <HAL_SD_ReadBlocks_DMA>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20008738 	.word	0x20008738

0800aef8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	68f9      	ldr	r1, [r7, #12]
 800af0e:	4806      	ldr	r0, [pc, #24]	; (800af28 <BSP_SD_WriteBlocks_DMA+0x30>)
 800af10:	f7f9 fd88 	bl	8004a24 <HAL_SD_WriteBlocks_DMA>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20008738 	.word	0x20008738

0800af2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af30:	4805      	ldr	r0, [pc, #20]	; (800af48 <BSP_SD_GetCardState+0x1c>)
 800af32:	f7fa fa84 	bl	800543e <HAL_SD_GetCardState>
 800af36:	4603      	mov	r3, r0
 800af38:	2b04      	cmp	r3, #4
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	b2db      	uxtb	r3, r3
}
 800af42:	4618      	mov	r0, r3
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20008738 	.word	0x20008738

0800af4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	4803      	ldr	r0, [pc, #12]	; (800af64 <BSP_SD_GetCardInfo+0x18>)
 800af58:	f7fa f9c9 	bl	80052ee <HAL_SD_GetCardInfo>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20008738 	.word	0x20008738

0800af68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800af70:	f000 f818 	bl	800afa4 <BSP_SD_AbortCallback>
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800af84:	f001 fb52 	bl	800c62c <BSP_SD_WriteCpltCallback>
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800af98:	f001 fb54 	bl	800c644 <BSP_SD_ReadCpltCallback>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800afa4:	b480      	push	{r7}
 800afa6:	af00      	add	r7, sp, #0

}
 800afa8:	bf00      	nop
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afb8:	2301      	movs	r3, #1
 800afba:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800afbc:	f000 f81e 	bl	800affc <BSP_PlatformIsDetected>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800afc6:	2300      	movs	r3, #0
 800afc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	b2db      	uxtb	r3, r3
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <MX_FATFS_Init+0x18>)
 800afde:	4805      	ldr	r0, [pc, #20]	; (800aff4 <MX_FATFS_Init+0x1c>)
 800afe0:	f7ff ff3a 	bl	800ae58 <FATFS_LinkDriver>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	4b03      	ldr	r3, [pc, #12]	; (800aff8 <MX_FATFS_Init+0x20>)
 800afea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800afec:	bf00      	nop
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20006488 	.word	0x20006488
 800aff4:	080118b4 	.word	0x080118b4
 800aff8:	20006484 	.word	0x20006484

0800affc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b002:	2301      	movs	r3, #1
 800b004:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b00a:	4806      	ldr	r0, [pc, #24]	; (800b024 <BSP_PlatformIsDetected+0x28>)
 800b00c:	f7f7 fae8 	bl	80025e0 <HAL_GPIO_ReadPin>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b016:	2300      	movs	r3, #0
 800b018:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b01a:	79fb      	ldrb	r3, [r7, #7]
}  
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	40020000 	.word	0x40020000

0800b028 <micros>:
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	4618      	mov	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
 800b040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	4a04      	ldr	r2, [pc, #16]	; (800b058 <millis+0x1c>)
 800b048:	fba2 2303 	umull	r2, r3, r2, r3
 800b04c:	099b      	lsrs	r3, r3, #6
 800b04e:	4618      	mov	r0, r3
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	10624dd3 	.word	0x10624dd3

0800b05c <println>:
{
 800b05c:	b40f      	push	{r0, r1, r2, r3}
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
	if (usbPresent)
 800b064:	4b29      	ldr	r3, [pc, #164]	; (800b10c <println+0xb0>)
 800b066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d145      	bne.n	800b0fa <println+0x9e>
		writePin(LEDD, HIGH);
 800b06e:	2201      	movs	r2, #1
 800b070:	2108      	movs	r1, #8
 800b072:	4827      	ldr	r0, [pc, #156]	; (800b110 <println+0xb4>)
 800b074:	f7f7 facc 	bl	8002610 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800b078:	f107 031c 	add.w	r3, r7, #28
 800b07c:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	69b9      	ldr	r1, [r7, #24]
 800b082:	4824      	ldr	r0, [pc, #144]	; (800b114 <println+0xb8>)
 800b084:	f004 fa6c 	bl	800f560 <vsiprintf>
 800b088:	4603      	mov	r3, r0
 800b08a:	461a      	mov	r2, r3
 800b08c:	4b22      	ldr	r3, [pc, #136]	; (800b118 <println+0xbc>)
 800b08e:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 800b090:	4b21      	ldr	r3, [pc, #132]	; (800b118 <println+0xbc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a1f      	ldr	r2, [pc, #124]	; (800b114 <println+0xb8>)
 800b096:	210d      	movs	r1, #13
 800b098:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800b09a:	4b1f      	ldr	r3, [pc, #124]	; (800b118 <println+0xbc>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	4a1c      	ldr	r2, [pc, #112]	; (800b114 <println+0xb8>)
 800b0a2:	210a      	movs	r1, #10
 800b0a4:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800b0a6:	4b1c      	ldr	r3, [pc, #112]	; (800b118 <println+0xbc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	4a19      	ldr	r2, [pc, #100]	; (800b114 <println+0xb8>)
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800b0b2:	4b19      	ldr	r3, [pc, #100]	; (800b118 <println+0xbc>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	4a17      	ldr	r2, [pc, #92]	; (800b118 <println+0xbc>)
 800b0ba:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800b0bc:	f7ff ffb4 	bl	800b028 <micros>
 800b0c0:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <println+0xbc>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	3346      	adds	r3, #70	; 0x46
 800b0d0:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800b0d2:	e001      	b.n	800b0d8 <println+0x7c>
			if (micros() - printStart > timeout && false)
 800b0d4:	f7ff ffa8 	bl	800b028 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800b0d8:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <println+0xbc>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	480c      	ldr	r0, [pc, #48]	; (800b114 <println+0xb8>)
 800b0e2:	f001 ff9f 	bl	800d024 <CDC_Transmit_FS>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d0f3      	beq.n	800b0d4 <println+0x78>
		writePin(LEDD, LOW);
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2108      	movs	r1, #8
 800b0f0:	4807      	ldr	r0, [pc, #28]	; (800b110 <println+0xb4>)
 800b0f2:	f7f7 fa8d 	bl	8002610 <HAL_GPIO_WritePin>
		return true;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <println+0xa0>
	return false;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b106:	b004      	add	sp, #16
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	20001924 	.word	0x20001924
 800b110:	40020800 	.word	0x40020800
 800b114:	20001510 	.word	0x20001510
 800b118:	2000150c 	.word	0x2000150c

0800b11c <log_print_dummy>:

//void log_new();
char logBuffer[4096];
uint16_t logBufferIndex;
//void log_print(const char* format, ...);
static void log_print_dummy(const char* format, ...) { return; }
 800b11c:	b40f      	push	{r0, r1, r2, r3}
 800b11e:	b480      	push	{r7}
 800b120:	af00      	add	r7, sp, #0
 800b122:	bf00      	nop
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	b004      	add	sp, #16
 800b12c:	4770      	bx	lr
	...

0800b130 <loging_setup>:
	}
}


static bool loging_setup(void)		// Writes test file to SD card, if successful creates new log folder
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
			sdActive = false;
			Common.log_print = &log_print_dummy;
			return false;

	#else // SD_ENABLE
		println("warning: [LOGING] SD DISABLED!");
 800b134:	4804      	ldr	r0, [pc, #16]	; (800b148 <loging_setup+0x18>)
 800b136:	f7ff ff91 	bl	800b05c <println>
		Common.log_print = &log_print_dummy;
 800b13a:	4b04      	ldr	r3, [pc, #16]	; (800b14c <loging_setup+0x1c>)
 800b13c:	4a04      	ldr	r2, [pc, #16]	; (800b150 <loging_setup+0x20>)
 800b13e:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
		return false;
 800b142:	2300      	movs	r3, #0
	#endif
}
 800b144:	4618      	mov	r0, r3
 800b146:	bd80      	pop	{r7, pc}
 800b148:	08011590 	.word	0x08011590
 800b14c:	20000d48 	.word	0x20000d48
 800b150:	0800b11d 	.word	0x0800b11d

0800b154 <loging_loop>:

static void loging_loop(void)
{
 800b154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b158:	b08a      	sub	sp, #40	; 0x28
 800b15a:	af08      	add	r7, sp, #32

		if (millis() - lastLogSave >= LOG_SAVE_DELAY) { log_save(); lastLogSave = millis(); }
	#endif

	#if LOGING_PRINT_DATA
		if (millis() - lastDataPrint >= DATA_PRINT_DELAY)
 800b15c:	f7ff ff6e 	bl	800b03c <millis>
 800b160:	4602      	mov	r2, r0
 800b162:	4b89      	ldr	r3, [pc, #548]	; (800b388 <loging_loop+0x234>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b16c:	f0c0 8107 	bcc.w	800b37e <loging_loop+0x22a>
		{
			#if LOGING_PRINT_SENSORS
				if (Common.bmp.active)
 800b170:	4b86      	ldr	r3, [pc, #536]	; (800b38c <loging_loop+0x238>)
 800b172:	7f1b      	ldrb	r3, [r3, #28]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d023      	beq.n	800b1c0 <loging_loop+0x6c>
				{
					println("Pressure: %.4f", Common.bmp.pressure);
 800b178:	4b84      	ldr	r3, [pc, #528]	; (800b38c <loging_loop+0x238>)
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7f5 f9e3 	bl	8000548 <__aeabi_f2d>
 800b182:	4603      	mov	r3, r0
 800b184:	460c      	mov	r4, r1
 800b186:	461a      	mov	r2, r3
 800b188:	4623      	mov	r3, r4
 800b18a:	4881      	ldr	r0, [pc, #516]	; (800b390 <loging_loop+0x23c>)
 800b18c:	f7ff ff66 	bl	800b05c <println>
					println("Temperature: %.4f", Common.bmp.temperature);
 800b190:	4b7e      	ldr	r3, [pc, #504]	; (800b38c <loging_loop+0x238>)
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	4618      	mov	r0, r3
 800b196:	f7f5 f9d7 	bl	8000548 <__aeabi_f2d>
 800b19a:	4603      	mov	r3, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	487c      	ldr	r0, [pc, #496]	; (800b394 <loging_loop+0x240>)
 800b1a4:	f7ff ff5a 	bl	800b05c <println>
					println("Altitude(P): %.1f", Common.bmp.altitude);
 800b1a8:	4b78      	ldr	r3, [pc, #480]	; (800b38c <loging_loop+0x238>)
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7f5 f9cb 	bl	8000548 <__aeabi_f2d>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	460c      	mov	r4, r1
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	4877      	ldr	r0, [pc, #476]	; (800b398 <loging_loop+0x244>)
 800b1bc:	f7ff ff4e 	bl	800b05c <println>
				}
				if (Common.gps.active && Common.gps.fix)
 800b1c0:	4b72      	ldr	r3, [pc, #456]	; (800b38c <loging_loop+0x238>)
 800b1c2:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d02c      	beq.n	800b224 <loging_loop+0xd0>
 800b1ca:	4b70      	ldr	r3, [pc, #448]	; (800b38c <loging_loop+0x238>)
 800b1cc:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d027      	beq.n	800b224 <loging_loop+0xd0>
				{
					println("Latitude: %.6f", Common.gps.latitudeDegrees);
 800b1d4:	4b6d      	ldr	r3, [pc, #436]	; (800b38c <loging_loop+0x238>)
 800b1d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f5 f9b4 	bl	8000548 <__aeabi_f2d>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	486c      	ldr	r0, [pc, #432]	; (800b39c <loging_loop+0x248>)
 800b1ea:	f7ff ff37 	bl	800b05c <println>
					println("Longitude: %.6f", Common.gps.longitudeDegrees);
 800b1ee:	4b67      	ldr	r3, [pc, #412]	; (800b38c <loging_loop+0x238>)
 800b1f0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7f5 f9a7 	bl	8000548 <__aeabi_f2d>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	461a      	mov	r2, r3
 800b200:	4623      	mov	r3, r4
 800b202:	4867      	ldr	r0, [pc, #412]	; (800b3a0 <loging_loop+0x24c>)
 800b204:	f7ff ff2a 	bl	800b05c <println>
					println("Altitude(G): %.1f", Common.gps.altitude);
 800b208:	4b60      	ldr	r3, [pc, #384]	; (800b38c <loging_loop+0x238>)
 800b20a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f5 f99a 	bl	8000548 <__aeabi_f2d>
 800b214:	4603      	mov	r3, r0
 800b216:	460c      	mov	r4, r1
 800b218:	461a      	mov	r2, r3
 800b21a:	4623      	mov	r3, r4
 800b21c:	4861      	ldr	r0, [pc, #388]	; (800b3a4 <loging_loop+0x250>)
 800b21e:	f7ff ff1d 	bl	800b05c <println>
 800b222:	e007      	b.n	800b234 <loging_loop+0xe0>
				}
				else if (Common.gps.active) println("GPS has no fix");
 800b224:	4b59      	ldr	r3, [pc, #356]	; (800b38c <loging_loop+0x238>)
 800b226:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <loging_loop+0xe0>
 800b22e:	485e      	ldr	r0, [pc, #376]	; (800b3a8 <loging_loop+0x254>)
 800b230:	f7ff ff14 	bl	800b05c <println>
				if (Common.mpu.active) println("Rotation: %.0f, %.0f, %.0f", Common.mpu.yaw, Common.mpu.pitch, Common.mpu.roll);
 800b234:	4b55      	ldr	r3, [pc, #340]	; (800b38c <loging_loop+0x238>)
 800b236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01d      	beq.n	800b27a <loging_loop+0x126>
 800b23e:	4b53      	ldr	r3, [pc, #332]	; (800b38c <loging_loop+0x238>)
 800b240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b242:	4618      	mov	r0, r3
 800b244:	f7f5 f980 	bl	8000548 <__aeabi_f2d>
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	4b4f      	ldr	r3, [pc, #316]	; (800b38c <loging_loop+0x238>)
 800b24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b250:	4618      	mov	r0, r3
 800b252:	f7f5 f979 	bl	8000548 <__aeabi_f2d>
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	4b4c      	ldr	r3, [pc, #304]	; (800b38c <loging_loop+0x238>)
 800b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25e:	4618      	mov	r0, r3
 800b260:	f7f5 f972 	bl	8000548 <__aeabi_f2d>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b26c:	e9cd 4500 	strd	r4, r5, [sp]
 800b270:	4642      	mov	r2, r8
 800b272:	464b      	mov	r3, r9
 800b274:	484d      	ldr	r0, [pc, #308]	; (800b3ac <loging_loop+0x258>)
 800b276:	f7ff fef1 	bl	800b05c <println>
				if (Common.sps.active)
 800b27a:	4b44      	ldr	r3, [pc, #272]	; (800b38c <loging_loop+0x238>)
 800b27c:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 800b280:	2b00      	cmp	r3, #0
 800b282:	d076      	beq.n	800b372 <loging_loop+0x21e>
				{
					println("Mass concentraion: %.1f %.1f %.1f %.1f", Common.sps.pm1, Common.sps.pm2, Common.sps.pm4, Common.sps.pm10);
 800b284:	4b41      	ldr	r3, [pc, #260]	; (800b38c <loging_loop+0x238>)
 800b286:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f5 f95b 	bl	8000548 <__aeabi_f2d>
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	4b3d      	ldr	r3, [pc, #244]	; (800b38c <loging_loop+0x238>)
 800b298:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f5 f952 	bl	8000548 <__aeabi_f2d>
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4b38      	ldr	r3, [pc, #224]	; (800b38c <loging_loop+0x238>)
 800b2aa:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f5 f949 	bl	8000548 <__aeabi_f2d>
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4689      	mov	r9, r1
 800b2ba:	4b34      	ldr	r3, [pc, #208]	; (800b38c <loging_loop+0x238>)
 800b2bc:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7f5 f940 	bl	8000548 <__aeabi_f2d>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b2d4:	e9cd 4500 	strd	r4, r5, [sp]
 800b2d8:	4652      	mov	r2, sl
 800b2da:	465b      	mov	r3, fp
 800b2dc:	4834      	ldr	r0, [pc, #208]	; (800b3b0 <loging_loop+0x25c>)
 800b2de:	f7ff febd 	bl	800b05c <println>
					println("Number concentraion: %.1f %.1f %.1f %.1f %.1f", Common.sps.n_pm05, Common.sps.n_pm1, Common.sps.n_pm2, Common.sps.n_pm4, Common.sps.n_pm10);
 800b2e2:	4b2a      	ldr	r3, [pc, #168]	; (800b38c <loging_loop+0x238>)
 800b2e4:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7f5 f92c 	bl	8000548 <__aeabi_f2d>
 800b2f0:	e9c7 0100 	strd	r0, r1, [r7]
 800b2f4:	4b25      	ldr	r3, [pc, #148]	; (800b38c <loging_loop+0x238>)
 800b2f6:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f5 f923 	bl	8000548 <__aeabi_f2d>
 800b302:	4604      	mov	r4, r0
 800b304:	460d      	mov	r5, r1
 800b306:	4b21      	ldr	r3, [pc, #132]	; (800b38c <loging_loop+0x238>)
 800b308:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7f5 f91a 	bl	8000548 <__aeabi_f2d>
 800b314:	4680      	mov	r8, r0
 800b316:	4689      	mov	r9, r1
 800b318:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <loging_loop+0x238>)
 800b31a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4618      	mov	r0, r3
 800b322:	f7f5 f911 	bl	8000548 <__aeabi_f2d>
 800b326:	4682      	mov	sl, r0
 800b328:	468b      	mov	fp, r1
 800b32a:	4b18      	ldr	r3, [pc, #96]	; (800b38c <loging_loop+0x238>)
 800b32c:	f203 5384 	addw	r3, r3, #1412	; 0x584
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f7f5 f908 	bl	8000548 <__aeabi_f2d>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b340:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800b344:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b348:	e9cd 4500 	strd	r4, r5, [sp]
 800b34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b350:	4818      	ldr	r0, [pc, #96]	; (800b3b4 <loging_loop+0x260>)
 800b352:	f7ff fe83 	bl	800b05c <println>
					println("Typical size: %.2f", Common.sps.typical_size);
 800b356:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <loging_loop+0x238>)
 800b358:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7f5 f8f2 	bl	8000548 <__aeabi_f2d>
 800b364:	4603      	mov	r3, r0
 800b366:	460c      	mov	r4, r1
 800b368:	461a      	mov	r2, r3
 800b36a:	4623      	mov	r3, r4
 800b36c:	4812      	ldr	r0, [pc, #72]	; (800b3b8 <loging_loop+0x264>)
 800b36e:	f7ff fe75 	bl	800b05c <println>
					default:
						sprintf(operation_string, "terminate"); break;
				}
				println("Operation mode: %s", operation_string);
			#endif
			lastDataPrint = millis();
 800b372:	f7ff fe63 	bl	800b03c <millis>
 800b376:	4602      	mov	r2, r0
 800b378:	4b03      	ldr	r3, [pc, #12]	; (800b388 <loging_loop+0x234>)
 800b37a:	601a      	str	r2, [r3, #0]
		}
	#endif
	return;
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
}
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b388:	2000586c 	.word	0x2000586c
 800b38c:	20000d48 	.word	0x20000d48
 800b390:	080115b0 	.word	0x080115b0
 800b394:	080115c0 	.word	0x080115c0
 800b398:	080115d4 	.word	0x080115d4
 800b39c:	080115e8 	.word	0x080115e8
 800b3a0:	080115f8 	.word	0x080115f8
 800b3a4:	08011608 	.word	0x08011608
 800b3a8:	0801161c 	.word	0x0801161c
 800b3ac:	0801162c 	.word	0x0801162c
 800b3b0:	08011648 	.word	0x08011648
 800b3b4:	08011670 	.word	0x08011670
 800b3b8:	080116a0 	.word	0x080116a0

0800b3bc <duplex_setup>:
{
	SX1278_transmit(&(Common.radio), Common.radio.txBuffer, 22);	
}

static bool duplex_setup(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
	(*Common.log_print)("*D00"); // [DUPLEX] Hello!
 800b3c0:	4b08      	ldr	r3, [pc, #32]	; (800b3e4 <duplex_setup+0x28>)
 800b3c2:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b3c6:	4808      	ldr	r0, [pc, #32]	; (800b3e8 <duplex_setup+0x2c>)
 800b3c8:	4798      	blx	r3
		return true;
	#else // RADIO_ENABLE
		#if DUPLEX_DEBUG
			println("warning: [DUPLEX] RADIO DISABLED!");
		#endif
		(*Common.log_print)("*WD00");
 800b3ca:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <duplex_setup+0x28>)
 800b3cc:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b3d0:	4806      	ldr	r0, [pc, #24]	; (800b3ec <duplex_setup+0x30>)
 800b3d2:	4798      	blx	r3
		Common.radio.active = false;
 800b3d4:	4b03      	ldr	r3, [pc, #12]	; (800b3e4 <duplex_setup+0x28>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
		return false;
 800b3dc:	2300      	movs	r3, #0
	#endif
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000d48 	.word	0x20000d48
 800b3e8:	080116b4 	.word	0x080116b4
 800b3ec:	080116bc 	.word	0x080116bc

0800b3f0 <duplex_loop>:
	Common.radio.txBuffer[22] = packetNumber;			// 22
	Common.radio.txLen = 23;
}

static void duplex_loop(void)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
				packetNumber++;
				return;
			}
		}
	#endif
	return;
 800b3f4:	bf00      	nop
}
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
	...

0800b400 <sensing_setup>:

uint32_t lastBmpRead;
uint32_t lastSpsRead;

static bool sensing_setup(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
	(*Common.log_print)("*S00"); // [SENSING] Hello!
 800b406:	4b5a      	ldr	r3, [pc, #360]	; (800b570 <sensing_setup+0x170>)
 800b408:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b40c:	4859      	ldr	r0, [pc, #356]	; (800b574 <sensing_setup+0x174>)
 800b40e:	4798      	blx	r3
				println("[SENSING] BMP280 init unsuccesfull, retrying...");
			#endif
		}
	#else
		#if SENSING_DEBUG
			println("warning: [SENSING] BMP280 DISABLED!");
 800b410:	4859      	ldr	r0, [pc, #356]	; (800b578 <sensing_setup+0x178>)
 800b412:	f7ff fe23 	bl	800b05c <println>
		#endif
		(*Common.log_print)("*WS10");
 800b416:	4b56      	ldr	r3, [pc, #344]	; (800b570 <sensing_setup+0x170>)
 800b418:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b41c:	4857      	ldr	r0, [pc, #348]	; (800b57c <sensing_setup+0x17c>)
 800b41e:	4798      	blx	r3
		Common.bmp.active = false;
 800b420:	4b53      	ldr	r3, [pc, #332]	; (800b570 <sensing_setup+0x170>)
 800b422:	2200      	movs	r2, #0
 800b424:	771a      	strb	r2, [r3, #28]
			Common.gps.longitudeDegrees = DEFAULT_TARGET_LON;
			Common.gps.altitude = DEFAULT_TARGET_ALT;
		}
	#else
		#if SENSING_DEBUG
			println("warning: [SENSING] L86 DISABLED!");
 800b426:	4856      	ldr	r0, [pc, #344]	; (800b580 <sensing_setup+0x180>)
 800b428:	f7ff fe18 	bl	800b05c <println>
		#endif
		(*Common.log_print)("*WS20");
 800b42c:	4b50      	ldr	r3, [pc, #320]	; (800b570 <sensing_setup+0x170>)
 800b42e:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b432:	4854      	ldr	r0, [pc, #336]	; (800b584 <sensing_setup+0x184>)
 800b434:	4798      	blx	r3
		Common.gps.active = false;
 800b436:	4b4e      	ldr	r3, [pc, #312]	; (800b570 <sensing_setup+0x170>)
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
			AK8963_init(&(Common.mpu), &mpu9250_default_config);
			writePin(LEDB, LOW);
		}
	#else
		#if SENSING_DEBUG
			println("warning: [SENSING] MPU9250 DISABLED!");
 800b43e:	4852      	ldr	r0, [pc, #328]	; (800b588 <sensing_setup+0x188>)
 800b440:	f7ff fe0c 	bl	800b05c <println>
		#endif
		(*Common.log_print)("*WS30");
 800b444:	4b4a      	ldr	r3, [pc, #296]	; (800b570 <sensing_setup+0x170>)
 800b446:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b44a:	4850      	ldr	r0, [pc, #320]	; (800b58c <sensing_setup+0x18c>)
 800b44c:	4798      	blx	r3
		Common.mpu.active = false;
 800b44e:	4b48      	ldr	r3, [pc, #288]	; (800b570 <sensing_setup+0x170>)
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	#endif

	#if SPS_ENABLE
		attempts = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	71fb      	strb	r3, [r7, #7]
		Common.sps.uart = Get_UART2_Instance();
 800b45a:	f000 febf 	bl	800c1dc <Get_UART2_Instance>
 800b45e:	4602      	mov	r2, r0
 800b460:	4b43      	ldr	r3, [pc, #268]	; (800b570 <sensing_setup+0x170>)
 800b462:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
		#if SENSING_DEBUG
			println("[SENSING] Initializing SPS30");
 800b466:	484a      	ldr	r0, [pc, #296]	; (800b590 <sensing_setup+0x190>)
 800b468:	f7ff fdf8 	bl	800b05c <println>
		#endif
		(*Common.log_print)("*S40");
 800b46c:	4b40      	ldr	r3, [pc, #256]	; (800b570 <sensing_setup+0x170>)
 800b46e:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b472:	4848      	ldr	r0, [pc, #288]	; (800b594 <sensing_setup+0x194>)
 800b474:	4798      	blx	r3

		while (!SPS30_init(&(Common.sps)))
 800b476:	e015      	b.n	800b4a4 <sensing_setup+0xa4>
		{
			if (++attempts > 5)
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	3301      	adds	r3, #1
 800b47c:	71fb      	strb	r3, [r7, #7]
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	2b05      	cmp	r3, #5
 800b482:	d908      	bls.n	800b496 <sensing_setup+0x96>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with SPS30, sensor is not active");
 800b484:	4844      	ldr	r0, [pc, #272]	; (800b598 <sensing_setup+0x198>)
 800b486:	f7ff fde9 	bl	800b05c <println>
				#endif
				(*Common.log_print)("*ES40");
 800b48a:	4b39      	ldr	r3, [pc, #228]	; (800b570 <sensing_setup+0x170>)
 800b48c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b490:	4842      	ldr	r0, [pc, #264]	; (800b59c <sensing_setup+0x19c>)
 800b492:	4798      	blx	r3
				break;
 800b494:	e00f      	b.n	800b4b6 <sensing_setup+0xb6>
			}

			delay(500);
 800b496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b49a:	f7f6 fa3b 	bl	8001914 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] SPS30 init unsuccesfull, retrying...");
 800b49e:	4840      	ldr	r0, [pc, #256]	; (800b5a0 <sensing_setup+0x1a0>)
 800b4a0:	f7ff fddc 	bl	800b05c <println>
		while (!SPS30_init(&(Common.sps)))
 800b4a4:	483f      	ldr	r0, [pc, #252]	; (800b5a4 <sensing_setup+0x1a4>)
 800b4a6:	f7f6 f878 	bl	800159a <SPS30_init>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f083 0301 	eor.w	r3, r3, #1
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e0      	bne.n	800b478 <sensing_setup+0x78>
		(*Common.log_print)("*WS40");
		Common.sps.active = false;
	#endif

	#if SENSING_DEBUG
		println("[SENSING] Sensor init summary:");
 800b4b6:	483c      	ldr	r0, [pc, #240]	; (800b5a8 <sensing_setup+0x1a8>)
 800b4b8:	f7ff fdd0 	bl	800b05c <println>
		println("- BMP %s", Common.bmp.active ? "active" : "not active");
 800b4bc:	4b2c      	ldr	r3, [pc, #176]	; (800b570 <sensing_setup+0x170>)
 800b4be:	7f1b      	ldrb	r3, [r3, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <sensing_setup+0xc8>
 800b4c4:	4b39      	ldr	r3, [pc, #228]	; (800b5ac <sensing_setup+0x1ac>)
 800b4c6:	e000      	b.n	800b4ca <sensing_setup+0xca>
 800b4c8:	4b39      	ldr	r3, [pc, #228]	; (800b5b0 <sensing_setup+0x1b0>)
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4839      	ldr	r0, [pc, #228]	; (800b5b4 <sensing_setup+0x1b4>)
 800b4ce:	f7ff fdc5 	bl	800b05c <println>
		println("- GPS %s", Common.gps.active ? "active" : "not active");
 800b4d2:	4b27      	ldr	r3, [pc, #156]	; (800b570 <sensing_setup+0x170>)
 800b4d4:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <sensing_setup+0xe0>
 800b4dc:	4b33      	ldr	r3, [pc, #204]	; (800b5ac <sensing_setup+0x1ac>)
 800b4de:	e000      	b.n	800b4e2 <sensing_setup+0xe2>
 800b4e0:	4b33      	ldr	r3, [pc, #204]	; (800b5b0 <sensing_setup+0x1b0>)
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4834      	ldr	r0, [pc, #208]	; (800b5b8 <sensing_setup+0x1b8>)
 800b4e6:	f7ff fdb9 	bl	800b05c <println>
		println("- IMU %s", Common.mpu.active ? "active" : "not active");
 800b4ea:	4b21      	ldr	r3, [pc, #132]	; (800b570 <sensing_setup+0x170>)
 800b4ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <sensing_setup+0xf8>
 800b4f4:	4b2d      	ldr	r3, [pc, #180]	; (800b5ac <sensing_setup+0x1ac>)
 800b4f6:	e000      	b.n	800b4fa <sensing_setup+0xfa>
 800b4f8:	4b2d      	ldr	r3, [pc, #180]	; (800b5b0 <sensing_setup+0x1b0>)
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	482f      	ldr	r0, [pc, #188]	; (800b5bc <sensing_setup+0x1bc>)
 800b4fe:	f7ff fdad 	bl	800b05c <println>
		println("- SPS %s", Common.sps.active ? "active" : "not active");
 800b502:	4b1b      	ldr	r3, [pc, #108]	; (800b570 <sensing_setup+0x170>)
 800b504:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <sensing_setup+0x110>
 800b50c:	4b27      	ldr	r3, [pc, #156]	; (800b5ac <sensing_setup+0x1ac>)
 800b50e:	e000      	b.n	800b512 <sensing_setup+0x112>
 800b510:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <sensing_setup+0x1b0>)
 800b512:	4619      	mov	r1, r3
 800b514:	482a      	ldr	r0, [pc, #168]	; (800b5c0 <sensing_setup+0x1c0>)
 800b516:	f7ff fda1 	bl	800b05c <println>
	#endif
	if (!Common.bmp.active || !Common.gps.active || !Common.mpu.active || !Common.sps.active) (*Common.log_print)("*WS00");
 800b51a:	4b15      	ldr	r3, [pc, #84]	; (800b570 <sensing_setup+0x170>)
 800b51c:	7f1b      	ldrb	r3, [r3, #28]
 800b51e:	f083 0301 	eor.w	r3, r3, #1
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d117      	bne.n	800b558 <sensing_setup+0x158>
 800b528:	4b11      	ldr	r3, [pc, #68]	; (800b570 <sensing_setup+0x170>)
 800b52a:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 800b52e:	f083 0301 	eor.w	r3, r3, #1
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10f      	bne.n	800b558 <sensing_setup+0x158>
 800b538:	4b0d      	ldr	r3, [pc, #52]	; (800b570 <sensing_setup+0x170>)
 800b53a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b53e:	f083 0301 	eor.w	r3, r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d107      	bne.n	800b558 <sensing_setup+0x158>
 800b548:	4b09      	ldr	r3, [pc, #36]	; (800b570 <sensing_setup+0x170>)
 800b54a:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 800b54e:	f083 0301 	eor.w	r3, r3, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <sensing_setup+0x162>
 800b558:	4b05      	ldr	r3, [pc, #20]	; (800b570 <sensing_setup+0x170>)
 800b55a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b55e:	4819      	ldr	r0, [pc, #100]	; (800b5c4 <sensing_setup+0x1c4>)
 800b560:	4798      	blx	r3

	return (Common.bmp.active || !BMP_ENABLE) && (Common.gps.active || !GPS_ENABLE) && (Common.mpu.active || !IMU_ENABLE) && (Common.sps.active || !SPS_ENABLE);
 800b562:	4b03      	ldr	r3, [pc, #12]	; (800b570 <sensing_setup+0x170>)
 800b564:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20000d48 	.word	0x20000d48
 800b574:	080116c4 	.word	0x080116c4
 800b578:	080116cc 	.word	0x080116cc
 800b57c:	080116f0 	.word	0x080116f0
 800b580:	080116f8 	.word	0x080116f8
 800b584:	0801171c 	.word	0x0801171c
 800b588:	08011724 	.word	0x08011724
 800b58c:	0801174c 	.word	0x0801174c
 800b590:	08011754 	.word	0x08011754
 800b594:	08011774 	.word	0x08011774
 800b598:	0801177c 	.word	0x0801177c
 800b59c:	080117bc 	.word	0x080117bc
 800b5a0:	080117c4 	.word	0x080117c4
 800b5a4:	200012a8 	.word	0x200012a8
 800b5a8:	080117f4 	.word	0x080117f4
 800b5ac:	08011814 	.word	0x08011814
 800b5b0:	0801181c 	.word	0x0801181c
 800b5b4:	08011828 	.word	0x08011828
 800b5b8:	08011834 	.word	0x08011834
 800b5bc:	08011840 	.word	0x08011840
 800b5c0:	0801184c 	.word	0x0801184c
 800b5c4:	08011858 	.word	0x08011858

0800b5c8 <sensing_loop>:

static void sensing_loop(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
	#if IMU_ENABLE
		if (Common.mpu.active) MPU9250_update(&(Common.mpu));
	#endif

	#if SPS_ENABLE
		if (Common.sps.active && millis() - lastSpsRead >= SENSING_SPS_DELAY) { SPS30_update(&(Common.sps)); lastSpsRead = millis(); }
 800b5cc:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <sensing_loop+0x34>)
 800b5ce:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d010      	beq.n	800b5f8 <sensing_loop+0x30>
 800b5d6:	f7ff fd31 	bl	800b03c <millis>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	4b08      	ldr	r3, [pc, #32]	; (800b600 <sensing_loop+0x38>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800b5e6:	d307      	bcc.n	800b5f8 <sensing_loop+0x30>
 800b5e8:	4806      	ldr	r0, [pc, #24]	; (800b604 <sensing_loop+0x3c>)
 800b5ea:	f7f5 ffff 	bl	80015ec <SPS30_update>
 800b5ee:	f7ff fd25 	bl	800b03c <millis>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <sensing_loop+0x38>)
 800b5f6:	601a      	str	r2, [r3, #0]
	#endif

	//SPS30
}
 800b5f8:	bf00      	nop
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20000d48 	.word	0x20000d48
 800b600:	20006474 	.word	0x20006474
 800b604:	200012a8 	.word	0x200012a8

0800b608 <steering_setup>:

    return brng;
}

static void steering_setup(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
		Common.target_yaw = DEFAULT_TARGET_YAW;
	#else
		#if STEERING_DEBUG
			println("warning: [STEERING] PID IS DISABLED!")
		#endif
		(*Common.log_print)("*WP00");
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <steering_setup+0x20>)
 800b60e:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b612:	4806      	ldr	r0, [pc, #24]	; (800b62c <steering_setup+0x24>)
 800b614:	4798      	blx	r3
		disableMotors();
 800b616:	f7f5 fd19 	bl	800104c <disableMotors>
		Common.motors_enabled = false;
 800b61a:	4b03      	ldr	r3, [pc, #12]	; (800b628 <steering_setup+0x20>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
		return false;
 800b622:	bf00      	nop
	#endif
}
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20000d48 	.word	0x20000d48
 800b62c:	08011860 	.word	0x08011860

0800b630 <steering_loop>:

static void steering_loop(void)
{
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
			Common.target_yaw = bearing(Common.gps.latitudeDegrees, Common.gps.longitudeDegrees, Common.target_lat, Common.target_lon); // target_yaw wyliczane z pozycji anteny
			lastYawUpdate = millis();
		}
	}
	#endif
}
 800b634:	bf00      	nop
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
	...

0800b640 <latchArms>:

uint8_t flight_safety;
bool armsOpen;

static void latchArms(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
	if (armsOpen)
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <latchArms+0x1c>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <latchArms+0x12>
	{	
		//TIM_->CCR_ = 900;
		armsOpen = false;
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <latchArms+0x1c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
	}
}
 800b652:	bf00      	nop
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	2000647c 	.word	0x2000647c

0800b660 <openArms>:

static void openArms(void)
{
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
	if (!armsOpen)
 800b664:	4b07      	ldr	r3, [pc, #28]	; (800b684 <openArms+0x24>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	f083 0301 	eor.w	r3, r3, #1
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <openArms+0x18>
	{
		//TIM_->CCR_ = 550;
		armsOpen = true;
 800b672:	4b04      	ldr	r3, [pc, #16]	; (800b684 <openArms+0x24>)
 800b674:	2201      	movs	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]
	}
}
 800b678:	bf00      	nop
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	2000647c 	.word	0x2000647c

0800b688 <terminator>:

static void terminator(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
	if (Common.operation_mode != 31)
 800b68e:	4b96      	ldr	r3, [pc, #600]	; (800b8e8 <terminator+0x260>)
 800b690:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800b694:	2b1f      	cmp	r3, #31
 800b696:	f000 8119 	beq.w	800b8cc <terminator+0x244>
	{
		uint8_t terminate = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	71fb      	strb	r3, [r7, #7]
		terminate |= ((Common.bmp.active) && (-(Common.bmp.alt_dx) > TERMINAL_ALT_DX)) << 1; // Falling too fast
 800b69e:	4b92      	ldr	r3, [pc, #584]	; (800b8e8 <terminator+0x260>)
 800b6a0:	7f1b      	ldrb	r3, [r3, #28]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00b      	beq.n	800b6be <terminator+0x36>
 800b6a6:	4b90      	ldr	r3, [pc, #576]	; (800b8e8 <terminator+0x260>)
 800b6a8:	edd3 7a06 	vldr	s15, [r3, #24]
 800b6ac:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800b6b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b8:	d501      	bpl.n	800b6be <terminator+0x36>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e000      	b.n	800b6c0 <terminator+0x38>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	005b      	lsls	r3, r3, #1
 800b6c2:	b25a      	sxtb	r2, r3
 800b6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	b25b      	sxtb	r3, r3
 800b6cc:	71fb      	strb	r3, [r7, #7]
		terminate |= (abs(Common.mpu.yaw_dx) > TERMINAL_YAW_DX) << 2;	// Spinning too fast 
 800b6ce:	4b86      	ldr	r3, [pc, #536]	; (800b8e8 <terminator+0x260>)
 800b6d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b6d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6d8:	ee17 3a90 	vmov	r3, s15
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfb8      	it	lt
 800b6e0:	425b      	neglt	r3, r3
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f4 ff1e 	bl	8000524 <__aeabi_i2d>
 800b6e8:	f04f 0200 	mov.w	r2, #0
 800b6ec:	4b7f      	ldr	r3, [pc, #508]	; (800b8ec <terminator+0x264>)
 800b6ee:	f7f5 fa13 	bl	8000b18 <__aeabi_dcmpgt>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <terminator+0x74>
 800b6f8:	2204      	movs	r2, #4
 800b6fa:	e000      	b.n	800b6fe <terminator+0x76>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b702:	4313      	orrs	r3, r2
 800b704:	b25b      	sxtb	r3, r3
 800b706:	71fb      	strb	r3, [r7, #7]
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 800b708:	4b77      	ldr	r3, [pc, #476]	; (800b8e8 <terminator+0x260>)
 800b70a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800b70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b712:	ee17 3a90 	vmov	r3, s15
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfb8      	it	lt
 800b71a:	425b      	neglt	r3, r3
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f4 ff01 	bl	8000524 <__aeabi_i2d>
 800b722:	f04f 0200 	mov.w	r2, #0
 800b726:	4b72      	ldr	r3, [pc, #456]	; (800b8f0 <terminator+0x268>)
 800b728:	f7f5 f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d114      	bne.n	800b75c <terminator+0xd4>
					  (abs(Common.mpu.roll) > TERMINAL_HOR)) << 3;		// In vertical position
 800b732:	4b6d      	ldr	r3, [pc, #436]	; (800b8e8 <terminator+0x260>)
 800b734:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b73c:	ee17 3a90 	vmov	r3, s15
 800b740:	2b00      	cmp	r3, #0
 800b742:	bfb8      	it	lt
 800b744:	425b      	neglt	r3, r3
 800b746:	4618      	mov	r0, r3
 800b748:	f7f4 feec 	bl	8000524 <__aeabi_i2d>
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	4b67      	ldr	r3, [pc, #412]	; (800b8f0 <terminator+0x268>)
 800b752:	f7f5 f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <terminator+0xd8>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <terminator+0xda>
 800b760:	2300      	movs	r3, #0
					  (abs(Common.mpu.roll) > TERMINAL_HOR)) << 3;		// In vertical position
 800b762:	00db      	lsls	r3, r3, #3
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 800b764:	b25a      	sxtb	r2, r3
 800b766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	b25b      	sxtb	r3, r3
 800b76e:	71fb      	strb	r3, [r7, #7]
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 800b770:	4b5d      	ldr	r3, [pc, #372]	; (800b8e8 <terminator+0x260>)
 800b772:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 800b776:	4b5c      	ldr	r3, [pc, #368]	; (800b8e8 <terminator+0x260>)
 800b778:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 800b77c:	edd3 7a00 	vldr	s15, [r3]
 800b780:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b788:	ee17 3a90 	vmov	r3, s15
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfb8      	it	lt
 800b790:	425b      	neglt	r3, r3
 800b792:	4618      	mov	r0, r3
 800b794:	f7f4 fec6 	bl	8000524 <__aeabi_i2d>
 800b798:	a351      	add	r3, pc, #324	; (adr r3, 800b8e0 <terminator+0x258>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f5 f99d 	bl	8000adc <__aeabi_dcmplt>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d11b      	bne.n	800b7e0 <terminator+0x158>
					  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 800b7a8:	4b4f      	ldr	r3, [pc, #316]	; (800b8e8 <terminator+0x260>)
 800b7aa:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 800b7ae:	4b4e      	ldr	r3, [pc, #312]	; (800b8e8 <terminator+0x260>)
 800b7b0:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 800b7b4:	edd3 7a00 	vldr	s15, [r3]
 800b7b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7c0:	ee17 3a90 	vmov	r3, s15
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfb8      	it	lt
 800b7c8:	425b      	neglt	r3, r3
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f4 feaa 	bl	8000524 <__aeabi_i2d>
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 800b7d0:	a343      	add	r3, pc, #268	; (adr r3, 800b8e0 <terminator+0x258>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f5 f981 	bl	8000adc <__aeabi_dcmplt>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <terminator+0x15c>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <terminator+0x15e>
 800b7e4:	2300      	movs	r3, #0
					  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 800b7e6:	011b      	lsls	r3, r3, #4
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 800b7e8:	b25a      	sxtb	r2, r3
 800b7ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	71fb      	strb	r3, [r7, #7]
		terminate |= (Common.bmp.altitude - Common.target_alt < KEEPOUT_ALT) << 5;	// Close to the ground
 800b7f4:	4b3c      	ldr	r3, [pc, #240]	; (800b8e8 <terminator+0x260>)
 800b7f6:	ed93 7a05 	vldr	s14, [r3, #20]
 800b7fa:	4b3b      	ldr	r3, [pc, #236]	; (800b8e8 <terminator+0x260>)
 800b7fc:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 800b800:	edd3 7a00 	vldr	s15, [r3]
 800b804:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b808:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800b80c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b814:	d501      	bpl.n	800b81a <terminator+0x192>
 800b816:	2220      	movs	r2, #32
 800b818:	e000      	b.n	800b81c <terminator+0x194>
 800b81a:	2200      	movs	r2, #0
 800b81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b820:	4313      	orrs	r3, r2
 800b822:	b25b      	sxtb	r3, r3
 800b824:	71fb      	strb	r3, [r7, #7]

		if (Common.operation_mode == 3) flight_safety = FLIGHT_START_THRE;
 800b826:	4b30      	ldr	r3, [pc, #192]	; (800b8e8 <terminator+0x260>)
 800b828:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d103      	bne.n	800b838 <terminator+0x1b0>
 800b830:	4b30      	ldr	r3, [pc, #192]	; (800b8f4 <terminator+0x26c>)
 800b832:	2210      	movs	r2, #16
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	e01d      	b.n	800b874 <terminator+0x1ec>
		else if (terminate > 0)
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d01a      	beq.n	800b874 <terminator+0x1ec>
		{
			Common.operation_mode = 31;
 800b83e:	4b2a      	ldr	r3, [pc, #168]	; (800b8e8 <terminator+0x260>)
 800b840:	221f      	movs	r2, #31
 800b842:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
			#if RUN_DEBUG
				println("warning: [RUN] Flight terminated! Code: 0x%x", terminate);
			#endif
			(*Common.log_print)("*T0x%x", terminate);
 800b846:	4b28      	ldr	r3, [pc, #160]	; (800b8e8 <terminator+0x260>)
 800b848:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800b84c:	79fa      	ldrb	r2, [r7, #7]
 800b84e:	4611      	mov	r1, r2
 800b850:	4829      	ldr	r0, [pc, #164]	; (800b8f8 <terminator+0x270>)
 800b852:	4798      	blx	r3
			flight_safety = 0;
 800b854:	4b27      	ldr	r3, [pc, #156]	; (800b8f4 <terminator+0x26c>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
			Common.servo_enabled = false;
 800b85a:	4b23      	ldr	r3, [pc, #140]	; (800b8e8 <terminator+0x260>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
			Common.motors_enabled = false;
 800b862:	4b21      	ldr	r3, [pc, #132]	; (800b8e8 <terminator+0x260>)
 800b864:	2200      	movs	r2, #0
 800b866:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
			latchArms();
 800b86a:	f7ff fee9 	bl	800b640 <latchArms>
			disableMotors();
 800b86e:	f7f5 fbed 	bl	800104c <disableMotors>
			return;
 800b872:	e02f      	b.n	800b8d4 <terminator+0x24c>
		}

		if (flight_safety >= FLIGHT_START_THRE)
 800b874:	4b1f      	ldr	r3, [pc, #124]	; (800b8f4 <terminator+0x26c>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b0f      	cmp	r3, #15
 800b87a:	d920      	bls.n	800b8be <terminator+0x236>
		{
			if (Common.servo_enabled || Common.operation_mode != 3) { openArms(); Common.servo_enabled = true; }
 800b87c:	4b1a      	ldr	r3, [pc, #104]	; (800b8e8 <terminator+0x260>)
 800b87e:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 800b882:	2b00      	cmp	r3, #0
 800b884:	d104      	bne.n	800b890 <terminator+0x208>
 800b886:	4b18      	ldr	r3, [pc, #96]	; (800b8e8 <terminator+0x260>)
 800b888:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d005      	beq.n	800b89c <terminator+0x214>
 800b890:	f7ff fee6 	bl	800b660 <openArms>
 800b894:	4b14      	ldr	r3, [pc, #80]	; (800b8e8 <terminator+0x260>)
 800b896:	2201      	movs	r2, #1
 800b898:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
			if (Common.motors_enabled || Common.operation_mode != 3) { enableMotors(); Common.motors_enabled = true; }
 800b89c:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <terminator+0x260>)
 800b89e:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <terminator+0x228>
 800b8a6:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <terminator+0x260>)
 800b8a8:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d011      	beq.n	800b8d4 <terminator+0x24c>
 800b8b0:	f7f5 fb8e 	bl	8000fd0 <enableMotors>
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <terminator+0x260>)
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 800b8bc:	e00a      	b.n	800b8d4 <terminator+0x24c>
		}
		else flight_safety++;
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <terminator+0x26c>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <terminator+0x26c>)
 800b8c8:	701a      	strb	r2, [r3, #0]
 800b8ca:	e003      	b.n	800b8d4 <terminator+0x24c>

	}
	else
	{
		latchArms();
 800b8cc:	f7ff feb8 	bl	800b640 <latchArms>
		disableMotors();
 800b8d0:	f7f5 fbbc 	bl	800104c <disableMotors>
	}
}
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	eb1c432d 	.word	0xeb1c432d
 800b8e4:	3f1a36e2 	.word	0x3f1a36e2
 800b8e8:	20000d48 	.word	0x20000d48
 800b8ec:	40440000 	.word	0x40440000
 800b8f0:	40468000 	.word	0x40468000
 800b8f4:	2000647d 	.word	0x2000647d
 800b8f8:	08011868 	.word	0x08011868

0800b8fc <setup>:

static void setup(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
	//writePin(LEDD, HIGH);	while (readPin(BTN_1) == HIGH);	writePin(LEDD, LOW);

	delay(2000);
 800b900:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b904:	f7f6 f806 	bl	8001914 <HAL_Delay>

	armsOpen = true;
 800b908:	4b0c      	ldr	r3, [pc, #48]	; (800b93c <setup+0x40>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	701a      	strb	r2, [r3, #0]
	flight_safety = 0;
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <setup+0x44>)
 800b910:	2200      	movs	r2, #0
 800b912:	701a      	strb	r2, [r3, #0]
	latchArms();
 800b914:	f7ff fe94 	bl	800b640 <latchArms>
	Common.servo_enabled = false;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <setup+0x48>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
	Common.motors_enabled = false;
 800b920:	4b08      	ldr	r3, [pc, #32]	; (800b944 <setup+0x48>)
 800b922:	2200      	movs	r2, #0
 800b924:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8

	loging_setup();
 800b928:	f7ff fc02 	bl	800b130 <loging_setup>
	
	duplex_setup();
 800b92c:	f7ff fd46 	bl	800b3bc <duplex_setup>

	sensing_setup();
 800b930:	f7ff fd66 	bl	800b400 <sensing_setup>

	steering_setup();
 800b934:	f7ff fe68 	bl	800b608 <steering_setup>

	//writePin(LEDD, HIGH);	while (readPin(BTN_1) == HIGH);	writePin(LEDD, LOW);
}
 800b938:	bf00      	nop
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	2000647c 	.word	0x2000647c
 800b940:	2000647d 	.word	0x2000647d
 800b944:	20000d48 	.word	0x20000d48

0800b948 <loop>:

static void loop(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
	sensing_loop();
 800b94c:	f7ff fe3c 	bl	800b5c8 <sensing_loop>

	duplex_loop();
 800b950:	f7ff fd4e 	bl	800b3f0 <duplex_loop>

	terminator();
 800b954:	f7ff fe98 	bl	800b688 <terminator>

	steering_loop();
 800b958:	f7ff fe6a 	bl	800b630 <steering_loop>

	loging_loop();
 800b95c:	f7ff fbfa 	bl	800b154 <loging_loop>
}
 800b960:	bf00      	nop
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	//if (huart == Common.gps.uart)
	//{
		HAL_UART_Receive_IT(huart, Common.gps.uartBuffer, 1);
 800b96c:	2201      	movs	r2, #1
 800b96e:	4907      	ldr	r1, [pc, #28]	; (800b98c <HAL_UART_RxCpltCallback+0x28>)
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7fb f9bf 	bl	8006cf4 <HAL_UART_Receive_IT>
		GPS_read(&Common.gps);
 800b976:	4806      	ldr	r0, [pc, #24]	; (800b990 <HAL_UART_RxCpltCallback+0x2c>)
 800b978:	f7f5 fb9c 	bl	80010b4 <GPS_read>
		togglePin(LEDA);
 800b97c:	2101      	movs	r1, #1
 800b97e:	4805      	ldr	r0, [pc, #20]	; (800b994 <HAL_UART_RxCpltCallback+0x30>)
 800b980:	f7f6 fe5f 	bl	8002642 <HAL_GPIO_TogglePin>
	//}
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	2000105b 	.word	0x2000105b
 800b990:	20000e3c 	.word	0x20000e3c
 800b994:	40020800 	.word	0x40020800

0800b998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b99c:	f7f5 ff48 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b9a0:	f000 f84a 	bl	800ba38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b9a4:	f000 fb3c 	bl	800c020 <MX_GPIO_Init>
  MX_DMA_Init();
 800b9a8:	f000 fb12 	bl	800bfd0 <MX_DMA_Init>
  MX_I2C1_Init();
 800b9ac:	f000 f8c6 	bl	800bb3c <MX_I2C1_Init>
  MX_RTC_Init();
 800b9b0:	f000 f920 	bl	800bbf4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800b9b4:	f000 f944 	bl	800bc40 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800b9b8:	f000 f962 	bl	800bc80 <MX_SPI1_Init>
  MX_TIM2_Init();
 800b9bc:	f000 f996 	bl	800bcec <MX_TIM2_Init>
  MX_TIM3_Init();
 800b9c0:	f000 f9e2 	bl	800bd88 <MX_TIM3_Init>
  MX_TIM5_Init();
 800b9c4:	f000 fa62 	bl	800be8c <MX_TIM5_Init>
  MX_FATFS_Init();
 800b9c8:	f7ff fb06 	bl	800afd8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800b9cc:	f001 fa34 	bl	800ce38 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800b9d0:	f000 faaa 	bl	800bf28 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800b9d4:	f000 f8e0 	bl	800bb98 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800b9d8:	f000 fad0 	bl	800bf7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800b9dc:	4813      	ldr	r0, [pc, #76]	; (800ba2c <main+0x94>)
 800b9de:	f7fa fa3b 	bl	8005e58 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	4812      	ldr	r0, [pc, #72]	; (800ba30 <main+0x98>)
 800b9e8:	f7f6 fe12 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	480f      	ldr	r0, [pc, #60]	; (800ba30 <main+0x98>)
 800b9f2:	f7f6 fe0d 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2104      	movs	r1, #4
 800b9fa:	480d      	ldr	r0, [pc, #52]	; (800ba30 <main+0x98>)
 800b9fc:	f7f6 fe08 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800ba00:	2200      	movs	r2, #0
 800ba02:	2108      	movs	r1, #8
 800ba04:	480a      	ldr	r0, [pc, #40]	; (800ba30 <main+0x98>)
 800ba06:	f7f6 fe03 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba10:	4808      	ldr	r0, [pc, #32]	; (800ba34 <main+0x9c>)
 800ba12:	f7f6 fdfd 	bl	8002610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800ba16:	2200      	movs	r2, #0
 800ba18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <main+0x9c>)
 800ba1e:	f7f6 fdf7 	bl	8002610 <HAL_GPIO_WritePin>

	 // __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	 // HAL_NVIC_EnableIRQ(USART1_IRQn);

	// Execute code
	setup();
 800ba22:	f7ff ff6b 	bl	800b8fc <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800ba26:	f7ff ff8f 	bl	800b948 <loop>
 800ba2a:	e7fc      	b.n	800ba26 <main+0x8e>
 800ba2c:	20008814 	.word	0x20008814
 800ba30:	40020800 	.word	0x40020800
 800ba34:	40020400 	.word	0x40020400

0800ba38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b098      	sub	sp, #96	; 0x60
 800ba3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba42:	2230      	movs	r2, #48	; 0x30
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 ff8f 	bl	800d96a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba4c:	f107 031c 	add.w	r3, r7, #28
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	605a      	str	r2, [r3, #4]
 800ba56:	609a      	str	r2, [r3, #8]
 800ba58:	60da      	str	r2, [r3, #12]
 800ba5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ba5c:	f107 030c 	add.w	r3, r7, #12
 800ba60:	2200      	movs	r2, #0
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	605a      	str	r2, [r3, #4]
 800ba66:	609a      	str	r2, [r3, #8]
 800ba68:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60bb      	str	r3, [r7, #8]
 800ba6e:	4b31      	ldr	r3, [pc, #196]	; (800bb34 <SystemClock_Config+0xfc>)
 800ba70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba72:	4a30      	ldr	r2, [pc, #192]	; (800bb34 <SystemClock_Config+0xfc>)
 800ba74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba78:	6413      	str	r3, [r2, #64]	; 0x40
 800ba7a:	4b2e      	ldr	r3, [pc, #184]	; (800bb34 <SystemClock_Config+0xfc>)
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba82:	60bb      	str	r3, [r7, #8]
 800ba84:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba86:	2300      	movs	r3, #0
 800ba88:	607b      	str	r3, [r7, #4]
 800ba8a:	4b2b      	ldr	r3, [pc, #172]	; (800bb38 <SystemClock_Config+0x100>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a2a      	ldr	r2, [pc, #168]	; (800bb38 <SystemClock_Config+0x100>)
 800ba90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	4b28      	ldr	r3, [pc, #160]	; (800bb38 <SystemClock_Config+0x100>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba9e:	607b      	str	r3, [r7, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800baa2:	2305      	movs	r3, #5
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800baa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800baaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800baac:	2301      	movs	r3, #1
 800baae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bab0:	2302      	movs	r3, #2
 800bab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bab4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800baba:	2306      	movs	r3, #6
 800babc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800babe:	23a8      	movs	r3, #168	; 0xa8
 800bac0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bac2:	2302      	movs	r3, #2
 800bac4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800bac6:	2307      	movs	r3, #7
 800bac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800baca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bace:	4618      	mov	r0, r3
 800bad0:	f7f8 f884 	bl	8003bdc <HAL_RCC_OscConfig>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800bada:	f000 fb93 	bl	800c204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bade:	230f      	movs	r3, #15
 800bae0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bae2:	2302      	movs	r3, #2
 800bae4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bae6:	2300      	movs	r3, #0
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800baea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800baee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800baf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baf4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800baf6:	f107 031c 	add.w	r3, r7, #28
 800bafa:	2105      	movs	r1, #5
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f8 faaf 	bl	8004060 <HAL_RCC_ClockConfig>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800bb08:	f000 fb7c 	bl	800c204 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800bb10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb14:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb16:	f107 030c 	add.w	r3, r7, #12
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7f8 fc68 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800bb26:	f000 fb6d 	bl	800c204 <Error_Handler>
  }
}
 800bb2a:	bf00      	nop
 800bb2c:	3760      	adds	r7, #96	; 0x60
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	40023800 	.word	0x40023800
 800bb38:	40007000 	.word	0x40007000

0800bb3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bb40:	4b12      	ldr	r3, [pc, #72]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb42:	4a13      	ldr	r2, [pc, #76]	; (800bb90 <MX_I2C1_Init+0x54>)
 800bb44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800bb46:	4b11      	ldr	r3, [pc, #68]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb48:	4a12      	ldr	r2, [pc, #72]	; (800bb94 <MX_I2C1_Init+0x58>)
 800bb4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bb4c:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800bb52:	4b0e      	ldr	r3, [pc, #56]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bb72:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bb78:	4804      	ldr	r0, [pc, #16]	; (800bb8c <MX_I2C1_Init+0x50>)
 800bb7a:	f7f6 fd7d 	bl	8002678 <HAL_I2C_Init>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800bb84:	f000 fb3e 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bb88:	bf00      	nop
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	20008550 	.word	0x20008550
 800bb90:	40005400 	.word	0x40005400
 800bb94:	00061a80 	.word	0x00061a80

0800bb98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bb9c:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bb9e:	4a13      	ldr	r2, [pc, #76]	; (800bbec <MX_I2C2_Init+0x54>)
 800bba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800bba2:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bba4:	4a12      	ldr	r2, [pc, #72]	; (800bbf0 <MX_I2C2_Init+0x58>)
 800bba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800bbae:	4b0e      	ldr	r3, [pc, #56]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bbb4:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bbba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bbc8:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bbd4:	4804      	ldr	r0, [pc, #16]	; (800bbe8 <MX_I2C2_Init+0x50>)
 800bbd6:	f7f6 fd4f 	bl	8002678 <HAL_I2C_Init>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800bbe0:	f000 fb10 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bbe4:	bf00      	nop
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	200085a4 	.word	0x200085a4
 800bbec:	40005800 	.word	0x40005800
 800bbf0:	000186a0 	.word	0x000186a0

0800bbf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <MX_RTC_Init+0x44>)
 800bbfa:	4a10      	ldr	r2, [pc, #64]	; (800bc3c <MX_RTC_Init+0x48>)
 800bbfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800bbfe:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc06:	227f      	movs	r2, #127	; 0x7f
 800bc08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800bc0a:	4b0b      	ldr	r3, [pc, #44]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc0c:	22ff      	movs	r2, #255	; 0xff
 800bc0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bc10:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bc16:	4b08      	ldr	r3, [pc, #32]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bc22:	4805      	ldr	r0, [pc, #20]	; (800bc38 <MX_RTC_Init+0x44>)
 800bc24:	f7f8 fcc6 	bl	80045b4 <HAL_RTC_Init>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800bc2e:	f000 fae9 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800bc32:	bf00      	nop
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	200086b8 	.word	0x200086b8
 800bc3c:	40002800 	.word	0x40002800

0800bc40 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800bc44:	4b0c      	ldr	r3, [pc, #48]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc46:	4a0d      	ldr	r2, [pc, #52]	; (800bc7c <MX_SDIO_SD_Init+0x3c>)
 800bc48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800bc4a:	4b0b      	ldr	r3, [pc, #44]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800bc50:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bc56:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800bc5c:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bc62:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800bc68:	4b03      	ldr	r3, [pc, #12]	; (800bc78 <MX_SDIO_SD_Init+0x38>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800bc6e:	bf00      	nop
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	20008738 	.word	0x20008738
 800bc7c:	40012c00 	.word	0x40012c00

0800bc80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800bc84:	4b17      	ldr	r3, [pc, #92]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bc86:	4a18      	ldr	r2, [pc, #96]	; (800bce8 <MX_SPI1_Init+0x68>)
 800bc88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bc8a:	4b16      	ldr	r3, [pc, #88]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bc8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bc90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800bc92:	4b14      	ldr	r3, [pc, #80]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bc98:	4b12      	ldr	r3, [pc, #72]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc9e:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bca4:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcb4:	2218      	movs	r2, #24
 800bcb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcc4:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800bcca:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bccc:	220a      	movs	r2, #10
 800bcce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800bcd0:	4804      	ldr	r0, [pc, #16]	; (800bce4 <MX_SPI1_Init+0x64>)
 800bcd2:	f7fa f832 	bl	8005d3a <HAL_SPI_Init>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800bcdc:	f000 fa92 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	200087bc 	.word	0x200087bc
 800bce8:	40013000 	.word	0x40013000

0800bcec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	605a      	str	r2, [r3, #4]
 800bcfc:	609a      	str	r2, [r3, #8]
 800bcfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd00:	463b      	mov	r3, r7
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bd08:	4b1d      	ldr	r3, [pc, #116]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bd0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800bd10:	4b1b      	ldr	r3, [pc, #108]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd12:	2253      	movs	r2, #83	; 0x53
 800bd14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bd16:	4b1a      	ldr	r3, [pc, #104]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800bd1c:	4b18      	ldr	r3, [pc, #96]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd1e:	4a19      	ldr	r2, [pc, #100]	; (800bd84 <MX_TIM2_Init+0x98>)
 800bd20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd22:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd28:	4b15      	ldr	r3, [pc, #84]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bd2e:	4814      	ldr	r0, [pc, #80]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd30:	f7fa f867 	bl	8005e02 <HAL_TIM_Base_Init>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800bd3a:	f000 fa63 	bl	800c204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bd3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4619      	mov	r1, r3
 800bd4a:	480d      	ldr	r0, [pc, #52]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd4c:	f7fa fa3a 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800bd56:	f000 fa55 	bl	800c204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bd62:	463b      	mov	r3, r7
 800bd64:	4619      	mov	r1, r3
 800bd66:	4806      	ldr	r0, [pc, #24]	; (800bd80 <MX_TIM2_Init+0x94>)
 800bd68:	f7fa fdf3 	bl	8006952 <HAL_TIMEx_MasterConfigSynchronization>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800bd72:	f000 fa47 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800bd76:	bf00      	nop
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20008814 	.word	0x20008814
 800bd84:	fa56ea00 	.word	0xfa56ea00

0800bd88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08e      	sub	sp, #56	; 0x38
 800bd8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bd8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	605a      	str	r2, [r3, #4]
 800bd98:	609a      	str	r2, [r3, #8]
 800bd9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd9c:	f107 0320 	add.w	r3, r7, #32
 800bda0:	2200      	movs	r2, #0
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bda6:	1d3b      	adds	r3, r7, #4
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	605a      	str	r2, [r3, #4]
 800bdae:	609a      	str	r2, [r3, #8]
 800bdb0:	60da      	str	r2, [r3, #12]
 800bdb2:	611a      	str	r2, [r3, #16]
 800bdb4:	615a      	str	r2, [r3, #20]
 800bdb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800bdb8:	4b32      	ldr	r3, [pc, #200]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdba:	4a33      	ldr	r2, [pc, #204]	; (800be88 <MX_TIM3_Init+0x100>)
 800bdbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800bdbe:	4b31      	ldr	r3, [pc, #196]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bdc4:	4b2f      	ldr	r3, [pc, #188]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800bdca:	4b2e      	ldr	r3, [pc, #184]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdcc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bdd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bdd2:	4b2c      	ldr	r3, [pc, #176]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bdd8:	4b2a      	ldr	r3, [pc, #168]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800bdde:	4829      	ldr	r0, [pc, #164]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bde0:	f7fa f80f 	bl	8005e02 <HAL_TIM_Base_Init>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800bdea:	f000 fa0b 	bl	800c204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bdee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800bdf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	4822      	ldr	r0, [pc, #136]	; (800be84 <MX_TIM3_Init+0xfc>)
 800bdfc:	f7fa f9e2 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800be06:	f000 f9fd 	bl	800c204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800be0a:	481e      	ldr	r0, [pc, #120]	; (800be84 <MX_TIM3_Init+0xfc>)
 800be0c:	f7fa f848 	bl	8005ea0 <HAL_TIM_PWM_Init>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800be16:	f000 f9f5 	bl	800c204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be1a:	2300      	movs	r3, #0
 800be1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be1e:	2300      	movs	r3, #0
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800be22:	f107 0320 	add.w	r3, r7, #32
 800be26:	4619      	mov	r1, r3
 800be28:	4816      	ldr	r0, [pc, #88]	; (800be84 <MX_TIM3_Init+0xfc>)
 800be2a:	f7fa fd92 	bl	8006952 <HAL_TIMEx_MasterConfigSynchronization>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800be34:	f000 f9e6 	bl	800c204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800be38:	2360      	movs	r3, #96	; 0x60
 800be3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800be40:	2302      	movs	r3, #2
 800be42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800be44:	2300      	movs	r3, #0
 800be46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800be48:	1d3b      	adds	r3, r7, #4
 800be4a:	2204      	movs	r2, #4
 800be4c:	4619      	mov	r1, r3
 800be4e:	480d      	ldr	r0, [pc, #52]	; (800be84 <MX_TIM3_Init+0xfc>)
 800be50:	f7fa f8f2 	bl	8006038 <HAL_TIM_PWM_ConfigChannel>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800be5a:	f000 f9d3 	bl	800c204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800be5e:	1d3b      	adds	r3, r7, #4
 800be60:	2208      	movs	r2, #8
 800be62:	4619      	mov	r1, r3
 800be64:	4807      	ldr	r0, [pc, #28]	; (800be84 <MX_TIM3_Init+0xfc>)
 800be66:	f7fa f8e7 	bl	8006038 <HAL_TIM_PWM_ConfigChannel>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800be70:	f000 f9c8 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800be74:	4803      	ldr	r0, [pc, #12]	; (800be84 <MX_TIM3_Init+0xfc>)
 800be76:	f000 fe3f 	bl	800caf8 <HAL_TIM_MspPostInit>

}
 800be7a:	bf00      	nop
 800be7c:	3738      	adds	r7, #56	; 0x38
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20008638 	.word	0x20008638
 800be88:	40000400 	.word	0x40000400

0800be8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be92:	f107 0308 	add.w	r3, r7, #8
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	605a      	str	r2, [r3, #4]
 800be9c:	609a      	str	r2, [r3, #8]
 800be9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bea0:	463b      	mov	r3, r7
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800bea8:	4b1d      	ldr	r3, [pc, #116]	; (800bf20 <MX_TIM5_Init+0x94>)
 800beaa:	4a1e      	ldr	r2, [pc, #120]	; (800bf24 <MX_TIM5_Init+0x98>)
 800beac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800beae:	4b1c      	ldr	r3, [pc, #112]	; (800bf20 <MX_TIM5_Init+0x94>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800beb4:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <MX_TIM5_Init+0x94>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800beba:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <MX_TIM5_Init+0x94>)
 800bebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bec0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bec2:	4b17      	ldr	r3, [pc, #92]	; (800bf20 <MX_TIM5_Init+0x94>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <MX_TIM5_Init+0x94>)
 800beca:	2200      	movs	r2, #0
 800becc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800bece:	4814      	ldr	r0, [pc, #80]	; (800bf20 <MX_TIM5_Init+0x94>)
 800bed0:	f7f9 ff97 	bl	8005e02 <HAL_TIM_Base_Init>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800beda:	f000 f993 	bl	800c204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800bee4:	f107 0308 	add.w	r3, r7, #8
 800bee8:	4619      	mov	r1, r3
 800beea:	480d      	ldr	r0, [pc, #52]	; (800bf20 <MX_TIM5_Init+0x94>)
 800beec:	f7fa f96a 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800bef6:	f000 f985 	bl	800c204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800befa:	2300      	movs	r3, #0
 800befc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800bf02:	463b      	mov	r3, r7
 800bf04:	4619      	mov	r1, r3
 800bf06:	4806      	ldr	r0, [pc, #24]	; (800bf20 <MX_TIM5_Init+0x94>)
 800bf08:	f7fa fd23 	bl	8006952 <HAL_TIMEx_MasterConfigSynchronization>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800bf12:	f000 f977 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800bf16:	bf00      	nop
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	200085f8 	.word	0x200085f8
 800bf24:	40000c00 	.word	0x40000c00

0800bf28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800bf2c:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf2e:	4a12      	ldr	r2, [pc, #72]	; (800bf78 <MX_USART1_UART_Init+0x50>)
 800bf30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800bf32:	4b10      	ldr	r3, [pc, #64]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800bf38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bf3a:	4b0e      	ldr	r3, [pc, #56]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bf40:	4b0c      	ldr	r3, [pc, #48]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bf46:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bf4c:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf4e:	220c      	movs	r2, #12
 800bf50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bf5e:	4805      	ldr	r0, [pc, #20]	; (800bf74 <MX_USART1_UART_Init+0x4c>)
 800bf60:	f7fa fd3c 	bl	80069dc <HAL_UART_Init>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bf6a:	f000 f94b 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800bf6e:	bf00      	nop
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20008678 	.word	0x20008678
 800bf78:	40011000 	.word	0x40011000

0800bf7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800bf80:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bf82:	4a12      	ldr	r2, [pc, #72]	; (800bfcc <MX_USART2_UART_Init+0x50>)
 800bf84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800bf86:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bf88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bf8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bf8e:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bf94:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bf9a:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bfa2:	220c      	movs	r2, #12
 800bfa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bfa6:	4b08      	ldr	r3, [pc, #32]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bfac:	4b06      	ldr	r3, [pc, #24]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bfb2:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <MX_USART2_UART_Init+0x4c>)
 800bfb4:	f7fa fd12 	bl	80069dc <HAL_UART_Init>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800bfbe:	f000 f921 	bl	800c204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800bfc2:	bf00      	nop
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20008854 	.word	0x20008854
 800bfcc:	40004400 	.word	0x40004400

0800bfd0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	607b      	str	r3, [r7, #4]
 800bfda:	4b10      	ldr	r3, [pc, #64]	; (800c01c <MX_DMA_Init+0x4c>)
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	4a0f      	ldr	r2, [pc, #60]	; (800c01c <MX_DMA_Init+0x4c>)
 800bfe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bfe4:	6313      	str	r3, [r2, #48]	; 0x30
 800bfe6:	4b0d      	ldr	r3, [pc, #52]	; (800c01c <MX_DMA_Init+0x4c>)
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfee:	607b      	str	r3, [r7, #4]
 800bff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800bff2:	2200      	movs	r2, #0
 800bff4:	2100      	movs	r1, #0
 800bff6:	203b      	movs	r0, #59	; 0x3b
 800bff8:	f7f5 fd89 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800bffc:	203b      	movs	r0, #59	; 0x3b
 800bffe:	f7f5 fda2 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	2045      	movs	r0, #69	; 0x45
 800c008:	f7f5 fd81 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c00c:	2045      	movs	r0, #69	; 0x45
 800c00e:	f7f5 fd9a 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	40023800 	.word	0x40023800

0800c020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08a      	sub	sp, #40	; 0x28
 800c024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c026:	f107 0314 	add.w	r3, r7, #20
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	605a      	str	r2, [r3, #4]
 800c030:	609a      	str	r2, [r3, #8]
 800c032:	60da      	str	r2, [r3, #12]
 800c034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c036:	2300      	movs	r3, #0
 800c038:	613b      	str	r3, [r7, #16]
 800c03a:	4b64      	ldr	r3, [pc, #400]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	4a63      	ldr	r2, [pc, #396]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c040:	f043 0304 	orr.w	r3, r3, #4
 800c044:	6313      	str	r3, [r2, #48]	; 0x30
 800c046:	4b61      	ldr	r3, [pc, #388]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	f003 0304 	and.w	r3, r3, #4
 800c04e:	613b      	str	r3, [r7, #16]
 800c050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	4b5d      	ldr	r3, [pc, #372]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05a:	4a5c      	ldr	r2, [pc, #368]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c060:	6313      	str	r3, [r2, #48]	; 0x30
 800c062:	4b5a      	ldr	r3, [pc, #360]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c06e:	2300      	movs	r3, #0
 800c070:	60bb      	str	r3, [r7, #8]
 800c072:	4b56      	ldr	r3, [pc, #344]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	4a55      	ldr	r2, [pc, #340]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	6313      	str	r3, [r2, #48]	; 0x30
 800c07e:	4b53      	ldr	r3, [pc, #332]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	60bb      	str	r3, [r7, #8]
 800c088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c08a:	2300      	movs	r3, #0
 800c08c:	607b      	str	r3, [r7, #4]
 800c08e:	4b4f      	ldr	r3, [pc, #316]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c092:	4a4e      	ldr	r2, [pc, #312]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	6313      	str	r3, [r2, #48]	; 0x30
 800c09a:	4b4c      	ldr	r3, [pc, #304]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	607b      	str	r3, [r7, #4]
 800c0a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	603b      	str	r3, [r7, #0]
 800c0aa:	4b48      	ldr	r3, [pc, #288]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	4a47      	ldr	r2, [pc, #284]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c0b0:	f043 0308 	orr.w	r3, r3, #8
 800c0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c0b6:	4b45      	ldr	r3, [pc, #276]	; (800c1cc <MX_GPIO_Init+0x1ac>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ba:	f003 0308 	and.w	r3, r3, #8
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LR_NSS_Pin|LEDA_Pin|LEDB_Pin|LEDC_Pin 
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f242 010f 	movw	r1, #8207	; 0x200f
 800c0c8:	4841      	ldr	r0, [pc, #260]	; (800c1d0 <MX_GPIO_Init+0x1b0>)
 800c0ca:	f7f6 faa1 	bl	8002610 <HAL_GPIO_WritePin>
                          |LEDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_STBY_Pin|PH_R_Pin|PH_L_Pin, GPIO_PIN_RESET);
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f245 0104 	movw	r1, #20484	; 0x5004
 800c0d4:	483f      	ldr	r0, [pc, #252]	; (800c1d4 <MX_GPIO_Init+0x1b4>)
 800c0d6:	f7f6 fa9b 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_RESET_GPIO_Port, LR_RESET_Pin, GPIO_PIN_RESET);
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0e0:	483d      	ldr	r0, [pc, #244]	; (800c1d8 <MX_GPIO_Init+0x1b8>)
 800c0e2:	f7f6 fa95 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800c0e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800c0f8:	f107 0314 	add.w	r3, r7, #20
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4834      	ldr	r0, [pc, #208]	; (800c1d0 <MX_GPIO_Init+0x1b0>)
 800c100:	f7f6 f8d4 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 800c104:	230f      	movs	r3, #15
 800c106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c108:	2301      	movs	r3, #1
 800c10a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c110:	2300      	movs	r3, #0
 800c112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c114:	f107 0314 	add.w	r3, r7, #20
 800c118:	4619      	mov	r1, r3
 800c11a:	482d      	ldr	r0, [pc, #180]	; (800c1d0 <MX_GPIO_Init+0x1b0>)
 800c11c:	f7f6 f8c6 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_DIO1_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_DIO1_Pin;
 800c120:	2330      	movs	r3, #48	; 0x30
 800c122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c124:	2300      	movs	r3, #0
 800c126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c128:	2302      	movs	r3, #2
 800c12a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c12c:	f107 0314 	add.w	r3, r7, #20
 800c130:	4619      	mov	r1, r3
 800c132:	4827      	ldr	r0, [pc, #156]	; (800c1d0 <MX_GPIO_Init+0x1b0>)
 800c134:	f7f6 f8ba 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_STBY_Pin */
  GPIO_InitStruct.Pin = MOT_STBY_Pin;
 800c138:	2304      	movs	r3, #4
 800c13a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c13c:	2301      	movs	r3, #1
 800c13e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c140:	2300      	movs	r3, #0
 800c142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c144:	2300      	movs	r3, #0
 800c146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT_STBY_GPIO_Port, &GPIO_InitStruct);
 800c148:	f107 0314 	add.w	r3, r7, #20
 800c14c:	4619      	mov	r1, r3
 800c14e:	4821      	ldr	r0, [pc, #132]	; (800c1d4 <MX_GPIO_Init+0x1b4>)
 800c150:	f7f6 f8ac 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_R_Pin PH_L_Pin */
  GPIO_InitStruct.Pin = PH_R_Pin|PH_L_Pin;
 800c154:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800c158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c15a:	2301      	movs	r3, #1
 800c15c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c15e:	2302      	movs	r3, #2
 800c160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c162:	2300      	movs	r3, #0
 800c164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c166:	f107 0314 	add.w	r3, r7, #20
 800c16a:	4619      	mov	r1, r3
 800c16c:	4819      	ldr	r0, [pc, #100]	; (800c1d4 <MX_GPIO_Init+0x1b4>)
 800c16e:	f7f6 f89d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 800c172:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c178:	2300      	movs	r3, #0
 800c17a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c17c:	2301      	movs	r3, #1
 800c17e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 800c180:	f107 0314 	add.w	r3, r7, #20
 800c184:	4619      	mov	r1, r3
 800c186:	4814      	ldr	r0, [pc, #80]	; (800c1d8 <MX_GPIO_Init+0x1b8>)
 800c188:	f7f6 f890 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800c18c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c192:	2301      	movs	r3, #1
 800c194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c196:	2302      	movs	r3, #2
 800c198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c19a:	2300      	movs	r3, #0
 800c19c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800c19e:	f107 0314 	add.w	r3, r7, #20
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	480c      	ldr	r0, [pc, #48]	; (800c1d8 <MX_GPIO_Init+0x1b8>)
 800c1a6:	f7f6 f881 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 800c1aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1b8:	f107 0314 	add.w	r3, r7, #20
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4805      	ldr	r0, [pc, #20]	; (800c1d4 <MX_GPIO_Init+0x1b4>)
 800c1c0:	f7f6 f874 	bl	80022ac <HAL_GPIO_Init>

}
 800c1c4:	bf00      	nop
 800c1c6:	3728      	adds	r7, #40	; 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	40023800 	.word	0x40023800
 800c1d0:	40020800 	.word	0x40020800
 800c1d4:	40020400 	.word	0x40020400
 800c1d8:	40020000 	.word	0x40020000

0800c1dc <Get_UART2_Instance>:

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
I2C_HandleTypeDef* Get_I2C2_Instance(void) { return &hi2c2; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART1_Instance(void) { return &huart1; }
UART_HandleTypeDef* Get_UART2_Instance(void) { return &huart2; }
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	4b02      	ldr	r3, [pc, #8]	; (800c1ec <Get_UART2_Instance+0x10>)
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	20008854 	.word	0x20008854

0800c1f0 <Get_TIM3_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	4b02      	ldr	r3, [pc, #8]	; (800c200 <Get_TIM3_Instance+0x10>)
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	20008638 	.word	0x20008638

0800c204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c208:	bf00      	nop
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c21a:	f7f5 fb6f 	bl	80018fc <HAL_GetTick>
 800c21e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c220:	e006      	b.n	800c230 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c222:	f7fe fe83 	bl	800af2c <BSP_SD_GetCardState>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e009      	b.n	800c244 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c230:	f7f5 fb64 	bl	80018fc <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d8f0      	bhi.n	800c222 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c240:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c256:	4b0b      	ldr	r3, [pc, #44]	; (800c284 <SD_CheckStatus+0x38>)
 800c258:	2201      	movs	r2, #1
 800c25a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c25c:	f7fe fe66 	bl	800af2c <BSP_SD_GetCardState>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d107      	bne.n	800c276 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c266:	4b07      	ldr	r3, [pc, #28]	; (800c284 <SD_CheckStatus+0x38>)
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f023 0301 	bic.w	r3, r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	4b04      	ldr	r3, [pc, #16]	; (800c284 <SD_CheckStatus+0x38>)
 800c274:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c276:	4b03      	ldr	r3, [pc, #12]	; (800c284 <SD_CheckStatus+0x38>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b2db      	uxtb	r3, r3
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20000117 	.word	0x20000117

0800c288 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c292:	f7fe fdf1 	bl	800ae78 <BSP_SD_Init>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d107      	bne.n	800c2ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff ffd4 	bl	800c24c <SD_CheckStatus>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	4b04      	ldr	r3, [pc, #16]	; (800c2bc <SD_initialize+0x34>)
 800c2aa:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c2ac:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <SD_initialize+0x34>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b2db      	uxtb	r3, r3
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000117 	.word	0x20000117

0800c2c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff ffbd 	bl	800c24c <SD_CheckStatus>
 800c2d2:	4603      	mov	r3, r0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c2f0:	f247 5030 	movw	r0, #30000	; 0x7530
 800c2f4:	f7ff ff8d 	bl	800c212 <SD_CheckStatusWithTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da01      	bge.n	800c302 <SD_read+0x26>
  {
    return res;
 800c2fe:	7ffb      	ldrb	r3, [r7, #31]
 800c300:	e08b      	b.n	800c41a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f003 0303 	and.w	r3, r3, #3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f040 8085 	bne.w	800c418 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	68b8      	ldr	r0, [r7, #8]
 800c314:	f7fe fdd6 	bl	800aec4 <BSP_SD_ReadBlocks_DMA>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d133      	bne.n	800c386 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c31e:	4b41      	ldr	r3, [pc, #260]	; (800c424 <SD_read+0x148>)
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c324:	f7f5 faea 	bl	80018fc <HAL_GetTick>
 800c328:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c32a:	bf00      	nop
 800c32c:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <SD_read+0x148>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d108      	bne.n	800c346 <SD_read+0x6a>
 800c334:	f7f5 fae2 	bl	80018fc <HAL_GetTick>
 800c338:	4602      	mov	r2, r0
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c342:	4293      	cmp	r3, r2
 800c344:	d9f2      	bls.n	800c32c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c346:	4b37      	ldr	r3, [pc, #220]	; (800c424 <SD_read+0x148>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d102      	bne.n	800c354 <SD_read+0x78>
      {
        res = RES_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	77fb      	strb	r3, [r7, #31]
 800c352:	e061      	b.n	800c418 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800c354:	4b33      	ldr	r3, [pc, #204]	; (800c424 <SD_read+0x148>)
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c35a:	f7f5 facf 	bl	80018fc <HAL_GetTick>
 800c35e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c360:	e007      	b.n	800c372 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c362:	f7fe fde3 	bl	800af2c <BSP_SD_GetCardState>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <SD_read+0x96>
          {
            res = RES_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c370:	e052      	b.n	800c418 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c372:	f7f5 fac3 	bl	80018fc <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c380:	4293      	cmp	r3, r2
 800c382:	d9ee      	bls.n	800c362 <SD_read+0x86>
 800c384:	e048      	b.n	800c418 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800c386:	2300      	movs	r3, #0
 800c388:	61bb      	str	r3, [r7, #24]
 800c38a:	e034      	b.n	800c3f6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	607a      	str	r2, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	4619      	mov	r1, r3
 800c396:	4824      	ldr	r0, [pc, #144]	; (800c428 <SD_read+0x14c>)
 800c398:	f7fe fd94 	bl	800aec4 <BSP_SD_ReadBlocks_DMA>
 800c39c:	4603      	mov	r3, r0
 800c39e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c3a0:	7fbb      	ldrb	r3, [r7, #30]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d12c      	bne.n	800c400 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800c3a6:	4b1f      	ldr	r3, [pc, #124]	; (800c424 <SD_read+0x148>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800c3ac:	f7f5 faa6 	bl	80018fc <HAL_GetTick>
 800c3b0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c3b2:	bf00      	nop
 800c3b4:	4b1b      	ldr	r3, [pc, #108]	; (800c424 <SD_read+0x148>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d108      	bne.n	800c3ce <SD_read+0xf2>
 800c3bc:	f7f5 fa9e 	bl	80018fc <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d9f2      	bls.n	800c3b4 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800c3ce:	4b15      	ldr	r3, [pc, #84]	; (800c424 <SD_read+0x148>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d016      	beq.n	800c404 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	4a13      	ldr	r2, [pc, #76]	; (800c428 <SD_read+0x14c>)
 800c3da:	4618      	mov	r0, r3
 800c3dc:	4611      	mov	r1, r2
 800c3de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f001 fab6 	bl	800d954 <memcpy>
          buff += BLOCKSIZE;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c3ee:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	61bb      	str	r3, [r7, #24]
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d8c6      	bhi.n	800c38c <SD_read+0xb0>
 800c3fe:	e002      	b.n	800c406 <SD_read+0x12a>
        }
        else
        {
          break;
 800c400:	bf00      	nop
 800c402:	e000      	b.n	800c406 <SD_read+0x12a>
            break;
 800c404:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d104      	bne.n	800c418 <SD_read+0x13c>
 800c40e:	7fbb      	ldrb	r3, [r7, #30]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <SD_read+0x13c>
        res = RES_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800c418:	7ffb      	ldrb	r3, [r7, #31]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20001914 	.word	0x20001914
 800c428:	20001710 	.word	0x20001710

0800c42c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b088      	sub	sp, #32
 800c430:	af00      	add	r7, sp, #0
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800c440:	4b4c      	ldr	r3, [pc, #304]	; (800c574 <SD_write+0x148>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c446:	f247 5030 	movw	r0, #30000	; 0x7530
 800c44a:	f7ff fee2 	bl	800c212 <SD_CheckStatusWithTimeout>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	da01      	bge.n	800c458 <SD_write+0x2c>
  {
    return res;
 800c454:	7ffb      	ldrb	r3, [r7, #31]
 800c456:	e088      	b.n	800c56a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f003 0303 	and.w	r3, r3, #3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f040 8082 	bne.w	800c568 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f7fe fd45 	bl	800aef8 <BSP_SD_WriteBlocks_DMA>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d130      	bne.n	800c4d6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c474:	f7f5 fa42 	bl	80018fc <HAL_GetTick>
 800c478:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c47a:	bf00      	nop
 800c47c:	4b3d      	ldr	r3, [pc, #244]	; (800c574 <SD_write+0x148>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d108      	bne.n	800c496 <SD_write+0x6a>
 800c484:	f7f5 fa3a 	bl	80018fc <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c492:	4293      	cmp	r3, r2
 800c494:	d9f2      	bls.n	800c47c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c496:	4b37      	ldr	r3, [pc, #220]	; (800c574 <SD_write+0x148>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d102      	bne.n	800c4a4 <SD_write+0x78>
      {
        res = RES_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	77fb      	strb	r3, [r7, #31]
 800c4a2:	e061      	b.n	800c568 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800c4a4:	4b33      	ldr	r3, [pc, #204]	; (800c574 <SD_write+0x148>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c4aa:	f7f5 fa27 	bl	80018fc <HAL_GetTick>
 800c4ae:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4b0:	e007      	b.n	800c4c2 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c4b2:	f7fe fd3b 	bl	800af2c <BSP_SD_GetCardState>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <SD_write+0x96>
          {
            res = RES_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	77fb      	strb	r3, [r7, #31]
            break;
 800c4c0:	e052      	b.n	800c568 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c4c2:	f7f5 fa1b 	bl	80018fc <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d9ee      	bls.n	800c4b2 <SD_write+0x86>
 800c4d4:	e048      	b.n	800c568 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	e034      	b.n	800c546 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800c4dc:	4b25      	ldr	r3, [pc, #148]	; (800c574 <SD_write+0x148>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4822      	ldr	r0, [pc, #136]	; (800c578 <SD_write+0x14c>)
 800c4ee:	f7fe fd03 	bl	800aef8 <BSP_SD_WriteBlocks_DMA>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c4f6:	7fbb      	ldrb	r3, [r7, #30]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d129      	bne.n	800c550 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800c4fc:	f7f5 f9fe 	bl	80018fc <HAL_GetTick>
 800c500:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c502:	bf00      	nop
 800c504:	4b1b      	ldr	r3, [pc, #108]	; (800c574 <SD_write+0x148>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d108      	bne.n	800c51e <SD_write+0xf2>
 800c50c:	f7f5 f9f6 	bl	80018fc <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	f247 522f 	movw	r2, #29999	; 0x752f
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d9f2      	bls.n	800c504 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <SD_write+0x148>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d016      	beq.n	800c554 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4a13      	ldr	r2, [pc, #76]	; (800c578 <SD_write+0x14c>)
 800c52a:	4618      	mov	r0, r3
 800c52c:	4611      	mov	r1, r2
 800c52e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c532:	461a      	mov	r2, r3
 800c534:	f001 fa0e 	bl	800d954 <memcpy>
          buff += BLOCKSIZE;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c53e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	3301      	adds	r3, #1
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d8c6      	bhi.n	800c4dc <SD_write+0xb0>
 800c54e:	e002      	b.n	800c556 <SD_write+0x12a>
        }
        else
        {
          break;
 800c550:	bf00      	nop
 800c552:	e000      	b.n	800c556 <SD_write+0x12a>
            break;
 800c554:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d104      	bne.n	800c568 <SD_write+0x13c>
 800c55e:	7fbb      	ldrb	r3, [r7, #30]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <SD_write+0x13c>
        res = RES_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c568:	7ffb      	ldrb	r3, [r7, #31]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3720      	adds	r7, #32
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20001910 	.word	0x20001910
 800c578:	20001710 	.word	0x20001710

0800c57c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08c      	sub	sp, #48	; 0x30
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	603a      	str	r2, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
 800c588:	460b      	mov	r3, r1
 800c58a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c592:	4b25      	ldr	r3, [pc, #148]	; (800c628 <SD_ioctl+0xac>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0301 	and.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <SD_ioctl+0x28>
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e03c      	b.n	800c61e <SD_ioctl+0xa2>

  switch (cmd)
 800c5a4:	79bb      	ldrb	r3, [r7, #6]
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d834      	bhi.n	800c614 <SD_ioctl+0x98>
 800c5aa:	a201      	add	r2, pc, #4	; (adr r2, 800c5b0 <SD_ioctl+0x34>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c5c1 	.word	0x0800c5c1
 800c5b4:	0800c5c9 	.word	0x0800c5c9
 800c5b8:	0800c5e1 	.word	0x0800c5e1
 800c5bc:	0800c5fb 	.word	0x0800c5fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5c6:	e028      	b.n	800c61a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5c8:	f107 030c 	add.w	r3, r7, #12
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe fcbd 	bl	800af4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5de:	e01c      	b.n	800c61a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe fcb1 	bl	800af4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5f8:	e00f      	b.n	800c61a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5fa:	f107 030c 	add.w	r3, r7, #12
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fe fca4 	bl	800af4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	0a5a      	lsrs	r2, r3, #9
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c612:	e002      	b.n	800c61a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c614:	2304      	movs	r3, #4
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c61a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3730      	adds	r7, #48	; 0x30
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	20000117 	.word	0x20000117

0800c62c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c62c:	b480      	push	{r7}
 800c62e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800c630:	4b03      	ldr	r3, [pc, #12]	; (800c640 <BSP_SD_WriteCpltCallback+0x14>)
 800c632:	2201      	movs	r2, #1
 800c634:	601a      	str	r2, [r3, #0]
}
 800c636:	bf00      	nop
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	20001910 	.word	0x20001910

0800c644 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c644:	b480      	push	{r7}
 800c646:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c648:	4b03      	ldr	r3, [pc, #12]	; (800c658 <BSP_SD_ReadCpltCallback+0x14>)
 800c64a:	2201      	movs	r2, #1
 800c64c:	601a      	str	r2, [r3, #0]
}
 800c64e:	bf00      	nop
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	20001914 	.word	0x20001914

0800c65c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c662:	2300      	movs	r3, #0
 800c664:	607b      	str	r3, [r7, #4]
 800c666:	4b10      	ldr	r3, [pc, #64]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66a:	4a0f      	ldr	r2, [pc, #60]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c66c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c670:	6453      	str	r3, [r2, #68]	; 0x44
 800c672:	4b0d      	ldr	r3, [pc, #52]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c67a:	607b      	str	r3, [r7, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c67e:	2300      	movs	r3, #0
 800c680:	603b      	str	r3, [r7, #0]
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c686:	4a08      	ldr	r2, [pc, #32]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c68c:	6413      	str	r3, [r2, #64]	; 0x40
 800c68e:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <HAL_MspInit+0x4c>)
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	40023800 	.word	0x40023800

0800c6ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08c      	sub	sp, #48	; 0x30
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6b4:	f107 031c 	add.w	r3, r7, #28
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	605a      	str	r2, [r3, #4]
 800c6be:	609a      	str	r2, [r3, #8]
 800c6c0:	60da      	str	r2, [r3, #12]
 800c6c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a32      	ldr	r2, [pc, #200]	; (800c794 <HAL_I2C_MspInit+0xe8>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d12c      	bne.n	800c728 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	61bb      	str	r3, [r7, #24]
 800c6d2:	4b31      	ldr	r3, [pc, #196]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	4a30      	ldr	r2, [pc, #192]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c6d8:	f043 0302 	orr.w	r3, r3, #2
 800c6dc:	6313      	str	r3, [r2, #48]	; 0x30
 800c6de:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800c6ea:	23c0      	movs	r3, #192	; 0xc0
 800c6ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c6ee:	2312      	movs	r3, #18
 800c6f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6f6:	2303      	movs	r3, #3
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6fe:	f107 031c 	add.w	r3, r7, #28
 800c702:	4619      	mov	r1, r3
 800c704:	4825      	ldr	r0, [pc, #148]	; (800c79c <HAL_I2C_MspInit+0xf0>)
 800c706:	f7f5 fdd1 	bl	80022ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	4b22      	ldr	r3, [pc, #136]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c712:	4a21      	ldr	r2, [pc, #132]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c718:	6413      	str	r3, [r2, #64]	; 0x40
 800c71a:	4b1f      	ldr	r3, [pc, #124]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c722:	617b      	str	r3, [r7, #20]
 800c724:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c726:	e031      	b.n	800c78c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a1c      	ldr	r2, [pc, #112]	; (800c7a0 <HAL_I2C_MspInit+0xf4>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d12c      	bne.n	800c78c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c732:	2300      	movs	r3, #0
 800c734:	613b      	str	r3, [r7, #16]
 800c736:	4b18      	ldr	r3, [pc, #96]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c73c:	f043 0302 	orr.w	r3, r3, #2
 800c740:	6313      	str	r3, [r2, #48]	; 0x30
 800c742:	4b15      	ldr	r3, [pc, #84]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c74e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c754:	2312      	movs	r3, #18
 800c756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c758:	2301      	movs	r3, #1
 800c75a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c75c:	2303      	movs	r3, #3
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c760:	2304      	movs	r3, #4
 800c762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c764:	f107 031c 	add.w	r3, r7, #28
 800c768:	4619      	mov	r1, r3
 800c76a:	480c      	ldr	r0, [pc, #48]	; (800c79c <HAL_I2C_MspInit+0xf0>)
 800c76c:	f7f5 fd9e 	bl	80022ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c770:	2300      	movs	r3, #0
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	4b08      	ldr	r3, [pc, #32]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c778:	4a07      	ldr	r2, [pc, #28]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c77a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c77e:	6413      	str	r3, [r2, #64]	; 0x40
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <HAL_I2C_MspInit+0xec>)
 800c782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
}
 800c78c:	bf00      	nop
 800c78e:	3730      	adds	r7, #48	; 0x30
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	40005400 	.word	0x40005400
 800c798:	40023800 	.word	0x40023800
 800c79c:	40020400 	.word	0x40020400
 800c7a0:	40005800 	.word	0x40005800

0800c7a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <HAL_RTC_MspInit+0x24>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d102      	bne.n	800c7bc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <HAL_RTC_MspInit+0x28>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	40002800 	.word	0x40002800
 800c7cc:	42470e3c 	.word	0x42470e3c

0800c7d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7d8:	f107 0314 	add.w	r3, r7, #20
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	605a      	str	r2, [r3, #4]
 800c7e2:	609a      	str	r2, [r3, #8]
 800c7e4:	60da      	str	r2, [r3, #12]
 800c7e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a70      	ldr	r2, [pc, #448]	; (800c9b0 <HAL_SD_MspInit+0x1e0>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	f040 80da 	bne.w	800c9a8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	613b      	str	r3, [r7, #16]
 800c7f8:	4b6e      	ldr	r3, [pc, #440]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7fc:	4a6d      	ldr	r2, [pc, #436]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c7fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c802:	6453      	str	r3, [r2, #68]	; 0x44
 800c804:	4b6b      	ldr	r3, [pc, #428]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	4b67      	ldr	r3, [pc, #412]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c818:	4a66      	ldr	r2, [pc, #408]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c81a:	f043 0304 	orr.w	r3, r3, #4
 800c81e:	6313      	str	r3, [r2, #48]	; 0x30
 800c820:	4b64      	ldr	r3, [pc, #400]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c82c:	2300      	movs	r3, #0
 800c82e:	60bb      	str	r3, [r7, #8]
 800c830:	4b60      	ldr	r3, [pc, #384]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c834:	4a5f      	ldr	r2, [pc, #380]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c836:	f043 0308 	orr.w	r3, r3, #8
 800c83a:	6313      	str	r3, [r2, #48]	; 0x30
 800c83c:	4b5d      	ldr	r3, [pc, #372]	; (800c9b4 <HAL_SD_MspInit+0x1e4>)
 800c83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c840:	f003 0308 	and.w	r3, r3, #8
 800c844:	60bb      	str	r3, [r7, #8]
 800c846:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800c848:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c84c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84e:	2302      	movs	r3, #2
 800c850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c852:	2301      	movs	r3, #1
 800c854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c856:	2303      	movs	r3, #3
 800c858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c85a:	230c      	movs	r3, #12
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c85e:	f107 0314 	add.w	r3, r7, #20
 800c862:	4619      	mov	r1, r3
 800c864:	4854      	ldr	r0, [pc, #336]	; (800c9b8 <HAL_SD_MspInit+0x1e8>)
 800c866:	f7f5 fd21 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c86a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c86e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c870:	2302      	movs	r3, #2
 800c872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c874:	2300      	movs	r3, #0
 800c876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c878:	2303      	movs	r3, #3
 800c87a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c87c:	230c      	movs	r3, #12
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c880:	f107 0314 	add.w	r3, r7, #20
 800c884:	4619      	mov	r1, r3
 800c886:	484c      	ldr	r0, [pc, #304]	; (800c9b8 <HAL_SD_MspInit+0x1e8>)
 800c888:	f7f5 fd10 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c88c:	2304      	movs	r3, #4
 800c88e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c890:	2302      	movs	r3, #2
 800c892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c894:	2301      	movs	r3, #1
 800c896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c898:	2303      	movs	r3, #3
 800c89a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c89c:	230c      	movs	r3, #12
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4845      	ldr	r0, [pc, #276]	; (800c9bc <HAL_SD_MspInit+0x1ec>)
 800c8a8:	f7f5 fd00 	bl	80022ac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800c8ac:	4b44      	ldr	r3, [pc, #272]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8ae:	4a45      	ldr	r2, [pc, #276]	; (800c9c4 <HAL_SD_MspInit+0x1f4>)
 800c8b0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800c8b2:	4b43      	ldr	r3, [pc, #268]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c8b8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8ba:	4b41      	ldr	r3, [pc, #260]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c8c0:	4b3f      	ldr	r3, [pc, #252]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c8c6:	4b3e      	ldr	r3, [pc, #248]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8cc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c8ce:	4b3c      	ldr	r3, [pc, #240]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8d4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c8d6:	4b3a      	ldr	r3, [pc, #232]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c8dc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800c8de:	4b38      	ldr	r3, [pc, #224]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c8e4:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c8ea:	4b35      	ldr	r3, [pc, #212]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c8f0:	4b33      	ldr	r3, [pc, #204]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800c8f6:	4b32      	ldr	r3, [pc, #200]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c8f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c8fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800c8fe:	4b30      	ldr	r3, [pc, #192]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c904:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800c906:	482e      	ldr	r0, [pc, #184]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c908:	f7f5 f938 	bl	8001b7c <HAL_DMA_Init>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800c912:	f7ff fc77 	bl	800c204 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a29      	ldr	r2, [pc, #164]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c91a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c91c:	4a28      	ldr	r2, [pc, #160]	; (800c9c0 <HAL_SD_MspInit+0x1f0>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c924:	4a29      	ldr	r2, [pc, #164]	; (800c9cc <HAL_SD_MspInit+0x1fc>)
 800c926:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800c928:	4b27      	ldr	r3, [pc, #156]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c92a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c92e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c930:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c932:	2240      	movs	r2, #64	; 0x40
 800c934:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c936:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c938:	2200      	movs	r2, #0
 800c93a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c93c:	4b22      	ldr	r3, [pc, #136]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c93e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c942:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c944:	4b20      	ldr	r3, [pc, #128]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c94a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c94c:	4b1e      	ldr	r3, [pc, #120]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c94e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c952:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800c954:	4b1c      	ldr	r3, [pc, #112]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c956:	2220      	movs	r2, #32
 800c958:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800c960:	4b19      	ldr	r3, [pc, #100]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c962:	2204      	movs	r2, #4
 800c964:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800c966:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c968:	2203      	movs	r2, #3
 800c96a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800c96c:	4b16      	ldr	r3, [pc, #88]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c96e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c972:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800c974:	4b14      	ldr	r3, [pc, #80]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c976:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c97a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800c97c:	4812      	ldr	r0, [pc, #72]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c97e:	f7f5 f8fd 	bl	8001b7c <HAL_DMA_Init>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800c988:	f7ff fc3c 	bl	800c204 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a0e      	ldr	r2, [pc, #56]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c990:	641a      	str	r2, [r3, #64]	; 0x40
 800c992:	4a0d      	ldr	r2, [pc, #52]	; (800c9c8 <HAL_SD_MspInit+0x1f8>)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800c998:	2200      	movs	r2, #0
 800c99a:	2100      	movs	r1, #0
 800c99c:	2031      	movs	r0, #49	; 0x31
 800c99e:	f7f5 f8b6 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800c9a2:	2031      	movs	r0, #49	; 0x31
 800c9a4:	f7f5 f8cf 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800c9a8:	bf00      	nop
 800c9aa:	3728      	adds	r7, #40	; 0x28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	40012c00 	.word	0x40012c00
 800c9b4:	40023800 	.word	0x40023800
 800c9b8:	40020800 	.word	0x40020800
 800c9bc:	40020c00 	.word	0x40020c00
 800c9c0:	200084f0 	.word	0x200084f0
 800c9c4:	40026458 	.word	0x40026458
 800c9c8:	200086d8 	.word	0x200086d8
 800c9cc:	400264a0 	.word	0x400264a0

0800c9d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08a      	sub	sp, #40	; 0x28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9d8:	f107 0314 	add.w	r3, r7, #20
 800c9dc:	2200      	movs	r2, #0
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	605a      	str	r2, [r3, #4]
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	60da      	str	r2, [r3, #12]
 800c9e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a19      	ldr	r2, [pc, #100]	; (800ca54 <HAL_SPI_MspInit+0x84>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d12b      	bne.n	800ca4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	613b      	str	r3, [r7, #16]
 800c9f6:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800c9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800c9fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca00:	6453      	str	r3, [r2, #68]	; 0x44
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800ca04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca0a:	613b      	str	r3, [r7, #16]
 800ca0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	4b11      	ldr	r3, [pc, #68]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	4a10      	ldr	r2, [pc, #64]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800ca18:	f043 0302 	orr.w	r3, r3, #2
 800ca1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca1e:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <HAL_SPI_MspInit+0x88>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca22:	f003 0302 	and.w	r3, r3, #2
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800ca2a:	2338      	movs	r3, #56	; 0x38
 800ca2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca2e:	2302      	movs	r3, #2
 800ca30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca36:	2303      	movs	r3, #3
 800ca38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ca3a:	2305      	movs	r3, #5
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca3e:	f107 0314 	add.w	r3, r7, #20
 800ca42:	4619      	mov	r1, r3
 800ca44:	4805      	ldr	r0, [pc, #20]	; (800ca5c <HAL_SPI_MspInit+0x8c>)
 800ca46:	f7f5 fc31 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ca4a:	bf00      	nop
 800ca4c:	3728      	adds	r7, #40	; 0x28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	40013000 	.word	0x40013000
 800ca58:	40023800 	.word	0x40023800
 800ca5c:	40020400 	.word	0x40020400

0800ca60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca70:	d10e      	bne.n	800ca90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ca72:	2300      	movs	r3, #0
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	4a1c      	ldr	r2, [pc, #112]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800ca7c:	f043 0301 	orr.w	r3, r3, #1
 800ca80:	6413      	str	r3, [r2, #64]	; 0x40
 800ca82:	4b1a      	ldr	r3, [pc, #104]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	617b      	str	r3, [r7, #20]
 800ca8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800ca8e:	e026      	b.n	800cade <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a16      	ldr	r2, [pc, #88]	; (800caf0 <HAL_TIM_Base_MspInit+0x90>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d10e      	bne.n	800cab8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	613b      	str	r3, [r7, #16]
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	4a12      	ldr	r2, [pc, #72]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800caa4:	f043 0302 	orr.w	r3, r3, #2
 800caa8:	6413      	str	r3, [r2, #64]	; 0x40
 800caaa:	4b10      	ldr	r3, [pc, #64]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	693b      	ldr	r3, [r7, #16]
}
 800cab6:	e012      	b.n	800cade <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a0d      	ldr	r2, [pc, #52]	; (800caf4 <HAL_TIM_Base_MspInit+0x94>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d10d      	bne.n	800cade <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	4b09      	ldr	r3, [pc, #36]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	4a08      	ldr	r2, [pc, #32]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800cacc:	f043 0308 	orr.w	r3, r3, #8
 800cad0:	6413      	str	r3, [r2, #64]	; 0x40
 800cad2:	4b06      	ldr	r3, [pc, #24]	; (800caec <HAL_TIM_Base_MspInit+0x8c>)
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	f003 0308 	and.w	r3, r3, #8
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	68fb      	ldr	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	371c      	adds	r7, #28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40023800 	.word	0x40023800
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000c00 	.word	0x40000c00

0800caf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb00:	f107 0314 	add.w	r3, r7, #20
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	605a      	str	r2, [r3, #4]
 800cb0a:	609a      	str	r2, [r3, #8]
 800cb0c:	60da      	str	r2, [r3, #12]
 800cb0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a21      	ldr	r2, [pc, #132]	; (800cb9c <HAL_TIM_MspPostInit+0xa4>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d13b      	bne.n	800cb92 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	4b20      	ldr	r3, [pc, #128]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb22:	4a1f      	ldr	r2, [pc, #124]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb24:	f043 0302 	orr.w	r3, r3, #2
 800cb28:	6313      	str	r3, [r2, #48]	; 0x30
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2e:	f003 0302 	and.w	r3, r3, #2
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	4b19      	ldr	r3, [pc, #100]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3e:	4a18      	ldr	r2, [pc, #96]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb40:	f043 0304 	orr.w	r3, r3, #4
 800cb44:	6313      	str	r3, [r2, #48]	; 0x30
 800cb46:	4b16      	ldr	r3, [pc, #88]	; (800cba0 <HAL_TIM_MspPostInit+0xa8>)
 800cb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 800cb52:	2301      	movs	r3, #1
 800cb54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb56:	2302      	movs	r3, #2
 800cb58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cb62:	2302      	movs	r3, #2
 800cb64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 800cb66:	f107 0314 	add.w	r3, r7, #20
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	480d      	ldr	r0, [pc, #52]	; (800cba4 <HAL_TIM_MspPostInit+0xac>)
 800cb6e:	f7f5 fb9d 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EN_L_Pin;
 800cb72:	2380      	movs	r3, #128	; 0x80
 800cb74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb76:	2302      	movs	r3, #2
 800cb78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cb82:	2302      	movs	r3, #2
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_L_GPIO_Port, &GPIO_InitStruct);
 800cb86:	f107 0314 	add.w	r3, r7, #20
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4806      	ldr	r0, [pc, #24]	; (800cba8 <HAL_TIM_MspPostInit+0xb0>)
 800cb8e:	f7f5 fb8d 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800cb92:	bf00      	nop
 800cb94:	3728      	adds	r7, #40	; 0x28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40000400 	.word	0x40000400
 800cba0:	40023800 	.word	0x40023800
 800cba4:	40020400 	.word	0x40020400
 800cba8:	40020800 	.word	0x40020800

0800cbac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	; 0x30
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbb4:	f107 031c 	add.w	r3, r7, #28
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	605a      	str	r2, [r3, #4]
 800cbbe:	609a      	str	r2, [r3, #8]
 800cbc0:	60da      	str	r2, [r3, #12]
 800cbc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a36      	ldr	r2, [pc, #216]	; (800cca4 <HAL_UART_MspInit+0xf8>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d135      	bne.n	800cc3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cbce:	2300      	movs	r3, #0
 800cbd0:	61bb      	str	r3, [r7, #24]
 800cbd2:	4b35      	ldr	r3, [pc, #212]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd6:	4a34      	ldr	r2, [pc, #208]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbd8:	f043 0310 	orr.w	r3, r3, #16
 800cbdc:	6453      	str	r3, [r2, #68]	; 0x44
 800cbde:	4b32      	ldr	r3, [pc, #200]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe2:	f003 0310 	and.w	r3, r3, #16
 800cbe6:	61bb      	str	r3, [r7, #24]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbea:	2300      	movs	r3, #0
 800cbec:	617b      	str	r3, [r7, #20]
 800cbee:	4b2e      	ldr	r3, [pc, #184]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf2:	4a2d      	ldr	r2, [pc, #180]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbf4:	f043 0301 	orr.w	r3, r3, #1
 800cbf8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbfa:	4b2b      	ldr	r3, [pc, #172]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	617b      	str	r3, [r7, #20]
 800cc04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800cc06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cc0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc10:	2301      	movs	r3, #1
 800cc12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc14:	2303      	movs	r3, #3
 800cc16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cc18:	2307      	movs	r3, #7
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc1c:	f107 031c 	add.w	r3, r7, #28
 800cc20:	4619      	mov	r1, r3
 800cc22:	4822      	ldr	r0, [pc, #136]	; (800ccac <HAL_UART_MspInit+0x100>)
 800cc24:	f7f5 fb42 	bl	80022ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	2025      	movs	r0, #37	; 0x25
 800cc2e:	f7f4 ff6e 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cc32:	2025      	movs	r0, #37	; 0x25
 800cc34:	f7f4 ff87 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800cc38:	e030      	b.n	800cc9c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a1c      	ldr	r2, [pc, #112]	; (800ccb0 <HAL_UART_MspInit+0x104>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d12b      	bne.n	800cc9c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	4b17      	ldr	r3, [pc, #92]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4c:	4a16      	ldr	r2, [pc, #88]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc52:	6413      	str	r3, [r2, #64]	; 0x40
 800cc54:	4b14      	ldr	r3, [pc, #80]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc5c:	613b      	str	r3, [r7, #16]
 800cc5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc60:	2300      	movs	r3, #0
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	4b10      	ldr	r3, [pc, #64]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc68:	4a0f      	ldr	r2, [pc, #60]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc6a:	f043 0301 	orr.w	r3, r3, #1
 800cc6e:	6313      	str	r3, [r2, #48]	; 0x30
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <HAL_UART_MspInit+0xfc>)
 800cc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800cc7c:	230c      	movs	r3, #12
 800cc7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc80:	2302      	movs	r3, #2
 800cc82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc84:	2301      	movs	r3, #1
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cc8c:	2307      	movs	r3, #7
 800cc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc90:	f107 031c 	add.w	r3, r7, #28
 800cc94:	4619      	mov	r1, r3
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <HAL_UART_MspInit+0x100>)
 800cc98:	f7f5 fb08 	bl	80022ac <HAL_GPIO_Init>
}
 800cc9c:	bf00      	nop
 800cc9e:	3730      	adds	r7, #48	; 0x30
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	40011000 	.word	0x40011000
 800cca8:	40023800 	.word	0x40023800
 800ccac:	40020000 	.word	0x40020000
 800ccb0:	40004400 	.word	0x40004400

0800ccb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ccb8:	bf00      	nop
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ccc6:	e7fe      	b.n	800ccc6 <HardFault_Handler+0x4>

0800ccc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cccc:	e7fe      	b.n	800cccc <MemManage_Handler+0x4>

0800ccce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ccd2:	e7fe      	b.n	800ccd2 <BusFault_Handler+0x4>

0800ccd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ccd8:	e7fe      	b.n	800ccd8 <UsageFault_Handler+0x4>

0800ccda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ccde:	bf00      	nop
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ccec:	bf00      	nop
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ccfa:	bf00      	nop
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd08:	f7f4 fde4 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cd0c:	bf00      	nop
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800cd14:	4802      	ldr	r0, [pc, #8]	; (800cd20 <USART1_IRQHandler+0x10>)
 800cd16:	f7fa f843 	bl	8006da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800cd1a:	bf00      	nop
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20008678 	.word	0x20008678

0800cd24 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800cd28:	4802      	ldr	r0, [pc, #8]	; (800cd34 <SDIO_IRQHandler+0x10>)
 800cd2a:	f7f7 ff47 	bl	8004bbc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800cd2e:	bf00      	nop
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20008738 	.word	0x20008738

0800cd38 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800cd3c:	4802      	ldr	r0, [pc, #8]	; (800cd48 <DMA2_Stream3_IRQHandler+0x10>)
 800cd3e:	f7f5 f84d 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800cd42:	bf00      	nop
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	200084f0 	.word	0x200084f0

0800cd4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800cd50:	4802      	ldr	r0, [pc, #8]	; (800cd5c <OTG_FS_IRQHandler+0x10>)
 800cd52:	f7f5 ff09 	bl	8002b68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800cd56:	bf00      	nop
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20009894 	.word	0x20009894

0800cd60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800cd64:	4802      	ldr	r0, [pc, #8]	; (800cd70 <DMA2_Stream6_IRQHandler+0x10>)
 800cd66:	f7f5 f839 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800cd6a:	bf00      	nop
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	200086d8 	.word	0x200086d8

0800cd74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cd7c:	4b11      	ldr	r3, [pc, #68]	; (800cdc4 <_sbrk+0x50>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <_sbrk+0x16>
		heap_end = &end;
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <_sbrk+0x50>)
 800cd86:	4a10      	ldr	r2, [pc, #64]	; (800cdc8 <_sbrk+0x54>)
 800cd88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cd8a:	4b0e      	ldr	r3, [pc, #56]	; (800cdc4 <_sbrk+0x50>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cd90:	4b0c      	ldr	r3, [pc, #48]	; (800cdc4 <_sbrk+0x50>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	466a      	mov	r2, sp
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d907      	bls.n	800cdae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800cd9e:	f000 fd9f 	bl	800d8e0 <__errno>
 800cda2:	4602      	mov	r2, r0
 800cda4:	230c      	movs	r3, #12
 800cda6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cda8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdac:	e006      	b.n	800cdbc <_sbrk+0x48>
	}

	heap_end += incr;
 800cdae:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <_sbrk+0x50>)
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	4a03      	ldr	r2, [pc, #12]	; (800cdc4 <_sbrk+0x50>)
 800cdb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cdba:	68fb      	ldr	r3, [r7, #12]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	20001918 	.word	0x20001918
 800cdc8:	20009ea0 	.word	0x20009ea0

0800cdcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cdd0:	4b16      	ldr	r3, [pc, #88]	; (800ce2c <SystemInit+0x60>)
 800cdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdd6:	4a15      	ldr	r2, [pc, #84]	; (800ce2c <SystemInit+0x60>)
 800cdd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cde0:	4b13      	ldr	r3, [pc, #76]	; (800ce30 <SystemInit+0x64>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a12      	ldr	r2, [pc, #72]	; (800ce30 <SystemInit+0x64>)
 800cde6:	f043 0301 	orr.w	r3, r3, #1
 800cdea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <SystemInit+0x64>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cdf2:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <SystemInit+0x64>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a0e      	ldr	r2, [pc, #56]	; (800ce30 <SystemInit+0x64>)
 800cdf8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800cdfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ce02:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <SystemInit+0x64>)
 800ce04:	4a0b      	ldr	r2, [pc, #44]	; (800ce34 <SystemInit+0x68>)
 800ce06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ce08:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <SystemInit+0x64>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a08      	ldr	r2, [pc, #32]	; (800ce30 <SystemInit+0x64>)
 800ce0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ce14:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <SystemInit+0x64>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ce1a:	4b04      	ldr	r3, [pc, #16]	; (800ce2c <SystemInit+0x60>)
 800ce1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ce20:	609a      	str	r2, [r3, #8]
#endif
}
 800ce22:	bf00      	nop
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	e000ed00 	.word	0xe000ed00
 800ce30:	40023800 	.word	0x40023800
 800ce34:	24003010 	.word	0x24003010

0800ce38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4912      	ldr	r1, [pc, #72]	; (800ce88 <MX_USB_DEVICE_Init+0x50>)
 800ce40:	4812      	ldr	r0, [pc, #72]	; (800ce8c <MX_USB_DEVICE_Init+0x54>)
 800ce42:	f7fc ff63 	bl	8009d0c <USBD_Init>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce4c:	f7ff f9da 	bl	800c204 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce50:	490f      	ldr	r1, [pc, #60]	; (800ce90 <MX_USB_DEVICE_Init+0x58>)
 800ce52:	480e      	ldr	r0, [pc, #56]	; (800ce8c <MX_USB_DEVICE_Init+0x54>)
 800ce54:	f7fc ff85 	bl	8009d62 <USBD_RegisterClass>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce5e:	f7ff f9d1 	bl	800c204 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce62:	490c      	ldr	r1, [pc, #48]	; (800ce94 <MX_USB_DEVICE_Init+0x5c>)
 800ce64:	4809      	ldr	r0, [pc, #36]	; (800ce8c <MX_USB_DEVICE_Init+0x54>)
 800ce66:	f7fc feb3 	bl	8009bd0 <USBD_CDC_RegisterInterface>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce70:	f7ff f9c8 	bl	800c204 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce74:	4805      	ldr	r0, [pc, #20]	; (800ce8c <MX_USB_DEVICE_Init+0x54>)
 800ce76:	f7fc ff8e 	bl	8009d96 <USBD_Start>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d001      	beq.n	800ce84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce80:	f7ff f9c0 	bl	800c204 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce84:	bf00      	nop
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	2000012c 	.word	0x2000012c
 800ce8c:	20001924 	.word	0x20001924
 800ce90:	20000014 	.word	0x20000014
 800ce94:	2000011c 	.word	0x2000011c

0800ce98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4905      	ldr	r1, [pc, #20]	; (800ceb4 <CDC_Init_FS+0x1c>)
 800cea0:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <CDC_Init_FS+0x20>)
 800cea2:	f7fc feac 	bl	8009bfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cea6:	4905      	ldr	r1, [pc, #20]	; (800cebc <CDC_Init_FS+0x24>)
 800cea8:	4803      	ldr	r0, [pc, #12]	; (800ceb8 <CDC_Init_FS+0x20>)
 800ceaa:	f7fc fec2 	bl	8009c32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ceae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20009094 	.word	0x20009094
 800ceb8:	20001924 	.word	0x20001924
 800cebc:	20008894 	.word	0x20008894

0800cec0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cec0:	b480      	push	{r7}
 800cec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cec4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	6039      	str	r1, [r7, #0]
 800ceda:	71fb      	strb	r3, [r7, #7]
 800cedc:	4613      	mov	r3, r2
 800cede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800cee0:	f107 0308 	add.w	r3, r7, #8
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]
 800cee8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b23      	cmp	r3, #35	; 0x23
 800cef0:	d87c      	bhi.n	800cfec <CDC_Control_FS+0x11c>
 800cef2:	a201      	add	r2, pc, #4	; (adr r2, 800cef8 <CDC_Control_FS+0x28>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800cfed 	.word	0x0800cfed
 800cefc:	0800cfed 	.word	0x0800cfed
 800cf00:	0800cfed 	.word	0x0800cfed
 800cf04:	0800cfed 	.word	0x0800cfed
 800cf08:	0800cfed 	.word	0x0800cfed
 800cf0c:	0800cfed 	.word	0x0800cfed
 800cf10:	0800cfed 	.word	0x0800cfed
 800cf14:	0800cfed 	.word	0x0800cfed
 800cf18:	0800cfed 	.word	0x0800cfed
 800cf1c:	0800cfed 	.word	0x0800cfed
 800cf20:	0800cfed 	.word	0x0800cfed
 800cf24:	0800cfed 	.word	0x0800cfed
 800cf28:	0800cfed 	.word	0x0800cfed
 800cf2c:	0800cfed 	.word	0x0800cfed
 800cf30:	0800cfed 	.word	0x0800cfed
 800cf34:	0800cfed 	.word	0x0800cfed
 800cf38:	0800cfed 	.word	0x0800cfed
 800cf3c:	0800cfed 	.word	0x0800cfed
 800cf40:	0800cfed 	.word	0x0800cfed
 800cf44:	0800cfed 	.word	0x0800cfed
 800cf48:	0800cfed 	.word	0x0800cfed
 800cf4c:	0800cfed 	.word	0x0800cfed
 800cf50:	0800cfed 	.word	0x0800cfed
 800cf54:	0800cfed 	.word	0x0800cfed
 800cf58:	0800cfed 	.word	0x0800cfed
 800cf5c:	0800cfed 	.word	0x0800cfed
 800cf60:	0800cfed 	.word	0x0800cfed
 800cf64:	0800cfed 	.word	0x0800cfed
 800cf68:	0800cfed 	.word	0x0800cfed
 800cf6c:	0800cfed 	.word	0x0800cfed
 800cf70:	0800cfed 	.word	0x0800cfed
 800cf74:	0800cfed 	.word	0x0800cfed
 800cf78:	0800cf89 	.word	0x0800cf89
 800cf7c:	0800cfb5 	.word	0x0800cfb5
 800cf80:	0800cfed 	.word	0x0800cfed
 800cf84:	0800cfed 	.word	0x0800cfed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	785b      	ldrb	r3, [r3, #1]
 800cf92:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	789b      	ldrb	r3, [r3, #2]
 800cf98:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	78db      	ldrb	r3, [r3, #3]
 800cf9e:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	791b      	ldrb	r3, [r3, #4]
 800cfa4:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	795b      	ldrb	r3, [r3, #5]
 800cfaa:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	799b      	ldrb	r3, [r3, #6]
 800cfb0:	73bb      	strb	r3, [r7, #14]
        	break;
 800cfb2:	e01c      	b.n	800cfee <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800cfb4:	7a3a      	ldrb	r2, [r7, #8]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	7a7a      	ldrb	r2, [r7, #9]
 800cfc0:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	3302      	adds	r3, #2
 800cfc6:	7aba      	ldrb	r2, [r7, #10]
 800cfc8:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	3303      	adds	r3, #3
 800cfce:	7afa      	ldrb	r2, [r7, #11]
 800cfd0:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	3304      	adds	r3, #4
 800cfd6:	7b3a      	ldrb	r2, [r7, #12]
 800cfd8:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	3305      	adds	r3, #5
 800cfde:	7b7a      	ldrb	r2, [r7, #13]
 800cfe0:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	3306      	adds	r3, #6
 800cfe6:	7bba      	ldrb	r2, [r7, #14]
 800cfe8:	701a      	strb	r2, [r3, #0]
        	break;
 800cfea:	e000      	b.n	800cfee <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cfec:	bf00      	nop
  }

  return (USBD_OK);
 800cfee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4805      	ldr	r0, [pc, #20]	; (800d020 <CDC_Receive_FS+0x24>)
 800d00a:	f7fc fe12 	bl	8009c32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d00e:	4804      	ldr	r0, [pc, #16]	; (800d020 <CDC_Receive_FS+0x24>)
 800d010:	f7fc fe52 	bl	8009cb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d016:	4618      	mov	r0, r3
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	20001924 	.word	0x20001924

0800d024 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d034:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <CDC_Transmit_FS+0x48>)
 800d036:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d03a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d046:	2301      	movs	r3, #1
 800d048:	e00b      	b.n	800d062 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d04a:	887b      	ldrh	r3, [r7, #2]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	4806      	ldr	r0, [pc, #24]	; (800d06c <CDC_Transmit_FS+0x48>)
 800d052:	f7fc fdd4 	bl	8009bfe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d056:	4805      	ldr	r0, [pc, #20]	; (800d06c <CDC_Transmit_FS+0x48>)
 800d058:	f7fc fdff 	bl	8009c5a <USBD_CDC_TransmitPacket>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d060:	7bfb      	ldrb	r3, [r7, #15]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	20001924 	.word	0x20001924

0800d070 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08a      	sub	sp, #40	; 0x28
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	609a      	str	r2, [r3, #8]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d090:	d13a      	bne.n	800d108 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d092:	2300      	movs	r3, #0
 800d094:	613b      	str	r3, [r7, #16]
 800d096:	4b1e      	ldr	r3, [pc, #120]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09a:	4a1d      	ldr	r2, [pc, #116]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d09c:	f043 0301 	orr.w	r3, r3, #1
 800d0a0:	6313      	str	r3, [r2, #48]	; 0x30
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800d0ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d0b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0c0:	230a      	movs	r3, #10
 800d0c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0c4:	f107 0314 	add.w	r3, r7, #20
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4812      	ldr	r0, [pc, #72]	; (800d114 <HAL_PCD_MspInit+0xa4>)
 800d0cc:	f7f5 f8ee 	bl	80022ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0d0:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d4:	4a0e      	ldr	r2, [pc, #56]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0da:	6353      	str	r3, [r2, #52]	; 0x34
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0ea:	6453      	str	r3, [r2, #68]	; 0x44
 800d0ec:	4b08      	ldr	r3, [pc, #32]	; (800d110 <HAL_PCD_MspInit+0xa0>)
 800d0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	2043      	movs	r0, #67	; 0x43
 800d0fe:	f7f4 fd06 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d102:	2043      	movs	r0, #67	; 0x43
 800d104:	f7f4 fd1f 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d108:	bf00      	nop
 800d10a:	3728      	adds	r7, #40	; 0x28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	40023800 	.word	0x40023800
 800d114:	40020000 	.word	0x40020000

0800d118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d12c:	4619      	mov	r1, r3
 800d12e:	4610      	mov	r0, r2
 800d130:	f7fc fe7a 	bl	8009e28 <USBD_LL_SetupStage>
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d14e:	78fa      	ldrb	r2, [r7, #3]
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	4613      	mov	r3, r2
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	440b      	add	r3, r1
 800d15c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	78fb      	ldrb	r3, [r7, #3]
 800d164:	4619      	mov	r1, r3
 800d166:	f7fc feaa 	bl	8009ebe <USBD_LL_DataOutStage>
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d184:	78fa      	ldrb	r2, [r7, #3]
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	4613      	mov	r3, r2
 800d18a:	00db      	lsls	r3, r3, #3
 800d18c:	1a9b      	subs	r3, r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	440b      	add	r3, r1
 800d192:	3348      	adds	r3, #72	; 0x48
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	78fb      	ldrb	r3, [r7, #3]
 800d198:	4619      	mov	r1, r3
 800d19a:	f7fc ff01 	bl	8009fa0 <USBD_LL_DataInStage>
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fd f80f 	bl	800a1d8 <USBD_LL_SOF>
}
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d102      	bne.n	800d1dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
 800d1da:	e008      	b.n	800d1ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d102      	bne.n	800d1ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	73fb      	strb	r3, [r7, #15]
 800d1e8:	e001      	b.n	800d1ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1ea:	f7ff f80b 	bl	800c204 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1f4:	7bfa      	ldrb	r2, [r7, #15]
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fc ffb7 	bl	800a16c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d204:	4618      	mov	r0, r3
 800d206:	f7fc ff70 	bl	800a0ea <USBD_LL_Reset>
}
 800d20a:	bf00      	nop
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d222:	4618      	mov	r0, r3
 800d224:	f7fc ffb2 	bl	800a18c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6812      	ldr	r2, [r2, #0]
 800d236:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6a1b      	ldr	r3, [r3, #32]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d005      	beq.n	800d254 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d248:	4b04      	ldr	r3, [pc, #16]	; (800d25c <HAL_PCD_SuspendCallback+0x48>)
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	4a03      	ldr	r2, [pc, #12]	; (800d25c <HAL_PCD_SuspendCallback+0x48>)
 800d24e:	f043 0306 	orr.w	r3, r3, #6
 800d252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	e000ed00 	.word	0xe000ed00

0800d260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fc ffa1 	bl	800a1b6 <USBD_LL_Resume>
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d28e:	78fa      	ldrb	r2, [r7, #3]
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7fc ffc7 	bl	800a226 <USBD_LL_IsoOUTIncomplete>
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2b2:	78fa      	ldrb	r2, [r7, #3]
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fc ffa8 	bl	800a20c <USBD_LL_IsoINIncomplete>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fc ffb4 	bl	800a240 <USBD_LL_DevConnected>
}
 800d2d8:	bf00      	nop
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fc ffb1 	bl	800a256 <USBD_LL_DevDisconnected>
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d13c      	bne.n	800d386 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d30c:	4a20      	ldr	r2, [pc, #128]	; (800d390 <USBD_LL_Init+0x94>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a1e      	ldr	r2, [pc, #120]	; (800d390 <USBD_LL_Init+0x94>)
 800d318:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d31c:	4b1c      	ldr	r3, [pc, #112]	; (800d390 <USBD_LL_Init+0x94>)
 800d31e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d322:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d324:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <USBD_LL_Init+0x94>)
 800d326:	2204      	movs	r2, #4
 800d328:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d32a:	4b19      	ldr	r3, [pc, #100]	; (800d390 <USBD_LL_Init+0x94>)
 800d32c:	2202      	movs	r2, #2
 800d32e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d330:	4b17      	ldr	r3, [pc, #92]	; (800d390 <USBD_LL_Init+0x94>)
 800d332:	2200      	movs	r2, #0
 800d334:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d336:	4b16      	ldr	r3, [pc, #88]	; (800d390 <USBD_LL_Init+0x94>)
 800d338:	2202      	movs	r2, #2
 800d33a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d33c:	4b14      	ldr	r3, [pc, #80]	; (800d390 <USBD_LL_Init+0x94>)
 800d33e:	2200      	movs	r2, #0
 800d340:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d342:	4b13      	ldr	r3, [pc, #76]	; (800d390 <USBD_LL_Init+0x94>)
 800d344:	2200      	movs	r2, #0
 800d346:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d348:	4b11      	ldr	r3, [pc, #68]	; (800d390 <USBD_LL_Init+0x94>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d34e:	4b10      	ldr	r3, [pc, #64]	; (800d390 <USBD_LL_Init+0x94>)
 800d350:	2200      	movs	r2, #0
 800d352:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d354:	4b0e      	ldr	r3, [pc, #56]	; (800d390 <USBD_LL_Init+0x94>)
 800d356:	2200      	movs	r2, #0
 800d358:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d35a:	480d      	ldr	r0, [pc, #52]	; (800d390 <USBD_LL_Init+0x94>)
 800d35c:	f7f5 fab4 	bl	80028c8 <HAL_PCD_Init>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d366:	f7fe ff4d 	bl	800c204 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d36a:	2180      	movs	r1, #128	; 0x80
 800d36c:	4808      	ldr	r0, [pc, #32]	; (800d390 <USBD_LL_Init+0x94>)
 800d36e:	f7f6 fc18 	bl	8003ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d372:	2240      	movs	r2, #64	; 0x40
 800d374:	2100      	movs	r1, #0
 800d376:	4806      	ldr	r0, [pc, #24]	; (800d390 <USBD_LL_Init+0x94>)
 800d378:	f7f6 fbcc 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d37c:	2280      	movs	r2, #128	; 0x80
 800d37e:	2101      	movs	r1, #1
 800d380:	4803      	ldr	r0, [pc, #12]	; (800d390 <USBD_LL_Init+0x94>)
 800d382:	f7f6 fbc7 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20009894 	.word	0x20009894

0800d394 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7f5 fba9 	bl	8002b02 <HAL_PCD_Start>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f92e 	bl	800d618 <USBD_Get_USB_Status>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b084      	sub	sp, #16
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	4608      	mov	r0, r1
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4603      	mov	r3, r0
 800d3da:	70fb      	strb	r3, [r7, #3]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	70bb      	strb	r3, [r7, #2]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d3f2:	78bb      	ldrb	r3, [r7, #2]
 800d3f4:	883a      	ldrh	r2, [r7, #0]
 800d3f6:	78f9      	ldrb	r1, [r7, #3]
 800d3f8:	f7f5 ff7e 	bl	80032f8 <HAL_PCD_EP_Open>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f908 	bl	800d618 <USBD_Get_USB_Status>
 800d408:	4603      	mov	r3, r0
 800d40a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d430:	78fa      	ldrb	r2, [r7, #3]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f7f5 ffc7 	bl	80033c8 <HAL_PCD_EP_Close>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	4618      	mov	r0, r3
 800d442:	f000 f8e9 	bl	800d618 <USBD_Get_USB_Status>
 800d446:	4603      	mov	r3, r0
 800d448:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d46e:	78fa      	ldrb	r2, [r7, #3]
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7f6 f89f 	bl	80035b6 <HAL_PCD_EP_SetStall>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 f8ca 	bl	800d618 <USBD_Get_USB_Status>
 800d484:	4603      	mov	r3, r0
 800d486:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d488:	7bbb      	ldrb	r3, [r7, #14]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	460b      	mov	r3, r1
 800d49c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4ac:	78fa      	ldrb	r2, [r7, #3]
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7f6 f8e4 	bl	800367e <HAL_PCD_EP_ClrStall>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 f8ab 	bl	800d618 <USBD_Get_USB_Status>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d4e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da0b      	bge.n	800d504 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4f2:	68f9      	ldr	r1, [r7, #12]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	1a9b      	subs	r3, r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	440b      	add	r3, r1
 800d4fe:	333e      	adds	r3, #62	; 0x3e
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	e00b      	b.n	800d51c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d504:	78fb      	ldrb	r3, [r7, #3]
 800d506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	4613      	mov	r3, r2
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	1a9b      	subs	r3, r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	440b      	add	r3, r1
 800d516:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d51a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d542:	78fa      	ldrb	r2, [r7, #3]
 800d544:	4611      	mov	r1, r2
 800d546:	4618      	mov	r0, r3
 800d548:	f7f5 feb1 	bl	80032ae <HAL_PCD_SetAddress>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d550:	7bfb      	ldrb	r3, [r7, #15]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f860 	bl	800d618 <USBD_Get_USB_Status>
 800d558:	4603      	mov	r3, r0
 800d55a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b086      	sub	sp, #24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	461a      	mov	r2, r3
 800d572:	460b      	mov	r3, r1
 800d574:	72fb      	strb	r3, [r7, #11]
 800d576:	4613      	mov	r3, r2
 800d578:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d57a:	2300      	movs	r3, #0
 800d57c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d588:	893b      	ldrh	r3, [r7, #8]
 800d58a:	7af9      	ldrb	r1, [r7, #11]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	f7f5 ffc8 	bl	8003522 <HAL_PCD_EP_Transmit>
 800d592:	4603      	mov	r3, r0
 800d594:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d596:	7dfb      	ldrb	r3, [r7, #23]
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f83d 	bl	800d618 <USBD_Get_USB_Status>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d5a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3718      	adds	r7, #24
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	607a      	str	r2, [r7, #4]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	72fb      	strb	r3, [r7, #11]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d5ce:	893b      	ldrh	r3, [r7, #8]
 800d5d0:	7af9      	ldrb	r1, [r7, #11]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	f7f5 ff42 	bl	800345c <HAL_PCD_EP_Receive>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d5dc:	7dfb      	ldrb	r3, [r7, #23]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 f81a 	bl	800d618 <USBD_Get_USB_Status>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d5e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d604:	78fa      	ldrb	r2, [r7, #3]
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7f5 ff72 	bl	80034f2 <HAL_PCD_EP_GetRxCount>
 800d60e:	4603      	mov	r3, r0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d817      	bhi.n	800d65c <USBD_Get_USB_Status+0x44>
 800d62c:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <USBD_Get_USB_Status+0x1c>)
 800d62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d632:	bf00      	nop
 800d634:	0800d645 	.word	0x0800d645
 800d638:	0800d64b 	.word	0x0800d64b
 800d63c:	0800d651 	.word	0x0800d651
 800d640:	0800d657 	.word	0x0800d657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	73fb      	strb	r3, [r7, #15]
    break;
 800d648:	e00b      	b.n	800d662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d64a:	2302      	movs	r3, #2
 800d64c:	73fb      	strb	r3, [r7, #15]
    break;
 800d64e:	e008      	b.n	800d662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d650:	2301      	movs	r3, #1
 800d652:	73fb      	strb	r3, [r7, #15]
    break;
 800d654:	e005      	b.n	800d662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d656:	2302      	movs	r3, #2
 800d658:	73fb      	strb	r3, [r7, #15]
    break;
 800d65a:	e002      	b.n	800d662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d65c:	2302      	movs	r3, #2
 800d65e:	73fb      	strb	r3, [r7, #15]
    break;
 800d660:	bf00      	nop
  }
  return usb_status;
 800d662:	7bfb      	ldrb	r3, [r7, #15]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2212      	movs	r2, #18
 800d680:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d682:	4b03      	ldr	r3, [pc, #12]	; (800d690 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	20000148 	.word	0x20000148

0800d694 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6a6:	4b03      	ldr	r3, [pc, #12]	; (800d6b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr
 800d6b4:	2000015c 	.word	0x2000015c

0800d6b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	6039      	str	r1, [r7, #0]
 800d6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d105      	bne.n	800d6d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	4907      	ldr	r1, [pc, #28]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800d6ce:	4808      	ldr	r0, [pc, #32]	; (800d6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6d0:	f7fd fa98 	bl	800ac04 <USBD_GetString>
 800d6d4:	e004      	b.n	800d6e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	4904      	ldr	r1, [pc, #16]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800d6da:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6dc:	f7fd fa92 	bl	800ac04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6e0:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20009c9c 	.word	0x20009c9c
 800d6f0:	08011870 	.word	0x08011870

0800d6f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	4904      	ldr	r1, [pc, #16]	; (800d714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d704:	4804      	ldr	r0, [pc, #16]	; (800d718 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d706:	f7fd fa7d 	bl	800ac04 <USBD_GetString>
  return USBD_StrDesc;
 800d70a:	4b02      	ldr	r3, [pc, #8]	; (800d714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	20009c9c 	.word	0x20009c9c
 800d718:	0801187c 	.word	0x0801187c

0800d71c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	6039      	str	r1, [r7, #0]
 800d726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	221a      	movs	r2, #26
 800d72c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d72e:	f000 f843 	bl	800d7b8 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800d732:	4b02      	ldr	r3, [pc, #8]	; (800d73c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000160 	.word	0x20000160

0800d740 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d105      	bne.n	800d75e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	4907      	ldr	r1, [pc, #28]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d756:	4808      	ldr	r0, [pc, #32]	; (800d778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d758:	f7fd fa54 	bl	800ac04 <USBD_GetString>
 800d75c:	e004      	b.n	800d768 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4904      	ldr	r1, [pc, #16]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d762:	4805      	ldr	r0, [pc, #20]	; (800d778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d764:	f7fd fa4e 	bl	800ac04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d768:	4b02      	ldr	r3, [pc, #8]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20009c9c 	.word	0x20009c9c
 800d778:	08011890 	.word	0x08011890

0800d77c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d105      	bne.n	800d79a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	4907      	ldr	r1, [pc, #28]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d792:	4808      	ldr	r0, [pc, #32]	; (800d7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d794:	f7fd fa36 	bl	800ac04 <USBD_GetString>
 800d798:	e004      	b.n	800d7a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	4904      	ldr	r1, [pc, #16]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d79e:	4805      	ldr	r0, [pc, #20]	; (800d7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7a0:	f7fd fa30 	bl	800ac04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7a4:	4b02      	ldr	r3, [pc, #8]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20009c9c 	.word	0x20009c9c
 800d7b4:	0801189c 	.word	0x0801189c

0800d7b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d7be:	4b0f      	ldr	r3, [pc, #60]	; (800d7fc <Get_SerialNum+0x44>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d7c4:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <Get_SerialNum+0x48>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7ca:	4b0e      	ldr	r3, [pc, #56]	; (800d804 <Get_SerialNum+0x4c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d009      	beq.n	800d7f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7de:	2208      	movs	r2, #8
 800d7e0:	4909      	ldr	r1, [pc, #36]	; (800d808 <Get_SerialNum+0x50>)
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 f814 	bl	800d810 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d7e8:	2204      	movs	r2, #4
 800d7ea:	4908      	ldr	r1, [pc, #32]	; (800d80c <Get_SerialNum+0x54>)
 800d7ec:	68b8      	ldr	r0, [r7, #8]
 800d7ee:	f000 f80f 	bl	800d810 <IntToUnicode>
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	1fff7a10 	.word	0x1fff7a10
 800d800:	1fff7a14 	.word	0x1fff7a14
 800d804:	1fff7a18 	.word	0x1fff7a18
 800d808:	20000162 	.word	0x20000162
 800d80c:	20000172 	.word	0x20000172

0800d810 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d822:	2300      	movs	r3, #0
 800d824:	75fb      	strb	r3, [r7, #23]
 800d826:	e027      	b.n	800d878 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	0f1b      	lsrs	r3, r3, #28
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	d80b      	bhi.n	800d848 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	0f1b      	lsrs	r3, r3, #28
 800d834:	b2da      	uxtb	r2, r3
 800d836:	7dfb      	ldrb	r3, [r7, #23]
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	4619      	mov	r1, r3
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	440b      	add	r3, r1
 800d840:	3230      	adds	r2, #48	; 0x30
 800d842:	b2d2      	uxtb	r2, r2
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	e00a      	b.n	800d85e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	0f1b      	lsrs	r3, r3, #28
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	4619      	mov	r1, r3
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	440b      	add	r3, r1
 800d858:	3237      	adds	r2, #55	; 0x37
 800d85a:	b2d2      	uxtb	r2, r2
 800d85c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	3301      	adds	r3, #1
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4413      	add	r3, r2
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d872:	7dfb      	ldrb	r3, [r7, #23]
 800d874:	3301      	adds	r3, #1
 800d876:	75fb      	strb	r3, [r7, #23]
 800d878:	7dfa      	ldrb	r2, [r7, #23]
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d3d3      	bcc.n	800d828 <IntToUnicode+0x18>
  }
}
 800d880:	bf00      	nop
 800d882:	371c      	adds	r7, #28
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d88c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d8c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d892:	e003      	b.n	800d89c <LoopCopyDataInit>

0800d894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d894:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d89a:	3104      	adds	r1, #4

0800d89c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d89c:	480b      	ldr	r0, [pc, #44]	; (800d8cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d89e:	4b0c      	ldr	r3, [pc, #48]	; (800d8d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d8a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d8a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d8a4:	d3f6      	bcc.n	800d894 <CopyDataInit>
  ldr  r2, =_sbss
 800d8a6:	4a0b      	ldr	r2, [pc, #44]	; (800d8d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d8a8:	e002      	b.n	800d8b0 <LoopFillZerobss>

0800d8aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d8aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d8ac:	f842 3b04 	str.w	r3, [r2], #4

0800d8b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d8b0:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d8b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d8b4:	d3f9      	bcc.n	800d8aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d8b6:	f7ff fa89 	bl	800cdcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d8ba:	f000 f817 	bl	800d8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d8be:	f7fe f86b 	bl	800b998 <main>
  bx  lr    
 800d8c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d8c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d8c8:	08011ba8 	.word	0x08011ba8
  ldr  r0, =_sdata
 800d8cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d8d0:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800d8d4:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 800d8d8:	20009ea0 	.word	0x20009ea0

0800d8dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d8dc:	e7fe      	b.n	800d8dc <ADC_IRQHandler>
	...

0800d8e0 <__errno>:
 800d8e0:	4b01      	ldr	r3, [pc, #4]	; (800d8e8 <__errno+0x8>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	2000017c 	.word	0x2000017c

0800d8ec <__libc_init_array>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	4e0d      	ldr	r6, [pc, #52]	; (800d924 <__libc_init_array+0x38>)
 800d8f0:	4c0d      	ldr	r4, [pc, #52]	; (800d928 <__libc_init_array+0x3c>)
 800d8f2:	1ba4      	subs	r4, r4, r6
 800d8f4:	10a4      	asrs	r4, r4, #2
 800d8f6:	2500      	movs	r5, #0
 800d8f8:	42a5      	cmp	r5, r4
 800d8fa:	d109      	bne.n	800d910 <__libc_init_array+0x24>
 800d8fc:	4e0b      	ldr	r6, [pc, #44]	; (800d92c <__libc_init_array+0x40>)
 800d8fe:	4c0c      	ldr	r4, [pc, #48]	; (800d930 <__libc_init_array+0x44>)
 800d900:	f003 fd80 	bl	8011404 <_init>
 800d904:	1ba4      	subs	r4, r4, r6
 800d906:	10a4      	asrs	r4, r4, #2
 800d908:	2500      	movs	r5, #0
 800d90a:	42a5      	cmp	r5, r4
 800d90c:	d105      	bne.n	800d91a <__libc_init_array+0x2e>
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
 800d910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d914:	4798      	blx	r3
 800d916:	3501      	adds	r5, #1
 800d918:	e7ee      	b.n	800d8f8 <__libc_init_array+0xc>
 800d91a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d91e:	4798      	blx	r3
 800d920:	3501      	adds	r5, #1
 800d922:	e7f2      	b.n	800d90a <__libc_init_array+0x1e>
 800d924:	08011ba0 	.word	0x08011ba0
 800d928:	08011ba0 	.word	0x08011ba0
 800d92c:	08011ba0 	.word	0x08011ba0
 800d930:	08011ba4 	.word	0x08011ba4

0800d934 <malloc>:
 800d934:	4b02      	ldr	r3, [pc, #8]	; (800d940 <malloc+0xc>)
 800d936:	4601      	mov	r1, r0
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f000 b86d 	b.w	800da18 <_malloc_r>
 800d93e:	bf00      	nop
 800d940:	2000017c 	.word	0x2000017c

0800d944 <free>:
 800d944:	4b02      	ldr	r3, [pc, #8]	; (800d950 <free+0xc>)
 800d946:	4601      	mov	r1, r0
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f000 b817 	b.w	800d97c <_free_r>
 800d94e:	bf00      	nop
 800d950:	2000017c 	.word	0x2000017c

0800d954 <memcpy>:
 800d954:	b510      	push	{r4, lr}
 800d956:	1e43      	subs	r3, r0, #1
 800d958:	440a      	add	r2, r1
 800d95a:	4291      	cmp	r1, r2
 800d95c:	d100      	bne.n	800d960 <memcpy+0xc>
 800d95e:	bd10      	pop	{r4, pc}
 800d960:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d964:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d968:	e7f7      	b.n	800d95a <memcpy+0x6>

0800d96a <memset>:
 800d96a:	4402      	add	r2, r0
 800d96c:	4603      	mov	r3, r0
 800d96e:	4293      	cmp	r3, r2
 800d970:	d100      	bne.n	800d974 <memset+0xa>
 800d972:	4770      	bx	lr
 800d974:	f803 1b01 	strb.w	r1, [r3], #1
 800d978:	e7f9      	b.n	800d96e <memset+0x4>
	...

0800d97c <_free_r>:
 800d97c:	b538      	push	{r3, r4, r5, lr}
 800d97e:	4605      	mov	r5, r0
 800d980:	2900      	cmp	r1, #0
 800d982:	d045      	beq.n	800da10 <_free_r+0x94>
 800d984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d988:	1f0c      	subs	r4, r1, #4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bfb8      	it	lt
 800d98e:	18e4      	addlt	r4, r4, r3
 800d990:	f002 ff82 	bl	8010898 <__malloc_lock>
 800d994:	4a1f      	ldr	r2, [pc, #124]	; (800da14 <_free_r+0x98>)
 800d996:	6813      	ldr	r3, [r2, #0]
 800d998:	4610      	mov	r0, r2
 800d99a:	b933      	cbnz	r3, 800d9aa <_free_r+0x2e>
 800d99c:	6063      	str	r3, [r4, #4]
 800d99e:	6014      	str	r4, [r2, #0]
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a6:	f002 bf78 	b.w	801089a <__malloc_unlock>
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	d90c      	bls.n	800d9c8 <_free_r+0x4c>
 800d9ae:	6821      	ldr	r1, [r4, #0]
 800d9b0:	1862      	adds	r2, r4, r1
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	bf04      	itt	eq
 800d9b6:	681a      	ldreq	r2, [r3, #0]
 800d9b8:	685b      	ldreq	r3, [r3, #4]
 800d9ba:	6063      	str	r3, [r4, #4]
 800d9bc:	bf04      	itt	eq
 800d9be:	1852      	addeq	r2, r2, r1
 800d9c0:	6022      	streq	r2, [r4, #0]
 800d9c2:	6004      	str	r4, [r0, #0]
 800d9c4:	e7ec      	b.n	800d9a0 <_free_r+0x24>
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	b10a      	cbz	r2, 800d9d0 <_free_r+0x54>
 800d9cc:	42a2      	cmp	r2, r4
 800d9ce:	d9fa      	bls.n	800d9c6 <_free_r+0x4a>
 800d9d0:	6819      	ldr	r1, [r3, #0]
 800d9d2:	1858      	adds	r0, r3, r1
 800d9d4:	42a0      	cmp	r0, r4
 800d9d6:	d10b      	bne.n	800d9f0 <_free_r+0x74>
 800d9d8:	6820      	ldr	r0, [r4, #0]
 800d9da:	4401      	add	r1, r0
 800d9dc:	1858      	adds	r0, r3, r1
 800d9de:	4282      	cmp	r2, r0
 800d9e0:	6019      	str	r1, [r3, #0]
 800d9e2:	d1dd      	bne.n	800d9a0 <_free_r+0x24>
 800d9e4:	6810      	ldr	r0, [r2, #0]
 800d9e6:	6852      	ldr	r2, [r2, #4]
 800d9e8:	605a      	str	r2, [r3, #4]
 800d9ea:	4401      	add	r1, r0
 800d9ec:	6019      	str	r1, [r3, #0]
 800d9ee:	e7d7      	b.n	800d9a0 <_free_r+0x24>
 800d9f0:	d902      	bls.n	800d9f8 <_free_r+0x7c>
 800d9f2:	230c      	movs	r3, #12
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	e7d3      	b.n	800d9a0 <_free_r+0x24>
 800d9f8:	6820      	ldr	r0, [r4, #0]
 800d9fa:	1821      	adds	r1, r4, r0
 800d9fc:	428a      	cmp	r2, r1
 800d9fe:	bf04      	itt	eq
 800da00:	6811      	ldreq	r1, [r2, #0]
 800da02:	6852      	ldreq	r2, [r2, #4]
 800da04:	6062      	str	r2, [r4, #4]
 800da06:	bf04      	itt	eq
 800da08:	1809      	addeq	r1, r1, r0
 800da0a:	6021      	streq	r1, [r4, #0]
 800da0c:	605c      	str	r4, [r3, #4]
 800da0e:	e7c7      	b.n	800d9a0 <_free_r+0x24>
 800da10:	bd38      	pop	{r3, r4, r5, pc}
 800da12:	bf00      	nop
 800da14:	2000191c 	.word	0x2000191c

0800da18 <_malloc_r>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	1ccd      	adds	r5, r1, #3
 800da1c:	f025 0503 	bic.w	r5, r5, #3
 800da20:	3508      	adds	r5, #8
 800da22:	2d0c      	cmp	r5, #12
 800da24:	bf38      	it	cc
 800da26:	250c      	movcc	r5, #12
 800da28:	2d00      	cmp	r5, #0
 800da2a:	4606      	mov	r6, r0
 800da2c:	db01      	blt.n	800da32 <_malloc_r+0x1a>
 800da2e:	42a9      	cmp	r1, r5
 800da30:	d903      	bls.n	800da3a <_malloc_r+0x22>
 800da32:	230c      	movs	r3, #12
 800da34:	6033      	str	r3, [r6, #0]
 800da36:	2000      	movs	r0, #0
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	f002 ff2d 	bl	8010898 <__malloc_lock>
 800da3e:	4a21      	ldr	r2, [pc, #132]	; (800dac4 <_malloc_r+0xac>)
 800da40:	6814      	ldr	r4, [r2, #0]
 800da42:	4621      	mov	r1, r4
 800da44:	b991      	cbnz	r1, 800da6c <_malloc_r+0x54>
 800da46:	4c20      	ldr	r4, [pc, #128]	; (800dac8 <_malloc_r+0xb0>)
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	b91b      	cbnz	r3, 800da54 <_malloc_r+0x3c>
 800da4c:	4630      	mov	r0, r6
 800da4e:	f000 fe7b 	bl	800e748 <_sbrk_r>
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	4629      	mov	r1, r5
 800da56:	4630      	mov	r0, r6
 800da58:	f000 fe76 	bl	800e748 <_sbrk_r>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d124      	bne.n	800daaa <_malloc_r+0x92>
 800da60:	230c      	movs	r3, #12
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	4630      	mov	r0, r6
 800da66:	f002 ff18 	bl	801089a <__malloc_unlock>
 800da6a:	e7e4      	b.n	800da36 <_malloc_r+0x1e>
 800da6c:	680b      	ldr	r3, [r1, #0]
 800da6e:	1b5b      	subs	r3, r3, r5
 800da70:	d418      	bmi.n	800daa4 <_malloc_r+0x8c>
 800da72:	2b0b      	cmp	r3, #11
 800da74:	d90f      	bls.n	800da96 <_malloc_r+0x7e>
 800da76:	600b      	str	r3, [r1, #0]
 800da78:	50cd      	str	r5, [r1, r3]
 800da7a:	18cc      	adds	r4, r1, r3
 800da7c:	4630      	mov	r0, r6
 800da7e:	f002 ff0c 	bl	801089a <__malloc_unlock>
 800da82:	f104 000b 	add.w	r0, r4, #11
 800da86:	1d23      	adds	r3, r4, #4
 800da88:	f020 0007 	bic.w	r0, r0, #7
 800da8c:	1ac3      	subs	r3, r0, r3
 800da8e:	d0d3      	beq.n	800da38 <_malloc_r+0x20>
 800da90:	425a      	negs	r2, r3
 800da92:	50e2      	str	r2, [r4, r3]
 800da94:	e7d0      	b.n	800da38 <_malloc_r+0x20>
 800da96:	428c      	cmp	r4, r1
 800da98:	684b      	ldr	r3, [r1, #4]
 800da9a:	bf16      	itet	ne
 800da9c:	6063      	strne	r3, [r4, #4]
 800da9e:	6013      	streq	r3, [r2, #0]
 800daa0:	460c      	movne	r4, r1
 800daa2:	e7eb      	b.n	800da7c <_malloc_r+0x64>
 800daa4:	460c      	mov	r4, r1
 800daa6:	6849      	ldr	r1, [r1, #4]
 800daa8:	e7cc      	b.n	800da44 <_malloc_r+0x2c>
 800daaa:	1cc4      	adds	r4, r0, #3
 800daac:	f024 0403 	bic.w	r4, r4, #3
 800dab0:	42a0      	cmp	r0, r4
 800dab2:	d005      	beq.n	800dac0 <_malloc_r+0xa8>
 800dab4:	1a21      	subs	r1, r4, r0
 800dab6:	4630      	mov	r0, r6
 800dab8:	f000 fe46 	bl	800e748 <_sbrk_r>
 800dabc:	3001      	adds	r0, #1
 800dabe:	d0cf      	beq.n	800da60 <_malloc_r+0x48>
 800dac0:	6025      	str	r5, [r4, #0]
 800dac2:	e7db      	b.n	800da7c <_malloc_r+0x64>
 800dac4:	2000191c 	.word	0x2000191c
 800dac8:	20001920 	.word	0x20001920

0800dacc <__cvt>:
 800dacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	ec55 4b10 	vmov	r4, r5, d0
 800dad4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dad6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dada:	2d00      	cmp	r5, #0
 800dadc:	460e      	mov	r6, r1
 800dade:	4691      	mov	r9, r2
 800dae0:	4619      	mov	r1, r3
 800dae2:	bfb8      	it	lt
 800dae4:	4622      	movlt	r2, r4
 800dae6:	462b      	mov	r3, r5
 800dae8:	f027 0720 	bic.w	r7, r7, #32
 800daec:	bfbb      	ittet	lt
 800daee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800daf2:	461d      	movlt	r5, r3
 800daf4:	2300      	movge	r3, #0
 800daf6:	232d      	movlt	r3, #45	; 0x2d
 800daf8:	bfb8      	it	lt
 800dafa:	4614      	movlt	r4, r2
 800dafc:	2f46      	cmp	r7, #70	; 0x46
 800dafe:	700b      	strb	r3, [r1, #0]
 800db00:	d004      	beq.n	800db0c <__cvt+0x40>
 800db02:	2f45      	cmp	r7, #69	; 0x45
 800db04:	d100      	bne.n	800db08 <__cvt+0x3c>
 800db06:	3601      	adds	r6, #1
 800db08:	2102      	movs	r1, #2
 800db0a:	e000      	b.n	800db0e <__cvt+0x42>
 800db0c:	2103      	movs	r1, #3
 800db0e:	ab03      	add	r3, sp, #12
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	ab02      	add	r3, sp, #8
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	4632      	mov	r2, r6
 800db18:	4653      	mov	r3, sl
 800db1a:	ec45 4b10 	vmov	d0, r4, r5
 800db1e:	f001 fdb7 	bl	800f690 <_dtoa_r>
 800db22:	2f47      	cmp	r7, #71	; 0x47
 800db24:	4680      	mov	r8, r0
 800db26:	d102      	bne.n	800db2e <__cvt+0x62>
 800db28:	f019 0f01 	tst.w	r9, #1
 800db2c:	d026      	beq.n	800db7c <__cvt+0xb0>
 800db2e:	2f46      	cmp	r7, #70	; 0x46
 800db30:	eb08 0906 	add.w	r9, r8, r6
 800db34:	d111      	bne.n	800db5a <__cvt+0x8e>
 800db36:	f898 3000 	ldrb.w	r3, [r8]
 800db3a:	2b30      	cmp	r3, #48	; 0x30
 800db3c:	d10a      	bne.n	800db54 <__cvt+0x88>
 800db3e:	2200      	movs	r2, #0
 800db40:	2300      	movs	r3, #0
 800db42:	4620      	mov	r0, r4
 800db44:	4629      	mov	r1, r5
 800db46:	f7f2 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800db4a:	b918      	cbnz	r0, 800db54 <__cvt+0x88>
 800db4c:	f1c6 0601 	rsb	r6, r6, #1
 800db50:	f8ca 6000 	str.w	r6, [sl]
 800db54:	f8da 3000 	ldr.w	r3, [sl]
 800db58:	4499      	add	r9, r3
 800db5a:	2200      	movs	r2, #0
 800db5c:	2300      	movs	r3, #0
 800db5e:	4620      	mov	r0, r4
 800db60:	4629      	mov	r1, r5
 800db62:	f7f2 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db66:	b938      	cbnz	r0, 800db78 <__cvt+0xac>
 800db68:	2230      	movs	r2, #48	; 0x30
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	454b      	cmp	r3, r9
 800db6e:	d205      	bcs.n	800db7c <__cvt+0xb0>
 800db70:	1c59      	adds	r1, r3, #1
 800db72:	9103      	str	r1, [sp, #12]
 800db74:	701a      	strb	r2, [r3, #0]
 800db76:	e7f8      	b.n	800db6a <__cvt+0x9e>
 800db78:	f8cd 900c 	str.w	r9, [sp, #12]
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db80:	eba3 0308 	sub.w	r3, r3, r8
 800db84:	4640      	mov	r0, r8
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	b004      	add	sp, #16
 800db8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800db8e <__exponent>:
 800db8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db90:	2900      	cmp	r1, #0
 800db92:	4604      	mov	r4, r0
 800db94:	bfba      	itte	lt
 800db96:	4249      	neglt	r1, r1
 800db98:	232d      	movlt	r3, #45	; 0x2d
 800db9a:	232b      	movge	r3, #43	; 0x2b
 800db9c:	2909      	cmp	r1, #9
 800db9e:	f804 2b02 	strb.w	r2, [r4], #2
 800dba2:	7043      	strb	r3, [r0, #1]
 800dba4:	dd20      	ble.n	800dbe8 <__exponent+0x5a>
 800dba6:	f10d 0307 	add.w	r3, sp, #7
 800dbaa:	461f      	mov	r7, r3
 800dbac:	260a      	movs	r6, #10
 800dbae:	fb91 f5f6 	sdiv	r5, r1, r6
 800dbb2:	fb06 1115 	mls	r1, r6, r5, r1
 800dbb6:	3130      	adds	r1, #48	; 0x30
 800dbb8:	2d09      	cmp	r5, #9
 800dbba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dbbe:	f103 32ff 	add.w	r2, r3, #4294967295
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	dc09      	bgt.n	800dbda <__exponent+0x4c>
 800dbc6:	3130      	adds	r1, #48	; 0x30
 800dbc8:	3b02      	subs	r3, #2
 800dbca:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dbce:	42bb      	cmp	r3, r7
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	d304      	bcc.n	800dbde <__exponent+0x50>
 800dbd4:	1a10      	subs	r0, r2, r0
 800dbd6:	b003      	add	sp, #12
 800dbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbda:	4613      	mov	r3, r2
 800dbdc:	e7e7      	b.n	800dbae <__exponent+0x20>
 800dbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbe2:	f804 2b01 	strb.w	r2, [r4], #1
 800dbe6:	e7f2      	b.n	800dbce <__exponent+0x40>
 800dbe8:	2330      	movs	r3, #48	; 0x30
 800dbea:	4419      	add	r1, r3
 800dbec:	7083      	strb	r3, [r0, #2]
 800dbee:	1d02      	adds	r2, r0, #4
 800dbf0:	70c1      	strb	r1, [r0, #3]
 800dbf2:	e7ef      	b.n	800dbd4 <__exponent+0x46>

0800dbf4 <_printf_float>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	b08d      	sub	sp, #52	; 0x34
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dc00:	4616      	mov	r6, r2
 800dc02:	461f      	mov	r7, r3
 800dc04:	4605      	mov	r5, r0
 800dc06:	f002 fe27 	bl	8010858 <_localeconv_r>
 800dc0a:	6803      	ldr	r3, [r0, #0]
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f2 fade 	bl	80001d0 <strlen>
 800dc14:	2300      	movs	r3, #0
 800dc16:	930a      	str	r3, [sp, #40]	; 0x28
 800dc18:	f8d8 3000 	ldr.w	r3, [r8]
 800dc1c:	9005      	str	r0, [sp, #20]
 800dc1e:	3307      	adds	r3, #7
 800dc20:	f023 0307 	bic.w	r3, r3, #7
 800dc24:	f103 0208 	add.w	r2, r3, #8
 800dc28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dc2c:	f8d4 b000 	ldr.w	fp, [r4]
 800dc30:	f8c8 2000 	str.w	r2, [r8]
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc3c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc44:	9307      	str	r3, [sp, #28]
 800dc46:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4e:	4ba7      	ldr	r3, [pc, #668]	; (800deec <_printf_float+0x2f8>)
 800dc50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc54:	f7f2 ff6a 	bl	8000b2c <__aeabi_dcmpun>
 800dc58:	bb70      	cbnz	r0, 800dcb8 <_printf_float+0xc4>
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	4ba3      	ldr	r3, [pc, #652]	; (800deec <_printf_float+0x2f8>)
 800dc60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc64:	f7f2 ff44 	bl	8000af0 <__aeabi_dcmple>
 800dc68:	bb30      	cbnz	r0, 800dcb8 <_printf_float+0xc4>
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 ff33 	bl	8000adc <__aeabi_dcmplt>
 800dc76:	b110      	cbz	r0, 800dc7e <_printf_float+0x8a>
 800dc78:	232d      	movs	r3, #45	; 0x2d
 800dc7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc7e:	4a9c      	ldr	r2, [pc, #624]	; (800def0 <_printf_float+0x2fc>)
 800dc80:	4b9c      	ldr	r3, [pc, #624]	; (800def4 <_printf_float+0x300>)
 800dc82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dc86:	bf8c      	ite	hi
 800dc88:	4690      	movhi	r8, r2
 800dc8a:	4698      	movls	r8, r3
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	f02b 0204 	bic.w	r2, fp, #4
 800dc92:	6123      	str	r3, [r4, #16]
 800dc94:	6022      	str	r2, [r4, #0]
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	9700      	str	r7, [sp, #0]
 800dc9c:	4633      	mov	r3, r6
 800dc9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800dca0:	4621      	mov	r1, r4
 800dca2:	4628      	mov	r0, r5
 800dca4:	f000 f9e6 	bl	800e074 <_printf_common>
 800dca8:	3001      	adds	r0, #1
 800dcaa:	f040 808d 	bne.w	800ddc8 <_printf_float+0x1d4>
 800dcae:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb2:	b00d      	add	sp, #52	; 0x34
 800dcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb8:	4642      	mov	r2, r8
 800dcba:	464b      	mov	r3, r9
 800dcbc:	4640      	mov	r0, r8
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	f7f2 ff34 	bl	8000b2c <__aeabi_dcmpun>
 800dcc4:	b110      	cbz	r0, 800dccc <_printf_float+0xd8>
 800dcc6:	4a8c      	ldr	r2, [pc, #560]	; (800def8 <_printf_float+0x304>)
 800dcc8:	4b8c      	ldr	r3, [pc, #560]	; (800defc <_printf_float+0x308>)
 800dcca:	e7da      	b.n	800dc82 <_printf_float+0x8e>
 800dccc:	6861      	ldr	r1, [r4, #4]
 800dcce:	1c4b      	adds	r3, r1, #1
 800dcd0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dcd4:	a80a      	add	r0, sp, #40	; 0x28
 800dcd6:	d13e      	bne.n	800dd56 <_printf_float+0x162>
 800dcd8:	2306      	movs	r3, #6
 800dcda:	6063      	str	r3, [r4, #4]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dce2:	ab09      	add	r3, sp, #36	; 0x24
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	ec49 8b10 	vmov	d0, r8, r9
 800dcea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	f8cd a004 	str.w	sl, [sp, #4]
 800dcf4:	6861      	ldr	r1, [r4, #4]
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f7ff fee8 	bl	800dacc <__cvt>
 800dcfc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800dd00:	2b47      	cmp	r3, #71	; 0x47
 800dd02:	4680      	mov	r8, r0
 800dd04:	d109      	bne.n	800dd1a <_printf_float+0x126>
 800dd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd08:	1cd8      	adds	r0, r3, #3
 800dd0a:	db02      	blt.n	800dd12 <_printf_float+0x11e>
 800dd0c:	6862      	ldr	r2, [r4, #4]
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	dd47      	ble.n	800dda2 <_printf_float+0x1ae>
 800dd12:	f1aa 0a02 	sub.w	sl, sl, #2
 800dd16:	fa5f fa8a 	uxtb.w	sl, sl
 800dd1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dd1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd20:	d824      	bhi.n	800dd6c <_printf_float+0x178>
 800dd22:	3901      	subs	r1, #1
 800dd24:	4652      	mov	r2, sl
 800dd26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd2a:	9109      	str	r1, [sp, #36]	; 0x24
 800dd2c:	f7ff ff2f 	bl	800db8e <__exponent>
 800dd30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd32:	1813      	adds	r3, r2, r0
 800dd34:	2a01      	cmp	r2, #1
 800dd36:	4681      	mov	r9, r0
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	dc02      	bgt.n	800dd42 <_printf_float+0x14e>
 800dd3c:	6822      	ldr	r2, [r4, #0]
 800dd3e:	07d1      	lsls	r1, r2, #31
 800dd40:	d501      	bpl.n	800dd46 <_printf_float+0x152>
 800dd42:	3301      	adds	r3, #1
 800dd44:	6123      	str	r3, [r4, #16]
 800dd46:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0a5      	beq.n	800dc9a <_printf_float+0xa6>
 800dd4e:	232d      	movs	r3, #45	; 0x2d
 800dd50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd54:	e7a1      	b.n	800dc9a <_printf_float+0xa6>
 800dd56:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800dd5a:	f000 8177 	beq.w	800e04c <_printf_float+0x458>
 800dd5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dd62:	d1bb      	bne.n	800dcdc <_printf_float+0xe8>
 800dd64:	2900      	cmp	r1, #0
 800dd66:	d1b9      	bne.n	800dcdc <_printf_float+0xe8>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e7b6      	b.n	800dcda <_printf_float+0xe6>
 800dd6c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800dd70:	d119      	bne.n	800dda6 <_printf_float+0x1b2>
 800dd72:	2900      	cmp	r1, #0
 800dd74:	6863      	ldr	r3, [r4, #4]
 800dd76:	dd0c      	ble.n	800dd92 <_printf_float+0x19e>
 800dd78:	6121      	str	r1, [r4, #16]
 800dd7a:	b913      	cbnz	r3, 800dd82 <_printf_float+0x18e>
 800dd7c:	6822      	ldr	r2, [r4, #0]
 800dd7e:	07d2      	lsls	r2, r2, #31
 800dd80:	d502      	bpl.n	800dd88 <_printf_float+0x194>
 800dd82:	3301      	adds	r3, #1
 800dd84:	440b      	add	r3, r1
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8a:	65a3      	str	r3, [r4, #88]	; 0x58
 800dd8c:	f04f 0900 	mov.w	r9, #0
 800dd90:	e7d9      	b.n	800dd46 <_printf_float+0x152>
 800dd92:	b913      	cbnz	r3, 800dd9a <_printf_float+0x1a6>
 800dd94:	6822      	ldr	r2, [r4, #0]
 800dd96:	07d0      	lsls	r0, r2, #31
 800dd98:	d501      	bpl.n	800dd9e <_printf_float+0x1aa>
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	e7f3      	b.n	800dd86 <_printf_float+0x192>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e7f1      	b.n	800dd86 <_printf_float+0x192>
 800dda2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dda6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	db05      	blt.n	800ddba <_printf_float+0x1c6>
 800ddae:	6822      	ldr	r2, [r4, #0]
 800ddb0:	6123      	str	r3, [r4, #16]
 800ddb2:	07d1      	lsls	r1, r2, #31
 800ddb4:	d5e8      	bpl.n	800dd88 <_printf_float+0x194>
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	e7e5      	b.n	800dd86 <_printf_float+0x192>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfd4      	ite	le
 800ddbe:	f1c3 0302 	rsble	r3, r3, #2
 800ddc2:	2301      	movgt	r3, #1
 800ddc4:	4413      	add	r3, r2
 800ddc6:	e7de      	b.n	800dd86 <_printf_float+0x192>
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	055a      	lsls	r2, r3, #21
 800ddcc:	d407      	bmi.n	800ddde <_printf_float+0x1ea>
 800ddce:	6923      	ldr	r3, [r4, #16]
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	4631      	mov	r1, r6
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	47b8      	blx	r7
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d12b      	bne.n	800de34 <_printf_float+0x240>
 800dddc:	e767      	b.n	800dcae <_printf_float+0xba>
 800ddde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dde2:	f240 80dc 	bls.w	800df9e <_printf_float+0x3aa>
 800dde6:	2200      	movs	r2, #0
 800dde8:	2300      	movs	r3, #0
 800ddea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddee:	f7f2 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d033      	beq.n	800de5e <_printf_float+0x26a>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	4a41      	ldr	r2, [pc, #260]	; (800df00 <_printf_float+0x30c>)
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f af54 	beq.w	800dcae <_printf_float+0xba>
 800de06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de0a:	429a      	cmp	r2, r3
 800de0c:	db02      	blt.n	800de14 <_printf_float+0x220>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	07d8      	lsls	r0, r3, #31
 800de12:	d50f      	bpl.n	800de34 <_printf_float+0x240>
 800de14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de18:	4631      	mov	r1, r6
 800de1a:	4628      	mov	r0, r5
 800de1c:	47b8      	blx	r7
 800de1e:	3001      	adds	r0, #1
 800de20:	f43f af45 	beq.w	800dcae <_printf_float+0xba>
 800de24:	f04f 0800 	mov.w	r8, #0
 800de28:	f104 091a 	add.w	r9, r4, #26
 800de2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de2e:	3b01      	subs	r3, #1
 800de30:	4543      	cmp	r3, r8
 800de32:	dc09      	bgt.n	800de48 <_printf_float+0x254>
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	079b      	lsls	r3, r3, #30
 800de38:	f100 8103 	bmi.w	800e042 <_printf_float+0x44e>
 800de3c:	68e0      	ldr	r0, [r4, #12]
 800de3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de40:	4298      	cmp	r0, r3
 800de42:	bfb8      	it	lt
 800de44:	4618      	movlt	r0, r3
 800de46:	e734      	b.n	800dcb2 <_printf_float+0xbe>
 800de48:	2301      	movs	r3, #1
 800de4a:	464a      	mov	r2, r9
 800de4c:	4631      	mov	r1, r6
 800de4e:	4628      	mov	r0, r5
 800de50:	47b8      	blx	r7
 800de52:	3001      	adds	r0, #1
 800de54:	f43f af2b 	beq.w	800dcae <_printf_float+0xba>
 800de58:	f108 0801 	add.w	r8, r8, #1
 800de5c:	e7e6      	b.n	800de2c <_printf_float+0x238>
 800de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	dc2b      	bgt.n	800debc <_printf_float+0x2c8>
 800de64:	2301      	movs	r3, #1
 800de66:	4a26      	ldr	r2, [pc, #152]	; (800df00 <_printf_float+0x30c>)
 800de68:	4631      	mov	r1, r6
 800de6a:	4628      	mov	r0, r5
 800de6c:	47b8      	blx	r7
 800de6e:	3001      	adds	r0, #1
 800de70:	f43f af1d 	beq.w	800dcae <_printf_float+0xba>
 800de74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de76:	b923      	cbnz	r3, 800de82 <_printf_float+0x28e>
 800de78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de7a:	b913      	cbnz	r3, 800de82 <_printf_float+0x28e>
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	07d9      	lsls	r1, r3, #31
 800de80:	d5d8      	bpl.n	800de34 <_printf_float+0x240>
 800de82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de86:	4631      	mov	r1, r6
 800de88:	4628      	mov	r0, r5
 800de8a:	47b8      	blx	r7
 800de8c:	3001      	adds	r0, #1
 800de8e:	f43f af0e 	beq.w	800dcae <_printf_float+0xba>
 800de92:	f04f 0900 	mov.w	r9, #0
 800de96:	f104 0a1a 	add.w	sl, r4, #26
 800de9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de9c:	425b      	negs	r3, r3
 800de9e:	454b      	cmp	r3, r9
 800dea0:	dc01      	bgt.n	800dea6 <_printf_float+0x2b2>
 800dea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea4:	e794      	b.n	800ddd0 <_printf_float+0x1dc>
 800dea6:	2301      	movs	r3, #1
 800dea8:	4652      	mov	r2, sl
 800deaa:	4631      	mov	r1, r6
 800deac:	4628      	mov	r0, r5
 800deae:	47b8      	blx	r7
 800deb0:	3001      	adds	r0, #1
 800deb2:	f43f aefc 	beq.w	800dcae <_printf_float+0xba>
 800deb6:	f109 0901 	add.w	r9, r9, #1
 800deba:	e7ee      	b.n	800de9a <_printf_float+0x2a6>
 800debc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800debe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dec0:	429a      	cmp	r2, r3
 800dec2:	bfa8      	it	ge
 800dec4:	461a      	movge	r2, r3
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	4691      	mov	r9, r2
 800deca:	dd07      	ble.n	800dedc <_printf_float+0x2e8>
 800decc:	4613      	mov	r3, r2
 800dece:	4631      	mov	r1, r6
 800ded0:	4642      	mov	r2, r8
 800ded2:	4628      	mov	r0, r5
 800ded4:	47b8      	blx	r7
 800ded6:	3001      	adds	r0, #1
 800ded8:	f43f aee9 	beq.w	800dcae <_printf_float+0xba>
 800dedc:	f104 031a 	add.w	r3, r4, #26
 800dee0:	f04f 0b00 	mov.w	fp, #0
 800dee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dee8:	9306      	str	r3, [sp, #24]
 800deea:	e015      	b.n	800df18 <_printf_float+0x324>
 800deec:	7fefffff 	.word	0x7fefffff
 800def0:	080118e4 	.word	0x080118e4
 800def4:	080118e0 	.word	0x080118e0
 800def8:	080118ec 	.word	0x080118ec
 800defc:	080118e8 	.word	0x080118e8
 800df00:	080118f0 	.word	0x080118f0
 800df04:	2301      	movs	r3, #1
 800df06:	9a06      	ldr	r2, [sp, #24]
 800df08:	4631      	mov	r1, r6
 800df0a:	4628      	mov	r0, r5
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	f43f aecd 	beq.w	800dcae <_printf_float+0xba>
 800df14:	f10b 0b01 	add.w	fp, fp, #1
 800df18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800df1c:	ebaa 0309 	sub.w	r3, sl, r9
 800df20:	455b      	cmp	r3, fp
 800df22:	dcef      	bgt.n	800df04 <_printf_float+0x310>
 800df24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df28:	429a      	cmp	r2, r3
 800df2a:	44d0      	add	r8, sl
 800df2c:	db15      	blt.n	800df5a <_printf_float+0x366>
 800df2e:	6823      	ldr	r3, [r4, #0]
 800df30:	07da      	lsls	r2, r3, #31
 800df32:	d412      	bmi.n	800df5a <_printf_float+0x366>
 800df34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df38:	eba3 020a 	sub.w	r2, r3, sl
 800df3c:	eba3 0a01 	sub.w	sl, r3, r1
 800df40:	4592      	cmp	sl, r2
 800df42:	bfa8      	it	ge
 800df44:	4692      	movge	sl, r2
 800df46:	f1ba 0f00 	cmp.w	sl, #0
 800df4a:	dc0e      	bgt.n	800df6a <_printf_float+0x376>
 800df4c:	f04f 0800 	mov.w	r8, #0
 800df50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df54:	f104 091a 	add.w	r9, r4, #26
 800df58:	e019      	b.n	800df8e <_printf_float+0x39a>
 800df5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	d1e5      	bne.n	800df34 <_printf_float+0x340>
 800df68:	e6a1      	b.n	800dcae <_printf_float+0xba>
 800df6a:	4653      	mov	r3, sl
 800df6c:	4642      	mov	r2, r8
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	47b8      	blx	r7
 800df74:	3001      	adds	r0, #1
 800df76:	d1e9      	bne.n	800df4c <_printf_float+0x358>
 800df78:	e699      	b.n	800dcae <_printf_float+0xba>
 800df7a:	2301      	movs	r3, #1
 800df7c:	464a      	mov	r2, r9
 800df7e:	4631      	mov	r1, r6
 800df80:	4628      	mov	r0, r5
 800df82:	47b8      	blx	r7
 800df84:	3001      	adds	r0, #1
 800df86:	f43f ae92 	beq.w	800dcae <_printf_float+0xba>
 800df8a:	f108 0801 	add.w	r8, r8, #1
 800df8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	eba3 030a 	sub.w	r3, r3, sl
 800df98:	4543      	cmp	r3, r8
 800df9a:	dcee      	bgt.n	800df7a <_printf_float+0x386>
 800df9c:	e74a      	b.n	800de34 <_printf_float+0x240>
 800df9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfa0:	2a01      	cmp	r2, #1
 800dfa2:	dc01      	bgt.n	800dfa8 <_printf_float+0x3b4>
 800dfa4:	07db      	lsls	r3, r3, #31
 800dfa6:	d53a      	bpl.n	800e01e <_printf_float+0x42a>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4642      	mov	r2, r8
 800dfac:	4631      	mov	r1, r6
 800dfae:	4628      	mov	r0, r5
 800dfb0:	47b8      	blx	r7
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	f43f ae7b 	beq.w	800dcae <_printf_float+0xba>
 800dfb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	47b8      	blx	r7
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	f108 0801 	add.w	r8, r8, #1
 800dfc8:	f43f ae71 	beq.w	800dcae <_printf_float+0xba>
 800dfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f103 3aff 	add.w	sl, r3, #4294967295
 800dfd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f7f2 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfde:	b9c8      	cbnz	r0, 800e014 <_printf_float+0x420>
 800dfe0:	4653      	mov	r3, sl
 800dfe2:	4642      	mov	r2, r8
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b8      	blx	r7
 800dfea:	3001      	adds	r0, #1
 800dfec:	d10e      	bne.n	800e00c <_printf_float+0x418>
 800dfee:	e65e      	b.n	800dcae <_printf_float+0xba>
 800dff0:	2301      	movs	r3, #1
 800dff2:	4652      	mov	r2, sl
 800dff4:	4631      	mov	r1, r6
 800dff6:	4628      	mov	r0, r5
 800dff8:	47b8      	blx	r7
 800dffa:	3001      	adds	r0, #1
 800dffc:	f43f ae57 	beq.w	800dcae <_printf_float+0xba>
 800e000:	f108 0801 	add.w	r8, r8, #1
 800e004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e006:	3b01      	subs	r3, #1
 800e008:	4543      	cmp	r3, r8
 800e00a:	dcf1      	bgt.n	800dff0 <_printf_float+0x3fc>
 800e00c:	464b      	mov	r3, r9
 800e00e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e012:	e6de      	b.n	800ddd2 <_printf_float+0x1de>
 800e014:	f04f 0800 	mov.w	r8, #0
 800e018:	f104 0a1a 	add.w	sl, r4, #26
 800e01c:	e7f2      	b.n	800e004 <_printf_float+0x410>
 800e01e:	2301      	movs	r3, #1
 800e020:	e7df      	b.n	800dfe2 <_printf_float+0x3ee>
 800e022:	2301      	movs	r3, #1
 800e024:	464a      	mov	r2, r9
 800e026:	4631      	mov	r1, r6
 800e028:	4628      	mov	r0, r5
 800e02a:	47b8      	blx	r7
 800e02c:	3001      	adds	r0, #1
 800e02e:	f43f ae3e 	beq.w	800dcae <_printf_float+0xba>
 800e032:	f108 0801 	add.w	r8, r8, #1
 800e036:	68e3      	ldr	r3, [r4, #12]
 800e038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e03a:	1a9b      	subs	r3, r3, r2
 800e03c:	4543      	cmp	r3, r8
 800e03e:	dcf0      	bgt.n	800e022 <_printf_float+0x42e>
 800e040:	e6fc      	b.n	800de3c <_printf_float+0x248>
 800e042:	f04f 0800 	mov.w	r8, #0
 800e046:	f104 0919 	add.w	r9, r4, #25
 800e04a:	e7f4      	b.n	800e036 <_printf_float+0x442>
 800e04c:	2900      	cmp	r1, #0
 800e04e:	f43f ae8b 	beq.w	800dd68 <_printf_float+0x174>
 800e052:	2300      	movs	r3, #0
 800e054:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e058:	ab09      	add	r3, sp, #36	; 0x24
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	ec49 8b10 	vmov	d0, r8, r9
 800e060:	6022      	str	r2, [r4, #0]
 800e062:	f8cd a004 	str.w	sl, [sp, #4]
 800e066:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e06a:	4628      	mov	r0, r5
 800e06c:	f7ff fd2e 	bl	800dacc <__cvt>
 800e070:	4680      	mov	r8, r0
 800e072:	e648      	b.n	800dd06 <_printf_float+0x112>

0800e074 <_printf_common>:
 800e074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e078:	4691      	mov	r9, r2
 800e07a:	461f      	mov	r7, r3
 800e07c:	688a      	ldr	r2, [r1, #8]
 800e07e:	690b      	ldr	r3, [r1, #16]
 800e080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e084:	4293      	cmp	r3, r2
 800e086:	bfb8      	it	lt
 800e088:	4613      	movlt	r3, r2
 800e08a:	f8c9 3000 	str.w	r3, [r9]
 800e08e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e092:	4606      	mov	r6, r0
 800e094:	460c      	mov	r4, r1
 800e096:	b112      	cbz	r2, 800e09e <_printf_common+0x2a>
 800e098:	3301      	adds	r3, #1
 800e09a:	f8c9 3000 	str.w	r3, [r9]
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	0699      	lsls	r1, r3, #26
 800e0a2:	bf42      	ittt	mi
 800e0a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e0a8:	3302      	addmi	r3, #2
 800e0aa:	f8c9 3000 	strmi.w	r3, [r9]
 800e0ae:	6825      	ldr	r5, [r4, #0]
 800e0b0:	f015 0506 	ands.w	r5, r5, #6
 800e0b4:	d107      	bne.n	800e0c6 <_printf_common+0x52>
 800e0b6:	f104 0a19 	add.w	sl, r4, #25
 800e0ba:	68e3      	ldr	r3, [r4, #12]
 800e0bc:	f8d9 2000 	ldr.w	r2, [r9]
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	42ab      	cmp	r3, r5
 800e0c4:	dc28      	bgt.n	800e118 <_printf_common+0xa4>
 800e0c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e0ca:	6822      	ldr	r2, [r4, #0]
 800e0cc:	3300      	adds	r3, #0
 800e0ce:	bf18      	it	ne
 800e0d0:	2301      	movne	r3, #1
 800e0d2:	0692      	lsls	r2, r2, #26
 800e0d4:	d42d      	bmi.n	800e132 <_printf_common+0xbe>
 800e0d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0da:	4639      	mov	r1, r7
 800e0dc:	4630      	mov	r0, r6
 800e0de:	47c0      	blx	r8
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	d020      	beq.n	800e126 <_printf_common+0xb2>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	68e5      	ldr	r5, [r4, #12]
 800e0e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e0ec:	f003 0306 	and.w	r3, r3, #6
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	bf08      	it	eq
 800e0f4:	1aad      	subeq	r5, r5, r2
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	6922      	ldr	r2, [r4, #16]
 800e0fa:	bf0c      	ite	eq
 800e0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e100:	2500      	movne	r5, #0
 800e102:	4293      	cmp	r3, r2
 800e104:	bfc4      	itt	gt
 800e106:	1a9b      	subgt	r3, r3, r2
 800e108:	18ed      	addgt	r5, r5, r3
 800e10a:	f04f 0900 	mov.w	r9, #0
 800e10e:	341a      	adds	r4, #26
 800e110:	454d      	cmp	r5, r9
 800e112:	d11a      	bne.n	800e14a <_printf_common+0xd6>
 800e114:	2000      	movs	r0, #0
 800e116:	e008      	b.n	800e12a <_printf_common+0xb6>
 800e118:	2301      	movs	r3, #1
 800e11a:	4652      	mov	r2, sl
 800e11c:	4639      	mov	r1, r7
 800e11e:	4630      	mov	r0, r6
 800e120:	47c0      	blx	r8
 800e122:	3001      	adds	r0, #1
 800e124:	d103      	bne.n	800e12e <_printf_common+0xba>
 800e126:	f04f 30ff 	mov.w	r0, #4294967295
 800e12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12e:	3501      	adds	r5, #1
 800e130:	e7c3      	b.n	800e0ba <_printf_common+0x46>
 800e132:	18e1      	adds	r1, r4, r3
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	2030      	movs	r0, #48	; 0x30
 800e138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e13c:	4422      	add	r2, r4
 800e13e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e146:	3302      	adds	r3, #2
 800e148:	e7c5      	b.n	800e0d6 <_printf_common+0x62>
 800e14a:	2301      	movs	r3, #1
 800e14c:	4622      	mov	r2, r4
 800e14e:	4639      	mov	r1, r7
 800e150:	4630      	mov	r0, r6
 800e152:	47c0      	blx	r8
 800e154:	3001      	adds	r0, #1
 800e156:	d0e6      	beq.n	800e126 <_printf_common+0xb2>
 800e158:	f109 0901 	add.w	r9, r9, #1
 800e15c:	e7d8      	b.n	800e110 <_printf_common+0x9c>
	...

0800e160 <_printf_i>:
 800e160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e168:	460c      	mov	r4, r1
 800e16a:	7e09      	ldrb	r1, [r1, #24]
 800e16c:	b085      	sub	sp, #20
 800e16e:	296e      	cmp	r1, #110	; 0x6e
 800e170:	4617      	mov	r7, r2
 800e172:	4606      	mov	r6, r0
 800e174:	4698      	mov	r8, r3
 800e176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e178:	f000 80b3 	beq.w	800e2e2 <_printf_i+0x182>
 800e17c:	d822      	bhi.n	800e1c4 <_printf_i+0x64>
 800e17e:	2963      	cmp	r1, #99	; 0x63
 800e180:	d036      	beq.n	800e1f0 <_printf_i+0x90>
 800e182:	d80a      	bhi.n	800e19a <_printf_i+0x3a>
 800e184:	2900      	cmp	r1, #0
 800e186:	f000 80b9 	beq.w	800e2fc <_printf_i+0x19c>
 800e18a:	2958      	cmp	r1, #88	; 0x58
 800e18c:	f000 8083 	beq.w	800e296 <_printf_i+0x136>
 800e190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e198:	e032      	b.n	800e200 <_printf_i+0xa0>
 800e19a:	2964      	cmp	r1, #100	; 0x64
 800e19c:	d001      	beq.n	800e1a2 <_printf_i+0x42>
 800e19e:	2969      	cmp	r1, #105	; 0x69
 800e1a0:	d1f6      	bne.n	800e190 <_printf_i+0x30>
 800e1a2:	6820      	ldr	r0, [r4, #0]
 800e1a4:	6813      	ldr	r3, [r2, #0]
 800e1a6:	0605      	lsls	r5, r0, #24
 800e1a8:	f103 0104 	add.w	r1, r3, #4
 800e1ac:	d52a      	bpl.n	800e204 <_printf_i+0xa4>
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6011      	str	r1, [r2, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	da03      	bge.n	800e1be <_printf_i+0x5e>
 800e1b6:	222d      	movs	r2, #45	; 0x2d
 800e1b8:	425b      	negs	r3, r3
 800e1ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e1be:	486f      	ldr	r0, [pc, #444]	; (800e37c <_printf_i+0x21c>)
 800e1c0:	220a      	movs	r2, #10
 800e1c2:	e039      	b.n	800e238 <_printf_i+0xd8>
 800e1c4:	2973      	cmp	r1, #115	; 0x73
 800e1c6:	f000 809d 	beq.w	800e304 <_printf_i+0x1a4>
 800e1ca:	d808      	bhi.n	800e1de <_printf_i+0x7e>
 800e1cc:	296f      	cmp	r1, #111	; 0x6f
 800e1ce:	d020      	beq.n	800e212 <_printf_i+0xb2>
 800e1d0:	2970      	cmp	r1, #112	; 0x70
 800e1d2:	d1dd      	bne.n	800e190 <_printf_i+0x30>
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	f043 0320 	orr.w	r3, r3, #32
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	e003      	b.n	800e1e6 <_printf_i+0x86>
 800e1de:	2975      	cmp	r1, #117	; 0x75
 800e1e0:	d017      	beq.n	800e212 <_printf_i+0xb2>
 800e1e2:	2978      	cmp	r1, #120	; 0x78
 800e1e4:	d1d4      	bne.n	800e190 <_printf_i+0x30>
 800e1e6:	2378      	movs	r3, #120	; 0x78
 800e1e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1ec:	4864      	ldr	r0, [pc, #400]	; (800e380 <_printf_i+0x220>)
 800e1ee:	e055      	b.n	800e29c <_printf_i+0x13c>
 800e1f0:	6813      	ldr	r3, [r2, #0]
 800e1f2:	1d19      	adds	r1, r3, #4
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	6011      	str	r1, [r2, #0]
 800e1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e200:	2301      	movs	r3, #1
 800e202:	e08c      	b.n	800e31e <_printf_i+0x1be>
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	6011      	str	r1, [r2, #0]
 800e208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e20c:	bf18      	it	ne
 800e20e:	b21b      	sxthne	r3, r3
 800e210:	e7cf      	b.n	800e1b2 <_printf_i+0x52>
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	6825      	ldr	r5, [r4, #0]
 800e216:	1d18      	adds	r0, r3, #4
 800e218:	6010      	str	r0, [r2, #0]
 800e21a:	0628      	lsls	r0, r5, #24
 800e21c:	d501      	bpl.n	800e222 <_printf_i+0xc2>
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	e002      	b.n	800e228 <_printf_i+0xc8>
 800e222:	0668      	lsls	r0, r5, #25
 800e224:	d5fb      	bpl.n	800e21e <_printf_i+0xbe>
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	4854      	ldr	r0, [pc, #336]	; (800e37c <_printf_i+0x21c>)
 800e22a:	296f      	cmp	r1, #111	; 0x6f
 800e22c:	bf14      	ite	ne
 800e22e:	220a      	movne	r2, #10
 800e230:	2208      	moveq	r2, #8
 800e232:	2100      	movs	r1, #0
 800e234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e238:	6865      	ldr	r5, [r4, #4]
 800e23a:	60a5      	str	r5, [r4, #8]
 800e23c:	2d00      	cmp	r5, #0
 800e23e:	f2c0 8095 	blt.w	800e36c <_printf_i+0x20c>
 800e242:	6821      	ldr	r1, [r4, #0]
 800e244:	f021 0104 	bic.w	r1, r1, #4
 800e248:	6021      	str	r1, [r4, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d13d      	bne.n	800e2ca <_printf_i+0x16a>
 800e24e:	2d00      	cmp	r5, #0
 800e250:	f040 808e 	bne.w	800e370 <_printf_i+0x210>
 800e254:	4665      	mov	r5, ip
 800e256:	2a08      	cmp	r2, #8
 800e258:	d10b      	bne.n	800e272 <_printf_i+0x112>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	07db      	lsls	r3, r3, #31
 800e25e:	d508      	bpl.n	800e272 <_printf_i+0x112>
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	6862      	ldr	r2, [r4, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	bfde      	ittt	le
 800e268:	2330      	movle	r3, #48	; 0x30
 800e26a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e26e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e272:	ebac 0305 	sub.w	r3, ip, r5
 800e276:	6123      	str	r3, [r4, #16]
 800e278:	f8cd 8000 	str.w	r8, [sp]
 800e27c:	463b      	mov	r3, r7
 800e27e:	aa03      	add	r2, sp, #12
 800e280:	4621      	mov	r1, r4
 800e282:	4630      	mov	r0, r6
 800e284:	f7ff fef6 	bl	800e074 <_printf_common>
 800e288:	3001      	adds	r0, #1
 800e28a:	d14d      	bne.n	800e328 <_printf_i+0x1c8>
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	b005      	add	sp, #20
 800e292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e296:	4839      	ldr	r0, [pc, #228]	; (800e37c <_printf_i+0x21c>)
 800e298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e29c:	6813      	ldr	r3, [r2, #0]
 800e29e:	6821      	ldr	r1, [r4, #0]
 800e2a0:	1d1d      	adds	r5, r3, #4
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6015      	str	r5, [r2, #0]
 800e2a6:	060a      	lsls	r2, r1, #24
 800e2a8:	d50b      	bpl.n	800e2c2 <_printf_i+0x162>
 800e2aa:	07ca      	lsls	r2, r1, #31
 800e2ac:	bf44      	itt	mi
 800e2ae:	f041 0120 	orrmi.w	r1, r1, #32
 800e2b2:	6021      	strmi	r1, [r4, #0]
 800e2b4:	b91b      	cbnz	r3, 800e2be <_printf_i+0x15e>
 800e2b6:	6822      	ldr	r2, [r4, #0]
 800e2b8:	f022 0220 	bic.w	r2, r2, #32
 800e2bc:	6022      	str	r2, [r4, #0]
 800e2be:	2210      	movs	r2, #16
 800e2c0:	e7b7      	b.n	800e232 <_printf_i+0xd2>
 800e2c2:	064d      	lsls	r5, r1, #25
 800e2c4:	bf48      	it	mi
 800e2c6:	b29b      	uxthmi	r3, r3
 800e2c8:	e7ef      	b.n	800e2aa <_printf_i+0x14a>
 800e2ca:	4665      	mov	r5, ip
 800e2cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2d0:	fb02 3311 	mls	r3, r2, r1, r3
 800e2d4:	5cc3      	ldrb	r3, [r0, r3]
 800e2d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e2da:	460b      	mov	r3, r1
 800e2dc:	2900      	cmp	r1, #0
 800e2de:	d1f5      	bne.n	800e2cc <_printf_i+0x16c>
 800e2e0:	e7b9      	b.n	800e256 <_printf_i+0xf6>
 800e2e2:	6813      	ldr	r3, [r2, #0]
 800e2e4:	6825      	ldr	r5, [r4, #0]
 800e2e6:	6961      	ldr	r1, [r4, #20]
 800e2e8:	1d18      	adds	r0, r3, #4
 800e2ea:	6010      	str	r0, [r2, #0]
 800e2ec:	0628      	lsls	r0, r5, #24
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	d501      	bpl.n	800e2f6 <_printf_i+0x196>
 800e2f2:	6019      	str	r1, [r3, #0]
 800e2f4:	e002      	b.n	800e2fc <_printf_i+0x19c>
 800e2f6:	066a      	lsls	r2, r5, #25
 800e2f8:	d5fb      	bpl.n	800e2f2 <_printf_i+0x192>
 800e2fa:	8019      	strh	r1, [r3, #0]
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	6123      	str	r3, [r4, #16]
 800e300:	4665      	mov	r5, ip
 800e302:	e7b9      	b.n	800e278 <_printf_i+0x118>
 800e304:	6813      	ldr	r3, [r2, #0]
 800e306:	1d19      	adds	r1, r3, #4
 800e308:	6011      	str	r1, [r2, #0]
 800e30a:	681d      	ldr	r5, [r3, #0]
 800e30c:	6862      	ldr	r2, [r4, #4]
 800e30e:	2100      	movs	r1, #0
 800e310:	4628      	mov	r0, r5
 800e312:	f7f1 ff65 	bl	80001e0 <memchr>
 800e316:	b108      	cbz	r0, 800e31c <_printf_i+0x1bc>
 800e318:	1b40      	subs	r0, r0, r5
 800e31a:	6060      	str	r0, [r4, #4]
 800e31c:	6863      	ldr	r3, [r4, #4]
 800e31e:	6123      	str	r3, [r4, #16]
 800e320:	2300      	movs	r3, #0
 800e322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e326:	e7a7      	b.n	800e278 <_printf_i+0x118>
 800e328:	6923      	ldr	r3, [r4, #16]
 800e32a:	462a      	mov	r2, r5
 800e32c:	4639      	mov	r1, r7
 800e32e:	4630      	mov	r0, r6
 800e330:	47c0      	blx	r8
 800e332:	3001      	adds	r0, #1
 800e334:	d0aa      	beq.n	800e28c <_printf_i+0x12c>
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	079b      	lsls	r3, r3, #30
 800e33a:	d413      	bmi.n	800e364 <_printf_i+0x204>
 800e33c:	68e0      	ldr	r0, [r4, #12]
 800e33e:	9b03      	ldr	r3, [sp, #12]
 800e340:	4298      	cmp	r0, r3
 800e342:	bfb8      	it	lt
 800e344:	4618      	movlt	r0, r3
 800e346:	e7a3      	b.n	800e290 <_printf_i+0x130>
 800e348:	2301      	movs	r3, #1
 800e34a:	464a      	mov	r2, r9
 800e34c:	4639      	mov	r1, r7
 800e34e:	4630      	mov	r0, r6
 800e350:	47c0      	blx	r8
 800e352:	3001      	adds	r0, #1
 800e354:	d09a      	beq.n	800e28c <_printf_i+0x12c>
 800e356:	3501      	adds	r5, #1
 800e358:	68e3      	ldr	r3, [r4, #12]
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	1a9b      	subs	r3, r3, r2
 800e35e:	42ab      	cmp	r3, r5
 800e360:	dcf2      	bgt.n	800e348 <_printf_i+0x1e8>
 800e362:	e7eb      	b.n	800e33c <_printf_i+0x1dc>
 800e364:	2500      	movs	r5, #0
 800e366:	f104 0919 	add.w	r9, r4, #25
 800e36a:	e7f5      	b.n	800e358 <_printf_i+0x1f8>
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1ac      	bne.n	800e2ca <_printf_i+0x16a>
 800e370:	7803      	ldrb	r3, [r0, #0]
 800e372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e37a:	e76c      	b.n	800e256 <_printf_i+0xf6>
 800e37c:	080118f2 	.word	0x080118f2
 800e380:	08011903 	.word	0x08011903

0800e384 <_scanf_float>:
 800e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e388:	469a      	mov	sl, r3
 800e38a:	688b      	ldr	r3, [r1, #8]
 800e38c:	4616      	mov	r6, r2
 800e38e:	1e5a      	subs	r2, r3, #1
 800e390:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e394:	b087      	sub	sp, #28
 800e396:	bf83      	ittte	hi
 800e398:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e39c:	189b      	addhi	r3, r3, r2
 800e39e:	9301      	strhi	r3, [sp, #4]
 800e3a0:	2300      	movls	r3, #0
 800e3a2:	bf86      	itte	hi
 800e3a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e3a8:	608b      	strhi	r3, [r1, #8]
 800e3aa:	9301      	strls	r3, [sp, #4]
 800e3ac:	680b      	ldr	r3, [r1, #0]
 800e3ae:	4688      	mov	r8, r1
 800e3b0:	f04f 0b00 	mov.w	fp, #0
 800e3b4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e3b8:	f848 3b1c 	str.w	r3, [r8], #28
 800e3bc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	4645      	mov	r5, r8
 800e3c6:	465a      	mov	r2, fp
 800e3c8:	46d9      	mov	r9, fp
 800e3ca:	f8cd b008 	str.w	fp, [sp, #8]
 800e3ce:	68a1      	ldr	r1, [r4, #8]
 800e3d0:	b181      	cbz	r1, 800e3f4 <_scanf_float+0x70>
 800e3d2:	6833      	ldr	r3, [r6, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2b49      	cmp	r3, #73	; 0x49
 800e3d8:	d071      	beq.n	800e4be <_scanf_float+0x13a>
 800e3da:	d84d      	bhi.n	800e478 <_scanf_float+0xf4>
 800e3dc:	2b39      	cmp	r3, #57	; 0x39
 800e3de:	d840      	bhi.n	800e462 <_scanf_float+0xde>
 800e3e0:	2b31      	cmp	r3, #49	; 0x31
 800e3e2:	f080 8088 	bcs.w	800e4f6 <_scanf_float+0x172>
 800e3e6:	2b2d      	cmp	r3, #45	; 0x2d
 800e3e8:	f000 8090 	beq.w	800e50c <_scanf_float+0x188>
 800e3ec:	d815      	bhi.n	800e41a <_scanf_float+0x96>
 800e3ee:	2b2b      	cmp	r3, #43	; 0x2b
 800e3f0:	f000 808c 	beq.w	800e50c <_scanf_float+0x188>
 800e3f4:	f1b9 0f00 	cmp.w	r9, #0
 800e3f8:	d003      	beq.n	800e402 <_scanf_float+0x7e>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	3a01      	subs	r2, #1
 800e404:	2a01      	cmp	r2, #1
 800e406:	f200 80ea 	bhi.w	800e5de <_scanf_float+0x25a>
 800e40a:	4545      	cmp	r5, r8
 800e40c:	f200 80dc 	bhi.w	800e5c8 <_scanf_float+0x244>
 800e410:	2601      	movs	r6, #1
 800e412:	4630      	mov	r0, r6
 800e414:	b007      	add	sp, #28
 800e416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41a:	2b2e      	cmp	r3, #46	; 0x2e
 800e41c:	f000 809f 	beq.w	800e55e <_scanf_float+0x1da>
 800e420:	2b30      	cmp	r3, #48	; 0x30
 800e422:	d1e7      	bne.n	800e3f4 <_scanf_float+0x70>
 800e424:	6820      	ldr	r0, [r4, #0]
 800e426:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e42a:	d064      	beq.n	800e4f6 <_scanf_float+0x172>
 800e42c:	9b01      	ldr	r3, [sp, #4]
 800e42e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e432:	6020      	str	r0, [r4, #0]
 800e434:	f109 0901 	add.w	r9, r9, #1
 800e438:	b11b      	cbz	r3, 800e442 <_scanf_float+0xbe>
 800e43a:	3b01      	subs	r3, #1
 800e43c:	3101      	adds	r1, #1
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	60a1      	str	r1, [r4, #8]
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	3b01      	subs	r3, #1
 800e446:	60a3      	str	r3, [r4, #8]
 800e448:	6923      	ldr	r3, [r4, #16]
 800e44a:	3301      	adds	r3, #1
 800e44c:	6123      	str	r3, [r4, #16]
 800e44e:	6873      	ldr	r3, [r6, #4]
 800e450:	3b01      	subs	r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	6073      	str	r3, [r6, #4]
 800e456:	f340 80ac 	ble.w	800e5b2 <_scanf_float+0x22e>
 800e45a:	6833      	ldr	r3, [r6, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	6033      	str	r3, [r6, #0]
 800e460:	e7b5      	b.n	800e3ce <_scanf_float+0x4a>
 800e462:	2b45      	cmp	r3, #69	; 0x45
 800e464:	f000 8085 	beq.w	800e572 <_scanf_float+0x1ee>
 800e468:	2b46      	cmp	r3, #70	; 0x46
 800e46a:	d06a      	beq.n	800e542 <_scanf_float+0x1be>
 800e46c:	2b41      	cmp	r3, #65	; 0x41
 800e46e:	d1c1      	bne.n	800e3f4 <_scanf_float+0x70>
 800e470:	2a01      	cmp	r2, #1
 800e472:	d1bf      	bne.n	800e3f4 <_scanf_float+0x70>
 800e474:	2202      	movs	r2, #2
 800e476:	e046      	b.n	800e506 <_scanf_float+0x182>
 800e478:	2b65      	cmp	r3, #101	; 0x65
 800e47a:	d07a      	beq.n	800e572 <_scanf_float+0x1ee>
 800e47c:	d818      	bhi.n	800e4b0 <_scanf_float+0x12c>
 800e47e:	2b54      	cmp	r3, #84	; 0x54
 800e480:	d066      	beq.n	800e550 <_scanf_float+0x1cc>
 800e482:	d811      	bhi.n	800e4a8 <_scanf_float+0x124>
 800e484:	2b4e      	cmp	r3, #78	; 0x4e
 800e486:	d1b5      	bne.n	800e3f4 <_scanf_float+0x70>
 800e488:	2a00      	cmp	r2, #0
 800e48a:	d146      	bne.n	800e51a <_scanf_float+0x196>
 800e48c:	f1b9 0f00 	cmp.w	r9, #0
 800e490:	d145      	bne.n	800e51e <_scanf_float+0x19a>
 800e492:	6821      	ldr	r1, [r4, #0]
 800e494:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e498:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e49c:	d13f      	bne.n	800e51e <_scanf_float+0x19a>
 800e49e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e4a2:	6021      	str	r1, [r4, #0]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	e02e      	b.n	800e506 <_scanf_float+0x182>
 800e4a8:	2b59      	cmp	r3, #89	; 0x59
 800e4aa:	d01e      	beq.n	800e4ea <_scanf_float+0x166>
 800e4ac:	2b61      	cmp	r3, #97	; 0x61
 800e4ae:	e7de      	b.n	800e46e <_scanf_float+0xea>
 800e4b0:	2b6e      	cmp	r3, #110	; 0x6e
 800e4b2:	d0e9      	beq.n	800e488 <_scanf_float+0x104>
 800e4b4:	d815      	bhi.n	800e4e2 <_scanf_float+0x15e>
 800e4b6:	2b66      	cmp	r3, #102	; 0x66
 800e4b8:	d043      	beq.n	800e542 <_scanf_float+0x1be>
 800e4ba:	2b69      	cmp	r3, #105	; 0x69
 800e4bc:	d19a      	bne.n	800e3f4 <_scanf_float+0x70>
 800e4be:	f1bb 0f00 	cmp.w	fp, #0
 800e4c2:	d138      	bne.n	800e536 <_scanf_float+0x1b2>
 800e4c4:	f1b9 0f00 	cmp.w	r9, #0
 800e4c8:	d197      	bne.n	800e3fa <_scanf_float+0x76>
 800e4ca:	6821      	ldr	r1, [r4, #0]
 800e4cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e4d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e4d4:	d195      	bne.n	800e402 <_scanf_float+0x7e>
 800e4d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e4da:	6021      	str	r1, [r4, #0]
 800e4dc:	f04f 0b01 	mov.w	fp, #1
 800e4e0:	e011      	b.n	800e506 <_scanf_float+0x182>
 800e4e2:	2b74      	cmp	r3, #116	; 0x74
 800e4e4:	d034      	beq.n	800e550 <_scanf_float+0x1cc>
 800e4e6:	2b79      	cmp	r3, #121	; 0x79
 800e4e8:	d184      	bne.n	800e3f4 <_scanf_float+0x70>
 800e4ea:	f1bb 0f07 	cmp.w	fp, #7
 800e4ee:	d181      	bne.n	800e3f4 <_scanf_float+0x70>
 800e4f0:	f04f 0b08 	mov.w	fp, #8
 800e4f4:	e007      	b.n	800e506 <_scanf_float+0x182>
 800e4f6:	eb12 0f0b 	cmn.w	r2, fp
 800e4fa:	f47f af7b 	bne.w	800e3f4 <_scanf_float+0x70>
 800e4fe:	6821      	ldr	r1, [r4, #0]
 800e500:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e504:	6021      	str	r1, [r4, #0]
 800e506:	702b      	strb	r3, [r5, #0]
 800e508:	3501      	adds	r5, #1
 800e50a:	e79a      	b.n	800e442 <_scanf_float+0xbe>
 800e50c:	6821      	ldr	r1, [r4, #0]
 800e50e:	0608      	lsls	r0, r1, #24
 800e510:	f57f af70 	bpl.w	800e3f4 <_scanf_float+0x70>
 800e514:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e518:	e7f4      	b.n	800e504 <_scanf_float+0x180>
 800e51a:	2a02      	cmp	r2, #2
 800e51c:	d047      	beq.n	800e5ae <_scanf_float+0x22a>
 800e51e:	f1bb 0f01 	cmp.w	fp, #1
 800e522:	d003      	beq.n	800e52c <_scanf_float+0x1a8>
 800e524:	f1bb 0f04 	cmp.w	fp, #4
 800e528:	f47f af64 	bne.w	800e3f4 <_scanf_float+0x70>
 800e52c:	f10b 0b01 	add.w	fp, fp, #1
 800e530:	fa5f fb8b 	uxtb.w	fp, fp
 800e534:	e7e7      	b.n	800e506 <_scanf_float+0x182>
 800e536:	f1bb 0f03 	cmp.w	fp, #3
 800e53a:	d0f7      	beq.n	800e52c <_scanf_float+0x1a8>
 800e53c:	f1bb 0f05 	cmp.w	fp, #5
 800e540:	e7f2      	b.n	800e528 <_scanf_float+0x1a4>
 800e542:	f1bb 0f02 	cmp.w	fp, #2
 800e546:	f47f af55 	bne.w	800e3f4 <_scanf_float+0x70>
 800e54a:	f04f 0b03 	mov.w	fp, #3
 800e54e:	e7da      	b.n	800e506 <_scanf_float+0x182>
 800e550:	f1bb 0f06 	cmp.w	fp, #6
 800e554:	f47f af4e 	bne.w	800e3f4 <_scanf_float+0x70>
 800e558:	f04f 0b07 	mov.w	fp, #7
 800e55c:	e7d3      	b.n	800e506 <_scanf_float+0x182>
 800e55e:	6821      	ldr	r1, [r4, #0]
 800e560:	0588      	lsls	r0, r1, #22
 800e562:	f57f af47 	bpl.w	800e3f4 <_scanf_float+0x70>
 800e566:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e56a:	6021      	str	r1, [r4, #0]
 800e56c:	f8cd 9008 	str.w	r9, [sp, #8]
 800e570:	e7c9      	b.n	800e506 <_scanf_float+0x182>
 800e572:	6821      	ldr	r1, [r4, #0]
 800e574:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e578:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e57c:	d006      	beq.n	800e58c <_scanf_float+0x208>
 800e57e:	0548      	lsls	r0, r1, #21
 800e580:	f57f af38 	bpl.w	800e3f4 <_scanf_float+0x70>
 800e584:	f1b9 0f00 	cmp.w	r9, #0
 800e588:	f43f af3b 	beq.w	800e402 <_scanf_float+0x7e>
 800e58c:	0588      	lsls	r0, r1, #22
 800e58e:	bf58      	it	pl
 800e590:	9802      	ldrpl	r0, [sp, #8]
 800e592:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e596:	bf58      	it	pl
 800e598:	eba9 0000 	subpl.w	r0, r9, r0
 800e59c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e5a0:	bf58      	it	pl
 800e5a2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e5a6:	6021      	str	r1, [r4, #0]
 800e5a8:	f04f 0900 	mov.w	r9, #0
 800e5ac:	e7ab      	b.n	800e506 <_scanf_float+0x182>
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	e7a9      	b.n	800e506 <_scanf_float+0x182>
 800e5b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e5b6:	9205      	str	r2, [sp, #20]
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	4798      	blx	r3
 800e5be:	9a05      	ldr	r2, [sp, #20]
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	f43f af04 	beq.w	800e3ce <_scanf_float+0x4a>
 800e5c6:	e715      	b.n	800e3f4 <_scanf_float+0x70>
 800e5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e5cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e5d0:	4632      	mov	r2, r6
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	4798      	blx	r3
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	6123      	str	r3, [r4, #16]
 800e5dc:	e715      	b.n	800e40a <_scanf_float+0x86>
 800e5de:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e5e2:	2b06      	cmp	r3, #6
 800e5e4:	d80a      	bhi.n	800e5fc <_scanf_float+0x278>
 800e5e6:	f1bb 0f02 	cmp.w	fp, #2
 800e5ea:	d968      	bls.n	800e6be <_scanf_float+0x33a>
 800e5ec:	f1ab 0b03 	sub.w	fp, fp, #3
 800e5f0:	fa5f fb8b 	uxtb.w	fp, fp
 800e5f4:	eba5 0b0b 	sub.w	fp, r5, fp
 800e5f8:	455d      	cmp	r5, fp
 800e5fa:	d14b      	bne.n	800e694 <_scanf_float+0x310>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	05da      	lsls	r2, r3, #23
 800e600:	d51f      	bpl.n	800e642 <_scanf_float+0x2be>
 800e602:	055b      	lsls	r3, r3, #21
 800e604:	d468      	bmi.n	800e6d8 <_scanf_float+0x354>
 800e606:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e60a:	6923      	ldr	r3, [r4, #16]
 800e60c:	2965      	cmp	r1, #101	; 0x65
 800e60e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e612:	f105 3bff 	add.w	fp, r5, #4294967295
 800e616:	6123      	str	r3, [r4, #16]
 800e618:	d00d      	beq.n	800e636 <_scanf_float+0x2b2>
 800e61a:	2945      	cmp	r1, #69	; 0x45
 800e61c:	d00b      	beq.n	800e636 <_scanf_float+0x2b2>
 800e61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e622:	4632      	mov	r2, r6
 800e624:	4638      	mov	r0, r7
 800e626:	4798      	blx	r3
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e62e:	3b01      	subs	r3, #1
 800e630:	f1a5 0b02 	sub.w	fp, r5, #2
 800e634:	6123      	str	r3, [r4, #16]
 800e636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e63a:	4632      	mov	r2, r6
 800e63c:	4638      	mov	r0, r7
 800e63e:	4798      	blx	r3
 800e640:	465d      	mov	r5, fp
 800e642:	6826      	ldr	r6, [r4, #0]
 800e644:	f016 0610 	ands.w	r6, r6, #16
 800e648:	d17a      	bne.n	800e740 <_scanf_float+0x3bc>
 800e64a:	702e      	strb	r6, [r5, #0]
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e656:	d142      	bne.n	800e6de <_scanf_float+0x35a>
 800e658:	9b02      	ldr	r3, [sp, #8]
 800e65a:	eba9 0303 	sub.w	r3, r9, r3
 800e65e:	425a      	negs	r2, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	d149      	bne.n	800e6f8 <_scanf_float+0x374>
 800e664:	2200      	movs	r2, #0
 800e666:	4641      	mov	r1, r8
 800e668:	4638      	mov	r0, r7
 800e66a:	f000 fec5 	bl	800f3f8 <_strtod_r>
 800e66e:	6825      	ldr	r5, [r4, #0]
 800e670:	f8da 3000 	ldr.w	r3, [sl]
 800e674:	f015 0f02 	tst.w	r5, #2
 800e678:	f103 0204 	add.w	r2, r3, #4
 800e67c:	ec59 8b10 	vmov	r8, r9, d0
 800e680:	f8ca 2000 	str.w	r2, [sl]
 800e684:	d043      	beq.n	800e70e <_scanf_float+0x38a>
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	e9c3 8900 	strd	r8, r9, [r3]
 800e68c:	68e3      	ldr	r3, [r4, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	60e3      	str	r3, [r4, #12]
 800e692:	e6be      	b.n	800e412 <_scanf_float+0x8e>
 800e694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e698:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e69c:	4632      	mov	r2, r6
 800e69e:	4638      	mov	r0, r7
 800e6a0:	4798      	blx	r3
 800e6a2:	6923      	ldr	r3, [r4, #16]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	6123      	str	r3, [r4, #16]
 800e6a8:	e7a6      	b.n	800e5f8 <_scanf_float+0x274>
 800e6aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	4798      	blx	r3
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	6123      	str	r3, [r4, #16]
 800e6be:	4545      	cmp	r5, r8
 800e6c0:	d8f3      	bhi.n	800e6aa <_scanf_float+0x326>
 800e6c2:	e6a5      	b.n	800e410 <_scanf_float+0x8c>
 800e6c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e6cc:	4632      	mov	r2, r6
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	4798      	blx	r3
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	6123      	str	r3, [r4, #16]
 800e6d8:	4545      	cmp	r5, r8
 800e6da:	d8f3      	bhi.n	800e6c4 <_scanf_float+0x340>
 800e6dc:	e698      	b.n	800e410 <_scanf_float+0x8c>
 800e6de:	9b03      	ldr	r3, [sp, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0bf      	beq.n	800e664 <_scanf_float+0x2e0>
 800e6e4:	9904      	ldr	r1, [sp, #16]
 800e6e6:	230a      	movs	r3, #10
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	3101      	adds	r1, #1
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f000 ff0f 	bl	800f510 <_strtol_r>
 800e6f2:	9b03      	ldr	r3, [sp, #12]
 800e6f4:	9d04      	ldr	r5, [sp, #16]
 800e6f6:	1ac2      	subs	r2, r0, r3
 800e6f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e6fc:	429d      	cmp	r5, r3
 800e6fe:	bf28      	it	cs
 800e700:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e704:	490f      	ldr	r1, [pc, #60]	; (800e744 <_scanf_float+0x3c0>)
 800e706:	4628      	mov	r0, r5
 800e708:	f000 f834 	bl	800e774 <siprintf>
 800e70c:	e7aa      	b.n	800e664 <_scanf_float+0x2e0>
 800e70e:	f015 0504 	ands.w	r5, r5, #4
 800e712:	d1b8      	bne.n	800e686 <_scanf_float+0x302>
 800e714:	681f      	ldr	r7, [r3, #0]
 800e716:	ee10 2a10 	vmov	r2, s0
 800e71a:	464b      	mov	r3, r9
 800e71c:	ee10 0a10 	vmov	r0, s0
 800e720:	4649      	mov	r1, r9
 800e722:	f7f2 fa03 	bl	8000b2c <__aeabi_dcmpun>
 800e726:	b128      	cbz	r0, 800e734 <_scanf_float+0x3b0>
 800e728:	4628      	mov	r0, r5
 800e72a:	f000 f81d 	bl	800e768 <nanf>
 800e72e:	ed87 0a00 	vstr	s0, [r7]
 800e732:	e7ab      	b.n	800e68c <_scanf_float+0x308>
 800e734:	4640      	mov	r0, r8
 800e736:	4649      	mov	r1, r9
 800e738:	f7f2 fa56 	bl	8000be8 <__aeabi_d2f>
 800e73c:	6038      	str	r0, [r7, #0]
 800e73e:	e7a5      	b.n	800e68c <_scanf_float+0x308>
 800e740:	2600      	movs	r6, #0
 800e742:	e666      	b.n	800e412 <_scanf_float+0x8e>
 800e744:	08011914 	.word	0x08011914

0800e748 <_sbrk_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4c06      	ldr	r4, [pc, #24]	; (800e764 <_sbrk_r+0x1c>)
 800e74c:	2300      	movs	r3, #0
 800e74e:	4605      	mov	r5, r0
 800e750:	4608      	mov	r0, r1
 800e752:	6023      	str	r3, [r4, #0]
 800e754:	f7fe fb0e 	bl	800cd74 <_sbrk>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_sbrk_r+0x1a>
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_sbrk_r+0x1a>
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	20009e9c 	.word	0x20009e9c

0800e768 <nanf>:
 800e768:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e770 <nanf+0x8>
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	7fc00000 	.word	0x7fc00000

0800e774 <siprintf>:
 800e774:	b40e      	push	{r1, r2, r3}
 800e776:	b500      	push	{lr}
 800e778:	b09c      	sub	sp, #112	; 0x70
 800e77a:	ab1d      	add	r3, sp, #116	; 0x74
 800e77c:	9002      	str	r0, [sp, #8]
 800e77e:	9006      	str	r0, [sp, #24]
 800e780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e784:	4809      	ldr	r0, [pc, #36]	; (800e7ac <siprintf+0x38>)
 800e786:	9107      	str	r1, [sp, #28]
 800e788:	9104      	str	r1, [sp, #16]
 800e78a:	4909      	ldr	r1, [pc, #36]	; (800e7b0 <siprintf+0x3c>)
 800e78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e790:	9105      	str	r1, [sp, #20]
 800e792:	6800      	ldr	r0, [r0, #0]
 800e794:	9301      	str	r3, [sp, #4]
 800e796:	a902      	add	r1, sp, #8
 800e798:	f002 fce8 	bl	801116c <_svfiprintf_r>
 800e79c:	9b02      	ldr	r3, [sp, #8]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	b01c      	add	sp, #112	; 0x70
 800e7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7a8:	b003      	add	sp, #12
 800e7aa:	4770      	bx	lr
 800e7ac:	2000017c 	.word	0x2000017c
 800e7b0:	ffff0208 	.word	0xffff0208

0800e7b4 <strncmp>:
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	b16a      	cbz	r2, 800e7d4 <strncmp+0x20>
 800e7b8:	3901      	subs	r1, #1
 800e7ba:	1884      	adds	r4, r0, r2
 800e7bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e7c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d103      	bne.n	800e7d0 <strncmp+0x1c>
 800e7c8:	42a0      	cmp	r0, r4
 800e7ca:	d001      	beq.n	800e7d0 <strncmp+0x1c>
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1f5      	bne.n	800e7bc <strncmp+0x8>
 800e7d0:	1a98      	subs	r0, r3, r2
 800e7d2:	bd10      	pop	{r4, pc}
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	e7fc      	b.n	800e7d2 <strncmp+0x1e>

0800e7d8 <sulp>:
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	ec45 4b10 	vmov	d0, r4, r5
 800e7e2:	4616      	mov	r6, r2
 800e7e4:	f002 fb26 	bl	8010e34 <__ulp>
 800e7e8:	ec51 0b10 	vmov	r0, r1, d0
 800e7ec:	b17e      	cbz	r6, 800e80e <sulp+0x36>
 800e7ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e7f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	dd09      	ble.n	800e80e <sulp+0x36>
 800e7fa:	051b      	lsls	r3, r3, #20
 800e7fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e800:	2400      	movs	r4, #0
 800e802:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e806:	4622      	mov	r2, r4
 800e808:	462b      	mov	r3, r5
 800e80a:	f7f1 fef5 	bl	80005f8 <__aeabi_dmul>
 800e80e:	bd70      	pop	{r4, r5, r6, pc}

0800e810 <_strtod_l>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	461f      	mov	r7, r3
 800e816:	b0a1      	sub	sp, #132	; 0x84
 800e818:	2300      	movs	r3, #0
 800e81a:	4681      	mov	r9, r0
 800e81c:	4638      	mov	r0, r7
 800e81e:	460e      	mov	r6, r1
 800e820:	9217      	str	r2, [sp, #92]	; 0x5c
 800e822:	931c      	str	r3, [sp, #112]	; 0x70
 800e824:	f002 f815 	bl	8010852 <__localeconv_l>
 800e828:	4680      	mov	r8, r0
 800e82a:	6800      	ldr	r0, [r0, #0]
 800e82c:	f7f1 fcd0 	bl	80001d0 <strlen>
 800e830:	f04f 0a00 	mov.w	sl, #0
 800e834:	4604      	mov	r4, r0
 800e836:	f04f 0b00 	mov.w	fp, #0
 800e83a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e83c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e83e:	781a      	ldrb	r2, [r3, #0]
 800e840:	2a0d      	cmp	r2, #13
 800e842:	d832      	bhi.n	800e8aa <_strtod_l+0x9a>
 800e844:	2a09      	cmp	r2, #9
 800e846:	d236      	bcs.n	800e8b6 <_strtod_l+0xa6>
 800e848:	2a00      	cmp	r2, #0
 800e84a:	d03e      	beq.n	800e8ca <_strtod_l+0xba>
 800e84c:	2300      	movs	r3, #0
 800e84e:	930d      	str	r3, [sp, #52]	; 0x34
 800e850:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e852:	782b      	ldrb	r3, [r5, #0]
 800e854:	2b30      	cmp	r3, #48	; 0x30
 800e856:	f040 80ac 	bne.w	800e9b2 <_strtod_l+0x1a2>
 800e85a:	786b      	ldrb	r3, [r5, #1]
 800e85c:	2b58      	cmp	r3, #88	; 0x58
 800e85e:	d001      	beq.n	800e864 <_strtod_l+0x54>
 800e860:	2b78      	cmp	r3, #120	; 0x78
 800e862:	d167      	bne.n	800e934 <_strtod_l+0x124>
 800e864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e866:	9301      	str	r3, [sp, #4]
 800e868:	ab1c      	add	r3, sp, #112	; 0x70
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	9702      	str	r7, [sp, #8]
 800e86e:	ab1d      	add	r3, sp, #116	; 0x74
 800e870:	4a88      	ldr	r2, [pc, #544]	; (800ea94 <_strtod_l+0x284>)
 800e872:	a91b      	add	r1, sp, #108	; 0x6c
 800e874:	4648      	mov	r0, r9
 800e876:	f001 fd12 	bl	801029e <__gethex>
 800e87a:	f010 0407 	ands.w	r4, r0, #7
 800e87e:	4606      	mov	r6, r0
 800e880:	d005      	beq.n	800e88e <_strtod_l+0x7e>
 800e882:	2c06      	cmp	r4, #6
 800e884:	d12b      	bne.n	800e8de <_strtod_l+0xce>
 800e886:	3501      	adds	r5, #1
 800e888:	2300      	movs	r3, #0
 800e88a:	951b      	str	r5, [sp, #108]	; 0x6c
 800e88c:	930d      	str	r3, [sp, #52]	; 0x34
 800e88e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 859a 	bne.w	800f3ca <_strtod_l+0xbba>
 800e896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e898:	b1e3      	cbz	r3, 800e8d4 <_strtod_l+0xc4>
 800e89a:	4652      	mov	r2, sl
 800e89c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e8a0:	ec43 2b10 	vmov	d0, r2, r3
 800e8a4:	b021      	add	sp, #132	; 0x84
 800e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8aa:	2a2b      	cmp	r2, #43	; 0x2b
 800e8ac:	d015      	beq.n	800e8da <_strtod_l+0xca>
 800e8ae:	2a2d      	cmp	r2, #45	; 0x2d
 800e8b0:	d004      	beq.n	800e8bc <_strtod_l+0xac>
 800e8b2:	2a20      	cmp	r2, #32
 800e8b4:	d1ca      	bne.n	800e84c <_strtod_l+0x3c>
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8ba:	e7bf      	b.n	800e83c <_strtod_l+0x2c>
 800e8bc:	2201      	movs	r2, #1
 800e8be:	920d      	str	r2, [sp, #52]	; 0x34
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800e8c4:	785b      	ldrb	r3, [r3, #1]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1c2      	bne.n	800e850 <_strtod_l+0x40>
 800e8ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8cc:	961b      	str	r6, [sp, #108]	; 0x6c
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 8579 	bne.w	800f3c6 <_strtod_l+0xbb6>
 800e8d4:	4652      	mov	r2, sl
 800e8d6:	465b      	mov	r3, fp
 800e8d8:	e7e2      	b.n	800e8a0 <_strtod_l+0x90>
 800e8da:	2200      	movs	r2, #0
 800e8dc:	e7ef      	b.n	800e8be <_strtod_l+0xae>
 800e8de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e8e0:	b13a      	cbz	r2, 800e8f2 <_strtod_l+0xe2>
 800e8e2:	2135      	movs	r1, #53	; 0x35
 800e8e4:	a81e      	add	r0, sp, #120	; 0x78
 800e8e6:	f002 fb9d 	bl	8011024 <__copybits>
 800e8ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f002 f809 	bl	8010904 <_Bfree>
 800e8f2:	3c01      	subs	r4, #1
 800e8f4:	2c04      	cmp	r4, #4
 800e8f6:	d806      	bhi.n	800e906 <_strtod_l+0xf6>
 800e8f8:	e8df f004 	tbb	[pc, r4]
 800e8fc:	1714030a 	.word	0x1714030a
 800e900:	0a          	.byte	0x0a
 800e901:	00          	.byte	0x00
 800e902:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e906:	0730      	lsls	r0, r6, #28
 800e908:	d5c1      	bpl.n	800e88e <_strtod_l+0x7e>
 800e90a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e90e:	e7be      	b.n	800e88e <_strtod_l+0x7e>
 800e910:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e914:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e916:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e91a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e91e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e922:	e7f0      	b.n	800e906 <_strtod_l+0xf6>
 800e924:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ea98 <_strtod_l+0x288>
 800e928:	e7ed      	b.n	800e906 <_strtod_l+0xf6>
 800e92a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e92e:	f04f 3aff 	mov.w	sl, #4294967295
 800e932:	e7e8      	b.n	800e906 <_strtod_l+0xf6>
 800e934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	921b      	str	r2, [sp, #108]	; 0x6c
 800e93a:	785b      	ldrb	r3, [r3, #1]
 800e93c:	2b30      	cmp	r3, #48	; 0x30
 800e93e:	d0f9      	beq.n	800e934 <_strtod_l+0x124>
 800e940:	2b00      	cmp	r3, #0
 800e942:	d0a4      	beq.n	800e88e <_strtod_l+0x7e>
 800e944:	2301      	movs	r3, #1
 800e946:	2500      	movs	r5, #0
 800e948:	9306      	str	r3, [sp, #24]
 800e94a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e94c:	9308      	str	r3, [sp, #32]
 800e94e:	9507      	str	r5, [sp, #28]
 800e950:	9505      	str	r5, [sp, #20]
 800e952:	220a      	movs	r2, #10
 800e954:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e956:	7807      	ldrb	r7, [r0, #0]
 800e958:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e95c:	b2d9      	uxtb	r1, r3
 800e95e:	2909      	cmp	r1, #9
 800e960:	d929      	bls.n	800e9b6 <_strtod_l+0x1a6>
 800e962:	4622      	mov	r2, r4
 800e964:	f8d8 1000 	ldr.w	r1, [r8]
 800e968:	f7ff ff24 	bl	800e7b4 <strncmp>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d031      	beq.n	800e9d4 <_strtod_l+0x1c4>
 800e970:	2000      	movs	r0, #0
 800e972:	9c05      	ldr	r4, [sp, #20]
 800e974:	9004      	str	r0, [sp, #16]
 800e976:	463b      	mov	r3, r7
 800e978:	4602      	mov	r2, r0
 800e97a:	2b65      	cmp	r3, #101	; 0x65
 800e97c:	d001      	beq.n	800e982 <_strtod_l+0x172>
 800e97e:	2b45      	cmp	r3, #69	; 0x45
 800e980:	d114      	bne.n	800e9ac <_strtod_l+0x19c>
 800e982:	b924      	cbnz	r4, 800e98e <_strtod_l+0x17e>
 800e984:	b910      	cbnz	r0, 800e98c <_strtod_l+0x17c>
 800e986:	9b06      	ldr	r3, [sp, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d09e      	beq.n	800e8ca <_strtod_l+0xba>
 800e98c:	2400      	movs	r4, #0
 800e98e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e990:	1c73      	adds	r3, r6, #1
 800e992:	931b      	str	r3, [sp, #108]	; 0x6c
 800e994:	7873      	ldrb	r3, [r6, #1]
 800e996:	2b2b      	cmp	r3, #43	; 0x2b
 800e998:	d078      	beq.n	800ea8c <_strtod_l+0x27c>
 800e99a:	2b2d      	cmp	r3, #45	; 0x2d
 800e99c:	d070      	beq.n	800ea80 <_strtod_l+0x270>
 800e99e:	f04f 0c00 	mov.w	ip, #0
 800e9a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e9a6:	2f09      	cmp	r7, #9
 800e9a8:	d97c      	bls.n	800eaa4 <_strtod_l+0x294>
 800e9aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800e9ac:	f04f 0e00 	mov.w	lr, #0
 800e9b0:	e09a      	b.n	800eae8 <_strtod_l+0x2d8>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	e7c7      	b.n	800e946 <_strtod_l+0x136>
 800e9b6:	9905      	ldr	r1, [sp, #20]
 800e9b8:	2908      	cmp	r1, #8
 800e9ba:	bfdd      	ittte	le
 800e9bc:	9907      	ldrle	r1, [sp, #28]
 800e9be:	fb02 3301 	mlale	r3, r2, r1, r3
 800e9c2:	9307      	strle	r3, [sp, #28]
 800e9c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e9c8:	9b05      	ldr	r3, [sp, #20]
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	9305      	str	r3, [sp, #20]
 800e9d0:	901b      	str	r0, [sp, #108]	; 0x6c
 800e9d2:	e7bf      	b.n	800e954 <_strtod_l+0x144>
 800e9d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9d6:	191a      	adds	r2, r3, r4
 800e9d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e9da:	9a05      	ldr	r2, [sp, #20]
 800e9dc:	5d1b      	ldrb	r3, [r3, r4]
 800e9de:	2a00      	cmp	r2, #0
 800e9e0:	d037      	beq.n	800ea52 <_strtod_l+0x242>
 800e9e2:	9c05      	ldr	r4, [sp, #20]
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e9ea:	2909      	cmp	r1, #9
 800e9ec:	d913      	bls.n	800ea16 <_strtod_l+0x206>
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	9104      	str	r1, [sp, #16]
 800e9f2:	e7c2      	b.n	800e97a <_strtod_l+0x16a>
 800e9f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9f6:	1c5a      	adds	r2, r3, #1
 800e9f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e9fa:	785b      	ldrb	r3, [r3, #1]
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	2b30      	cmp	r3, #48	; 0x30
 800ea00:	d0f8      	beq.n	800e9f4 <_strtod_l+0x1e4>
 800ea02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ea06:	2a08      	cmp	r2, #8
 800ea08:	f200 84e4 	bhi.w	800f3d4 <_strtod_l+0xbc4>
 800ea0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ea0e:	9208      	str	r2, [sp, #32]
 800ea10:	4602      	mov	r2, r0
 800ea12:	2000      	movs	r0, #0
 800ea14:	4604      	mov	r4, r0
 800ea16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ea1a:	f100 0101 	add.w	r1, r0, #1
 800ea1e:	d012      	beq.n	800ea46 <_strtod_l+0x236>
 800ea20:	440a      	add	r2, r1
 800ea22:	eb00 0c04 	add.w	ip, r0, r4
 800ea26:	4621      	mov	r1, r4
 800ea28:	270a      	movs	r7, #10
 800ea2a:	458c      	cmp	ip, r1
 800ea2c:	d113      	bne.n	800ea56 <_strtod_l+0x246>
 800ea2e:	1821      	adds	r1, r4, r0
 800ea30:	2908      	cmp	r1, #8
 800ea32:	f104 0401 	add.w	r4, r4, #1
 800ea36:	4404      	add	r4, r0
 800ea38:	dc19      	bgt.n	800ea6e <_strtod_l+0x25e>
 800ea3a:	9b07      	ldr	r3, [sp, #28]
 800ea3c:	210a      	movs	r1, #10
 800ea3e:	fb01 e303 	mla	r3, r1, r3, lr
 800ea42:	9307      	str	r3, [sp, #28]
 800ea44:	2100      	movs	r1, #0
 800ea46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea48:	1c58      	adds	r0, r3, #1
 800ea4a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ea4c:	785b      	ldrb	r3, [r3, #1]
 800ea4e:	4608      	mov	r0, r1
 800ea50:	e7c9      	b.n	800e9e6 <_strtod_l+0x1d6>
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	e7d3      	b.n	800e9fe <_strtod_l+0x1ee>
 800ea56:	2908      	cmp	r1, #8
 800ea58:	f101 0101 	add.w	r1, r1, #1
 800ea5c:	dc03      	bgt.n	800ea66 <_strtod_l+0x256>
 800ea5e:	9b07      	ldr	r3, [sp, #28]
 800ea60:	437b      	muls	r3, r7
 800ea62:	9307      	str	r3, [sp, #28]
 800ea64:	e7e1      	b.n	800ea2a <_strtod_l+0x21a>
 800ea66:	2910      	cmp	r1, #16
 800ea68:	bfd8      	it	le
 800ea6a:	437d      	mulle	r5, r7
 800ea6c:	e7dd      	b.n	800ea2a <_strtod_l+0x21a>
 800ea6e:	2c10      	cmp	r4, #16
 800ea70:	bfdc      	itt	le
 800ea72:	210a      	movle	r1, #10
 800ea74:	fb01 e505 	mlale	r5, r1, r5, lr
 800ea78:	e7e4      	b.n	800ea44 <_strtod_l+0x234>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	9304      	str	r3, [sp, #16]
 800ea7e:	e781      	b.n	800e984 <_strtod_l+0x174>
 800ea80:	f04f 0c01 	mov.w	ip, #1
 800ea84:	1cb3      	adds	r3, r6, #2
 800ea86:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea88:	78b3      	ldrb	r3, [r6, #2]
 800ea8a:	e78a      	b.n	800e9a2 <_strtod_l+0x192>
 800ea8c:	f04f 0c00 	mov.w	ip, #0
 800ea90:	e7f8      	b.n	800ea84 <_strtod_l+0x274>
 800ea92:	bf00      	nop
 800ea94:	0801191c 	.word	0x0801191c
 800ea98:	7ff00000 	.word	0x7ff00000
 800ea9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea9e:	1c5f      	adds	r7, r3, #1
 800eaa0:	971b      	str	r7, [sp, #108]	; 0x6c
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	2b30      	cmp	r3, #48	; 0x30
 800eaa6:	d0f9      	beq.n	800ea9c <_strtod_l+0x28c>
 800eaa8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800eaac:	2f08      	cmp	r7, #8
 800eaae:	f63f af7d 	bhi.w	800e9ac <_strtod_l+0x19c>
 800eab2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800eab6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eab8:	930a      	str	r3, [sp, #40]	; 0x28
 800eaba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eabc:	1c5f      	adds	r7, r3, #1
 800eabe:	971b      	str	r7, [sp, #108]	; 0x6c
 800eac0:	785b      	ldrb	r3, [r3, #1]
 800eac2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800eac6:	f1b8 0f09 	cmp.w	r8, #9
 800eaca:	d937      	bls.n	800eb3c <_strtod_l+0x32c>
 800eacc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eace:	1a7f      	subs	r7, r7, r1
 800ead0:	2f08      	cmp	r7, #8
 800ead2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ead6:	dc37      	bgt.n	800eb48 <_strtod_l+0x338>
 800ead8:	45be      	cmp	lr, r7
 800eada:	bfa8      	it	ge
 800eadc:	46be      	movge	lr, r7
 800eade:	f1bc 0f00 	cmp.w	ip, #0
 800eae2:	d001      	beq.n	800eae8 <_strtod_l+0x2d8>
 800eae4:	f1ce 0e00 	rsb	lr, lr, #0
 800eae8:	2c00      	cmp	r4, #0
 800eaea:	d151      	bne.n	800eb90 <_strtod_l+0x380>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f47f aece 	bne.w	800e88e <_strtod_l+0x7e>
 800eaf2:	9a06      	ldr	r2, [sp, #24]
 800eaf4:	2a00      	cmp	r2, #0
 800eaf6:	f47f aeca 	bne.w	800e88e <_strtod_l+0x7e>
 800eafa:	9a04      	ldr	r2, [sp, #16]
 800eafc:	2a00      	cmp	r2, #0
 800eafe:	f47f aee4 	bne.w	800e8ca <_strtod_l+0xba>
 800eb02:	2b4e      	cmp	r3, #78	; 0x4e
 800eb04:	d027      	beq.n	800eb56 <_strtod_l+0x346>
 800eb06:	dc21      	bgt.n	800eb4c <_strtod_l+0x33c>
 800eb08:	2b49      	cmp	r3, #73	; 0x49
 800eb0a:	f47f aede 	bne.w	800e8ca <_strtod_l+0xba>
 800eb0e:	49a0      	ldr	r1, [pc, #640]	; (800ed90 <_strtod_l+0x580>)
 800eb10:	a81b      	add	r0, sp, #108	; 0x6c
 800eb12:	f001 fdf7 	bl	8010704 <__match>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f43f aed7 	beq.w	800e8ca <_strtod_l+0xba>
 800eb1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb1e:	499d      	ldr	r1, [pc, #628]	; (800ed94 <_strtod_l+0x584>)
 800eb20:	3b01      	subs	r3, #1
 800eb22:	a81b      	add	r0, sp, #108	; 0x6c
 800eb24:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb26:	f001 fded 	bl	8010704 <__match>
 800eb2a:	b910      	cbnz	r0, 800eb32 <_strtod_l+0x322>
 800eb2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb2e:	3301      	adds	r3, #1
 800eb30:	931b      	str	r3, [sp, #108]	; 0x6c
 800eb32:	f8df b274 	ldr.w	fp, [pc, #628]	; 800eda8 <_strtod_l+0x598>
 800eb36:	f04f 0a00 	mov.w	sl, #0
 800eb3a:	e6a8      	b.n	800e88e <_strtod_l+0x7e>
 800eb3c:	210a      	movs	r1, #10
 800eb3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800eb42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eb46:	e7b8      	b.n	800eaba <_strtod_l+0x2aa>
 800eb48:	46be      	mov	lr, r7
 800eb4a:	e7c8      	b.n	800eade <_strtod_l+0x2ce>
 800eb4c:	2b69      	cmp	r3, #105	; 0x69
 800eb4e:	d0de      	beq.n	800eb0e <_strtod_l+0x2fe>
 800eb50:	2b6e      	cmp	r3, #110	; 0x6e
 800eb52:	f47f aeba 	bne.w	800e8ca <_strtod_l+0xba>
 800eb56:	4990      	ldr	r1, [pc, #576]	; (800ed98 <_strtod_l+0x588>)
 800eb58:	a81b      	add	r0, sp, #108	; 0x6c
 800eb5a:	f001 fdd3 	bl	8010704 <__match>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f43f aeb3 	beq.w	800e8ca <_strtod_l+0xba>
 800eb64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b28      	cmp	r3, #40	; 0x28
 800eb6a:	d10e      	bne.n	800eb8a <_strtod_l+0x37a>
 800eb6c:	aa1e      	add	r2, sp, #120	; 0x78
 800eb6e:	498b      	ldr	r1, [pc, #556]	; (800ed9c <_strtod_l+0x58c>)
 800eb70:	a81b      	add	r0, sp, #108	; 0x6c
 800eb72:	f001 fddb 	bl	801072c <__hexnan>
 800eb76:	2805      	cmp	r0, #5
 800eb78:	d107      	bne.n	800eb8a <_strtod_l+0x37a>
 800eb7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb7c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800eb80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eb84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eb88:	e681      	b.n	800e88e <_strtod_l+0x7e>
 800eb8a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800edb0 <_strtod_l+0x5a0>
 800eb8e:	e7d2      	b.n	800eb36 <_strtod_l+0x326>
 800eb90:	ebae 0302 	sub.w	r3, lr, r2
 800eb94:	9306      	str	r3, [sp, #24]
 800eb96:	9b05      	ldr	r3, [sp, #20]
 800eb98:	9807      	ldr	r0, [sp, #28]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	bf08      	it	eq
 800eb9e:	4623      	moveq	r3, r4
 800eba0:	2c10      	cmp	r4, #16
 800eba2:	9305      	str	r3, [sp, #20]
 800eba4:	46a0      	mov	r8, r4
 800eba6:	bfa8      	it	ge
 800eba8:	f04f 0810 	movge.w	r8, #16
 800ebac:	f7f1 fcaa 	bl	8000504 <__aeabi_ui2d>
 800ebb0:	2c09      	cmp	r4, #9
 800ebb2:	4682      	mov	sl, r0
 800ebb4:	468b      	mov	fp, r1
 800ebb6:	dc13      	bgt.n	800ebe0 <_strtod_l+0x3d0>
 800ebb8:	9b06      	ldr	r3, [sp, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f43f ae67 	beq.w	800e88e <_strtod_l+0x7e>
 800ebc0:	9b06      	ldr	r3, [sp, #24]
 800ebc2:	dd7a      	ble.n	800ecba <_strtod_l+0x4aa>
 800ebc4:	2b16      	cmp	r3, #22
 800ebc6:	dc61      	bgt.n	800ec8c <_strtod_l+0x47c>
 800ebc8:	4a75      	ldr	r2, [pc, #468]	; (800eda0 <_strtod_l+0x590>)
 800ebca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ebce:	e9de 0100 	ldrd	r0, r1, [lr]
 800ebd2:	4652      	mov	r2, sl
 800ebd4:	465b      	mov	r3, fp
 800ebd6:	f7f1 fd0f 	bl	80005f8 <__aeabi_dmul>
 800ebda:	4682      	mov	sl, r0
 800ebdc:	468b      	mov	fp, r1
 800ebde:	e656      	b.n	800e88e <_strtod_l+0x7e>
 800ebe0:	4b6f      	ldr	r3, [pc, #444]	; (800eda0 <_strtod_l+0x590>)
 800ebe2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ebe6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ebea:	f7f1 fd05 	bl	80005f8 <__aeabi_dmul>
 800ebee:	4606      	mov	r6, r0
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	460f      	mov	r7, r1
 800ebf4:	f7f1 fc86 	bl	8000504 <__aeabi_ui2d>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	2c0f      	cmp	r4, #15
 800ec06:	4682      	mov	sl, r0
 800ec08:	468b      	mov	fp, r1
 800ec0a:	ddd5      	ble.n	800ebb8 <_strtod_l+0x3a8>
 800ec0c:	9b06      	ldr	r3, [sp, #24]
 800ec0e:	eba4 0808 	sub.w	r8, r4, r8
 800ec12:	4498      	add	r8, r3
 800ec14:	f1b8 0f00 	cmp.w	r8, #0
 800ec18:	f340 8096 	ble.w	800ed48 <_strtod_l+0x538>
 800ec1c:	f018 030f 	ands.w	r3, r8, #15
 800ec20:	d00a      	beq.n	800ec38 <_strtod_l+0x428>
 800ec22:	495f      	ldr	r1, [pc, #380]	; (800eda0 <_strtod_l+0x590>)
 800ec24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec28:	4652      	mov	r2, sl
 800ec2a:	465b      	mov	r3, fp
 800ec2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec30:	f7f1 fce2 	bl	80005f8 <__aeabi_dmul>
 800ec34:	4682      	mov	sl, r0
 800ec36:	468b      	mov	fp, r1
 800ec38:	f038 080f 	bics.w	r8, r8, #15
 800ec3c:	d073      	beq.n	800ed26 <_strtod_l+0x516>
 800ec3e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ec42:	dd47      	ble.n	800ecd4 <_strtod_l+0x4c4>
 800ec44:	2400      	movs	r4, #0
 800ec46:	46a0      	mov	r8, r4
 800ec48:	9407      	str	r4, [sp, #28]
 800ec4a:	9405      	str	r4, [sp, #20]
 800ec4c:	2322      	movs	r3, #34	; 0x22
 800ec4e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800eda8 <_strtod_l+0x598>
 800ec52:	f8c9 3000 	str.w	r3, [r9]
 800ec56:	f04f 0a00 	mov.w	sl, #0
 800ec5a:	9b07      	ldr	r3, [sp, #28]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f43f ae16 	beq.w	800e88e <_strtod_l+0x7e>
 800ec62:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec64:	4648      	mov	r0, r9
 800ec66:	f001 fe4d 	bl	8010904 <_Bfree>
 800ec6a:	9905      	ldr	r1, [sp, #20]
 800ec6c:	4648      	mov	r0, r9
 800ec6e:	f001 fe49 	bl	8010904 <_Bfree>
 800ec72:	4641      	mov	r1, r8
 800ec74:	4648      	mov	r0, r9
 800ec76:	f001 fe45 	bl	8010904 <_Bfree>
 800ec7a:	9907      	ldr	r1, [sp, #28]
 800ec7c:	4648      	mov	r0, r9
 800ec7e:	f001 fe41 	bl	8010904 <_Bfree>
 800ec82:	4621      	mov	r1, r4
 800ec84:	4648      	mov	r0, r9
 800ec86:	f001 fe3d 	bl	8010904 <_Bfree>
 800ec8a:	e600      	b.n	800e88e <_strtod_l+0x7e>
 800ec8c:	9a06      	ldr	r2, [sp, #24]
 800ec8e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ec92:	4293      	cmp	r3, r2
 800ec94:	dbba      	blt.n	800ec0c <_strtod_l+0x3fc>
 800ec96:	4d42      	ldr	r5, [pc, #264]	; (800eda0 <_strtod_l+0x590>)
 800ec98:	f1c4 040f 	rsb	r4, r4, #15
 800ec9c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800eca0:	4652      	mov	r2, sl
 800eca2:	465b      	mov	r3, fp
 800eca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca8:	f7f1 fca6 	bl	80005f8 <__aeabi_dmul>
 800ecac:	9b06      	ldr	r3, [sp, #24]
 800ecae:	1b1c      	subs	r4, r3, r4
 800ecb0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ecb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecb8:	e78d      	b.n	800ebd6 <_strtod_l+0x3c6>
 800ecba:	f113 0f16 	cmn.w	r3, #22
 800ecbe:	dba5      	blt.n	800ec0c <_strtod_l+0x3fc>
 800ecc0:	4a37      	ldr	r2, [pc, #220]	; (800eda0 <_strtod_l+0x590>)
 800ecc2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ecc6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ecca:	4650      	mov	r0, sl
 800eccc:	4659      	mov	r1, fp
 800ecce:	f7f1 fdbd 	bl	800084c <__aeabi_ddiv>
 800ecd2:	e782      	b.n	800ebda <_strtod_l+0x3ca>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	4e33      	ldr	r6, [pc, #204]	; (800eda4 <_strtod_l+0x594>)
 800ecd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ecdc:	4650      	mov	r0, sl
 800ecde:	4659      	mov	r1, fp
 800ece0:	461d      	mov	r5, r3
 800ece2:	f1b8 0f01 	cmp.w	r8, #1
 800ece6:	dc21      	bgt.n	800ed2c <_strtod_l+0x51c>
 800ece8:	b10b      	cbz	r3, 800ecee <_strtod_l+0x4de>
 800ecea:	4682      	mov	sl, r0
 800ecec:	468b      	mov	fp, r1
 800ecee:	4b2d      	ldr	r3, [pc, #180]	; (800eda4 <_strtod_l+0x594>)
 800ecf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ecf4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ecf8:	4652      	mov	r2, sl
 800ecfa:	465b      	mov	r3, fp
 800ecfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ed00:	f7f1 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ed04:	4b28      	ldr	r3, [pc, #160]	; (800eda8 <_strtod_l+0x598>)
 800ed06:	460a      	mov	r2, r1
 800ed08:	400b      	ands	r3, r1
 800ed0a:	4928      	ldr	r1, [pc, #160]	; (800edac <_strtod_l+0x59c>)
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	4682      	mov	sl, r0
 800ed10:	d898      	bhi.n	800ec44 <_strtod_l+0x434>
 800ed12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ed16:	428b      	cmp	r3, r1
 800ed18:	bf86      	itte	hi
 800ed1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800edb4 <_strtod_l+0x5a4>
 800ed1e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ed26:	2300      	movs	r3, #0
 800ed28:	9304      	str	r3, [sp, #16]
 800ed2a:	e077      	b.n	800ee1c <_strtod_l+0x60c>
 800ed2c:	f018 0f01 	tst.w	r8, #1
 800ed30:	d006      	beq.n	800ed40 <_strtod_l+0x530>
 800ed32:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	3501      	adds	r5, #1
 800ed42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed46:	e7cc      	b.n	800ece2 <_strtod_l+0x4d2>
 800ed48:	d0ed      	beq.n	800ed26 <_strtod_l+0x516>
 800ed4a:	f1c8 0800 	rsb	r8, r8, #0
 800ed4e:	f018 020f 	ands.w	r2, r8, #15
 800ed52:	d00a      	beq.n	800ed6a <_strtod_l+0x55a>
 800ed54:	4b12      	ldr	r3, [pc, #72]	; (800eda0 <_strtod_l+0x590>)
 800ed56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	4659      	mov	r1, fp
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	f7f1 fd73 	bl	800084c <__aeabi_ddiv>
 800ed66:	4682      	mov	sl, r0
 800ed68:	468b      	mov	fp, r1
 800ed6a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ed6e:	d0da      	beq.n	800ed26 <_strtod_l+0x516>
 800ed70:	f1b8 0f1f 	cmp.w	r8, #31
 800ed74:	dd20      	ble.n	800edb8 <_strtod_l+0x5a8>
 800ed76:	2400      	movs	r4, #0
 800ed78:	46a0      	mov	r8, r4
 800ed7a:	9407      	str	r4, [sp, #28]
 800ed7c:	9405      	str	r4, [sp, #20]
 800ed7e:	2322      	movs	r3, #34	; 0x22
 800ed80:	f04f 0a00 	mov.w	sl, #0
 800ed84:	f04f 0b00 	mov.w	fp, #0
 800ed88:	f8c9 3000 	str.w	r3, [r9]
 800ed8c:	e765      	b.n	800ec5a <_strtod_l+0x44a>
 800ed8e:	bf00      	nop
 800ed90:	080118e5 	.word	0x080118e5
 800ed94:	08011973 	.word	0x08011973
 800ed98:	080118ed 	.word	0x080118ed
 800ed9c:	08011930 	.word	0x08011930
 800eda0:	080119b0 	.word	0x080119b0
 800eda4:	08011988 	.word	0x08011988
 800eda8:	7ff00000 	.word	0x7ff00000
 800edac:	7ca00000 	.word	0x7ca00000
 800edb0:	fff80000 	.word	0xfff80000
 800edb4:	7fefffff 	.word	0x7fefffff
 800edb8:	f018 0310 	ands.w	r3, r8, #16
 800edbc:	bf18      	it	ne
 800edbe:	236a      	movne	r3, #106	; 0x6a
 800edc0:	4da0      	ldr	r5, [pc, #640]	; (800f044 <_strtod_l+0x834>)
 800edc2:	9304      	str	r3, [sp, #16]
 800edc4:	4650      	mov	r0, sl
 800edc6:	4659      	mov	r1, fp
 800edc8:	2300      	movs	r3, #0
 800edca:	f1b8 0f00 	cmp.w	r8, #0
 800edce:	f300 810a 	bgt.w	800efe6 <_strtod_l+0x7d6>
 800edd2:	b10b      	cbz	r3, 800edd8 <_strtod_l+0x5c8>
 800edd4:	4682      	mov	sl, r0
 800edd6:	468b      	mov	fp, r1
 800edd8:	9b04      	ldr	r3, [sp, #16]
 800edda:	b1bb      	cbz	r3, 800ee0c <_strtod_l+0x5fc>
 800eddc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ede0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	4659      	mov	r1, fp
 800ede8:	dd10      	ble.n	800ee0c <_strtod_l+0x5fc>
 800edea:	2b1f      	cmp	r3, #31
 800edec:	f340 8107 	ble.w	800effe <_strtod_l+0x7ee>
 800edf0:	2b34      	cmp	r3, #52	; 0x34
 800edf2:	bfde      	ittt	le
 800edf4:	3b20      	suble	r3, #32
 800edf6:	f04f 32ff 	movle.w	r2, #4294967295
 800edfa:	fa02 f303 	lslle.w	r3, r2, r3
 800edfe:	f04f 0a00 	mov.w	sl, #0
 800ee02:	bfcc      	ite	gt
 800ee04:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ee08:	ea03 0b01 	andle.w	fp, r3, r1
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	2300      	movs	r3, #0
 800ee10:	4650      	mov	r0, sl
 800ee12:	4659      	mov	r1, fp
 800ee14:	f7f1 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d1ac      	bne.n	800ed76 <_strtod_l+0x566>
 800ee1c:	9b07      	ldr	r3, [sp, #28]
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	9a05      	ldr	r2, [sp, #20]
 800ee22:	9908      	ldr	r1, [sp, #32]
 800ee24:	4623      	mov	r3, r4
 800ee26:	4648      	mov	r0, r9
 800ee28:	f001 fdbe 	bl	80109a8 <__s2b>
 800ee2c:	9007      	str	r0, [sp, #28]
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	f43f af08 	beq.w	800ec44 <_strtod_l+0x434>
 800ee34:	9a06      	ldr	r2, [sp, #24]
 800ee36:	9b06      	ldr	r3, [sp, #24]
 800ee38:	2a00      	cmp	r2, #0
 800ee3a:	f1c3 0300 	rsb	r3, r3, #0
 800ee3e:	bfa8      	it	ge
 800ee40:	2300      	movge	r3, #0
 800ee42:	930e      	str	r3, [sp, #56]	; 0x38
 800ee44:	2400      	movs	r4, #0
 800ee46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee4a:	9316      	str	r3, [sp, #88]	; 0x58
 800ee4c:	46a0      	mov	r8, r4
 800ee4e:	9b07      	ldr	r3, [sp, #28]
 800ee50:	4648      	mov	r0, r9
 800ee52:	6859      	ldr	r1, [r3, #4]
 800ee54:	f001 fd22 	bl	801089c <_Balloc>
 800ee58:	9005      	str	r0, [sp, #20]
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f43f aef6 	beq.w	800ec4c <_strtod_l+0x43c>
 800ee60:	9b07      	ldr	r3, [sp, #28]
 800ee62:	691a      	ldr	r2, [r3, #16]
 800ee64:	3202      	adds	r2, #2
 800ee66:	f103 010c 	add.w	r1, r3, #12
 800ee6a:	0092      	lsls	r2, r2, #2
 800ee6c:	300c      	adds	r0, #12
 800ee6e:	f7fe fd71 	bl	800d954 <memcpy>
 800ee72:	aa1e      	add	r2, sp, #120	; 0x78
 800ee74:	a91d      	add	r1, sp, #116	; 0x74
 800ee76:	ec4b ab10 	vmov	d0, sl, fp
 800ee7a:	4648      	mov	r0, r9
 800ee7c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ee80:	f002 f84e 	bl	8010f20 <__d2b>
 800ee84:	901c      	str	r0, [sp, #112]	; 0x70
 800ee86:	2800      	cmp	r0, #0
 800ee88:	f43f aee0 	beq.w	800ec4c <_strtod_l+0x43c>
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	4648      	mov	r0, r9
 800ee90:	f001 fe16 	bl	8010ac0 <__i2b>
 800ee94:	4680      	mov	r8, r0
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f43f aed8 	beq.w	800ec4c <_strtod_l+0x43c>
 800ee9c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ee9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eea0:	2e00      	cmp	r6, #0
 800eea2:	bfab      	itete	ge
 800eea4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800eea6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800eea8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800eeaa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800eeac:	bfac      	ite	ge
 800eeae:	18f7      	addge	r7, r6, r3
 800eeb0:	1b9d      	sublt	r5, r3, r6
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	1af6      	subs	r6, r6, r3
 800eeb6:	4416      	add	r6, r2
 800eeb8:	4b63      	ldr	r3, [pc, #396]	; (800f048 <_strtod_l+0x838>)
 800eeba:	3e01      	subs	r6, #1
 800eebc:	429e      	cmp	r6, r3
 800eebe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eec2:	f280 80af 	bge.w	800f024 <_strtod_l+0x814>
 800eec6:	1b9b      	subs	r3, r3, r6
 800eec8:	2b1f      	cmp	r3, #31
 800eeca:	eba2 0203 	sub.w	r2, r2, r3
 800eece:	f04f 0101 	mov.w	r1, #1
 800eed2:	f300 809b 	bgt.w	800f00c <_strtod_l+0x7fc>
 800eed6:	fa01 f303 	lsl.w	r3, r1, r3
 800eeda:	930f      	str	r3, [sp, #60]	; 0x3c
 800eedc:	2300      	movs	r3, #0
 800eede:	930a      	str	r3, [sp, #40]	; 0x28
 800eee0:	18be      	adds	r6, r7, r2
 800eee2:	9b04      	ldr	r3, [sp, #16]
 800eee4:	42b7      	cmp	r7, r6
 800eee6:	4415      	add	r5, r2
 800eee8:	441d      	add	r5, r3
 800eeea:	463b      	mov	r3, r7
 800eeec:	bfa8      	it	ge
 800eeee:	4633      	movge	r3, r6
 800eef0:	42ab      	cmp	r3, r5
 800eef2:	bfa8      	it	ge
 800eef4:	462b      	movge	r3, r5
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bfc2      	ittt	gt
 800eefa:	1af6      	subgt	r6, r6, r3
 800eefc:	1aed      	subgt	r5, r5, r3
 800eefe:	1aff      	subgt	r7, r7, r3
 800ef00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef02:	b1bb      	cbz	r3, 800ef34 <_strtod_l+0x724>
 800ef04:	4641      	mov	r1, r8
 800ef06:	461a      	mov	r2, r3
 800ef08:	4648      	mov	r0, r9
 800ef0a:	f001 fe79 	bl	8010c00 <__pow5mult>
 800ef0e:	4680      	mov	r8, r0
 800ef10:	2800      	cmp	r0, #0
 800ef12:	f43f ae9b 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef16:	4601      	mov	r1, r0
 800ef18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ef1a:	4648      	mov	r0, r9
 800ef1c:	f001 fdd9 	bl	8010ad2 <__multiply>
 800ef20:	900c      	str	r0, [sp, #48]	; 0x30
 800ef22:	2800      	cmp	r0, #0
 800ef24:	f43f ae92 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef2a:	4648      	mov	r0, r9
 800ef2c:	f001 fcea 	bl	8010904 <_Bfree>
 800ef30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef32:	931c      	str	r3, [sp, #112]	; 0x70
 800ef34:	2e00      	cmp	r6, #0
 800ef36:	dc7a      	bgt.n	800f02e <_strtod_l+0x81e>
 800ef38:	9b06      	ldr	r3, [sp, #24]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	dd08      	ble.n	800ef50 <_strtod_l+0x740>
 800ef3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef40:	9905      	ldr	r1, [sp, #20]
 800ef42:	4648      	mov	r0, r9
 800ef44:	f001 fe5c 	bl	8010c00 <__pow5mult>
 800ef48:	9005      	str	r0, [sp, #20]
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f43f ae7e 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef50:	2d00      	cmp	r5, #0
 800ef52:	dd08      	ble.n	800ef66 <_strtod_l+0x756>
 800ef54:	462a      	mov	r2, r5
 800ef56:	9905      	ldr	r1, [sp, #20]
 800ef58:	4648      	mov	r0, r9
 800ef5a:	f001 fe9f 	bl	8010c9c <__lshift>
 800ef5e:	9005      	str	r0, [sp, #20]
 800ef60:	2800      	cmp	r0, #0
 800ef62:	f43f ae73 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef66:	2f00      	cmp	r7, #0
 800ef68:	dd08      	ble.n	800ef7c <_strtod_l+0x76c>
 800ef6a:	4641      	mov	r1, r8
 800ef6c:	463a      	mov	r2, r7
 800ef6e:	4648      	mov	r0, r9
 800ef70:	f001 fe94 	bl	8010c9c <__lshift>
 800ef74:	4680      	mov	r8, r0
 800ef76:	2800      	cmp	r0, #0
 800ef78:	f43f ae68 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef7c:	9a05      	ldr	r2, [sp, #20]
 800ef7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef80:	4648      	mov	r0, r9
 800ef82:	f001 fef9 	bl	8010d78 <__mdiff>
 800ef86:	4604      	mov	r4, r0
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f43f ae5f 	beq.w	800ec4c <_strtod_l+0x43c>
 800ef8e:	68c3      	ldr	r3, [r0, #12]
 800ef90:	930c      	str	r3, [sp, #48]	; 0x30
 800ef92:	2300      	movs	r3, #0
 800ef94:	60c3      	str	r3, [r0, #12]
 800ef96:	4641      	mov	r1, r8
 800ef98:	f001 fed4 	bl	8010d44 <__mcmp>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	da55      	bge.n	800f04c <_strtod_l+0x83c>
 800efa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efa2:	b9e3      	cbnz	r3, 800efde <_strtod_l+0x7ce>
 800efa4:	f1ba 0f00 	cmp.w	sl, #0
 800efa8:	d119      	bne.n	800efde <_strtod_l+0x7ce>
 800efaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efae:	b9b3      	cbnz	r3, 800efde <_strtod_l+0x7ce>
 800efb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800efb4:	0d1b      	lsrs	r3, r3, #20
 800efb6:	051b      	lsls	r3, r3, #20
 800efb8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800efbc:	d90f      	bls.n	800efde <_strtod_l+0x7ce>
 800efbe:	6963      	ldr	r3, [r4, #20]
 800efc0:	b913      	cbnz	r3, 800efc8 <_strtod_l+0x7b8>
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	dd0a      	ble.n	800efde <_strtod_l+0x7ce>
 800efc8:	4621      	mov	r1, r4
 800efca:	2201      	movs	r2, #1
 800efcc:	4648      	mov	r0, r9
 800efce:	f001 fe65 	bl	8010c9c <__lshift>
 800efd2:	4641      	mov	r1, r8
 800efd4:	4604      	mov	r4, r0
 800efd6:	f001 feb5 	bl	8010d44 <__mcmp>
 800efda:	2800      	cmp	r0, #0
 800efdc:	dc67      	bgt.n	800f0ae <_strtod_l+0x89e>
 800efde:	9b04      	ldr	r3, [sp, #16]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d171      	bne.n	800f0c8 <_strtod_l+0x8b8>
 800efe4:	e63d      	b.n	800ec62 <_strtod_l+0x452>
 800efe6:	f018 0f01 	tst.w	r8, #1
 800efea:	d004      	beq.n	800eff6 <_strtod_l+0x7e6>
 800efec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eff0:	f7f1 fb02 	bl	80005f8 <__aeabi_dmul>
 800eff4:	2301      	movs	r3, #1
 800eff6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800effa:	3508      	adds	r5, #8
 800effc:	e6e5      	b.n	800edca <_strtod_l+0x5ba>
 800effe:	f04f 32ff 	mov.w	r2, #4294967295
 800f002:	fa02 f303 	lsl.w	r3, r2, r3
 800f006:	ea03 0a0a 	and.w	sl, r3, sl
 800f00a:	e6ff      	b.n	800ee0c <_strtod_l+0x5fc>
 800f00c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f010:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f014:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f018:	36e2      	adds	r6, #226	; 0xe2
 800f01a:	fa01 f306 	lsl.w	r3, r1, r6
 800f01e:	930a      	str	r3, [sp, #40]	; 0x28
 800f020:	910f      	str	r1, [sp, #60]	; 0x3c
 800f022:	e75d      	b.n	800eee0 <_strtod_l+0x6d0>
 800f024:	2300      	movs	r3, #0
 800f026:	930a      	str	r3, [sp, #40]	; 0x28
 800f028:	2301      	movs	r3, #1
 800f02a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f02c:	e758      	b.n	800eee0 <_strtod_l+0x6d0>
 800f02e:	4632      	mov	r2, r6
 800f030:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f032:	4648      	mov	r0, r9
 800f034:	f001 fe32 	bl	8010c9c <__lshift>
 800f038:	901c      	str	r0, [sp, #112]	; 0x70
 800f03a:	2800      	cmp	r0, #0
 800f03c:	f47f af7c 	bne.w	800ef38 <_strtod_l+0x728>
 800f040:	e604      	b.n	800ec4c <_strtod_l+0x43c>
 800f042:	bf00      	nop
 800f044:	08011948 	.word	0x08011948
 800f048:	fffffc02 	.word	0xfffffc02
 800f04c:	465d      	mov	r5, fp
 800f04e:	f040 8086 	bne.w	800f15e <_strtod_l+0x94e>
 800f052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f058:	b32a      	cbz	r2, 800f0a6 <_strtod_l+0x896>
 800f05a:	4aaf      	ldr	r2, [pc, #700]	; (800f318 <_strtod_l+0xb08>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d153      	bne.n	800f108 <_strtod_l+0x8f8>
 800f060:	9b04      	ldr	r3, [sp, #16]
 800f062:	4650      	mov	r0, sl
 800f064:	b1d3      	cbz	r3, 800f09c <_strtod_l+0x88c>
 800f066:	4aad      	ldr	r2, [pc, #692]	; (800f31c <_strtod_l+0xb0c>)
 800f068:	402a      	ands	r2, r5
 800f06a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f06e:	f04f 31ff 	mov.w	r1, #4294967295
 800f072:	d816      	bhi.n	800f0a2 <_strtod_l+0x892>
 800f074:	0d12      	lsrs	r2, r2, #20
 800f076:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f07a:	fa01 f303 	lsl.w	r3, r1, r3
 800f07e:	4298      	cmp	r0, r3
 800f080:	d142      	bne.n	800f108 <_strtod_l+0x8f8>
 800f082:	4ba7      	ldr	r3, [pc, #668]	; (800f320 <_strtod_l+0xb10>)
 800f084:	429d      	cmp	r5, r3
 800f086:	d102      	bne.n	800f08e <_strtod_l+0x87e>
 800f088:	3001      	adds	r0, #1
 800f08a:	f43f addf 	beq.w	800ec4c <_strtod_l+0x43c>
 800f08e:	4ba3      	ldr	r3, [pc, #652]	; (800f31c <_strtod_l+0xb0c>)
 800f090:	402b      	ands	r3, r5
 800f092:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f096:	f04f 0a00 	mov.w	sl, #0
 800f09a:	e7a0      	b.n	800efde <_strtod_l+0x7ce>
 800f09c:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a0:	e7ed      	b.n	800f07e <_strtod_l+0x86e>
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	e7eb      	b.n	800f07e <_strtod_l+0x86e>
 800f0a6:	bb7b      	cbnz	r3, 800f108 <_strtod_l+0x8f8>
 800f0a8:	f1ba 0f00 	cmp.w	sl, #0
 800f0ac:	d12c      	bne.n	800f108 <_strtod_l+0x8f8>
 800f0ae:	9904      	ldr	r1, [sp, #16]
 800f0b0:	4a9a      	ldr	r2, [pc, #616]	; (800f31c <_strtod_l+0xb0c>)
 800f0b2:	465b      	mov	r3, fp
 800f0b4:	b1f1      	cbz	r1, 800f0f4 <_strtod_l+0x8e4>
 800f0b6:	ea02 010b 	and.w	r1, r2, fp
 800f0ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f0be:	dc19      	bgt.n	800f0f4 <_strtod_l+0x8e4>
 800f0c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f0c4:	f77f ae5b 	ble.w	800ed7e <_strtod_l+0x56e>
 800f0c8:	4a96      	ldr	r2, [pc, #600]	; (800f324 <_strtod_l+0xb14>)
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	4659      	mov	r1, fp
 800f0d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	4682      	mov	sl, r0
 800f0de:	468b      	mov	fp, r1
 800f0e0:	2900      	cmp	r1, #0
 800f0e2:	f47f adbe 	bne.w	800ec62 <_strtod_l+0x452>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	f47f adbb 	bne.w	800ec62 <_strtod_l+0x452>
 800f0ec:	2322      	movs	r3, #34	; 0x22
 800f0ee:	f8c9 3000 	str.w	r3, [r9]
 800f0f2:	e5b6      	b.n	800ec62 <_strtod_l+0x452>
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f0fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f0fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f102:	f04f 3aff 	mov.w	sl, #4294967295
 800f106:	e76a      	b.n	800efde <_strtod_l+0x7ce>
 800f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10a:	b193      	cbz	r3, 800f132 <_strtod_l+0x922>
 800f10c:	422b      	tst	r3, r5
 800f10e:	f43f af66 	beq.w	800efde <_strtod_l+0x7ce>
 800f112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f114:	9a04      	ldr	r2, [sp, #16]
 800f116:	4650      	mov	r0, sl
 800f118:	4659      	mov	r1, fp
 800f11a:	b173      	cbz	r3, 800f13a <_strtod_l+0x92a>
 800f11c:	f7ff fb5c 	bl	800e7d8 <sulp>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f128:	f7f1 f8b0 	bl	800028c <__adddf3>
 800f12c:	4682      	mov	sl, r0
 800f12e:	468b      	mov	fp, r1
 800f130:	e755      	b.n	800efde <_strtod_l+0x7ce>
 800f132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f134:	ea13 0f0a 	tst.w	r3, sl
 800f138:	e7e9      	b.n	800f10e <_strtod_l+0x8fe>
 800f13a:	f7ff fb4d 	bl	800e7d8 <sulp>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f146:	f7f1 f89f 	bl	8000288 <__aeabi_dsub>
 800f14a:	2200      	movs	r2, #0
 800f14c:	2300      	movs	r3, #0
 800f14e:	4682      	mov	sl, r0
 800f150:	468b      	mov	fp, r1
 800f152:	f7f1 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800f156:	2800      	cmp	r0, #0
 800f158:	f47f ae11 	bne.w	800ed7e <_strtod_l+0x56e>
 800f15c:	e73f      	b.n	800efde <_strtod_l+0x7ce>
 800f15e:	4641      	mov	r1, r8
 800f160:	4620      	mov	r0, r4
 800f162:	f001 ff2c 	bl	8010fbe <__ratio>
 800f166:	ec57 6b10 	vmov	r6, r7, d0
 800f16a:	2200      	movs	r2, #0
 800f16c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f170:	ee10 0a10 	vmov	r0, s0
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 fcbb 	bl	8000af0 <__aeabi_dcmple>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d077      	beq.n	800f26e <_strtod_l+0xa5e>
 800f17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f180:	2b00      	cmp	r3, #0
 800f182:	d04a      	beq.n	800f21a <_strtod_l+0xa0a>
 800f184:	4b68      	ldr	r3, [pc, #416]	; (800f328 <_strtod_l+0xb18>)
 800f186:	2200      	movs	r2, #0
 800f188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f18c:	4f66      	ldr	r7, [pc, #408]	; (800f328 <_strtod_l+0xb18>)
 800f18e:	2600      	movs	r6, #0
 800f190:	4b62      	ldr	r3, [pc, #392]	; (800f31c <_strtod_l+0xb0c>)
 800f192:	402b      	ands	r3, r5
 800f194:	930f      	str	r3, [sp, #60]	; 0x3c
 800f196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f198:	4b64      	ldr	r3, [pc, #400]	; (800f32c <_strtod_l+0xb1c>)
 800f19a:	429a      	cmp	r2, r3
 800f19c:	f040 80ce 	bne.w	800f33c <_strtod_l+0xb2c>
 800f1a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f1ac:	ec4b ab10 	vmov	d0, sl, fp
 800f1b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f1b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f1b8:	f001 fe3c 	bl	8010e34 <__ulp>
 800f1bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1c0:	ec53 2b10 	vmov	r2, r3, d0
 800f1c4:	f7f1 fa18 	bl	80005f8 <__aeabi_dmul>
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	f7f1 f85e 	bl	800028c <__adddf3>
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4952      	ldr	r1, [pc, #328]	; (800f31c <_strtod_l+0xb0c>)
 800f1d4:	4a56      	ldr	r2, [pc, #344]	; (800f330 <_strtod_l+0xb20>)
 800f1d6:	4019      	ands	r1, r3
 800f1d8:	4291      	cmp	r1, r2
 800f1da:	4682      	mov	sl, r0
 800f1dc:	d95b      	bls.n	800f296 <_strtod_l+0xa86>
 800f1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d103      	bne.n	800f1f0 <_strtod_l+0x9e0>
 800f1e8:	9b08      	ldr	r3, [sp, #32]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	f43f ad2e 	beq.w	800ec4c <_strtod_l+0x43c>
 800f1f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f320 <_strtod_l+0xb10>
 800f1f4:	f04f 3aff 	mov.w	sl, #4294967295
 800f1f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f1fa:	4648      	mov	r0, r9
 800f1fc:	f001 fb82 	bl	8010904 <_Bfree>
 800f200:	9905      	ldr	r1, [sp, #20]
 800f202:	4648      	mov	r0, r9
 800f204:	f001 fb7e 	bl	8010904 <_Bfree>
 800f208:	4641      	mov	r1, r8
 800f20a:	4648      	mov	r0, r9
 800f20c:	f001 fb7a 	bl	8010904 <_Bfree>
 800f210:	4621      	mov	r1, r4
 800f212:	4648      	mov	r0, r9
 800f214:	f001 fb76 	bl	8010904 <_Bfree>
 800f218:	e619      	b.n	800ee4e <_strtod_l+0x63e>
 800f21a:	f1ba 0f00 	cmp.w	sl, #0
 800f21e:	d11a      	bne.n	800f256 <_strtod_l+0xa46>
 800f220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f224:	b9eb      	cbnz	r3, 800f262 <_strtod_l+0xa52>
 800f226:	2200      	movs	r2, #0
 800f228:	4b3f      	ldr	r3, [pc, #252]	; (800f328 <_strtod_l+0xb18>)
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 fc55 	bl	8000adc <__aeabi_dcmplt>
 800f232:	b9c8      	cbnz	r0, 800f268 <_strtod_l+0xa58>
 800f234:	4630      	mov	r0, r6
 800f236:	4639      	mov	r1, r7
 800f238:	2200      	movs	r2, #0
 800f23a:	4b3e      	ldr	r3, [pc, #248]	; (800f334 <_strtod_l+0xb24>)
 800f23c:	f7f1 f9dc 	bl	80005f8 <__aeabi_dmul>
 800f240:	4606      	mov	r6, r0
 800f242:	460f      	mov	r7, r1
 800f244:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f248:	9618      	str	r6, [sp, #96]	; 0x60
 800f24a:	9319      	str	r3, [sp, #100]	; 0x64
 800f24c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f250:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f254:	e79c      	b.n	800f190 <_strtod_l+0x980>
 800f256:	f1ba 0f01 	cmp.w	sl, #1
 800f25a:	d102      	bne.n	800f262 <_strtod_l+0xa52>
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	f43f ad8e 	beq.w	800ed7e <_strtod_l+0x56e>
 800f262:	2200      	movs	r2, #0
 800f264:	4b34      	ldr	r3, [pc, #208]	; (800f338 <_strtod_l+0xb28>)
 800f266:	e78f      	b.n	800f188 <_strtod_l+0x978>
 800f268:	2600      	movs	r6, #0
 800f26a:	4f32      	ldr	r7, [pc, #200]	; (800f334 <_strtod_l+0xb24>)
 800f26c:	e7ea      	b.n	800f244 <_strtod_l+0xa34>
 800f26e:	4b31      	ldr	r3, [pc, #196]	; (800f334 <_strtod_l+0xb24>)
 800f270:	4630      	mov	r0, r6
 800f272:	4639      	mov	r1, r7
 800f274:	2200      	movs	r2, #0
 800f276:	f7f1 f9bf 	bl	80005f8 <__aeabi_dmul>
 800f27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f27c:	4606      	mov	r6, r0
 800f27e:	460f      	mov	r7, r1
 800f280:	b933      	cbnz	r3, 800f290 <_strtod_l+0xa80>
 800f282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f286:	9010      	str	r0, [sp, #64]	; 0x40
 800f288:	9311      	str	r3, [sp, #68]	; 0x44
 800f28a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f28e:	e7df      	b.n	800f250 <_strtod_l+0xa40>
 800f290:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f294:	e7f9      	b.n	800f28a <_strtod_l+0xa7a>
 800f296:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f29a:	9b04      	ldr	r3, [sp, #16]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ab      	bne.n	800f1f8 <_strtod_l+0x9e8>
 800f2a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f2a4:	0d1b      	lsrs	r3, r3, #20
 800f2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2a8:	051b      	lsls	r3, r3, #20
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	465d      	mov	r5, fp
 800f2ae:	d1a3      	bne.n	800f1f8 <_strtod_l+0x9e8>
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f7f1 fc50 	bl	8000b58 <__aeabi_d2iz>
 800f2b8:	f7f1 f934 	bl	8000524 <__aeabi_i2d>
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4602      	mov	r2, r0
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7f0 ffe0 	bl	8000288 <__aeabi_dsub>
 800f2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2ca:	4606      	mov	r6, r0
 800f2cc:	460f      	mov	r7, r1
 800f2ce:	b933      	cbnz	r3, 800f2de <_strtod_l+0xace>
 800f2d0:	f1ba 0f00 	cmp.w	sl, #0
 800f2d4:	d103      	bne.n	800f2de <_strtod_l+0xace>
 800f2d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f2da:	2d00      	cmp	r5, #0
 800f2dc:	d06d      	beq.n	800f3ba <_strtod_l+0xbaa>
 800f2de:	a30a      	add	r3, pc, #40	; (adr r3, 800f308 <_strtod_l+0xaf8>)
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	f7f1 fbf8 	bl	8000adc <__aeabi_dcmplt>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	f47f acb8 	bne.w	800ec62 <_strtod_l+0x452>
 800f2f2:	a307      	add	r3, pc, #28	; (adr r3, 800f310 <_strtod_l+0xb00>)
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	f7f1 fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 800f300:	2800      	cmp	r0, #0
 800f302:	f43f af79 	beq.w	800f1f8 <_strtod_l+0x9e8>
 800f306:	e4ac      	b.n	800ec62 <_strtod_l+0x452>
 800f308:	94a03595 	.word	0x94a03595
 800f30c:	3fdfffff 	.word	0x3fdfffff
 800f310:	35afe535 	.word	0x35afe535
 800f314:	3fe00000 	.word	0x3fe00000
 800f318:	000fffff 	.word	0x000fffff
 800f31c:	7ff00000 	.word	0x7ff00000
 800f320:	7fefffff 	.word	0x7fefffff
 800f324:	39500000 	.word	0x39500000
 800f328:	3ff00000 	.word	0x3ff00000
 800f32c:	7fe00000 	.word	0x7fe00000
 800f330:	7c9fffff 	.word	0x7c9fffff
 800f334:	3fe00000 	.word	0x3fe00000
 800f338:	bff00000 	.word	0xbff00000
 800f33c:	9b04      	ldr	r3, [sp, #16]
 800f33e:	b333      	cbz	r3, 800f38e <_strtod_l+0xb7e>
 800f340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f342:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f346:	d822      	bhi.n	800f38e <_strtod_l+0xb7e>
 800f348:	a327      	add	r3, pc, #156	; (adr r3, 800f3e8 <_strtod_l+0xbd8>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	4630      	mov	r0, r6
 800f350:	4639      	mov	r1, r7
 800f352:	f7f1 fbcd 	bl	8000af0 <__aeabi_dcmple>
 800f356:	b1a0      	cbz	r0, 800f382 <_strtod_l+0xb72>
 800f358:	4639      	mov	r1, r7
 800f35a:	4630      	mov	r0, r6
 800f35c:	f7f1 fc24 	bl	8000ba8 <__aeabi_d2uiz>
 800f360:	2800      	cmp	r0, #0
 800f362:	bf08      	it	eq
 800f364:	2001      	moveq	r0, #1
 800f366:	f7f1 f8cd 	bl	8000504 <__aeabi_ui2d>
 800f36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f36c:	4606      	mov	r6, r0
 800f36e:	460f      	mov	r7, r1
 800f370:	bb03      	cbnz	r3, 800f3b4 <_strtod_l+0xba4>
 800f372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f376:	9012      	str	r0, [sp, #72]	; 0x48
 800f378:	9313      	str	r3, [sp, #76]	; 0x4c
 800f37a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f37e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f386:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f38e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f392:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f396:	f001 fd4d 	bl	8010e34 <__ulp>
 800f39a:	4650      	mov	r0, sl
 800f39c:	ec53 2b10 	vmov	r2, r3, d0
 800f3a0:	4659      	mov	r1, fp
 800f3a2:	f7f1 f929 	bl	80005f8 <__aeabi_dmul>
 800f3a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f3aa:	f7f0 ff6f 	bl	800028c <__adddf3>
 800f3ae:	4682      	mov	sl, r0
 800f3b0:	468b      	mov	fp, r1
 800f3b2:	e772      	b.n	800f29a <_strtod_l+0xa8a>
 800f3b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f3b8:	e7df      	b.n	800f37a <_strtod_l+0xb6a>
 800f3ba:	a30d      	add	r3, pc, #52	; (adr r3, 800f3f0 <_strtod_l+0xbe0>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	f7f1 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800f3c4:	e79c      	b.n	800f300 <_strtod_l+0xaf0>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	930d      	str	r3, [sp, #52]	; 0x34
 800f3ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f3cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	f7ff ba61 	b.w	800e896 <_strtod_l+0x86>
 800f3d4:	2b65      	cmp	r3, #101	; 0x65
 800f3d6:	f04f 0200 	mov.w	r2, #0
 800f3da:	f43f ab4e 	beq.w	800ea7a <_strtod_l+0x26a>
 800f3de:	2101      	movs	r1, #1
 800f3e0:	4614      	mov	r4, r2
 800f3e2:	9104      	str	r1, [sp, #16]
 800f3e4:	f7ff bacb 	b.w	800e97e <_strtod_l+0x16e>
 800f3e8:	ffc00000 	.word	0xffc00000
 800f3ec:	41dfffff 	.word	0x41dfffff
 800f3f0:	94a03595 	.word	0x94a03595
 800f3f4:	3fcfffff 	.word	0x3fcfffff

0800f3f8 <_strtod_r>:
 800f3f8:	4b05      	ldr	r3, [pc, #20]	; (800f410 <_strtod_r+0x18>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	b410      	push	{r4}
 800f3fe:	6a1b      	ldr	r3, [r3, #32]
 800f400:	4c04      	ldr	r4, [pc, #16]	; (800f414 <_strtod_r+0x1c>)
 800f402:	2b00      	cmp	r3, #0
 800f404:	bf08      	it	eq
 800f406:	4623      	moveq	r3, r4
 800f408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f40c:	f7ff ba00 	b.w	800e810 <_strtod_l>
 800f410:	2000017c 	.word	0x2000017c
 800f414:	200001e0 	.word	0x200001e0

0800f418 <_strtol_l.isra.0>:
 800f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	4680      	mov	r8, r0
 800f41e:	4689      	mov	r9, r1
 800f420:	4692      	mov	sl, r2
 800f422:	461e      	mov	r6, r3
 800f424:	460f      	mov	r7, r1
 800f426:	463d      	mov	r5, r7
 800f428:	9808      	ldr	r0, [sp, #32]
 800f42a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f42e:	f001 fa0d 	bl	801084c <__locale_ctype_ptr_l>
 800f432:	4420      	add	r0, r4
 800f434:	7843      	ldrb	r3, [r0, #1]
 800f436:	f013 0308 	ands.w	r3, r3, #8
 800f43a:	d132      	bne.n	800f4a2 <_strtol_l.isra.0+0x8a>
 800f43c:	2c2d      	cmp	r4, #45	; 0x2d
 800f43e:	d132      	bne.n	800f4a6 <_strtol_l.isra.0+0x8e>
 800f440:	787c      	ldrb	r4, [r7, #1]
 800f442:	1cbd      	adds	r5, r7, #2
 800f444:	2201      	movs	r2, #1
 800f446:	2e00      	cmp	r6, #0
 800f448:	d05d      	beq.n	800f506 <_strtol_l.isra.0+0xee>
 800f44a:	2e10      	cmp	r6, #16
 800f44c:	d109      	bne.n	800f462 <_strtol_l.isra.0+0x4a>
 800f44e:	2c30      	cmp	r4, #48	; 0x30
 800f450:	d107      	bne.n	800f462 <_strtol_l.isra.0+0x4a>
 800f452:	782b      	ldrb	r3, [r5, #0]
 800f454:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f458:	2b58      	cmp	r3, #88	; 0x58
 800f45a:	d14f      	bne.n	800f4fc <_strtol_l.isra.0+0xe4>
 800f45c:	786c      	ldrb	r4, [r5, #1]
 800f45e:	2610      	movs	r6, #16
 800f460:	3502      	adds	r5, #2
 800f462:	2a00      	cmp	r2, #0
 800f464:	bf14      	ite	ne
 800f466:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f46a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f46e:	2700      	movs	r7, #0
 800f470:	fbb1 fcf6 	udiv	ip, r1, r6
 800f474:	4638      	mov	r0, r7
 800f476:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f47a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f47e:	2b09      	cmp	r3, #9
 800f480:	d817      	bhi.n	800f4b2 <_strtol_l.isra.0+0x9a>
 800f482:	461c      	mov	r4, r3
 800f484:	42a6      	cmp	r6, r4
 800f486:	dd23      	ble.n	800f4d0 <_strtol_l.isra.0+0xb8>
 800f488:	1c7b      	adds	r3, r7, #1
 800f48a:	d007      	beq.n	800f49c <_strtol_l.isra.0+0x84>
 800f48c:	4584      	cmp	ip, r0
 800f48e:	d31c      	bcc.n	800f4ca <_strtol_l.isra.0+0xb2>
 800f490:	d101      	bne.n	800f496 <_strtol_l.isra.0+0x7e>
 800f492:	45a6      	cmp	lr, r4
 800f494:	db19      	blt.n	800f4ca <_strtol_l.isra.0+0xb2>
 800f496:	fb00 4006 	mla	r0, r0, r6, r4
 800f49a:	2701      	movs	r7, #1
 800f49c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4a0:	e7eb      	b.n	800f47a <_strtol_l.isra.0+0x62>
 800f4a2:	462f      	mov	r7, r5
 800f4a4:	e7bf      	b.n	800f426 <_strtol_l.isra.0+0xe>
 800f4a6:	2c2b      	cmp	r4, #43	; 0x2b
 800f4a8:	bf04      	itt	eq
 800f4aa:	1cbd      	addeq	r5, r7, #2
 800f4ac:	787c      	ldrbeq	r4, [r7, #1]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	e7c9      	b.n	800f446 <_strtol_l.isra.0+0x2e>
 800f4b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f4b6:	2b19      	cmp	r3, #25
 800f4b8:	d801      	bhi.n	800f4be <_strtol_l.isra.0+0xa6>
 800f4ba:	3c37      	subs	r4, #55	; 0x37
 800f4bc:	e7e2      	b.n	800f484 <_strtol_l.isra.0+0x6c>
 800f4be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f4c2:	2b19      	cmp	r3, #25
 800f4c4:	d804      	bhi.n	800f4d0 <_strtol_l.isra.0+0xb8>
 800f4c6:	3c57      	subs	r4, #87	; 0x57
 800f4c8:	e7dc      	b.n	800f484 <_strtol_l.isra.0+0x6c>
 800f4ca:	f04f 37ff 	mov.w	r7, #4294967295
 800f4ce:	e7e5      	b.n	800f49c <_strtol_l.isra.0+0x84>
 800f4d0:	1c7b      	adds	r3, r7, #1
 800f4d2:	d108      	bne.n	800f4e6 <_strtol_l.isra.0+0xce>
 800f4d4:	2322      	movs	r3, #34	; 0x22
 800f4d6:	f8c8 3000 	str.w	r3, [r8]
 800f4da:	4608      	mov	r0, r1
 800f4dc:	f1ba 0f00 	cmp.w	sl, #0
 800f4e0:	d107      	bne.n	800f4f2 <_strtol_l.isra.0+0xda>
 800f4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e6:	b102      	cbz	r2, 800f4ea <_strtol_l.isra.0+0xd2>
 800f4e8:	4240      	negs	r0, r0
 800f4ea:	f1ba 0f00 	cmp.w	sl, #0
 800f4ee:	d0f8      	beq.n	800f4e2 <_strtol_l.isra.0+0xca>
 800f4f0:	b10f      	cbz	r7, 800f4f6 <_strtol_l.isra.0+0xde>
 800f4f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800f4f6:	f8ca 9000 	str.w	r9, [sl]
 800f4fa:	e7f2      	b.n	800f4e2 <_strtol_l.isra.0+0xca>
 800f4fc:	2430      	movs	r4, #48	; 0x30
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	d1af      	bne.n	800f462 <_strtol_l.isra.0+0x4a>
 800f502:	2608      	movs	r6, #8
 800f504:	e7ad      	b.n	800f462 <_strtol_l.isra.0+0x4a>
 800f506:	2c30      	cmp	r4, #48	; 0x30
 800f508:	d0a3      	beq.n	800f452 <_strtol_l.isra.0+0x3a>
 800f50a:	260a      	movs	r6, #10
 800f50c:	e7a9      	b.n	800f462 <_strtol_l.isra.0+0x4a>
	...

0800f510 <_strtol_r>:
 800f510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f512:	4c06      	ldr	r4, [pc, #24]	; (800f52c <_strtol_r+0x1c>)
 800f514:	4d06      	ldr	r5, [pc, #24]	; (800f530 <_strtol_r+0x20>)
 800f516:	6824      	ldr	r4, [r4, #0]
 800f518:	6a24      	ldr	r4, [r4, #32]
 800f51a:	2c00      	cmp	r4, #0
 800f51c:	bf08      	it	eq
 800f51e:	462c      	moveq	r4, r5
 800f520:	9400      	str	r4, [sp, #0]
 800f522:	f7ff ff79 	bl	800f418 <_strtol_l.isra.0>
 800f526:	b003      	add	sp, #12
 800f528:	bd30      	pop	{r4, r5, pc}
 800f52a:	bf00      	nop
 800f52c:	2000017c 	.word	0x2000017c
 800f530:	200001e0 	.word	0x200001e0

0800f534 <_vsiprintf_r>:
 800f534:	b500      	push	{lr}
 800f536:	b09b      	sub	sp, #108	; 0x6c
 800f538:	9100      	str	r1, [sp, #0]
 800f53a:	9104      	str	r1, [sp, #16]
 800f53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f540:	9105      	str	r1, [sp, #20]
 800f542:	9102      	str	r1, [sp, #8]
 800f544:	4905      	ldr	r1, [pc, #20]	; (800f55c <_vsiprintf_r+0x28>)
 800f546:	9103      	str	r1, [sp, #12]
 800f548:	4669      	mov	r1, sp
 800f54a:	f001 fe0f 	bl	801116c <_svfiprintf_r>
 800f54e:	9b00      	ldr	r3, [sp, #0]
 800f550:	2200      	movs	r2, #0
 800f552:	701a      	strb	r2, [r3, #0]
 800f554:	b01b      	add	sp, #108	; 0x6c
 800f556:	f85d fb04 	ldr.w	pc, [sp], #4
 800f55a:	bf00      	nop
 800f55c:	ffff0208 	.word	0xffff0208

0800f560 <vsiprintf>:
 800f560:	4613      	mov	r3, r2
 800f562:	460a      	mov	r2, r1
 800f564:	4601      	mov	r1, r0
 800f566:	4802      	ldr	r0, [pc, #8]	; (800f570 <vsiprintf+0x10>)
 800f568:	6800      	ldr	r0, [r0, #0]
 800f56a:	f7ff bfe3 	b.w	800f534 <_vsiprintf_r>
 800f56e:	bf00      	nop
 800f570:	2000017c 	.word	0x2000017c

0800f574 <quorem>:
 800f574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f578:	6903      	ldr	r3, [r0, #16]
 800f57a:	690c      	ldr	r4, [r1, #16]
 800f57c:	42a3      	cmp	r3, r4
 800f57e:	4680      	mov	r8, r0
 800f580:	f2c0 8082 	blt.w	800f688 <quorem+0x114>
 800f584:	3c01      	subs	r4, #1
 800f586:	f101 0714 	add.w	r7, r1, #20
 800f58a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f58e:	f100 0614 	add.w	r6, r0, #20
 800f592:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f596:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f59a:	eb06 030c 	add.w	r3, r6, ip
 800f59e:	3501      	adds	r5, #1
 800f5a0:	eb07 090c 	add.w	r9, r7, ip
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	fbb0 f5f5 	udiv	r5, r0, r5
 800f5aa:	b395      	cbz	r5, 800f612 <quorem+0x9e>
 800f5ac:	f04f 0a00 	mov.w	sl, #0
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	46b6      	mov	lr, r6
 800f5b4:	46d3      	mov	fp, sl
 800f5b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f5ba:	b293      	uxth	r3, r2
 800f5bc:	fb05 a303 	mla	r3, r5, r3, sl
 800f5c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	ebab 0303 	sub.w	r3, fp, r3
 800f5ca:	0c12      	lsrs	r2, r2, #16
 800f5cc:	f8de b000 	ldr.w	fp, [lr]
 800f5d0:	fb05 a202 	mla	r2, r5, r2, sl
 800f5d4:	fa13 f38b 	uxtah	r3, r3, fp
 800f5d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f5dc:	fa1f fb82 	uxth.w	fp, r2
 800f5e0:	f8de 2000 	ldr.w	r2, [lr]
 800f5e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f5e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5f2:	4581      	cmp	r9, r0
 800f5f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f5f8:	f84e 3b04 	str.w	r3, [lr], #4
 800f5fc:	d2db      	bcs.n	800f5b6 <quorem+0x42>
 800f5fe:	f856 300c 	ldr.w	r3, [r6, ip]
 800f602:	b933      	cbnz	r3, 800f612 <quorem+0x9e>
 800f604:	9b01      	ldr	r3, [sp, #4]
 800f606:	3b04      	subs	r3, #4
 800f608:	429e      	cmp	r6, r3
 800f60a:	461a      	mov	r2, r3
 800f60c:	d330      	bcc.n	800f670 <quorem+0xfc>
 800f60e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f612:	4640      	mov	r0, r8
 800f614:	f001 fb96 	bl	8010d44 <__mcmp>
 800f618:	2800      	cmp	r0, #0
 800f61a:	db25      	blt.n	800f668 <quorem+0xf4>
 800f61c:	3501      	adds	r5, #1
 800f61e:	4630      	mov	r0, r6
 800f620:	f04f 0c00 	mov.w	ip, #0
 800f624:	f857 2b04 	ldr.w	r2, [r7], #4
 800f628:	f8d0 e000 	ldr.w	lr, [r0]
 800f62c:	b293      	uxth	r3, r2
 800f62e:	ebac 0303 	sub.w	r3, ip, r3
 800f632:	0c12      	lsrs	r2, r2, #16
 800f634:	fa13 f38e 	uxtah	r3, r3, lr
 800f638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f63c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f640:	b29b      	uxth	r3, r3
 800f642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f646:	45b9      	cmp	r9, r7
 800f648:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f64c:	f840 3b04 	str.w	r3, [r0], #4
 800f650:	d2e8      	bcs.n	800f624 <quorem+0xb0>
 800f652:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f656:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f65a:	b92a      	cbnz	r2, 800f668 <quorem+0xf4>
 800f65c:	3b04      	subs	r3, #4
 800f65e:	429e      	cmp	r6, r3
 800f660:	461a      	mov	r2, r3
 800f662:	d30b      	bcc.n	800f67c <quorem+0x108>
 800f664:	f8c8 4010 	str.w	r4, [r8, #16]
 800f668:	4628      	mov	r0, r5
 800f66a:	b003      	add	sp, #12
 800f66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	3b04      	subs	r3, #4
 800f674:	2a00      	cmp	r2, #0
 800f676:	d1ca      	bne.n	800f60e <quorem+0x9a>
 800f678:	3c01      	subs	r4, #1
 800f67a:	e7c5      	b.n	800f608 <quorem+0x94>
 800f67c:	6812      	ldr	r2, [r2, #0]
 800f67e:	3b04      	subs	r3, #4
 800f680:	2a00      	cmp	r2, #0
 800f682:	d1ef      	bne.n	800f664 <quorem+0xf0>
 800f684:	3c01      	subs	r4, #1
 800f686:	e7ea      	b.n	800f65e <quorem+0xea>
 800f688:	2000      	movs	r0, #0
 800f68a:	e7ee      	b.n	800f66a <quorem+0xf6>
 800f68c:	0000      	movs	r0, r0
	...

0800f690 <_dtoa_r>:
 800f690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f694:	ec57 6b10 	vmov	r6, r7, d0
 800f698:	b097      	sub	sp, #92	; 0x5c
 800f69a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f69c:	9106      	str	r1, [sp, #24]
 800f69e:	4604      	mov	r4, r0
 800f6a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f6a2:	9312      	str	r3, [sp, #72]	; 0x48
 800f6a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f6a8:	e9cd 6700 	strd	r6, r7, [sp]
 800f6ac:	b93d      	cbnz	r5, 800f6be <_dtoa_r+0x2e>
 800f6ae:	2010      	movs	r0, #16
 800f6b0:	f7fe f940 	bl	800d934 <malloc>
 800f6b4:	6260      	str	r0, [r4, #36]	; 0x24
 800f6b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f6ba:	6005      	str	r5, [r0, #0]
 800f6bc:	60c5      	str	r5, [r0, #12]
 800f6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6c0:	6819      	ldr	r1, [r3, #0]
 800f6c2:	b151      	cbz	r1, 800f6da <_dtoa_r+0x4a>
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	604a      	str	r2, [r1, #4]
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	4093      	lsls	r3, r2
 800f6cc:	608b      	str	r3, [r1, #8]
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f001 f918 	bl	8010904 <_Bfree>
 800f6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	1e3b      	subs	r3, r7, #0
 800f6dc:	bfbb      	ittet	lt
 800f6de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f6e2:	9301      	strlt	r3, [sp, #4]
 800f6e4:	2300      	movge	r3, #0
 800f6e6:	2201      	movlt	r2, #1
 800f6e8:	bfac      	ite	ge
 800f6ea:	f8c8 3000 	strge.w	r3, [r8]
 800f6ee:	f8c8 2000 	strlt.w	r2, [r8]
 800f6f2:	4baf      	ldr	r3, [pc, #700]	; (800f9b0 <_dtoa_r+0x320>)
 800f6f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6f8:	ea33 0308 	bics.w	r3, r3, r8
 800f6fc:	d114      	bne.n	800f728 <_dtoa_r+0x98>
 800f6fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f700:	f242 730f 	movw	r3, #9999	; 0x270f
 800f704:	6013      	str	r3, [r2, #0]
 800f706:	9b00      	ldr	r3, [sp, #0]
 800f708:	b923      	cbnz	r3, 800f714 <_dtoa_r+0x84>
 800f70a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f70e:	2800      	cmp	r0, #0
 800f710:	f000 8542 	beq.w	8010198 <_dtoa_r+0xb08>
 800f714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f716:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f9c4 <_dtoa_r+0x334>
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f000 8544 	beq.w	80101a8 <_dtoa_r+0xb18>
 800f720:	f10b 0303 	add.w	r3, fp, #3
 800f724:	f000 bd3e 	b.w	80101a4 <_dtoa_r+0xb14>
 800f728:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f72c:	2200      	movs	r2, #0
 800f72e:	2300      	movs	r3, #0
 800f730:	4630      	mov	r0, r6
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f738:	4681      	mov	r9, r0
 800f73a:	b168      	cbz	r0, 800f758 <_dtoa_r+0xc8>
 800f73c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f73e:	2301      	movs	r3, #1
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 8524 	beq.w	8010192 <_dtoa_r+0xb02>
 800f74a:	4b9a      	ldr	r3, [pc, #616]	; (800f9b4 <_dtoa_r+0x324>)
 800f74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f74e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	f000 bd28 	b.w	80101a8 <_dtoa_r+0xb18>
 800f758:	aa14      	add	r2, sp, #80	; 0x50
 800f75a:	a915      	add	r1, sp, #84	; 0x54
 800f75c:	ec47 6b10 	vmov	d0, r6, r7
 800f760:	4620      	mov	r0, r4
 800f762:	f001 fbdd 	bl	8010f20 <__d2b>
 800f766:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f76a:	9004      	str	r0, [sp, #16]
 800f76c:	2d00      	cmp	r5, #0
 800f76e:	d07c      	beq.n	800f86a <_dtoa_r+0x1da>
 800f770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f774:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f778:	46b2      	mov	sl, r6
 800f77a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f782:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f786:	2200      	movs	r2, #0
 800f788:	4b8b      	ldr	r3, [pc, #556]	; (800f9b8 <_dtoa_r+0x328>)
 800f78a:	4650      	mov	r0, sl
 800f78c:	4659      	mov	r1, fp
 800f78e:	f7f0 fd7b 	bl	8000288 <__aeabi_dsub>
 800f792:	a381      	add	r3, pc, #516	; (adr r3, 800f998 <_dtoa_r+0x308>)
 800f794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f798:	f7f0 ff2e 	bl	80005f8 <__aeabi_dmul>
 800f79c:	a380      	add	r3, pc, #512	; (adr r3, 800f9a0 <_dtoa_r+0x310>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f7f0 fd73 	bl	800028c <__adddf3>
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	460f      	mov	r7, r1
 800f7ac:	f7f0 feba 	bl	8000524 <__aeabi_i2d>
 800f7b0:	a37d      	add	r3, pc, #500	; (adr r3, 800f9a8 <_dtoa_r+0x318>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	f7f0 ff1f 	bl	80005f8 <__aeabi_dmul>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4630      	mov	r0, r6
 800f7c0:	4639      	mov	r1, r7
 800f7c2:	f7f0 fd63 	bl	800028c <__adddf3>
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	460f      	mov	r7, r1
 800f7ca:	f7f1 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4682      	mov	sl, r0
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7f1 f980 	bl	8000adc <__aeabi_dcmplt>
 800f7dc:	b148      	cbz	r0, 800f7f2 <_dtoa_r+0x162>
 800f7de:	4650      	mov	r0, sl
 800f7e0:	f7f0 fea0 	bl	8000524 <__aeabi_i2d>
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	f7f1 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7ec:	b908      	cbnz	r0, 800f7f2 <_dtoa_r+0x162>
 800f7ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7f2:	f1ba 0f16 	cmp.w	sl, #22
 800f7f6:	d859      	bhi.n	800f8ac <_dtoa_r+0x21c>
 800f7f8:	4970      	ldr	r1, [pc, #448]	; (800f9bc <_dtoa_r+0x32c>)
 800f7fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f802:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f806:	f7f1 f987 	bl	8000b18 <__aeabi_dcmpgt>
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d050      	beq.n	800f8b0 <_dtoa_r+0x220>
 800f80e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f812:	2300      	movs	r3, #0
 800f814:	930f      	str	r3, [sp, #60]	; 0x3c
 800f816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f818:	1b5d      	subs	r5, r3, r5
 800f81a:	f1b5 0801 	subs.w	r8, r5, #1
 800f81e:	bf49      	itett	mi
 800f820:	f1c5 0301 	rsbmi	r3, r5, #1
 800f824:	2300      	movpl	r3, #0
 800f826:	9305      	strmi	r3, [sp, #20]
 800f828:	f04f 0800 	movmi.w	r8, #0
 800f82c:	bf58      	it	pl
 800f82e:	9305      	strpl	r3, [sp, #20]
 800f830:	f1ba 0f00 	cmp.w	sl, #0
 800f834:	db3e      	blt.n	800f8b4 <_dtoa_r+0x224>
 800f836:	2300      	movs	r3, #0
 800f838:	44d0      	add	r8, sl
 800f83a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f83e:	9307      	str	r3, [sp, #28]
 800f840:	9b06      	ldr	r3, [sp, #24]
 800f842:	2b09      	cmp	r3, #9
 800f844:	f200 8090 	bhi.w	800f968 <_dtoa_r+0x2d8>
 800f848:	2b05      	cmp	r3, #5
 800f84a:	bfc4      	itt	gt
 800f84c:	3b04      	subgt	r3, #4
 800f84e:	9306      	strgt	r3, [sp, #24]
 800f850:	9b06      	ldr	r3, [sp, #24]
 800f852:	f1a3 0302 	sub.w	r3, r3, #2
 800f856:	bfcc      	ite	gt
 800f858:	2500      	movgt	r5, #0
 800f85a:	2501      	movle	r5, #1
 800f85c:	2b03      	cmp	r3, #3
 800f85e:	f200 808f 	bhi.w	800f980 <_dtoa_r+0x2f0>
 800f862:	e8df f003 	tbb	[pc, r3]
 800f866:	7f7d      	.short	0x7f7d
 800f868:	7131      	.short	0x7131
 800f86a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f86e:	441d      	add	r5, r3
 800f870:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f874:	2820      	cmp	r0, #32
 800f876:	dd13      	ble.n	800f8a0 <_dtoa_r+0x210>
 800f878:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f87c:	9b00      	ldr	r3, [sp, #0]
 800f87e:	fa08 f800 	lsl.w	r8, r8, r0
 800f882:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f886:	fa23 f000 	lsr.w	r0, r3, r0
 800f88a:	ea48 0000 	orr.w	r0, r8, r0
 800f88e:	f7f0 fe39 	bl	8000504 <__aeabi_ui2d>
 800f892:	2301      	movs	r3, #1
 800f894:	4682      	mov	sl, r0
 800f896:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f89a:	3d01      	subs	r5, #1
 800f89c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f89e:	e772      	b.n	800f786 <_dtoa_r+0xf6>
 800f8a0:	9b00      	ldr	r3, [sp, #0]
 800f8a2:	f1c0 0020 	rsb	r0, r0, #32
 800f8a6:	fa03 f000 	lsl.w	r0, r3, r0
 800f8aa:	e7f0      	b.n	800f88e <_dtoa_r+0x1fe>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e7b1      	b.n	800f814 <_dtoa_r+0x184>
 800f8b0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f8b2:	e7b0      	b.n	800f816 <_dtoa_r+0x186>
 800f8b4:	9b05      	ldr	r3, [sp, #20]
 800f8b6:	eba3 030a 	sub.w	r3, r3, sl
 800f8ba:	9305      	str	r3, [sp, #20]
 800f8bc:	f1ca 0300 	rsb	r3, sl, #0
 800f8c0:	9307      	str	r3, [sp, #28]
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800f8c6:	e7bb      	b.n	800f840 <_dtoa_r+0x1b0>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dd59      	ble.n	800f986 <_dtoa_r+0x2f6>
 800f8d2:	9302      	str	r3, [sp, #8]
 800f8d4:	4699      	mov	r9, r3
 800f8d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8d8:	2200      	movs	r2, #0
 800f8da:	6072      	str	r2, [r6, #4]
 800f8dc:	2204      	movs	r2, #4
 800f8de:	f102 0014 	add.w	r0, r2, #20
 800f8e2:	4298      	cmp	r0, r3
 800f8e4:	6871      	ldr	r1, [r6, #4]
 800f8e6:	d953      	bls.n	800f990 <_dtoa_r+0x300>
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f000 ffd7 	bl	801089c <_Balloc>
 800f8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8f0:	6030      	str	r0, [r6, #0]
 800f8f2:	f1b9 0f0e 	cmp.w	r9, #14
 800f8f6:	f8d3 b000 	ldr.w	fp, [r3]
 800f8fa:	f200 80e6 	bhi.w	800faca <_dtoa_r+0x43a>
 800f8fe:	2d00      	cmp	r5, #0
 800f900:	f000 80e3 	beq.w	800faca <_dtoa_r+0x43a>
 800f904:	ed9d 7b00 	vldr	d7, [sp]
 800f908:	f1ba 0f00 	cmp.w	sl, #0
 800f90c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f910:	dd74      	ble.n	800f9fc <_dtoa_r+0x36c>
 800f912:	4a2a      	ldr	r2, [pc, #168]	; (800f9bc <_dtoa_r+0x32c>)
 800f914:	f00a 030f 	and.w	r3, sl, #15
 800f918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f91c:	ed93 7b00 	vldr	d7, [r3]
 800f920:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f924:	06f0      	lsls	r0, r6, #27
 800f926:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f92a:	d565      	bpl.n	800f9f8 <_dtoa_r+0x368>
 800f92c:	4b24      	ldr	r3, [pc, #144]	; (800f9c0 <_dtoa_r+0x330>)
 800f92e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f932:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f936:	f7f0 ff89 	bl	800084c <__aeabi_ddiv>
 800f93a:	e9cd 0100 	strd	r0, r1, [sp]
 800f93e:	f006 060f 	and.w	r6, r6, #15
 800f942:	2503      	movs	r5, #3
 800f944:	4f1e      	ldr	r7, [pc, #120]	; (800f9c0 <_dtoa_r+0x330>)
 800f946:	e04c      	b.n	800f9e2 <_dtoa_r+0x352>
 800f948:	2301      	movs	r3, #1
 800f94a:	930a      	str	r3, [sp, #40]	; 0x28
 800f94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f94e:	4453      	add	r3, sl
 800f950:	f103 0901 	add.w	r9, r3, #1
 800f954:	9302      	str	r3, [sp, #8]
 800f956:	464b      	mov	r3, r9
 800f958:	2b01      	cmp	r3, #1
 800f95a:	bfb8      	it	lt
 800f95c:	2301      	movlt	r3, #1
 800f95e:	e7ba      	b.n	800f8d6 <_dtoa_r+0x246>
 800f960:	2300      	movs	r3, #0
 800f962:	e7b2      	b.n	800f8ca <_dtoa_r+0x23a>
 800f964:	2300      	movs	r3, #0
 800f966:	e7f0      	b.n	800f94a <_dtoa_r+0x2ba>
 800f968:	2501      	movs	r5, #1
 800f96a:	2300      	movs	r3, #0
 800f96c:	9306      	str	r3, [sp, #24]
 800f96e:	950a      	str	r5, [sp, #40]	; 0x28
 800f970:	f04f 33ff 	mov.w	r3, #4294967295
 800f974:	9302      	str	r3, [sp, #8]
 800f976:	4699      	mov	r9, r3
 800f978:	2200      	movs	r2, #0
 800f97a:	2312      	movs	r3, #18
 800f97c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f97e:	e7aa      	b.n	800f8d6 <_dtoa_r+0x246>
 800f980:	2301      	movs	r3, #1
 800f982:	930a      	str	r3, [sp, #40]	; 0x28
 800f984:	e7f4      	b.n	800f970 <_dtoa_r+0x2e0>
 800f986:	2301      	movs	r3, #1
 800f988:	9302      	str	r3, [sp, #8]
 800f98a:	4699      	mov	r9, r3
 800f98c:	461a      	mov	r2, r3
 800f98e:	e7f5      	b.n	800f97c <_dtoa_r+0x2ec>
 800f990:	3101      	adds	r1, #1
 800f992:	6071      	str	r1, [r6, #4]
 800f994:	0052      	lsls	r2, r2, #1
 800f996:	e7a2      	b.n	800f8de <_dtoa_r+0x24e>
 800f998:	636f4361 	.word	0x636f4361
 800f99c:	3fd287a7 	.word	0x3fd287a7
 800f9a0:	8b60c8b3 	.word	0x8b60c8b3
 800f9a4:	3fc68a28 	.word	0x3fc68a28
 800f9a8:	509f79fb 	.word	0x509f79fb
 800f9ac:	3fd34413 	.word	0x3fd34413
 800f9b0:	7ff00000 	.word	0x7ff00000
 800f9b4:	080118f1 	.word	0x080118f1
 800f9b8:	3ff80000 	.word	0x3ff80000
 800f9bc:	080119b0 	.word	0x080119b0
 800f9c0:	08011988 	.word	0x08011988
 800f9c4:	08011979 	.word	0x08011979
 800f9c8:	07f1      	lsls	r1, r6, #31
 800f9ca:	d508      	bpl.n	800f9de <_dtoa_r+0x34e>
 800f9cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9d4:	f7f0 fe10 	bl	80005f8 <__aeabi_dmul>
 800f9d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9dc:	3501      	adds	r5, #1
 800f9de:	1076      	asrs	r6, r6, #1
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	2e00      	cmp	r6, #0
 800f9e4:	d1f0      	bne.n	800f9c8 <_dtoa_r+0x338>
 800f9e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f9ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9ee:	f7f0 ff2d 	bl	800084c <__aeabi_ddiv>
 800f9f2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9f6:	e01a      	b.n	800fa2e <_dtoa_r+0x39e>
 800f9f8:	2502      	movs	r5, #2
 800f9fa:	e7a3      	b.n	800f944 <_dtoa_r+0x2b4>
 800f9fc:	f000 80a0 	beq.w	800fb40 <_dtoa_r+0x4b0>
 800fa00:	f1ca 0600 	rsb	r6, sl, #0
 800fa04:	4b9f      	ldr	r3, [pc, #636]	; (800fc84 <_dtoa_r+0x5f4>)
 800fa06:	4fa0      	ldr	r7, [pc, #640]	; (800fc88 <_dtoa_r+0x5f8>)
 800fa08:	f006 020f 	and.w	r2, r6, #15
 800fa0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fa18:	f7f0 fdee 	bl	80005f8 <__aeabi_dmul>
 800fa1c:	e9cd 0100 	strd	r0, r1, [sp]
 800fa20:	1136      	asrs	r6, r6, #4
 800fa22:	2300      	movs	r3, #0
 800fa24:	2502      	movs	r5, #2
 800fa26:	2e00      	cmp	r6, #0
 800fa28:	d17f      	bne.n	800fb2a <_dtoa_r+0x49a>
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1e1      	bne.n	800f9f2 <_dtoa_r+0x362>
 800fa2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 8087 	beq.w	800fb44 <_dtoa_r+0x4b4>
 800fa36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	4b93      	ldr	r3, [pc, #588]	; (800fc8c <_dtoa_r+0x5fc>)
 800fa3e:	4630      	mov	r0, r6
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f1 f84b 	bl	8000adc <__aeabi_dcmplt>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d07c      	beq.n	800fb44 <_dtoa_r+0x4b4>
 800fa4a:	f1b9 0f00 	cmp.w	r9, #0
 800fa4e:	d079      	beq.n	800fb44 <_dtoa_r+0x4b4>
 800fa50:	9b02      	ldr	r3, [sp, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	dd35      	ble.n	800fac2 <_dtoa_r+0x432>
 800fa56:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fa5a:	9308      	str	r3, [sp, #32]
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	2200      	movs	r2, #0
 800fa60:	4b8b      	ldr	r3, [pc, #556]	; (800fc90 <_dtoa_r+0x600>)
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7f0 fdc8 	bl	80005f8 <__aeabi_dmul>
 800fa68:	e9cd 0100 	strd	r0, r1, [sp]
 800fa6c:	9f02      	ldr	r7, [sp, #8]
 800fa6e:	3501      	adds	r5, #1
 800fa70:	4628      	mov	r0, r5
 800fa72:	f7f0 fd57 	bl	8000524 <__aeabi_i2d>
 800fa76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa7a:	f7f0 fdbd 	bl	80005f8 <__aeabi_dmul>
 800fa7e:	2200      	movs	r2, #0
 800fa80:	4b84      	ldr	r3, [pc, #528]	; (800fc94 <_dtoa_r+0x604>)
 800fa82:	f7f0 fc03 	bl	800028c <__adddf3>
 800fa86:	4605      	mov	r5, r0
 800fa88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fa8c:	2f00      	cmp	r7, #0
 800fa8e:	d15d      	bne.n	800fb4c <_dtoa_r+0x4bc>
 800fa90:	2200      	movs	r2, #0
 800fa92:	4b81      	ldr	r3, [pc, #516]	; (800fc98 <_dtoa_r+0x608>)
 800fa94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa98:	f7f0 fbf6 	bl	8000288 <__aeabi_dsub>
 800fa9c:	462a      	mov	r2, r5
 800fa9e:	4633      	mov	r3, r6
 800faa0:	e9cd 0100 	strd	r0, r1, [sp]
 800faa4:	f7f1 f838 	bl	8000b18 <__aeabi_dcmpgt>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	f040 8288 	bne.w	800ffbe <_dtoa_r+0x92e>
 800faae:	462a      	mov	r2, r5
 800fab0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fab8:	f7f1 f810 	bl	8000adc <__aeabi_dcmplt>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	f040 827c 	bne.w	800ffba <_dtoa_r+0x92a>
 800fac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fac6:	e9cd 2300 	strd	r2, r3, [sp]
 800faca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800facc:	2b00      	cmp	r3, #0
 800face:	f2c0 8150 	blt.w	800fd72 <_dtoa_r+0x6e2>
 800fad2:	f1ba 0f0e 	cmp.w	sl, #14
 800fad6:	f300 814c 	bgt.w	800fd72 <_dtoa_r+0x6e2>
 800fada:	4b6a      	ldr	r3, [pc, #424]	; (800fc84 <_dtoa_r+0x5f4>)
 800fadc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fae0:	ed93 7b00 	vldr	d7, [r3]
 800fae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800faec:	f280 80d8 	bge.w	800fca0 <_dtoa_r+0x610>
 800faf0:	f1b9 0f00 	cmp.w	r9, #0
 800faf4:	f300 80d4 	bgt.w	800fca0 <_dtoa_r+0x610>
 800faf8:	f040 825e 	bne.w	800ffb8 <_dtoa_r+0x928>
 800fafc:	2200      	movs	r2, #0
 800fafe:	4b66      	ldr	r3, [pc, #408]	; (800fc98 <_dtoa_r+0x608>)
 800fb00:	ec51 0b17 	vmov	r0, r1, d7
 800fb04:	f7f0 fd78 	bl	80005f8 <__aeabi_dmul>
 800fb08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb0c:	f7f0 fffa 	bl	8000b04 <__aeabi_dcmpge>
 800fb10:	464f      	mov	r7, r9
 800fb12:	464e      	mov	r6, r9
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f040 8234 	bne.w	800ff82 <_dtoa_r+0x8f2>
 800fb1a:	2331      	movs	r3, #49	; 0x31
 800fb1c:	f10b 0501 	add.w	r5, fp, #1
 800fb20:	f88b 3000 	strb.w	r3, [fp]
 800fb24:	f10a 0a01 	add.w	sl, sl, #1
 800fb28:	e22f      	b.n	800ff8a <_dtoa_r+0x8fa>
 800fb2a:	07f2      	lsls	r2, r6, #31
 800fb2c:	d505      	bpl.n	800fb3a <_dtoa_r+0x4aa>
 800fb2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb32:	f7f0 fd61 	bl	80005f8 <__aeabi_dmul>
 800fb36:	3501      	adds	r5, #1
 800fb38:	2301      	movs	r3, #1
 800fb3a:	1076      	asrs	r6, r6, #1
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	e772      	b.n	800fa26 <_dtoa_r+0x396>
 800fb40:	2502      	movs	r5, #2
 800fb42:	e774      	b.n	800fa2e <_dtoa_r+0x39e>
 800fb44:	f8cd a020 	str.w	sl, [sp, #32]
 800fb48:	464f      	mov	r7, r9
 800fb4a:	e791      	b.n	800fa70 <_dtoa_r+0x3e0>
 800fb4c:	4b4d      	ldr	r3, [pc, #308]	; (800fc84 <_dtoa_r+0x5f4>)
 800fb4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d047      	beq.n	800fbec <_dtoa_r+0x55c>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	2000      	movs	r0, #0
 800fb62:	494e      	ldr	r1, [pc, #312]	; (800fc9c <_dtoa_r+0x60c>)
 800fb64:	f7f0 fe72 	bl	800084c <__aeabi_ddiv>
 800fb68:	462a      	mov	r2, r5
 800fb6a:	4633      	mov	r3, r6
 800fb6c:	f7f0 fb8c 	bl	8000288 <__aeabi_dsub>
 800fb70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fb74:	465d      	mov	r5, fp
 800fb76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb7a:	f7f0 ffed 	bl	8000b58 <__aeabi_d2iz>
 800fb7e:	4606      	mov	r6, r0
 800fb80:	f7f0 fcd0 	bl	8000524 <__aeabi_i2d>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb8c:	f7f0 fb7c 	bl	8000288 <__aeabi_dsub>
 800fb90:	3630      	adds	r6, #48	; 0x30
 800fb92:	f805 6b01 	strb.w	r6, [r5], #1
 800fb96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb9a:	e9cd 0100 	strd	r0, r1, [sp]
 800fb9e:	f7f0 ff9d 	bl	8000adc <__aeabi_dcmplt>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d163      	bne.n	800fc6e <_dtoa_r+0x5de>
 800fba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbaa:	2000      	movs	r0, #0
 800fbac:	4937      	ldr	r1, [pc, #220]	; (800fc8c <_dtoa_r+0x5fc>)
 800fbae:	f7f0 fb6b 	bl	8000288 <__aeabi_dsub>
 800fbb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fbb6:	f7f0 ff91 	bl	8000adc <__aeabi_dcmplt>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f040 80b7 	bne.w	800fd2e <_dtoa_r+0x69e>
 800fbc0:	eba5 030b 	sub.w	r3, r5, fp
 800fbc4:	429f      	cmp	r7, r3
 800fbc6:	f77f af7c 	ble.w	800fac2 <_dtoa_r+0x432>
 800fbca:	2200      	movs	r2, #0
 800fbcc:	4b30      	ldr	r3, [pc, #192]	; (800fc90 <_dtoa_r+0x600>)
 800fbce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbd2:	f7f0 fd11 	bl	80005f8 <__aeabi_dmul>
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbdc:	4b2c      	ldr	r3, [pc, #176]	; (800fc90 <_dtoa_r+0x600>)
 800fbde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbe2:	f7f0 fd09 	bl	80005f8 <__aeabi_dmul>
 800fbe6:	e9cd 0100 	strd	r0, r1, [sp]
 800fbea:	e7c4      	b.n	800fb76 <_dtoa_r+0x4e6>
 800fbec:	462a      	mov	r2, r5
 800fbee:	4633      	mov	r3, r6
 800fbf0:	f7f0 fd02 	bl	80005f8 <__aeabi_dmul>
 800fbf4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbf8:	eb0b 0507 	add.w	r5, fp, r7
 800fbfc:	465e      	mov	r6, fp
 800fbfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc02:	f7f0 ffa9 	bl	8000b58 <__aeabi_d2iz>
 800fc06:	4607      	mov	r7, r0
 800fc08:	f7f0 fc8c 	bl	8000524 <__aeabi_i2d>
 800fc0c:	3730      	adds	r7, #48	; 0x30
 800fc0e:	4602      	mov	r2, r0
 800fc10:	460b      	mov	r3, r1
 800fc12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc16:	f7f0 fb37 	bl	8000288 <__aeabi_dsub>
 800fc1a:	f806 7b01 	strb.w	r7, [r6], #1
 800fc1e:	42ae      	cmp	r6, r5
 800fc20:	e9cd 0100 	strd	r0, r1, [sp]
 800fc24:	f04f 0200 	mov.w	r2, #0
 800fc28:	d126      	bne.n	800fc78 <_dtoa_r+0x5e8>
 800fc2a:	4b1c      	ldr	r3, [pc, #112]	; (800fc9c <_dtoa_r+0x60c>)
 800fc2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc30:	f7f0 fb2c 	bl	800028c <__adddf3>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc3c:	f7f0 ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d174      	bne.n	800fd2e <_dtoa_r+0x69e>
 800fc44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc48:	2000      	movs	r0, #0
 800fc4a:	4914      	ldr	r1, [pc, #80]	; (800fc9c <_dtoa_r+0x60c>)
 800fc4c:	f7f0 fb1c 	bl	8000288 <__aeabi_dsub>
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc58:	f7f0 ff40 	bl	8000adc <__aeabi_dcmplt>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	f43f af30 	beq.w	800fac2 <_dtoa_r+0x432>
 800fc62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc66:	2b30      	cmp	r3, #48	; 0x30
 800fc68:	f105 32ff 	add.w	r2, r5, #4294967295
 800fc6c:	d002      	beq.n	800fc74 <_dtoa_r+0x5e4>
 800fc6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc72:	e04a      	b.n	800fd0a <_dtoa_r+0x67a>
 800fc74:	4615      	mov	r5, r2
 800fc76:	e7f4      	b.n	800fc62 <_dtoa_r+0x5d2>
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <_dtoa_r+0x600>)
 800fc7a:	f7f0 fcbd 	bl	80005f8 <__aeabi_dmul>
 800fc7e:	e9cd 0100 	strd	r0, r1, [sp]
 800fc82:	e7bc      	b.n	800fbfe <_dtoa_r+0x56e>
 800fc84:	080119b0 	.word	0x080119b0
 800fc88:	08011988 	.word	0x08011988
 800fc8c:	3ff00000 	.word	0x3ff00000
 800fc90:	40240000 	.word	0x40240000
 800fc94:	401c0000 	.word	0x401c0000
 800fc98:	40140000 	.word	0x40140000
 800fc9c:	3fe00000 	.word	0x3fe00000
 800fca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fca4:	465d      	mov	r5, fp
 800fca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcaa:	4630      	mov	r0, r6
 800fcac:	4639      	mov	r1, r7
 800fcae:	f7f0 fdcd 	bl	800084c <__aeabi_ddiv>
 800fcb2:	f7f0 ff51 	bl	8000b58 <__aeabi_d2iz>
 800fcb6:	4680      	mov	r8, r0
 800fcb8:	f7f0 fc34 	bl	8000524 <__aeabi_i2d>
 800fcbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcc0:	f7f0 fc9a 	bl	80005f8 <__aeabi_dmul>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4630      	mov	r0, r6
 800fcca:	4639      	mov	r1, r7
 800fccc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fcd0:	f7f0 fada 	bl	8000288 <__aeabi_dsub>
 800fcd4:	f805 6b01 	strb.w	r6, [r5], #1
 800fcd8:	eba5 060b 	sub.w	r6, r5, fp
 800fcdc:	45b1      	cmp	r9, r6
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	d139      	bne.n	800fd58 <_dtoa_r+0x6c8>
 800fce4:	f7f0 fad2 	bl	800028c <__adddf3>
 800fce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcec:	4606      	mov	r6, r0
 800fcee:	460f      	mov	r7, r1
 800fcf0:	f7f0 ff12 	bl	8000b18 <__aeabi_dcmpgt>
 800fcf4:	b9c8      	cbnz	r0, 800fd2a <_dtoa_r+0x69a>
 800fcf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	f7f0 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd02:	b110      	cbz	r0, 800fd0a <_dtoa_r+0x67a>
 800fd04:	f018 0f01 	tst.w	r8, #1
 800fd08:	d10f      	bne.n	800fd2a <_dtoa_r+0x69a>
 800fd0a:	9904      	ldr	r1, [sp, #16]
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f000 fdf9 	bl	8010904 <_Bfree>
 800fd12:	2300      	movs	r3, #0
 800fd14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd16:	702b      	strb	r3, [r5, #0]
 800fd18:	f10a 0301 	add.w	r3, sl, #1
 800fd1c:	6013      	str	r3, [r2, #0]
 800fd1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 8241 	beq.w	80101a8 <_dtoa_r+0xb18>
 800fd26:	601d      	str	r5, [r3, #0]
 800fd28:	e23e      	b.n	80101a8 <_dtoa_r+0xb18>
 800fd2a:	f8cd a020 	str.w	sl, [sp, #32]
 800fd2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd32:	2a39      	cmp	r2, #57	; 0x39
 800fd34:	f105 33ff 	add.w	r3, r5, #4294967295
 800fd38:	d108      	bne.n	800fd4c <_dtoa_r+0x6bc>
 800fd3a:	459b      	cmp	fp, r3
 800fd3c:	d10a      	bne.n	800fd54 <_dtoa_r+0x6c4>
 800fd3e:	9b08      	ldr	r3, [sp, #32]
 800fd40:	3301      	adds	r3, #1
 800fd42:	9308      	str	r3, [sp, #32]
 800fd44:	2330      	movs	r3, #48	; 0x30
 800fd46:	f88b 3000 	strb.w	r3, [fp]
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	781a      	ldrb	r2, [r3, #0]
 800fd4e:	3201      	adds	r2, #1
 800fd50:	701a      	strb	r2, [r3, #0]
 800fd52:	e78c      	b.n	800fc6e <_dtoa_r+0x5de>
 800fd54:	461d      	mov	r5, r3
 800fd56:	e7ea      	b.n	800fd2e <_dtoa_r+0x69e>
 800fd58:	2200      	movs	r2, #0
 800fd5a:	4b9b      	ldr	r3, [pc, #620]	; (800ffc8 <_dtoa_r+0x938>)
 800fd5c:	f7f0 fc4c 	bl	80005f8 <__aeabi_dmul>
 800fd60:	2200      	movs	r2, #0
 800fd62:	2300      	movs	r3, #0
 800fd64:	4606      	mov	r6, r0
 800fd66:	460f      	mov	r7, r1
 800fd68:	f7f0 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d09a      	beq.n	800fca6 <_dtoa_r+0x616>
 800fd70:	e7cb      	b.n	800fd0a <_dtoa_r+0x67a>
 800fd72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd74:	2a00      	cmp	r2, #0
 800fd76:	f000 808b 	beq.w	800fe90 <_dtoa_r+0x800>
 800fd7a:	9a06      	ldr	r2, [sp, #24]
 800fd7c:	2a01      	cmp	r2, #1
 800fd7e:	dc6e      	bgt.n	800fe5e <_dtoa_r+0x7ce>
 800fd80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d067      	beq.n	800fe56 <_dtoa_r+0x7c6>
 800fd86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd8a:	9f07      	ldr	r7, [sp, #28]
 800fd8c:	9d05      	ldr	r5, [sp, #20]
 800fd8e:	9a05      	ldr	r2, [sp, #20]
 800fd90:	2101      	movs	r1, #1
 800fd92:	441a      	add	r2, r3
 800fd94:	4620      	mov	r0, r4
 800fd96:	9205      	str	r2, [sp, #20]
 800fd98:	4498      	add	r8, r3
 800fd9a:	f000 fe91 	bl	8010ac0 <__i2b>
 800fd9e:	4606      	mov	r6, r0
 800fda0:	2d00      	cmp	r5, #0
 800fda2:	dd0c      	ble.n	800fdbe <_dtoa_r+0x72e>
 800fda4:	f1b8 0f00 	cmp.w	r8, #0
 800fda8:	dd09      	ble.n	800fdbe <_dtoa_r+0x72e>
 800fdaa:	4545      	cmp	r5, r8
 800fdac:	9a05      	ldr	r2, [sp, #20]
 800fdae:	462b      	mov	r3, r5
 800fdb0:	bfa8      	it	ge
 800fdb2:	4643      	movge	r3, r8
 800fdb4:	1ad2      	subs	r2, r2, r3
 800fdb6:	9205      	str	r2, [sp, #20]
 800fdb8:	1aed      	subs	r5, r5, r3
 800fdba:	eba8 0803 	sub.w	r8, r8, r3
 800fdbe:	9b07      	ldr	r3, [sp, #28]
 800fdc0:	b1eb      	cbz	r3, 800fdfe <_dtoa_r+0x76e>
 800fdc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d067      	beq.n	800fe98 <_dtoa_r+0x808>
 800fdc8:	b18f      	cbz	r7, 800fdee <_dtoa_r+0x75e>
 800fdca:	4631      	mov	r1, r6
 800fdcc:	463a      	mov	r2, r7
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f000 ff16 	bl	8010c00 <__pow5mult>
 800fdd4:	9a04      	ldr	r2, [sp, #16]
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	4606      	mov	r6, r0
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 fe79 	bl	8010ad2 <__multiply>
 800fde0:	9904      	ldr	r1, [sp, #16]
 800fde2:	9008      	str	r0, [sp, #32]
 800fde4:	4620      	mov	r0, r4
 800fde6:	f000 fd8d 	bl	8010904 <_Bfree>
 800fdea:	9b08      	ldr	r3, [sp, #32]
 800fdec:	9304      	str	r3, [sp, #16]
 800fdee:	9b07      	ldr	r3, [sp, #28]
 800fdf0:	1bda      	subs	r2, r3, r7
 800fdf2:	d004      	beq.n	800fdfe <_dtoa_r+0x76e>
 800fdf4:	9904      	ldr	r1, [sp, #16]
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f000 ff02 	bl	8010c00 <__pow5mult>
 800fdfc:	9004      	str	r0, [sp, #16]
 800fdfe:	2101      	movs	r1, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f000 fe5d 	bl	8010ac0 <__i2b>
 800fe06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe08:	4607      	mov	r7, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 81d0 	beq.w	80101b0 <_dtoa_r+0xb20>
 800fe10:	461a      	mov	r2, r3
 800fe12:	4601      	mov	r1, r0
 800fe14:	4620      	mov	r0, r4
 800fe16:	f000 fef3 	bl	8010c00 <__pow5mult>
 800fe1a:	9b06      	ldr	r3, [sp, #24]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	4607      	mov	r7, r0
 800fe20:	dc40      	bgt.n	800fea4 <_dtoa_r+0x814>
 800fe22:	9b00      	ldr	r3, [sp, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d139      	bne.n	800fe9c <_dtoa_r+0x80c>
 800fe28:	9b01      	ldr	r3, [sp, #4]
 800fe2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d136      	bne.n	800fea0 <_dtoa_r+0x810>
 800fe32:	9b01      	ldr	r3, [sp, #4]
 800fe34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe38:	0d1b      	lsrs	r3, r3, #20
 800fe3a:	051b      	lsls	r3, r3, #20
 800fe3c:	b12b      	cbz	r3, 800fe4a <_dtoa_r+0x7ba>
 800fe3e:	9b05      	ldr	r3, [sp, #20]
 800fe40:	3301      	adds	r3, #1
 800fe42:	9305      	str	r3, [sp, #20]
 800fe44:	f108 0801 	add.w	r8, r8, #1
 800fe48:	2301      	movs	r3, #1
 800fe4a:	9307      	str	r3, [sp, #28]
 800fe4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d12a      	bne.n	800fea8 <_dtoa_r+0x818>
 800fe52:	2001      	movs	r0, #1
 800fe54:	e030      	b.n	800feb8 <_dtoa_r+0x828>
 800fe56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe5c:	e795      	b.n	800fd8a <_dtoa_r+0x6fa>
 800fe5e:	9b07      	ldr	r3, [sp, #28]
 800fe60:	f109 37ff 	add.w	r7, r9, #4294967295
 800fe64:	42bb      	cmp	r3, r7
 800fe66:	bfbf      	itttt	lt
 800fe68:	9b07      	ldrlt	r3, [sp, #28]
 800fe6a:	9707      	strlt	r7, [sp, #28]
 800fe6c:	1afa      	sublt	r2, r7, r3
 800fe6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fe70:	bfbb      	ittet	lt
 800fe72:	189b      	addlt	r3, r3, r2
 800fe74:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fe76:	1bdf      	subge	r7, r3, r7
 800fe78:	2700      	movlt	r7, #0
 800fe7a:	f1b9 0f00 	cmp.w	r9, #0
 800fe7e:	bfb5      	itete	lt
 800fe80:	9b05      	ldrlt	r3, [sp, #20]
 800fe82:	9d05      	ldrge	r5, [sp, #20]
 800fe84:	eba3 0509 	sublt.w	r5, r3, r9
 800fe88:	464b      	movge	r3, r9
 800fe8a:	bfb8      	it	lt
 800fe8c:	2300      	movlt	r3, #0
 800fe8e:	e77e      	b.n	800fd8e <_dtoa_r+0x6fe>
 800fe90:	9f07      	ldr	r7, [sp, #28]
 800fe92:	9d05      	ldr	r5, [sp, #20]
 800fe94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fe96:	e783      	b.n	800fda0 <_dtoa_r+0x710>
 800fe98:	9a07      	ldr	r2, [sp, #28]
 800fe9a:	e7ab      	b.n	800fdf4 <_dtoa_r+0x764>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	e7d4      	b.n	800fe4a <_dtoa_r+0x7ba>
 800fea0:	9b00      	ldr	r3, [sp, #0]
 800fea2:	e7d2      	b.n	800fe4a <_dtoa_r+0x7ba>
 800fea4:	2300      	movs	r3, #0
 800fea6:	9307      	str	r3, [sp, #28]
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800feae:	6918      	ldr	r0, [r3, #16]
 800feb0:	f000 fdb8 	bl	8010a24 <__hi0bits>
 800feb4:	f1c0 0020 	rsb	r0, r0, #32
 800feb8:	4440      	add	r0, r8
 800feba:	f010 001f 	ands.w	r0, r0, #31
 800febe:	d047      	beq.n	800ff50 <_dtoa_r+0x8c0>
 800fec0:	f1c0 0320 	rsb	r3, r0, #32
 800fec4:	2b04      	cmp	r3, #4
 800fec6:	dd3b      	ble.n	800ff40 <_dtoa_r+0x8b0>
 800fec8:	9b05      	ldr	r3, [sp, #20]
 800feca:	f1c0 001c 	rsb	r0, r0, #28
 800fece:	4403      	add	r3, r0
 800fed0:	9305      	str	r3, [sp, #20]
 800fed2:	4405      	add	r5, r0
 800fed4:	4480      	add	r8, r0
 800fed6:	9b05      	ldr	r3, [sp, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	dd05      	ble.n	800fee8 <_dtoa_r+0x858>
 800fedc:	461a      	mov	r2, r3
 800fede:	9904      	ldr	r1, [sp, #16]
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 fedb 	bl	8010c9c <__lshift>
 800fee6:	9004      	str	r0, [sp, #16]
 800fee8:	f1b8 0f00 	cmp.w	r8, #0
 800feec:	dd05      	ble.n	800fefa <_dtoa_r+0x86a>
 800feee:	4639      	mov	r1, r7
 800fef0:	4642      	mov	r2, r8
 800fef2:	4620      	mov	r0, r4
 800fef4:	f000 fed2 	bl	8010c9c <__lshift>
 800fef8:	4607      	mov	r7, r0
 800fefa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fefc:	b353      	cbz	r3, 800ff54 <_dtoa_r+0x8c4>
 800fefe:	4639      	mov	r1, r7
 800ff00:	9804      	ldr	r0, [sp, #16]
 800ff02:	f000 ff1f 	bl	8010d44 <__mcmp>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	da24      	bge.n	800ff54 <_dtoa_r+0x8c4>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	220a      	movs	r2, #10
 800ff0e:	9904      	ldr	r1, [sp, #16]
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fd0e 	bl	8010932 <__multadd>
 800ff16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff18:	9004      	str	r0, [sp, #16]
 800ff1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 814d 	beq.w	80101be <_dtoa_r+0xb2e>
 800ff24:	2300      	movs	r3, #0
 800ff26:	4631      	mov	r1, r6
 800ff28:	220a      	movs	r2, #10
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f000 fd01 	bl	8010932 <__multadd>
 800ff30:	9b02      	ldr	r3, [sp, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	4606      	mov	r6, r0
 800ff36:	dc4f      	bgt.n	800ffd8 <_dtoa_r+0x948>
 800ff38:	9b06      	ldr	r3, [sp, #24]
 800ff3a:	2b02      	cmp	r3, #2
 800ff3c:	dd4c      	ble.n	800ffd8 <_dtoa_r+0x948>
 800ff3e:	e011      	b.n	800ff64 <_dtoa_r+0x8d4>
 800ff40:	d0c9      	beq.n	800fed6 <_dtoa_r+0x846>
 800ff42:	9a05      	ldr	r2, [sp, #20]
 800ff44:	331c      	adds	r3, #28
 800ff46:	441a      	add	r2, r3
 800ff48:	9205      	str	r2, [sp, #20]
 800ff4a:	441d      	add	r5, r3
 800ff4c:	4498      	add	r8, r3
 800ff4e:	e7c2      	b.n	800fed6 <_dtoa_r+0x846>
 800ff50:	4603      	mov	r3, r0
 800ff52:	e7f6      	b.n	800ff42 <_dtoa_r+0x8b2>
 800ff54:	f1b9 0f00 	cmp.w	r9, #0
 800ff58:	dc38      	bgt.n	800ffcc <_dtoa_r+0x93c>
 800ff5a:	9b06      	ldr	r3, [sp, #24]
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	dd35      	ble.n	800ffcc <_dtoa_r+0x93c>
 800ff60:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff64:	9b02      	ldr	r3, [sp, #8]
 800ff66:	b963      	cbnz	r3, 800ff82 <_dtoa_r+0x8f2>
 800ff68:	4639      	mov	r1, r7
 800ff6a:	2205      	movs	r2, #5
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f000 fce0 	bl	8010932 <__multadd>
 800ff72:	4601      	mov	r1, r0
 800ff74:	4607      	mov	r7, r0
 800ff76:	9804      	ldr	r0, [sp, #16]
 800ff78:	f000 fee4 	bl	8010d44 <__mcmp>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	f73f adcc 	bgt.w	800fb1a <_dtoa_r+0x48a>
 800ff82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff84:	465d      	mov	r5, fp
 800ff86:	ea6f 0a03 	mvn.w	sl, r3
 800ff8a:	f04f 0900 	mov.w	r9, #0
 800ff8e:	4639      	mov	r1, r7
 800ff90:	4620      	mov	r0, r4
 800ff92:	f000 fcb7 	bl	8010904 <_Bfree>
 800ff96:	2e00      	cmp	r6, #0
 800ff98:	f43f aeb7 	beq.w	800fd0a <_dtoa_r+0x67a>
 800ff9c:	f1b9 0f00 	cmp.w	r9, #0
 800ffa0:	d005      	beq.n	800ffae <_dtoa_r+0x91e>
 800ffa2:	45b1      	cmp	r9, r6
 800ffa4:	d003      	beq.n	800ffae <_dtoa_r+0x91e>
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 fcab 	bl	8010904 <_Bfree>
 800ffae:	4631      	mov	r1, r6
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f000 fca7 	bl	8010904 <_Bfree>
 800ffb6:	e6a8      	b.n	800fd0a <_dtoa_r+0x67a>
 800ffb8:	2700      	movs	r7, #0
 800ffba:	463e      	mov	r6, r7
 800ffbc:	e7e1      	b.n	800ff82 <_dtoa_r+0x8f2>
 800ffbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ffc2:	463e      	mov	r6, r7
 800ffc4:	e5a9      	b.n	800fb1a <_dtoa_r+0x48a>
 800ffc6:	bf00      	nop
 800ffc8:	40240000 	.word	0x40240000
 800ffcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffce:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 80fa 	beq.w	80101cc <_dtoa_r+0xb3c>
 800ffd8:	2d00      	cmp	r5, #0
 800ffda:	dd05      	ble.n	800ffe8 <_dtoa_r+0x958>
 800ffdc:	4631      	mov	r1, r6
 800ffde:	462a      	mov	r2, r5
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 fe5b 	bl	8010c9c <__lshift>
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	9b07      	ldr	r3, [sp, #28]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d04c      	beq.n	8010088 <_dtoa_r+0x9f8>
 800ffee:	6871      	ldr	r1, [r6, #4]
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fc53 	bl	801089c <_Balloc>
 800fff6:	6932      	ldr	r2, [r6, #16]
 800fff8:	3202      	adds	r2, #2
 800fffa:	4605      	mov	r5, r0
 800fffc:	0092      	lsls	r2, r2, #2
 800fffe:	f106 010c 	add.w	r1, r6, #12
 8010002:	300c      	adds	r0, #12
 8010004:	f7fd fca6 	bl	800d954 <memcpy>
 8010008:	2201      	movs	r2, #1
 801000a:	4629      	mov	r1, r5
 801000c:	4620      	mov	r0, r4
 801000e:	f000 fe45 	bl	8010c9c <__lshift>
 8010012:	9b00      	ldr	r3, [sp, #0]
 8010014:	f8cd b014 	str.w	fp, [sp, #20]
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	46b1      	mov	r9, r6
 801001e:	9307      	str	r3, [sp, #28]
 8010020:	4606      	mov	r6, r0
 8010022:	4639      	mov	r1, r7
 8010024:	9804      	ldr	r0, [sp, #16]
 8010026:	f7ff faa5 	bl	800f574 <quorem>
 801002a:	4649      	mov	r1, r9
 801002c:	4605      	mov	r5, r0
 801002e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010032:	9804      	ldr	r0, [sp, #16]
 8010034:	f000 fe86 	bl	8010d44 <__mcmp>
 8010038:	4632      	mov	r2, r6
 801003a:	9000      	str	r0, [sp, #0]
 801003c:	4639      	mov	r1, r7
 801003e:	4620      	mov	r0, r4
 8010040:	f000 fe9a 	bl	8010d78 <__mdiff>
 8010044:	68c3      	ldr	r3, [r0, #12]
 8010046:	4602      	mov	r2, r0
 8010048:	bb03      	cbnz	r3, 801008c <_dtoa_r+0x9fc>
 801004a:	4601      	mov	r1, r0
 801004c:	9008      	str	r0, [sp, #32]
 801004e:	9804      	ldr	r0, [sp, #16]
 8010050:	f000 fe78 	bl	8010d44 <__mcmp>
 8010054:	9a08      	ldr	r2, [sp, #32]
 8010056:	4603      	mov	r3, r0
 8010058:	4611      	mov	r1, r2
 801005a:	4620      	mov	r0, r4
 801005c:	9308      	str	r3, [sp, #32]
 801005e:	f000 fc51 	bl	8010904 <_Bfree>
 8010062:	9b08      	ldr	r3, [sp, #32]
 8010064:	b9a3      	cbnz	r3, 8010090 <_dtoa_r+0xa00>
 8010066:	9a06      	ldr	r2, [sp, #24]
 8010068:	b992      	cbnz	r2, 8010090 <_dtoa_r+0xa00>
 801006a:	9a07      	ldr	r2, [sp, #28]
 801006c:	b982      	cbnz	r2, 8010090 <_dtoa_r+0xa00>
 801006e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010072:	d029      	beq.n	80100c8 <_dtoa_r+0xa38>
 8010074:	9b00      	ldr	r3, [sp, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	dd01      	ble.n	801007e <_dtoa_r+0x9ee>
 801007a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801007e:	9b05      	ldr	r3, [sp, #20]
 8010080:	1c5d      	adds	r5, r3, #1
 8010082:	f883 8000 	strb.w	r8, [r3]
 8010086:	e782      	b.n	800ff8e <_dtoa_r+0x8fe>
 8010088:	4630      	mov	r0, r6
 801008a:	e7c2      	b.n	8010012 <_dtoa_r+0x982>
 801008c:	2301      	movs	r3, #1
 801008e:	e7e3      	b.n	8010058 <_dtoa_r+0x9c8>
 8010090:	9a00      	ldr	r2, [sp, #0]
 8010092:	2a00      	cmp	r2, #0
 8010094:	db04      	blt.n	80100a0 <_dtoa_r+0xa10>
 8010096:	d125      	bne.n	80100e4 <_dtoa_r+0xa54>
 8010098:	9a06      	ldr	r2, [sp, #24]
 801009a:	bb1a      	cbnz	r2, 80100e4 <_dtoa_r+0xa54>
 801009c:	9a07      	ldr	r2, [sp, #28]
 801009e:	bb0a      	cbnz	r2, 80100e4 <_dtoa_r+0xa54>
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	ddec      	ble.n	801007e <_dtoa_r+0x9ee>
 80100a4:	2201      	movs	r2, #1
 80100a6:	9904      	ldr	r1, [sp, #16]
 80100a8:	4620      	mov	r0, r4
 80100aa:	f000 fdf7 	bl	8010c9c <__lshift>
 80100ae:	4639      	mov	r1, r7
 80100b0:	9004      	str	r0, [sp, #16]
 80100b2:	f000 fe47 	bl	8010d44 <__mcmp>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	dc03      	bgt.n	80100c2 <_dtoa_r+0xa32>
 80100ba:	d1e0      	bne.n	801007e <_dtoa_r+0x9ee>
 80100bc:	f018 0f01 	tst.w	r8, #1
 80100c0:	d0dd      	beq.n	801007e <_dtoa_r+0x9ee>
 80100c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80100c6:	d1d8      	bne.n	801007a <_dtoa_r+0x9ea>
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	9a05      	ldr	r2, [sp, #20]
 80100cc:	1c5d      	adds	r5, r3, #1
 80100ce:	2339      	movs	r3, #57	; 0x39
 80100d0:	7013      	strb	r3, [r2, #0]
 80100d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100d6:	2b39      	cmp	r3, #57	; 0x39
 80100d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80100dc:	d04f      	beq.n	801017e <_dtoa_r+0xaee>
 80100de:	3301      	adds	r3, #1
 80100e0:	7013      	strb	r3, [r2, #0]
 80100e2:	e754      	b.n	800ff8e <_dtoa_r+0x8fe>
 80100e4:	9a05      	ldr	r2, [sp, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f102 0501 	add.w	r5, r2, #1
 80100ec:	dd06      	ble.n	80100fc <_dtoa_r+0xa6c>
 80100ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80100f2:	d0e9      	beq.n	80100c8 <_dtoa_r+0xa38>
 80100f4:	f108 0801 	add.w	r8, r8, #1
 80100f8:	9b05      	ldr	r3, [sp, #20]
 80100fa:	e7c2      	b.n	8010082 <_dtoa_r+0x9f2>
 80100fc:	9a02      	ldr	r2, [sp, #8]
 80100fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010102:	eba5 030b 	sub.w	r3, r5, fp
 8010106:	4293      	cmp	r3, r2
 8010108:	d021      	beq.n	801014e <_dtoa_r+0xabe>
 801010a:	2300      	movs	r3, #0
 801010c:	220a      	movs	r2, #10
 801010e:	9904      	ldr	r1, [sp, #16]
 8010110:	4620      	mov	r0, r4
 8010112:	f000 fc0e 	bl	8010932 <__multadd>
 8010116:	45b1      	cmp	r9, r6
 8010118:	9004      	str	r0, [sp, #16]
 801011a:	f04f 0300 	mov.w	r3, #0
 801011e:	f04f 020a 	mov.w	r2, #10
 8010122:	4649      	mov	r1, r9
 8010124:	4620      	mov	r0, r4
 8010126:	d105      	bne.n	8010134 <_dtoa_r+0xaa4>
 8010128:	f000 fc03 	bl	8010932 <__multadd>
 801012c:	4681      	mov	r9, r0
 801012e:	4606      	mov	r6, r0
 8010130:	9505      	str	r5, [sp, #20]
 8010132:	e776      	b.n	8010022 <_dtoa_r+0x992>
 8010134:	f000 fbfd 	bl	8010932 <__multadd>
 8010138:	4631      	mov	r1, r6
 801013a:	4681      	mov	r9, r0
 801013c:	2300      	movs	r3, #0
 801013e:	220a      	movs	r2, #10
 8010140:	4620      	mov	r0, r4
 8010142:	f000 fbf6 	bl	8010932 <__multadd>
 8010146:	4606      	mov	r6, r0
 8010148:	e7f2      	b.n	8010130 <_dtoa_r+0xaa0>
 801014a:	f04f 0900 	mov.w	r9, #0
 801014e:	2201      	movs	r2, #1
 8010150:	9904      	ldr	r1, [sp, #16]
 8010152:	4620      	mov	r0, r4
 8010154:	f000 fda2 	bl	8010c9c <__lshift>
 8010158:	4639      	mov	r1, r7
 801015a:	9004      	str	r0, [sp, #16]
 801015c:	f000 fdf2 	bl	8010d44 <__mcmp>
 8010160:	2800      	cmp	r0, #0
 8010162:	dcb6      	bgt.n	80100d2 <_dtoa_r+0xa42>
 8010164:	d102      	bne.n	801016c <_dtoa_r+0xadc>
 8010166:	f018 0f01 	tst.w	r8, #1
 801016a:	d1b2      	bne.n	80100d2 <_dtoa_r+0xa42>
 801016c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010170:	2b30      	cmp	r3, #48	; 0x30
 8010172:	f105 32ff 	add.w	r2, r5, #4294967295
 8010176:	f47f af0a 	bne.w	800ff8e <_dtoa_r+0x8fe>
 801017a:	4615      	mov	r5, r2
 801017c:	e7f6      	b.n	801016c <_dtoa_r+0xadc>
 801017e:	4593      	cmp	fp, r2
 8010180:	d105      	bne.n	801018e <_dtoa_r+0xafe>
 8010182:	2331      	movs	r3, #49	; 0x31
 8010184:	f10a 0a01 	add.w	sl, sl, #1
 8010188:	f88b 3000 	strb.w	r3, [fp]
 801018c:	e6ff      	b.n	800ff8e <_dtoa_r+0x8fe>
 801018e:	4615      	mov	r5, r2
 8010190:	e79f      	b.n	80100d2 <_dtoa_r+0xa42>
 8010192:	f8df b064 	ldr.w	fp, [pc, #100]	; 80101f8 <_dtoa_r+0xb68>
 8010196:	e007      	b.n	80101a8 <_dtoa_r+0xb18>
 8010198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801019a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80101fc <_dtoa_r+0xb6c>
 801019e:	b11b      	cbz	r3, 80101a8 <_dtoa_r+0xb18>
 80101a0:	f10b 0308 	add.w	r3, fp, #8
 80101a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80101a6:	6013      	str	r3, [r2, #0]
 80101a8:	4658      	mov	r0, fp
 80101aa:	b017      	add	sp, #92	; 0x5c
 80101ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b0:	9b06      	ldr	r3, [sp, #24]
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	f77f ae35 	ble.w	800fe22 <_dtoa_r+0x792>
 80101b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101ba:	9307      	str	r3, [sp, #28]
 80101bc:	e649      	b.n	800fe52 <_dtoa_r+0x7c2>
 80101be:	9b02      	ldr	r3, [sp, #8]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	dc03      	bgt.n	80101cc <_dtoa_r+0xb3c>
 80101c4:	9b06      	ldr	r3, [sp, #24]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	f73f aecc 	bgt.w	800ff64 <_dtoa_r+0x8d4>
 80101cc:	465d      	mov	r5, fp
 80101ce:	4639      	mov	r1, r7
 80101d0:	9804      	ldr	r0, [sp, #16]
 80101d2:	f7ff f9cf 	bl	800f574 <quorem>
 80101d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80101da:	f805 8b01 	strb.w	r8, [r5], #1
 80101de:	9a02      	ldr	r2, [sp, #8]
 80101e0:	eba5 030b 	sub.w	r3, r5, fp
 80101e4:	429a      	cmp	r2, r3
 80101e6:	ddb0      	ble.n	801014a <_dtoa_r+0xaba>
 80101e8:	2300      	movs	r3, #0
 80101ea:	220a      	movs	r2, #10
 80101ec:	9904      	ldr	r1, [sp, #16]
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 fb9f 	bl	8010932 <__multadd>
 80101f4:	9004      	str	r0, [sp, #16]
 80101f6:	e7ea      	b.n	80101ce <_dtoa_r+0xb3e>
 80101f8:	080118f0 	.word	0x080118f0
 80101fc:	08011970 	.word	0x08011970

08010200 <rshift>:
 8010200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010202:	6906      	ldr	r6, [r0, #16]
 8010204:	114b      	asrs	r3, r1, #5
 8010206:	429e      	cmp	r6, r3
 8010208:	f100 0414 	add.w	r4, r0, #20
 801020c:	dd30      	ble.n	8010270 <rshift+0x70>
 801020e:	f011 011f 	ands.w	r1, r1, #31
 8010212:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010216:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801021a:	d108      	bne.n	801022e <rshift+0x2e>
 801021c:	4621      	mov	r1, r4
 801021e:	42b2      	cmp	r2, r6
 8010220:	460b      	mov	r3, r1
 8010222:	d211      	bcs.n	8010248 <rshift+0x48>
 8010224:	f852 3b04 	ldr.w	r3, [r2], #4
 8010228:	f841 3b04 	str.w	r3, [r1], #4
 801022c:	e7f7      	b.n	801021e <rshift+0x1e>
 801022e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010232:	f1c1 0c20 	rsb	ip, r1, #32
 8010236:	40cd      	lsrs	r5, r1
 8010238:	3204      	adds	r2, #4
 801023a:	4623      	mov	r3, r4
 801023c:	42b2      	cmp	r2, r6
 801023e:	4617      	mov	r7, r2
 8010240:	d30c      	bcc.n	801025c <rshift+0x5c>
 8010242:	601d      	str	r5, [r3, #0]
 8010244:	b105      	cbz	r5, 8010248 <rshift+0x48>
 8010246:	3304      	adds	r3, #4
 8010248:	1b1a      	subs	r2, r3, r4
 801024a:	42a3      	cmp	r3, r4
 801024c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010250:	bf08      	it	eq
 8010252:	2300      	moveq	r3, #0
 8010254:	6102      	str	r2, [r0, #16]
 8010256:	bf08      	it	eq
 8010258:	6143      	streq	r3, [r0, #20]
 801025a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801025c:	683f      	ldr	r7, [r7, #0]
 801025e:	fa07 f70c 	lsl.w	r7, r7, ip
 8010262:	433d      	orrs	r5, r7
 8010264:	f843 5b04 	str.w	r5, [r3], #4
 8010268:	f852 5b04 	ldr.w	r5, [r2], #4
 801026c:	40cd      	lsrs	r5, r1
 801026e:	e7e5      	b.n	801023c <rshift+0x3c>
 8010270:	4623      	mov	r3, r4
 8010272:	e7e9      	b.n	8010248 <rshift+0x48>

08010274 <__hexdig_fun>:
 8010274:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010278:	2b09      	cmp	r3, #9
 801027a:	d802      	bhi.n	8010282 <__hexdig_fun+0xe>
 801027c:	3820      	subs	r0, #32
 801027e:	b2c0      	uxtb	r0, r0
 8010280:	4770      	bx	lr
 8010282:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010286:	2b05      	cmp	r3, #5
 8010288:	d801      	bhi.n	801028e <__hexdig_fun+0x1a>
 801028a:	3847      	subs	r0, #71	; 0x47
 801028c:	e7f7      	b.n	801027e <__hexdig_fun+0xa>
 801028e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010292:	2b05      	cmp	r3, #5
 8010294:	d801      	bhi.n	801029a <__hexdig_fun+0x26>
 8010296:	3827      	subs	r0, #39	; 0x27
 8010298:	e7f1      	b.n	801027e <__hexdig_fun+0xa>
 801029a:	2000      	movs	r0, #0
 801029c:	4770      	bx	lr

0801029e <__gethex>:
 801029e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a2:	b08b      	sub	sp, #44	; 0x2c
 80102a4:	468a      	mov	sl, r1
 80102a6:	9002      	str	r0, [sp, #8]
 80102a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80102aa:	9306      	str	r3, [sp, #24]
 80102ac:	4690      	mov	r8, r2
 80102ae:	f000 fad0 	bl	8010852 <__localeconv_l>
 80102b2:	6803      	ldr	r3, [r0, #0]
 80102b4:	9303      	str	r3, [sp, #12]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ef ff8a 	bl	80001d0 <strlen>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	9001      	str	r0, [sp, #4]
 80102c0:	4403      	add	r3, r0
 80102c2:	f04f 0b00 	mov.w	fp, #0
 80102c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80102ca:	9307      	str	r3, [sp, #28]
 80102cc:	f8da 3000 	ldr.w	r3, [sl]
 80102d0:	3302      	adds	r3, #2
 80102d2:	461f      	mov	r7, r3
 80102d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80102d8:	2830      	cmp	r0, #48	; 0x30
 80102da:	d06c      	beq.n	80103b6 <__gethex+0x118>
 80102dc:	f7ff ffca 	bl	8010274 <__hexdig_fun>
 80102e0:	4604      	mov	r4, r0
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d16a      	bne.n	80103bc <__gethex+0x11e>
 80102e6:	9a01      	ldr	r2, [sp, #4]
 80102e8:	9903      	ldr	r1, [sp, #12]
 80102ea:	4638      	mov	r0, r7
 80102ec:	f7fe fa62 	bl	800e7b4 <strncmp>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d166      	bne.n	80103c2 <__gethex+0x124>
 80102f4:	9b01      	ldr	r3, [sp, #4]
 80102f6:	5cf8      	ldrb	r0, [r7, r3]
 80102f8:	18fe      	adds	r6, r7, r3
 80102fa:	f7ff ffbb 	bl	8010274 <__hexdig_fun>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d062      	beq.n	80103c8 <__gethex+0x12a>
 8010302:	4633      	mov	r3, r6
 8010304:	7818      	ldrb	r0, [r3, #0]
 8010306:	2830      	cmp	r0, #48	; 0x30
 8010308:	461f      	mov	r7, r3
 801030a:	f103 0301 	add.w	r3, r3, #1
 801030e:	d0f9      	beq.n	8010304 <__gethex+0x66>
 8010310:	f7ff ffb0 	bl	8010274 <__hexdig_fun>
 8010314:	fab0 f580 	clz	r5, r0
 8010318:	096d      	lsrs	r5, r5, #5
 801031a:	4634      	mov	r4, r6
 801031c:	f04f 0b01 	mov.w	fp, #1
 8010320:	463a      	mov	r2, r7
 8010322:	4616      	mov	r6, r2
 8010324:	3201      	adds	r2, #1
 8010326:	7830      	ldrb	r0, [r6, #0]
 8010328:	f7ff ffa4 	bl	8010274 <__hexdig_fun>
 801032c:	2800      	cmp	r0, #0
 801032e:	d1f8      	bne.n	8010322 <__gethex+0x84>
 8010330:	9a01      	ldr	r2, [sp, #4]
 8010332:	9903      	ldr	r1, [sp, #12]
 8010334:	4630      	mov	r0, r6
 8010336:	f7fe fa3d 	bl	800e7b4 <strncmp>
 801033a:	b950      	cbnz	r0, 8010352 <__gethex+0xb4>
 801033c:	b954      	cbnz	r4, 8010354 <__gethex+0xb6>
 801033e:	9b01      	ldr	r3, [sp, #4]
 8010340:	18f4      	adds	r4, r6, r3
 8010342:	4622      	mov	r2, r4
 8010344:	4616      	mov	r6, r2
 8010346:	3201      	adds	r2, #1
 8010348:	7830      	ldrb	r0, [r6, #0]
 801034a:	f7ff ff93 	bl	8010274 <__hexdig_fun>
 801034e:	2800      	cmp	r0, #0
 8010350:	d1f8      	bne.n	8010344 <__gethex+0xa6>
 8010352:	b10c      	cbz	r4, 8010358 <__gethex+0xba>
 8010354:	1ba4      	subs	r4, r4, r6
 8010356:	00a4      	lsls	r4, r4, #2
 8010358:	7833      	ldrb	r3, [r6, #0]
 801035a:	2b50      	cmp	r3, #80	; 0x50
 801035c:	d001      	beq.n	8010362 <__gethex+0xc4>
 801035e:	2b70      	cmp	r3, #112	; 0x70
 8010360:	d140      	bne.n	80103e4 <__gethex+0x146>
 8010362:	7873      	ldrb	r3, [r6, #1]
 8010364:	2b2b      	cmp	r3, #43	; 0x2b
 8010366:	d031      	beq.n	80103cc <__gethex+0x12e>
 8010368:	2b2d      	cmp	r3, #45	; 0x2d
 801036a:	d033      	beq.n	80103d4 <__gethex+0x136>
 801036c:	1c71      	adds	r1, r6, #1
 801036e:	f04f 0900 	mov.w	r9, #0
 8010372:	7808      	ldrb	r0, [r1, #0]
 8010374:	f7ff ff7e 	bl	8010274 <__hexdig_fun>
 8010378:	1e43      	subs	r3, r0, #1
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b18      	cmp	r3, #24
 801037e:	d831      	bhi.n	80103e4 <__gethex+0x146>
 8010380:	f1a0 0210 	sub.w	r2, r0, #16
 8010384:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010388:	f7ff ff74 	bl	8010274 <__hexdig_fun>
 801038c:	1e43      	subs	r3, r0, #1
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b18      	cmp	r3, #24
 8010392:	d922      	bls.n	80103da <__gethex+0x13c>
 8010394:	f1b9 0f00 	cmp.w	r9, #0
 8010398:	d000      	beq.n	801039c <__gethex+0xfe>
 801039a:	4252      	negs	r2, r2
 801039c:	4414      	add	r4, r2
 801039e:	f8ca 1000 	str.w	r1, [sl]
 80103a2:	b30d      	cbz	r5, 80103e8 <__gethex+0x14a>
 80103a4:	f1bb 0f00 	cmp.w	fp, #0
 80103a8:	bf0c      	ite	eq
 80103aa:	2706      	moveq	r7, #6
 80103ac:	2700      	movne	r7, #0
 80103ae:	4638      	mov	r0, r7
 80103b0:	b00b      	add	sp, #44	; 0x2c
 80103b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b6:	f10b 0b01 	add.w	fp, fp, #1
 80103ba:	e78a      	b.n	80102d2 <__gethex+0x34>
 80103bc:	2500      	movs	r5, #0
 80103be:	462c      	mov	r4, r5
 80103c0:	e7ae      	b.n	8010320 <__gethex+0x82>
 80103c2:	463e      	mov	r6, r7
 80103c4:	2501      	movs	r5, #1
 80103c6:	e7c7      	b.n	8010358 <__gethex+0xba>
 80103c8:	4604      	mov	r4, r0
 80103ca:	e7fb      	b.n	80103c4 <__gethex+0x126>
 80103cc:	f04f 0900 	mov.w	r9, #0
 80103d0:	1cb1      	adds	r1, r6, #2
 80103d2:	e7ce      	b.n	8010372 <__gethex+0xd4>
 80103d4:	f04f 0901 	mov.w	r9, #1
 80103d8:	e7fa      	b.n	80103d0 <__gethex+0x132>
 80103da:	230a      	movs	r3, #10
 80103dc:	fb03 0202 	mla	r2, r3, r2, r0
 80103e0:	3a10      	subs	r2, #16
 80103e2:	e7cf      	b.n	8010384 <__gethex+0xe6>
 80103e4:	4631      	mov	r1, r6
 80103e6:	e7da      	b.n	801039e <__gethex+0x100>
 80103e8:	1bf3      	subs	r3, r6, r7
 80103ea:	3b01      	subs	r3, #1
 80103ec:	4629      	mov	r1, r5
 80103ee:	2b07      	cmp	r3, #7
 80103f0:	dc49      	bgt.n	8010486 <__gethex+0x1e8>
 80103f2:	9802      	ldr	r0, [sp, #8]
 80103f4:	f000 fa52 	bl	801089c <_Balloc>
 80103f8:	9b01      	ldr	r3, [sp, #4]
 80103fa:	f100 0914 	add.w	r9, r0, #20
 80103fe:	f04f 0b00 	mov.w	fp, #0
 8010402:	f1c3 0301 	rsb	r3, r3, #1
 8010406:	4605      	mov	r5, r0
 8010408:	f8cd 9010 	str.w	r9, [sp, #16]
 801040c:	46da      	mov	sl, fp
 801040e:	9308      	str	r3, [sp, #32]
 8010410:	42b7      	cmp	r7, r6
 8010412:	d33b      	bcc.n	801048c <__gethex+0x1ee>
 8010414:	9804      	ldr	r0, [sp, #16]
 8010416:	f840 ab04 	str.w	sl, [r0], #4
 801041a:	eba0 0009 	sub.w	r0, r0, r9
 801041e:	1080      	asrs	r0, r0, #2
 8010420:	6128      	str	r0, [r5, #16]
 8010422:	0147      	lsls	r7, r0, #5
 8010424:	4650      	mov	r0, sl
 8010426:	f000 fafd 	bl	8010a24 <__hi0bits>
 801042a:	f8d8 6000 	ldr.w	r6, [r8]
 801042e:	1a3f      	subs	r7, r7, r0
 8010430:	42b7      	cmp	r7, r6
 8010432:	dd64      	ble.n	80104fe <__gethex+0x260>
 8010434:	1bbf      	subs	r7, r7, r6
 8010436:	4639      	mov	r1, r7
 8010438:	4628      	mov	r0, r5
 801043a:	f000 fe0d 	bl	8011058 <__any_on>
 801043e:	4682      	mov	sl, r0
 8010440:	b178      	cbz	r0, 8010462 <__gethex+0x1c4>
 8010442:	1e7b      	subs	r3, r7, #1
 8010444:	1159      	asrs	r1, r3, #5
 8010446:	f003 021f 	and.w	r2, r3, #31
 801044a:	f04f 0a01 	mov.w	sl, #1
 801044e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010452:	fa0a f202 	lsl.w	r2, sl, r2
 8010456:	420a      	tst	r2, r1
 8010458:	d003      	beq.n	8010462 <__gethex+0x1c4>
 801045a:	4553      	cmp	r3, sl
 801045c:	dc46      	bgt.n	80104ec <__gethex+0x24e>
 801045e:	f04f 0a02 	mov.w	sl, #2
 8010462:	4639      	mov	r1, r7
 8010464:	4628      	mov	r0, r5
 8010466:	f7ff fecb 	bl	8010200 <rshift>
 801046a:	443c      	add	r4, r7
 801046c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010470:	42a3      	cmp	r3, r4
 8010472:	da52      	bge.n	801051a <__gethex+0x27c>
 8010474:	4629      	mov	r1, r5
 8010476:	9802      	ldr	r0, [sp, #8]
 8010478:	f000 fa44 	bl	8010904 <_Bfree>
 801047c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801047e:	2300      	movs	r3, #0
 8010480:	6013      	str	r3, [r2, #0]
 8010482:	27a3      	movs	r7, #163	; 0xa3
 8010484:	e793      	b.n	80103ae <__gethex+0x110>
 8010486:	3101      	adds	r1, #1
 8010488:	105b      	asrs	r3, r3, #1
 801048a:	e7b0      	b.n	80103ee <__gethex+0x150>
 801048c:	1e73      	subs	r3, r6, #1
 801048e:	9305      	str	r3, [sp, #20]
 8010490:	9a07      	ldr	r2, [sp, #28]
 8010492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010496:	4293      	cmp	r3, r2
 8010498:	d018      	beq.n	80104cc <__gethex+0x22e>
 801049a:	f1bb 0f20 	cmp.w	fp, #32
 801049e:	d107      	bne.n	80104b0 <__gethex+0x212>
 80104a0:	9b04      	ldr	r3, [sp, #16]
 80104a2:	f8c3 a000 	str.w	sl, [r3]
 80104a6:	3304      	adds	r3, #4
 80104a8:	f04f 0a00 	mov.w	sl, #0
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	46d3      	mov	fp, sl
 80104b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80104b4:	f7ff fede 	bl	8010274 <__hexdig_fun>
 80104b8:	f000 000f 	and.w	r0, r0, #15
 80104bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80104c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80104c4:	f10b 0b04 	add.w	fp, fp, #4
 80104c8:	9b05      	ldr	r3, [sp, #20]
 80104ca:	e00d      	b.n	80104e8 <__gethex+0x24a>
 80104cc:	9b05      	ldr	r3, [sp, #20]
 80104ce:	9a08      	ldr	r2, [sp, #32]
 80104d0:	4413      	add	r3, r2
 80104d2:	42bb      	cmp	r3, r7
 80104d4:	d3e1      	bcc.n	801049a <__gethex+0x1fc>
 80104d6:	4618      	mov	r0, r3
 80104d8:	9a01      	ldr	r2, [sp, #4]
 80104da:	9903      	ldr	r1, [sp, #12]
 80104dc:	9309      	str	r3, [sp, #36]	; 0x24
 80104de:	f7fe f969 	bl	800e7b4 <strncmp>
 80104e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d1d8      	bne.n	801049a <__gethex+0x1fc>
 80104e8:	461e      	mov	r6, r3
 80104ea:	e791      	b.n	8010410 <__gethex+0x172>
 80104ec:	1eb9      	subs	r1, r7, #2
 80104ee:	4628      	mov	r0, r5
 80104f0:	f000 fdb2 	bl	8011058 <__any_on>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d0b2      	beq.n	801045e <__gethex+0x1c0>
 80104f8:	f04f 0a03 	mov.w	sl, #3
 80104fc:	e7b1      	b.n	8010462 <__gethex+0x1c4>
 80104fe:	da09      	bge.n	8010514 <__gethex+0x276>
 8010500:	1bf7      	subs	r7, r6, r7
 8010502:	4629      	mov	r1, r5
 8010504:	463a      	mov	r2, r7
 8010506:	9802      	ldr	r0, [sp, #8]
 8010508:	f000 fbc8 	bl	8010c9c <__lshift>
 801050c:	1be4      	subs	r4, r4, r7
 801050e:	4605      	mov	r5, r0
 8010510:	f100 0914 	add.w	r9, r0, #20
 8010514:	f04f 0a00 	mov.w	sl, #0
 8010518:	e7a8      	b.n	801046c <__gethex+0x1ce>
 801051a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801051e:	42a0      	cmp	r0, r4
 8010520:	dd6a      	ble.n	80105f8 <__gethex+0x35a>
 8010522:	1b04      	subs	r4, r0, r4
 8010524:	42a6      	cmp	r6, r4
 8010526:	dc2e      	bgt.n	8010586 <__gethex+0x2e8>
 8010528:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d022      	beq.n	8010576 <__gethex+0x2d8>
 8010530:	2b03      	cmp	r3, #3
 8010532:	d024      	beq.n	801057e <__gethex+0x2e0>
 8010534:	2b01      	cmp	r3, #1
 8010536:	d115      	bne.n	8010564 <__gethex+0x2c6>
 8010538:	42a6      	cmp	r6, r4
 801053a:	d113      	bne.n	8010564 <__gethex+0x2c6>
 801053c:	2e01      	cmp	r6, #1
 801053e:	dc0b      	bgt.n	8010558 <__gethex+0x2ba>
 8010540:	9a06      	ldr	r2, [sp, #24]
 8010542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010546:	6013      	str	r3, [r2, #0]
 8010548:	2301      	movs	r3, #1
 801054a:	612b      	str	r3, [r5, #16]
 801054c:	f8c9 3000 	str.w	r3, [r9]
 8010550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010552:	2762      	movs	r7, #98	; 0x62
 8010554:	601d      	str	r5, [r3, #0]
 8010556:	e72a      	b.n	80103ae <__gethex+0x110>
 8010558:	1e71      	subs	r1, r6, #1
 801055a:	4628      	mov	r0, r5
 801055c:	f000 fd7c 	bl	8011058 <__any_on>
 8010560:	2800      	cmp	r0, #0
 8010562:	d1ed      	bne.n	8010540 <__gethex+0x2a2>
 8010564:	4629      	mov	r1, r5
 8010566:	9802      	ldr	r0, [sp, #8]
 8010568:	f000 f9cc 	bl	8010904 <_Bfree>
 801056c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801056e:	2300      	movs	r3, #0
 8010570:	6013      	str	r3, [r2, #0]
 8010572:	2750      	movs	r7, #80	; 0x50
 8010574:	e71b      	b.n	80103ae <__gethex+0x110>
 8010576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010578:	2b00      	cmp	r3, #0
 801057a:	d0e1      	beq.n	8010540 <__gethex+0x2a2>
 801057c:	e7f2      	b.n	8010564 <__gethex+0x2c6>
 801057e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1dd      	bne.n	8010540 <__gethex+0x2a2>
 8010584:	e7ee      	b.n	8010564 <__gethex+0x2c6>
 8010586:	1e67      	subs	r7, r4, #1
 8010588:	f1ba 0f00 	cmp.w	sl, #0
 801058c:	d131      	bne.n	80105f2 <__gethex+0x354>
 801058e:	b127      	cbz	r7, 801059a <__gethex+0x2fc>
 8010590:	4639      	mov	r1, r7
 8010592:	4628      	mov	r0, r5
 8010594:	f000 fd60 	bl	8011058 <__any_on>
 8010598:	4682      	mov	sl, r0
 801059a:	117a      	asrs	r2, r7, #5
 801059c:	2301      	movs	r3, #1
 801059e:	f007 071f 	and.w	r7, r7, #31
 80105a2:	fa03 f707 	lsl.w	r7, r3, r7
 80105a6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80105aa:	4621      	mov	r1, r4
 80105ac:	421f      	tst	r7, r3
 80105ae:	4628      	mov	r0, r5
 80105b0:	bf18      	it	ne
 80105b2:	f04a 0a02 	orrne.w	sl, sl, #2
 80105b6:	1b36      	subs	r6, r6, r4
 80105b8:	f7ff fe22 	bl	8010200 <rshift>
 80105bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80105c0:	2702      	movs	r7, #2
 80105c2:	f1ba 0f00 	cmp.w	sl, #0
 80105c6:	d048      	beq.n	801065a <__gethex+0x3bc>
 80105c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d015      	beq.n	80105fc <__gethex+0x35e>
 80105d0:	2b03      	cmp	r3, #3
 80105d2:	d017      	beq.n	8010604 <__gethex+0x366>
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d109      	bne.n	80105ec <__gethex+0x34e>
 80105d8:	f01a 0f02 	tst.w	sl, #2
 80105dc:	d006      	beq.n	80105ec <__gethex+0x34e>
 80105de:	f8d9 3000 	ldr.w	r3, [r9]
 80105e2:	ea4a 0a03 	orr.w	sl, sl, r3
 80105e6:	f01a 0f01 	tst.w	sl, #1
 80105ea:	d10e      	bne.n	801060a <__gethex+0x36c>
 80105ec:	f047 0710 	orr.w	r7, r7, #16
 80105f0:	e033      	b.n	801065a <__gethex+0x3bc>
 80105f2:	f04f 0a01 	mov.w	sl, #1
 80105f6:	e7d0      	b.n	801059a <__gethex+0x2fc>
 80105f8:	2701      	movs	r7, #1
 80105fa:	e7e2      	b.n	80105c2 <__gethex+0x324>
 80105fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105fe:	f1c3 0301 	rsb	r3, r3, #1
 8010602:	9315      	str	r3, [sp, #84]	; 0x54
 8010604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0f0      	beq.n	80105ec <__gethex+0x34e>
 801060a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801060e:	f105 0314 	add.w	r3, r5, #20
 8010612:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010616:	eb03 010a 	add.w	r1, r3, sl
 801061a:	f04f 0c00 	mov.w	ip, #0
 801061e:	4618      	mov	r0, r3
 8010620:	f853 2b04 	ldr.w	r2, [r3], #4
 8010624:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010628:	d01c      	beq.n	8010664 <__gethex+0x3c6>
 801062a:	3201      	adds	r2, #1
 801062c:	6002      	str	r2, [r0, #0]
 801062e:	2f02      	cmp	r7, #2
 8010630:	f105 0314 	add.w	r3, r5, #20
 8010634:	d138      	bne.n	80106a8 <__gethex+0x40a>
 8010636:	f8d8 2000 	ldr.w	r2, [r8]
 801063a:	3a01      	subs	r2, #1
 801063c:	42b2      	cmp	r2, r6
 801063e:	d10a      	bne.n	8010656 <__gethex+0x3b8>
 8010640:	1171      	asrs	r1, r6, #5
 8010642:	2201      	movs	r2, #1
 8010644:	f006 061f 	and.w	r6, r6, #31
 8010648:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801064c:	fa02 f606 	lsl.w	r6, r2, r6
 8010650:	421e      	tst	r6, r3
 8010652:	bf18      	it	ne
 8010654:	4617      	movne	r7, r2
 8010656:	f047 0720 	orr.w	r7, r7, #32
 801065a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801065c:	601d      	str	r5, [r3, #0]
 801065e:	9b06      	ldr	r3, [sp, #24]
 8010660:	601c      	str	r4, [r3, #0]
 8010662:	e6a4      	b.n	80103ae <__gethex+0x110>
 8010664:	4299      	cmp	r1, r3
 8010666:	f843 cc04 	str.w	ip, [r3, #-4]
 801066a:	d8d8      	bhi.n	801061e <__gethex+0x380>
 801066c:	68ab      	ldr	r3, [r5, #8]
 801066e:	4599      	cmp	r9, r3
 8010670:	db12      	blt.n	8010698 <__gethex+0x3fa>
 8010672:	6869      	ldr	r1, [r5, #4]
 8010674:	9802      	ldr	r0, [sp, #8]
 8010676:	3101      	adds	r1, #1
 8010678:	f000 f910 	bl	801089c <_Balloc>
 801067c:	692a      	ldr	r2, [r5, #16]
 801067e:	3202      	adds	r2, #2
 8010680:	f105 010c 	add.w	r1, r5, #12
 8010684:	4683      	mov	fp, r0
 8010686:	0092      	lsls	r2, r2, #2
 8010688:	300c      	adds	r0, #12
 801068a:	f7fd f963 	bl	800d954 <memcpy>
 801068e:	4629      	mov	r1, r5
 8010690:	9802      	ldr	r0, [sp, #8]
 8010692:	f000 f937 	bl	8010904 <_Bfree>
 8010696:	465d      	mov	r5, fp
 8010698:	692b      	ldr	r3, [r5, #16]
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80106a0:	612a      	str	r2, [r5, #16]
 80106a2:	2201      	movs	r2, #1
 80106a4:	615a      	str	r2, [r3, #20]
 80106a6:	e7c2      	b.n	801062e <__gethex+0x390>
 80106a8:	692a      	ldr	r2, [r5, #16]
 80106aa:	454a      	cmp	r2, r9
 80106ac:	dd0b      	ble.n	80106c6 <__gethex+0x428>
 80106ae:	2101      	movs	r1, #1
 80106b0:	4628      	mov	r0, r5
 80106b2:	f7ff fda5 	bl	8010200 <rshift>
 80106b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106ba:	3401      	adds	r4, #1
 80106bc:	42a3      	cmp	r3, r4
 80106be:	f6ff aed9 	blt.w	8010474 <__gethex+0x1d6>
 80106c2:	2701      	movs	r7, #1
 80106c4:	e7c7      	b.n	8010656 <__gethex+0x3b8>
 80106c6:	f016 061f 	ands.w	r6, r6, #31
 80106ca:	d0fa      	beq.n	80106c2 <__gethex+0x424>
 80106cc:	449a      	add	sl, r3
 80106ce:	f1c6 0620 	rsb	r6, r6, #32
 80106d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80106d6:	f000 f9a5 	bl	8010a24 <__hi0bits>
 80106da:	42b0      	cmp	r0, r6
 80106dc:	dbe7      	blt.n	80106ae <__gethex+0x410>
 80106de:	e7f0      	b.n	80106c2 <__gethex+0x424>

080106e0 <L_shift>:
 80106e0:	f1c2 0208 	rsb	r2, r2, #8
 80106e4:	0092      	lsls	r2, r2, #2
 80106e6:	b570      	push	{r4, r5, r6, lr}
 80106e8:	f1c2 0620 	rsb	r6, r2, #32
 80106ec:	6843      	ldr	r3, [r0, #4]
 80106ee:	6804      	ldr	r4, [r0, #0]
 80106f0:	fa03 f506 	lsl.w	r5, r3, r6
 80106f4:	432c      	orrs	r4, r5
 80106f6:	40d3      	lsrs	r3, r2
 80106f8:	6004      	str	r4, [r0, #0]
 80106fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80106fe:	4288      	cmp	r0, r1
 8010700:	d3f4      	bcc.n	80106ec <L_shift+0xc>
 8010702:	bd70      	pop	{r4, r5, r6, pc}

08010704 <__match>:
 8010704:	b530      	push	{r4, r5, lr}
 8010706:	6803      	ldr	r3, [r0, #0]
 8010708:	3301      	adds	r3, #1
 801070a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801070e:	b914      	cbnz	r4, 8010716 <__match+0x12>
 8010710:	6003      	str	r3, [r0, #0]
 8010712:	2001      	movs	r0, #1
 8010714:	bd30      	pop	{r4, r5, pc}
 8010716:	f813 2b01 	ldrb.w	r2, [r3], #1
 801071a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801071e:	2d19      	cmp	r5, #25
 8010720:	bf98      	it	ls
 8010722:	3220      	addls	r2, #32
 8010724:	42a2      	cmp	r2, r4
 8010726:	d0f0      	beq.n	801070a <__match+0x6>
 8010728:	2000      	movs	r0, #0
 801072a:	e7f3      	b.n	8010714 <__match+0x10>

0801072c <__hexnan>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	680b      	ldr	r3, [r1, #0]
 8010732:	6801      	ldr	r1, [r0, #0]
 8010734:	115f      	asrs	r7, r3, #5
 8010736:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801073a:	f013 031f 	ands.w	r3, r3, #31
 801073e:	b087      	sub	sp, #28
 8010740:	bf18      	it	ne
 8010742:	3704      	addne	r7, #4
 8010744:	2500      	movs	r5, #0
 8010746:	1f3e      	subs	r6, r7, #4
 8010748:	4682      	mov	sl, r0
 801074a:	4690      	mov	r8, r2
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	f847 5c04 	str.w	r5, [r7, #-4]
 8010752:	46b1      	mov	r9, r6
 8010754:	4634      	mov	r4, r6
 8010756:	9502      	str	r5, [sp, #8]
 8010758:	46ab      	mov	fp, r5
 801075a:	784a      	ldrb	r2, [r1, #1]
 801075c:	1c4b      	adds	r3, r1, #1
 801075e:	9303      	str	r3, [sp, #12]
 8010760:	b342      	cbz	r2, 80107b4 <__hexnan+0x88>
 8010762:	4610      	mov	r0, r2
 8010764:	9105      	str	r1, [sp, #20]
 8010766:	9204      	str	r2, [sp, #16]
 8010768:	f7ff fd84 	bl	8010274 <__hexdig_fun>
 801076c:	2800      	cmp	r0, #0
 801076e:	d143      	bne.n	80107f8 <__hexnan+0xcc>
 8010770:	9a04      	ldr	r2, [sp, #16]
 8010772:	9905      	ldr	r1, [sp, #20]
 8010774:	2a20      	cmp	r2, #32
 8010776:	d818      	bhi.n	80107aa <__hexnan+0x7e>
 8010778:	9b02      	ldr	r3, [sp, #8]
 801077a:	459b      	cmp	fp, r3
 801077c:	dd13      	ble.n	80107a6 <__hexnan+0x7a>
 801077e:	454c      	cmp	r4, r9
 8010780:	d206      	bcs.n	8010790 <__hexnan+0x64>
 8010782:	2d07      	cmp	r5, #7
 8010784:	dc04      	bgt.n	8010790 <__hexnan+0x64>
 8010786:	462a      	mov	r2, r5
 8010788:	4649      	mov	r1, r9
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff ffa8 	bl	80106e0 <L_shift>
 8010790:	4544      	cmp	r4, r8
 8010792:	d944      	bls.n	801081e <__hexnan+0xf2>
 8010794:	2300      	movs	r3, #0
 8010796:	f1a4 0904 	sub.w	r9, r4, #4
 801079a:	f844 3c04 	str.w	r3, [r4, #-4]
 801079e:	f8cd b008 	str.w	fp, [sp, #8]
 80107a2:	464c      	mov	r4, r9
 80107a4:	461d      	mov	r5, r3
 80107a6:	9903      	ldr	r1, [sp, #12]
 80107a8:	e7d7      	b.n	801075a <__hexnan+0x2e>
 80107aa:	2a29      	cmp	r2, #41	; 0x29
 80107ac:	d14a      	bne.n	8010844 <__hexnan+0x118>
 80107ae:	3102      	adds	r1, #2
 80107b0:	f8ca 1000 	str.w	r1, [sl]
 80107b4:	f1bb 0f00 	cmp.w	fp, #0
 80107b8:	d044      	beq.n	8010844 <__hexnan+0x118>
 80107ba:	454c      	cmp	r4, r9
 80107bc:	d206      	bcs.n	80107cc <__hexnan+0xa0>
 80107be:	2d07      	cmp	r5, #7
 80107c0:	dc04      	bgt.n	80107cc <__hexnan+0xa0>
 80107c2:	462a      	mov	r2, r5
 80107c4:	4649      	mov	r1, r9
 80107c6:	4620      	mov	r0, r4
 80107c8:	f7ff ff8a 	bl	80106e0 <L_shift>
 80107cc:	4544      	cmp	r4, r8
 80107ce:	d928      	bls.n	8010822 <__hexnan+0xf6>
 80107d0:	4643      	mov	r3, r8
 80107d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80107d6:	f843 2b04 	str.w	r2, [r3], #4
 80107da:	42a6      	cmp	r6, r4
 80107dc:	d2f9      	bcs.n	80107d2 <__hexnan+0xa6>
 80107de:	2200      	movs	r2, #0
 80107e0:	f843 2b04 	str.w	r2, [r3], #4
 80107e4:	429e      	cmp	r6, r3
 80107e6:	d2fb      	bcs.n	80107e0 <__hexnan+0xb4>
 80107e8:	6833      	ldr	r3, [r6, #0]
 80107ea:	b91b      	cbnz	r3, 80107f4 <__hexnan+0xc8>
 80107ec:	4546      	cmp	r6, r8
 80107ee:	d127      	bne.n	8010840 <__hexnan+0x114>
 80107f0:	2301      	movs	r3, #1
 80107f2:	6033      	str	r3, [r6, #0]
 80107f4:	2005      	movs	r0, #5
 80107f6:	e026      	b.n	8010846 <__hexnan+0x11a>
 80107f8:	3501      	adds	r5, #1
 80107fa:	2d08      	cmp	r5, #8
 80107fc:	f10b 0b01 	add.w	fp, fp, #1
 8010800:	dd06      	ble.n	8010810 <__hexnan+0xe4>
 8010802:	4544      	cmp	r4, r8
 8010804:	d9cf      	bls.n	80107a6 <__hexnan+0x7a>
 8010806:	2300      	movs	r3, #0
 8010808:	f844 3c04 	str.w	r3, [r4, #-4]
 801080c:	2501      	movs	r5, #1
 801080e:	3c04      	subs	r4, #4
 8010810:	6822      	ldr	r2, [r4, #0]
 8010812:	f000 000f 	and.w	r0, r0, #15
 8010816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801081a:	6020      	str	r0, [r4, #0]
 801081c:	e7c3      	b.n	80107a6 <__hexnan+0x7a>
 801081e:	2508      	movs	r5, #8
 8010820:	e7c1      	b.n	80107a6 <__hexnan+0x7a>
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d0df      	beq.n	80107e8 <__hexnan+0xbc>
 8010828:	f04f 32ff 	mov.w	r2, #4294967295
 801082c:	f1c3 0320 	rsb	r3, r3, #32
 8010830:	fa22 f303 	lsr.w	r3, r2, r3
 8010834:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010838:	401a      	ands	r2, r3
 801083a:	f847 2c04 	str.w	r2, [r7, #-4]
 801083e:	e7d3      	b.n	80107e8 <__hexnan+0xbc>
 8010840:	3e04      	subs	r6, #4
 8010842:	e7d1      	b.n	80107e8 <__hexnan+0xbc>
 8010844:	2004      	movs	r0, #4
 8010846:	b007      	add	sp, #28
 8010848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801084c <__locale_ctype_ptr_l>:
 801084c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010850:	4770      	bx	lr

08010852 <__localeconv_l>:
 8010852:	30f0      	adds	r0, #240	; 0xf0
 8010854:	4770      	bx	lr
	...

08010858 <_localeconv_r>:
 8010858:	4b04      	ldr	r3, [pc, #16]	; (801086c <_localeconv_r+0x14>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	6a18      	ldr	r0, [r3, #32]
 801085e:	4b04      	ldr	r3, [pc, #16]	; (8010870 <_localeconv_r+0x18>)
 8010860:	2800      	cmp	r0, #0
 8010862:	bf08      	it	eq
 8010864:	4618      	moveq	r0, r3
 8010866:	30f0      	adds	r0, #240	; 0xf0
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	2000017c 	.word	0x2000017c
 8010870:	200001e0 	.word	0x200001e0

08010874 <__ascii_mbtowc>:
 8010874:	b082      	sub	sp, #8
 8010876:	b901      	cbnz	r1, 801087a <__ascii_mbtowc+0x6>
 8010878:	a901      	add	r1, sp, #4
 801087a:	b142      	cbz	r2, 801088e <__ascii_mbtowc+0x1a>
 801087c:	b14b      	cbz	r3, 8010892 <__ascii_mbtowc+0x1e>
 801087e:	7813      	ldrb	r3, [r2, #0]
 8010880:	600b      	str	r3, [r1, #0]
 8010882:	7812      	ldrb	r2, [r2, #0]
 8010884:	1c10      	adds	r0, r2, #0
 8010886:	bf18      	it	ne
 8010888:	2001      	movne	r0, #1
 801088a:	b002      	add	sp, #8
 801088c:	4770      	bx	lr
 801088e:	4610      	mov	r0, r2
 8010890:	e7fb      	b.n	801088a <__ascii_mbtowc+0x16>
 8010892:	f06f 0001 	mvn.w	r0, #1
 8010896:	e7f8      	b.n	801088a <__ascii_mbtowc+0x16>

08010898 <__malloc_lock>:
 8010898:	4770      	bx	lr

0801089a <__malloc_unlock>:
 801089a:	4770      	bx	lr

0801089c <_Balloc>:
 801089c:	b570      	push	{r4, r5, r6, lr}
 801089e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108a0:	4604      	mov	r4, r0
 80108a2:	460e      	mov	r6, r1
 80108a4:	b93d      	cbnz	r5, 80108b6 <_Balloc+0x1a>
 80108a6:	2010      	movs	r0, #16
 80108a8:	f7fd f844 	bl	800d934 <malloc>
 80108ac:	6260      	str	r0, [r4, #36]	; 0x24
 80108ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108b2:	6005      	str	r5, [r0, #0]
 80108b4:	60c5      	str	r5, [r0, #12]
 80108b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80108b8:	68eb      	ldr	r3, [r5, #12]
 80108ba:	b183      	cbz	r3, 80108de <_Balloc+0x42>
 80108bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80108c4:	b9b8      	cbnz	r0, 80108f6 <_Balloc+0x5a>
 80108c6:	2101      	movs	r1, #1
 80108c8:	fa01 f506 	lsl.w	r5, r1, r6
 80108cc:	1d6a      	adds	r2, r5, #5
 80108ce:	0092      	lsls	r2, r2, #2
 80108d0:	4620      	mov	r0, r4
 80108d2:	f000 fbe2 	bl	801109a <_calloc_r>
 80108d6:	b160      	cbz	r0, 80108f2 <_Balloc+0x56>
 80108d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80108dc:	e00e      	b.n	80108fc <_Balloc+0x60>
 80108de:	2221      	movs	r2, #33	; 0x21
 80108e0:	2104      	movs	r1, #4
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 fbd9 	bl	801109a <_calloc_r>
 80108e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108ea:	60e8      	str	r0, [r5, #12]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1e4      	bne.n	80108bc <_Balloc+0x20>
 80108f2:	2000      	movs	r0, #0
 80108f4:	bd70      	pop	{r4, r5, r6, pc}
 80108f6:	6802      	ldr	r2, [r0, #0]
 80108f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80108fc:	2300      	movs	r3, #0
 80108fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010902:	e7f7      	b.n	80108f4 <_Balloc+0x58>

08010904 <_Bfree>:
 8010904:	b570      	push	{r4, r5, r6, lr}
 8010906:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010908:	4606      	mov	r6, r0
 801090a:	460d      	mov	r5, r1
 801090c:	b93c      	cbnz	r4, 801091e <_Bfree+0x1a>
 801090e:	2010      	movs	r0, #16
 8010910:	f7fd f810 	bl	800d934 <malloc>
 8010914:	6270      	str	r0, [r6, #36]	; 0x24
 8010916:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801091a:	6004      	str	r4, [r0, #0]
 801091c:	60c4      	str	r4, [r0, #12]
 801091e:	b13d      	cbz	r5, 8010930 <_Bfree+0x2c>
 8010920:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010922:	686a      	ldr	r2, [r5, #4]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801092a:	6029      	str	r1, [r5, #0]
 801092c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010930:	bd70      	pop	{r4, r5, r6, pc}

08010932 <__multadd>:
 8010932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010936:	690d      	ldr	r5, [r1, #16]
 8010938:	461f      	mov	r7, r3
 801093a:	4606      	mov	r6, r0
 801093c:	460c      	mov	r4, r1
 801093e:	f101 0c14 	add.w	ip, r1, #20
 8010942:	2300      	movs	r3, #0
 8010944:	f8dc 0000 	ldr.w	r0, [ip]
 8010948:	b281      	uxth	r1, r0
 801094a:	fb02 7101 	mla	r1, r2, r1, r7
 801094e:	0c0f      	lsrs	r7, r1, #16
 8010950:	0c00      	lsrs	r0, r0, #16
 8010952:	fb02 7000 	mla	r0, r2, r0, r7
 8010956:	b289      	uxth	r1, r1
 8010958:	3301      	adds	r3, #1
 801095a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801095e:	429d      	cmp	r5, r3
 8010960:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010964:	f84c 1b04 	str.w	r1, [ip], #4
 8010968:	dcec      	bgt.n	8010944 <__multadd+0x12>
 801096a:	b1d7      	cbz	r7, 80109a2 <__multadd+0x70>
 801096c:	68a3      	ldr	r3, [r4, #8]
 801096e:	42ab      	cmp	r3, r5
 8010970:	dc12      	bgt.n	8010998 <__multadd+0x66>
 8010972:	6861      	ldr	r1, [r4, #4]
 8010974:	4630      	mov	r0, r6
 8010976:	3101      	adds	r1, #1
 8010978:	f7ff ff90 	bl	801089c <_Balloc>
 801097c:	6922      	ldr	r2, [r4, #16]
 801097e:	3202      	adds	r2, #2
 8010980:	f104 010c 	add.w	r1, r4, #12
 8010984:	4680      	mov	r8, r0
 8010986:	0092      	lsls	r2, r2, #2
 8010988:	300c      	adds	r0, #12
 801098a:	f7fc ffe3 	bl	800d954 <memcpy>
 801098e:	4621      	mov	r1, r4
 8010990:	4630      	mov	r0, r6
 8010992:	f7ff ffb7 	bl	8010904 <_Bfree>
 8010996:	4644      	mov	r4, r8
 8010998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801099c:	3501      	adds	r5, #1
 801099e:	615f      	str	r7, [r3, #20]
 80109a0:	6125      	str	r5, [r4, #16]
 80109a2:	4620      	mov	r0, r4
 80109a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109a8 <__s2b>:
 80109a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109ac:	460c      	mov	r4, r1
 80109ae:	4615      	mov	r5, r2
 80109b0:	461f      	mov	r7, r3
 80109b2:	2209      	movs	r2, #9
 80109b4:	3308      	adds	r3, #8
 80109b6:	4606      	mov	r6, r0
 80109b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80109bc:	2100      	movs	r1, #0
 80109be:	2201      	movs	r2, #1
 80109c0:	429a      	cmp	r2, r3
 80109c2:	db20      	blt.n	8010a06 <__s2b+0x5e>
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff ff69 	bl	801089c <_Balloc>
 80109ca:	9b08      	ldr	r3, [sp, #32]
 80109cc:	6143      	str	r3, [r0, #20]
 80109ce:	2d09      	cmp	r5, #9
 80109d0:	f04f 0301 	mov.w	r3, #1
 80109d4:	6103      	str	r3, [r0, #16]
 80109d6:	dd19      	ble.n	8010a0c <__s2b+0x64>
 80109d8:	f104 0809 	add.w	r8, r4, #9
 80109dc:	46c1      	mov	r9, r8
 80109de:	442c      	add	r4, r5
 80109e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80109e4:	4601      	mov	r1, r0
 80109e6:	3b30      	subs	r3, #48	; 0x30
 80109e8:	220a      	movs	r2, #10
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ffa1 	bl	8010932 <__multadd>
 80109f0:	45a1      	cmp	r9, r4
 80109f2:	d1f5      	bne.n	80109e0 <__s2b+0x38>
 80109f4:	eb08 0405 	add.w	r4, r8, r5
 80109f8:	3c08      	subs	r4, #8
 80109fa:	1b2d      	subs	r5, r5, r4
 80109fc:	1963      	adds	r3, r4, r5
 80109fe:	42bb      	cmp	r3, r7
 8010a00:	db07      	blt.n	8010a12 <__s2b+0x6a>
 8010a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a06:	0052      	lsls	r2, r2, #1
 8010a08:	3101      	adds	r1, #1
 8010a0a:	e7d9      	b.n	80109c0 <__s2b+0x18>
 8010a0c:	340a      	adds	r4, #10
 8010a0e:	2509      	movs	r5, #9
 8010a10:	e7f3      	b.n	80109fa <__s2b+0x52>
 8010a12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a16:	4601      	mov	r1, r0
 8010a18:	3b30      	subs	r3, #48	; 0x30
 8010a1a:	220a      	movs	r2, #10
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7ff ff88 	bl	8010932 <__multadd>
 8010a22:	e7eb      	b.n	80109fc <__s2b+0x54>

08010a24 <__hi0bits>:
 8010a24:	0c02      	lsrs	r2, r0, #16
 8010a26:	0412      	lsls	r2, r2, #16
 8010a28:	4603      	mov	r3, r0
 8010a2a:	b9b2      	cbnz	r2, 8010a5a <__hi0bits+0x36>
 8010a2c:	0403      	lsls	r3, r0, #16
 8010a2e:	2010      	movs	r0, #16
 8010a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010a34:	bf04      	itt	eq
 8010a36:	021b      	lsleq	r3, r3, #8
 8010a38:	3008      	addeq	r0, #8
 8010a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010a3e:	bf04      	itt	eq
 8010a40:	011b      	lsleq	r3, r3, #4
 8010a42:	3004      	addeq	r0, #4
 8010a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010a48:	bf04      	itt	eq
 8010a4a:	009b      	lsleq	r3, r3, #2
 8010a4c:	3002      	addeq	r0, #2
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	db06      	blt.n	8010a60 <__hi0bits+0x3c>
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	d503      	bpl.n	8010a5e <__hi0bits+0x3a>
 8010a56:	3001      	adds	r0, #1
 8010a58:	4770      	bx	lr
 8010a5a:	2000      	movs	r0, #0
 8010a5c:	e7e8      	b.n	8010a30 <__hi0bits+0xc>
 8010a5e:	2020      	movs	r0, #32
 8010a60:	4770      	bx	lr

08010a62 <__lo0bits>:
 8010a62:	6803      	ldr	r3, [r0, #0]
 8010a64:	f013 0207 	ands.w	r2, r3, #7
 8010a68:	4601      	mov	r1, r0
 8010a6a:	d00b      	beq.n	8010a84 <__lo0bits+0x22>
 8010a6c:	07da      	lsls	r2, r3, #31
 8010a6e:	d423      	bmi.n	8010ab8 <__lo0bits+0x56>
 8010a70:	0798      	lsls	r0, r3, #30
 8010a72:	bf49      	itett	mi
 8010a74:	085b      	lsrmi	r3, r3, #1
 8010a76:	089b      	lsrpl	r3, r3, #2
 8010a78:	2001      	movmi	r0, #1
 8010a7a:	600b      	strmi	r3, [r1, #0]
 8010a7c:	bf5c      	itt	pl
 8010a7e:	600b      	strpl	r3, [r1, #0]
 8010a80:	2002      	movpl	r0, #2
 8010a82:	4770      	bx	lr
 8010a84:	b298      	uxth	r0, r3
 8010a86:	b9a8      	cbnz	r0, 8010ab4 <__lo0bits+0x52>
 8010a88:	0c1b      	lsrs	r3, r3, #16
 8010a8a:	2010      	movs	r0, #16
 8010a8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a90:	bf04      	itt	eq
 8010a92:	0a1b      	lsreq	r3, r3, #8
 8010a94:	3008      	addeq	r0, #8
 8010a96:	071a      	lsls	r2, r3, #28
 8010a98:	bf04      	itt	eq
 8010a9a:	091b      	lsreq	r3, r3, #4
 8010a9c:	3004      	addeq	r0, #4
 8010a9e:	079a      	lsls	r2, r3, #30
 8010aa0:	bf04      	itt	eq
 8010aa2:	089b      	lsreq	r3, r3, #2
 8010aa4:	3002      	addeq	r0, #2
 8010aa6:	07da      	lsls	r2, r3, #31
 8010aa8:	d402      	bmi.n	8010ab0 <__lo0bits+0x4e>
 8010aaa:	085b      	lsrs	r3, r3, #1
 8010aac:	d006      	beq.n	8010abc <__lo0bits+0x5a>
 8010aae:	3001      	adds	r0, #1
 8010ab0:	600b      	str	r3, [r1, #0]
 8010ab2:	4770      	bx	lr
 8010ab4:	4610      	mov	r0, r2
 8010ab6:	e7e9      	b.n	8010a8c <__lo0bits+0x2a>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	4770      	bx	lr
 8010abc:	2020      	movs	r0, #32
 8010abe:	4770      	bx	lr

08010ac0 <__i2b>:
 8010ac0:	b510      	push	{r4, lr}
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	f7ff fee9 	bl	801089c <_Balloc>
 8010aca:	2201      	movs	r2, #1
 8010acc:	6144      	str	r4, [r0, #20]
 8010ace:	6102      	str	r2, [r0, #16]
 8010ad0:	bd10      	pop	{r4, pc}

08010ad2 <__multiply>:
 8010ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad6:	4614      	mov	r4, r2
 8010ad8:	690a      	ldr	r2, [r1, #16]
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	bfb8      	it	lt
 8010ae0:	460b      	movlt	r3, r1
 8010ae2:	4688      	mov	r8, r1
 8010ae4:	bfbc      	itt	lt
 8010ae6:	46a0      	movlt	r8, r4
 8010ae8:	461c      	movlt	r4, r3
 8010aea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010aee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010af6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010afa:	eb07 0609 	add.w	r6, r7, r9
 8010afe:	42b3      	cmp	r3, r6
 8010b00:	bfb8      	it	lt
 8010b02:	3101      	addlt	r1, #1
 8010b04:	f7ff feca 	bl	801089c <_Balloc>
 8010b08:	f100 0514 	add.w	r5, r0, #20
 8010b0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010b10:	462b      	mov	r3, r5
 8010b12:	2200      	movs	r2, #0
 8010b14:	4573      	cmp	r3, lr
 8010b16:	d316      	bcc.n	8010b46 <__multiply+0x74>
 8010b18:	f104 0214 	add.w	r2, r4, #20
 8010b1c:	f108 0114 	add.w	r1, r8, #20
 8010b20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010b24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	9b00      	ldr	r3, [sp, #0]
 8010b2c:	9201      	str	r2, [sp, #4]
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d80c      	bhi.n	8010b4c <__multiply+0x7a>
 8010b32:	2e00      	cmp	r6, #0
 8010b34:	dd03      	ble.n	8010b3e <__multiply+0x6c>
 8010b36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d05d      	beq.n	8010bfa <__multiply+0x128>
 8010b3e:	6106      	str	r6, [r0, #16]
 8010b40:	b003      	add	sp, #12
 8010b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b46:	f843 2b04 	str.w	r2, [r3], #4
 8010b4a:	e7e3      	b.n	8010b14 <__multiply+0x42>
 8010b4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010b50:	f1bb 0f00 	cmp.w	fp, #0
 8010b54:	d023      	beq.n	8010b9e <__multiply+0xcc>
 8010b56:	4689      	mov	r9, r1
 8010b58:	46ac      	mov	ip, r5
 8010b5a:	f04f 0800 	mov.w	r8, #0
 8010b5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b62:	f8dc a000 	ldr.w	sl, [ip]
 8010b66:	b2a3      	uxth	r3, r4
 8010b68:	fa1f fa8a 	uxth.w	sl, sl
 8010b6c:	fb0b a303 	mla	r3, fp, r3, sl
 8010b70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b74:	f8dc 4000 	ldr.w	r4, [ip]
 8010b78:	4443      	add	r3, r8
 8010b7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8010b82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010b86:	46e2      	mov	sl, ip
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b8e:	454f      	cmp	r7, r9
 8010b90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b94:	f84a 3b04 	str.w	r3, [sl], #4
 8010b98:	d82b      	bhi.n	8010bf2 <__multiply+0x120>
 8010b9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8010b9e:	9b01      	ldr	r3, [sp, #4]
 8010ba0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010ba4:	3204      	adds	r2, #4
 8010ba6:	f1ba 0f00 	cmp.w	sl, #0
 8010baa:	d020      	beq.n	8010bee <__multiply+0x11c>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	4689      	mov	r9, r1
 8010bb0:	46a8      	mov	r8, r5
 8010bb2:	f04f 0b00 	mov.w	fp, #0
 8010bb6:	f8b9 c000 	ldrh.w	ip, [r9]
 8010bba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010bbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8010bc2:	445c      	add	r4, fp
 8010bc4:	46c4      	mov	ip, r8
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010bcc:	f84c 3b04 	str.w	r3, [ip], #4
 8010bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010bd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010bd8:	0c1b      	lsrs	r3, r3, #16
 8010bda:	fb0a b303 	mla	r3, sl, r3, fp
 8010bde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010be2:	454f      	cmp	r7, r9
 8010be4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010be8:	d805      	bhi.n	8010bf6 <__multiply+0x124>
 8010bea:	f8c8 3004 	str.w	r3, [r8, #4]
 8010bee:	3504      	adds	r5, #4
 8010bf0:	e79b      	b.n	8010b2a <__multiply+0x58>
 8010bf2:	46d4      	mov	ip, sl
 8010bf4:	e7b3      	b.n	8010b5e <__multiply+0x8c>
 8010bf6:	46e0      	mov	r8, ip
 8010bf8:	e7dd      	b.n	8010bb6 <__multiply+0xe4>
 8010bfa:	3e01      	subs	r6, #1
 8010bfc:	e799      	b.n	8010b32 <__multiply+0x60>
	...

08010c00 <__pow5mult>:
 8010c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c04:	4615      	mov	r5, r2
 8010c06:	f012 0203 	ands.w	r2, r2, #3
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	460f      	mov	r7, r1
 8010c0e:	d007      	beq.n	8010c20 <__pow5mult+0x20>
 8010c10:	3a01      	subs	r2, #1
 8010c12:	4c21      	ldr	r4, [pc, #132]	; (8010c98 <__pow5mult+0x98>)
 8010c14:	2300      	movs	r3, #0
 8010c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c1a:	f7ff fe8a 	bl	8010932 <__multadd>
 8010c1e:	4607      	mov	r7, r0
 8010c20:	10ad      	asrs	r5, r5, #2
 8010c22:	d035      	beq.n	8010c90 <__pow5mult+0x90>
 8010c24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c26:	b93c      	cbnz	r4, 8010c38 <__pow5mult+0x38>
 8010c28:	2010      	movs	r0, #16
 8010c2a:	f7fc fe83 	bl	800d934 <malloc>
 8010c2e:	6270      	str	r0, [r6, #36]	; 0x24
 8010c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c34:	6004      	str	r4, [r0, #0]
 8010c36:	60c4      	str	r4, [r0, #12]
 8010c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c40:	b94c      	cbnz	r4, 8010c56 <__pow5mult+0x56>
 8010c42:	f240 2171 	movw	r1, #625	; 0x271
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7ff ff3a 	bl	8010ac0 <__i2b>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c52:	4604      	mov	r4, r0
 8010c54:	6003      	str	r3, [r0, #0]
 8010c56:	f04f 0800 	mov.w	r8, #0
 8010c5a:	07eb      	lsls	r3, r5, #31
 8010c5c:	d50a      	bpl.n	8010c74 <__pow5mult+0x74>
 8010c5e:	4639      	mov	r1, r7
 8010c60:	4622      	mov	r2, r4
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7ff ff35 	bl	8010ad2 <__multiply>
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f7ff fe49 	bl	8010904 <_Bfree>
 8010c72:	464f      	mov	r7, r9
 8010c74:	106d      	asrs	r5, r5, #1
 8010c76:	d00b      	beq.n	8010c90 <__pow5mult+0x90>
 8010c78:	6820      	ldr	r0, [r4, #0]
 8010c7a:	b938      	cbnz	r0, 8010c8c <__pow5mult+0x8c>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff ff26 	bl	8010ad2 <__multiply>
 8010c86:	6020      	str	r0, [r4, #0]
 8010c88:	f8c0 8000 	str.w	r8, [r0]
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	e7e4      	b.n	8010c5a <__pow5mult+0x5a>
 8010c90:	4638      	mov	r0, r7
 8010c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c96:	bf00      	nop
 8010c98:	08011a78 	.word	0x08011a78

08010c9c <__lshift>:
 8010c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ca6:	6923      	ldr	r3, [r4, #16]
 8010ca8:	6849      	ldr	r1, [r1, #4]
 8010caa:	eb0a 0903 	add.w	r9, sl, r3
 8010cae:	68a3      	ldr	r3, [r4, #8]
 8010cb0:	4607      	mov	r7, r0
 8010cb2:	4616      	mov	r6, r2
 8010cb4:	f109 0501 	add.w	r5, r9, #1
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	db32      	blt.n	8010d22 <__lshift+0x86>
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f7ff fded 	bl	801089c <_Balloc>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	4680      	mov	r8, r0
 8010cc6:	f100 0114 	add.w	r1, r0, #20
 8010cca:	461a      	mov	r2, r3
 8010ccc:	4553      	cmp	r3, sl
 8010cce:	db2b      	blt.n	8010d28 <__lshift+0x8c>
 8010cd0:	6920      	ldr	r0, [r4, #16]
 8010cd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cd6:	f104 0314 	add.w	r3, r4, #20
 8010cda:	f016 021f 	ands.w	r2, r6, #31
 8010cde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ce2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ce6:	d025      	beq.n	8010d34 <__lshift+0x98>
 8010ce8:	f1c2 0e20 	rsb	lr, r2, #32
 8010cec:	2000      	movs	r0, #0
 8010cee:	681e      	ldr	r6, [r3, #0]
 8010cf0:	468a      	mov	sl, r1
 8010cf2:	4096      	lsls	r6, r2
 8010cf4:	4330      	orrs	r0, r6
 8010cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8010cfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8010cfe:	459c      	cmp	ip, r3
 8010d00:	fa20 f00e 	lsr.w	r0, r0, lr
 8010d04:	d814      	bhi.n	8010d30 <__lshift+0x94>
 8010d06:	6048      	str	r0, [r1, #4]
 8010d08:	b108      	cbz	r0, 8010d0e <__lshift+0x72>
 8010d0a:	f109 0502 	add.w	r5, r9, #2
 8010d0e:	3d01      	subs	r5, #1
 8010d10:	4638      	mov	r0, r7
 8010d12:	f8c8 5010 	str.w	r5, [r8, #16]
 8010d16:	4621      	mov	r1, r4
 8010d18:	f7ff fdf4 	bl	8010904 <_Bfree>
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d22:	3101      	adds	r1, #1
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	e7c7      	b.n	8010cb8 <__lshift+0x1c>
 8010d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	e7cd      	b.n	8010ccc <__lshift+0x30>
 8010d30:	4651      	mov	r1, sl
 8010d32:	e7dc      	b.n	8010cee <__lshift+0x52>
 8010d34:	3904      	subs	r1, #4
 8010d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d3e:	459c      	cmp	ip, r3
 8010d40:	d8f9      	bhi.n	8010d36 <__lshift+0x9a>
 8010d42:	e7e4      	b.n	8010d0e <__lshift+0x72>

08010d44 <__mcmp>:
 8010d44:	6903      	ldr	r3, [r0, #16]
 8010d46:	690a      	ldr	r2, [r1, #16]
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	b530      	push	{r4, r5, lr}
 8010d4c:	d10c      	bne.n	8010d68 <__mcmp+0x24>
 8010d4e:	0092      	lsls	r2, r2, #2
 8010d50:	3014      	adds	r0, #20
 8010d52:	3114      	adds	r1, #20
 8010d54:	1884      	adds	r4, r0, r2
 8010d56:	4411      	add	r1, r2
 8010d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d60:	4295      	cmp	r5, r2
 8010d62:	d003      	beq.n	8010d6c <__mcmp+0x28>
 8010d64:	d305      	bcc.n	8010d72 <__mcmp+0x2e>
 8010d66:	2301      	movs	r3, #1
 8010d68:	4618      	mov	r0, r3
 8010d6a:	bd30      	pop	{r4, r5, pc}
 8010d6c:	42a0      	cmp	r0, r4
 8010d6e:	d3f3      	bcc.n	8010d58 <__mcmp+0x14>
 8010d70:	e7fa      	b.n	8010d68 <__mcmp+0x24>
 8010d72:	f04f 33ff 	mov.w	r3, #4294967295
 8010d76:	e7f7      	b.n	8010d68 <__mcmp+0x24>

08010d78 <__mdiff>:
 8010d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d7c:	460d      	mov	r5, r1
 8010d7e:	4607      	mov	r7, r0
 8010d80:	4611      	mov	r1, r2
 8010d82:	4628      	mov	r0, r5
 8010d84:	4614      	mov	r4, r2
 8010d86:	f7ff ffdd 	bl	8010d44 <__mcmp>
 8010d8a:	1e06      	subs	r6, r0, #0
 8010d8c:	d108      	bne.n	8010da0 <__mdiff+0x28>
 8010d8e:	4631      	mov	r1, r6
 8010d90:	4638      	mov	r0, r7
 8010d92:	f7ff fd83 	bl	801089c <_Balloc>
 8010d96:	2301      	movs	r3, #1
 8010d98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da0:	bfa4      	itt	ge
 8010da2:	4623      	movge	r3, r4
 8010da4:	462c      	movge	r4, r5
 8010da6:	4638      	mov	r0, r7
 8010da8:	6861      	ldr	r1, [r4, #4]
 8010daa:	bfa6      	itte	ge
 8010dac:	461d      	movge	r5, r3
 8010dae:	2600      	movge	r6, #0
 8010db0:	2601      	movlt	r6, #1
 8010db2:	f7ff fd73 	bl	801089c <_Balloc>
 8010db6:	692b      	ldr	r3, [r5, #16]
 8010db8:	60c6      	str	r6, [r0, #12]
 8010dba:	6926      	ldr	r6, [r4, #16]
 8010dbc:	f105 0914 	add.w	r9, r5, #20
 8010dc0:	f104 0214 	add.w	r2, r4, #20
 8010dc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010dc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010dcc:	f100 0514 	add.w	r5, r0, #20
 8010dd0:	f04f 0e00 	mov.w	lr, #0
 8010dd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8010dd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8010ddc:	fa1e f18a 	uxtah	r1, lr, sl
 8010de0:	b2a3      	uxth	r3, r4
 8010de2:	1ac9      	subs	r1, r1, r3
 8010de4:	0c23      	lsrs	r3, r4, #16
 8010de6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010dea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010dee:	b289      	uxth	r1, r1
 8010df0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010df4:	45c8      	cmp	r8, r9
 8010df6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010dfa:	4694      	mov	ip, r2
 8010dfc:	f845 3b04 	str.w	r3, [r5], #4
 8010e00:	d8e8      	bhi.n	8010dd4 <__mdiff+0x5c>
 8010e02:	45bc      	cmp	ip, r7
 8010e04:	d304      	bcc.n	8010e10 <__mdiff+0x98>
 8010e06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010e0a:	b183      	cbz	r3, 8010e2e <__mdiff+0xb6>
 8010e0c:	6106      	str	r6, [r0, #16]
 8010e0e:	e7c5      	b.n	8010d9c <__mdiff+0x24>
 8010e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010e14:	fa1e f381 	uxtah	r3, lr, r1
 8010e18:	141a      	asrs	r2, r3, #16
 8010e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010e28:	f845 3b04 	str.w	r3, [r5], #4
 8010e2c:	e7e9      	b.n	8010e02 <__mdiff+0x8a>
 8010e2e:	3e01      	subs	r6, #1
 8010e30:	e7e9      	b.n	8010e06 <__mdiff+0x8e>
	...

08010e34 <__ulp>:
 8010e34:	4b12      	ldr	r3, [pc, #72]	; (8010e80 <__ulp+0x4c>)
 8010e36:	ee10 2a90 	vmov	r2, s1
 8010e3a:	401a      	ands	r2, r3
 8010e3c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	dd04      	ble.n	8010e4e <__ulp+0x1a>
 8010e44:	2000      	movs	r0, #0
 8010e46:	4619      	mov	r1, r3
 8010e48:	ec41 0b10 	vmov	d0, r0, r1
 8010e4c:	4770      	bx	lr
 8010e4e:	425b      	negs	r3, r3
 8010e50:	151b      	asrs	r3, r3, #20
 8010e52:	2b13      	cmp	r3, #19
 8010e54:	f04f 0000 	mov.w	r0, #0
 8010e58:	f04f 0100 	mov.w	r1, #0
 8010e5c:	dc04      	bgt.n	8010e68 <__ulp+0x34>
 8010e5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010e62:	fa42 f103 	asr.w	r1, r2, r3
 8010e66:	e7ef      	b.n	8010e48 <__ulp+0x14>
 8010e68:	3b14      	subs	r3, #20
 8010e6a:	2b1e      	cmp	r3, #30
 8010e6c:	f04f 0201 	mov.w	r2, #1
 8010e70:	bfda      	itte	le
 8010e72:	f1c3 031f 	rsble	r3, r3, #31
 8010e76:	fa02 f303 	lslle.w	r3, r2, r3
 8010e7a:	4613      	movgt	r3, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	e7e3      	b.n	8010e48 <__ulp+0x14>
 8010e80:	7ff00000 	.word	0x7ff00000

08010e84 <__b2d>:
 8010e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e86:	6905      	ldr	r5, [r0, #16]
 8010e88:	f100 0714 	add.w	r7, r0, #20
 8010e8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010e90:	1f2e      	subs	r6, r5, #4
 8010e92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010e96:	4620      	mov	r0, r4
 8010e98:	f7ff fdc4 	bl	8010a24 <__hi0bits>
 8010e9c:	f1c0 0320 	rsb	r3, r0, #32
 8010ea0:	280a      	cmp	r0, #10
 8010ea2:	600b      	str	r3, [r1, #0]
 8010ea4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010f1c <__b2d+0x98>
 8010ea8:	dc14      	bgt.n	8010ed4 <__b2d+0x50>
 8010eaa:	f1c0 0e0b 	rsb	lr, r0, #11
 8010eae:	fa24 f10e 	lsr.w	r1, r4, lr
 8010eb2:	42b7      	cmp	r7, r6
 8010eb4:	ea41 030c 	orr.w	r3, r1, ip
 8010eb8:	bf34      	ite	cc
 8010eba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ebe:	2100      	movcs	r1, #0
 8010ec0:	3015      	adds	r0, #21
 8010ec2:	fa04 f000 	lsl.w	r0, r4, r0
 8010ec6:	fa21 f10e 	lsr.w	r1, r1, lr
 8010eca:	ea40 0201 	orr.w	r2, r0, r1
 8010ece:	ec43 2b10 	vmov	d0, r2, r3
 8010ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ed4:	42b7      	cmp	r7, r6
 8010ed6:	bf3a      	itte	cc
 8010ed8:	f1a5 0608 	subcc.w	r6, r5, #8
 8010edc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ee0:	2100      	movcs	r1, #0
 8010ee2:	380b      	subs	r0, #11
 8010ee4:	d015      	beq.n	8010f12 <__b2d+0x8e>
 8010ee6:	4084      	lsls	r4, r0
 8010ee8:	f1c0 0520 	rsb	r5, r0, #32
 8010eec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010ef0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010ef4:	42be      	cmp	r6, r7
 8010ef6:	fa21 fc05 	lsr.w	ip, r1, r5
 8010efa:	ea44 030c 	orr.w	r3, r4, ip
 8010efe:	bf8c      	ite	hi
 8010f00:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010f04:	2400      	movls	r4, #0
 8010f06:	fa01 f000 	lsl.w	r0, r1, r0
 8010f0a:	40ec      	lsrs	r4, r5
 8010f0c:	ea40 0204 	orr.w	r2, r0, r4
 8010f10:	e7dd      	b.n	8010ece <__b2d+0x4a>
 8010f12:	ea44 030c 	orr.w	r3, r4, ip
 8010f16:	460a      	mov	r2, r1
 8010f18:	e7d9      	b.n	8010ece <__b2d+0x4a>
 8010f1a:	bf00      	nop
 8010f1c:	3ff00000 	.word	0x3ff00000

08010f20 <__d2b>:
 8010f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	460e      	mov	r6, r1
 8010f26:	2101      	movs	r1, #1
 8010f28:	ec59 8b10 	vmov	r8, r9, d0
 8010f2c:	4615      	mov	r5, r2
 8010f2e:	f7ff fcb5 	bl	801089c <_Balloc>
 8010f32:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010f36:	4607      	mov	r7, r0
 8010f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f3c:	bb34      	cbnz	r4, 8010f8c <__d2b+0x6c>
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	f1b8 0300 	subs.w	r3, r8, #0
 8010f44:	d027      	beq.n	8010f96 <__d2b+0x76>
 8010f46:	a802      	add	r0, sp, #8
 8010f48:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010f4c:	f7ff fd89 	bl	8010a62 <__lo0bits>
 8010f50:	9900      	ldr	r1, [sp, #0]
 8010f52:	b1f0      	cbz	r0, 8010f92 <__d2b+0x72>
 8010f54:	9a01      	ldr	r2, [sp, #4]
 8010f56:	f1c0 0320 	rsb	r3, r0, #32
 8010f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5e:	430b      	orrs	r3, r1
 8010f60:	40c2      	lsrs	r2, r0
 8010f62:	617b      	str	r3, [r7, #20]
 8010f64:	9201      	str	r2, [sp, #4]
 8010f66:	9b01      	ldr	r3, [sp, #4]
 8010f68:	61bb      	str	r3, [r7, #24]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	bf14      	ite	ne
 8010f6e:	2102      	movne	r1, #2
 8010f70:	2101      	moveq	r1, #1
 8010f72:	6139      	str	r1, [r7, #16]
 8010f74:	b1c4      	cbz	r4, 8010fa8 <__d2b+0x88>
 8010f76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010f7a:	4404      	add	r4, r0
 8010f7c:	6034      	str	r4, [r6, #0]
 8010f7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f82:	6028      	str	r0, [r5, #0]
 8010f84:	4638      	mov	r0, r7
 8010f86:	b003      	add	sp, #12
 8010f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f90:	e7d5      	b.n	8010f3e <__d2b+0x1e>
 8010f92:	6179      	str	r1, [r7, #20]
 8010f94:	e7e7      	b.n	8010f66 <__d2b+0x46>
 8010f96:	a801      	add	r0, sp, #4
 8010f98:	f7ff fd63 	bl	8010a62 <__lo0bits>
 8010f9c:	9b01      	ldr	r3, [sp, #4]
 8010f9e:	617b      	str	r3, [r7, #20]
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	6139      	str	r1, [r7, #16]
 8010fa4:	3020      	adds	r0, #32
 8010fa6:	e7e5      	b.n	8010f74 <__d2b+0x54>
 8010fa8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010fac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010fb0:	6030      	str	r0, [r6, #0]
 8010fb2:	6918      	ldr	r0, [r3, #16]
 8010fb4:	f7ff fd36 	bl	8010a24 <__hi0bits>
 8010fb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010fbc:	e7e1      	b.n	8010f82 <__d2b+0x62>

08010fbe <__ratio>:
 8010fbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc2:	4688      	mov	r8, r1
 8010fc4:	4669      	mov	r1, sp
 8010fc6:	4681      	mov	r9, r0
 8010fc8:	f7ff ff5c 	bl	8010e84 <__b2d>
 8010fcc:	a901      	add	r1, sp, #4
 8010fce:	4640      	mov	r0, r8
 8010fd0:	ec57 6b10 	vmov	r6, r7, d0
 8010fd4:	f7ff ff56 	bl	8010e84 <__b2d>
 8010fd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010fdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010fe0:	eba3 0c02 	sub.w	ip, r3, r2
 8010fe4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010fe8:	1a9b      	subs	r3, r3, r2
 8010fea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010fee:	ec5b ab10 	vmov	sl, fp, d0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bfce      	itee	gt
 8010ff6:	463a      	movgt	r2, r7
 8010ff8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ffc:	465a      	movle	r2, fp
 8010ffe:	4659      	mov	r1, fp
 8011000:	463d      	mov	r5, r7
 8011002:	bfd4      	ite	le
 8011004:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011008:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801100c:	4630      	mov	r0, r6
 801100e:	ee10 2a10 	vmov	r2, s0
 8011012:	460b      	mov	r3, r1
 8011014:	4629      	mov	r1, r5
 8011016:	f7ef fc19 	bl	800084c <__aeabi_ddiv>
 801101a:	ec41 0b10 	vmov	d0, r0, r1
 801101e:	b003      	add	sp, #12
 8011020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011024 <__copybits>:
 8011024:	3901      	subs	r1, #1
 8011026:	b510      	push	{r4, lr}
 8011028:	1149      	asrs	r1, r1, #5
 801102a:	6914      	ldr	r4, [r2, #16]
 801102c:	3101      	adds	r1, #1
 801102e:	f102 0314 	add.w	r3, r2, #20
 8011032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801103a:	42a3      	cmp	r3, r4
 801103c:	4602      	mov	r2, r0
 801103e:	d303      	bcc.n	8011048 <__copybits+0x24>
 8011040:	2300      	movs	r3, #0
 8011042:	428a      	cmp	r2, r1
 8011044:	d305      	bcc.n	8011052 <__copybits+0x2e>
 8011046:	bd10      	pop	{r4, pc}
 8011048:	f853 2b04 	ldr.w	r2, [r3], #4
 801104c:	f840 2b04 	str.w	r2, [r0], #4
 8011050:	e7f3      	b.n	801103a <__copybits+0x16>
 8011052:	f842 3b04 	str.w	r3, [r2], #4
 8011056:	e7f4      	b.n	8011042 <__copybits+0x1e>

08011058 <__any_on>:
 8011058:	f100 0214 	add.w	r2, r0, #20
 801105c:	6900      	ldr	r0, [r0, #16]
 801105e:	114b      	asrs	r3, r1, #5
 8011060:	4298      	cmp	r0, r3
 8011062:	b510      	push	{r4, lr}
 8011064:	db11      	blt.n	801108a <__any_on+0x32>
 8011066:	dd0a      	ble.n	801107e <__any_on+0x26>
 8011068:	f011 011f 	ands.w	r1, r1, #31
 801106c:	d007      	beq.n	801107e <__any_on+0x26>
 801106e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011072:	fa24 f001 	lsr.w	r0, r4, r1
 8011076:	fa00 f101 	lsl.w	r1, r0, r1
 801107a:	428c      	cmp	r4, r1
 801107c:	d10b      	bne.n	8011096 <__any_on+0x3e>
 801107e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011082:	4293      	cmp	r3, r2
 8011084:	d803      	bhi.n	801108e <__any_on+0x36>
 8011086:	2000      	movs	r0, #0
 8011088:	bd10      	pop	{r4, pc}
 801108a:	4603      	mov	r3, r0
 801108c:	e7f7      	b.n	801107e <__any_on+0x26>
 801108e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011092:	2900      	cmp	r1, #0
 8011094:	d0f5      	beq.n	8011082 <__any_on+0x2a>
 8011096:	2001      	movs	r0, #1
 8011098:	e7f6      	b.n	8011088 <__any_on+0x30>

0801109a <_calloc_r>:
 801109a:	b538      	push	{r3, r4, r5, lr}
 801109c:	fb02 f401 	mul.w	r4, r2, r1
 80110a0:	4621      	mov	r1, r4
 80110a2:	f7fc fcb9 	bl	800da18 <_malloc_r>
 80110a6:	4605      	mov	r5, r0
 80110a8:	b118      	cbz	r0, 80110b2 <_calloc_r+0x18>
 80110aa:	4622      	mov	r2, r4
 80110ac:	2100      	movs	r1, #0
 80110ae:	f7fc fc5c 	bl	800d96a <memset>
 80110b2:	4628      	mov	r0, r5
 80110b4:	bd38      	pop	{r3, r4, r5, pc}

080110b6 <__ssputs_r>:
 80110b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ba:	688e      	ldr	r6, [r1, #8]
 80110bc:	429e      	cmp	r6, r3
 80110be:	4682      	mov	sl, r0
 80110c0:	460c      	mov	r4, r1
 80110c2:	4690      	mov	r8, r2
 80110c4:	4699      	mov	r9, r3
 80110c6:	d837      	bhi.n	8011138 <__ssputs_r+0x82>
 80110c8:	898a      	ldrh	r2, [r1, #12]
 80110ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110ce:	d031      	beq.n	8011134 <__ssputs_r+0x7e>
 80110d0:	6825      	ldr	r5, [r4, #0]
 80110d2:	6909      	ldr	r1, [r1, #16]
 80110d4:	1a6f      	subs	r7, r5, r1
 80110d6:	6965      	ldr	r5, [r4, #20]
 80110d8:	2302      	movs	r3, #2
 80110da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110de:	fb95 f5f3 	sdiv	r5, r5, r3
 80110e2:	f109 0301 	add.w	r3, r9, #1
 80110e6:	443b      	add	r3, r7
 80110e8:	429d      	cmp	r5, r3
 80110ea:	bf38      	it	cc
 80110ec:	461d      	movcc	r5, r3
 80110ee:	0553      	lsls	r3, r2, #21
 80110f0:	d530      	bpl.n	8011154 <__ssputs_r+0x9e>
 80110f2:	4629      	mov	r1, r5
 80110f4:	f7fc fc90 	bl	800da18 <_malloc_r>
 80110f8:	4606      	mov	r6, r0
 80110fa:	b950      	cbnz	r0, 8011112 <__ssputs_r+0x5c>
 80110fc:	230c      	movs	r3, #12
 80110fe:	f8ca 3000 	str.w	r3, [sl]
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	f04f 30ff 	mov.w	r0, #4294967295
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	463a      	mov	r2, r7
 8011114:	6921      	ldr	r1, [r4, #16]
 8011116:	f7fc fc1d 	bl	800d954 <memcpy>
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	6126      	str	r6, [r4, #16]
 8011128:	6165      	str	r5, [r4, #20]
 801112a:	443e      	add	r6, r7
 801112c:	1bed      	subs	r5, r5, r7
 801112e:	6026      	str	r6, [r4, #0]
 8011130:	60a5      	str	r5, [r4, #8]
 8011132:	464e      	mov	r6, r9
 8011134:	454e      	cmp	r6, r9
 8011136:	d900      	bls.n	801113a <__ssputs_r+0x84>
 8011138:	464e      	mov	r6, r9
 801113a:	4632      	mov	r2, r6
 801113c:	4641      	mov	r1, r8
 801113e:	6820      	ldr	r0, [r4, #0]
 8011140:	f000 f919 	bl	8011376 <memmove>
 8011144:	68a3      	ldr	r3, [r4, #8]
 8011146:	1b9b      	subs	r3, r3, r6
 8011148:	60a3      	str	r3, [r4, #8]
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	441e      	add	r6, r3
 801114e:	6026      	str	r6, [r4, #0]
 8011150:	2000      	movs	r0, #0
 8011152:	e7dc      	b.n	801110e <__ssputs_r+0x58>
 8011154:	462a      	mov	r2, r5
 8011156:	f000 f927 	bl	80113a8 <_realloc_r>
 801115a:	4606      	mov	r6, r0
 801115c:	2800      	cmp	r0, #0
 801115e:	d1e2      	bne.n	8011126 <__ssputs_r+0x70>
 8011160:	6921      	ldr	r1, [r4, #16]
 8011162:	4650      	mov	r0, sl
 8011164:	f7fc fc0a 	bl	800d97c <_free_r>
 8011168:	e7c8      	b.n	80110fc <__ssputs_r+0x46>
	...

0801116c <_svfiprintf_r>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	461d      	mov	r5, r3
 8011172:	898b      	ldrh	r3, [r1, #12]
 8011174:	061f      	lsls	r7, r3, #24
 8011176:	b09d      	sub	sp, #116	; 0x74
 8011178:	4680      	mov	r8, r0
 801117a:	460c      	mov	r4, r1
 801117c:	4616      	mov	r6, r2
 801117e:	d50f      	bpl.n	80111a0 <_svfiprintf_r+0x34>
 8011180:	690b      	ldr	r3, [r1, #16]
 8011182:	b96b      	cbnz	r3, 80111a0 <_svfiprintf_r+0x34>
 8011184:	2140      	movs	r1, #64	; 0x40
 8011186:	f7fc fc47 	bl	800da18 <_malloc_r>
 801118a:	6020      	str	r0, [r4, #0]
 801118c:	6120      	str	r0, [r4, #16]
 801118e:	b928      	cbnz	r0, 801119c <_svfiprintf_r+0x30>
 8011190:	230c      	movs	r3, #12
 8011192:	f8c8 3000 	str.w	r3, [r8]
 8011196:	f04f 30ff 	mov.w	r0, #4294967295
 801119a:	e0c8      	b.n	801132e <_svfiprintf_r+0x1c2>
 801119c:	2340      	movs	r3, #64	; 0x40
 801119e:	6163      	str	r3, [r4, #20]
 80111a0:	2300      	movs	r3, #0
 80111a2:	9309      	str	r3, [sp, #36]	; 0x24
 80111a4:	2320      	movs	r3, #32
 80111a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111aa:	2330      	movs	r3, #48	; 0x30
 80111ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111b0:	9503      	str	r5, [sp, #12]
 80111b2:	f04f 0b01 	mov.w	fp, #1
 80111b6:	4637      	mov	r7, r6
 80111b8:	463d      	mov	r5, r7
 80111ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80111be:	b10b      	cbz	r3, 80111c4 <_svfiprintf_r+0x58>
 80111c0:	2b25      	cmp	r3, #37	; 0x25
 80111c2:	d13e      	bne.n	8011242 <_svfiprintf_r+0xd6>
 80111c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80111c8:	d00b      	beq.n	80111e2 <_svfiprintf_r+0x76>
 80111ca:	4653      	mov	r3, sl
 80111cc:	4632      	mov	r2, r6
 80111ce:	4621      	mov	r1, r4
 80111d0:	4640      	mov	r0, r8
 80111d2:	f7ff ff70 	bl	80110b6 <__ssputs_r>
 80111d6:	3001      	adds	r0, #1
 80111d8:	f000 80a4 	beq.w	8011324 <_svfiprintf_r+0x1b8>
 80111dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111de:	4453      	add	r3, sl
 80111e0:	9309      	str	r3, [sp, #36]	; 0x24
 80111e2:	783b      	ldrb	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 809d 	beq.w	8011324 <_svfiprintf_r+0x1b8>
 80111ea:	2300      	movs	r3, #0
 80111ec:	f04f 32ff 	mov.w	r2, #4294967295
 80111f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	9307      	str	r3, [sp, #28]
 80111f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111fc:	931a      	str	r3, [sp, #104]	; 0x68
 80111fe:	462f      	mov	r7, r5
 8011200:	2205      	movs	r2, #5
 8011202:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011206:	4850      	ldr	r0, [pc, #320]	; (8011348 <_svfiprintf_r+0x1dc>)
 8011208:	f7ee ffea 	bl	80001e0 <memchr>
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	b9d0      	cbnz	r0, 8011246 <_svfiprintf_r+0xda>
 8011210:	06d9      	lsls	r1, r3, #27
 8011212:	bf44      	itt	mi
 8011214:	2220      	movmi	r2, #32
 8011216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801121a:	071a      	lsls	r2, r3, #28
 801121c:	bf44      	itt	mi
 801121e:	222b      	movmi	r2, #43	; 0x2b
 8011220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011224:	782a      	ldrb	r2, [r5, #0]
 8011226:	2a2a      	cmp	r2, #42	; 0x2a
 8011228:	d015      	beq.n	8011256 <_svfiprintf_r+0xea>
 801122a:	9a07      	ldr	r2, [sp, #28]
 801122c:	462f      	mov	r7, r5
 801122e:	2000      	movs	r0, #0
 8011230:	250a      	movs	r5, #10
 8011232:	4639      	mov	r1, r7
 8011234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011238:	3b30      	subs	r3, #48	; 0x30
 801123a:	2b09      	cmp	r3, #9
 801123c:	d94d      	bls.n	80112da <_svfiprintf_r+0x16e>
 801123e:	b1b8      	cbz	r0, 8011270 <_svfiprintf_r+0x104>
 8011240:	e00f      	b.n	8011262 <_svfiprintf_r+0xf6>
 8011242:	462f      	mov	r7, r5
 8011244:	e7b8      	b.n	80111b8 <_svfiprintf_r+0x4c>
 8011246:	4a40      	ldr	r2, [pc, #256]	; (8011348 <_svfiprintf_r+0x1dc>)
 8011248:	1a80      	subs	r0, r0, r2
 801124a:	fa0b f000 	lsl.w	r0, fp, r0
 801124e:	4318      	orrs	r0, r3
 8011250:	9004      	str	r0, [sp, #16]
 8011252:	463d      	mov	r5, r7
 8011254:	e7d3      	b.n	80111fe <_svfiprintf_r+0x92>
 8011256:	9a03      	ldr	r2, [sp, #12]
 8011258:	1d11      	adds	r1, r2, #4
 801125a:	6812      	ldr	r2, [r2, #0]
 801125c:	9103      	str	r1, [sp, #12]
 801125e:	2a00      	cmp	r2, #0
 8011260:	db01      	blt.n	8011266 <_svfiprintf_r+0xfa>
 8011262:	9207      	str	r2, [sp, #28]
 8011264:	e004      	b.n	8011270 <_svfiprintf_r+0x104>
 8011266:	4252      	negs	r2, r2
 8011268:	f043 0302 	orr.w	r3, r3, #2
 801126c:	9207      	str	r2, [sp, #28]
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	783b      	ldrb	r3, [r7, #0]
 8011272:	2b2e      	cmp	r3, #46	; 0x2e
 8011274:	d10c      	bne.n	8011290 <_svfiprintf_r+0x124>
 8011276:	787b      	ldrb	r3, [r7, #1]
 8011278:	2b2a      	cmp	r3, #42	; 0x2a
 801127a:	d133      	bne.n	80112e4 <_svfiprintf_r+0x178>
 801127c:	9b03      	ldr	r3, [sp, #12]
 801127e:	1d1a      	adds	r2, r3, #4
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	9203      	str	r2, [sp, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	bfb8      	it	lt
 8011288:	f04f 33ff 	movlt.w	r3, #4294967295
 801128c:	3702      	adds	r7, #2
 801128e:	9305      	str	r3, [sp, #20]
 8011290:	4d2e      	ldr	r5, [pc, #184]	; (801134c <_svfiprintf_r+0x1e0>)
 8011292:	7839      	ldrb	r1, [r7, #0]
 8011294:	2203      	movs	r2, #3
 8011296:	4628      	mov	r0, r5
 8011298:	f7ee ffa2 	bl	80001e0 <memchr>
 801129c:	b138      	cbz	r0, 80112ae <_svfiprintf_r+0x142>
 801129e:	2340      	movs	r3, #64	; 0x40
 80112a0:	1b40      	subs	r0, r0, r5
 80112a2:	fa03 f000 	lsl.w	r0, r3, r0
 80112a6:	9b04      	ldr	r3, [sp, #16]
 80112a8:	4303      	orrs	r3, r0
 80112aa:	3701      	adds	r7, #1
 80112ac:	9304      	str	r3, [sp, #16]
 80112ae:	7839      	ldrb	r1, [r7, #0]
 80112b0:	4827      	ldr	r0, [pc, #156]	; (8011350 <_svfiprintf_r+0x1e4>)
 80112b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112b6:	2206      	movs	r2, #6
 80112b8:	1c7e      	adds	r6, r7, #1
 80112ba:	f7ee ff91 	bl	80001e0 <memchr>
 80112be:	2800      	cmp	r0, #0
 80112c0:	d038      	beq.n	8011334 <_svfiprintf_r+0x1c8>
 80112c2:	4b24      	ldr	r3, [pc, #144]	; (8011354 <_svfiprintf_r+0x1e8>)
 80112c4:	bb13      	cbnz	r3, 801130c <_svfiprintf_r+0x1a0>
 80112c6:	9b03      	ldr	r3, [sp, #12]
 80112c8:	3307      	adds	r3, #7
 80112ca:	f023 0307 	bic.w	r3, r3, #7
 80112ce:	3308      	adds	r3, #8
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d4:	444b      	add	r3, r9
 80112d6:	9309      	str	r3, [sp, #36]	; 0x24
 80112d8:	e76d      	b.n	80111b6 <_svfiprintf_r+0x4a>
 80112da:	fb05 3202 	mla	r2, r5, r2, r3
 80112de:	2001      	movs	r0, #1
 80112e0:	460f      	mov	r7, r1
 80112e2:	e7a6      	b.n	8011232 <_svfiprintf_r+0xc6>
 80112e4:	2300      	movs	r3, #0
 80112e6:	3701      	adds	r7, #1
 80112e8:	9305      	str	r3, [sp, #20]
 80112ea:	4619      	mov	r1, r3
 80112ec:	250a      	movs	r5, #10
 80112ee:	4638      	mov	r0, r7
 80112f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112f4:	3a30      	subs	r2, #48	; 0x30
 80112f6:	2a09      	cmp	r2, #9
 80112f8:	d903      	bls.n	8011302 <_svfiprintf_r+0x196>
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0c8      	beq.n	8011290 <_svfiprintf_r+0x124>
 80112fe:	9105      	str	r1, [sp, #20]
 8011300:	e7c6      	b.n	8011290 <_svfiprintf_r+0x124>
 8011302:	fb05 2101 	mla	r1, r5, r1, r2
 8011306:	2301      	movs	r3, #1
 8011308:	4607      	mov	r7, r0
 801130a:	e7f0      	b.n	80112ee <_svfiprintf_r+0x182>
 801130c:	ab03      	add	r3, sp, #12
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	4622      	mov	r2, r4
 8011312:	4b11      	ldr	r3, [pc, #68]	; (8011358 <_svfiprintf_r+0x1ec>)
 8011314:	a904      	add	r1, sp, #16
 8011316:	4640      	mov	r0, r8
 8011318:	f7fc fc6c 	bl	800dbf4 <_printf_float>
 801131c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011320:	4681      	mov	r9, r0
 8011322:	d1d6      	bne.n	80112d2 <_svfiprintf_r+0x166>
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	065b      	lsls	r3, r3, #25
 8011328:	f53f af35 	bmi.w	8011196 <_svfiprintf_r+0x2a>
 801132c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801132e:	b01d      	add	sp, #116	; 0x74
 8011330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011334:	ab03      	add	r3, sp, #12
 8011336:	9300      	str	r3, [sp, #0]
 8011338:	4622      	mov	r2, r4
 801133a:	4b07      	ldr	r3, [pc, #28]	; (8011358 <_svfiprintf_r+0x1ec>)
 801133c:	a904      	add	r1, sp, #16
 801133e:	4640      	mov	r0, r8
 8011340:	f7fc ff0e 	bl	800e160 <_printf_i>
 8011344:	e7ea      	b.n	801131c <_svfiprintf_r+0x1b0>
 8011346:	bf00      	nop
 8011348:	08011a84 	.word	0x08011a84
 801134c:	08011a8a 	.word	0x08011a8a
 8011350:	08011a8e 	.word	0x08011a8e
 8011354:	0800dbf5 	.word	0x0800dbf5
 8011358:	080110b7 	.word	0x080110b7

0801135c <__ascii_wctomb>:
 801135c:	b149      	cbz	r1, 8011372 <__ascii_wctomb+0x16>
 801135e:	2aff      	cmp	r2, #255	; 0xff
 8011360:	bf85      	ittet	hi
 8011362:	238a      	movhi	r3, #138	; 0x8a
 8011364:	6003      	strhi	r3, [r0, #0]
 8011366:	700a      	strbls	r2, [r1, #0]
 8011368:	f04f 30ff 	movhi.w	r0, #4294967295
 801136c:	bf98      	it	ls
 801136e:	2001      	movls	r0, #1
 8011370:	4770      	bx	lr
 8011372:	4608      	mov	r0, r1
 8011374:	4770      	bx	lr

08011376 <memmove>:
 8011376:	4288      	cmp	r0, r1
 8011378:	b510      	push	{r4, lr}
 801137a:	eb01 0302 	add.w	r3, r1, r2
 801137e:	d807      	bhi.n	8011390 <memmove+0x1a>
 8011380:	1e42      	subs	r2, r0, #1
 8011382:	4299      	cmp	r1, r3
 8011384:	d00a      	beq.n	801139c <memmove+0x26>
 8011386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801138a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801138e:	e7f8      	b.n	8011382 <memmove+0xc>
 8011390:	4283      	cmp	r3, r0
 8011392:	d9f5      	bls.n	8011380 <memmove+0xa>
 8011394:	1881      	adds	r1, r0, r2
 8011396:	1ad2      	subs	r2, r2, r3
 8011398:	42d3      	cmn	r3, r2
 801139a:	d100      	bne.n	801139e <memmove+0x28>
 801139c:	bd10      	pop	{r4, pc}
 801139e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80113a6:	e7f7      	b.n	8011398 <memmove+0x22>

080113a8 <_realloc_r>:
 80113a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113aa:	4607      	mov	r7, r0
 80113ac:	4614      	mov	r4, r2
 80113ae:	460e      	mov	r6, r1
 80113b0:	b921      	cbnz	r1, 80113bc <_realloc_r+0x14>
 80113b2:	4611      	mov	r1, r2
 80113b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80113b8:	f7fc bb2e 	b.w	800da18 <_malloc_r>
 80113bc:	b922      	cbnz	r2, 80113c8 <_realloc_r+0x20>
 80113be:	f7fc fadd 	bl	800d97c <_free_r>
 80113c2:	4625      	mov	r5, r4
 80113c4:	4628      	mov	r0, r5
 80113c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113c8:	f000 f814 	bl	80113f4 <_malloc_usable_size_r>
 80113cc:	42a0      	cmp	r0, r4
 80113ce:	d20f      	bcs.n	80113f0 <_realloc_r+0x48>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4638      	mov	r0, r7
 80113d4:	f7fc fb20 	bl	800da18 <_malloc_r>
 80113d8:	4605      	mov	r5, r0
 80113da:	2800      	cmp	r0, #0
 80113dc:	d0f2      	beq.n	80113c4 <_realloc_r+0x1c>
 80113de:	4631      	mov	r1, r6
 80113e0:	4622      	mov	r2, r4
 80113e2:	f7fc fab7 	bl	800d954 <memcpy>
 80113e6:	4631      	mov	r1, r6
 80113e8:	4638      	mov	r0, r7
 80113ea:	f7fc fac7 	bl	800d97c <_free_r>
 80113ee:	e7e9      	b.n	80113c4 <_realloc_r+0x1c>
 80113f0:	4635      	mov	r5, r6
 80113f2:	e7e7      	b.n	80113c4 <_realloc_r+0x1c>

080113f4 <_malloc_usable_size_r>:
 80113f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113f8:	1f18      	subs	r0, r3, #4
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	bfbc      	itt	lt
 80113fe:	580b      	ldrlt	r3, [r1, r0]
 8011400:	18c0      	addlt	r0, r0, r3
 8011402:	4770      	bx	lr

08011404 <_init>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	bf00      	nop
 8011408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801140a:	bc08      	pop	{r3}
 801140c:	469e      	mov	lr, r3
 801140e:	4770      	bx	lr

08011410 <_fini>:
 8011410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011412:	bf00      	nop
 8011414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011416:	bc08      	pop	{r3}
 8011418:	469e      	mov	lr, r3
 801141a:	4770      	bx	lr
