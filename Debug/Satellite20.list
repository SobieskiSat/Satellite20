
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  0801d7f0  0801d7f0  0002d7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e990  0801e990  000303a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e990  0801e990  0002e990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e998  0801e998  000303a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e998  0801e998  0002e998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e99c  0801e99c  0002e99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801e9a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af40  200003a8  0801ed48  000303a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2e8  0801ed48  0003b2e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004678a  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000725b  00000000  00000000  00076b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002778  00000000  00000000  0007ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002490  00000000  00000000  00080538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c719  00000000  00000000  000829c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000282c3  00000000  00000000  000af0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7c04  00000000  00000000  000d73a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aefa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbb4  00000000  00000000  001af024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d7d4 	.word	0x0801d7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0801d7d4 	.word	0x0801d7d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001052:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <setMotors+0x94>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d037      	beq.n	80010ce <setMotors+0x86>
	{
		TIM3->CCR2 = (uint32_t)((float)TIM3->ARR * (1 - dutyL));
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <setMotors+0x98>)
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800106a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <setMotors+0x98>)
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = (uint32_t)((float)TIM3->ARR * (1 - dutyR));
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <setMotors+0x98>)
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001096:	edd7 7a00 	vldr	s15, [r7]
 800109a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <setMotors+0x98>)
 80010a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CNT = 0;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <setMotors+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <setMotors+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

		Common.mot_l = dutyL;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <setMotors+0xa0>)
 80010bc:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
		Common.mot_r = dutyR;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <setMotors+0xa0>)
 80010c6:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200003c4 	.word	0x200003c4
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40000800 	.word	0x40000800
 80010e8:	200003c8 	.word	0x200003c8

080010ec <haltMotors>:

void haltMotors(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM3->CCR2 = TIM3->ARR;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <haltMotors+0x3c>)
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <haltMotors+0x3c>)
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = TIM3->ARR;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <haltMotors+0x3c>)
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <haltMotors+0x3c>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <haltMotors+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

	Common.mot_l = 0;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <haltMotors+0x44>)
 8001108:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	Common.mot_r = 0;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <haltMotors+0x44>)
 8001114:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40000400 	.word	0x40000400
 800112c:	40000800 	.word	0x40000800
 8001130:	200003c8 	.word	0x200003c8

08001134 <enableMotors>:

void enableMotors(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <enableMotors+0x74>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d02d      	beq.n	80011a2 <enableMotors+0x6e>
	{
		haltMotors();
 8001146:	f7ff ffd1 	bl	80010ec <haltMotors>
		motorsEnabled = true;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <enableMotors+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		writePin(PH_L, MOTOR_L_DIR);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <enableMotors+0x78>)
 8001158:	f005 fe9a 	bl	8006e90 <HAL_GPIO_WritePin>
		writePin(PH_R, MOTOR_R_DIR);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <enableMotors+0x78>)
 8001164:	f005 fe94 	bl	8006e90 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_2);
 8001168:	f014 fb2c 	bl	80157c4 <Get_TIM3_Instance>
 800116c:	4603      	mov	r3, r0
 800116e:	2104      	movs	r1, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f00a fda5 	bl	800bcc0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001176:	f014 fb25 	bl	80157c4 <Get_TIM3_Instance>
 800117a:	4603      	mov	r3, r0
 800117c:	2108      	movs	r1, #8
 800117e:	4618      	mov	r0, r3
 8001180:	f00a fd9e 	bl	800bcc0 <HAL_TIM_PWM_Start>

		haltMotors();
 8001184:	f7ff ffb2 	bl	80010ec <haltMotors>

		writePin(MOT_STBY, LOW);
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <enableMotors+0x78>)
 800118e:	f005 fe7f 	bl	8006e90 <HAL_GPIO_WritePin>
		delay(10);
 8001192:	200a      	movs	r0, #10
 8001194:	f004 fffe 	bl	8006194 <HAL_Delay>
		writePin(MOT_STBY, HIGH);
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <enableMotors+0x78>)
 800119e:	f005 fe77 	bl	8006e90 <HAL_GPIO_WritePin>
	}
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200003c4 	.word	0x200003c4
 80011ac:	40020400 	.word	0x40020400

080011b0 <disableMotors>:

void disableMotors(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <disableMotors+0x40>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d017      	beq.n	80011ec <disableMotors+0x3c>
	{
		writePin(MOT_STBY, LOW);
 80011bc:	2200      	movs	r2, #0
 80011be:	2104      	movs	r1, #4
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <disableMotors+0x44>)
 80011c2:	f005 fe65 	bl	8006e90 <HAL_GPIO_WritePin>
		haltMotors();
 80011c6:	f7ff ff91 	bl	80010ec <haltMotors>
		motorsEnabled = false;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <disableMotors+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_2);
 80011d0:	f014 faf8 	bl	80157c4 <Get_TIM3_Instance>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2104      	movs	r1, #4
 80011d8:	4618      	mov	r0, r3
 80011da:	f00a fdaf 	bl	800bd3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_3);
 80011de:	f014 faf1 	bl	80157c4 <Get_TIM3_Instance>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00a fda8 	bl	800bd3c <HAL_TIM_PWM_Stop>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200003c4 	.word	0x200003c4
 80011f4:	40020400 	.word	0x40020400

080011f8 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 80011fe:	f011 fc7b 	bl	8012af8 <BSP_SD_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SD_init+0x14>
 8001208:	2303      	movs	r3, #3
 800120a:	e027      	b.n	800125c <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <SD_init+0x6c>)
 800120e:	f011 fc65 	bl	8012adc <FATFS_UnLinkDriver>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SD_init+0x24>
 8001218:	2303      	movs	r3, #3
 800121a:	e01f      	b.n	800125c <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800121c:	4911      	ldr	r1, [pc, #68]	; (8001264 <SD_init+0x6c>)
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <SD_init+0x70>)
 8001220:	f011 fc14 	bl	8012a4c <FATFS_LinkDriver>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SD_init+0x36>
 800122a:	2303      	movs	r3, #3
 800122c:	e016      	b.n	800125c <SD_init+0x64>

	f_mount(0, SDPath, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <SD_init+0x6c>)
 8001232:	2000      	movs	r0, #0
 8001234:	f010 fe62 	bl	8011efc <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	490a      	ldr	r1, [pc, #40]	; (8001264 <SD_init+0x6c>)
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <SD_init+0x74>)
 800123e:	f010 fe5d 	bl	8011efc <f_mount>
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	4905      	ldr	r1, [pc, #20]	; (8001264 <SD_init+0x6c>)
 8001250:	2000      	movs	r0, #0
 8001252:	f010 fe53 	bl	8011efc <f_mount>
		return mountStatus;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	e000      	b.n	800125c <SD_init+0x64>
	}

	return FR_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20007910 	.word	0x20007910
 8001268:	0801e430 	.word	0x0801e430
 800126c:	20002808 	.word	0x20002808

08001270 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 8001278:	2208      	movs	r2, #8
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <SD_newFile+0x44>)
 800127e:	f010 fe83 	bl	8011f88 <f_open>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <SD_newFile+0x48>)
 8001288:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <SD_newFile+0x48>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <SD_newFile+0x4c>)
 8001296:	2000      	movs	r0, #0
 8001298:	f010 fe30 	bl	8011efc <f_mount>
		return stato;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SD_newFile+0x48>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	e004      	b.n	80012ac <SD_newFile+0x3c>
	}

	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <SD_newFile+0x44>)
 80012a4:	f011 fa4e 	bl	8012744 <f_close>
	return stato;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <SD_newFile+0x48>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200017d8 	.word	0x200017d8
 80012b8:	200017d4 	.word	0x200017d4
 80012bc:	20007910 	.word	0x20007910

080012c0 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 80012ca:	2232      	movs	r2, #50	; 0x32
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <SD_writeToFile+0x64>)
 80012d0:	f010 fe5a 	bl	8011f88 <f_open>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <SD_writeToFile+0x68>)
 80012da:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <SD_writeToFile+0x68>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <SD_writeToFile+0x2a>
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <SD_writeToFile+0x68>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	e017      	b.n	800131a <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7fe ff7a 	bl	80001e4 <strlen>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SD_writeToFile+0x6c>)
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <SD_writeToFile+0x64>)
 80012f8:	f011 f812 	bl	8012320 <f_write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <SD_writeToFile+0x68>)
 8001302:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <SD_writeToFile+0x68>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <SD_writeToFile+0x52>
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SD_writeToFile+0x68>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	e003      	b.n	800131a <SD_writeToFile+0x5a>

	return f_close(&fileo);
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <SD_writeToFile+0x64>)
 8001314:	f011 fa16 	bl	8012744 <f_close>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200017d8 	.word	0x200017d8
 8001328:	200017d4 	.word	0x200017d4
 800132c:	2000383c 	.word	0x2000383c

08001330 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f011 fa2d 	bl	8012798 <f_mkdir>
 800133e:	4603      	mov	r3, r0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <millis>:
#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
 800134c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <millis+0x1c>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001374:	1cf9      	adds	r1, r7, #3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	2201      	movs	r2, #1
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f00a f88a 	bl	800b496 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001382:	bf00      	nop
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f00a fb5c 	bl	800ba42 <HAL_SPI_GetState>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d1f9      	bne.n	8001384 <SX1278_write+0x1c>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	4613      	mov	r3, r2
 80013a6:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a18      	ldr	r0, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8a5b      	ldrh	r3, [r3, #18]
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	f005 fd6c 	bl	8006e90 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff ffce 	bl	8001368 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	78ba      	ldrb	r2, [r7, #2]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffc7 	bl	8001368 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a18      	ldr	r0, [r3, #32]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	8a5b      	ldrh	r3, [r3, #18]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	f005 fd53 	bl	8006e90 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	72fb      	strb	r3, [r7, #11]
 8001402:	4613      	mov	r3, r2
 8001404:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001406:	7abb      	ldrb	r3, [r7, #10]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d92d      	bls.n	8001468 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a18      	ldr	r0, [r3, #32]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8a5b      	ldrh	r3, [r3, #18]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f005 fd3a 	bl	8006e90 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff ff9c 	bl	8001368 <SX1278_write>
	for (i = 0; i < len; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]
 8001434:	e00b      	b.n	800144e <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff ff90 	bl	8001368 <SX1278_write>
	for (i = 0; i < len; i++)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3301      	adds	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	7dfa      	ldrb	r2, [r7, #23]
 8001450:	7abb      	ldrb	r3, [r7, #10]
 8001452:	429a      	cmp	r2, r3
 8001454:	d3ef      	bcc.n	8001436 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a18      	ldr	r0, [r3, #32]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8a5b      	ldrh	r3, [r3, #18]
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f005 fd15 	bl	8006e90 <HAL_GPIO_WritePin>
 8001466:	e000      	b.n	800146a <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001468:	bf00      	nop
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800147c:	2300      	movs	r3, #0
 800147e:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001480:	f107 020e 	add.w	r2, r7, #14
 8001484:	f107 010f 	add.w	r1, r7, #15
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f00a f934 	bl	800b6fe <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001496:	bf00      	nop
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f00a fad2 	bl	800ba42 <HAL_SPI_GetState>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d1f9      	bne.n	8001498 <SX1278_read+0x28>

	return rxByte;
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a18      	ldr	r0, [r3, #32]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8a5b      	ldrh	r3, [r3, #18]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	f005 fce3 	bl	8006e90 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff48 	bl	8001368 <SX1278_write>
	recv = SX1278_read(inst->spi);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ffc7 	bl	8001470 <SX1278_read>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a18      	ldr	r0, [r3, #32]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	8a5b      	ldrh	r3, [r3, #18]
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	f005 fccd 	bl	8006e90 <HAL_GPIO_WritePin>

	return recv;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	461a      	mov	r2, r3
 800150c:	460b      	mov	r3, r1
 800150e:	72fb      	strb	r3, [r7, #11]
 8001510:	4613      	mov	r3, r2
 8001512:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001514:	7abb      	ldrb	r3, [r7, #10]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d92b      	bls.n	8001572 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a18      	ldr	r0, [r3, #32]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8a5b      	ldrh	r3, [r3, #18]
 8001522:	2200      	movs	r2, #0
 8001524:	4619      	mov	r1, r3
 8001526:	f005 fcb3 	bl	8006e90 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	7afa      	ldrb	r2, [r7, #11]
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff18 	bl	8001368 <SX1278_write>
	for (i = 0; i < len; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	75fb      	strb	r3, [r7, #23]
 800153c:	e00c      	b.n	8001558 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	18d4      	adds	r4, r2, r3
 8001548:	4608      	mov	r0, r1
 800154a:	f7ff ff91 	bl	8001470 <SX1278_read>
 800154e:	4603      	mov	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	3301      	adds	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
 8001558:	7dfa      	ldrb	r2, [r7, #23]
 800155a:	7abb      	ldrb	r3, [r7, #10]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3ee      	bcc.n	800153e <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a18      	ldr	r0, [r3, #32]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8a5b      	ldrh	r3, [r3, #18]
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f005 fc90 	bl	8006e90 <HAL_GPIO_WritePin>
 8001570:	e000      	b.n	8001574 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 8001572:	bf00      	nop
}
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
	...

0800157c <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	SX1278_reset(inst);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fae3 	bl	8001b58 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 8001592:	2142      	movs	r1, #66	; 0x42
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff8a 	bl	80014ae <SX1278_read_address>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b12      	cmp	r3, #18
 80015a2:	d001      	beq.n	80015a8 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e0d7      	b.n	8001758 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fab5 	bl	8001b18 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 80015ae:	2288      	movs	r2, #136	; 0x88
 80015b0:	2101      	movs	r1, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fef0 	bl	8001398 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	4a67      	ldr	r2, [pc, #412]	; (8001760 <SX1278_init+0x1e4>)
 80015c2:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 80015c6:	4b66      	ldr	r3, [pc, #408]	; (8001760 <SX1278_init+0x1e4>)
 80015c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f04f 0400 	mov.w	r4, #0
 80015d4:	0394      	lsls	r4, r2, #14
 80015d6:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 80015da:	038b      	lsls	r3, r1, #14
 80015dc:	4a60      	ldr	r2, [pc, #384]	; (8001760 <SX1278_init+0x1e4>)
 80015de:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 80015e2:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <SX1278_init+0x1e4>)
 80015e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e8:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <SX1278_init+0x1e8>)
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f7ff fbab 	bl	8000d48 <__aeabi_uldivmod>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4a5a      	ldr	r2, [pc, #360]	; (8001760 <SX1278_init+0x1e4>)
 80015f8:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 80015fc:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <SX1278_init+0x1ec>)
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <SX1278_init+0x1e4>)
 8001600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001604:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001608:	4b57      	ldr	r3, [pc, #348]	; (8001768 <SX1278_init+0x1ec>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	461a      	mov	r2, r3
 800160e:	2106      	movs	r1, #6
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fec1 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <SX1278_init+0x1ec>)
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	461a      	mov	r2, r3
 800161c:	2107      	movs	r1, #7
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff feba 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <SX1278_init+0x1ec>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	2108      	movs	r1, #8
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff feb3 	bl	8001398 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	461a      	mov	r2, r3
 8001638:	2109      	movs	r1, #9
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff feac 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 8001640:	222b      	movs	r2, #43	; 0x2b
 8001642:	210b      	movs	r1, #11
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fea7 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 800164a:	2223      	movs	r2, #35	; 0x23
 800164c:	210c      	movs	r1, #12
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fea2 	bl	8001398 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 8001654:	2287      	movs	r2, #135	; 0x87
 8001656:	214d      	movs	r1, #77	; 0x4d
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fe9d 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 800165e:	2200      	movs	r2, #0
 8001660:	2124      	movs	r1, #36	; 0x24
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe98 	bl	8001398 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d139      	bne.n	80016e4 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	79db      	ldrb	r3, [r3, #7]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	b2da      	uxtb	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	799b      	ldrb	r3, [r3, #6]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	211d      	movs	r1, #29
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe83 	bl	8001398 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	b2da      	uxtb	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	211e      	movs	r1, #30
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe74 	bl	8001398 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 80016b0:	2131      	movs	r1, #49	; 0x31
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fefb 	bl	80014ae <SX1278_read_address>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	f023 0307 	bic.w	r3, r3, #7
 80016c2:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	f043 0305 	orr.w	r3, r3, #5
 80016ca:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	461a      	mov	r2, r3
 80016d0:	2131      	movs	r1, #49	; 0x31
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fe60 	bl	8001398 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 80016d8:	220c      	movs	r2, #12
 80016da:	2137      	movs	r1, #55	; 0x37
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe5b 	bl	8001398 <SX1278_command>
 80016e2:	e01d      	b.n	8001720 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	79db      	ldrb	r3, [r3, #7]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	799b      	ldrb	r3, [r3, #6]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	211d      	movs	r1, #29
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fe4b 	bl	8001398 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	795b      	ldrb	r3, [r3, #5]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7a1b      	ldrb	r3, [r3, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	211e      	movs	r1, #30
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fe3c 	bl	8001398 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 8001720:	2264      	movs	r2, #100	; 0x64
 8001722:	211f      	movs	r1, #31
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fe37 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 800172a:	2200      	movs	r2, #0
 800172c:	2120      	movs	r1, #32
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe32 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 8001734:	220c      	movs	r2, #12
 8001736:	2121      	movs	r1, #33	; 0x21
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fe2d 	bl	8001398 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 800173e:	2201      	movs	r2, #1
 8001740:	2141      	movs	r1, #65	; 0x41
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe28 	bl	8001398 <SX1278_command>

	SX1278_standby(inst);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f9f5 	bl	8001b38 <SX1278_standby>

	inst->active = true;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	return true;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000950 	.word	0x20000950
 8001764:	000f4240 	.word	0x000f4240
 8001768:	20000958 	.word	0x20000958

0800176c <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	7b1b      	ldrb	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12b      	bne.n	80017da <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f95c 	bl	8001a48 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	461a      	mov	r2, r3
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f86c 	bl	8001874 <SX1278_tx_input>
		SX1278_tx_push(inst);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f898 	bl	80018d2 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e011      	b.n	80017dc <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80017b8:	bf00      	nop
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8a1b      	ldrh	r3, [r3, #16]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f005 fb4b 	bl	8006e60 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f4      	beq.n	80017ba <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f88b 	bl	80018ec <SX1278_tx_finish>
 80017d6:	4603      	mov	r3, r0
 80017d8:	e000      	b.n	80017dc <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 80017da:	2300      	movs	r3, #0
	}
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d13a      	bne.n	800186a <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f953 	bl	8001aa0 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			inst->rxStart = millis();
 800180c:	f7ff fd9c 	bl	8001348 <millis>
 8001810:	4602      	mov	r2, r0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001816:	2301      	movs	r3, #1
 8001818:	e028      	b.n	800186c <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 800181a:	f7ff fd95 	bl	8001348 <millis>
 800181e:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001820:	e011      	b.n	8001846 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 8001822:	f7ff fd91 	bl	8001348 <millis>
 8001826:	4602      	mov	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	8952      	ldrh	r2, [r2, #10]
 8001830:	4293      	cmp	r3, r2
 8001832:	d308      	bcc.n	8001846 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f88d 	bl	8001954 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 8001842:	2300      	movs	r3, #0
 8001844:	e012      	b.n	800186c <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	8a1b      	ldrh	r3, [r3, #16]
 800184e:	4619      	mov	r1, r3
 8001850:	4610      	mov	r0, r2
 8001852:	f005 fb05 	bl	8006e60 <HAL_GPIO_ReadPin>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e2      	beq.n	8001822 <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f879 	bl	8001954 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001868:	e000      	b.n	800186c <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 800186a:	2300      	movs	r3, #0
	}
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	4613      	mov	r3, r2
 8001880:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	461a      	mov	r2, r3
 8001886:	2122      	movs	r1, #34	; 0x22
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fd85 	bl	8001398 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	2100      	movs	r1, #0
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fdac 	bl	80013f2 <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
 800189e:	e00c      	b.n	80018ba <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	441a      	add	r2, r3
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	7811      	ldrb	r1, [r2, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	460a      	mov	r2, r1
 80018b0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	for (l = 0; l < length; l++)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	3301      	adds	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
 80018ba:	7dfa      	ldrb	r2, [r7, #23]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d3ee      	bcc.n	80018a0 <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 80018da:	228b      	movs	r2, #139	; 0x8b
 80018dc:	2101      	movs	r1, #1
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd5a 	bl	8001398 <SX1278_command>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80018f4:	2112      	movs	r1, #18
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fdd9 	bl	80014ae <SX1278_read_address>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	bfcc      	ite	gt
 8001914:	2301      	movgt	r3, #1
 8001916:	2300      	movle	r3, #0
 8001918:	b2da      	uxtb	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	if (inst->txDone) inst->newTxData = true;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <SX1278_tx_finish+0x46>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inst->txCount++;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	87da      	strh	r2, [r3, #62]	; 0x3e
	SX1278_clearLoRaIrq(inst);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f9ed 	bl	8001d1e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f8f7 	bl	8001b38 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f99b 	bl	8001c98 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3348      	adds	r3, #72	; 0x48
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f015 faaa 	bl	8016ec6 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001972:	2110      	movs	r1, #16
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fd9a 	bl	80014ae <SX1278_read_address>
 800197a:	4603      	mov	r3, r0
 800197c:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	461a      	mov	r2, r3
 8001982:	210d      	movs	r1, #13
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fd07 	bl	8001398 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d104      	bne.n	800199c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e005      	b.n	80019a8 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800199c:	2113      	movs	r1, #19
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd85 	bl	80014ae <SX1278_read_address>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fda4 	bl	8001500 <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && (!inst->crcError || LR_VALIDATE_CRCERROR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d011      	beq.n	80019e6 <SX1278_rx_get_packet+0x92>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <SX1278_rx_get_packet+0x92>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SX1278_rx_get_packet+0x92>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <SX1278_rx_get_packet+0x94>
 80019e6:	2300      	movs	r3, #0
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (inst->newPacket) inst->newRxData = true;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <SX1278_rx_get_packet+0xb2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inst->rxCount++;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	879a      	strh	r2, [r3, #60]	; 0x3c
	inst->rssi = SX1278_getRSSI(inst);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f990 	bl	8001d38 <SX1278_getRSSI>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	SX1278_clearLoRaIrq(inst);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f979 	bl	8001d1e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f883 	bl	8001b38 <SX1278_standby>


	//sprintf(inst->lastPacket, (char*)inst->rxBuffer);


	if (inst->rxTimeout)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a38:	2b00      	cmp	r3, #0
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f964 	bl	8001d1e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001a56:	2241      	movs	r2, #65	; 0x41
 8001a58:	2140      	movs	r1, #64	; 0x40
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fc9c 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a60:	22f7      	movs	r2, #247	; 0xf7
 8001a62:	2111      	movs	r1, #17
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fc97 	bl	8001398 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a6a:	210e      	movs	r1, #14
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fd1e 	bl	80014ae <SX1278_read_address>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	210d      	movs	r1, #13
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fc8b 	bl	8001398 <SX1278_command>

	inst->txLen = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->txDone = false;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	731a      	strb	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f845 	bl	8001b38 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f935 	bl	8001d1e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fc6d 	bl	8001398 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001abe:	221f      	movs	r2, #31
 8001ac0:	2111      	movs	r1, #17
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fc68 	bl	8001398 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001ac8:	210f      	movs	r1, #15
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fcef 	bl	80014ae <SX1278_read_address>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	210d      	movs	r1, #13
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc5c 	bl	8001398 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001ae0:	228d      	movs	r2, #141	; 0x8d
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fc57 	bl	8001398 <SX1278_command>

	inst->crcError = false;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->newPacket = false;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b20:	2208      	movs	r2, #8
 8001b22:	2101      	movs	r1, #1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fc37 	bl	8001398 <SX1278_command>
	inst->mode = SLEEP;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	731a      	strb	r2, [r3, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001b40:	2209      	movs	r2, #9
 8001b42:	2101      	movs	r1, #1
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fc27 	bl	8001398 <SX1278_command>
	inst->mode = STANDBY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	731a      	strb	r2, [r3, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	inst->txLen = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->rxLen = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->mode = SLEEP;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, HIGH);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a18      	ldr	r0, [r3, #32]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8a5b      	ldrh	r3, [r3, #18]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f005 f96a 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, LOW);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6998      	ldr	r0, [r3, #24]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	89db      	ldrh	r3, [r3, #14]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f005 f962 	bl	8006e90 <HAL_GPIO_WritePin>
	delay(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f004 fae1 	bl	8006194 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, LOW);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6998      	ldr	r0, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	89db      	ldrh	r3, [r3, #14]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f005 f957 	bl	8006e90 <HAL_GPIO_WritePin>
	delay(100);
 8001be2:	2064      	movs	r0, #100	; 0x64
 8001be4:	f004 fad6 	bl	8006194 <HAL_Delay>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01e      	beq.n	8001c40 <SX1278_dio0_IRQ+0x50>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d019      	beq.n	8001c40 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d104      	bne.n	8001c1e <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fe69 	bl	80018ec <SX1278_tx_finish>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e011      	b.n	8001c42 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7b1b      	ldrb	r3, [r3, #12]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d104      	bne.n	8001c30 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe94 	bl	8001954 <SX1278_rx_get_packet>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	e008      	b.n	8001c42 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f874 	bl	8001d1e <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff7e 	bl	8001b38 <SX1278_standby>
			return false;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001c40:	2300      	movs	r3, #0
	}
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001c52:	f7ff fb79 	bl	8001348 <millis>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	8952      	ldrh	r2, [r2, #10]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d313      	bcc.n	8001c8e <SX1278_intTimeout+0x44>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7b1b      	ldrb	r3, [r3, #12]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d10f      	bne.n	8001c8e <SX1278_intTimeout+0x44>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001c80:	f7ff fb62 	bl	8001348 <millis>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40

		return true;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <SX1278_intTimeout+0x46>
	}
	return false;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001ca0:	2112      	movs	r1, #18
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fc03 	bl	80014ae <SX1278_read_address>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bfcc      	ite	gt
 8001cc0:	2301      	movgt	r3, #1
 8001cc2:	2300      	movle	r3, #0
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dc07      	bgt.n	8001cea <SX1278_update_IRQ_status+0x52>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SX1278_update_IRQ_status+0x56>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <SX1278_update_IRQ_status+0x58>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfcc      	ite	gt
 8001d0a:	2301      	movgt	r3, #1
 8001d0c:	2300      	movle	r3, #0
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	2112      	movs	r1, #18
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fb34 	bl	8001398 <SX1278_command>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001d40:	211a      	movs	r1, #26
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fbb3 	bl	80014ae <SX1278_read_address>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	3ba4      	subs	r3, #164	; 0xa4
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <BMP280_readBytes>:
#include "bmp280.h"
#include "run.h"
#include "config.h"

static bool BMP280_readBytes(BMP280* inst, uint8_t mem_addr, uint8_t* data, uint8_t len)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af04      	add	r7, sp, #16
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	460b      	mov	r3, r1
 8001d62:	72fb      	strb	r3, [r7, #11]
 8001d64:	4613      	mov	r3, r2
 8001d66:	72bb      	strb	r3, [r7, #10]
	return (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, len, 500) == HAL_OK);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8899      	ldrh	r1, [r3, #4]
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	b29c      	uxth	r4, r3
 8001d74:	7abb      	ldrb	r3, [r7, #10]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d7c:	9202      	str	r2, [sp, #8]
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4622      	mov	r2, r4
 8001d88:	f005 fabe 	bl	8007308 <HAL_I2C_Mem_Read>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}

08001da0 <BMP280_writeByte>:
static bool BMP280_writeByte(BMP280* inst, uint8_t mem_addr, uint8_t data)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af04      	add	r7, sp, #16
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
 8001dac:	4613      	mov	r3, r2
 8001dae:	70bb      	strb	r3, [r7, #2]
	return (HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 500) == HAL_OK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8899      	ldrh	r1, [r3, #4]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	1cbb      	adds	r3, r7, #2
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f005 f9a2 	bl	8007114 <HAL_I2C_Mem_Write>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <BMP280_read16>:
static bool BMP280_read16(BMP280* inst, uint8_t mem_addr, uint16_t* data)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	460b      	mov	r3, r1
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff[2];

	if (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, rx_buff, 2, 500) == HAL_OK)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8899      	ldrh	r1, [r3, #4]
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	2302      	movs	r3, #2
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f005 fa7a 	bl	8007308 <HAL_I2C_Mem_Read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <BMP280_read16+0x4e>
	{
		*data = (uint16_t)((rx_buff[1] << 8) | rx_buff[0]);
 8001e1a:	7d7b      	ldrb	r3, [r7, #21]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	7d3b      	ldrb	r3, [r7, #20]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	801a      	strh	r2, [r3, #0]
		return true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <BMP280_read16+0x50>
	}
	else return false;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <read_calibration_data>:

static bool read_calibration_data(BMP280* inst)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	return(BMP280_read16(inst, 0x88, &inst->dig_T1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	331e      	adds	r3, #30
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2188      	movs	r1, #136	; 0x88
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffc9 	bl	8001de4 <BMP280_read16>
 8001e52:	4603      	mov	r3, r0
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06f      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8a, (uint16_t*) &inst->dig_T2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	218a      	movs	r1, #138	; 0x8a
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffbf 	bl	8001de4 <BMP280_read16>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d065      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8c, (uint16_t*) &inst->dig_T3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3322      	adds	r3, #34	; 0x22
 8001e70:	461a      	mov	r2, r3
 8001e72:	218c      	movs	r1, #140	; 0x8c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffb5 	bl	8001de4 <BMP280_read16>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05b      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8e, &inst->dig_P1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3324      	adds	r3, #36	; 0x24
 8001e84:	461a      	mov	r2, r3
 8001e86:	218e      	movs	r1, #142	; 0x8e
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ffab 	bl	8001de4 <BMP280_read16>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d051      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x90, (uint16_t*) &inst->dig_P2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3326      	adds	r3, #38	; 0x26
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2190      	movs	r1, #144	; 0x90
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffa1 	bl	8001de4 <BMP280_read16>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d047      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x92, (uint16_t*) &inst->dig_P3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3328      	adds	r3, #40	; 0x28
 8001eac:	461a      	mov	r2, r3
 8001eae:	2192      	movs	r1, #146	; 0x92
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff97 	bl	8001de4 <BMP280_read16>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03d      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	332a      	adds	r3, #42	; 0x2a
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2194      	movs	r1, #148	; 0x94
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff8d 	bl	8001de4 <BMP280_read16>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d033      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	332c      	adds	r3, #44	; 0x2c
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2196      	movs	r1, #150	; 0x96
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff83 	bl	8001de4 <BMP280_read16>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d029      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	332e      	adds	r3, #46	; 0x2e
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2198      	movs	r1, #152	; 0x98
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff79 	bl	8001de4 <BMP280_read16>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01f      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3330      	adds	r3, #48	; 0x30
 8001efc:	461a      	mov	r2, r3
 8001efe:	219a      	movs	r1, #154	; 0x9a
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff6f 	bl	8001de4 <BMP280_read16>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3332      	adds	r3, #50	; 0x32
 8001f10:	461a      	mov	r2, r3
 8001f12:	219c      	movs	r1, #156	; 0x9c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff65 	bl	8001de4 <BMP280_read16>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3334      	adds	r3, #52	; 0x34
 8001f24:	461a      	mov	r2, r3
 8001f26:	219e      	movs	r1, #158	; 0x9e
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff5b 	bl	8001de4 <BMP280_read16>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <read_calibration_data+0xfc>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <read_calibration_data+0xfe>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <compensate_temperature>:

static int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp, int32_t *fine_temp)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	10da      	asrs	r2, r3, #3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8bdb      	ldrh	r3, [r3, #30]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001f6a:	12db      	asrs	r3, r3, #11
 8001f6c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	111b      	asrs	r3, r3, #4
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	8bd2      	ldrh	r2, [r2, #30]
 8001f76:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	1112      	asrs	r2, r2, #4
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	8bc9      	ldrh	r1, [r1, #30]
 8001f80:	1a52      	subs	r2, r2, r1
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001f92:	139b      	asrs	r3, r3, #14
 8001f94:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3380      	adds	r3, #128	; 0x80
 8001fac:	121b      	asrs	r3, r3, #8
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <compensate_pressure>:

static uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press, int32_t fine_temp)
{
 8001fba:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001fd0:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001fd4:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001fd8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	fb02 f203 	mul.w	r2, r2, r3
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	6a39      	ldr	r1, [r7, #32]
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	441a      	add	r2, r3
 8001fee:	6a39      	ldr	r1, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	fba1 3403 	umull	r3, r4, r1, r3
 8001ff6:	4422      	add	r2, r4
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8002000:	b211      	sxth	r1, r2
 8002002:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002006:	fb01 f504 	mul.w	r5, r1, r4
 800200a:	fb03 f002 	mul.w	r0, r3, r2
 800200e:	4428      	add	r0, r5
 8002010:	fba3 3401 	umull	r3, r4, r3, r1
 8002014:	1902      	adds	r2, r0, r4
 8002016:	4614      	mov	r4, r2
 8002018:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800201c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002026:	b21b      	sxth	r3, r3
 8002028:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	fb04 f102 	mul.w	r1, r4, r2
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	fb03 f202 	mul.w	r2, r3, r2
 8002038:	1888      	adds	r0, r1, r2
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	fba2 1203 	umull	r1, r2, r2, r3
 8002040:	1883      	adds	r3, r0, r2
 8002042:	461a      	mov	r2, r3
 8002044:	f04f 0500 	mov.w	r5, #0
 8002048:	f04f 0600 	mov.w	r6, #0
 800204c:	0456      	lsls	r6, r2, #17
 800204e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002052:	044d      	lsls	r5, r1, #17
 8002054:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002058:	186b      	adds	r3, r5, r1
 800205a:	eb46 0402 	adc.w	r4, r6, r2
 800205e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002068:	b219      	sxth	r1, r3
 800206a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800206e:	f04f 0500 	mov.w	r5, #0
 8002072:	f04f 0600 	mov.w	r6, #0
 8002076:	00ce      	lsls	r6, r1, #3
 8002078:	2500      	movs	r5, #0
 800207a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800207e:	186b      	adds	r3, r5, r1
 8002080:	eb46 0402 	adc.w	r4, r6, r2
 8002084:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	fb02 f203 	mul.w	r2, r2, r3
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	6a39      	ldr	r1, [r7, #32]
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	441a      	add	r2, r3
 800209a:	6a39      	ldr	r1, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	fba1 3403 	umull	r3, r4, r1, r3
 80020a2:	4422      	add	r2, r4
 80020a4:	4614      	mov	r4, r2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 80020ac:	b211      	sxth	r1, r2
 80020ae:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020b2:	fb01 f504 	mul.w	r5, r1, r4
 80020b6:	fb03 f002 	mul.w	r0, r3, r2
 80020ba:	4428      	add	r0, r5
 80020bc:	fba3 3401 	umull	r3, r4, r3, r1
 80020c0:	1902      	adds	r2, r0, r4
 80020c2:	4614      	mov	r4, r2
 80020c4:	f04f 0100 	mov.w	r1, #0
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	0a19      	lsrs	r1, r3, #8
 80020ce:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80020d2:	1222      	asrs	r2, r4, #8
		 + ((var1 * (int64_t) inst->dig_P2) << 12);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020da:	b21b      	sxth	r3, r3
 80020dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020e0:	6a38      	ldr	r0, [r7, #32]
 80020e2:	fb04 f500 	mul.w	r5, r4, r0
 80020e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e8:	fb03 f000 	mul.w	r0, r3, r0
 80020ec:	4428      	add	r0, r5
 80020ee:	6a3d      	ldr	r5, [r7, #32]
 80020f0:	fba5 5603 	umull	r5, r6, r5, r3
 80020f4:	1983      	adds	r3, r0, r6
 80020f6:	461e      	mov	r6, r3
 80020f8:	f04f 0b00 	mov.w	fp, #0
 80020fc:	f04f 0c00 	mov.w	ip, #0
 8002100:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002104:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002108:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 800210c:	eb1b 0301 	adds.w	r3, fp, r1
 8002110:	eb4c 0402 	adc.w	r4, ip, r2
 8002114:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8002118:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800211c:	1c19      	adds	r1, r3, #0
 800211e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002126:	b29b      	uxth	r3, r3
 8002128:	f04f 0400 	mov.w	r4, #0
 800212c:	fb03 f502 	mul.w	r5, r3, r2
 8002130:	fb01 f004 	mul.w	r0, r1, r4
 8002134:	4428      	add	r0, r5
 8002136:	fba1 3403 	umull	r3, r4, r1, r3
 800213a:	1902      	adds	r2, r0, r4
 800213c:	4614      	mov	r4, r2
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	1061      	asrs	r1, r4, #1
 8002148:	17e2      	asrs	r2, r4, #31
 800214a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800214e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002152:	4323      	orrs	r3, r4
 8002154:	d101      	bne.n	800215a <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8002156:	2300      	movs	r3, #0
 8002158:	e0d4      	b.n	8002304 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002160:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002164:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	ea4f 0963 	mov.w	r9, r3, asr #1
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002174:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002178:	4645      	mov	r5, r8
 800217a:	464e      	mov	r6, r9
 800217c:	1aed      	subs	r5, r5, r3
 800217e:	eb66 0604 	sbc.w	r6, r6, r4
 8002182:	46a8      	mov	r8, r5
 8002184:	46b1      	mov	r9, r6
 8002186:	eb18 0308 	adds.w	r3, r8, r8
 800218a:	eb49 0409 	adc.w	r4, r9, r9
 800218e:	4698      	mov	r8, r3
 8002190:	46a1      	mov	r9, r4
 8002192:	eb18 0805 	adds.w	r8, r8, r5
 8002196:	eb49 0906 	adc.w	r9, r9, r6
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80021a6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80021aa:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80021ae:	eb18 0801 	adds.w	r8, r8, r1
 80021b2:	eb49 0902 	adc.w	r9, r9, r2
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80021c2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80021c6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80021ca:	4688      	mov	r8, r1
 80021cc:	4691      	mov	r9, r2
 80021ce:	eb18 0805 	adds.w	r8, r8, r5
 80021d2:	eb49 0906 	adc.w	r9, r9, r6
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80021e2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80021e6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80021ea:	4688      	mov	r8, r1
 80021ec:	4691      	mov	r9, r2
 80021ee:	eb18 0005 	adds.w	r0, r8, r5
 80021f2:	eb49 0106 	adc.w	r1, r9, r6
 80021f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fa:	f7fe fd55 	bl	8000ca8 <__aeabi_ldivmod>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800220c:	b219      	sxth	r1, r3
 800220e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002212:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f04f 0400 	mov.w	r4, #0
 800221e:	0b6b      	lsrs	r3, r5, #13
 8002220:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002224:	1374      	asrs	r4, r6, #13
 8002226:	fb03 f502 	mul.w	r5, r3, r2
 800222a:	fb01 f004 	mul.w	r0, r1, r4
 800222e:	4428      	add	r0, r5
 8002230:	fba1 1203 	umull	r1, r2, r1, r3
 8002234:	1883      	adds	r3, r0, r2
 8002236:	461a      	mov	r2, r3
 8002238:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	0b6b      	lsrs	r3, r5, #13
 8002246:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800224a:	1374      	asrs	r4, r6, #13
 800224c:	fb03 f502 	mul.w	r5, r3, r2
 8002250:	fb01 f004 	mul.w	r0, r1, r4
 8002254:	4428      	add	r0, r5
 8002256:	fba1 1203 	umull	r1, r2, r1, r3
 800225a:	1883      	adds	r3, r0, r2
 800225c:	461a      	mov	r2, r3
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0e4b      	lsrs	r3, r1, #25
 8002268:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800226c:	1654      	asrs	r4, r2, #25
 800226e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002278:	b21b      	sxth	r3, r3
 800227a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	fb04 f102 	mul.w	r1, r4, r2
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	fb03 f202 	mul.w	r2, r3, r2
 800228a:	1888      	adds	r0, r1, r2
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	fba2 1203 	umull	r1, r2, r2, r3
 8002292:	1883      	adds	r3, r0, r2
 8002294:	461a      	mov	r2, r3
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	0ccb      	lsrs	r3, r1, #19
 80022a0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80022a4:	14d4      	asrs	r4, r2, #19
 80022a6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 80022aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022b2:	eb11 0803 	adds.w	r8, r1, r3
 80022b6:	eb42 0904 	adc.w	r9, r2, r4
 80022ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022be:	eb13 0508 	adds.w	r5, r3, r8
 80022c2:	eb44 0609 	adc.w	r6, r4, r9
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	0a29      	lsrs	r1, r5, #8
 80022d0:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80022d4:	1232      	asrs	r2, r6, #8
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80022dc:	b21d      	sxth	r5, r3
 80022de:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80022e2:	f04f 0800 	mov.w	r8, #0
 80022e6:	f04f 0900 	mov.w	r9, #0
 80022ea:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80022ee:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80022f2:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80022f6:	eb18 0301 	adds.w	r3, r8, r1
 80022fa:	eb49 0402 	adc.w	r4, r9, r2
 80022fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8002302:	693b      	ldr	r3, [r7, #16]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800230e <bmp280_reset>:

void bmp280_reset(BMP280* inst)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
	// soft reset
	BMP280_writeByte(inst, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8002316:	22b6      	movs	r2, #182	; 0xb6
 8002318:	21e0      	movs	r1, #224	; 0xe0
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fd40 	bl	8001da0 <BMP280_writeByte>
	delay(100);
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	f003 ff37 	bl	8006194 <HAL_Delay>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <bmp280_present>:

bool bmp280_present(BMP280* inst, uint8_t trials)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	70fb      	strb	r3, [r7, #3]
	// request and verify chip id
	uint8_t attempts = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
	do
	{
		bmp280_reset(inst);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffe5 	bl	800230e <bmp280_reset>
		uint8_t who[1] = { 0x00 };
 8002344:	2300      	movs	r3, #0
 8002346:	733b      	strb	r3, [r7, #12]
		BMP280_readBytes(inst, BMP280_REG_ID, who, 1);
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	2301      	movs	r3, #1
 800234e:	21d0      	movs	r1, #208	; 0xd0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fcff 	bl	8001d54 <BMP280_readBytes>
		if (who[0] == BMP280_CHIP_ID) return true;
 8002356:	7b3b      	ldrb	r3, [r7, #12]
 8002358:	2b58      	cmp	r3, #88	; 0x58
 800235a:	d101      	bne.n	8002360 <bmp280_present+0x32>
 800235c:	2301      	movs	r3, #1
 800235e:	e00e      	b.n	800237e <bmp280_present+0x50>
		else
		{
			attempts++;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	3301      	adds	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 8002366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236a:	f003 ff13 	bl	8006194 <HAL_Delay>
		}
	} while (attempts <= trials);
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	429a      	cmp	r2, r3
 8002374:	d9e3      	bls.n	800233e <bmp280_present+0x10>
	inst->active = false;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
	return false;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <bmp280_init>:

bool bmp280_init(BMP280* inst, BMP280_config* params)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[1];	// nasty temporary byte, used for everything
	inst->active = false;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	771a      	strb	r2, [r3, #28]
	inst->params = *params;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	3306      	adds	r3, #6
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	7912      	ldrb	r2, [r2, #4]
 80023a2:	711a      	strb	r2, [r3, #4]

	if (!bmp280_present(inst, 1)) return false;
 80023a4:	2101      	movs	r1, #1
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffc1 	bl	800232e <bmp280_present>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f083 0301 	eor.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <bmp280_init+0x36>
 80023b8:	2300      	movs	r3, #0
 80023ba:	e064      	b.n	8002486 <bmp280_init+0x100>
	bmp280_reset(inst);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ffa6 	bl	800230e <bmp280_reset>

	while (!(BMP280_readBytes(inst, BMP280_REG_STATUS, temp_data, 1) && (temp_data[0] & 0x01) == 0)); // wait until finished copying over the NVM data
 80023c2:	bf00      	nop
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	2301      	movs	r3, #1
 80023ca:	21f3      	movs	r1, #243	; 0xf3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fcc1 	bl	8001d54 <BMP280_readBytes>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f083 0301 	eor.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f2      	bne.n	80023c4 <bmp280_init+0x3e>
 80023de:	7b3b      	ldrb	r3, [r7, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ed      	bne.n	80023c4 <bmp280_init+0x3e>

	if (!read_calibration_data(inst)) return false;
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fd27 	bl	8001e3c <read_calibration_data>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <bmp280_init+0x78>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e043      	b.n	8002486 <bmp280_init+0x100>

	// Setting parameters
	temp_data[0] = (params->standby << 5) | (params->filter << 2);	// config byte
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	015b      	lsls	r3, r3, #5
 8002404:	b25a      	sxtb	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	b25b      	sxtb	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CONFIG, temp_data[0])) return false;
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	461a      	mov	r2, r3
 800241a:	21f5      	movs	r1, #245	; 0xf5
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fcbf 	bl	8001da0 <BMP280_writeByte>
 8002422:	4603      	mov	r3, r0
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <bmp280_init+0xac>
 800242e:	2300      	movs	r3, #0
 8002430:	e029      	b.n	8002486 <bmp280_init+0x100>

	if (params->mode == BMP280_MODE_FORCED) params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <bmp280_init+0xba>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
	temp_data[0] = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode); // ctrl byte
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	78db      	ldrb	r3, [r3, #3]
 8002444:	015b      	lsls	r3, r3, #5
 8002446:	b25a      	sxtb	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b25b      	sxtb	r3, r3
 8002450:	4313      	orrs	r3, r2
 8002452:	b25a      	sxtb	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b25b      	sxtb	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b25b      	sxtb	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CTRL, temp_data[0])) return false;
 8002462:	7b3b      	ldrb	r3, [r7, #12]
 8002464:	461a      	mov	r2, r3
 8002466:	21f4      	movs	r1, #244	; 0xf4
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fc99 	bl	8001da0 <BMP280_writeByte>
 800246e:	4603      	mov	r3, r0
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <bmp280_init+0xf8>
 800247a:	2300      	movs	r3, #0
 800247c:	e003      	b.n	8002486 <bmp280_init+0x100>

	inst->active = true;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]
	return true;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	size_t size = 6;
 8002498:	2306      	movs	r3, #6
 800249a:	61fb      	str	r3, [r7, #28]
	if (!BMP280_readBytes(inst, 0xf7, data, size)) return false;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	21f7      	movs	r1, #247	; 0xf7
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fc54 	bl	8001d54 <BMP280_readBytes>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <bmp280_update+0x2c>
 80024b8:	2300      	movs	r3, #0
 80024ba:	e065      	b.n	8002588 <bmp280_update+0xf8>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80024bc:	7b3b      	ldrb	r3, [r7, #12]
 80024be:	031a      	lsls	r2, r3, #12
 80024c0:	7b7b      	ldrb	r3, [r7, #13]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4313      	orrs	r3, r2
 80024c6:	7bba      	ldrb	r2, [r7, #14]
 80024c8:	0912      	lsrs	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	031a      	lsls	r2, r3, #12
 80024d4:	7c3b      	ldrb	r3, [r7, #16]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4313      	orrs	r3, r2
 80024da:	7c7a      	ldrb	r2, [r7, #17]
 80024dc:	0912      	lsrs	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

	int32_t fine_temp;
	inst->temperature = (float)(compensate_temperature(inst, adc_temp, &fine_temp)) / 100.0;
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	461a      	mov	r2, r3
 80024ea:	6979      	ldr	r1, [r7, #20]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fd2b 	bl	8001f48 <compensate_temperature>
 80024f2:	ee07 0a90 	vmov	s15, r0
 80024f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fa:	eddf 6a29 	vldr	s13, [pc, #164]	; 80025a0 <bmp280_update+0x110>
 80024fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->pressure = (float)(compensate_pressure(inst, adc_pressure, fine_temp)) / 256.0;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	461a      	mov	r2, r3
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fd53 	bl	8001fba <compensate_pressure>
 8002514:	ee07 0a90 	vmov	s15, r0
 8002518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80025a4 <bmp280_update+0x114>
 8002520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->altitude = 44330 * (1.0 - pow(inst->pressure / SEA_PRESSURE, 0.1903));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002530:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80025a8 <bmp280_update+0x118>
 8002534:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002538:	ee16 0a90 	vmov	r0, s13
 800253c:	f7fe f814 	bl	8000568 <__aeabi_f2d>
 8002540:	4603      	mov	r3, r0
 8002542:	460c      	mov	r4, r1
 8002544:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002590 <bmp280_update+0x100>
 8002548:	ec44 3b10 	vmov	d0, r3, r4
 800254c:	f018 fbb6 	bl	801acbc <pow>
 8002550:	ec54 3b10 	vmov	r3, r4, d0
 8002554:	461a      	mov	r2, r3
 8002556:	4623      	mov	r3, r4
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	4913      	ldr	r1, [pc, #76]	; (80025ac <bmp280_update+0x11c>)
 800255e:	f7fd fea3 	bl	80002a8 <__aeabi_dsub>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	4618      	mov	r0, r3
 8002568:	4621      	mov	r1, r4
 800256a:	a30b      	add	r3, pc, #44	; (adr r3, 8002598 <bmp280_update+0x108>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f852 	bl	8000618 <__aeabi_dmul>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	4618      	mov	r0, r3
 800257a:	4621      	mov	r1, r4
 800257c:	f7fe fb44 	bl	8000c08 <__aeabi_d2f>
 8002580:	4602      	mov	r2, r0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	615a      	str	r2, [r3, #20]

	return true;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	1a36e2eb 	.word	0x1a36e2eb
 8002594:	3fc85bc0 	.word	0x3fc85bc0
 8002598:	00000000 	.word	0x00000000
 800259c:	40e5a540 	.word	0x40e5a540
 80025a0:	42c80000 	.word	0x42c80000
 80025a4:	43800000 	.word	0x43800000
 80025a8:	447a8000 	.word	0x447a8000
 80025ac:	3ff00000 	.word	0x3ff00000

080025b0 <millis>:
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <millis+0x1c>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2258      	movs	r2, #88	; 0x58
 800270a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2258      	movs	r2, #88	; 0x58
 8002712:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2258      	movs	r2, #88	; 0x58
 800271a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2203      	movs	r2, #3
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f014 fbca 	bl	8016ec6 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3307      	adds	r3, #7
 8002736:	2214      	movs	r2, #20
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f014 fbc3 	bl	8016ec6 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	331b      	adds	r3, #27
 8002744:	2203      	movs	r2, #3
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f014 fbbc 	bl	8016ec6 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	331e      	adds	r3, #30
 8002752:	2214      	movs	r2, #20
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f014 fbb5 	bl	8016ec6 <memset>

	memset(inst->txtTXT, 0x00, 63);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3388      	adds	r3, #136	; 0x88
 8002760:	223f      	movs	r2, #63	; 0x3f
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f014 fbae 	bl	8016ec6 <memset>
	inst->txtTot = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <GPS_init+0x214>)
 8002786:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <GPS_init+0x218>)
 800278e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <GPS_init+0x21c>)
 8002796:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <GPS_init+0x220>)
 800279e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <GPS_init+0x224>)
 80027a6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <GPS_init+0x228>)
 80027ae:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <GPS_init+0x22c>)
 80027b6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <GPS_init+0x230>)
 80027be:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <GPS_init+0x234>)
 80027c6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <GPS_init+0x224>)
 80027ce:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <GPS_init+0x224>)
 80027d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

			}
		}
	}
	*/
	return true;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	0801d7f4 	.word	0x0801d7f4
 80027e8:	0801d7f8 	.word	0x0801d7f8
 80027ec:	0801d7fc 	.word	0x0801d7fc
 80027f0:	0801d800 	.word	0x0801d800
 80027f4:	0801d804 	.word	0x0801d804
 80027f8:	0801d808 	.word	0x0801d808
 80027fc:	0801d80c 	.word	0x0801d80c
 8002800:	0801d810 	.word	0x0801d810
 8002804:	0801d814 	.word	0x0801d814

08002808 <GPS_update>:

bool GPS_update(GPS* inst)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	if (GPS_newNMEAreceived(inst))
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 ff62 	bl	80036da <GPS_newNMEAreceived>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <GPS_update+0x32>
	{
		if (GPS_parse(inst, GPS_lastNMEA(inst))) inst->newData = true;
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 ff6a 	bl	80036f6 <GPS_lastNMEA>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f80c 	bl	8002844 <GPS_parse>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <GPS_update+0x32>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	}
}
 800283a:	bf00      	nop
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fb65 	bl	8002f20 <GPS_check>
 8002856:	4603      	mov	r3, r0
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <GPS_parse+0x22>
 8002862:	2300      	movs	r3, #0
 8002864:	e355      	b.n	8002f12 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f015 fa5e 	bl	8017d2e <strchr>
 8002872:	4603      	mov	r3, r0
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3307      	adds	r3, #7
 800287c:	49a5      	ldr	r1, [pc, #660]	; (8002b14 <GPS_parse+0x2d0>)
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fca6 	bl	80001d0 <strcmp>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80e6 	bne.w	8002a58 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fcc6 	bl	8003220 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f015 fa49 	bl	8017d2e <strchr>
 800289c:	4603      	mov	r3, r0
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fd0b 	bl	80032c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	6978      	ldr	r0, [r7, #20]
 80028ae:	f015 fa3e 	bl	8017d2e <strchr>
 80028b2:	4603      	mov	r3, r0
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fdb6 	bl	800342c <GPS_parseLatDir>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <GPS_parse+0x8c>
 80028cc:	2300      	movs	r3, #0
 80028ce:	e320      	b.n	8002f12 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f015 fa2b 	bl	8017d2e <strchr>
 80028d8:	4603      	mov	r3, r0
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fde3 	bl	80034ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	6978      	ldr	r0, [r7, #20]
 80028ea:	f015 fa20 	bl	8017d2e <strchr>
 80028ee:	4603      	mov	r3, r0
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fe80 	bl	80035fc <GPS_parseLonDir>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <GPS_parse+0xc8>
 8002908:	2300      	movs	r3, #0
 800290a:	e302      	b.n	8002f12 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f015 fa0d 	bl	8017d2e <strchr>
 8002914:	4603      	mov	r3, r0
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 800291a:	6979      	ldr	r1, [r7, #20]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fc66 	bl	80031ee <GPS_isEmpty>
 8002922:	4603      	mov	r3, r0
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01b      	beq.n	8002966 <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f014 fa7c 	bl	8016e2c <atoi>
 8002934:	4603      	mov	r3, r0
 8002936:	b2da      	uxtb	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800295c:	e003      	b.n	8002966 <GPS_parse+0x122>
			}
			else inst->fix = false;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f015 f9e0 	bl	8017d2e <strchr>
 800296e:	4603      	mov	r3, r0
 8002970:	3301      	adds	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002974:	6979      	ldr	r1, [r7, #20]
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fc39 	bl	80031ee <GPS_isEmpty>
 800297c:	4603      	mov	r3, r0
 800297e:	f083 0301 	eor.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <GPS_parse+0x154>
 8002988:	6978      	ldr	r0, [r7, #20]
 800298a:	f014 fa4f 	bl	8016e2c <atoi>
 800298e:	4603      	mov	r3, r0
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f015 f9c7 	bl	8017d2e <strchr>
 80029a0:	4603      	mov	r3, r0
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fc20 	bl	80031ee <GPS_isEmpty>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <GPS_parse+0x18e>
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f014 fa33 	bl	8016e26 <atof>
 80029c0:	ec54 3b10 	vmov	r3, r4, d0
 80029c4:	4618      	mov	r0, r3
 80029c6:	4621      	mov	r1, r4
 80029c8:	f7fe f91e 	bl	8000c08 <__aeabi_d2f>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	6978      	ldr	r0, [r7, #20]
 80029d6:	f015 f9aa 	bl	8017d2e <strchr>
 80029da:	4603      	mov	r3, r0
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 80029e0:	6979      	ldr	r1, [r7, #20]
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fc03 	bl	80031ee <GPS_isEmpty>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <GPS_parse+0x1c8>
 80029f4:	6978      	ldr	r0, [r7, #20]
 80029f6:	f014 fa16 	bl	8016e26 <atof>
 80029fa:	ec54 3b10 	vmov	r3, r4, d0
 80029fe:	4618      	mov	r0, r3
 8002a00:	4621      	mov	r1, r4
 8002a02:	f7fe f901 	bl	8000c08 <__aeabi_d2f>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f015 f98d 	bl	8017d2e <strchr>
 8002a14:	4603      	mov	r3, r0
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f015 f986 	bl	8017d2e <strchr>
 8002a22:	4603      	mov	r3, r0
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fbdf 	bl	80031ee <GPS_isEmpty>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f083 0301 	eor.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8251 	beq.w	8002ee0 <GPS_parse+0x69c>
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f014 f9f1 	bl	8016e26 <atof>
 8002a44:	ec54 3b10 	vmov	r3, r4, d0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	f7fe f8dc 	bl	8000c08 <__aeabi_d2f>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
 8002a56:	e243      	b.n	8002ee0 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3307      	adds	r3, #7
 8002a5c:	492e      	ldr	r1, [pc, #184]	; (8002b18 <GPS_parse+0x2d4>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fbb6 	bl	80001d0 <strcmp>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80e3 	bne.w	8002c32 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002a6c:	6979      	ldr	r1, [r7, #20]
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fbd6 	bl	8003220 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f015 f959 	bl	8017d2e <strchr>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fe02 	bl	800368e <GPS_parseFix>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <GPS_parse+0x256>
 8002a96:	2300      	movs	r3, #0
 8002a98:	e23b      	b.n	8002f12 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f015 f946 	bl	8017d2e <strchr>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fc08 	bl	80032c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f015 f93b 	bl	8017d2e <strchr>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fcb3 	bl	800342c <GPS_parseLatDir>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <GPS_parse+0x292>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e21d      	b.n	8002f12 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f015 f928 	bl	8017d2e <strchr>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fce0 	bl	80034ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f015 f91d 	bl	8017d2e <strchr>
 8002af4:	4603      	mov	r3, r0
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002afa:	6979      	ldr	r1, [r7, #20]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fd7d 	bl	80035fc <GPS_parseLonDir>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <GPS_parse+0x2d8>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e1ff      	b.n	8002f12 <GPS_parse+0x6ce>
 8002b12:	bf00      	nop
 8002b14:	0801d808 	.word	0x0801d808
 8002b18:	0801d814 	.word	0x0801d814

		// speed
		p = strchr(p, ',') + 1;
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f015 f905 	bl	8017d2e <strchr>
 8002b24:	4603      	mov	r3, r0
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fb5e 	bl	80031ee <GPS_isEmpty>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f083 0301 	eor.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <GPS_parse+0x312>
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f014 f971 	bl	8016e26 <atof>
 8002b44:	ec54 3b10 	vmov	r3, r4, d0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	f7fe f85c 	bl	8000c08 <__aeabi_d2f>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	6978      	ldr	r0, [r7, #20]
 8002b5a:	f015 f8e8 	bl	8017d2e <strchr>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fb41 	bl	80031ee <GPS_isEmpty>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <GPS_parse+0x34c>
 8002b78:	6978      	ldr	r0, [r7, #20]
 8002b7a:	f014 f954 	bl	8016e26 <atof>
 8002b7e:	ec54 3b10 	vmov	r3, r4, d0
 8002b82:	4618      	mov	r0, r3
 8002b84:	4621      	mov	r1, r4
 8002b86:	f7fe f83f 	bl	8000c08 <__aeabi_d2f>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f015 f8cb 	bl	8017d2e <strchr>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002b9e:	6979      	ldr	r1, [r7, #20]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb24 	bl	80031ee <GPS_isEmpty>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f083 0301 	eor.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8196 	beq.w	8002ee0 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f014 f936 	bl	8016e26 <atof>
 8002bba:	ec54 3b10 	vmov	r3, r4, d0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	f7fe f821 	bl	8000c08 <__aeabi_d2f>
 8002bc6:	ee07 0a90 	vmov	s15, r0
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	ee17 3a90 	vmov	r3, s15
 8002bd2:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a8b      	ldr	r2, [pc, #556]	; (8002e04 <GPS_parse+0x5c0>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	0b5b      	lsrs	r3, r3, #13
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4b86      	ldr	r3, [pc, #536]	; (8002e04 <GPS_parse+0x5c0>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	0b5b      	lsrs	r3, r3, #13
 8002bf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a83      	ldr	r2, [pc, #524]	; (8002e08 <GPS_parse+0x5c4>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <GPS_parse+0x5c4>)
 8002c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2164      	movs	r1, #100	; 0x64
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002c30:	e156      	b.n	8002ee0 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3307      	adds	r3, #7
 8002c36:	4975      	ldr	r1, [pc, #468]	; (8002e0c <GPS_parse+0x5c8>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fac9 	bl	80001d0 <strcmp>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d153      	bne.n	8002cec <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb3a 	bl	80032c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f015 f86d 	bl	8017d2e <strchr>
 8002c54:	4603      	mov	r3, r0
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fbe5 	bl	800342c <GPS_parseLatDir>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f083 0301 	eor.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <GPS_parse+0x42e>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e14f      	b.n	8002f12 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	6978      	ldr	r0, [r7, #20]
 8002c76:	f015 f85a 	bl	8017d2e <strchr>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002c80:	6979      	ldr	r1, [r7, #20]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fc12 	bl	80034ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f015 f84f 	bl	8017d2e <strchr>
 8002c90:	4603      	mov	r3, r0
 8002c92:	3301      	adds	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fcaf 	bl	80035fc <GPS_parseLonDir>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f083 0301 	eor.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <GPS_parse+0x46a>
 8002caa:	2300      	movs	r3, #0
 8002cac:	e131      	b.n	8002f12 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f015 f83c 	bl	8017d2e <strchr>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002cbc:	6979      	ldr	r1, [r7, #20]
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 faae 	bl	8003220 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f015 f831 	bl	8017d2e <strchr>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002cd2:	6979      	ldr	r1, [r7, #20]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fcda 	bl	800368e <GPS_parseFix>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80fc 	beq.w	8002ee0 <GPS_parse+0x69c>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e112      	b.n	8002f12 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3307      	adds	r3, #7
 8002cf0:	4947      	ldr	r1, [pc, #284]	; (8002e10 <GPS_parse+0x5cc>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fa6c 	bl	80001d0 <strcmp>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 808a 	bne.w	8002e14 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f015 f813 	bl	8017d2e <strchr>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fa6c 	bl	80031ee <GPS_isEmpty>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <GPS_parse+0x4ee>
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f014 f882 	bl	8016e2c <atoi>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e009      	b.n	8002d4c <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f014 fff7 	bl	8017d2e <strchr>
 8002d40:	4603      	mov	r3, r0
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	ddf2      	ble.n	8002d38 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f014 ffea 	bl	8017d2e <strchr>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002d60:	6979      	ldr	r1, [r7, #20]
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa43 	bl	80031ee <GPS_isEmpty>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <GPS_parse+0x548>
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f014 f856 	bl	8016e26 <atof>
 8002d7a:	ec54 3b10 	vmov	r3, r4, d0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4621      	mov	r1, r4
 8002d82:	f7fd ff41 	bl	8000c08 <__aeabi_d2f>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f014 ffcd 	bl	8017d2e <strchr>
 8002d94:	4603      	mov	r3, r0
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa26 	bl	80031ee <GPS_isEmpty>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f083 0301 	eor.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <GPS_parse+0x582>
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f014 f839 	bl	8016e26 <atof>
 8002db4:	ec54 3b10 	vmov	r3, r4, d0
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	f7fd ff24 	bl	8000c08 <__aeabi_d2f>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	6978      	ldr	r0, [r7, #20]
 8002dca:	f014 ffb0 	bl	8017d2e <strchr>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 8002dd4:	6979      	ldr	r1, [r7, #20]
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa09 	bl	80031ee <GPS_isEmpty>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d07b      	beq.n	8002ee0 <GPS_parse+0x69c>
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f014 f81c 	bl	8016e26 <atof>
 8002dee:	ec54 3b10 	vmov	r3, r4, d0
 8002df2:	4618      	mov	r0, r3
 8002df4:	4621      	mov	r1, r4
 8002df6:	f7fd ff07 	bl	8000c08 <__aeabi_d2f>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	66da      	str	r2, [r3, #108]	; 0x6c
 8002e00:	e06e      	b.n	8002ee0 <GPS_parse+0x69c>
 8002e02:	bf00      	nop
 8002e04:	d1b71759 	.word	0xd1b71759
 8002e08:	51eb851f 	.word	0x51eb851f
 8002e0c:	0801d80c 	.word	0x0801d80c
 8002e10:	0801d810 	.word	0x0801d810
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3307      	adds	r3, #7
 8002e18:	4940      	ldr	r1, [pc, #256]	; (8002f1c <GPS_parse+0x6d8>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd f9d8 	bl	80001d0 <strcmp>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d15a      	bne.n	8002edc <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 8002e26:	6979      	ldr	r1, [r7, #20]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f9e0 	bl	80031ee <GPS_isEmpty>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f083 0301 	eor.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <GPS_parse+0x604>
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f013 fff6 	bl	8016e2c <atoi>
 8002e40:	4602      	mov	r2, r0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f014 ff6f 	bl	8017d2e <strchr>
 8002e50:	4603      	mov	r3, r0
 8002e52:	3301      	adds	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9c8 	bl	80031ee <GPS_isEmpty>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <GPS_parse+0x634>
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f013 ffde 	bl	8016e2c <atoi>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f014 ff57 	bl	8017d2e <strchr>
 8002e80:	4603      	mov	r3, r0
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9b0 	bl	80031ee <GPS_isEmpty>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f083 0301 	eor.w	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <GPS_parse+0x664>
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f013 ffc6 	bl	8016e2c <atoi>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f014 ff3f 	bl	8017d2e <strchr>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f998 	bl	80031ee <GPS_isEmpty>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <GPS_parse+0x69c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8002ed0:	233d      	movs	r3, #61	; 0x3d
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f923 	bl	8003120 <GPS_parseStr>
 8002eda:	e001      	b.n	8002ee0 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e018      	b.n	8002f12 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f103 021b 	add.w	r2, r3, #27
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f014 ff2b 	bl	8017d48 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f103 021e 	add.w	r2, r3, #30
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3307      	adds	r3, #7
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f014 ff22 	bl	8017d48 <strcpy>
	inst->lastUpdate = millis();
 8002f04:	f7ff fb54 	bl	80025b0 <millis>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0801d81c 	.word	0x0801d81c

08002f20 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b24      	cmp	r3, #36	; 0x24
 8002f36:	d001      	beq.n	8002f3c <GPS_check+0x1c>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e0ad      	b.n	8003098 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 8002f4a:	e002      	b.n	8002f52 <GPS_check+0x32>
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	3301      	adds	r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f8      	bne.n	8002f4c <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 8002f5a:	e002      	b.n	8002f62 <GPS_check+0x42>
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b2a      	cmp	r3, #42	; 0x2a
 8002f68:	d003      	beq.n	8002f72 <GPS_check+0x52>
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d8f4      	bhi.n	8002f5c <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b2a      	cmp	r3, #42	; 0x2a
 8002f78:	d001      	beq.n	8002f7e <GPS_check+0x5e>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e08c      	b.n	8003098 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	3301      	adds	r3, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fbc6 	bl	8003718 <GPS_parseHex>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	3302      	adds	r3, #2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fbbb 	bl	8003718 <GPS_parseHex>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fa8:	4413      	add	r3, r2
 8002faa:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e008      	b.n	8002fca <GPS_check+0xaa>
		{
			sum ^=* p1;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fc0:	4053      	eors	r3, r2
 8002fc2:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d3f2      	bcc.n	8002fb8 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 8002fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <GPS_check+0xbc>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e05d      	b.n	8003098 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6979      	ldr	r1, [r7, #20]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f852 	bl	80030a0 <GPS_tokenOnList>
 8002ffc:	6138      	str	r0, [r7, #16]
	if (src)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01f      	beq.n	8003044 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	4618      	mov	r0, r3
 800300c:	f014 fe9c 	bl	8017d48 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f103 020a 	add.w	r2, r3, #10
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 800301c:	6938      	ldr	r0, [r7, #16]
 800301e:	f7fd f8e1 	bl	80001e4 <strlen>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	4413      	add	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003030:	461a      	mov	r2, r3
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f833 	bl	80030a0 <GPS_tokenOnList>
 800303a:	60f8      	str	r0, [r7, #12]
	if (snc)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00f      	beq.n	8003062 <GPS_check+0x142>
 8003042:	e001      	b.n	8003048 <GPS_check+0x128>
	else return false;
 8003044:	2300      	movs	r3, #0
 8003046:	e027      	b.n	8003098 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3307      	adds	r3, #7
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f014 fe7a 	bl	8017d48 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e019      	b.n	8003096 <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003068:	461a      	mov	r2, r3
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f817 	bl	80030a0 <GPS_tokenOnList>
 8003072:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3307      	adds	r3, #7
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	4618      	mov	r0, r3
 8003082:	f014 fe61 	bl	8017d48 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f103 0214 	add.w	r2, r3, #20
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
			return false;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3728      	adds	r7, #40	; 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80030b0:	e01e      	b.n	80030f0 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	681c      	ldr	r4, [r3, #0]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd f88c 	bl	80001e4 <strlen>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4620      	mov	r0, r4
 80030d4:	f014 fe40 	bl	8017d58 <strncmp>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <GPS_tokenOnList+0x4a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	e014      	b.n	8003114 <GPS_tokenOnList+0x74>
		i++;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2202      	movs	r2, #2
 80030fc:	4907      	ldr	r1, [pc, #28]	; (800311c <GPS_tokenOnList+0x7c>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f014 fe2a 	bl	8017d58 <strncmp>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <GPS_tokenOnList+0x72>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003110:	dbcf      	blt.n	80030b2 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	0801d820 	.word	0x0801d820

08003120 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f014 fdfc 	bl	8017d2e <strchr>
 8003136:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d018      	beq.n	8003174 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4293      	cmp	r3, r2
 8003156:	bfa8      	it	ge
 8003158:	4613      	movge	r3, r2
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	461a      	mov	r2, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68b8      	ldr	r0, [r7, #8]
 8003164:	f014 fe0a 	bl	8017d7c <strncpy>
		buff[len] = 0;
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e037      	b.n	80031e4 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003174:	212a      	movs	r1, #42	; 0x2a
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f014 fdd9 	bl	8017d2e <strchr>
 800317c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4293      	cmp	r3, r2
 8003198:	bfa8      	it	ge
 800319a:	4613      	movge	r3, r2
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	461a      	mov	r2, r3
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	68b8      	ldr	r0, [r7, #8]
 80031a6:	f014 fde9 	bl	8017d7c <strncpy>
			buff[e - p] = 0;
 80031aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e013      	b.n	80031e4 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd f811 	bl	80001e4 <strlen>
 80031c2:	4603      	mov	r3, r0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bfa8      	it	ge
 80031d4:	4613      	movge	r3, r2
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	461a      	mov	r2, r3
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	68b8      	ldr	r0, [r7, #8]
 80031e0:	f014 fdcc 	bl	8017d7c <strncpy>
		}
	}
	return buff;
 80031e4:	68bb      	ldr	r3, [r7, #8]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3730      	adds	r7, #48	; 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b2c      	cmp	r3, #44	; 0x2c
 80031fe:	d008      	beq.n	8003212 <GPS_isEmpty+0x24>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b2a      	cmp	r3, #42	; 0x2a
 8003206:	d004      	beq.n	8003212 <GPS_isEmpty+0x24>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <GPS_isEmpty+0x24>
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <GPS_isEmpty+0x26>
	else return true;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f013 fe02 	bl	8016e34 <atol>
 8003230:	4603      	mov	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <GPS_parseTime+0x94>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0b5b      	lsrs	r3, r3, #13
 800323e:	b2da      	uxtb	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <GPS_parseTime+0x94>)
 800324a:	fba3 1302 	umull	r1, r3, r3, r2
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f242 7110 	movw	r1, #10000	; 0x2710
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <GPS_parseTime+0x98>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <GPS_parseTime+0x98>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	b2da      	uxtb	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003284:	212e      	movs	r1, #46	; 0x2e
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	f014 fd51 	bl	8017d2e <strchr>
 800328c:	4603      	mov	r3, r0
 800328e:	3301      	adds	r3, #1
 8003290:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f013 fdca 	bl	8016e2c <atoi>
 8003298:	4603      	mov	r3, r0
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	d1b71759 	.word	0xd1b71759
 80032b8:	51eb851f 	.word	0x51eb851f
 80032bc:	00000000 	.word	0x00000000

080032c0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff8e 	bl	80031ee <GPS_isEmpty>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8092 	beq.w	8003404 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2202      	movs	r2, #2
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f014 fd47 	bl	8017d7c <strncpy>
		p += 2;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3302      	adds	r3, #2
 80032f2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80032f4:	2300      	movs	r3, #0
 80032f6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f013 fd99 	bl	8016e34 <atol>
 8003302:	4602      	mov	r2, r0
 8003304:	4b44      	ldr	r3, [pc, #272]	; (8003418 <GPS_parseLat+0x158>)
 8003306:	fb03 f302 	mul.w	r3, r3, r2
 800330a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800330c:	f107 030c 	add.w	r3, r7, #12
 8003310:	2202      	movs	r2, #2
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f014 fd31 	bl	8017d7c <strncpy>
		p += 3;										// skip decimal point
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3303      	adds	r3, #3
 800331e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	3302      	adds	r3, #2
 8003326:	2204      	movs	r2, #4
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f014 fd26 	bl	8017d7c <strncpy>
		degreebuff[6] = '\0';
 8003330:	2300      	movs	r3, #0
 8003332:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	4618      	mov	r0, r3
 800333a:	f013 fd7b 	bl	8016e34 <atol>
 800333e:	4602      	mov	r2, r0
 8003340:	2332      	movs	r3, #50	; 0x32
 8003342:	fb03 f302 	mul.w	r3, r3, r2
 8003346:	4a35      	ldr	r2, [pc, #212]	; (800341c <GPS_parseLat+0x15c>)
 8003348:	fb82 1203 	smull	r1, r2, r2, r3
 800334c:	17db      	asrs	r3, r3, #31
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4a30      	ldr	r2, [pc, #192]	; (8003420 <GPS_parseLat+0x160>)
 8003360:	fb82 1203 	smull	r1, r2, r2, r3
 8003364:	1352      	asrs	r2, r2, #13
 8003366:	17db      	asrs	r3, r3, #31
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f8ea 	bl	8000544 <__aeabi_i2d>
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
 8003374:	69b8      	ldr	r0, [r7, #24]
 8003376:	f7fd f8e5 	bl	8000544 <__aeabi_i2d>
 800337a:	a325      	add	r3, pc, #148	; (adr r3, 8003410 <GPS_parseLat+0x150>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f7fd f94a 	bl	8000618 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff8e 	bl	80002ac <__adddf3>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	4618      	mov	r0, r3
 8003396:	4621      	mov	r1, r4
 8003398:	f7fd fc36 	bl	8000c08 <__aeabi_d2f>
 800339c:	4602      	mov	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80033ae:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003424 <GPS_parseLat+0x164>
 80033b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ba:	ee17 2a90 	vmov	r2, s15
 80033be:	2364      	movs	r3, #100	; 0x64
 80033c0:	fb03 f302 	mul.w	r3, r3, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033d0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003428 <GPS_parseLat+0x168>
 80033d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80033ea:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003424 <GPS_parseLat+0x164>
 80033ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003404:	bf00      	nop
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bdb0      	pop	{r4, r5, r7, pc}
 800340c:	f3af 8000 	nop.w
 8003410:	7110e454 	.word	0x7110e454
 8003414:	3ed92a73 	.word	0x3ed92a73
 8003418:	00989680 	.word	0x00989680
 800341c:	55555556 	.word	0x55555556
 8003420:	14f8b589 	.word	0x14f8b589
 8003424:	42c80000 	.word	0x42c80000
 8003428:	42700000 	.word	0x42700000

0800342c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b53      	cmp	r3, #83	; 0x53
 800343c:	d11c      	bne.n	8003478 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2253      	movs	r2, #83	; 0x53
 8003442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd f88c 	bl	8000568 <__aeabi_f2d>
 8003450:	4603      	mov	r3, r0
 8003452:	460c      	mov	r4, r1
 8003454:	4618      	mov	r0, r3
 8003456:	4621      	mov	r1, r4
 8003458:	f7fd fbd6 	bl	8000c08 <__aeabi_d2f>
 800345c:	4603      	mov	r3, r0
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef1 7a67 	vneg.f32	s15, s15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	425a      	negs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
 8003476:	e013      	b.n	80034a0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b4e      	cmp	r3, #78	; 0x4e
 800347e:	d104      	bne.n	800348a <GPS_parseLatDir+0x5e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	224e      	movs	r2, #78	; 0x4e
 8003484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003488:	e00a      	b.n	80034a0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b2c      	cmp	r3, #44	; 0x2c
 8003490:	d104      	bne.n	800349c <GPS_parseLatDir+0x70>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800349a:	e001      	b.n	80034a0 <GPS_parseLatDir+0x74>
	else return false;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <GPS_parseLatDir+0x76>
	
	return true;
 80034a0:	2301      	movs	r3, #1
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
	...

080034ac <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fe98 	bl	80031ee <GPS_isEmpty>
 80034be:	4603      	mov	r3, r0
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8088 	beq.w	80035dc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2203      	movs	r2, #3
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f014 fc51 	bl	8017d7c <strncpy>
		p += 3;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	3303      	adds	r3, #3
 80034de:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4618      	mov	r0, r3
 80034ea:	f013 fca3 	bl	8016e34 <atol>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b3c      	ldr	r3, [pc, #240]	; (80035e4 <GPS_parseLon+0x138>)
 80034f2:	fb03 f302 	mul.w	r3, r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2202      	movs	r2, #2
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f014 fc3b 	bl	8017d7c <strncpy>
		p += 3;										// skip decimal point
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	3303      	adds	r3, #3
 800350a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	3302      	adds	r3, #2
 8003512:	2204      	movs	r2, #4
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f014 fc30 	bl	8017d7c <strncpy>
		degreebuff[6] = '\0';
 800351c:	2300      	movs	r3, #0
 800351e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	4618      	mov	r0, r3
 8003526:	f013 fc85 	bl	8016e34 <atol>
 800352a:	4602      	mov	r2, r0
 800352c:	2332      	movs	r3, #50	; 0x32
 800352e:	fb03 f302 	mul.w	r3, r3, r2
 8003532:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <GPS_parseLon+0x13c>)
 8003534:	fb82 1203 	smull	r1, r2, r2, r3
 8003538:	17db      	asrs	r3, r3, #31
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <GPS_parseLon+0x140>)
 800354c:	fb82 1203 	smull	r1, r2, r2, r3
 8003550:	1352      	asrs	r2, r2, #13
 8003552:	17db      	asrs	r3, r3, #31
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003568:	eddf 6a21 	vldr	s13, [pc, #132]	; 80035f0 <GPS_parseLon+0x144>
 800356c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003586:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80035f4 <GPS_parseLon+0x148>
 800358a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003592:	ee17 2a90 	vmov	r2, s15
 8003596:	2364      	movs	r3, #100	; 0x64
 8003598:	fb03 f302 	mul.w	r3, r3, r2
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80035f8 <GPS_parseLon+0x14c>
 80035ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80035c2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80035f4 <GPS_parseLon+0x148>
 80035c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80035dc:	bf00      	nop
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00989680 	.word	0x00989680
 80035e8:	55555556 	.word	0x55555556
 80035ec:	14f8b589 	.word	0x14f8b589
 80035f0:	36c9539c 	.word	0x36c9539c
 80035f4:	42c80000 	.word	0x42c80000
 80035f8:	42700000 	.word	0x42700000

080035fc <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fdf0 	bl	80031ee <GPS_isEmpty>
 800360e:	4603      	mov	r3, r0
 8003610:	f083 0301 	eor.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d034      	beq.n	8003684 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b57      	cmp	r3, #87	; 0x57
 8003620:	d11c      	bne.n	800365c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2257      	movs	r2, #87	; 0x57
 8003626:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc ff9a 	bl	8000568 <__aeabi_f2d>
 8003634:	4603      	mov	r3, r0
 8003636:	460c      	mov	r4, r1
 8003638:	4618      	mov	r0, r3
 800363a:	4621      	mov	r1, r4
 800363c:	f7fd fae4 	bl	8000c08 <__aeabi_d2f>
 8003640:	4603      	mov	r3, r0
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef1 7a67 	vneg.f32	s15, s15
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	425a      	negs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	649a      	str	r2, [r3, #72]	; 0x48
 800365a:	e013      	b.n	8003684 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b45      	cmp	r3, #69	; 0x45
 8003662:	d104      	bne.n	800366e <GPS_parseLonDir+0x72>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2245      	movs	r2, #69	; 0x45
 8003668:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800366c:	e00a      	b.n	8003684 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b2c      	cmp	r3, #44	; 0x2c
 8003674:	d104      	bne.n	8003680 <GPS_parseLonDir+0x84>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800367e:	e001      	b.n	8003684 <GPS_parseLonDir+0x88>
		else return false;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bd90      	pop	{r4, r7, pc}

0800368e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b41      	cmp	r3, #65	; 0x41
 800369e:	d10a      	bne.n	80036b6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80036b4:	e00a      	b.n	80036cc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b56      	cmp	r3, #86	; 0x56
 80036bc:	d104      	bne.n	80036c8 <GPS_parseFix+0x3a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80036c6:	e001      	b.n	80036cc <GPS_parseFix+0x3e>
	else return false;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <GPS_parseFix+0x40>
	return true;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	2b2f      	cmp	r3, #47	; 0x2f
 8003728:	d801      	bhi.n	800372e <GPS_parseHex+0x16>
 800372a:	2300      	movs	r3, #0
 800372c:	e013      	b.n	8003756 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	2b39      	cmp	r3, #57	; 0x39
 8003732:	d803      	bhi.n	800373c <GPS_parseHex+0x24>
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	3b30      	subs	r3, #48	; 0x30
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e00c      	b.n	8003756 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d801      	bhi.n	8003746 <GPS_parseHex+0x2e>
 8003742:	2300      	movs	r3, #0
 8003744:	e007      	b.n	8003756 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	2b46      	cmp	r3, #70	; 0x46
 800374a:	d803      	bhi.n	8003754 <GPS_parseHex+0x3c>
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	3b37      	subs	r3, #55	; 0x37
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e000      	b.n	8003756 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
 8003766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 8003778:	b40f      	push	{r0, r1, r2, r3}
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
	if (usbPresent)
 8003780:	4b29      	ldr	r3, [pc, #164]	; (8003828 <println+0xb0>)
 8003782:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003786:	2b03      	cmp	r3, #3
 8003788:	d145      	bne.n	8003816 <println+0x9e>
	{
		writePin(LEDD, HIGH);
 800378a:	2201      	movs	r2, #1
 800378c:	2108      	movs	r1, #8
 800378e:	4827      	ldr	r0, [pc, #156]	; (800382c <println+0xb4>)
 8003790:	f003 fb7e 	bl	8006e90 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	69b9      	ldr	r1, [r7, #24]
 800379e:	4824      	ldr	r0, [pc, #144]	; (8003830 <println+0xb8>)
 80037a0:	f015 f9f0 	bl	8018b84 <vsiprintf>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <println+0xbc>)
 80037aa:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <println+0xbc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <println+0xb8>)
 80037b2:	210d      	movs	r1, #13
 80037b4:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 80037b6:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <println+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <println+0xb8>)
 80037be:	210a      	movs	r1, #10
 80037c0:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <println+0xbc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3302      	adds	r3, #2
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <println+0xb8>)
 80037ca:	2100      	movs	r1, #0
 80037cc:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <println+0xbc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3303      	adds	r3, #3
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <println+0xbc>)
 80037d6:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 80037d8:	f7ff ffc3 	bl	8003762 <micros>
 80037dc:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <println+0xbc>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	3346      	adds	r3, #70	; 0x46
 80037ec:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80037ee:	e001      	b.n	80037f4 <println+0x7c>
		{
			if (micros() - printStart > timeout && false)
 80037f0:	f7ff ffb7 	bl	8003762 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <println+0xbc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4619      	mov	r1, r3
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <println+0xb8>)
 80037fe:	f012 feb5 	bl	801656c <CDC_Transmit_FS>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d0f3      	beq.n	80037f0 <println+0x78>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 8003808:	2200      	movs	r2, #0
 800380a:	2108      	movs	r1, #8
 800380c:	4807      	ldr	r0, [pc, #28]	; (800382c <println+0xb4>)
 800380e:	f003 fb3f 	bl	8006e90 <HAL_GPIO_WritePin>
		return true;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <println+0xa0>
	}
	return false;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003822:	b004      	add	sp, #16
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20001538 	.word	0x20001538
 800382c:	40020800 	.word	0x40020800
 8003830:	20000964 	.word	0x20000964
 8003834:	20000960 	.word	0x20000960

08003838 <MPU9250_writeByte>:
#include "stm32f4xx_hal_i2c.h"

// #################### Low level communication ####################

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af04      	add	r7, sp, #16
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
 8003844:	4613      	mov	r3, r2
 8003846:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	791b      	ldrb	r3, [r3, #4]
 8003850:	b299      	uxth	r1, r3
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	b29a      	uxth	r2, r3
 8003856:	2302      	movs	r3, #2
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	2301      	movs	r3, #1
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	1cbb      	adds	r3, r7, #2
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2301      	movs	r3, #1
 8003864:	f003 fc56 	bl	8007114 <HAL_I2C_Mem_Write>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af04      	add	r7, sp, #16
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	791b      	ldrb	r3, [r3, #4]
 8003884:	b299      	uxth	r1, r3
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	b29a      	uxth	r2, r3
 800388a:	2302      	movs	r3, #2
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	2301      	movs	r3, #1
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2301      	movs	r3, #1
 800389a:	f003 fd35 	bl	8007308 <HAL_I2C_Mem_Read>
	return (char)data[0];
 800389e:	7b3b      	ldrb	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b08f      	sub	sp, #60	; 0x3c
 80038ac:	af04      	add	r7, sp, #16
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	72fb      	strb	r3, [r7, #11]
 80038b6:	4613      	mov	r3, r2
 80038b8:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 2);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	791b      	ldrb	r3, [r3, #4]
 80038c2:	b299      	uxth	r1, r3
 80038c4:	7afb      	ldrb	r3, [r7, #11]
 80038c6:	b29c      	uxth	r4, r3
 80038c8:	7abb      	ldrb	r3, [r7, #10]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2202      	movs	r2, #2
 80038ce:	9202      	str	r2, [sp, #8]
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	4622      	mov	r2, r4
 80038dc:	f003 fd14 	bl	8007308 <HAL_I2C_Mem_Read>

	int ii = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
 80038e8:	e00b      	b.n	8003902 <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	f107 0114 	add.w	r1, r7, #20
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	440a      	add	r2, r1
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	3301      	adds	r3, #1
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	7abb      	ldrb	r3, [r7, #10]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	429a      	cmp	r2, r3
 8003908:	dbef      	blt.n	80038ea <MPU9250_readBytes+0x42>
	}
}
 800390a:	bf00      	nop
 800390c:	372c      	adds	r7, #44	; 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}

08003912 <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af04      	add	r7, sp, #16
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
 800391e:	4613      	mov	r3, r2
 8003920:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 2);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	795b      	ldrb	r3, [r3, #5]
 800392a:	b299      	uxth	r1, r3
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	b29a      	uxth	r2, r3
 8003930:	2302      	movs	r3, #2
 8003932:	9302      	str	r3, [sp, #8]
 8003934:	2301      	movs	r3, #1
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	1cbb      	adds	r3, r7, #2
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2301      	movs	r3, #1
 800393e:	f003 fbe9 	bl	8007114 <HAL_I2C_Mem_Write>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af04      	add	r7, sp, #16
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 2);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	795b      	ldrb	r3, [r3, #5]
 800395e:	b299      	uxth	r1, r3
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	b29a      	uxth	r2, r3
 8003964:	2302      	movs	r3, #2
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	2301      	movs	r3, #1
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2301      	movs	r3, #1
 8003974:	f003 fcc8 	bl	8007308 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003978:	7b3b      	ldrb	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003982:	b590      	push	{r4, r7, lr}
 8003984:	b08f      	sub	sp, #60	; 0x3c
 8003986:	af04      	add	r7, sp, #16
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	72fb      	strb	r3, [r7, #11]
 8003990:	4613      	mov	r3, r2
 8003992:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 2);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	795b      	ldrb	r3, [r3, #5]
 800399c:	b299      	uxth	r1, r3
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	7abb      	ldrb	r3, [r7, #10]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2202      	movs	r2, #2
 80039a8:	9202      	str	r2, [sp, #8]
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2301      	movs	r3, #1
 80039b4:	4622      	mov	r2, r4
 80039b6:	f003 fca7 	bl	8007308 <HAL_I2C_Mem_Read>

	int ii = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e00b      	b.n	80039dc <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	f107 0114 	add.w	r1, r7, #20
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	440a      	add	r2, r1
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	7abb      	ldrb	r3, [r7, #10]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbef      	blt.n	80039c4 <AK8963_readBytes+0x42>
	}
}
 80039e4:	bf00      	nop
 80039e6:	372c      	adds	r7, #44	; 0x2c
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <MPU9250_readAccelData>:

static void MPU9250_readAccelData(MPU9250* inst)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	2206      	movs	r2, #6
 80039fa:	213b      	movs	r1, #59	; 0x3b
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff53 	bl	80038a8 <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 8003a02:	7a3b      	ldrb	r3, [r7, #8]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	7a7b      	ldrb	r3, [r7, #9]
 8003a0a:	b21b      	sxth	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 8003a32:	7abb      	ldrb	r3, [r7, #10]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7afb      	ldrb	r3, [r7, #11]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 8003a62:	7b3b      	ldrb	r3, [r7, #12]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	7b7b      	ldrb	r3, [r7, #13]
 8003a6a:	b21b      	sxth	r3, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <MPU9250_readGyroData>:
static void MPU9250_readGyroData(MPU9250* inst)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	2143      	movs	r1, #67	; 0x43
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fefc 	bl	80038a8 <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 8003ab0:	7a3b      	ldrb	r3, [r7, #8]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	7a7b      	ldrb	r3, [r7, #9]
 8003ab8:	b21b      	sxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b21b      	sxth	r3, r3
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 8003ae0:	7abb      	ldrb	r3, [r7, #10]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	b21b      	sxth	r3, r3
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b21b      	sxth	r3, r3
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 8003b10:	7b3b      	ldrb	r3, [r7, #12]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	7b7b      	ldrb	r3, [r7, #13]
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <MPU9250_readMagData>:
static void MPU9250_readMagData(MPU9250* inst)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 8003b50:	2102      	movs	r1, #2
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fef9 	bl	800394a <AK8963_readByte>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d064      	beq.n	8003c2c <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	2207      	movs	r2, #7
 8003b68:	2103      	movs	r1, #3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ff09 	bl	8003982 <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d156      	bne.n	8003c2c <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 8003b7e:	7a7b      	ldrb	r3, [r7, #9]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	b21a      	sxth	r2, r3
 8003b84:	7a3b      	ldrb	r3, [r7, #8]
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	ee07 3a90 	vmov	s15, r3
 8003b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	7abb      	ldrb	r3, [r7, #10]
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 8003bf2:	7b7b      	ldrb	r3, [r7, #13]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	7b3b      	ldrb	r3, [r7, #12]
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <MPU9250_getRes>:
	MPU9250_readBytes(inst, MPU9250_TEMP_OUT_H, 2, &rawData[0]);
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}
static void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7b9b      	ldrb	r3, [r3, #14]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <MPU9250_getRes+0x18>
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d004      	beq.n	8003c54 <MPU9250_getRes+0x20>
 8003c4a:	e007      	b.n	8003c5c <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <MPU9250_getRes+0xbc>)
 8003c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c52:	e003      	b.n	8003c5c <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <MPU9250_getRes+0xc0>)
 8003c58:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c5a:	bf00      	nop
	}
	switch (config->Gscale)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	7b5b      	ldrb	r3, [r3, #13]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d81b      	bhi.n	8003c9c <MPU9250_getRes+0x68>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <MPU9250_getRes+0x38>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c95 	.word	0x08003c95
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <MPU9250_getRes+0xc4>)
 8003c80:	649a      	str	r2, [r3, #72]	; 0x48
 8003c82:	e00b      	b.n	8003c9c <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <MPU9250_getRes+0xc8>)
 8003c88:	649a      	str	r2, [r3, #72]	; 0x48
 8003c8a:	e007      	b.n	8003c9c <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <MPU9250_getRes+0xcc>)
 8003c90:	649a      	str	r2, [r3, #72]	; 0x48
 8003c92:	e003      	b.n	8003c9c <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <MPU9250_getRes+0xd0>)
 8003c98:	649a      	str	r2, [r3, #72]	; 0x48
 8003c9a:	bf00      	nop
	}
	switch (config->Ascale)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d81f      	bhi.n	8003ce4 <MPU9250_getRes+0xb0>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <MPU9250_getRes+0x78>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	08003cdb 	.word	0x08003cdb
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc4:	e00e      	b.n	8003ce4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8003cce:	e009      	b.n	8003ce4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
 8003cd8:	e004      	b.n	8003ce4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ce2:	bf00      	nop
	}
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40bfebff 	.word	0x40bfebff
 8003cf4:	3fbfebff 	.word	0x3fbfebff
 8003cf8:	3bfa0000 	.word	0x3bfa0000
 8003cfc:	3c7a0000 	.word	0x3c7a0000
 8003d00:	3cfa0000 	.word	0x3cfa0000
 8003d04:	3d7a0000 	.word	0x3d7a0000

08003d08 <MPU9250_init>:

// #################### Public routines ####################

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2e:	dd0a      	ble.n	8003d46 <MPU9250_init+0x3e>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8003d44:	e004      	b.n	8003d50 <MPU9250_init+0x48>
	else inst->alg_delay = 0;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	inst->euler_delay = 1000000.0 / config->euler_rate;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fc07 	bl	8000568 <__aeabi_f2d>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4623      	mov	r3, r4
 8003d62:	a185      	add	r1, pc, #532	; (adr r1, 8003f78 <MPU9250_init+0x270>)
 8003d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d68:	f7fc fd80 	bl	800086c <__aeabi_ddiv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4618      	mov	r0, r3
 8003d72:	4621      	mov	r1, r4
 8003d74:	f7fc ff28 	bl	8000bc8 <__aeabi_d2uiz>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	int i;
	for (i = 0; i < 3; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e020      	b.n	8003dc8 <MPU9250_init+0xc0>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	332c      	adds	r3, #44	; 0x2c
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3326      	adds	r3, #38	; 0x26
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	3322      	adds	r3, #34	; 0x22
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	dddb      	ble.n	8003d86 <MPU9250_init+0x7e>
	}
	inst->q[0] = 1.0f;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	//Self test was there
	delay(1000);
 8003dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ddc:	f002 f9da 	bl	8006194 <HAL_Delay>
	MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ff26 	bl	8003c34 <MPU9250_getRes>

	if (config->calibrate)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	7c1b      	ldrb	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <MPU9250_init+0xf0>
	{
		MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f9f9 	bl	80041e8 <MPU9250_calibrate>
 8003df6:	e02f      	b.n	8003e58 <MPU9250_init+0x150>
	}
	else
	{										// Or load biases from config
		for (i = 0; i < 3; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e029      	b.n	8003e52 <MPU9250_init+0x14a>
		{
			inst->accelBias[i] = config->accelBias[i];
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	330a      	adds	r3, #10
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	331a      	adds	r3, #26
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	601a      	str	r2, [r3, #0]
			inst->gyroBias[i] = config->gyroBias[i];
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3316      	adds	r3, #22
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3304      	adds	r3, #4
 8003e30:	601a      	str	r2, [r3, #0]
			inst->magBias[i] = config->magBias[i];
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3304      	adds	r3, #4
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3314      	adds	r3, #20
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	ddd2      	ble.n	8003dfe <MPU9250_init+0xf6>
		}
	}
	delay(1000);
 8003e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e5c:	f002 f99a 	bl	8006194 <HAL_Delay>
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 8003e60:	2200      	movs	r2, #0
 8003e62:	216b      	movs	r1, #107	; 0x6b
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fce7 	bl	8003838 <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 8003e6a:	2064      	movs	r0, #100	; 0x64
 8003e6c:	f002 f992 	bl	8006194 <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003e70:	2201      	movs	r2, #1
 8003e72:	216b      	movs	r1, #107	; 0x6b
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fcdf 	bl	8003838 <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 8003e7a:	2064      	movs	r0, #100	; 0x64
 8003e7c:	f002 f98a 	bl	8006194 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 8003e80:	2203      	movs	r2, #3
 8003e82:	211a      	movs	r1, #26
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fcd7 	bl	8003838 <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 8003e8a:	2064      	movs	r0, #100	; 0x64
 8003e8c:	f002 f982 	bl	8006194 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 8003e90:	2204      	movs	r2, #4
 8003e92:	2119      	movs	r1, #25
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fccf 	bl	8003838 <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 8003e9a:	211b      	movs	r1, #27
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fce7 	bl	8003870 <MPU9250_readByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	f023 0318 	bic.w	r3, r3, #24
 8003eb4:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	7b5b      	ldrb	r3, [r3, #13]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	b25a      	sxtb	r2, r3
 8003ebe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	211b      	movs	r1, #27
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fcb2 	bl	8003838 <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 8003ed4:	211c      	movs	r1, #28
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fcca 	bl	8003870 <MPU9250_readByte>
 8003edc:	4603      	mov	r3, r0
 8003ede:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f023 0318 	bic.w	r3, r3, #24
 8003ee6:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	7b1b      	ldrb	r3, [r3, #12]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	b25a      	sxtb	r2, r3
 8003ef0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	461a      	mov	r2, r3
 8003efe:	211c      	movs	r1, #28
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fc99 	bl	8003838 <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 8003f06:	211d      	movs	r1, #29
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fcb1 	bl	8003870 <MPU9250_readByte>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f023 030f 	bic.w	r3, r3, #15
 8003f18:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
 8003f1c:	f043 0303 	orr.w	r3, r3, #3
 8003f20:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 8003f22:	7afb      	ldrb	r3, [r7, #11]
 8003f24:	461a      	mov	r2, r3
 8003f26:	211d      	movs	r1, #29
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fc85 	bl	8003838 <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 8003f2e:	2222      	movs	r2, #34	; 0x22
 8003f30:	2137      	movs	r1, #55	; 0x37
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fc80 	bl	8003838 <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2138      	movs	r1, #56	; 0x38
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fc7b 	bl	8003838 <MPU9250_writeByte>
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}
	*/

	inst->mpu_active = true;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	799b      	ldrb	r3, [r3, #6]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <MPU9250_init+0x254>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	79db      	ldrb	r3, [r3, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MPU9250_init+0x254>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <MPU9250_init+0x256>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	721a      	strb	r2, [r3, #8]
	return true;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd90      	pop	{r4, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	412e8480 	.word	0x412e8480

08003f80 <AK8963_init>:

bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	delay(1000);
 8003f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f8e:	f002 f901 	bl	8006194 <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8003f92:	2200      	movs	r2, #0
 8003f94:	210a      	movs	r1, #10
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fcbb 	bl	8003912 <AK8963_writeByte>
	delay(10);
 8003f9c:	200a      	movs	r0, #10
 8003f9e:	f002 f8f9 	bl	8006194 <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	210a      	movs	r1, #10
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fcb3 	bl	8003912 <AK8963_writeByte>
	delay(10);
 8003fac:	200a      	movs	r0, #10
 8003fae:	f002 f8f1 	bl	8006194 <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	2110      	movs	r1, #16
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fce1 	bl	8003982 <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 8003fc0:	7a3b      	ldrb	r3, [r7, #8]
 8003fc2:	3b80      	subs	r3, #128	; 0x80
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fcc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80040c8 <AK8963_init+0x148>
 8003fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003fe2:	7a7b      	ldrb	r3, [r7, #9]
 8003fe4:	3b80      	subs	r3, #128	; 0x80
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fee:	eddf 6a36 	vldr	s13, [pc, #216]	; 80040c8 <AK8963_init+0x148>
 8003ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8004004:	7abb      	ldrb	r3, [r7, #10]
 8004006:	3b80      	subs	r3, #128	; 0x80
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004010:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80040c8 <AK8963_init+0x148>
 8004014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800401c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004026:	2200      	movs	r2, #0
 8004028:	210a      	movs	r1, #10
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fc71 	bl	8003912 <AK8963_writeByte>
	delay(10);
 8004030:	200a      	movs	r0, #10
 8004032:	f002 f8af 	bl	8006194 <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	7b9b      	ldrb	r3, [r3, #14]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	b25a      	sxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7bdb      	ldrb	r3, [r3, #15]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	4313      	orrs	r3, r2
 8004046:	b25b      	sxtb	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	210a      	movs	r1, #10
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fc5f 	bl	8003912 <AK8963_writeByte>
	delay(10);
 8004054:	200a      	movs	r0, #10
 8004056:	f002 f89d 	bl	8006194 <HAL_Delay>

	if (config->calibrate)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	7c1b      	ldrb	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fe3a 	bl	8004cdc <AK8963_calibrate>
 8004068:	e015      	b.n	8004096 <AK8963_init+0x116>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e00f      	b.n	8004090 <AK8963_init+0x110>
		{
			inst->magBias[i] = config->magBias[i];
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3314      	adds	r3, #20
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3301      	adds	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	ddec      	ble.n	8004070 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	799b      	ldrb	r3, [r3, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <AK8963_init+0x130>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	79db      	ldrb	r3, [r3, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <AK8963_init+0x130>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <AK8963_init+0x132>
 80040b0:	2300      	movs	r3, #0
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	721a      	strb	r2, [r3, #8]
	return true;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	43800000 	.word	0x43800000

080040cc <MPU9250_present>:

bool MPU9250_present(MPU9250* inst) { /*MPU9250_reset(inst);*/ return (MPU9250_readByte(inst, MPU9250_WHO_AM_I) == 0x71); }
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	2175      	movs	r1, #117	; 0x75
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fbca 	bl	8003870 <MPU9250_readByte>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b71      	cmp	r3, #113	; 0x71
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <AK8963_present>:
bool AK8963_present(MPU9250* inst) { /*MPU9250_reset(inst);*/ return (AK8963_readByte(inst, AK8963_WHO_AM_I) == 0x48); }
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	2100      	movs	r1, #0
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fc25 	bl	800394a <AK8963_readByte>
 8004100:	4603      	mov	r3, r0
 8004102:	2b48      	cmp	r3, #72	; 0x48
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 800411c:	213a      	movs	r1, #58	; 0x3a
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fba6 	bl	8003870 <MPU9250_readByte>
 8004124:	4603      	mov	r3, r0
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fc5c 	bl	80039ec <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fcb0 	bl	8003a9a <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fd04 	bl	8003b48 <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8004140:	f7ff fb0f 	bl	8003762 <micros>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004156:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80041c4 <MPU9250_update+0xb0>
 800415a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	if (inst->alg_deltat >= inst->alg_delay)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8004170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	db1f      	blt.n	80041ba <MPU9250_update+0xa6>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 f840 	bl	8005200 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 8004180:	f7ff faef 	bl	8003762 <micros>
 8004184:	4602      	mov	r2, r0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 800418c:	f7ff fae9 	bl	8003762 <micros>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004198:	1ad2      	subs	r2, r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d30a      	bcc.n	80041ba <MPU9250_update+0xa6>
		{
			MPU9250_updateEuler(inst);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 feab 	bl	8004f00 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80041aa:	f7ff fada 	bl	8003762 <micros>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			return true;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <MPU9250_update+0xa8>
		}
	}
	return false;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	49742400 	.word	0x49742400

080041c8 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80041d0:	2280      	movs	r2, #128	; 0x80
 80041d2:	216b      	movs	r1, #107	; 0x6b
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fb2f 	bl	8003838 <MPU9250_writeByte>
	delay(100);
 80041da:	2064      	movs	r0, #100	; 0x64
 80041dc:	f001 ffda 	bl	8006194 <HAL_Delay>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b098      	sub	sp, #96	; 0x60
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80041f0:	2300      	movs	r3, #0
 80041f2:	647b      	str	r3, [r7, #68]	; 0x44
 80041f4:	2300      	movs	r3, #0
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f8:	2300      	movs	r3, #0
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041fc:	2300      	movs	r3, #0
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004200:	2300      	movs	r3, #0
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004204:	2300      	movs	r3, #0
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffdd 	bl	80041c8 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 800420e:	2201      	movs	r2, #1
 8004210:	216b      	movs	r1, #107	; 0x6b
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fb10 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004218:	2200      	movs	r2, #0
 800421a:	216c      	movs	r1, #108	; 0x6c
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fb0b 	bl	8003838 <MPU9250_writeByte>
	delay(200);
 8004222:	20c8      	movs	r0, #200	; 0xc8
 8004224:	f001 ffb6 	bl	8006194 <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8004228:	2200      	movs	r2, #0
 800422a:	2138      	movs	r1, #56	; 0x38
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fb03 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8004232:	2200      	movs	r2, #0
 8004234:	2123      	movs	r1, #35	; 0x23
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fafe 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 800423c:	2200      	movs	r2, #0
 800423e:	216b      	movs	r1, #107	; 0x6b
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff faf9 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8004246:	2200      	movs	r2, #0
 8004248:	2124      	movs	r1, #36	; 0x24
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff faf4 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8004250:	2200      	movs	r2, #0
 8004252:	216a      	movs	r1, #106	; 0x6a
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff faef 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 800425a:	220c      	movs	r2, #12
 800425c:	216a      	movs	r1, #106	; 0x6a
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff faea 	bl	8003838 <MPU9250_writeByte>
	delay(15);
 8004264:	200f      	movs	r0, #15
 8004266:	f001 ff95 	bl	8006194 <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800426a:	2201      	movs	r2, #1
 800426c:	211a      	movs	r1, #26
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fae2 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8004274:	2200      	movs	r2, #0
 8004276:	2119      	movs	r1, #25
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fadd 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800427e:	2200      	movs	r2, #0
 8004280:	211b      	movs	r1, #27
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fad8 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004288:	2200      	movs	r2, #0
 800428a:	211c      	movs	r1, #28
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fad3 	bl	8003838 <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 8004292:	2383      	movs	r3, #131	; 0x83
 8004294:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 8004298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800429c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	216a      	movs	r1, #106	; 0x6a
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fac7 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80042aa:	2278      	movs	r2, #120	; 0x78
 80042ac:	2123      	movs	r1, #35	; 0x23
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fac2 	bl	8003838 <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 80042b4:	2028      	movs	r0, #40	; 0x28
 80042b6:	f001 ff6d 	bl	8006194 <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 80042ba:	2200      	movs	r2, #0
 80042bc:	2123      	movs	r1, #35	; 0x23
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff faba 	bl	8003838 <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80042c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c8:	2202      	movs	r2, #2
 80042ca:	2172      	movs	r1, #114	; 0x72
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff faeb 	bl	80038a8 <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80042d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	b21a      	sxth	r2, r3
 80042da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042de:	b21b      	sxth	r3, r3
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b21b      	sxth	r3, r3
 80042e4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 80042e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80042ec:	4aa9      	ldr	r2, [pc, #676]	; (8004594 <MPU9250_calibrate+0x3ac>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042fe:	e071      	b.n	80043e4 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 8004300:	2300      	movs	r3, #0
 8004302:	82bb      	strh	r3, [r7, #20]
 8004304:	2300      	movs	r3, #0
 8004306:	82fb      	strh	r3, [r7, #22]
 8004308:	2300      	movs	r3, #0
 800430a:	833b      	strh	r3, [r7, #24]
 800430c:	2300      	movs	r3, #0
 800430e:	81bb      	strh	r3, [r7, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	81fb      	strh	r3, [r7, #14]
 8004314:	2300      	movs	r3, #0
 8004316:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8004318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431c:	220c      	movs	r2, #12
 800431e:	2174      	movs	r1, #116	; 0x74
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fac1 	bl	80038a8 <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	b21a      	sxth	r2, r3
 800432e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004332:	b21b      	sxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b21b      	sxth	r3, r3
 8004338:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800433a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	b21a      	sxth	r2, r3
 8004342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004346:	b21b      	sxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b21b      	sxth	r3, r3
 800434c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800434e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	b21a      	sxth	r2, r3
 8004356:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800435a:	b21b      	sxth	r3, r3
 800435c:	4313      	orrs	r3, r2
 800435e:	b21b      	sxth	r3, r3
 8004360:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8004362:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	b21a      	sxth	r2, r3
 800436a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800436e:	b21b      	sxth	r3, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	b21b      	sxth	r3, r3
 8004374:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8004376:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	b21a      	sxth	r2, r3
 800437e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004382:	b21b      	sxth	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b21b      	sxth	r3, r3
 8004388:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800438a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b21a      	sxth	r2, r3
 8004392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004396:	b21b      	sxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b21b      	sxth	r3, r3
 800439c:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80043ae:	4413      	add	r3, r2
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 80043b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80043b8:	4413      	add	r3, r2
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80043bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80043cc:	4413      	add	r3, r2
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80043d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 80043da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043de:	3301      	adds	r3, #1
 80043e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043e4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80043e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d387      	bcc.n	8004300 <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043f6:	e078      	b.n	80044ea <MPU9250_calibrate+0x302>
	{
		accel_bias[i] /= (int32_t) packet_count;
 80043f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004402:	4413      	add	r3, r2
 8004404:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8004408:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800440c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004410:	fb91 f2f2 	sdiv	r2, r1, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800441a:	440b      	add	r3, r1
 800441c:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8004420:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800442a:	4413      	add	r3, r2
 800442c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8004430:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004434:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004438:	fb91 f2f2 	sdiv	r2, r1, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004442:	440b      	add	r3, r1
 8004444:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8004448:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004452:	4413      	add	r3, r2
 8004454:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004458:	425b      	negs	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	da00      	bge.n	8004460 <MPU9250_calibrate+0x278>
 800445e:	3303      	adds	r3, #3
 8004460:	109b      	asrs	r3, r3, #2
 8004462:	121a      	asrs	r2, r3, #8
 8004464:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004470:	440b      	add	r3, r1
 8004472:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004476:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004480:	4413      	add	r3, r2
 8004482:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004486:	425b      	negs	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	da00      	bge.n	800448e <MPU9250_calibrate+0x2a6>
 800448c:	3303      	adds	r3, #3
 800448e:	109b      	asrs	r3, r3, #2
 8004490:	461a      	mov	r2, r3
 8004492:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	3301      	adds	r3, #1
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80044a0:	440b      	add	r3, r1
 80044a2:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 80044a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044b0:	4413      	add	r3, r2
 80044b2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	3316      	adds	r3, #22
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	3304      	adds	r3, #4
 80044dc:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 80044e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044e4:	3301      	adds	r3, #1
 80044e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80044ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d982      	bls.n	80043f8 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 80044f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dd05      	ble.n	8004504 <MPU9250_calibrate+0x31c>
 80044f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
 8004502:	e004      	b.n	800450e <MPU9250_calibrate+0x326>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8004504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004506:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800450a:	4413      	add	r3, r2
 800450c:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 800451a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451e:	2202      	movs	r2, #2
 8004520:	2177      	movs	r1, #119	; 0x77
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f9c0 	bl	80038a8 <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004528:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	b21b      	sxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004536:	4313      	orrs	r3, r2
 8004538:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 800453a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800453e:	2202      	movs	r2, #2
 8004540:	217a      	movs	r1, #122	; 0x7a
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff f9b0 	bl	80038a8 <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	b21b      	sxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004556:	4313      	orrs	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 800455a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800455e:	2202      	movs	r2, #2
 8004560:	217d      	movs	r1, #125	; 0x7d
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff f9a0 	bl	80038a8 <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004568:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	b21b      	sxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004576:	4313      	orrs	r3, r2
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800457a:	2301      	movs	r3, #1
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 800457e:	2300      	movs	r3, #0
 8004580:	773b      	strb	r3, [r7, #28]
 8004582:	2300      	movs	r3, #0
 8004584:	777b      	strb	r3, [r7, #29]
 8004586:	2300      	movs	r3, #0
 8004588:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 800458a:	2300      	movs	r3, #0
 800458c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004590:	e096      	b.n	80046c0 <MPU9250_calibrate+0x4d8>
 8004592:	bf00      	nop
 8004594:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 8004598:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045a2:	4413      	add	r3, r2
 80045a4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <MPU9250_calibrate+0x3da>
 80045b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045ba:	4413      	add	r3, r2
 80045bc:	2201      	movs	r2, #1
 80045be:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80045c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045cc:	4413      	add	r3, r2
 80045ce:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80045d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80045dc:	440b      	add	r3, r1
 80045de:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da00      	bge.n	80045e8 <MPU9250_calibrate+0x400>
 80045e6:	3307      	adds	r3, #7
 80045e8:	10db      	asrs	r3, r3, #3
 80045ea:	425b      	negs	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045f2:	440a      	add	r2, r1
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80045fa:	440b      	add	r3, r1
 80045fc:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 8004600:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800460a:	4413      	add	r3, r2
 800460c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004610:	121a      	asrs	r2, r3, #8
 8004612:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800461e:	440b      	add	r3, r1
 8004620:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8004624:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800462e:	4413      	add	r3, r2
 8004630:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004634:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	3301      	adds	r3, #1
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004642:	440b      	add	r3, r1
 8004644:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8004648:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	3301      	adds	r3, #1
 8004650:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004654:	4413      	add	r3, r2
 8004656:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 800465a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800465e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004662:	4413      	add	r3, r2
 8004664:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8004668:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	3301      	adds	r3, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004678:	440b      	add	r3, r1
 800467a:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 800467e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004688:	4413      	add	r3, r2
 800468a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004696:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	331a      	adds	r3, #26
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 80046b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046ba:	3301      	adds	r3, #1
 80046bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80046c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	f67f af67 	bls.w	8004598 <MPU9250_calibrate+0x3b0>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 80046ca:	bf00      	nop
 80046cc:	3760      	adds	r7, #96	; 0x60
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	0000      	movs	r0, r0
	...

080046d8 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	b0a2      	sub	sp, #136	; 0x88
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80046e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
	inst->gRes = 1;											// Configuration values (must?) not affect readings
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004724:	649a      	str	r2, [r3, #72]	; 0x48
	int i = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004732:	e017      	b.n	8004764 <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800473a:	331a      	adds	r3, #26
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474c:	3316      	adds	r3, #22
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	3304      	adds	r3, #4
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800475a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800475e:	3301      	adds	r3, #1
 8004760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004768:	2b02      	cmp	r3, #2
 800476a:	dde3      	ble.n	8004734 <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 800476c:	2200      	movs	r2, #0
 800476e:	2119      	movs	r1, #25
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff f861 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8004776:	2202      	movs	r2, #2
 8004778:	211a      	movs	r1, #26
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff f85c 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 8004780:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	211b      	movs	r1, #27
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f853 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8004792:	2202      	movs	r2, #2
 8004794:	211d      	movs	r1, #29
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff f84e 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 800479c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	211c      	movs	r1, #28
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff f845 	bl	8003838 <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b4:	e040      	b.n	8004838 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff f918 	bl	80039ec <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 80047bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80047c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ca:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 80047ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 80047e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80047ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ee:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff f951 	bl	8003a9a <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 80047f8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 800480a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004818:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 800481c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 800482e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004832:	3301      	adds	r3, #1
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483c:	2bc7      	cmp	r3, #199	; 0xc7
 800483e:	ddba      	ble.n	80047b6 <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004846:	e030      	b.n	80048aa <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8004848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004852:	4413      	add	r3, r2
 8004854:	3b34      	subs	r3, #52	; 0x34
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004af0 <MPU9250_SelfTest+0x418>
 800485e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800486c:	4413      	add	r3, r2
 800486e:	3b34      	subs	r3, #52	; 0x34
 8004870:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 8004874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800487e:	4413      	add	r3, r2
 8004880:	3b28      	subs	r3, #40	; 0x28
 8004882:	ed93 7a00 	vldr	s14, [r3]
 8004886:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004af0 <MPU9250_SelfTest+0x418>
 800488a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800488e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004898:	4413      	add	r3, r2
 800489a:	3b28      	subs	r3, #40	; 0x28
 800489c:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 80048a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048a4:	3301      	adds	r3, #1
 80048a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	ddca      	ble.n	8004848 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80048b2:	22e0      	movs	r2, #224	; 0xe0
 80048b4:	211c      	movs	r1, #28
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fe ffbe 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80048bc:	22e0      	movs	r2, #224	; 0xe0
 80048be:	211b      	movs	r1, #27
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fe ffb9 	bl	8003838 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 80048c6:	2019      	movs	r0, #25
 80048c8:	f001 fc64 	bl	8006194 <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d2:	e040      	b.n	8004956 <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff f889 	bl	80039ec <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 80048da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80048e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 80048ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80048f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 80048fe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f8c2 	bl	8003a9a <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 8004916:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004924:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8004928:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004936:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 800493a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004948:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 800494c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004950:	3301      	adds	r3, #1
 8004952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495a:	2bc7      	cmp	r3, #199	; 0xc7
 800495c:	ddba      	ble.n	80048d4 <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004964:	e030      	b.n	80049c8 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 8004966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004970:	4413      	add	r3, r2
 8004972:	3b40      	subs	r3, #64	; 0x40
 8004974:	ed93 7a00 	vldr	s14, [r3]
 8004978:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004af0 <MPU9250_SelfTest+0x418>
 800497c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800498a:	4413      	add	r3, r2
 800498c:	3b40      	subs	r3, #64	; 0x40
 800498e:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 8004992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800499c:	4413      	add	r3, r2
 800499e:	3b4c      	subs	r3, #76	; 0x4c
 80049a0:	ed93 7a00 	vldr	s14, [r3]
 80049a4:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004af0 <MPU9250_SelfTest+0x418>
 80049a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049b6:	4413      	add	r3, r2
 80049b8:	3b4c      	subs	r3, #76	; 0x4c
 80049ba:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 80049be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c2:	3301      	adds	r3, #1
 80049c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	ddca      	ble.n	8004966 <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 80049d0:	2200      	movs	r2, #0
 80049d2:	211c      	movs	r1, #28
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fe ff2f 	bl	8003838 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 80049da:	2200      	movs	r2, #0
 80049dc:	211b      	movs	r1, #27
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fe ff2a 	bl	8003838 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 80049e4:	2019      	movs	r0, #25
 80049e6:	f001 fbd5 	bl	8006194 <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 80049ea:	210d      	movs	r1, #13
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fe ff3f 	bl	8003870 <MPU9250_readByte>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 80049f8:	210e      	movs	r1, #14
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fe ff38 	bl	8003870 <MPU9250_readByte>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 8004a06:	210f      	movs	r1, #15
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe ff31 	bl	8003870 <MPU9250_readByte>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 8004a14:	2100      	movs	r1, #0
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe ff2a 	bl	8003870 <MPU9250_readByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 8004a22:	2101      	movs	r1, #1
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fe ff23 	bl	8003870 <MPU9250_readByte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8004a30:	2102      	movs	r1, #2
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fe ff1c 	bl	8003870 <MPU9250_readByte>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a44:	e048      	b.n	8004ad8 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 8004a46:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004a4a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5a:	ee17 0a90 	vmov	r0, s15
 8004a5e:	f7fb fd83 	bl	8000568 <__aeabi_f2d>
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a6e:	4413      	add	r3, r2
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	ee17 0a90 	vmov	r0, s15
 8004a7e:	f7fb fd73 	bl	8000568 <__aeabi_f2d>
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <MPU9250_SelfTest+0x41c>)
 8004a88:	f7fb fc0e 	bl	80002a8 <__aeabi_dsub>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	ec43 2b17 	vmov	d7, r2, r3
 8004a94:	eeb0 1a47 	vmov.f32	s2, s14
 8004a98:	eef0 1a67 	vmov.f32	s3, s15
 8004a9c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004ae8 <MPU9250_SelfTest+0x410>
 8004aa0:	f016 f90c 	bl	801acbc <pow>
 8004aa4:	ec53 2b10 	vmov	r2, r3, d0
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fdb4 	bl	8000618 <__aeabi_dmul>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	f7fc f8a6 	bl	8000c08 <__aeabi_d2f>
 8004abc:	4602      	mov	r2, r0
 8004abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ac8:	440b      	add	r3, r1
 8004aca:	3b64      	subs	r3, #100	; 0x64
 8004acc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	ddb2      	ble.n	8004a46 <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ae4:	e09b      	b.n	8004c1e <MPU9250_SelfTest+0x546>
 8004ae6:	bf00      	nop
 8004ae8:	c28f5c29 	.word	0xc28f5c29
 8004aec:	3ff028f5 	.word	0x3ff028f5
 8004af0:	43480000 	.word	0x43480000
 8004af4:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8004af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b00:	4413      	add	r3, r2
 8004b02:	3b40      	subs	r3, #64	; 0x40
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b10:	4413      	add	r3, r2
 8004b12:	3b34      	subs	r3, #52	; 0x34
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1c:	ee17 0a90 	vmov	r0, s15
 8004b20:	f7fb fd22 	bl	8000568 <__aeabi_f2d>
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	4b69      	ldr	r3, [pc, #420]	; (8004cd0 <MPU9250_SelfTest+0x5f8>)
 8004b2a:	f7fb fd75 	bl	8000618 <__aeabi_dmul>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	4625      	mov	r5, r4
 8004b34:	461c      	mov	r4, r3
 8004b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b3e:	4413      	add	r3, r2
 8004b40:	3b64      	subs	r3, #100	; 0x64
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fb fd0f 	bl	8000568 <__aeabi_f2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fe8b 	bl	800086c <__aeabi_ddiv>
 8004b56:	4603      	mov	r3, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	4b5b      	ldr	r3, [pc, #364]	; (8004cd0 <MPU9250_SelfTest+0x5f8>)
 8004b64:	f7fb fba0 	bl	80002a8 <__aeabi_dsub>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4621      	mov	r1, r4
 8004b70:	f7fc f84a 	bl	8000c08 <__aeabi_d2f>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004b7e:	440b      	add	r3, r1
 8004b80:	3b7c      	subs	r3, #124	; 0x7c
 8004b82:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8004b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3b4c      	subs	r3, #76	; 0x4c
 8004b90:	ed93 7a00 	vldr	s14, [r3]
 8004b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3b28      	subs	r3, #40	; 0x28
 8004ba0:	edd3 7a00 	vldr	s15, [r3]
 8004ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba8:	ee17 0a90 	vmov	r0, s15
 8004bac:	f7fb fcdc 	bl	8000568 <__aeabi_f2d>
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <MPU9250_SelfTest+0x5f8>)
 8004bb6:	f7fb fd2f 	bl	8000618 <__aeabi_dmul>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4625      	mov	r5, r4
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bcc:	4413      	add	r3, r2
 8004bce:	3b64      	subs	r3, #100	; 0x64
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fcc8 	bl	8000568 <__aeabi_f2d>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb fe44 	bl	800086c <__aeabi_ddiv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4618      	mov	r0, r3
 8004bea:	4621      	mov	r1, r4
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <MPU9250_SelfTest+0x5f8>)
 8004bf2:	f7fb fb59 	bl	80002a8 <__aeabi_dsub>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c00:	1cdc      	adds	r4, r3, #3
 8004c02:	4608      	mov	r0, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	f7fb ffff 	bl	8000c08 <__aeabi_d2f>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	00a3      	lsls	r3, r4, #2
 8004c0e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c12:	440b      	add	r3, r1
 8004c14:	3b7c      	subs	r3, #124	; 0x7c
 8004c16:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f77f af69 	ble.w	8004af8 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
 8004c26:	482b      	ldr	r0, [pc, #172]	; (8004cd4 <MPU9250_SelfTest+0x5fc>)
 8004c28:	f7fe fda6 	bl	8003778 <println>
	#endif
	bool passed = true;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004c32:	2300      	movs	r3, #0
 8004c34:	677b      	str	r3, [r7, #116]	; 0x74
 8004c36:	e042      	b.n	8004cbe <MPU9250_SelfTest+0x5e6>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8004c38:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004c3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c44:	440a      	add	r2, r1
 8004c46:	3a7c      	subs	r2, #124	; 0x7c
 8004c48:	edd2 7a00 	vldr	s15, [r2]
 8004c4c:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8004c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	bfcc      	ite	gt
 8004c5a:	2201      	movgt	r2, #1
 8004c5c:	2200      	movle	r2, #0
 8004c5e:	b2d1      	uxtb	r1, r2
 8004c60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c62:	0092      	lsls	r2, r2, #2
 8004c64:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8004c68:	4402      	add	r2, r0
 8004c6a:	3a7c      	subs	r2, #124	; 0x7c
 8004c6c:	edd2 7a00 	vldr	s15, [r2]
 8004c70:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7c:	bf4c      	ite	mi
 8004c7e:	2201      	movmi	r2, #1
 8004c80:	2200      	movpl	r2, #0
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	400a      	ands	r2, r1
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		#if MPU9250_DEBUG
			println("%f", results[i]);
 8004c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3b7c      	subs	r3, #124	; 0x7c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fb fc5f 	bl	8000568 <__aeabi_f2d>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <MPU9250_SelfTest+0x600>)
 8004cb4:	f7fe fd60 	bl	8003778 <println>
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cba:	3301      	adds	r3, #1
 8004cbc:	677b      	str	r3, [r7, #116]	; 0x74
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	ddb9      	ble.n	8004c38 <MPU9250_SelfTest+0x560>
		#endif
	}
	return passed;
 8004cc4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3788      	adds	r7, #136	; 0x88
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd0:	40590000 	.word	0x40590000
 8004cd4:	0801d968 	.word	0x0801d968
 8004cd8:	0801d988 	.word	0x0801d988

08004cdc <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08e      	sub	sp, #56	; 0x38
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ce8:	2300      	movs	r3, #0
 8004cea:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cec:	2300      	movs	r3, #0
 8004cee:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8004cf0:	4a81      	ldr	r2, [pc, #516]	; (8004ef8 <AK8963_calibrate+0x21c>)
 8004cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfa:	6018      	str	r0, [r3, #0]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	8019      	strh	r1, [r3, #0]
 8004d00:	4a7e      	ldr	r2, [pc, #504]	; (8004efc <AK8963_calibrate+0x220>)
 8004d02:	f107 031c 	add.w	r3, r7, #28
 8004d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d0a:	6018      	str	r0, [r3, #0]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	8019      	strh	r1, [r3, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	82bb      	strh	r3, [r7, #20]
 8004d14:	2300      	movs	r3, #0
 8004d16:	82fb      	strh	r3, [r7, #22]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d32:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c
	for (i = 0; i < 3; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d40:	e013      	b.n	8004d6a <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 8004d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	3314      	adds	r3, #20
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 8004d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	331c      	adds	r3, #28
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004d62:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d66:	3301      	adds	r3, #1
 8004d68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d9e8      	bls.n	8004d42 <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8004d70:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004d74:	f001 fa0e 	bl	8006194 <HAL_Delay>

	sample_count = 64;
 8004d78:	2340      	movs	r3, #64	; 0x40
 8004d7a:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d80:	e06a      	b.n	8004e58 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe fee0 	bl	8003b48 <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d92:	ee17 3a90 	vmov	r3, s15
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004da4:	ee17 3a90 	vmov	r3, s15
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db6:	ee17 3a90 	vmov	r3, s15
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dc2:	e040      	b.n	8004e46 <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 8004dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dcc:	4413      	add	r3, r2
 8004dce:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8004dd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004dda:	440b      	add	r3, r1
 8004ddc:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	dd0e      	ble.n	8004e02 <AK8963_calibrate+0x126>
 8004de4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004de6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004dee:	440b      	add	r3, r1
 8004df0:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8004df4:	0053      	lsls	r3, r2, #1
 8004df6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dfa:	4413      	add	r3, r2
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 8004e02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8004e10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e18:	440b      	add	r3, r1
 8004e1a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	da0e      	bge.n	8004e40 <AK8963_calibrate+0x164>
 8004e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e24:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e2c:	440b      	add	r3, r1
 8004e2e:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8004e32:	0053      	lsls	r3, r2, #1
 8004e34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e38:	4413      	add	r3, r2
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8004e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e42:	3301      	adds	r3, #1
 8004e44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d9bb      	bls.n	8004dc4 <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 8004e4c:	2087      	movs	r0, #135	; 0x87
 8004e4e:	f001 f9a1 	bl	8006194 <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 8004e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e54:	3301      	adds	r3, #1
 8004e56:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d390      	bcc.n	8004d82 <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e64:	64da      	str	r2, [r3, #76]	; 0x4c

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 8004e66:	2300      	movs	r3, #0
 8004e68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e6a:	e03d      	b.n	8004ee8 <AK8963_calibrate+0x20c>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 8004e6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e76:	440a      	add	r2, r1
 8004e78:	3a30      	subs	r2, #48	; 0x30
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	331c      	adds	r3, #28
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3304      	adds	r3, #4
 8004e86:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 8004e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e90:	4413      	add	r3, r2
 8004e92:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004e96:	461a      	mov	r2, r3
 8004e98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	0fda      	lsrs	r2, r3, #31
 8004eaa:	4413      	add	r3, r2
 8004eac:	105b      	asrs	r3, r3, #1
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	331c      	adds	r3, #28
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	3304      	adds	r3, #4
 8004ecc:	edd3 7a00 	vldr	s15, [r3]
 8004ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	3314      	adds	r3, #20
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 8004ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d9be      	bls.n	8004e6c <AK8963_calibrate+0x190>
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3738      	adds	r7, #56	; 0x38
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0801d98c 	.word	0x0801d98c
 8004efc:	0801d994 	.word	0x0801d994

08004f00 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f30:	ee17 0a90 	vmov	r0, s15
 8004f34:	f7fb fb18 	bl	8000568 <__aeabi_f2d>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f84:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8004f88:	ee17 0a90 	vmov	r0, s15
 8004f8c:	f7fb faec 	bl	8000568 <__aeabi_f2d>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	ec43 2b11 	vmov	d1, r2, r3
 8004f98:	ec45 4b10 	vmov	d0, r4, r5
 8004f9c:	f015 fe28 	bl	801abf0 <atan2>
 8004fa0:	ec54 3b10 	vmov	r3, r4, d0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	f7fb fe2e 	bl	8000c08 <__aeabi_d2f>
 8004fac:	4602      	mov	r2, r0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fda:	ee17 0a90 	vmov	r0, s15
 8004fde:	f7fb fac3 	bl	8000568 <__aeabi_f2d>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	ec44 3b10 	vmov	d0, r3, r4
 8004fea:	f015 fda9 	bl	801ab40 <asin>
 8004fee:	ec54 3b10 	vmov	r3, r4, d0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	f7fb fe07 	bl	8000c08 <__aeabi_d2f>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef1 7a67 	vneg.f32	s15, s15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800502a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005032:	ee17 0a90 	vmov	r0, s15
 8005036:	f7fb fa97 	bl	8000568 <__aeabi_f2d>
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800504a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800505a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800505e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800506e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005086:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800508a:	ee17 0a90 	vmov	r0, s15
 800508e:	f7fb fa6b 	bl	8000568 <__aeabi_f2d>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	ec43 2b11 	vmov	d1, r2, r3
 800509a:	ec45 4b10 	vmov	d0, r4, r5
 800509e:	f015 fda7 	bl	801abf0 <atan2>
 80050a2:	ec54 3b10 	vmov	r3, r4, d0
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	f7fb fdad 	bl	8000c08 <__aeabi_d2f>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	615a      	str	r2, [r3, #20]
	inst->yaw	*= -180.0f / M_PI;			// Convert to degrees
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fb fa55 	bl	8000568 <__aeabi_f2d>
 80050be:	a34c      	add	r3, pc, #304	; (adr r3, 80051f0 <MPU9250_updateEuler+0x2f0>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb faa8 	bl	8000618 <__aeabi_dmul>
 80050c8:	4603      	mov	r3, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	4618      	mov	r0, r3
 80050ce:	4621      	mov	r1, r4
 80050d0:	f7fb fd9a 	bl	8000c08 <__aeabi_d2f>
 80050d4:	4602      	mov	r2, r0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fb fa42 	bl	8000568 <__aeabi_f2d>
 80050e4:	a344      	add	r3, pc, #272	; (adr r3, 80051f8 <MPU9250_updateEuler+0x2f8>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	f7fb fa95 	bl	8000618 <__aeabi_dmul>
 80050ee:	4603      	mov	r3, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	4618      	mov	r0, r3
 80050f4:	4621      	mov	r1, r4
 80050f6:	f7fb fd87 	bl	8000c08 <__aeabi_d2f>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fb fa2f 	bl	8000568 <__aeabi_f2d>
 800510a:	a33b      	add	r3, pc, #236	; (adr r3, 80051f8 <MPU9250_updateEuler+0x2f8>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb fa82 	bl	8000618 <__aeabi_dmul>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4618      	mov	r0, r3
 800511a:	4621      	mov	r1, r4
 800511c:	f7fb fd74 	bl	8000c08 <__aeabi_d2f>
 8005120:	4602      	mov	r2, r0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	615a      	str	r2, [r3, #20]
	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
	inst->pitch	+= inst->eulerOffsets[1];
	inst->roll 	+= inst->eulerOffsets[2];
	*/

	inst->yaw_dx = inst->yaw;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
	inst->yaw_dx -= inst->yaw;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	ed93 7a06 	vldr	s14, [r3, #24]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	edd3 7a03 	vldr	s15, [r3, #12]
 800513a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	edc3 7a06 	vstr	s15, [r3, #24]
	inst->yaw_dx *= (1000000.0f / (micros() - inst->euler_lastUpdate));
 8005144:	f7fe fb0d 	bl	8003762 <micros>
 8005148:	4602      	mov	r2, r0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a23 	vldr	s13, [pc, #140]	; 80051e8 <MPU9250_updateEuler+0x2e8>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	edd3 7a06 	vldr	s15, [r3, #24]
 8005168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	edc3 7a06 	vstr	s15, [r3, #24]

	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	edd3 7a03 	vldr	s15, [r3, #12]
 8005178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	d509      	bpl.n	8005196 <MPU9250_updateEuler+0x296>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	edd3 7a03 	vldr	s15, [r3, #12]
 8005188:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051ec <MPU9250_updateEuler+0x2ec>
 800518c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	edd3 7a04 	vldr	s15, [r3, #16]
 800519c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	d509      	bpl.n	80051ba <MPU9250_updateEuler+0x2ba>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80051ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80051ec <MPU9250_updateEuler+0x2ec>
 80051b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80051c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c8:	d400      	bmi.n	80051cc <MPU9250_updateEuler+0x2cc>
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 80051ca:	e009      	b.n	80051e0 <MPU9250_updateEuler+0x2e0>
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80051d2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80051ec <MPU9250_updateEuler+0x2ec>
 80051d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bdb0      	pop	{r4, r5, r7, pc}
 80051e8:	49742400 	.word	0x49742400
 80051ec:	43b40000 	.word	0x43b40000
 80051f0:	1a63c1f8 	.word	0x1a63c1f8
 80051f4:	c04ca5dc 	.word	0xc04ca5dc
 80051f8:	1a63c1f8 	.word	0x1a63c1f8
 80051fc:	404ca5dc 	.word	0x404ca5dc

08005200 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 8005200:	b5b0      	push	{r4, r5, r7, lr}
 8005202:	b0b2      	sub	sp, #200	; 0xc8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005216:	eef1 7a67 	vneg.f32	s15, s15
 800521a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005224:	eef1 7a67 	vneg.f32	s15, s15
 8005228:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4618      	mov	r0, r3
 8005232:	f7fb f999 	bl	8000568 <__aeabi_f2d>
 8005236:	a3b0      	add	r3, pc, #704	; (adr r3, 80054f8 <MadgwickQuaternionUpdate+0x2f8>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fb f9ec 	bl	8000618 <__aeabi_dmul>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	4618      	mov	r0, r3
 8005246:	4621      	mov	r1, r4
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	4bac      	ldr	r3, [pc, #688]	; (8005500 <MadgwickQuaternionUpdate+0x300>)
 800524e:	f7fb fb0d 	bl	800086c <__aeabi_ddiv>
 8005252:	4603      	mov	r3, r0
 8005254:	460c      	mov	r4, r1
 8005256:	4618      	mov	r0, r3
 8005258:	4621      	mov	r1, r4
 800525a:	f7fb fcd5 	bl	8000c08 <__aeabi_d2f>
 800525e:	4603      	mov	r3, r0
 8005260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800526a:	eef1 7a67 	vneg.f32	s15, s15
 800526e:	ee17 3a90 	vmov	r3, s15
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f978 	bl	8000568 <__aeabi_f2d>
 8005278:	a39f      	add	r3, pc, #636	; (adr r3, 80054f8 <MadgwickQuaternionUpdate+0x2f8>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb f9cb 	bl	8000618 <__aeabi_dmul>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	4618      	mov	r0, r3
 8005288:	4621      	mov	r1, r4
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4b9c      	ldr	r3, [pc, #624]	; (8005500 <MadgwickQuaternionUpdate+0x300>)
 8005290:	f7fb faec 	bl	800086c <__aeabi_ddiv>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	4618      	mov	r0, r3
 800529a:	4621      	mov	r1, r4
 800529c:	f7fb fcb4 	bl	8000c08 <__aeabi_d2f>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80052ac:	eef1 7a67 	vneg.f32	s15, s15
 80052b0:	ee17 3a90 	vmov	r3, s15
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f957 	bl	8000568 <__aeabi_f2d>
 80052ba:	a38f      	add	r3, pc, #572	; (adr r3, 80054f8 <MadgwickQuaternionUpdate+0x2f8>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fb f9aa 	bl	8000618 <__aeabi_dmul>
 80052c4:	4603      	mov	r3, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	4618      	mov	r0, r3
 80052ca:	4621      	mov	r1, r4
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	4b8b      	ldr	r3, [pc, #556]	; (8005500 <MadgwickQuaternionUpdate+0x300>)
 80052d2:	f7fb facb 	bl	800086c <__aeabi_ddiv>
 80052d6:	4603      	mov	r3, r0
 80052d8:	460c      	mov	r4, r1
 80052da:	4618      	mov	r0, r3
 80052dc:	4621      	mov	r1, r4
 80052de:	f7fb fc93 	bl	8000c08 <__aeabi_d2f>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80052f6:	eef1 7a67 	vneg.f32	s15, s15
 80052fa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800532a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 800532e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005332:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005336:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 800533a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800533e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005342:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8005346:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800534a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800534e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8005352:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005356:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800535a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 800535e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005362:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005366:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8005372:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005376:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800537a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8005386:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800538a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 8005396:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800539a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 80053a6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80053aa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 80053b6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80053ba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 80053c6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80053ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 80053d6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80053da:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 80053e6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80053ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 80053f6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 8005406:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800540a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 8005416:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800541a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8005426:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800542a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800542e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005432:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005436:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800543a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005442:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005446:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005452:	eeb0 0a67 	vmov.f32	s0, s15
 8005456:	f015 fda1 	bl	801af9c <sqrtf>
 800545a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 800545e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005462:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	f000 8614 	beq.w	8006096 <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 800546e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005472:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800547a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 800547e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005482:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 800548e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005492:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 800549e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80054a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 80054ae:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054b2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80054b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ba:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80054be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ca:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80054ce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80054d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054da:	eeb0 0a67 	vmov.f32	s0, s15
 80054de:	f015 fd5d 	bl	801af9c <sqrtf>
 80054e2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 80054e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80054ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	f000 85d2 	beq.w	800609a <MadgwickQuaternionUpdate+0xe9a>
 80054f6:	e005      	b.n	8005504 <MadgwickQuaternionUpdate+0x304>
 80054f8:	54442d18 	.word	0x54442d18
 80054fc:	400921fb 	.word	0x400921fb
 8005500:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 8005504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005508:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800550c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005510:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 8005514:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005518:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 8005524:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005528:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800552c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005530:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8005534:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005538:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800553c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005540:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8005544:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800554c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8005558:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800555c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005560:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005568:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 800556c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005570:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005574:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8005580:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005588:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800558c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005590:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8005594:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005598:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800559c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055a0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80055a4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80055a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055b0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80055b4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80055b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055c0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80055c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80055d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80055d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80055e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80055ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055f4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80055f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005600:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005604:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800560c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005610:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005614:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005620:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8005624:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005628:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800562c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005630:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005634:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800563c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005640:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005644:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005650:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005654:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005660:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005664:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800566c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005670:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005674:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800567c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005680:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005684:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005688:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800568c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005698:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800569c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 80056ac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80056b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80056b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80056bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80056c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c8:	eeb0 0a67 	vmov.f32	s0, s15
 80056cc:	f015 fc66 	bl	801af9c <sqrtf>
 80056d0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80056d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80056d8:	eeb1 7a67 	vneg.f32	s14, s15
 80056dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056e4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80056e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f4:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80056f8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80056fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005704:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005708:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800570c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005714:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005718:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800571c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005724:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005728:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800572c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005730:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800573c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800574c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005750:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800575c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8005760:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005768:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 800576c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005770:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005774:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005778:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800577c:	eeb1 7a67 	vneg.f32	s14, s15
 8005780:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005784:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005788:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800578c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005790:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005794:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80057a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057ac:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80057b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80057b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057c0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80057c4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80057c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80057d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80057d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80057dc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80057e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80057e8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80057ec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80057f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80057f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80057f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80057fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005800:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005804:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800580c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005810:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005814:	eef1 6a67 	vneg.f32	s13, s15
 8005818:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800581c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005820:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005824:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005828:	ee66 7a27 	vmul.f32	s15, s12, s15
 800582c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005830:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005834:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005838:	ee36 6a67 	vsub.f32	s12, s12, s15
 800583c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005840:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005844:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005848:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800584c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005850:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005854:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005858:	ee36 6a27 	vadd.f32	s12, s12, s15
 800585c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005860:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800586c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005870:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005878:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800587c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005880:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005884:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005888:	ee26 6a27 	vmul.f32	s12, s12, s15
 800588c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005890:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005894:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005898:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800589c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80058a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80058a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80058b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80058c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80058c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058d0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80058d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80058dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058e0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80058e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80058e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058f0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80058f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80058f8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80058fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005904:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005908:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800590c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005910:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005918:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800591c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005920:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005924:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005928:	ee36 6a67 	vsub.f32	s12, s12, s15
 800592c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005930:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800593c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005940:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005944:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005948:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800594c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005950:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005954:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005958:	ee36 6a67 	vsub.f32	s12, s12, s15
 800595c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005964:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005968:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800596c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005970:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005974:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005978:	ee36 6a27 	vadd.f32	s12, s12, s15
 800597c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005980:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800598c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005990:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005994:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005998:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800599c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80059a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059a8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80059ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80059b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80059b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80059bc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80059c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80059c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80059c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80059cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80059d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80059d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80059d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80059e8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80059f4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a00:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005a04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a14:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005a18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005a1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a28:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a34:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005a38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a44:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005a48:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005a4c:	eeb1 7a67 	vneg.f32	s14, s15
 8005a50:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a54:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a58:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005a64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a70:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a74:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a7c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005a80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a90:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005a94:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005a98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a9c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005aa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005aa4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005aa8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005aac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ab0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ab4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ab8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005abc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ac8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005acc:	eef1 6a67 	vneg.f32	s13, s15
 8005ad0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ad8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005adc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005ae0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005ae4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ae8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005aec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005af0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005af4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005af8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005afc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b04:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005b08:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005b0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b1c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005b20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b2c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b30:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005b34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b38:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005b3c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005b40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b48:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005b4c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005b50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b5c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005b60:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005b64:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005b68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b74:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b84:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b88:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b90:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005b94:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ba0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005ba4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005ba8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005bb0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005bb4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005bb8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005bbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005bc0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bc4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005bc8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005bcc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bd0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bd4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005bd8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005be8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005bf0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bf8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c00:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005c0c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005c10:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005c14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c18:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005c1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c20:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005c30:	eef1 6a67 	vneg.f32	s13, s15
 8005c34:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c3c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005c40:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c4c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c54:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c58:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c68:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005c6c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005c70:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c80:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c94:	eef1 6a67 	vneg.f32	s13, s15
 8005c98:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ca0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005ca4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cb0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005cb4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005cb8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005cbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cc4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005cc8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005ccc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005cd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cd4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005cd8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cdc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ce0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cec:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cf0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cf8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005cfc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d0c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005d10:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005d14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d18:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d2c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d3c:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8005d40:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d50:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d6c:	edd7 6a06 	vldr	s13, [r7, #24]
 8005d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d80:	f015 f90c 	bl	801af9c <sqrtf>
 8005d84:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8005d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d94:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 8005d98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d9c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 8005da8:	ed97 7a08 	vldr	s14, [r7, #32]
 8005dac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db4:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 8005db8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005dbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 8005dc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8005dcc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 8005dd8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005ddc:	eeb1 7a67 	vneg.f32	s14, s15
 8005de0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8005dec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005df8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005dfc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e10:	ee17 0a90 	vmov	r0, s15
 8005e14:	f7fa fba8 	bl	8000568 <__aeabi_f2d>
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1e:	f7fa fba3 	bl	8000568 <__aeabi_f2d>
 8005e22:	a3a1      	add	r3, pc, #644	; (adr r3, 80060a8 <MadgwickQuaternionUpdate+0xea8>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fbf6 	bl	8000618 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa fa38 	bl	80002a8 <__aeabi_dsub>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f7fa fee2 	bl	8000c08 <__aeabi_d2f>
 8005e44:	4603      	mov	r3, r0
 8005e46:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8005e48:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005e4c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e54:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8005e58:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e64:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005e68:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e7c:	ee17 0a90 	vmov	r0, s15
 8005e80:	f7fa fb72 	bl	8000568 <__aeabi_f2d>
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	6a38      	ldr	r0, [r7, #32]
 8005e8a:	f7fa fb6d 	bl	8000568 <__aeabi_f2d>
 8005e8e:	a386      	add	r3, pc, #536	; (adr r3, 80060a8 <MadgwickQuaternionUpdate+0xea8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fbc0 	bl	8000618 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fa02 	bl	80002a8 <__aeabi_dsub>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	4621      	mov	r1, r4
 8005eac:	f7fa feac 	bl	8000c08 <__aeabi_d2f>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 8005eb4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005eb8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ec0:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8005ec4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ed0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005ed4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ee8:	ee17 0a90 	vmov	r0, s15
 8005eec:	f7fa fb3c 	bl	8000568 <__aeabi_f2d>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	69f8      	ldr	r0, [r7, #28]
 8005ef6:	f7fa fb37 	bl	8000568 <__aeabi_f2d>
 8005efa:	a36b      	add	r3, pc, #428	; (adr r3, 80060a8 <MadgwickQuaternionUpdate+0xea8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa fb8a 	bl	8000618 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa f9cc 	bl	80002a8 <__aeabi_dsub>
 8005f10:	4603      	mov	r3, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	4618      	mov	r0, r3
 8005f16:	4621      	mov	r1, r4
 8005f18:	f7fa fe76 	bl	8000c08 <__aeabi_d2f>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 8005f20:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005f24:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f2c:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8005f30:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f3c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8005f40:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f54:	ee17 0a90 	vmov	r0, s15
 8005f58:	f7fa fb06 	bl	8000568 <__aeabi_f2d>
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	69b8      	ldr	r0, [r7, #24]
 8005f62:	f7fa fb01 	bl	8000568 <__aeabi_f2d>
 8005f66:	a350      	add	r3, pc, #320	; (adr r3, 80060a8 <MadgwickQuaternionUpdate+0xea8>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa fb54 	bl	8000618 <__aeabi_dmul>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa f996 	bl	80002a8 <__aeabi_dsub>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	4618      	mov	r0, r3
 8005f82:	4621      	mov	r1, r4
 8005f84:	f7fa fe40 	bl	8000c08 <__aeabi_d2f>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8005f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8005fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8005fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fbc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8005fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8005fe0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8005ff4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005ff8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006000:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006004:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006010:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006014:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800601c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006020:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006024:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800602c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006030:	eeb0 0a67 	vmov.f32	s0, s15
 8006034:	f014 ffb2 	bl	801af9c <sqrtf>
 8006038:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 800603c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006040:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006048:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 800604c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006050:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	inst->q[1] = q2 * norm;
 800605e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006062:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	inst->q[2] = q3 * norm;
 8006070:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006074:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	inst->q[3] = q4 * norm;
 8006082:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006086:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8006094:	e002      	b.n	800609c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 800609a:	bf00      	nop
}
 800609c:	37c8      	adds	r7, #200	; 0xc8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bdb0      	pop	{r4, r5, r7, pc}
 80060a2:	bf00      	nop
 80060a4:	f3af 8000 	nop.w
 80060a8:	89f0ed0f 	.word	0x89f0ed0f
 80060ac:	3fed0552 	.word	0x3fed0552

080060b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <HAL_Init+0x40>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <HAL_Init+0x40>)
 80060ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_Init+0x40>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <HAL_Init+0x40>)
 80060c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_Init+0x40>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <HAL_Init+0x40>)
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060d8:	2003      	movs	r0, #3
 80060da:	f000 f94d 	bl	8006378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060de:	2000      	movs	r0, #0
 80060e0:	f000 f808 	bl	80060f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060e4:	f00f fda4 	bl	8015c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00

080060f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_InitTick+0x54>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_InitTick+0x58>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800610a:	fbb3 f3f1 	udiv	r3, r3, r1
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f965 	bl	80063e2 <HAL_SYSTICK_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e00e      	b.n	8006140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d80a      	bhi.n	800613e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006128:	2200      	movs	r2, #0
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	f000 f92d 	bl	800638e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <HAL_InitTick+0x5c>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000170 	.word	0x20000170
 800614c:	20000004 	.word	0x20000004
 8006150:	20000000 	.word	0x20000000

08006154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_IncTick+0x20>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_IncTick+0x24>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4413      	add	r3, r2
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <HAL_IncTick+0x24>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000004 	.word	0x20000004
 8006178:	20007908 	.word	0x20007908

0800617c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return uwTick;
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <HAL_GetTick+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20007908 	.word	0x20007908

08006194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800619c:	f7ff ffee 	bl	800617c <HAL_GetTick>
 80061a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d005      	beq.n	80061ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_Delay+0x40>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061ba:	bf00      	nop
 80061bc:	f7ff ffde 	bl	800617c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d8f7      	bhi.n	80061bc <HAL_Delay+0x28>
  {
  }
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000004 	.word	0x20000004

080061d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <__NVIC_SetPriorityGrouping+0x44>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061f4:	4013      	ands	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800620a:	4a04      	ldr	r2, [pc, #16]	; (800621c <__NVIC_SetPriorityGrouping+0x44>)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	60d3      	str	r3, [r2, #12]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <__NVIC_GetPriorityGrouping+0x18>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	f003 0307 	and.w	r3, r3, #7
}
 800622e:	4618      	mov	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	e000ed00 	.word	0xe000ed00

0800623c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624a:	2b00      	cmp	r3, #0
 800624c:	db0b      	blt.n	8006266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	f003 021f 	and.w	r2, r3, #31
 8006254:	4907      	ldr	r1, [pc, #28]	; (8006274 <__NVIC_EnableIRQ+0x38>)
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2001      	movs	r0, #1
 800625e:	fa00 f202 	lsl.w	r2, r0, r2
 8006262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	e000e100 	.word	0xe000e100

08006278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	6039      	str	r1, [r7, #0]
 8006282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db0a      	blt.n	80062a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	490c      	ldr	r1, [pc, #48]	; (80062c4 <__NVIC_SetPriority+0x4c>)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	0112      	lsls	r2, r2, #4
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	440b      	add	r3, r1
 800629c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062a0:	e00a      	b.n	80062b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	4908      	ldr	r1, [pc, #32]	; (80062c8 <__NVIC_SetPriority+0x50>)
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	3b04      	subs	r3, #4
 80062b0:	0112      	lsls	r2, r2, #4
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	440b      	add	r3, r1
 80062b6:	761a      	strb	r2, [r3, #24]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	e000e100 	.word	0xe000e100
 80062c8:	e000ed00 	.word	0xe000ed00

080062cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	; 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f1c3 0307 	rsb	r3, r3, #7
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	bf28      	it	cs
 80062ea:	2304      	movcs	r3, #4
 80062ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2b06      	cmp	r3, #6
 80062f4:	d902      	bls.n	80062fc <NVIC_EncodePriority+0x30>
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3b03      	subs	r3, #3
 80062fa:	e000      	b.n	80062fe <NVIC_EncodePriority+0x32>
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006300:	f04f 32ff 	mov.w	r2, #4294967295
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	43da      	mvns	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	401a      	ands	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006314:	f04f 31ff 	mov.w	r1, #4294967295
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	fa01 f303 	lsl.w	r3, r1, r3
 800631e:	43d9      	mvns	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006324:	4313      	orrs	r3, r2
         );
}
 8006326:	4618      	mov	r0, r3
 8006328:	3724      	adds	r7, #36	; 0x24
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3b01      	subs	r3, #1
 8006340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006344:	d301      	bcc.n	800634a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006346:	2301      	movs	r3, #1
 8006348:	e00f      	b.n	800636a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <SysTick_Config+0x40>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3b01      	subs	r3, #1
 8006350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006352:	210f      	movs	r1, #15
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	f7ff ff8e 	bl	8006278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <SysTick_Config+0x40>)
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006362:	4b04      	ldr	r3, [pc, #16]	; (8006374 <SysTick_Config+0x40>)
 8006364:	2207      	movs	r2, #7
 8006366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000e010 	.word	0xe000e010

08006378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff ff29 	bl	80061d8 <__NVIC_SetPriorityGrouping>
}
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	4603      	mov	r3, r0
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063a0:	f7ff ff3e 	bl	8006220 <__NVIC_GetPriorityGrouping>
 80063a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7ff ff8e 	bl	80062cc <NVIC_EncodePriority>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff5d 	bl	8006278 <__NVIC_SetPriority>
}
 80063be:	bf00      	nop
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	4603      	mov	r3, r0
 80063ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff31 	bl	800623c <__NVIC_EnableIRQ>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff ffa2 	bl	8006334 <SysTick_Config>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff feb8 	bl	800617c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e099      	b.n	800654c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006438:	e00f      	b.n	800645a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800643a:	f7ff fe9f 	bl	800617c <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b05      	cmp	r3, #5
 8006446:	d908      	bls.n	800645a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2203      	movs	r2, #3
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e078      	b.n	800654c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e8      	bne.n	800643a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_DMA_Init+0x158>)
 8006474:	4013      	ands	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d107      	bne.n	80064c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	4313      	orrs	r3, r2
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d117      	bne.n	800651e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa99 	bl	8006a38 <DMA_CheckFifoParam>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800651a:	2301      	movs	r3, #1
 800651c:	e016      	b.n	800654c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa50 	bl	80069cc <DMA_CalcBaseAndBitshift>
 800652c:	4603      	mov	r3, r0
 800652e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	223f      	movs	r2, #63	; 0x3f
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	f010803f 	.word	0xf010803f

08006558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_DMA_Start_IT+0x26>
 800657a:	2302      	movs	r3, #2
 800657c:	e048      	b.n	8006610 <HAL_DMA_Start_IT+0xb8>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d137      	bne.n	8006602 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f9e2 	bl	8006970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	223f      	movs	r2, #63	; 0x3f
 80065b2:	409a      	lsls	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0216 	orr.w	r2, r2, #22
 80065c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0208 	orr.w	r2, r2, #8
 80065ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e005      	b.n	800660e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800660a:	2302      	movs	r3, #2
 800660c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d004      	beq.n	8006636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2280      	movs	r2, #128	; 0x80
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e00c      	b.n	8006650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2205      	movs	r2, #5
 800663a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006668:	4b92      	ldr	r3, [pc, #584]	; (80068b4 <HAL_DMA_IRQHandler+0x258>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a92      	ldr	r2, [pc, #584]	; (80068b8 <HAL_DMA_IRQHandler+0x25c>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	0a9b      	lsrs	r3, r3, #10
 8006674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	2208      	movs	r2, #8
 8006688:	409a      	lsls	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01a      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d013      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0204 	bic.w	r2, r2, #4
 80066ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	2208      	movs	r2, #8
 80066b6:	409a      	lsls	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066cc:	2201      	movs	r2, #1
 80066ce:	409a      	lsls	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	2201      	movs	r2, #1
 80066ec:	409a      	lsls	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f043 0202 	orr.w	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	2204      	movs	r2, #4
 8006704:	409a      	lsls	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d012      	beq.n	8006734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006720:	2204      	movs	r2, #4
 8006722:	409a      	lsls	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f043 0204 	orr.w	r2, r3, #4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	2210      	movs	r2, #16
 800673a:	409a      	lsls	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d043      	beq.n	80067cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d03c      	beq.n	80067cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	2210      	movs	r2, #16
 8006758:	409a      	lsls	r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d018      	beq.n	800679e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d108      	bne.n	800678c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d024      	beq.n	80067cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
 800678a:	e01f      	b.n	80067cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
 800679c:	e016      	b.n	80067cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0208 	bic.w	r2, r2, #8
 80067ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	2220      	movs	r2, #32
 80067d2:	409a      	lsls	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 808e 	beq.w	80068fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8086 	beq.w	80068fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	2220      	movs	r2, #32
 80067f4:	409a      	lsls	r2, r3
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b05      	cmp	r3, #5
 8006804:	d136      	bne.n	8006874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0216 	bic.w	r2, r2, #22
 8006814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695a      	ldr	r2, [r3, #20]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <HAL_DMA_IRQHandler+0x1da>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0208 	bic.w	r2, r2, #8
 8006844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684a:	223f      	movs	r2, #63	; 0x3f
 800684c:	409a      	lsls	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	2b00      	cmp	r3, #0
 8006868:	d07d      	beq.n	8006966 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
        }
        return;
 8006872:	e078      	b.n	8006966 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01c      	beq.n	80068bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d108      	bne.n	80068a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	2b00      	cmp	r3, #0
 8006896:	d030      	beq.n	80068fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
 80068a0:	e02b      	b.n	80068fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d027      	beq.n	80068fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	e022      	b.n	80068fa <HAL_DMA_IRQHandler+0x29e>
 80068b4:	20000170 	.word	0x20000170
 80068b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0210 	bic.w	r2, r2, #16
 80068d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d032      	beq.n	8006968 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d022      	beq.n	8006954 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2205      	movs	r2, #5
 8006912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	3301      	adds	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d307      	bcc.n	8006942 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f2      	bne.n	8006926 <HAL_DMA_IRQHandler+0x2ca>
 8006940:	e000      	b.n	8006944 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006942:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
 8006964:	e000      	b.n	8006968 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006966:	bf00      	nop
    }
  }
}
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop

08006970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800698c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d108      	bne.n	80069b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80069ae:	e007      	b.n	80069c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	60da      	str	r2, [r3, #12]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	3b10      	subs	r3, #16
 80069dc:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <DMA_CalcBaseAndBitshift+0x64>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80069e6:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <DMA_CalcBaseAndBitshift+0x68>)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d909      	bls.n	8006a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8006a0c:	e007      	b.n	8006a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	aaaaaaab 	.word	0xaaaaaaab
 8006a34:	0801e3a8 	.word	0x0801e3a8

08006a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d11f      	bne.n	8006a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d855      	bhi.n	8006b04 <DMA_CheckFifoParam+0xcc>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <DMA_CheckFifoParam+0x28>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a83 	.word	0x08006a83
 8006a68:	08006a71 	.word	0x08006a71
 8006a6c:	08006b05 	.word	0x08006b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d045      	beq.n	8006b08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a80:	e042      	b.n	8006b08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a8a:	d13f      	bne.n	8006b0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a90:	e03c      	b.n	8006b0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9a:	d121      	bne.n	8006ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d836      	bhi.n	8006b10 <DMA_CheckFifoParam+0xd8>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <DMA_CheckFifoParam+0x70>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006ab9 	.word	0x08006ab9
 8006aac:	08006abf 	.word	0x08006abf
 8006ab0:	08006ab9 	.word	0x08006ab9
 8006ab4:	08006ad1 	.word	0x08006ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	e02f      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d024      	beq.n	8006b14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ace:	e021      	b.n	8006b14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ad8:	d11e      	bne.n	8006b18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006ade:	e01b      	b.n	8006b18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d902      	bls.n	8006aec <DMA_CheckFifoParam+0xb4>
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d003      	beq.n	8006af2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006aea:	e018      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e015      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
      break;
 8006b02:	e00b      	b.n	8006b1c <DMA_CheckFifoParam+0xe4>
      break;
 8006b04:	bf00      	nop
 8006b06:	e00a      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;
 8006b08:	bf00      	nop
 8006b0a:	e008      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e006      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;
 8006b10:	bf00      	nop
 8006b12:	e004      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;
 8006b14:	bf00      	nop
 8006b16:	e002      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;   
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
      break;
 8006b1c:	bf00      	nop
    }
  } 
  
  return status; 
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b089      	sub	sp, #36	; 0x24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	e16b      	b.n	8006e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b48:	2201      	movs	r2, #1
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	f040 815a 	bne.w	8006e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x4a>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b12      	cmp	r3, #18
 8006b74:	d123      	bne.n	8006bbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	08da      	lsrs	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3208      	adds	r2, #8
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	220f      	movs	r2, #15
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4013      	ands	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	08da      	lsrs	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3208      	adds	r2, #8
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	2203      	movs	r2, #3
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f003 0203 	and.w	r2, r3, #3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d00b      	beq.n	8006c12 <HAL_GPIO_Init+0xe6>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d007      	beq.n	8006c12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c06:	2b11      	cmp	r3, #17
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b12      	cmp	r3, #18
 8006c10:	d130      	bne.n	8006c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	4013      	ands	r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c48:	2201      	movs	r2, #1
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	43db      	mvns	r3, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4013      	ands	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f003 0201 	and.w	r2, r3, #1
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	2203      	movs	r2, #3
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80b4 	beq.w	8006e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	4b5f      	ldr	r3, [pc, #380]	; (8006e34 <HAL_GPIO_Init+0x308>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	4a5e      	ldr	r2, [pc, #376]	; (8006e34 <HAL_GPIO_Init+0x308>)
 8006cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006cc2:	4b5c      	ldr	r3, [pc, #368]	; (8006e34 <HAL_GPIO_Init+0x308>)
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cce:	4a5a      	ldr	r2, [pc, #360]	; (8006e38 <HAL_GPIO_Init+0x30c>)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	089b      	lsrs	r3, r3, #2
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	220f      	movs	r2, #15
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	43db      	mvns	r3, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a51      	ldr	r2, [pc, #324]	; (8006e3c <HAL_GPIO_Init+0x310>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d02b      	beq.n	8006d52 <HAL_GPIO_Init+0x226>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a50      	ldr	r2, [pc, #320]	; (8006e40 <HAL_GPIO_Init+0x314>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d025      	beq.n	8006d4e <HAL_GPIO_Init+0x222>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a4f      	ldr	r2, [pc, #316]	; (8006e44 <HAL_GPIO_Init+0x318>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01f      	beq.n	8006d4a <HAL_GPIO_Init+0x21e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a4e      	ldr	r2, [pc, #312]	; (8006e48 <HAL_GPIO_Init+0x31c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d019      	beq.n	8006d46 <HAL_GPIO_Init+0x21a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a4d      	ldr	r2, [pc, #308]	; (8006e4c <HAL_GPIO_Init+0x320>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <HAL_GPIO_Init+0x216>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a4c      	ldr	r2, [pc, #304]	; (8006e50 <HAL_GPIO_Init+0x324>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00d      	beq.n	8006d3e <HAL_GPIO_Init+0x212>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a4b      	ldr	r2, [pc, #300]	; (8006e54 <HAL_GPIO_Init+0x328>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <HAL_GPIO_Init+0x20e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a4a      	ldr	r2, [pc, #296]	; (8006e58 <HAL_GPIO_Init+0x32c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d101      	bne.n	8006d36 <HAL_GPIO_Init+0x20a>
 8006d32:	2307      	movs	r3, #7
 8006d34:	e00e      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d36:	2308      	movs	r3, #8
 8006d38:	e00c      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	e00a      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d3e:	2305      	movs	r3, #5
 8006d40:	e008      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d42:	2304      	movs	r3, #4
 8006d44:	e006      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d46:	2303      	movs	r3, #3
 8006d48:	e004      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e002      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_GPIO_Init+0x228>
 8006d52:	2300      	movs	r3, #0
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	f002 0203 	and.w	r2, r2, #3
 8006d5a:	0092      	lsls	r2, r2, #2
 8006d5c:	4093      	lsls	r3, r2
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d64:	4934      	ldr	r1, [pc, #208]	; (8006e38 <HAL_GPIO_Init+0x30c>)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d72:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d96:	4a31      	ldr	r2, [pc, #196]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d9c:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006dc0:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dea:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006df0:	4b1a      	ldr	r3, [pc, #104]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e14:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <HAL_GPIO_Init+0x330>)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	f67f ae90 	bls.w	8006b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3724      	adds	r7, #36	; 0x24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40013800 	.word	0x40013800
 8006e3c:	40020000 	.word	0x40020000
 8006e40:	40020400 	.word	0x40020400
 8006e44:	40020800 	.word	0x40020800
 8006e48:	40020c00 	.word	0x40020c00
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40021400 	.word	0x40021400
 8006e54:	40021800 	.word	0x40021800
 8006e58:	40021c00 	.word	0x40021c00
 8006e5c:	40013c00 	.word	0x40013c00

08006e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	e001      	b.n	8006e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ea0:	787b      	ldrb	r3, [r7, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ea6:	887a      	ldrh	r2, [r7, #2]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006eac:	e003      	b.n	8006eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	041a      	lsls	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e10f      	b.n	80070f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f00e fec8 	bl	8015c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f08:	f002 fcc8 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 8006f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4a7b      	ldr	r2, [pc, #492]	; (8007100 <HAL_I2C_Init+0x23c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d807      	bhi.n	8006f28 <HAL_I2C_Init+0x64>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a7a      	ldr	r2, [pc, #488]	; (8007104 <HAL_I2C_Init+0x240>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	bf94      	ite	ls
 8006f20:	2301      	movls	r3, #1
 8006f22:	2300      	movhi	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	e006      	b.n	8006f36 <HAL_I2C_Init+0x72>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a77      	ldr	r2, [pc, #476]	; (8007108 <HAL_I2C_Init+0x244>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bf94      	ite	ls
 8006f30:	2301      	movls	r3, #1
 8006f32:	2300      	movhi	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e0db      	b.n	80070f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a72      	ldr	r2, [pc, #456]	; (800710c <HAL_I2C_Init+0x248>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	0c9b      	lsrs	r3, r3, #18
 8006f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a64      	ldr	r2, [pc, #400]	; (8007100 <HAL_I2C_Init+0x23c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d802      	bhi.n	8006f78 <HAL_I2C_Init+0xb4>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	3301      	adds	r3, #1
 8006f76:	e009      	b.n	8006f8c <HAL_I2C_Init+0xc8>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f7e:	fb02 f303 	mul.w	r3, r2, r3
 8006f82:	4a63      	ldr	r2, [pc, #396]	; (8007110 <HAL_I2C_Init+0x24c>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	099b      	lsrs	r3, r3, #6
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4956      	ldr	r1, [pc, #344]	; (8007100 <HAL_I2C_Init+0x23c>)
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	d80d      	bhi.n	8006fc8 <HAL_I2C_Init+0x104>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	1e59      	subs	r1, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	bf38      	it	cc
 8006fc4:	2304      	movcc	r3, #4
 8006fc6:	e04f      	b.n	8007068 <HAL_I2C_Init+0x1a4>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d111      	bne.n	8006ff4 <HAL_I2C_Init+0x130>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	1e58      	subs	r0, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6859      	ldr	r1, [r3, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	440b      	add	r3, r1
 8006fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e012      	b.n	800701a <HAL_I2C_Init+0x156>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	1e58      	subs	r0, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6859      	ldr	r1, [r3, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	0099      	lsls	r1, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	fbb0 f3f3 	udiv	r3, r0, r3
 800700a:	3301      	adds	r3, #1
 800700c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_I2C_Init+0x15e>
 800701e:	2301      	movs	r3, #1
 8007020:	e022      	b.n	8007068 <HAL_I2C_Init+0x1a4>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10e      	bne.n	8007048 <HAL_I2C_Init+0x184>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1e58      	subs	r0, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	440b      	add	r3, r1
 8007038:	fbb0 f3f3 	udiv	r3, r0, r3
 800703c:	3301      	adds	r3, #1
 800703e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007046:	e00f      	b.n	8007068 <HAL_I2C_Init+0x1a4>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	1e58      	subs	r0, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6859      	ldr	r1, [r3, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	0099      	lsls	r1, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	fbb0 f3f3 	udiv	r3, r0, r3
 800705e:	3301      	adds	r3, #1
 8007060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	6809      	ldr	r1, [r1, #0]
 800706c:	4313      	orrs	r3, r2
 800706e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69da      	ldr	r2, [r3, #28]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6911      	ldr	r1, [r2, #16]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	68d2      	ldr	r2, [r2, #12]
 80070a2:	4311      	orrs	r1, r2
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	000186a0 	.word	0x000186a0
 8007104:	001e847f 	.word	0x001e847f
 8007108:	003d08ff 	.word	0x003d08ff
 800710c:	431bde83 	.word	0x431bde83
 8007110:	10624dd3 	.word	0x10624dd3

08007114 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4603      	mov	r3, r0
 8007124:	817b      	strh	r3, [r7, #10]
 8007126:	460b      	mov	r3, r1
 8007128:	813b      	strh	r3, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800712e:	f7ff f825 	bl	800617c <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b20      	cmp	r3, #32
 800713e:	f040 80d9 	bne.w	80072f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2319      	movs	r3, #25
 8007148:	2201      	movs	r2, #1
 800714a:	496d      	ldr	r1, [pc, #436]	; (8007300 <HAL_I2C_Mem_Write+0x1ec>)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fc5b 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
 800715a:	e0cc      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_I2C_Mem_Write+0x56>
 8007166:	2302      	movs	r3, #2
 8007168:	e0c5      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d007      	beq.n	8007190 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800719e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2221      	movs	r2, #33	; 0x21
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a3a      	ldr	r2, [r7, #32]
 80071ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a4d      	ldr	r2, [pc, #308]	; (8007304 <HAL_I2C_Mem_Write+0x1f0>)
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071d2:	88f8      	ldrh	r0, [r7, #6]
 80071d4:	893a      	ldrh	r2, [r7, #8]
 80071d6:	8979      	ldrh	r1, [r7, #10]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	4603      	mov	r3, r0
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fab6 	bl	8007754 <I2C_RequestMemoryWrite>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d052      	beq.n	8007294 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e081      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fcdc 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	2b04      	cmp	r3, #4
 8007208:	d107      	bne.n	800721a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e06b      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	781a      	ldrb	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b04      	cmp	r3, #4
 800725a:	d11b      	bne.n	8007294 <HAL_I2C_Mem_Write+0x180>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007260:	2b00      	cmp	r3, #0
 8007262:	d017      	beq.n	8007294 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1aa      	bne.n	80071f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fcc8 	bl	8007c36 <I2C_WaitOnBTFFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00d      	beq.n	80072c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d107      	bne.n	80072c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e016      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e000      	b.n	80072f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	00100002 	.word	0x00100002
 8007304:	ffff0000 	.word	0xffff0000

08007308 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08c      	sub	sp, #48	; 0x30
 800730c:	af02      	add	r7, sp, #8
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	4608      	mov	r0, r1
 8007312:	4611      	mov	r1, r2
 8007314:	461a      	mov	r2, r3
 8007316:	4603      	mov	r3, r0
 8007318:	817b      	strh	r3, [r7, #10]
 800731a:	460b      	mov	r3, r1
 800731c:	813b      	strh	r3, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007322:	f7fe ff2b 	bl	800617c <HAL_GetTick>
 8007326:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b20      	cmp	r3, #32
 8007332:	f040 8208 	bne.w	8007746 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	2319      	movs	r3, #25
 800733c:	2201      	movs	r2, #1
 800733e:	497b      	ldr	r1, [pc, #492]	; (800752c <HAL_I2C_Mem_Read+0x224>)
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fb61 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	e1fb      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_I2C_Mem_Read+0x56>
 800735a:	2302      	movs	r3, #2
 800735c:	e1f4      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d007      	beq.n	8007384 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007392:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2222      	movs	r2, #34	; 0x22
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2240      	movs	r2, #64	; 0x40
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4a5b      	ldr	r2, [pc, #364]	; (8007530 <HAL_I2C_Mem_Read+0x228>)
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073c6:	88f8      	ldrh	r0, [r7, #6]
 80073c8:	893a      	ldrh	r2, [r7, #8]
 80073ca:	8979      	ldrh	r1, [r7, #10]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fa46 	bl	8007868 <I2C_RequestMemoryRead>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e1b0      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d113      	bne.n	8007416 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ee:	2300      	movs	r3, #0
 80073f0:	623b      	str	r3, [r7, #32]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e184      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	2b01      	cmp	r3, #1
 800741c:	d11b      	bne.n	8007456 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e164      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	2b02      	cmp	r3, #2
 800745c:	d11b      	bne.n	8007496 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	e144      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074ac:	e138      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	f200 80f1 	bhi.w	800769a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d123      	bne.n	8007508 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fbf7 	bl	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e139      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007506:	e10b      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750c:	2b02      	cmp	r3, #2
 800750e:	d14e      	bne.n	80075ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	2200      	movs	r2, #0
 8007518:	4906      	ldr	r1, [pc, #24]	; (8007534 <HAL_I2C_Mem_Read+0x22c>)
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 fa74 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e10e      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
 800752a:	bf00      	nop
 800752c:	00100002 	.word	0x00100002
 8007530:	ffff0000 	.word	0xffff0000
 8007534:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ac:	e0b8      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	2200      	movs	r2, #0
 80075b6:	4966      	ldr	r1, [pc, #408]	; (8007750 <HAL_I2C_Mem_Read+0x448>)
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fa25 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0bf      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	2200      	movs	r2, #0
 8007612:	494f      	ldr	r1, [pc, #316]	; (8007750 <HAL_I2C_Mem_Read+0x448>)
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f9f7 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e091      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007698:	e042      	b.n	8007720 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800769a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fb0a 	bl	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e04c      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d118      	bne.n	8007720 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f aec2 	bne.w	80074ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007746:	2302      	movs	r3, #2
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3728      	adds	r7, #40	; 0x28
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	00010004 	.word	0x00010004

08007754 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4603      	mov	r3, r0
 8007764:	817b      	strh	r3, [r7, #10]
 8007766:	460b      	mov	r3, r1
 8007768:	813b      	strh	r3, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800777c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	2200      	movs	r2, #0
 8007786:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f93c 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e05f      	b.n	800785a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800779a:	897b      	ldrh	r3, [r7, #10]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	6a3a      	ldr	r2, [r7, #32]
 80077ae:	492d      	ldr	r1, [pc, #180]	; (8007864 <I2C_RequestMemoryWrite+0x110>)
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f980 	bl	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e04c      	b.n	800785a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d8:	6a39      	ldr	r1, [r7, #32]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f9ea 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d107      	bne.n	80077fe <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e02b      	b.n	800785a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007808:	893b      	ldrh	r3, [r7, #8]
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	611a      	str	r2, [r3, #16]
 8007812:	e021      	b.n	8007858 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007814:	893b      	ldrh	r3, [r7, #8]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	b2da      	uxtb	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007824:	6a39      	ldr	r1, [r7, #32]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f9c4 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00d      	beq.n	800784e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	2b04      	cmp	r3, #4
 8007838:	d107      	bne.n	800784a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e005      	b.n	800785a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800784e:	893b      	ldrh	r3, [r7, #8]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	00010002 	.word	0x00010002

08007868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af02      	add	r7, sp, #8
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	461a      	mov	r2, r3
 8007876:	4603      	mov	r3, r0
 8007878:	817b      	strh	r3, [r7, #10]
 800787a:	460b      	mov	r3, r1
 800787c:	813b      	strh	r3, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f8aa 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e09e      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	494c      	ldr	r1, [pc, #304]	; (8007a04 <I2C_RequestMemoryRead+0x19c>)
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f8ee 	bl	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e08b      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	6a39      	ldr	r1, [r7, #32]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f958 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	2b04      	cmp	r3, #4
 8007910:	d107      	bne.n	8007922 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e06a      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d105      	bne.n	8007938 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	611a      	str	r2, [r3, #16]
 8007936:	e021      	b.n	800797c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	b29b      	uxth	r3, r3
 800793e:	b2da      	uxtb	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f932 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b04      	cmp	r3, #4
 800795c:	d107      	bne.n	800796e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e044      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007972:	893b      	ldrh	r3, [r7, #8]
 8007974:	b2da      	uxtb	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800797c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797e:	6a39      	ldr	r1, [r7, #32]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f917 	bl	8007bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00d      	beq.n	80079a8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	2b04      	cmp	r3, #4
 8007992:	d107      	bne.n	80079a4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e029      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2200      	movs	r2, #0
 80079c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f81f 	bl	8007a08 <I2C_WaitOnFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e013      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079d4:	897b      	ldrh	r3, [r7, #10]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	6a3a      	ldr	r2, [r7, #32]
 80079e8:	4906      	ldr	r1, [pc, #24]	; (8007a04 <I2C_RequestMemoryRead+0x19c>)
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f863 	bl	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	00010002 	.word	0x00010002

08007a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	4613      	mov	r3, r2
 8007a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a18:	e025      	b.n	8007a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d021      	beq.n	8007a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7fe fbab 	bl	800617c <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d116      	bne.n	8007a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e023      	b.n	8007aae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d10d      	bne.n	8007a8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	e00c      	b.n	8007aa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	43da      	mvns	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4013      	ands	r3, r2
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf0c      	ite	eq
 8007a9e:	2301      	moveq	r3, #1
 8007aa0:	2300      	movne	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d0b6      	beq.n	8007a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ac4:	e051      	b.n	8007b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad4:	d123      	bne.n	8007b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ae4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e046      	b.n	8007bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d021      	beq.n	8007b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b26:	f7fe fb29 	bl	800617c <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d116      	bne.n	8007b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e020      	b.n	8007bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10c      	bne.n	8007b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	43da      	mvns	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	2300      	moveq	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	e00b      	b.n	8007ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	43da      	mvns	r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bf14      	ite	ne
 8007ba0:	2301      	movne	r3, #1
 8007ba2:	2300      	moveq	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d18d      	bne.n	8007ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bc0:	e02d      	b.n	8007c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f8ce 	bl	8007d64 <I2C_IsAcknowledgeFailed>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e02d      	b.n	8007c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d021      	beq.n	8007c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bda:	f7fe facf 	bl	800617c <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d302      	bcc.n	8007bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d116      	bne.n	8007c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	f043 0220 	orr.w	r2, r3, #32
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e007      	b.n	8007c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d1ca      	bne.n	8007bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c42:	e02d      	b.n	8007ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f88d 	bl	8007d64 <I2C_IsAcknowledgeFailed>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e02d      	b.n	8007cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d021      	beq.n	8007ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5c:	f7fe fa8e 	bl	800617c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d116      	bne.n	8007ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e007      	b.n	8007cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d1ca      	bne.n	8007c44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cc4:	e042      	b.n	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	f003 0310 	and.w	r3, r3, #16
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d119      	bne.n	8007d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0210 	mvn.w	r2, #16
 8007cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e029      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d08:	f7fe fa38 	bl	800617c <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d116      	bne.n	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e007      	b.n	8007d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d1b5      	bne.n	8007cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7a:	d11b      	bne.n	8007db4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc4:	b08f      	sub	sp, #60	; 0x3c
 8007dc6:	af0a      	add	r7, sp, #40	; 0x28
 8007dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e10f      	b.n	8007ff4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f00e fbe2 	bl	80165b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2203      	movs	r2, #3
 8007df8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f005 fd89 	bl	800d92a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	687e      	ldr	r6, [r7, #4]
 8007e20:	466d      	mov	r5, sp
 8007e22:	f106 0410 	add.w	r4, r6, #16
 8007e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e36:	1d33      	adds	r3, r6, #4
 8007e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e3a:	6838      	ldr	r0, [r7, #0]
 8007e3c:	f005 fc60 	bl	800d700 <USB_CoreInit>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e0d0      	b.n	8007ff4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f005 fd77 	bl	800d94c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
 8007e62:	e04a      	b.n	8007efa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e64:	7bfa      	ldrb	r2, [r7, #15]
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	333d      	adds	r3, #61	; 0x3d
 8007e74:	2201      	movs	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e78:	7bfa      	ldrb	r2, [r7, #15]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	333c      	adds	r3, #60	; 0x3c
 8007e88:	7bfa      	ldrb	r2, [r7, #15]
 8007e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e8c:	7bfa      	ldrb	r2, [r7, #15]
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	b298      	uxth	r0, r3
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	3342      	adds	r3, #66	; 0x42
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	333f      	adds	r3, #63	; 0x3f
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007eb8:	7bfa      	ldrb	r2, [r7, #15]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3344      	adds	r3, #68	; 0x44
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ecc:	7bfa      	ldrb	r2, [r7, #15]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	3348      	adds	r3, #72	; 0x48
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ee0:	7bfa      	ldrb	r2, [r7, #15]
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	3350      	adds	r3, #80	; 0x50
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	73fb      	strb	r3, [r7, #15]
 8007efa:	7bfa      	ldrb	r2, [r7, #15]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3af      	bcc.n	8007e64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	e044      	b.n	8007f94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f0a:	7bfa      	ldrb	r2, [r7, #15]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007f32:	7bfa      	ldrb	r2, [r7, #15]
 8007f34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f78:	7bfa      	ldrb	r2, [r7, #15]
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	3301      	adds	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d3b5      	bcc.n	8007f0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	687e      	ldr	r6, [r7, #4]
 8007fa6:	466d      	mov	r5, sp
 8007fa8:	f106 0410 	add.w	r4, r6, #16
 8007fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fbc:	1d33      	adds	r3, r6, #4
 8007fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fc0:	6838      	ldr	r0, [r7, #0]
 8007fc2:	f005 fced 	bl	800d9a0 <USB_DevInit>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e00d      	b.n	8007ff4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f006 fce2 	bl	800e9b6 <USB_DevDisconnect>

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ffc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_PCD_Start+0x1c>
 8008014:	2302      	movs	r3, #2
 8008016:	e020      	b.n	800805a <HAL_PCD_Start+0x5e>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	2b01      	cmp	r3, #1
 8008026:	d109      	bne.n	800803c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800802c:	2b01      	cmp	r3, #1
 800802e:	d005      	beq.n	800803c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f006 fca0 	bl	800e986 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f005 fc5c 	bl	800d908 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008062:	b590      	push	{r4, r7, lr}
 8008064:	b08d      	sub	sp, #52	; 0x34
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f006 fd47 	bl	800eb0c <USB_GetMode>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 838e 	bne.w	80087a2 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f006 fcab 	bl	800e9e6 <USB_ReadInterrupts>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8384 	beq.w	80087a0 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f006 fca2 	bl	800e9e6 <USB_ReadInterrupts>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d107      	bne.n	80080bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f002 0202 	and.w	r2, r2, #2
 80080ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f006 fc90 	bl	800e9e6 <USB_ReadInterrupts>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080d0:	d17b      	bne.n	80081ca <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f006 fc96 	bl	800ea0c <USB_ReadDevAllOutEpInterrupt>
 80080e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80080e2:	e06f      	b.n	80081c4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d064      	beq.n	80081b8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	4611      	mov	r1, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f006 fcbb 	bl	800ea74 <USB_ReadDevOutEPInterrupt>
 80080fe:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	461a      	mov	r2, r3
 8008118:	2301      	movs	r3, #1
 800811a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800811c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fe0e 	bl	8008d40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800812e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 ff0d 	bl	8008f50 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	461a      	mov	r2, r3
 8008144:	2308      	movs	r3, #8
 8008146:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	2310      	movs	r3, #16
 8008162:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d015      	beq.n	800819a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d108      	bne.n	8008188 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008180:	461a      	mov	r2, r3
 8008182:	2101      	movs	r1, #1
 8008184:	f006 fd06 	bl	800eb94 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	2320      	movs	r3, #32
 8008198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b0:	461a      	mov	r2, r3
 80081b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	3301      	adds	r3, #1
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d18c      	bne.n	80080e4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f006 fc09 	bl	800e9e6 <USB_ReadInterrupts>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081de:	f040 80c4 	bne.w	800836a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f006 fc2a 	bl	800ea40 <USB_ReadDevAllInEpInterrupt>
 80081ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80081f2:	e0b6      	b.n	8008362 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80ab 	beq.w	8008356 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f006 fc50 	bl	800eab0 <USB_ReadDevInEPInterrupt>
 8008210:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05b      	beq.n	80082d4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	43db      	mvns	r3, r3
 8008236:	69f9      	ldr	r1, [r7, #28]
 8008238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800823c:	4013      	ands	r3, r2
 800823e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	461a      	mov	r2, r3
 800824e:	2301      	movs	r3, #1
 8008250:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d11b      	bne.n	8008292 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	3348      	adds	r3, #72	; 0x48
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4403      	add	r3, r0
 800827a:	3344      	adds	r3, #68	; 0x44
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4419      	add	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4403      	add	r3, r0
 800828e:	3348      	adds	r3, #72	; 0x48
 8008290:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	b2db      	uxtb	r3, r3
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f00e fa0e 	bl	80166ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d116      	bne.n	80082d4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d113      	bne.n	80082d4 <HAL_PCD_IRQHandler+0x272>
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b0:	4613      	mov	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	3350      	adds	r3, #80	; 0x50
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d108      	bne.n	80082d4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082cc:	461a      	mov	r2, r3
 80082ce:	2101      	movs	r1, #1
 80082d0:	f006 fc60 	bl	800eb94 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ea:	461a      	mov	r2, r3
 80082ec:	2308      	movs	r3, #8
 80082ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	461a      	mov	r2, r3
 8008308:	2310      	movs	r3, #16
 800830a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d008      	beq.n	8008328 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008322:	461a      	mov	r2, r3
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	461a      	mov	r2, r3
 8008340:	2302      	movs	r3, #2
 8008342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800834e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fc67 	bl	8008c24 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	3301      	adds	r3, #1
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	2b00      	cmp	r3, #0
 8008366:	f47f af45 	bne.w	80081f4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f006 fb39 	bl	800e9e6 <USB_ReadInterrupts>
 8008374:	4603      	mov	r3, r0
 8008376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800837a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800837e:	d122      	bne.n	80083c6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800839a:	2b01      	cmp	r3, #1
 800839c:	d108      	bne.n	80083b0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fe89 	bl	80090c0 <HAL_PCDEx_LPM_Callback>
 80083ae:	e002      	b.n	80083b6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f00e f9f9 	bl	80167a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695a      	ldr	r2, [r3, #20]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80083c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f006 fb0b 	bl	800e9e6 <USB_ReadInterrupts>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d112      	bne.n	8008402 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d102      	bne.n	80083f2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f00e f9b5 	bl	801675c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695a      	ldr	r2, [r3, #20]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008400:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f006 faed 	bl	800e9e6 <USB_ReadInterrupts>
 800840c:	4603      	mov	r3, r0
 800840e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008416:	f040 80a7 	bne.w	8008568 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2110      	movs	r1, #16
 8008434:	4618      	mov	r0, r3
 8008436:	f005 fc25 	bl	800dc84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800843a:	2300      	movs	r3, #0
 800843c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800843e:	e036      	b.n	80084ae <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844c:	461a      	mov	r2, r3
 800844e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008452:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008472:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	461a      	mov	r2, r3
 8008482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008486:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	3301      	adds	r3, #1
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d3c3      	bcc.n	8008440 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80084ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d016      	beq.n	8008502 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084e4:	f043 030b 	orr.w	r3, r3, #11
 80084e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fa:	f043 030b 	orr.w	r3, r3, #11
 80084fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008500:	e015      	b.n	800852e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008514:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008518:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008528:	f043 030b 	orr.w	r3, r3, #11
 800852c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800853c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008540:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008552:	461a      	mov	r2, r3
 8008554:	f006 fb1e 	bl	800eb94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f006 fa3a 	bl	800e9e6 <USB_ReadInterrupts>
 8008572:	4603      	mov	r3, r0
 8008574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857c:	d124      	bne.n	80085c8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f006 fad0 	bl	800eb28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f005 fbda 	bl	800dd46 <USB_GetDevSpeed>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681c      	ldr	r4, [r3, #0]
 800859e:	f001 f971 	bl	8009884 <HAL_RCC_GetHCLKFreq>
 80085a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	4620      	mov	r0, r4
 80085ae:	f005 f909 	bl	800d7c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f00e f8a9 	bl	801670a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80085c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f006 fa0a 	bl	800e9e6 <USB_ReadInterrupts>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d161      	bne.n	80086a0 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0210 	bic.w	r2, r2, #16
 80085ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	3304      	adds	r3, #4
 800860a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	0c5b      	lsrs	r3, r3, #17
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2b02      	cmp	r3, #2
 8008616:	d124      	bne.n	8008662 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d035      	beq.n	8008690 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800862e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008632:	b29b      	uxth	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	6a38      	ldr	r0, [r7, #32]
 8008638:	f006 f882 	bl	800e740 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008648:	441a      	add	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865a:	441a      	add	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	619a      	str	r2, [r3, #24]
 8008660:	e016      	b.n	8008690 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	0c5b      	lsrs	r3, r3, #17
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	2b06      	cmp	r3, #6
 800866c:	d110      	bne.n	8008690 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008674:	2208      	movs	r2, #8
 8008676:	4619      	mov	r1, r3
 8008678:	6a38      	ldr	r0, [r7, #32]
 800867a:	f006 f861 	bl	800e740 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	091b      	lsrs	r3, r3, #4
 8008686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0210 	orr.w	r2, r2, #16
 800869e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f006 f99e 	bl	800e9e6 <USB_ReadInterrupts>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d10a      	bne.n	80086ca <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f00e f81a 	bl	80166ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695a      	ldr	r2, [r3, #20]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f002 0208 	and.w	r2, r2, #8
 80086c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f006 f989 	bl	800e9e6 <USB_ReadInterrupts>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086de:	d10f      	bne.n	8008700 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f00e f87c 	bl	80167e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80086fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f006 f96e 	bl	800e9e6 <USB_ReadInterrupts>
 800870a:	4603      	mov	r3, r0
 800870c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008714:	d10f      	bne.n	8008736 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	b2db      	uxtb	r3, r3
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f00e f84f 	bl	80167c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695a      	ldr	r2, [r3, #20]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f006 f953 	bl	800e9e6 <USB_ReadInterrupts>
 8008740:	4603      	mov	r3, r0
 8008742:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874a:	d10a      	bne.n	8008762 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f00e f85d 	bl	801680c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695a      	ldr	r2, [r3, #20]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f006 f93d 	bl	800e9e6 <USB_ReadInterrupts>
 800876c:	4603      	mov	r3, r0
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b04      	cmp	r3, #4
 8008774:	d115      	bne.n	80087a2 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f00e f84d 	bl	8016828 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6859      	ldr	r1, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	e000      	b.n	80087a2 <HAL_PCD_IRQHandler+0x740>
      return;
 80087a0:	bf00      	nop
    }
  }
}
 80087a2:	3734      	adds	r7, #52	; 0x34
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd90      	pop	{r4, r7, pc}

080087a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_PCD_SetAddress+0x1a>
 80087be:	2302      	movs	r3, #2
 80087c0:	e013      	b.n	80087ea <HAL_PCD_SetAddress+0x42>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4611      	mov	r1, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f006 f8ad 	bl	800e93a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	4608      	mov	r0, r1
 80087fc:	4611      	mov	r1, r2
 80087fe:	461a      	mov	r2, r3
 8008800:	4603      	mov	r3, r0
 8008802:	70fb      	strb	r3, [r7, #3]
 8008804:	460b      	mov	r3, r1
 8008806:	803b      	strh	r3, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008814:	2b00      	cmp	r3, #0
 8008816:	da0f      	bge.n	8008838 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	f003 020f 	and.w	r2, r3, #15
 800881e:	4613      	mov	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	3338      	adds	r3, #56	; 0x38
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	3304      	adds	r3, #4
 800882e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	705a      	strb	r2, [r3, #1]
 8008836:	e00f      	b.n	8008858 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	4613      	mov	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	3304      	adds	r3, #4
 8008850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	b2da      	uxtb	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008864:	883a      	ldrh	r2, [r7, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	78ba      	ldrb	r2, [r7, #2]
 800886e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008882:	78bb      	ldrb	r3, [r7, #2]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d102      	bne.n	800888e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_PCD_EP_Open+0xaa>
 8008898:	2302      	movs	r3, #2
 800889a:	e00e      	b.n	80088ba <HAL_PCD_EP_Open+0xc8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68f9      	ldr	r1, [r7, #12]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f005 fa70 	bl	800dd90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80088ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	da0f      	bge.n	80088f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	4613      	mov	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	3338      	adds	r3, #56	; 0x38
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	4413      	add	r3, r2
 80088ea:	3304      	adds	r3, #4
 80088ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	705a      	strb	r2, [r3, #1]
 80088f4:	e00f      	b.n	8008916 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	f003 020f 	and.w	r2, r3, #15
 80088fc:	4613      	mov	r3, r2
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	f003 030f 	and.w	r3, r3, #15
 800891c:	b2da      	uxtb	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_PCD_EP_Close+0x6e>
 800892c:	2302      	movs	r3, #2
 800892e:	e00e      	b.n	800894e <HAL_PCD_EP_Close+0x8c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68f9      	ldr	r1, [r7, #12]
 800893e:	4618      	mov	r0, r3
 8008940:	f005 faae 	bl	800dea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b086      	sub	sp, #24
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
 8008962:	460b      	mov	r3, r1
 8008964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	f003 020f 	and.w	r2, r3, #15
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2200      	movs	r2, #0
 8008990:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d102      	bne.n	80089b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	6979      	ldr	r1, [r7, #20]
 80089ca:	f005 fd31 	bl	800e430 <USB_EP0StartXfer>
 80089ce:	e008      	b.n	80089e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	6979      	ldr	r1, [r7, #20]
 80089de:	f005 fae3 	bl	800dfa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	f003 020f 	and.w	r2, r3, #15
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a0e:	681b      	ldr	r3, [r3, #0]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	f003 020f 	and.w	r2, r3, #15
 8008a32:	4613      	mov	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	3338      	adds	r3, #56	; 0x38
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	3304      	adds	r3, #4
 8008a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d102      	bne.n	8008a76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6979      	ldr	r1, [r7, #20]
 8008a8e:	f005 fccf 	bl	800e430 <USB_EP0StartXfer>
 8008a92:	e008      	b.n	8008aa6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6979      	ldr	r1, [r7, #20]
 8008aa2:	f005 fa81 	bl	800dfa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	f003 020f 	and.w	r2, r3, #15
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d901      	bls.n	8008ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e050      	b.n	8008b70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	da0f      	bge.n	8008af6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f003 020f 	and.w	r2, r3, #15
 8008adc:	4613      	mov	r3, r2
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	3338      	adds	r3, #56	; 0x38
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3304      	adds	r3, #4
 8008aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	705a      	strb	r2, [r3, #1]
 8008af4:	e00d      	b.n	8008b12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	4613      	mov	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	4413      	add	r3, r2
 8008b08:	3304      	adds	r3, #4
 8008b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_PCD_EP_SetStall+0x82>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e01e      	b.n	8008b70 <HAL_PCD_EP_SetStall+0xc0>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f005 fe26 	bl	800e792 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	b2d9      	uxtb	r1, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b60:	461a      	mov	r2, r3
 8008b62:	f006 f817 	bl	800eb94 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	f003 020f 	and.w	r2, r3, #15
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d901      	bls.n	8008b96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e042      	b.n	8008c1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da0f      	bge.n	8008bbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	3338      	adds	r3, #56	; 0x38
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	705a      	strb	r2, [r3, #1]
 8008bbc:	e00f      	b.n	8008bde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	f003 020f 	and.w	r2, r3, #15
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <HAL_PCD_EP_ClrStall+0x86>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e00e      	b.n	8008c1c <HAL_PCD_EP_ClrStall+0xa4>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f005 fe2e 	bl	800e86e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	1a9b      	subs	r3, r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	3338      	adds	r3, #56	; 0x38
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4413      	add	r3, r2
 8008c48:	3304      	adds	r3, #4
 8008c4a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d901      	bls.n	8008c5c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e06c      	b.n	8008d36 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	695a      	ldr	r2, [r3, #20]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d902      	bls.n	8008c78 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3303      	adds	r3, #3
 8008c7c:	089b      	lsrs	r3, r3, #2
 8008c7e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c80:	e02b      	b.n	8008cda <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	695a      	ldr	r2, [r3, #20]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d902      	bls.n	8008c9e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	3303      	adds	r3, #3
 8008ca2:	089b      	lsrs	r3, r3, #2
 8008ca4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68d9      	ldr	r1, [r3, #12]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6978      	ldr	r0, [r7, #20]
 8008cbe:	f005 fd0a 	bl	800e6d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	441a      	add	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d809      	bhi.n	8008d04 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	699a      	ldr	r2, [r3, #24]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d203      	bcs.n	8008d04 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1be      	bne.n	8008c82 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d811      	bhi.n	8008d34 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	2201      	movs	r2, #1
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	6939      	ldr	r1, [r7, #16]
 8008d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d30:	4013      	ands	r3, r2
 8008d32:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	333c      	adds	r3, #60	; 0x3c
 8008d58:	3304      	adds	r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f040 80b3 	bne.w	8008ede <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d028      	beq.n	8008dd4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a70      	ldr	r2, [pc, #448]	; (8008f48 <PCD_EP_OutXfrComplete_int+0x208>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d90e      	bls.n	8008da8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	461a      	mov	r2, r3
 8008da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008da6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f00d fc59 	bl	8016660 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008db8:	461a      	mov	r2, r3
 8008dba:	2101      	movs	r1, #1
 8008dbc:	f005 feea 	bl	800eb94 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dcc:	461a      	mov	r2, r3
 8008dce:	2308      	movs	r3, #8
 8008dd0:	6093      	str	r3, [r2, #8]
 8008dd2:	e0b3      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	461a      	mov	r2, r3
 8008dec:	2320      	movs	r3, #32
 8008dee:	6093      	str	r3, [r2, #8]
 8008df0:	e0a4      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f040 809f 	bne.w	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a51      	ldr	r2, [pc, #324]	; (8008f48 <PCD_EP_OutXfrComplete_int+0x208>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d90f      	bls.n	8008e26 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00a      	beq.n	8008e26 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e22:	6093      	str	r3, [r2, #8]
 8008e24:	e08a      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	440b      	add	r3, r1
 8008e34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e38:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	0159      	lsls	r1, r3, #5
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008e4c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	4613      	mov	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	1a9b      	subs	r3, r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4403      	add	r3, r0
 8008e5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008e60:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	4613      	mov	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e74:	6819      	ldr	r1, [r3, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4403      	add	r3, r0
 8008e84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4419      	add	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4403      	add	r3, r0
 8008e9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e9e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f00d fbec 	bl	8016684 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d144      	bne.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d138      	bne.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	f005 fe5c 	bl	800eb94 <USB_EP0_OutStart>
 8008edc:	e02e      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a1a      	ldr	r2, [pc, #104]	; (8008f4c <PCD_EP_OutXfrComplete_int+0x20c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d124      	bne.n	8008f30 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00a      	beq.n	8008f06 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	461a      	mov	r2, r3
 8008efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f02:	6093      	str	r3, [r2, #8]
 8008f04:	e01a      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d008      	beq.n	8008f22 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2320      	movs	r3, #32
 8008f20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f00d fbab 	bl	8016684 <HAL_PCD_DataOutStageCallback>
 8008f2e:	e005      	b.n	8008f3c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f00d fba4 	bl	8016684 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	4f54300a 	.word	0x4f54300a
 8008f4c:	4f54310a 	.word	0x4f54310a

08008f50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	333c      	adds	r3, #60	; 0x3c
 8008f68:	3304      	adds	r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d113      	bne.n	8008fae <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a1f      	ldr	r2, [pc, #124]	; (8009008 <PCD_EP_OutSetupPacket_int+0xb8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d922      	bls.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01d      	beq.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008faa:	6093      	str	r3, [r2, #8]
 8008fac:	e012      	b.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a16      	ldr	r2, [pc, #88]	; (800900c <PCD_EP_OutSetupPacket_int+0xbc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d10e      	bne.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d009      	beq.n	8008fd4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f00d fb43 	bl	8016660 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	; (8009008 <PCD_EP_OutSetupPacket_int+0xb8>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d90c      	bls.n	8008ffc <PCD_EP_OutSetupPacket_int+0xac>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d108      	bne.n	8008ffc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	f005 fdcc 	bl	800eb94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	4f54300a 	.word	0x4f54300a
 800900c:	4f54310a 	.word	0x4f54310a

08009010 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
 800901c:	4613      	mov	r3, r2
 800901e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d107      	bne.n	800903e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800902e:	883b      	ldrh	r3, [r7, #0]
 8009030:	0419      	lsls	r1, r3, #16
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	430a      	orrs	r2, r1
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
 800903c:	e028      	b.n	8009090 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	0c1b      	lsrs	r3, r3, #16
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	4413      	add	r3, r2
 800904a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
 8009050:	e00d      	b.n	800906e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	3340      	adds	r3, #64	; 0x40
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	0c1b      	lsrs	r3, r3, #16
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	4413      	add	r3, r2
 8009066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	3301      	adds	r3, #1
 800906c:	73fb      	strb	r3, [r7, #15]
 800906e:	7bfa      	ldrb	r2, [r7, #15]
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	3b01      	subs	r3, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d3ec      	bcc.n	8009052 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009078:	883b      	ldrh	r3, [r7, #0]
 800907a:	0418      	lsls	r0, r3, #16
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	3b01      	subs	r3, #1
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	4302      	orrs	r2, r0
 8009088:	3340      	adds	r3, #64	; 0x40
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	887a      	ldrh	r2, [r7, #2]
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e22d      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d075      	beq.n	80091e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090f6:	4ba3      	ldr	r3, [pc, #652]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 030c 	and.w	r3, r3, #12
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d00c      	beq.n	800911c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009102:	4ba0      	ldr	r3, [pc, #640]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800910a:	2b08      	cmp	r3, #8
 800910c:	d112      	bne.n	8009134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800910e:	4b9d      	ldr	r3, [pc, #628]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800911a:	d10b      	bne.n	8009134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800911c:	4b99      	ldr	r3, [pc, #612]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05b      	beq.n	80091e0 <HAL_RCC_OscConfig+0x108>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d157      	bne.n	80091e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e208      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913c:	d106      	bne.n	800914c <HAL_RCC_OscConfig+0x74>
 800913e:	4b91      	ldr	r3, [pc, #580]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a90      	ldr	r2, [pc, #576]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e01d      	b.n	8009188 <HAL_RCC_OscConfig+0xb0>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009154:	d10c      	bne.n	8009170 <HAL_RCC_OscConfig+0x98>
 8009156:	4b8b      	ldr	r3, [pc, #556]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a8a      	ldr	r2, [pc, #552]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800915c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	4b88      	ldr	r3, [pc, #544]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a87      	ldr	r2, [pc, #540]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	e00b      	b.n	8009188 <HAL_RCC_OscConfig+0xb0>
 8009170:	4b84      	ldr	r3, [pc, #528]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a83      	ldr	r2, [pc, #524]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	4b81      	ldr	r3, [pc, #516]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a80      	ldr	r2, [pc, #512]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d013      	beq.n	80091b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009190:	f7fc fff4 	bl	800617c <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009198:	f7fc fff0 	bl	800617c <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b64      	cmp	r3, #100	; 0x64
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e1cd      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091aa:	4b76      	ldr	r3, [pc, #472]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0xc0>
 80091b6:	e014      	b.n	80091e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b8:	f7fc ffe0 	bl	800617c <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091c0:	f7fc ffdc 	bl	800617c <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b64      	cmp	r3, #100	; 0x64
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e1b9      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091d2:	4b6c      	ldr	r3, [pc, #432]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f0      	bne.n	80091c0 <HAL_RCC_OscConfig+0xe8>
 80091de:	e000      	b.n	80091e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d063      	beq.n	80092b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091ee:	4b65      	ldr	r3, [pc, #404]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 030c 	and.w	r3, r3, #12
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091fa:	4b62      	ldr	r3, [pc, #392]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009202:	2b08      	cmp	r3, #8
 8009204:	d11c      	bne.n	8009240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009206:	4b5f      	ldr	r3, [pc, #380]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d116      	bne.n	8009240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009212:	4b5c      	ldr	r3, [pc, #368]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <HAL_RCC_OscConfig+0x152>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d001      	beq.n	800922a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e18d      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800922a:	4b56      	ldr	r3, [pc, #344]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	4952      	ldr	r1, [pc, #328]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800923a:	4313      	orrs	r3, r2
 800923c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800923e:	e03a      	b.n	80092b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d020      	beq.n	800928a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009248:	4b4f      	ldr	r3, [pc, #316]	; (8009388 <HAL_RCC_OscConfig+0x2b0>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924e:	f7fc ff95 	bl	800617c <HAL_GetTick>
 8009252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009254:	e008      	b.n	8009268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009256:	f7fc ff91 	bl	800617c <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d901      	bls.n	8009268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e16e      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009268:	4b46      	ldr	r3, [pc, #280]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0f0      	beq.n	8009256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009274:	4b43      	ldr	r3, [pc, #268]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	00db      	lsls	r3, r3, #3
 8009282:	4940      	ldr	r1, [pc, #256]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009284:	4313      	orrs	r3, r2
 8009286:	600b      	str	r3, [r1, #0]
 8009288:	e015      	b.n	80092b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800928a:	4b3f      	ldr	r3, [pc, #252]	; (8009388 <HAL_RCC_OscConfig+0x2b0>)
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009290:	f7fc ff74 	bl	800617c <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009296:	e008      	b.n	80092aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009298:	f7fc ff70 	bl	800617c <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e14d      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092aa:	4b36      	ldr	r3, [pc, #216]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1f0      	bne.n	8009298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d030      	beq.n	8009324 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d016      	beq.n	80092f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ca:	4b30      	ldr	r3, [pc, #192]	; (800938c <HAL_RCC_OscConfig+0x2b4>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d0:	f7fc ff54 	bl	800617c <HAL_GetTick>
 80092d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092d8:	f7fc ff50 	bl	800617c <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e12d      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092ea:	4b26      	ldr	r3, [pc, #152]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 80092ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f0      	beq.n	80092d8 <HAL_RCC_OscConfig+0x200>
 80092f6:	e015      	b.n	8009324 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092f8:	4b24      	ldr	r3, [pc, #144]	; (800938c <HAL_RCC_OscConfig+0x2b4>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092fe:	f7fc ff3d 	bl	800617c <HAL_GetTick>
 8009302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009304:	e008      	b.n	8009318 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009306:	f7fc ff39 	bl	800617c <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e116      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800931a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1f0      	bne.n	8009306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80a0 	beq.w	8009472 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009336:	4b13      	ldr	r3, [pc, #76]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10f      	bne.n	8009362 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	4a0e      	ldr	r2, [pc, #56]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 800934c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009350:	6413      	str	r3, [r2, #64]	; 0x40
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <HAL_RCC_OscConfig+0x2ac>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009362:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <HAL_RCC_OscConfig+0x2b8>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936a:	2b00      	cmp	r3, #0
 800936c:	d121      	bne.n	80093b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800936e:	4b08      	ldr	r3, [pc, #32]	; (8009390 <HAL_RCC_OscConfig+0x2b8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a07      	ldr	r2, [pc, #28]	; (8009390 <HAL_RCC_OscConfig+0x2b8>)
 8009374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800937a:	f7fc feff 	bl	800617c <HAL_GetTick>
 800937e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009380:	e011      	b.n	80093a6 <HAL_RCC_OscConfig+0x2ce>
 8009382:	bf00      	nop
 8009384:	40023800 	.word	0x40023800
 8009388:	42470000 	.word	0x42470000
 800938c:	42470e80 	.word	0x42470e80
 8009390:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009394:	f7fc fef2 	bl	800617c <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e0cf      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a6:	4b6a      	ldr	r3, [pc, #424]	; (8009550 <HAL_RCC_OscConfig+0x478>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0f0      	beq.n	8009394 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d106      	bne.n	80093c8 <HAL_RCC_OscConfig+0x2f0>
 80093ba:	4b66      	ldr	r3, [pc, #408]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	4a65      	ldr	r2, [pc, #404]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093c0:	f043 0301 	orr.w	r3, r3, #1
 80093c4:	6713      	str	r3, [r2, #112]	; 0x70
 80093c6:	e01c      	b.n	8009402 <HAL_RCC_OscConfig+0x32a>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	2b05      	cmp	r3, #5
 80093ce:	d10c      	bne.n	80093ea <HAL_RCC_OscConfig+0x312>
 80093d0:	4b60      	ldr	r3, [pc, #384]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d4:	4a5f      	ldr	r2, [pc, #380]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093d6:	f043 0304 	orr.w	r3, r3, #4
 80093da:	6713      	str	r3, [r2, #112]	; 0x70
 80093dc:	4b5d      	ldr	r3, [pc, #372]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e0:	4a5c      	ldr	r2, [pc, #368]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6713      	str	r3, [r2, #112]	; 0x70
 80093e8:	e00b      	b.n	8009402 <HAL_RCC_OscConfig+0x32a>
 80093ea:	4b5a      	ldr	r3, [pc, #360]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	4a59      	ldr	r2, [pc, #356]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093f0:	f023 0301 	bic.w	r3, r3, #1
 80093f4:	6713      	str	r3, [r2, #112]	; 0x70
 80093f6:	4b57      	ldr	r3, [pc, #348]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	4a56      	ldr	r2, [pc, #344]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d015      	beq.n	8009436 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940a:	f7fc feb7 	bl	800617c <HAL_GetTick>
 800940e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009410:	e00a      	b.n	8009428 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009412:	f7fc feb3 	bl	800617c <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009420:	4293      	cmp	r3, r2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e08e      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009428:	4b4a      	ldr	r3, [pc, #296]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 800942a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0ee      	beq.n	8009412 <HAL_RCC_OscConfig+0x33a>
 8009434:	e014      	b.n	8009460 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009436:	f7fc fea1 	bl	800617c <HAL_GetTick>
 800943a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800943c:	e00a      	b.n	8009454 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800943e:	f7fc fe9d 	bl	800617c <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	f241 3288 	movw	r2, #5000	; 0x1388
 800944c:	4293      	cmp	r3, r2
 800944e:	d901      	bls.n	8009454 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e078      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009454:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 8009456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1ee      	bne.n	800943e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d105      	bne.n	8009472 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009466:	4b3b      	ldr	r3, [pc, #236]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	4a3a      	ldr	r2, [pc, #232]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 800946c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009470:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d064      	beq.n	8009544 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800947a:	4b36      	ldr	r3, [pc, #216]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	2b08      	cmp	r3, #8
 8009484:	d05c      	beq.n	8009540 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d141      	bne.n	8009512 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800948e:	4b32      	ldr	r3, [pc, #200]	; (8009558 <HAL_RCC_OscConfig+0x480>)
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009494:	f7fc fe72 	bl	800617c <HAL_GetTick>
 8009498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949a:	e008      	b.n	80094ae <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800949c:	f7fc fe6e 	bl	800617c <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e04b      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f0      	bne.n	800949c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69da      	ldr	r2, [r3, #28]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	019b      	lsls	r3, r3, #6
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	3b01      	subs	r3, #1
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	491d      	ldr	r1, [pc, #116]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094e4:	4b1c      	ldr	r3, [pc, #112]	; (8009558 <HAL_RCC_OscConfig+0x480>)
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ea:	f7fc fe47 	bl	800617c <HAL_GetTick>
 80094ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f2:	f7fc fe43 	bl	800617c <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e020      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009504:	4b13      	ldr	r3, [pc, #76]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0f0      	beq.n	80094f2 <HAL_RCC_OscConfig+0x41a>
 8009510:	e018      	b.n	8009544 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009512:	4b11      	ldr	r3, [pc, #68]	; (8009558 <HAL_RCC_OscConfig+0x480>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009518:	f7fc fe30 	bl	800617c <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009520:	f7fc fe2c 	bl	800617c <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e009      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009532:	4b08      	ldr	r3, [pc, #32]	; (8009554 <HAL_RCC_OscConfig+0x47c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f0      	bne.n	8009520 <HAL_RCC_OscConfig+0x448>
 800953e:	e001      	b.n	8009544 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	40007000 	.word	0x40007000
 8009554:	40023800 	.word	0x40023800
 8009558:	42470060 	.word	0x42470060

0800955c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0ca      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009570:	4b67      	ldr	r3, [pc, #412]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d90c      	bls.n	8009598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957e:	4b64      	ldr	r3, [pc, #400]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009586:	4b62      	ldr	r3, [pc, #392]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d001      	beq.n	8009598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e0b6      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d020      	beq.n	80095e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095b0:	4b58      	ldr	r3, [pc, #352]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	4a57      	ldr	r2, [pc, #348]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80095ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095c8:	4b52      	ldr	r3, [pc, #328]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	4a51      	ldr	r2, [pc, #324]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095d4:	4b4f      	ldr	r3, [pc, #316]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	494c      	ldr	r1, [pc, #304]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d044      	beq.n	800967c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d107      	bne.n	800960a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095fa:	4b46      	ldr	r3, [pc, #280]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d119      	bne.n	800963a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e07d      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d003      	beq.n	800961a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009616:	2b03      	cmp	r3, #3
 8009618:	d107      	bne.n	800962a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800961a:	4b3e      	ldr	r3, [pc, #248]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e06d      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800962a:	4b3a      	ldr	r3, [pc, #232]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e065      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800963a:	4b36      	ldr	r3, [pc, #216]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f023 0203 	bic.w	r2, r3, #3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	4933      	ldr	r1, [pc, #204]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 8009648:	4313      	orrs	r3, r2
 800964a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800964c:	f7fc fd96 	bl	800617c <HAL_GetTick>
 8009650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009652:	e00a      	b.n	800966a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009654:	f7fc fd92 	bl	800617c <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009662:	4293      	cmp	r3, r2
 8009664:	d901      	bls.n	800966a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e04d      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800966a:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f003 020c 	and.w	r2, r3, #12
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	429a      	cmp	r2, r3
 800967a:	d1eb      	bne.n	8009654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800967c:	4b24      	ldr	r3, [pc, #144]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 030f 	and.w	r3, r3, #15
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d20c      	bcs.n	80096a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800968a:	4b21      	ldr	r3, [pc, #132]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009692:	4b1f      	ldr	r3, [pc, #124]	; (8009710 <HAL_RCC_ClockConfig+0x1b4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d001      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e030      	b.n	8009706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d008      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096b0:	4b18      	ldr	r3, [pc, #96]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4915      	ldr	r1, [pc, #84]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	490d      	ldr	r1, [pc, #52]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096e2:	f000 f81d 	bl	8009720 <HAL_RCC_GetSysClockFreq>
 80096e6:	4601      	mov	r1, r0
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <HAL_RCC_ClockConfig+0x1b8>)
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	091b      	lsrs	r3, r3, #4
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	4a09      	ldr	r2, [pc, #36]	; (8009718 <HAL_RCC_ClockConfig+0x1bc>)
 80096f4:	5cd3      	ldrb	r3, [r2, r3]
 80096f6:	fa21 f303 	lsr.w	r3, r1, r3
 80096fa:	4a08      	ldr	r2, [pc, #32]	; (800971c <HAL_RCC_ClockConfig+0x1c0>)
 80096fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80096fe:	2000      	movs	r0, #0
 8009700:	f7fc fcf8 	bl	80060f4 <HAL_InitTick>

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	40023c00 	.word	0x40023c00
 8009714:	40023800 	.word	0x40023800
 8009718:	0801e444 	.word	0x0801e444
 800971c:	20000170 	.word	0x20000170

08009720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	2300      	movs	r3, #0
 8009730:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009736:	4b50      	ldr	r3, [pc, #320]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 030c 	and.w	r3, r3, #12
 800973e:	2b04      	cmp	r3, #4
 8009740:	d007      	beq.n	8009752 <HAL_RCC_GetSysClockFreq+0x32>
 8009742:	2b08      	cmp	r3, #8
 8009744:	d008      	beq.n	8009758 <HAL_RCC_GetSysClockFreq+0x38>
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 808d 	bne.w	8009866 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800974c:	4b4b      	ldr	r3, [pc, #300]	; (800987c <HAL_RCC_GetSysClockFreq+0x15c>)
 800974e:	60bb      	str	r3, [r7, #8]
       break;
 8009750:	e08c      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009752:	4b4b      	ldr	r3, [pc, #300]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009754:	60bb      	str	r3, [r7, #8]
      break;
 8009756:	e089      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009758:	4b47      	ldr	r3, [pc, #284]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009762:	4b45      	ldr	r3, [pc, #276]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d023      	beq.n	80097b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976e:	4b42      	ldr	r3, [pc, #264]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	099b      	lsrs	r3, r3, #6
 8009774:	f04f 0400 	mov.w	r4, #0
 8009778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	ea03 0501 	and.w	r5, r3, r1
 8009784:	ea04 0602 	and.w	r6, r4, r2
 8009788:	4a3d      	ldr	r2, [pc, #244]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 800978a:	fb02 f106 	mul.w	r1, r2, r6
 800978e:	2200      	movs	r2, #0
 8009790:	fb02 f205 	mul.w	r2, r2, r5
 8009794:	440a      	add	r2, r1
 8009796:	493a      	ldr	r1, [pc, #232]	; (8009880 <HAL_RCC_GetSysClockFreq+0x160>)
 8009798:	fba5 0101 	umull	r0, r1, r5, r1
 800979c:	1853      	adds	r3, r2, r1
 800979e:	4619      	mov	r1, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f04f 0400 	mov.w	r4, #0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4623      	mov	r3, r4
 80097aa:	f7f7 facd 	bl	8000d48 <__aeabi_uldivmod>
 80097ae:	4603      	mov	r3, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e049      	b.n	800984a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097b6:	4b30      	ldr	r3, [pc, #192]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	099b      	lsrs	r3, r3, #6
 80097bc:	f04f 0400 	mov.w	r4, #0
 80097c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	ea03 0501 	and.w	r5, r3, r1
 80097cc:	ea04 0602 	and.w	r6, r4, r2
 80097d0:	4629      	mov	r1, r5
 80097d2:	4632      	mov	r2, r6
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	f04f 0400 	mov.w	r4, #0
 80097dc:	0154      	lsls	r4, r2, #5
 80097de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80097e2:	014b      	lsls	r3, r1, #5
 80097e4:	4619      	mov	r1, r3
 80097e6:	4622      	mov	r2, r4
 80097e8:	1b49      	subs	r1, r1, r5
 80097ea:	eb62 0206 	sbc.w	r2, r2, r6
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	f04f 0400 	mov.w	r4, #0
 80097f6:	0194      	lsls	r4, r2, #6
 80097f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80097fc:	018b      	lsls	r3, r1, #6
 80097fe:	1a5b      	subs	r3, r3, r1
 8009800:	eb64 0402 	sbc.w	r4, r4, r2
 8009804:	f04f 0100 	mov.w	r1, #0
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	00e2      	lsls	r2, r4, #3
 800980e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009812:	00d9      	lsls	r1, r3, #3
 8009814:	460b      	mov	r3, r1
 8009816:	4614      	mov	r4, r2
 8009818:	195b      	adds	r3, r3, r5
 800981a:	eb44 0406 	adc.w	r4, r4, r6
 800981e:	f04f 0100 	mov.w	r1, #0
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	02a2      	lsls	r2, r4, #10
 8009828:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800982c:	0299      	lsls	r1, r3, #10
 800982e:	460b      	mov	r3, r1
 8009830:	4614      	mov	r4, r2
 8009832:	4618      	mov	r0, r3
 8009834:	4621      	mov	r1, r4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f04f 0400 	mov.w	r4, #0
 800983c:	461a      	mov	r2, r3
 800983e:	4623      	mov	r3, r4
 8009840:	f7f7 fa82 	bl	8000d48 <__aeabi_uldivmod>
 8009844:	4603      	mov	r3, r0
 8009846:	460c      	mov	r4, r1
 8009848:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800984a:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <HAL_RCC_GetSysClockFreq+0x158>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	0c1b      	lsrs	r3, r3, #16
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	3301      	adds	r3, #1
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009862:	60bb      	str	r3, [r7, #8]
      break;
 8009864:	e002      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <HAL_RCC_GetSysClockFreq+0x15c>)
 8009868:	60bb      	str	r3, [r7, #8]
      break;
 800986a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800986c:	68bb      	ldr	r3, [r7, #8]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	bf00      	nop
 8009878:	40023800 	.word	0x40023800
 800987c:	00f42400 	.word	0x00f42400
 8009880:	00b71b00 	.word	0x00b71b00

08009884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <HAL_RCC_GetHCLKFreq+0x14>)
 800988a:	681b      	ldr	r3, [r3, #0]
}
 800988c:	4618      	mov	r0, r3
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	20000170 	.word	0x20000170

0800989c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098a0:	f7ff fff0 	bl	8009884 <HAL_RCC_GetHCLKFreq>
 80098a4:	4601      	mov	r1, r0
 80098a6:	4b05      	ldr	r3, [pc, #20]	; (80098bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	0a9b      	lsrs	r3, r3, #10
 80098ac:	f003 0307 	and.w	r3, r3, #7
 80098b0:	4a03      	ldr	r2, [pc, #12]	; (80098c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098b2:	5cd3      	ldrb	r3, [r2, r3]
 80098b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40023800 	.word	0x40023800
 80098c0:	0801e454 	.word	0x0801e454

080098c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098c8:	f7ff ffdc 	bl	8009884 <HAL_RCC_GetHCLKFreq>
 80098cc:	4601      	mov	r1, r0
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	0b5b      	lsrs	r3, r3, #13
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	4a03      	ldr	r2, [pc, #12]	; (80098e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098da:	5cd3      	ldrb	r3, [r2, r3]
 80098dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	40023800 	.word	0x40023800
 80098e8:	0801e454 	.word	0x0801e454

080098ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009910:	2b00      	cmp	r3, #0
 8009912:	d035      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009914:	4b62      	ldr	r3, [pc, #392]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800991a:	f7fc fc2f 	bl	800617c <HAL_GetTick>
 800991e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009920:	e008      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009922:	f7fc fc2b 	bl	800617c <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e0b0      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009934:	4b5b      	ldr	r3, [pc, #364]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1f0      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	019a      	lsls	r2, r3, #6
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	071b      	lsls	r3, r3, #28
 800994c:	4955      	ldr	r1, [pc, #340]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009954:	4b52      	ldr	r3, [pc, #328]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009956:	2201      	movs	r2, #1
 8009958:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800995a:	f7fc fc0f 	bl	800617c <HAL_GetTick>
 800995e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009960:	e008      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009962:	f7fc fc0b 	bl	800617c <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e090      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009974:	4b4b      	ldr	r3, [pc, #300]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 8083 	beq.w	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	4b44      	ldr	r3, [pc, #272]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	4a43      	ldr	r2, [pc, #268]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800999c:	6413      	str	r3, [r2, #64]	; 0x40
 800999e:	4b41      	ldr	r3, [pc, #260]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80099aa:	4b3f      	ldr	r3, [pc, #252]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a3e      	ldr	r2, [pc, #248]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80099b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099b6:	f7fc fbe1 	bl	800617c <HAL_GetTick>
 80099ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80099bc:	e008      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80099be:	f7fc fbdd 	bl	800617c <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d901      	bls.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e062      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80099d0:	4b35      	ldr	r3, [pc, #212]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0f0      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80099dc:	4b31      	ldr	r3, [pc, #196]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80099de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d02f      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d028      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80099fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a04:	4b29      	ldr	r3, [pc, #164]	; (8009aac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009a06:	2201      	movs	r2, #1
 8009a08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009a0a:	4b28      	ldr	r3, [pc, #160]	; (8009aac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009a10:	4a24      	ldr	r2, [pc, #144]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009a16:	4b23      	ldr	r3, [pc, #140]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d114      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009a22:	f7fc fbab 	bl	800617c <HAL_GetTick>
 8009a26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a28:	e00a      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a2a:	f7fc fba7 	bl	800617c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e02a      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a40:	4b18      	ldr	r3, [pc, #96]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0ee      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a58:	d10d      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a6e:	490d      	ldr	r1, [pc, #52]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	608b      	str	r3, [r1, #8]
 8009a74:	e005      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a80:	6093      	str	r3, [r2, #8]
 8009a82:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a8e:	4905      	ldr	r1, [pc, #20]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	42470068 	.word	0x42470068
 8009aa4:	40023800 	.word	0x40023800
 8009aa8:	40007000 	.word	0x40007000
 8009aac:	42470e40 	.word	0x42470e40

08009ab0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e083      	b.n	8009bca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	7f5b      	ldrb	r3, [r3, #29]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d105      	bne.n	8009ad8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f00c f950 	bl	8015d78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	22ca      	movs	r2, #202	; 0xca
 8009ae4:	625a      	str	r2, [r3, #36]	; 0x24
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2253      	movs	r2, #83	; 0x53
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f944 	bl	8009d7c <RTC_EnterInitMode>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d008      	beq.n	8009b0c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	22ff      	movs	r2, #255	; 0xff
 8009b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2204      	movs	r2, #4
 8009b06:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e05e      	b.n	8009bca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6899      	ldr	r1, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	431a      	orrs	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68d2      	ldr	r2, [r2, #12]
 8009b46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6919      	ldr	r1, [r3, #16]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	041a      	lsls	r2, r3, #16
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10e      	bne.n	8009b98 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f8d6 	bl	8009d2c <HAL_RTC_WaitForSynchro>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d008      	beq.n	8009b98 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	22ff      	movs	r2, #255	; 0xff
 8009b8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2204      	movs	r2, #4
 8009b92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e018      	b.n	8009bca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ba6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	22ff      	movs	r2, #255	; 0xff
 8009bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
  }
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009c04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009c08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	0c1b      	lsrs	r3, r3, #16
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	0a1b      	lsrs	r3, r3, #8
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11a      	bne.n	8009c84 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f8be 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f8b5 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	789b      	ldrb	r3, [r3, #2]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f8ac 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b086      	sub	sp, #24
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009cac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	0c1b      	lsrs	r3, r3, #16
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 031f 	and.w	r3, r3, #31
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	0b5b      	lsrs	r3, r3, #13
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d11a      	bne.n	8009d22 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	78db      	ldrb	r3, [r3, #3]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f86f 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f866 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	789b      	ldrb	r3, [r3, #2]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f85d 	bl	8009dd4 <RTC_Bcd2ToByte>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009d46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d48:	f7fc fa18 	bl	800617c <HAL_GetTick>
 8009d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009d4e:	e009      	b.n	8009d64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d50:	f7fc fa14 	bl	800617c <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d5e:	d901      	bls.n	8009d64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e007      	b.n	8009d74 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0ee      	beq.n	8009d50 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d119      	bne.n	8009dca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009da0:	f7fc f9ec 	bl	800617c <HAL_GetTick>
 8009da4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009da6:	e009      	b.n	8009dbc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009da8:	f7fc f9e8 	bl	800617c <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db6:	d901      	bls.n	8009dbc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e007      	b.n	8009dcc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0ee      	beq.n	8009da8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	f003 030f 	and.w	r3, r3, #15
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	b2db      	uxtb	r3, r3
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e01d      	b.n	8009e5e <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f00b ffb5 	bl	8015da4 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2203      	movs	r2, #3
 8009e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f810 	bl	8009e68 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e68:	b5b0      	push	{r4, r5, r7, lr}
 8009e6a:	b08e      	sub	sp, #56	; 0x38
 8009e6c:	af04      	add	r7, sp, #16
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009e88:	2376      	movs	r3, #118	; 0x76
 8009e8a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681d      	ldr	r5, [r3, #0]
 8009e90:	466c      	mov	r4, sp
 8009e92:	f107 0318 	add.w	r3, r7, #24
 8009e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e9e:	f107 030c 	add.w	r3, r7, #12
 8009ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f002 fecb 	bl	800cc40 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8009eaa:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <HAL_SD_InitCard+0xb4>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f002 ff0c 	bl	800ccd2 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009eba:	4b18      	ldr	r3, [pc, #96]	; (8009f1c <HAL_SD_InitCard+0xb4>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8009ec0:	2002      	movs	r0, #2
 8009ec2:	f7fc f967 	bl	8006194 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fffe 	bl	800aec8 <SD_PowerON>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e013      	b.n	8009f14 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 ff22 	bl	800ad36 <SD_InitCard>
 8009ef2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00b      	beq.n	8009f12 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e000      	b.n	8009f14 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3728      	adds	r7, #40	; 0x28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f1c:	422580a0 	.word	0x422580a0

08009f20 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08c      	sub	sp, #48	; 0x30
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d107      	bne.n	8009f48 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0ad      	b.n	800a0a4 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	f040 80a6 	bne.w	800a0a2 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	441a      	add	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d907      	bls.n	8009f7a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e094      	b.n	800a0a4 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2200      	movs	r2, #0
 8009f88:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009f98:	f043 0302 	orr.w	r3, r3, #2
 8009f9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa2:	4a42      	ldr	r2, [pc, #264]	; (800a0ac <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	4a41      	ldr	r2, [pc, #260]	; (800a0b0 <HAL_SD_ReadBlocks_DMA+0x190>)
 8009fac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3380      	adds	r3, #128	; 0x80
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	025b      	lsls	r3, r3, #9
 8009fc8:	089b      	lsrs	r3, r3, #2
 8009fca:	f7fc fac5 	bl	8006558 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009fce:	4b39      	ldr	r3, [pc, #228]	; (800a0b4 <HAL_SD_ReadBlocks_DMA+0x194>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d002      	beq.n	8009fe2 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	025b      	lsls	r3, r3, #9
 8009fe0:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	025b      	lsls	r3, r3, #9
 8009fec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009fee:	2390      	movs	r3, #144	; 0x90
 8009ff0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f107 0214 	add.w	r2, r7, #20
 800a006:	4611      	mov	r1, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 feca 	bl	800cda2 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a016:	4618      	mov	r0, r3
 800a018:	f002 feef 	bl	800cdfa <SDMMC_CmdBlockLength>
 800a01c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d010      	beq.n	800a046 <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a02c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	431a      	orrs	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e02e      	b.n	800a0a4 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d90a      	bls.n	800a062 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2282      	movs	r2, #130	; 0x82
 800a050:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	f002 ff16 	bl	800ce8a <SDMMC_CmdReadMultiBlock>
 800a05e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a060:	e009      	b.n	800a076 <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2281      	movs	r2, #129	; 0x81
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 fee7 	bl	800ce42 <SDMMC_CmdReadSingleBlock>
 800a074:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d010      	beq.n	800a09e <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	431a      	orrs	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e002      	b.n	800a0a4 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e000      	b.n	800a0a4 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a0a2:	2302      	movs	r3, #2
  }
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3730      	adds	r7, #48	; 0x30
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	0800ab47 	.word	0x0800ab47
 800a0b0:	0800abb5 	.word	0x0800abb5
 800a0b4:	4225858c 	.word	0x4225858c

0800a0b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08c      	sub	sp, #48	; 0x30
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d107      	bne.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0ad      	b.n	800a23c <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	f040 80a6 	bne.w	800a23a <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d907      	bls.n	800a112 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a106:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e094      	b.n	800a23c <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2200      	movs	r2, #0
 800a120:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	4a42      	ldr	r2, [pc, #264]	; (800a244 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a13c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	4a41      	ldr	r2, [pc, #260]	; (800a248 <HAL_SD_WriteBlocks_DMA+0x190>)
 800a144:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	2200      	movs	r2, #0
 800a14c:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a152:	2b01      	cmp	r3, #1
 800a154:	d002      	beq.n	800a15c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	025b      	lsls	r3, r3, #9
 800a15a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a164:	4618      	mov	r0, r3
 800a166:	f002 fe48 	bl	800cdfa <SDMMC_CmdBlockLength>
 800a16a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d010      	beq.n	800a194 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a17a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	431a      	orrs	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e053      	b.n	800a23c <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d90a      	bls.n	800a1b0 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	22a0      	movs	r2, #160	; 0xa0
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f002 feb7 	bl	800cf1a <SDMMC_CmdWriteMultiBlock>
 800a1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1ae:	e009      	b.n	800a1c4 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2290      	movs	r2, #144	; 0x90
 800a1b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 fe88 	bl	800ced2 <SDMMC_CmdWriteSingleBlock>
 800a1c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d010      	beq.n	800a1ec <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e027      	b.n	800a23c <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a1ec:	4b17      	ldr	r3, [pc, #92]	; (800a24c <HAL_SD_WriteBlocks_DMA+0x194>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3380      	adds	r3, #128	; 0x80
 800a1fe:	461a      	mov	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	025b      	lsls	r3, r3, #9
 800a204:	089b      	lsrs	r3, r3, #2
 800a206:	f7fc f9a7 	bl	8006558 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	025b      	lsls	r3, r3, #9
 800a214:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a216:	2390      	movs	r3, #144	; 0x90
 800a218:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a21a:	2300      	movs	r3, #0
 800a21c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a21e:	2300      	movs	r3, #0
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a222:	2301      	movs	r3, #1
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f107 0214 	add.w	r2, r7, #20
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f002 fdb6 	bl	800cda2 <SDIO_ConfigData>
    
    return HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	e000      	b.n	800a23c <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a23a:	2302      	movs	r3, #2
  }
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3730      	adds	r7, #48	; 0x30
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	0800ab1d 	.word	0x0800ab1d
 800a248:	0800abb5 	.word	0x0800abb5
 800a24c:	4225858c 	.word	0x4225858c

0800a250 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 808d 	beq.w	800a386 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a274:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6812      	ldr	r2, [r2, #0]
 800a280:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a284:	f023 0302 	bic.w	r3, r3, #2
 800a288:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	f003 0308 	and.w	r3, r3, #8
 800a292:	2b00      	cmp	r3, #0
 800a294:	d03a      	beq.n	800a30c <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d105      	bne.n	800a2ae <HAL_SD_IRQHandler+0x5e>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d011      	beq.n	800a2d2 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f002 fe56 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800a2b8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d008      	beq.n	800a2d2 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f925 	bl	800a51c <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d105      	bne.n	800a2fc <HAL_SD_IRQHandler+0xac>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f008 fc87 	bl	8012c10 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800a302:	e103      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f008 fc79 	bl	8012bfc <HAL_SD_TxCpltCallback>
}
 800a30a:	e0ff      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80f9 	beq.w	800a50c <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d011      	beq.n	800a34a <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 fe1a 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800a330:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f8e9 	bl	800a51c <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	f040 80da 	bne.w	800a50c <HAL_SD_IRQHandler+0x2bc>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 80d3 	bne.w	800a50c <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0208 	bic.w	r2, r2, #8
 800a374:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f008 fc3c 	bl	8012bfc <HAL_SD_TxCpltCallback>
}
 800a384:	e0c2      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d008      	beq.n	800a3a6 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 ffef 	bl	800b382 <SD_Write_IT>
}
 800a3a4:	e0b2      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 ffb7 	bl	800b332 <SD_Read_IT>
}
 800a3c4:	e0a2      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3cc:	f240 233a 	movw	r3, #570	; 0x23a
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 809a 	beq.w	800a50c <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	f043 0202 	orr.w	r2, r3, #2
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f003 0308 	and.w	r3, r3, #8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a404:	f043 0208 	orr.w	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d005      	beq.n	800a426 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	f043 0220 	orr.w	r2, r3, #32
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d005      	beq.n	800a440 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a438:	f043 0210 	orr.w	r2, r3, #16
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	f043 0208 	orr.w	r2, r3, #8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a462:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6812      	ldr	r2, [r2, #0]
 800a46e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a472:	f023 0302 	bic.w	r3, r3, #2
 800a476:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a480:	2b00      	cmp	r3, #0
 800a482:	d036      	beq.n	800a4f2 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d011      	beq.n	800a4b0 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	4a20      	ldr	r2, [pc, #128]	; (800a514 <HAL_SD_IRQHandler+0x2c4>)
 800a492:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fc f8bd 	bl	8006618 <HAL_DMA_Abort_IT>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d033      	beq.n	800a50c <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fbc8 	bl	800ac3e <SD_DMATxAbort>
}
 800a4ae:	e02d      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d011      	beq.n	800a4dc <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4bc:	4a16      	ldr	r2, [pc, #88]	; (800a518 <HAL_SD_IRQHandler+0x2c8>)
 800a4be:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fc f8a7 	bl	8006618 <HAL_DMA_Abort_IT>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01d      	beq.n	800a50c <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fbf0 	bl	800acba <SD_DMARxAbort>
}
 800a4da:	e017      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f008 fb7c 	bl	8012be8 <HAL_SD_AbortCallback>
}
 800a4f0:	e00c      	b.n	800a50c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	f003 0308 	and.w	r3, r3, #8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d006      	beq.n	800a50c <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f808 	bl	800a51c <HAL_SD_ErrorCallback>
}
 800a50c:	bf00      	nop
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	0800ac3f 	.word	0x0800ac3f
 800a518:	0800acbb 	.word	0x0800acbb

0800a51c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a542:	0e1b      	lsrs	r3, r3, #24
 800a544:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	099b      	lsrs	r3, r3, #6
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	089b      	lsrs	r3, r3, #2
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	b2da      	uxtb	r2, r3
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	b2da      	uxtb	r2, r3
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	b2da      	uxtb	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ac:	0e1b      	lsrs	r3, r3, #24
 800a5ae:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	011b      	lsls	r3, r3, #4
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5c0:	0c1b      	lsrs	r3, r3, #16
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	88db      	ldrh	r3, [r3, #6]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	091b      	lsrs	r3, r3, #4
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f003 030f 	and.w	r3, r3, #15
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	09db      	lsrs	r3, r3, #7
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	b2da      	uxtb	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	099b      	lsrs	r3, r3, #6
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	095b      	lsrs	r3, r3, #5
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2200      	movs	r2, #0
 800a63c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	2b00      	cmp	r3, #0
 800a644:	f040 8087 	bne.w	800a756 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	029b      	lsls	r3, r3, #10
 800a64c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	431a      	orrs	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a66e:	0e1b      	lsrs	r3, r3, #24
 800a670:	b2db      	uxtb	r3, r3
 800a672:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	099b      	lsrs	r3, r3, #6
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	431a      	orrs	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	b2da      	uxtb	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a8:	0c1b      	lsrs	r3, r3, #16
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	095b      	lsrs	r3, r3, #5
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0307 	and.w	r3, r3, #7
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	089b      	lsrs	r3, r3, #2
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 0306 	and.w	r3, r3, #6
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e4:	0a1b      	lsrs	r3, r3, #8
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	7e1b      	ldrb	r3, [r3, #24]
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	09db      	lsrs	r3, r3, #7
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	7e1b      	ldrb	r3, [r3, #24]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	3302      	adds	r3, #2
 800a716:	2201      	movs	r2, #1
 800a718:	fa02 f303 	lsl.w	r3, r2, r3
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a720:	fb02 f203 	mul.w	r2, r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	7a1b      	ldrb	r3, [r3, #8]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	2301      	movs	r3, #1
 800a732:	fa03 f202 	lsl.w	r2, r3, r2
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a742:	0a52      	lsrs	r2, r2, #9
 800a744:	fb02 f203 	mul.w	r2, r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a752:	661a      	str	r2, [r3, #96]	; 0x60
 800a754:	e04d      	b.n	800a7f2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d138      	bne.n	800a7d0 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a762:	b2db      	uxtb	r3, r3
 800a764:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a776:	0e1b      	lsrs	r3, r3, #24
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	691a      	ldr	r2, [r3, #16]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	431a      	orrs	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a78e:	0c1b      	lsrs	r3, r3, #16
 800a790:	b2db      	uxtb	r3, r3
 800a792:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a4:	0a1b      	lsrs	r3, r3, #8
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	029a      	lsls	r2, r3, #10
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	655a      	str	r2, [r3, #84]	; 0x54
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7c4:	659a      	str	r2, [r3, #88]	; 0x58
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	661a      	str	r2, [r3, #96]	; 0x60
 800a7ce:	e010      	b.n	800a7f2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a7d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e0c1      	b.n	800a976 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	099b      	lsrs	r3, r3, #6
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	7e9b      	ldrb	r3, [r3, #26]
 800a820:	b2da      	uxtb	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	09db      	lsrs	r3, r3, #7
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4313      	orrs	r3, r2
 800a830:	b2da      	uxtb	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a848:	0e1b      	lsrs	r3, r3, #24
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	09db      	lsrs	r3, r3, #7
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	095b      	lsrs	r3, r3, #5
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	089b      	lsrs	r3, r3, #2
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 030c 	and.w	r3, r3, #12
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	b2db      	uxtb	r3, r3
 800a898:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	7fdb      	ldrb	r3, [r3, #31]
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	099b      	lsrs	r3, r3, #6
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	09db      	lsrs	r3, r3, #7
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	099b      	lsrs	r3, r3, #6
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	b2da      	uxtb	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	b2da      	uxtb	r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	091b      	lsrs	r3, r3, #4
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	b2db      	uxtb	r3, r3
 800a958:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a964:	b2da      	uxtb	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9da:	b5b0      	push	{r4, r5, r7, lr}
 800a9dc:	b08e      	sub	sp, #56	; 0x38
 800a9de:	af04      	add	r7, sp, #16
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d02e      	beq.n	800aa56 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fe:	d106      	bne.n	800aa0e <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa0c:	e029      	b.n	800aa62 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa14:	d10a      	bne.n	800aa2c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb28 	bl	800b06c <SD_WideBus_Enable>
 800aa1c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38
 800aa2a:	e01a      	b.n	800aa62 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fb67 	bl	800b106 <SD_WideBus_Disable>
 800aa38:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	431a      	orrs	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	639a      	str	r2, [r3, #56]	; 0x38
 800aa46:	e00c      	b.n	800aa62 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38
 800aa54:	e005      	b.n	800aa62 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e024      	b.n	800aaca <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681d      	ldr	r5, [r3, #0]
 800aaa6:	466c      	mov	r4, sp
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aaba:	4628      	mov	r0, r5
 800aabc:	f002 f8c0 	bl	800cc40 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3728      	adds	r7, #40	; 0x28
 800aace:	46bd      	mov	sp, r7
 800aad0:	bdb0      	pop	{r4, r5, r7, pc}

0800aad2 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b086      	sub	sp, #24
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800aada:	2304      	movs	r3, #4
 800aadc:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800aae6:	f107 030c 	add.w	r3, r7, #12
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa93 	bl	800b018 <SD_SendStatus>
 800aaf2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d005      	beq.n	800ab06 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	0a5b      	lsrs	r3, r3, #9
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	f003 030f 	and.w	r3, r3, #15
 800ab10:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	2b82      	cmp	r3, #130	; 0x82
 800ab5e:	d111      	bne.n	800ab84 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 f9fd 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800ab6a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d008      	beq.n	800ab84 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff fccc 	bl	800a51c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0208 	bic.w	r2, r2, #8
 800ab92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f008 f832 	bl	8012c10 <HAL_SD_RxCpltCallback>
#endif
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d004      	beq.n	800abd6 <SD_DMAError+0x22>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d12c      	bne.n	800ac30 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800abee:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7ff ff68 	bl	800aad2 <HAL_SD_GetCardState>
 800ac02:	4603      	mov	r3, r0
 800ac04:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac06:	7afb      	ldrb	r3, [r7, #11]
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	d002      	beq.n	800ac12 <SD_DMAError+0x5e>
 800ac0c:	7afb      	ldrb	r3, [r7, #11]
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d10a      	bne.n	800ac28 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f002 f9a4 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	431a      	orrs	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fc73 	bl	800a51c <HAL_SD_ErrorCallback>
#endif
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d127      	bne.n	800acb2 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff ff35 	bl	800aad2 <HAL_SD_GetCardState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d002      	beq.n	800ac86 <SD_DMATxAbort+0x48>
 800ac80:	7afb      	ldrb	r3, [r7, #11]
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	d115      	bne.n	800acb2 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f002 f96a 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800ac90:	4602      	mov	r2, r0
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	431a      	orrs	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d003      	beq.n	800acac <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f007 ff9f 	bl	8012be8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800acaa:	e002      	b.n	800acb2 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f7ff fc35 	bl	800a51c <HAL_SD_ErrorCallback>
}
 800acb2:	bf00      	nop
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d127      	bne.n	800ad2e <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff fef7 	bl	800aad2 <HAL_SD_GetCardState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800acf6:	7afb      	ldrb	r3, [r7, #11]
 800acf8:	2b06      	cmp	r3, #6
 800acfa:	d002      	beq.n	800ad02 <SD_DMARxAbort+0x48>
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d115      	bne.n	800ad2e <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f002 f92c 	bl	800cf64 <SDMMC_CmdStopTransfer>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	431a      	orrs	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f007 ff61 	bl	8012be8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ad26:	e002      	b.n	800ad2e <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fbf7 	bl	800a51c <HAL_SD_ErrorCallback>
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad36:	b5b0      	push	{r4, r5, r7, lr}
 800ad38:	b094      	sub	sp, #80	; 0x50
 800ad3a:	af04      	add	r7, sp, #16
 800ad3c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800ad42:	2301      	movs	r3, #1
 800ad44:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f001 ffcf 	bl	800ccee <SDIO_GetPowerState>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad5a:	e0b1      	b.n	800aec0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d02f      	beq.n	800adc4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f002 fa15 	bl	800d198 <SDMMC_CmdSendCID>
 800ad6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <SD_InitCard+0x44>
    {
      return errorstate;
 800ad76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad78:	e0a2      	b.n	800aec0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 fff9 	bl	800cd78 <SDIO_GetResponse>
 800ad86:	4602      	mov	r2, r0
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2104      	movs	r1, #4
 800ad92:	4618      	mov	r0, r3
 800ad94:	f001 fff0 	bl	800cd78 <SDIO_GetResponse>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2108      	movs	r1, #8
 800ada4:	4618      	mov	r0, r3
 800ada6:	f001 ffe7 	bl	800cd78 <SDIO_GetResponse>
 800adaa:	4602      	mov	r2, r0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	210c      	movs	r1, #12
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 ffde 	bl	800cd78 <SDIO_GetResponse>
 800adbc:	4602      	mov	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d00d      	beq.n	800ade8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f107 020e 	add.w	r2, r7, #14
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f002 fa1f 	bl	800d21a <SDMMC_CmdSetRelAdd>
 800addc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <SD_InitCard+0xb2>
    {
      return errorstate;
 800ade4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade6:	e06b      	b.n	800aec0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adec:	2b03      	cmp	r3, #3
 800adee:	d036      	beq.n	800ae5e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adf0:	89fb      	ldrh	r3, [r7, #14]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae00:	041b      	lsls	r3, r3, #16
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f002 f9e7 	bl	800d1d8 <SDMMC_CmdSendCSD>
 800ae0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <SD_InitCard+0xe0>
    {
      return errorstate;
 800ae12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae14:	e054      	b.n	800aec0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 ffab 	bl	800cd78 <SDIO_GetResponse>
 800ae22:	4602      	mov	r2, r0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2104      	movs	r1, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 ffa2 	bl	800cd78 <SDIO_GetResponse>
 800ae34:	4602      	mov	r2, r0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2108      	movs	r1, #8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 ff99 	bl	800cd78 <SDIO_GetResponse>
 800ae46:	4602      	mov	r2, r0
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	210c      	movs	r1, #12
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 ff90 	bl	800cd78 <SDIO_GetResponse>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2104      	movs	r1, #4
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 ff87 	bl	800cd78 <SDIO_GetResponse>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	0d1a      	lsrs	r2, r3, #20
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800ae72:	f107 0310 	add.w	r3, r7, #16
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fb59 	bl	800a530 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6819      	ldr	r1, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae86:	041b      	lsls	r3, r3, #16
 800ae88:	f04f 0400 	mov.w	r4, #0
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4623      	mov	r3, r4
 800ae90:	4608      	mov	r0, r1
 800ae92:	f002 f88b 	bl	800cfac <SDMMC_CmdSelDesel>
 800ae96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <SD_InitCard+0x16c>
  {
    return errorstate;
 800ae9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea0:	e00e      	b.n	800aec0 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681d      	ldr	r5, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	466c      	mov	r4, sp
 800aeaa:	f103 0210 	add.w	r2, r3, #16
 800aeae:	ca07      	ldmia	r2, {r0, r1, r2}
 800aeb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f001 fec1 	bl	800cc40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3740      	adds	r7, #64	; 0x40
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bdb0      	pop	{r4, r5, r7, pc}

0800aec8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	2300      	movs	r3, #0
 800aeda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 f886 	bl	800cff6 <SDMMC_CmdGoIdleState>
 800aeea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <SD_PowerON+0x2e>
  {
    return errorstate;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	e08c      	b.n	800b010 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f002 f89b 	bl	800d036 <SDMMC_CmdOperCond>
 800af00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d03d      	beq.n	800af84 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800af0e:	e032      	b.n	800af76 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	60ba      	str	r2, [r7, #8]
 800af16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d102      	bne.n	800af24 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af22:	e075      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 f8a4 	bl	800d078 <SDMMC_CmdAppCommand>
 800af30:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af3c:	e068      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2100      	movs	r1, #0
 800af44:	4618      	mov	r0, r3
 800af46:	f002 f8bb 	bl	800d0c0 <SDMMC_CmdAppOperCommand>
 800af4a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af56:	e05b      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2100      	movs	r1, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f001 ff0a 	bl	800cd78 <SDIO_GetResponse>
 800af64:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	0fdb      	lsrs	r3, r3, #31
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <SD_PowerON+0xaa>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <SD_PowerON+0xac>
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d0c9      	beq.n	800af10 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	645a      	str	r2, [r3, #68]	; 0x44
 800af82:	e044      	b.n	800b00e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800af8a:	e031      	b.n	800aff0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	60ba      	str	r2, [r7, #8]
 800af92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af96:	4293      	cmp	r3, r2
 800af98:	d102      	bne.n	800afa0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af9e:	e037      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f002 f866 	bl	800d078 <SDMMC_CmdAppCommand>
 800afac:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <SD_PowerON+0xf0>
      {
        return errorstate;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	e02b      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800afc0:	4618      	mov	r0, r3
 800afc2:	f002 f87d 	bl	800d0c0 <SDMMC_CmdAppOperCommand>
 800afc6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <SD_PowerON+0x10a>
      {
        return errorstate;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	e01e      	b.n	800b010 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f001 fecd 	bl	800cd78 <SDIO_GetResponse>
 800afde:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	0fdb      	lsrs	r3, r3, #31
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <SD_PowerON+0x124>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <SD_PowerON+0x126>
 800afec:	2300      	movs	r3, #0
 800afee:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0ca      	beq.n	800af8c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	645a      	str	r2, [r3, #68]	; 0x44
 800b006:	e002      	b.n	800b00e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b02c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b030:	e018      	b.n	800b064 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	4619      	mov	r1, r3
 800b03e:	4610      	mov	r0, r2
 800b040:	f002 f90e 	bl	800d260 <SDMMC_CmdSendStatus>
 800b044:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <SD_SendStatus+0x38>
  {
    return errorstate;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	e009      	b.n	800b064 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2100      	movs	r1, #0
 800b056:	4618      	mov	r0, r3
 800b058:	f001 fe8e 	bl	800cd78 <SDIO_GetResponse>
 800b05c:	4602      	mov	r2, r0
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2100      	movs	r1, #0
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fe76 	bl	800cd78 <SDIO_GetResponse>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b096:	d102      	bne.n	800b09e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b09c:	e02f      	b.n	800b0fe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f87b 	bl	800b1a0 <SD_FindSCR>
 800b0aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	e023      	b.n	800b0fe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01c      	beq.n	800b0fa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f001 ffd3 	bl	800d078 <SDMMC_CmdAppCommand>
 800b0d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	e00f      	b.n	800b0fe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2102      	movs	r1, #2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f002 f810 	bl	800d10a <SDMMC_CmdBusWidth>
 800b0ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	e003      	b.n	800b0fe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e001      	b.n	800b0fe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	2300      	movs	r3, #0
 800b114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f001 fe29 	bl	800cd78 <SDIO_GetResponse>
 800b126:	4603      	mov	r3, r0
 800b128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b12c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b130:	d102      	bne.n	800b138 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b136:	e02f      	b.n	800b198 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b138:	f107 030c 	add.w	r3, r7, #12
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f82e 	bl	800b1a0 <SD_FindSCR>
 800b144:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	e023      	b.n	800b198 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01c      	beq.n	800b194 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b162:	041b      	lsls	r3, r3, #16
 800b164:	4619      	mov	r1, r3
 800b166:	4610      	mov	r0, r2
 800b168:	f001 ff86 	bl	800d078 <SDMMC_CmdAppCommand>
 800b16c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	e00f      	b.n	800b198 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 ffc3 	bl	800d10a <SDMMC_CmdBusWidth>
 800b184:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	e003      	b.n	800b198 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b190:	2300      	movs	r3, #0
 800b192:	e001      	b.n	800b198 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b194:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b1a0:	b590      	push	{r4, r7, lr}
 800b1a2:	b08f      	sub	sp, #60	; 0x3c
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b1ae:	f7fa ffe5 	bl	800617c <HAL_GetTick>
 800b1b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2108      	movs	r1, #8
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 fe17 	bl	800cdfa <SDMMC_CmdBlockLength>
 800b1cc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	e0a8      	b.n	800b32a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e0:	041b      	lsls	r3, r3, #16
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	f001 ff47 	bl	800d078 <SDMMC_CmdAppCommand>
 800b1ea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	e099      	b.n	800b32a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b200:	2330      	movs	r3, #48	; 0x30
 800b202:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b204:	2302      	movs	r3, #2
 800b206:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b208:	2300      	movs	r3, #0
 800b20a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b20c:	2301      	movs	r3, #1
 800b20e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f107 0214 	add.w	r2, r7, #20
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f001 fdc1 	bl	800cda2 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4618      	mov	r0, r3
 800b226:	f001 ff94 	bl	800d152 <SDMMC_CmdSendSCR>
 800b22a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d022      	beq.n	800b278 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	e079      	b.n	800b32a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00e      	beq.n	800b262 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6819      	ldr	r1, [r3, #0]
 800b248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	f107 020c 	add.w	r2, r7, #12
 800b250:	18d4      	adds	r4, r2, r3
 800b252:	4608      	mov	r0, r1
 800b254:	f001 fd1f 	bl	800cc96 <SDIO_ReadFIFO>
 800b258:	4603      	mov	r3, r0
 800b25a:	6023      	str	r3, [r4, #0]
      index++;
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	3301      	adds	r3, #1
 800b260:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b262:	f7fa ff8b 	bl	800617c <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b270:	d102      	bne.n	800b278 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b276:	e058      	b.n	800b32a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b27e:	f240 432a 	movw	r3, #1066	; 0x42a
 800b282:	4013      	ands	r3, r2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d0d6      	beq.n	800b236 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28e:	f003 0308 	and.w	r3, r3, #8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2208      	movs	r2, #8
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b29e:	2308      	movs	r3, #8
 800b2a0:	e043      	b.n	800b32a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e036      	b.n	800b32a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c2:	f003 0320 	and.w	r3, r3, #32
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b2d2:	2320      	movs	r3, #32
 800b2d4:	e029      	b.n	800b32a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b2de:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	061a      	lsls	r2, r3, #24
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2ec:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	0a1b      	lsrs	r3, r3, #8
 800b2f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b2f6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b302:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b304:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	061a      	lsls	r2, r3, #24
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b312:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	0a1b      	lsrs	r3, r3, #8
 800b318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b31c:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	0e1b      	lsrs	r3, r3, #24
 800b322:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	373c      	adds	r7, #60	; 0x3c
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd90      	pop	{r4, r7, pc}

0800b332 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b332:	b590      	push	{r4, r7, lr}
 800b334:	b085      	sub	sp, #20
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b342:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800b344:	2300      	movs	r3, #0
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	e00d      	b.n	800b366 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6819      	ldr	r1, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	18d4      	adds	r4, r2, r3
 800b356:	4608      	mov	r0, r1
 800b358:	f001 fc9d 	bl	800cc96 <SDIO_ReadFIFO>
 800b35c:	4603      	mov	r3, r0
 800b35e:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3301      	adds	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b07      	cmp	r3, #7
 800b36a:	d9ee      	bls.n	800b34a <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b370:	f103 0220 	add.w	r2, r3, #32
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd90      	pop	{r4, r7, pc}

0800b382 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	e00b      	b.n	800b3b2 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	f001 fc82 	bl	800ccb0 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	60fb      	str	r3, [r7, #12]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	d9f0      	bls.n	800b39a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	f103 0220 	add.w	r2, r3, #32
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e056      	b.n	800b48e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f00a fdd2 	bl	8015fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	431a      	orrs	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	431a      	orrs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	431a      	orrs	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b43c:	431a      	orrs	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	ea42 0103 	orr.w	r1, r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	0c1b      	lsrs	r3, r3, #16
 800b45e:	f003 0104 	and.w	r1, r3, #4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	69da      	ldr	r2, [r3, #28]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b47c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b088      	sub	sp, #32
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	603b      	str	r3, [r7, #0]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_SPI_Transmit+0x22>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e11e      	b.n	800b6f6 <HAL_SPI_Transmit+0x260>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4c0:	f7fa fe5c 	bl	800617c <HAL_GetTick>
 800b4c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d002      	beq.n	800b4dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4da:	e103      	b.n	800b6e4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SPI_Transmit+0x52>
 800b4e2:	88fb      	ldrh	r3, [r7, #6]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d102      	bne.n	800b4ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b4ec:	e0fa      	b.n	800b6e4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2203      	movs	r2, #3
 800b4f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	88fa      	ldrh	r2, [r7, #6]
 800b506:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	88fa      	ldrh	r2, [r7, #6]
 800b50c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b534:	d107      	bne.n	800b546 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b550:	2b40      	cmp	r3, #64	; 0x40
 800b552:	d007      	beq.n	800b564 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56c:	d14b      	bne.n	800b606 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <HAL_SPI_Transmit+0xe6>
 800b576:	8afb      	ldrh	r3, [r7, #22]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d13e      	bne.n	800b5fa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b580:	881a      	ldrh	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	1c9a      	adds	r2, r3, #2
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b596:	b29b      	uxth	r3, r3
 800b598:	3b01      	subs	r3, #1
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b5a0:	e02b      	b.n	800b5fa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d112      	bne.n	800b5d6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b4:	881a      	ldrh	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c0:	1c9a      	adds	r2, r3, #2
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	86da      	strh	r2, [r3, #54]	; 0x36
 800b5d4:	e011      	b.n	800b5fa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5d6:	f7fa fdd1 	bl	800617c <HAL_GetTick>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d803      	bhi.n	800b5ee <HAL_SPI_Transmit+0x158>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ec:	d102      	bne.n	800b5f4 <HAL_SPI_Transmit+0x15e>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b5f8:	e074      	b.n	800b6e4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1ce      	bne.n	800b5a2 <HAL_SPI_Transmit+0x10c>
 800b604:	e04c      	b.n	800b6a0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <HAL_SPI_Transmit+0x17e>
 800b60e:	8afb      	ldrh	r3, [r7, #22]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d140      	bne.n	800b696 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	330c      	adds	r3, #12
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b630:	b29b      	uxth	r3, r3
 800b632:	3b01      	subs	r3, #1
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b63a:	e02c      	b.n	800b696 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b02      	cmp	r3, #2
 800b648:	d113      	bne.n	800b672 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	330c      	adds	r3, #12
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b666:	b29b      	uxth	r3, r3
 800b668:	3b01      	subs	r3, #1
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b670:	e011      	b.n	800b696 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b672:	f7fa fd83 	bl	800617c <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d803      	bhi.n	800b68a <HAL_SPI_Transmit+0x1f4>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b688:	d102      	bne.n	800b690 <HAL_SPI_Transmit+0x1fa>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b694:	e026      	b.n	800b6e4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1cd      	bne.n	800b63c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fa45 	bl	800bb34 <SPI_EndRxTxTransaction>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10a      	bne.n	800b6d4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	613b      	str	r3, [r7, #16]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	613b      	str	r3, [r7, #16]
 800b6d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e000      	b.n	800b6e4 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b6e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b08c      	sub	sp, #48	; 0x30
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
 800b70a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b70c:	2301      	movs	r3, #1
 800b70e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_SPI_TransmitReceive+0x26>
 800b720:	2302      	movs	r3, #2
 800b722:	e18a      	b.n	800ba3a <HAL_SPI_TransmitReceive+0x33c>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b72c:	f7fa fd26 	bl	800617c <HAL_GetTick>
 800b730:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b742:	887b      	ldrh	r3, [r7, #2]
 800b744:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d00f      	beq.n	800b76e <HAL_SPI_TransmitReceive+0x70>
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b754:	d107      	bne.n	800b766 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d103      	bne.n	800b766 <HAL_SPI_TransmitReceive+0x68>
 800b75e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b762:	2b04      	cmp	r3, #4
 800b764:	d003      	beq.n	800b76e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b766:	2302      	movs	r3, #2
 800b768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b76c:	e15b      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_SPI_TransmitReceive+0x82>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <HAL_SPI_TransmitReceive+0x82>
 800b77a:	887b      	ldrh	r3, [r7, #2]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d103      	bne.n	800b788 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b786:	e14e      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b04      	cmp	r3, #4
 800b792:	d003      	beq.n	800b79c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2205      	movs	r2, #5
 800b798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	887a      	ldrh	r2, [r7, #2]
 800b7ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	887a      	ldrh	r2, [r7, #2]
 800b7b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	887a      	ldrh	r2, [r7, #2]
 800b7be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	887a      	ldrh	r2, [r7, #2]
 800b7c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7dc:	2b40      	cmp	r3, #64	; 0x40
 800b7de:	d007      	beq.n	800b7f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f8:	d178      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <HAL_SPI_TransmitReceive+0x10a>
 800b802:	8b7b      	ldrh	r3, [r7, #26]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d166      	bne.n	800b8d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	881a      	ldrh	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b818:	1c9a      	adds	r2, r3, #2
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b822:	b29b      	uxth	r3, r3
 800b824:	3b01      	subs	r3, #1
 800b826:	b29a      	uxth	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b82c:	e053      	b.n	800b8d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d11b      	bne.n	800b874 <HAL_SPI_TransmitReceive+0x176>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d016      	beq.n	800b874 <HAL_SPI_TransmitReceive+0x176>
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d113      	bne.n	800b874 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b850:	881a      	ldrh	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85c:	1c9a      	adds	r2, r3, #2
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d119      	bne.n	800b8b6 <HAL_SPI_TransmitReceive+0x1b8>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b886:	b29b      	uxth	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d014      	beq.n	800b8b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b896:	b292      	uxth	r2, r2
 800b898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	1c9a      	adds	r2, r3, #2
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b8b6:	f7fa fc61 	bl	800617c <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d807      	bhi.n	800b8d6 <HAL_SPI_TransmitReceive+0x1d8>
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8cc:	d003      	beq.n	800b8d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b8d4:	e0a7      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1a6      	bne.n	800b82e <HAL_SPI_TransmitReceive+0x130>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1a1      	bne.n	800b82e <HAL_SPI_TransmitReceive+0x130>
 800b8ea:	e07c      	b.n	800b9e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <HAL_SPI_TransmitReceive+0x1fc>
 800b8f4:	8b7b      	ldrh	r3, [r7, #26]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d16b      	bne.n	800b9d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	330c      	adds	r3, #12
 800b904:	7812      	ldrb	r2, [r2, #0]
 800b906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b916:	b29b      	uxth	r3, r3
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b920:	e057      	b.n	800b9d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d11c      	bne.n	800b96a <HAL_SPI_TransmitReceive+0x26c>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b934:	b29b      	uxth	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d017      	beq.n	800b96a <HAL_SPI_TransmitReceive+0x26c>
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d114      	bne.n	800b96a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	330c      	adds	r3, #12
 800b94a:	7812      	ldrb	r2, [r2, #0]
 800b94c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b01      	cmp	r3, #1
 800b976:	d119      	bne.n	800b9ac <HAL_SPI_TransmitReceive+0x2ae>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d014      	beq.n	800b9ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	b2d2      	uxtb	r2, r2
 800b98e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b9ac:	f7fa fbe6 	bl	800617c <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d803      	bhi.n	800b9c4 <HAL_SPI_TransmitReceive+0x2c6>
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c2:	d102      	bne.n	800b9ca <HAL_SPI_TransmitReceive+0x2cc>
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d103      	bne.n	800b9d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9d0:	e029      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1a2      	bne.n	800b922 <HAL_SPI_TransmitReceive+0x224>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d19d      	bne.n	800b922 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 f8a2 	bl	800bb34 <SPI_EndRxTxTransaction>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d006      	beq.n	800ba04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2220      	movs	r2, #32
 800ba00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ba02:	e010      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10b      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	617b      	str	r3, [r7, #20]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	e000      	b.n	800ba26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ba24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3730      	adds	r7, #48	; 0x30
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba50:	b2db      	uxtb	r3, r3
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba6e:	e04c      	b.n	800bb0a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	d048      	beq.n	800bb0a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ba78:	f7fa fb80 	bl	800617c <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d902      	bls.n	800ba8e <SPI_WaitFlagStateUntilTimeout+0x30>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d13d      	bne.n	800bb0a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baa6:	d111      	bne.n	800bacc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bab0:	d004      	beq.n	800babc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baba:	d107      	bne.n	800bacc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bad4:	d10f      	bne.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800baf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e00f      	b.n	800bb2a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689a      	ldr	r2, [r3, #8]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	4013      	ands	r3, r2
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	bf0c      	ite	eq
 800bb1a:	2301      	moveq	r3, #1
 800bb1c:	2300      	movne	r3, #0
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d1a3      	bne.n	800ba70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bb40:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <SPI_EndRxTxTransaction+0x7c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a1b      	ldr	r2, [pc, #108]	; (800bbb4 <SPI_EndRxTxTransaction+0x80>)
 800bb46:	fba2 2303 	umull	r2, r3, r2, r3
 800bb4a:	0d5b      	lsrs	r3, r3, #21
 800bb4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb50:	fb02 f303 	mul.w	r3, r2, r3
 800bb54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb5e:	d112      	bne.n	800bb86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	2180      	movs	r1, #128	; 0x80
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff ff77 	bl	800ba5e <SPI_WaitFlagStateUntilTimeout>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d016      	beq.n	800bba4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7a:	f043 0220 	orr.w	r2, r3, #32
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e00f      	b.n	800bba6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00a      	beq.n	800bba2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9c:	2b80      	cmp	r3, #128	; 0x80
 800bb9e:	d0f2      	beq.n	800bb86 <SPI_EndRxTxTransaction+0x52>
 800bba0:	e000      	b.n	800bba4 <SPI_EndRxTxTransaction+0x70>
        break;
 800bba2:	bf00      	nop
  }

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000170 	.word	0x20000170
 800bbb4:	165e9f81 	.word	0x165e9f81

0800bbb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e01d      	b.n	800bc06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f00a fa28 	bl	8016034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	f000 fa76 	bl	800c0e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2202      	movs	r2, #2
 800bc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	f003 0307 	and.w	r3, r3, #7
 800bc28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b06      	cmp	r3, #6
 800bc2e:	d007      	beq.n	800bc40 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f042 0201 	orr.w	r2, r2, #1
 800bc3e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e01d      	b.n	800bca4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d106      	bne.n	800bc82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f815 	bl	800bcac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2202      	movs	r2, #2
 800bc86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3304      	adds	r3, #4
 800bc92:	4619      	mov	r1, r3
 800bc94:	4610      	mov	r0, r2
 800bc96:	f000 fa27 	bl	800c0e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 fcf2 	bl	800c6bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a15      	ldr	r2, [pc, #84]	; (800bd34 <HAL_TIM_PWM_Start+0x74>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_TIM_PWM_Start+0x2c>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a14      	ldr	r2, [pc, #80]	; (800bd38 <HAL_TIM_PWM_Start+0x78>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d101      	bne.n	800bcf0 <HAL_TIM_PWM_Start+0x30>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e000      	b.n	800bcf2 <HAL_TIM_PWM_Start+0x32>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d007      	beq.n	800bd06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 0307 	and.w	r3, r3, #7
 800bd10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b06      	cmp	r3, #6
 800bd16:	d007      	beq.n	800bd28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0201 	orr.w	r2, r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40010400 	.word	0x40010400

0800bd3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 fcb4 	bl	800c6bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a22      	ldr	r2, [pc, #136]	; (800bde4 <HAL_TIM_PWM_Stop+0xa8>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIM_PWM_Stop+0x2c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a21      	ldr	r2, [pc, #132]	; (800bde8 <HAL_TIM_PWM_Stop+0xac>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d101      	bne.n	800bd6c <HAL_TIM_PWM_Stop+0x30>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e000      	b.n	800bd6e <HAL_TIM_PWM_Stop+0x32>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d017      	beq.n	800bda2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	6a1a      	ldr	r2, [r3, #32]
 800bd78:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10f      	bne.n	800bda2 <HAL_TIM_PWM_Stop+0x66>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6a1a      	ldr	r2, [r3, #32]
 800bd88:	f240 4344 	movw	r3, #1092	; 0x444
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d107      	bne.n	800bda2 <HAL_TIM_PWM_Stop+0x66>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bda0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6a1a      	ldr	r2, [r3, #32]
 800bda8:	f241 1311 	movw	r3, #4369	; 0x1111
 800bdac:	4013      	ands	r3, r2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10f      	bne.n	800bdd2 <HAL_TIM_PWM_Stop+0x96>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6a1a      	ldr	r2, [r3, #32]
 800bdb8:	f240 4344 	movw	r3, #1092	; 0x444
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d107      	bne.n	800bdd2 <HAL_TIM_PWM_Stop+0x96>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0201 	bic.w	r2, r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	40010000 	.word	0x40010000
 800bde8:	40010400 	.word	0x40010400

0800bdec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d101      	bne.n	800be06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800be02:	2302      	movs	r3, #2
 800be04:	e0b4      	b.n	800bf70 <HAL_TIM_PWM_ConfigChannel+0x184>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2202      	movs	r2, #2
 800be12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b0c      	cmp	r3, #12
 800be1a:	f200 809f 	bhi.w	800bf5c <HAL_TIM_PWM_ConfigChannel+0x170>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800be59 	.word	0x0800be59
 800be28:	0800bf5d 	.word	0x0800bf5d
 800be2c:	0800bf5d 	.word	0x0800bf5d
 800be30:	0800bf5d 	.word	0x0800bf5d
 800be34:	0800be99 	.word	0x0800be99
 800be38:	0800bf5d 	.word	0x0800bf5d
 800be3c:	0800bf5d 	.word	0x0800bf5d
 800be40:	0800bf5d 	.word	0x0800bf5d
 800be44:	0800bedb 	.word	0x0800bedb
 800be48:	0800bf5d 	.word	0x0800bf5d
 800be4c:	0800bf5d 	.word	0x0800bf5d
 800be50:	0800bf5d 	.word	0x0800bf5d
 800be54:	0800bf1b 	.word	0x0800bf1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 f9e2 	bl	800c228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699a      	ldr	r2, [r3, #24]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f042 0208 	orr.w	r2, r2, #8
 800be72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	699a      	ldr	r2, [r3, #24]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0204 	bic.w	r2, r2, #4
 800be82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6999      	ldr	r1, [r3, #24]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	691a      	ldr	r2, [r3, #16]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	619a      	str	r2, [r3, #24]
      break;
 800be96:	e062      	b.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fa32 	bl	800c308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699a      	ldr	r2, [r3, #24]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	699a      	ldr	r2, [r3, #24]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6999      	ldr	r1, [r3, #24]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	021a      	lsls	r2, r3, #8
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	619a      	str	r2, [r3, #24]
      break;
 800bed8:	e041      	b.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fa87 	bl	800c3f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	69da      	ldr	r2, [r3, #28]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	69da      	ldr	r2, [r3, #28]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0204 	bic.w	r2, r2, #4
 800bf04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69d9      	ldr	r1, [r3, #28]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	691a      	ldr	r2, [r3, #16]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	61da      	str	r2, [r3, #28]
      break;
 800bf18:	e021      	b.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 fadb 	bl	800c4dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	69da      	ldr	r2, [r3, #28]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	69da      	ldr	r2, [r3, #28]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69d9      	ldr	r1, [r3, #28]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	021a      	lsls	r2, r3, #8
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	61da      	str	r2, [r3, #28]
      break;
 800bf5a:	e000      	b.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bf5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d101      	bne.n	800bf90 <HAL_TIM_ConfigClockSource+0x18>
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e0a6      	b.n	800c0de <HAL_TIM_ConfigClockSource+0x166>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bfae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b40      	cmp	r3, #64	; 0x40
 800bfc6:	d067      	beq.n	800c098 <HAL_TIM_ConfigClockSource+0x120>
 800bfc8:	2b40      	cmp	r3, #64	; 0x40
 800bfca:	d80b      	bhi.n	800bfe4 <HAL_TIM_ConfigClockSource+0x6c>
 800bfcc:	2b10      	cmp	r3, #16
 800bfce:	d073      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0x140>
 800bfd0:	2b10      	cmp	r3, #16
 800bfd2:	d802      	bhi.n	800bfda <HAL_TIM_ConfigClockSource+0x62>
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d06f      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bfd8:	e078      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	d06c      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0x140>
 800bfde:	2b30      	cmp	r3, #48	; 0x30
 800bfe0:	d06a      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bfe2:	e073      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bfe4:	2b70      	cmp	r3, #112	; 0x70
 800bfe6:	d00d      	beq.n	800c004 <HAL_TIM_ConfigClockSource+0x8c>
 800bfe8:	2b70      	cmp	r3, #112	; 0x70
 800bfea:	d804      	bhi.n	800bff6 <HAL_TIM_ConfigClockSource+0x7e>
 800bfec:	2b50      	cmp	r3, #80	; 0x50
 800bfee:	d033      	beq.n	800c058 <HAL_TIM_ConfigClockSource+0xe0>
 800bff0:	2b60      	cmp	r3, #96	; 0x60
 800bff2:	d041      	beq.n	800c078 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bff4:	e06a      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffa:	d066      	beq.n	800c0ca <HAL_TIM_ConfigClockSource+0x152>
 800bffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c000:	d017      	beq.n	800c032 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c002:	e063      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	6899      	ldr	r1, [r3, #8]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f000 fb32 	bl	800c67c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c026:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	609a      	str	r2, [r3, #8]
      break;
 800c030:	e04c      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6818      	ldr	r0, [r3, #0]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	6899      	ldr	r1, [r3, #8]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f000 fb1b 	bl	800c67c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c054:	609a      	str	r2, [r3, #8]
      break;
 800c056:	e039      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	6859      	ldr	r1, [r3, #4]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	461a      	mov	r2, r3
 800c066:	f000 fa8f 	bl	800c588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2150      	movs	r1, #80	; 0x50
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fae8 	bl	800c646 <TIM_ITRx_SetConfig>
      break;
 800c076:	e029      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	6859      	ldr	r1, [r3, #4]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	461a      	mov	r2, r3
 800c086:	f000 faae 	bl	800c5e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2160      	movs	r1, #96	; 0x60
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fad8 	bl	800c646 <TIM_ITRx_SetConfig>
      break;
 800c096:	e019      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	6859      	ldr	r1, [r3, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	f000 fa6f 	bl	800c588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2140      	movs	r1, #64	; 0x40
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fac8 	bl	800c646 <TIM_ITRx_SetConfig>
      break;
 800c0b6:	e009      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	f000 fabf 	bl	800c646 <TIM_ITRx_SetConfig>
      break;
 800c0c8:	e000      	b.n	800c0cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a40      	ldr	r2, [pc, #256]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d013      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c106:	d00f      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a3d      	ldr	r2, [pc, #244]	; (800c200 <TIM_Base_SetConfig+0x118>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d00b      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a3c      	ldr	r2, [pc, #240]	; (800c204 <TIM_Base_SetConfig+0x11c>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d007      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a3b      	ldr	r2, [pc, #236]	; (800c208 <TIM_Base_SetConfig+0x120>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d003      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3a      	ldr	r2, [pc, #232]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d108      	bne.n	800c13a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a2f      	ldr	r2, [pc, #188]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d02b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c148:	d027      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a2c      	ldr	r2, [pc, #176]	; (800c200 <TIM_Base_SetConfig+0x118>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d023      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a2b      	ldr	r2, [pc, #172]	; (800c204 <TIM_Base_SetConfig+0x11c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d01f      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a2a      	ldr	r2, [pc, #168]	; (800c208 <TIM_Base_SetConfig+0x120>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d01b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a29      	ldr	r2, [pc, #164]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d017      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a28      	ldr	r2, [pc, #160]	; (800c210 <TIM_Base_SetConfig+0x128>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d013      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a27      	ldr	r2, [pc, #156]	; (800c214 <TIM_Base_SetConfig+0x12c>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d00f      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a26      	ldr	r2, [pc, #152]	; (800c218 <TIM_Base_SetConfig+0x130>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a25      	ldr	r2, [pc, #148]	; (800c21c <TIM_Base_SetConfig+0x134>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d007      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a24      	ldr	r2, [pc, #144]	; (800c220 <TIM_Base_SetConfig+0x138>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d003      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a23      	ldr	r2, [pc, #140]	; (800c224 <TIM_Base_SetConfig+0x13c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d108      	bne.n	800c1ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a0a      	ldr	r2, [pc, #40]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d003      	beq.n	800c1e0 <TIM_Base_SetConfig+0xf8>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a0c      	ldr	r2, [pc, #48]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d103      	bne.n	800c1e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	691a      	ldr	r2, [r3, #16]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	615a      	str	r2, [r3, #20]
}
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	40010000 	.word	0x40010000
 800c200:	40000400 	.word	0x40000400
 800c204:	40000800 	.word	0x40000800
 800c208:	40000c00 	.word	0x40000c00
 800c20c:	40010400 	.word	0x40010400
 800c210:	40014000 	.word	0x40014000
 800c214:	40014400 	.word	0x40014400
 800c218:	40014800 	.word	0x40014800
 800c21c:	40001800 	.word	0x40001800
 800c220:	40001c00 	.word	0x40001c00
 800c224:	40002000 	.word	0x40002000

0800c228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	f023 0201 	bic.w	r2, r3, #1
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0303 	bic.w	r3, r3, #3
 800c25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f023 0302 	bic.w	r3, r3, #2
 800c270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a20      	ldr	r2, [pc, #128]	; (800c300 <TIM_OC1_SetConfig+0xd8>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d003      	beq.n	800c28c <TIM_OC1_SetConfig+0x64>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <TIM_OC1_SetConfig+0xdc>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d10c      	bne.n	800c2a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f023 0308 	bic.w	r3, r3, #8
 800c292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f023 0304 	bic.w	r3, r3, #4
 800c2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a15      	ldr	r2, [pc, #84]	; (800c300 <TIM_OC1_SetConfig+0xd8>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d003      	beq.n	800c2b6 <TIM_OC1_SetConfig+0x8e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a14      	ldr	r2, [pc, #80]	; (800c304 <TIM_OC1_SetConfig+0xdc>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d111      	bne.n	800c2da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	621a      	str	r2, [r3, #32]
}
 800c2f4:	bf00      	nop
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	40010000 	.word	0x40010000
 800c304:	40010400 	.word	0x40010400

0800c308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	f023 0210 	bic.w	r2, r3, #16
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f023 0320 	bic.w	r3, r3, #32
 800c352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a22      	ldr	r2, [pc, #136]	; (800c3ec <TIM_OC2_SetConfig+0xe4>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d003      	beq.n	800c370 <TIM_OC2_SetConfig+0x68>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a21      	ldr	r2, [pc, #132]	; (800c3f0 <TIM_OC2_SetConfig+0xe8>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d10d      	bne.n	800c38c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	4313      	orrs	r3, r2
 800c382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c38a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a17      	ldr	r2, [pc, #92]	; (800c3ec <TIM_OC2_SetConfig+0xe4>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d003      	beq.n	800c39c <TIM_OC2_SetConfig+0x94>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a16      	ldr	r2, [pc, #88]	; (800c3f0 <TIM_OC2_SetConfig+0xe8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d113      	bne.n	800c3c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	40010000 	.word	0x40010000
 800c3f0:	40010400 	.word	0x40010400

0800c3f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c43c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	4313      	orrs	r3, r2
 800c448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a21      	ldr	r2, [pc, #132]	; (800c4d4 <TIM_OC3_SetConfig+0xe0>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d003      	beq.n	800c45a <TIM_OC3_SetConfig+0x66>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a20      	ldr	r2, [pc, #128]	; (800c4d8 <TIM_OC3_SetConfig+0xe4>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d10d      	bne.n	800c476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a16      	ldr	r2, [pc, #88]	; (800c4d4 <TIM_OC3_SetConfig+0xe0>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d003      	beq.n	800c486 <TIM_OC3_SetConfig+0x92>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a15      	ldr	r2, [pc, #84]	; (800c4d8 <TIM_OC3_SetConfig+0xe4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d113      	bne.n	800c4ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c48c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	011b      	lsls	r3, r3, #4
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	621a      	str	r2, [r3, #32]
}
 800c4c8:	bf00      	nop
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	40010000 	.word	0x40010000
 800c4d8:	40010400 	.word	0x40010400

0800c4dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	031b      	lsls	r3, r3, #12
 800c52e:	693a      	ldr	r2, [r7, #16]
 800c530:	4313      	orrs	r3, r2
 800c532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a12      	ldr	r2, [pc, #72]	; (800c580 <TIM_OC4_SetConfig+0xa4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_OC4_SetConfig+0x68>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a11      	ldr	r2, [pc, #68]	; (800c584 <TIM_OC4_SetConfig+0xa8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d109      	bne.n	800c558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c54a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	019b      	lsls	r3, r3, #6
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	621a      	str	r2, [r3, #32]
}
 800c572:	bf00      	nop
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	40010000 	.word	0x40010000
 800c584:	40010400 	.word	0x40010400

0800c588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a1b      	ldr	r3, [r3, #32]
 800c598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	f023 0201 	bic.w	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	011b      	lsls	r3, r3, #4
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f023 030a 	bic.w	r3, r3, #10
 800c5c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	621a      	str	r2, [r3, #32]
}
 800c5da:	bf00      	nop
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b087      	sub	sp, #28
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	60f8      	str	r0, [r7, #12]
 800c5ee:	60b9      	str	r1, [r7, #8]
 800c5f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	f023 0210 	bic.w	r2, r3, #16
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	031b      	lsls	r3, r3, #12
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	4313      	orrs	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	011b      	lsls	r3, r3, #4
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	621a      	str	r2, [r3, #32]
}
 800c63a:	bf00      	nop
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c65c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	4313      	orrs	r3, r2
 800c664:	f043 0307 	orr.w	r3, r3, #7
 800c668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	609a      	str	r2, [r3, #8]
}
 800c670:	bf00      	nop
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	021a      	lsls	r2, r3, #8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	431a      	orrs	r2, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	697a      	ldr	r2, [r7, #20]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	609a      	str	r2, [r3, #8]
}
 800c6b0:	bf00      	nop
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f003 031f 	and.w	r3, r3, #31
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6a1a      	ldr	r2, [r3, #32]
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	43db      	mvns	r3, r3
 800c6de:	401a      	ands	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6a1a      	ldr	r2, [r3, #32]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	f003 031f 	and.w	r3, r3, #31
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	621a      	str	r2, [r3, #32]
}
 800c6fa:	bf00      	nop
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c706:	b480      	push	{r7}
 800c708:	b085      	sub	sp, #20
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c71a:	2302      	movs	r3, #2
 800c71c:	e032      	b.n	800c784 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2202      	movs	r2, #2
 800c72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c756:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e03f      	b.n	800c822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f009 fce2 	bl	8016180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2224      	movs	r2, #36	; 0x24
 800c7c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68da      	ldr	r2, [r3, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f829 	bl	800c82c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	691a      	ldr	r2, [r3, #16]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	695a      	ldr	r2, [r3, #20]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c7f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68da      	ldr	r2, [r3, #12]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
	...

0800c82c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c82c:	b5b0      	push	{r4, r5, r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68da      	ldr	r2, [r3, #12]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	689a      	ldr	r2, [r3, #8]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	431a      	orrs	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	431a      	orrs	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c86c:	f023 030c 	bic.w	r3, r3, #12
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6812      	ldr	r2, [r2, #0]
 800c874:	68f9      	ldr	r1, [r7, #12]
 800c876:	430b      	orrs	r3, r1
 800c878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	699a      	ldr	r2, [r3, #24]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	69db      	ldr	r3, [r3, #28]
 800c894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c898:	f040 80e4 	bne.w	800ca64 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4aab      	ldr	r2, [pc, #684]	; (800cb50 <UART_SetConfig+0x324>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d004      	beq.n	800c8b0 <UART_SetConfig+0x84>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4aaa      	ldr	r2, [pc, #680]	; (800cb54 <UART_SetConfig+0x328>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d16c      	bne.n	800c98a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800c8b0:	f7fd f808 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009a      	lsls	r2, r3, #2
 800c8be:	441a      	add	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ca:	4aa3      	ldr	r2, [pc, #652]	; (800cb58 <UART_SetConfig+0x32c>)
 800c8cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d0:	095b      	lsrs	r3, r3, #5
 800c8d2:	011c      	lsls	r4, r3, #4
 800c8d4:	f7fc fff6 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	009a      	lsls	r2, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	fbb2 f5f3 	udiv	r5, r2, r3
 800c8ee:	f7fc ffe9 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009a      	lsls	r2, r3, #2
 800c8fc:	441a      	add	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	fbb2 f3f3 	udiv	r3, r2, r3
 800c908:	4a93      	ldr	r2, [pc, #588]	; (800cb58 <UART_SetConfig+0x32c>)
 800c90a:	fba2 2303 	umull	r2, r3, r2, r3
 800c90e:	095b      	lsrs	r3, r3, #5
 800c910:	2264      	movs	r2, #100	; 0x64
 800c912:	fb02 f303 	mul.w	r3, r2, r3
 800c916:	1aeb      	subs	r3, r5, r3
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	3332      	adds	r3, #50	; 0x32
 800c91c:	4a8e      	ldr	r2, [pc, #568]	; (800cb58 <UART_SetConfig+0x32c>)
 800c91e:	fba2 2303 	umull	r2, r3, r2, r3
 800c922:	095b      	lsrs	r3, r3, #5
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c92a:	441c      	add	r4, r3
 800c92c:	f7fc ffca 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800c930:	4602      	mov	r2, r0
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009a      	lsls	r2, r3, #2
 800c93a:	441a      	add	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	fbb2 f5f3 	udiv	r5, r2, r3
 800c946:	f7fc ffbd 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800c94a:	4602      	mov	r2, r0
 800c94c:	4613      	mov	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	009a      	lsls	r2, r3, #2
 800c954:	441a      	add	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c960:	4a7d      	ldr	r2, [pc, #500]	; (800cb58 <UART_SetConfig+0x32c>)
 800c962:	fba2 2303 	umull	r2, r3, r2, r3
 800c966:	095b      	lsrs	r3, r3, #5
 800c968:	2264      	movs	r2, #100	; 0x64
 800c96a:	fb02 f303 	mul.w	r3, r2, r3
 800c96e:	1aeb      	subs	r3, r5, r3
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	3332      	adds	r3, #50	; 0x32
 800c974:	4a78      	ldr	r2, [pc, #480]	; (800cb58 <UART_SetConfig+0x32c>)
 800c976:	fba2 2303 	umull	r2, r3, r2, r3
 800c97a:	095b      	lsrs	r3, r3, #5
 800c97c:	f003 0207 	and.w	r2, r3, #7
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4422      	add	r2, r4
 800c986:	609a      	str	r2, [r3, #8]
 800c988:	e154      	b.n	800cc34 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800c98a:	f7fc ff87 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800c98e:	4602      	mov	r2, r0
 800c990:	4613      	mov	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	009a      	lsls	r2, r3, #2
 800c998:	441a      	add	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a4:	4a6c      	ldr	r2, [pc, #432]	; (800cb58 <UART_SetConfig+0x32c>)
 800c9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9aa:	095b      	lsrs	r3, r3, #5
 800c9ac:	011c      	lsls	r4, r3, #4
 800c9ae:	f7fc ff75 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009a      	lsls	r2, r3, #2
 800c9bc:	441a      	add	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	fbb2 f5f3 	udiv	r5, r2, r3
 800c9c8:	f7fc ff68 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	009a      	lsls	r2, r3, #2
 800c9d6:	441a      	add	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e2:	4a5d      	ldr	r2, [pc, #372]	; (800cb58 <UART_SetConfig+0x32c>)
 800c9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e8:	095b      	lsrs	r3, r3, #5
 800c9ea:	2264      	movs	r2, #100	; 0x64
 800c9ec:	fb02 f303 	mul.w	r3, r2, r3
 800c9f0:	1aeb      	subs	r3, r5, r3
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	3332      	adds	r3, #50	; 0x32
 800c9f6:	4a58      	ldr	r2, [pc, #352]	; (800cb58 <UART_SetConfig+0x32c>)
 800c9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9fc:	095b      	lsrs	r3, r3, #5
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca04:	441c      	add	r4, r3
 800ca06:	f7fc ff49 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009a      	lsls	r2, r3, #2
 800ca14:	441a      	add	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	fbb2 f5f3 	udiv	r5, r2, r3
 800ca20:	f7fc ff3c 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800ca24:	4602      	mov	r2, r0
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009a      	lsls	r2, r3, #2
 800ca2e:	441a      	add	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3a:	4a47      	ldr	r2, [pc, #284]	; (800cb58 <UART_SetConfig+0x32c>)
 800ca3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca40:	095b      	lsrs	r3, r3, #5
 800ca42:	2264      	movs	r2, #100	; 0x64
 800ca44:	fb02 f303 	mul.w	r3, r2, r3
 800ca48:	1aeb      	subs	r3, r5, r3
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	3332      	adds	r3, #50	; 0x32
 800ca4e:	4a42      	ldr	r2, [pc, #264]	; (800cb58 <UART_SetConfig+0x32c>)
 800ca50:	fba2 2303 	umull	r2, r3, r2, r3
 800ca54:	095b      	lsrs	r3, r3, #5
 800ca56:	f003 0207 	and.w	r2, r3, #7
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4422      	add	r2, r4
 800ca60:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800ca62:	e0e7      	b.n	800cc34 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a39      	ldr	r2, [pc, #228]	; (800cb50 <UART_SetConfig+0x324>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d004      	beq.n	800ca78 <UART_SetConfig+0x24c>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a38      	ldr	r2, [pc, #224]	; (800cb54 <UART_SetConfig+0x328>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d171      	bne.n	800cb5c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ca78:	f7fc ff24 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009a      	lsls	r2, r3, #2
 800ca86:	441a      	add	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca92:	4a31      	ldr	r2, [pc, #196]	; (800cb58 <UART_SetConfig+0x32c>)
 800ca94:	fba2 2303 	umull	r2, r3, r2, r3
 800ca98:	095b      	lsrs	r3, r3, #5
 800ca9a:	011c      	lsls	r4, r3, #4
 800ca9c:	f7fc ff12 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800caa0:	4602      	mov	r2, r0
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009a      	lsls	r2, r3, #2
 800caaa:	441a      	add	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	fbb2 f5f3 	udiv	r5, r2, r3
 800cab6:	f7fc ff05 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800caba:	4602      	mov	r2, r0
 800cabc:	4613      	mov	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	009a      	lsls	r2, r3, #2
 800cac4:	441a      	add	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad0:	4a21      	ldr	r2, [pc, #132]	; (800cb58 <UART_SetConfig+0x32c>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	095b      	lsrs	r3, r3, #5
 800cad8:	2264      	movs	r2, #100	; 0x64
 800cada:	fb02 f303 	mul.w	r3, r2, r3
 800cade:	1aeb      	subs	r3, r5, r3
 800cae0:	011b      	lsls	r3, r3, #4
 800cae2:	3332      	adds	r3, #50	; 0x32
 800cae4:	4a1c      	ldr	r2, [pc, #112]	; (800cb58 <UART_SetConfig+0x32c>)
 800cae6:	fba2 2303 	umull	r2, r3, r2, r3
 800caea:	095b      	lsrs	r3, r3, #5
 800caec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caf0:	441c      	add	r4, r3
 800caf2:	f7fc fee7 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800caf6:	4602      	mov	r2, r0
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	009a      	lsls	r2, r3, #2
 800cb00:	441a      	add	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	fbb2 f5f3 	udiv	r5, r2, r3
 800cb0c:	f7fc feda 	bl	80098c4 <HAL_RCC_GetPCLK2Freq>
 800cb10:	4602      	mov	r2, r0
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009a      	lsls	r2, r3, #2
 800cb1a:	441a      	add	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb26:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <UART_SetConfig+0x32c>)
 800cb28:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2c:	095b      	lsrs	r3, r3, #5
 800cb2e:	2264      	movs	r2, #100	; 0x64
 800cb30:	fb02 f303 	mul.w	r3, r2, r3
 800cb34:	1aeb      	subs	r3, r5, r3
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	3332      	adds	r3, #50	; 0x32
 800cb3a:	4a07      	ldr	r2, [pc, #28]	; (800cb58 <UART_SetConfig+0x32c>)
 800cb3c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb40:	095b      	lsrs	r3, r3, #5
 800cb42:	f003 020f 	and.w	r2, r3, #15
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4422      	add	r2, r4
 800cb4c:	609a      	str	r2, [r3, #8]
 800cb4e:	e071      	b.n	800cc34 <UART_SetConfig+0x408>
 800cb50:	40011000 	.word	0x40011000
 800cb54:	40011400 	.word	0x40011400
 800cb58:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800cb5c:	f7fc fe9e 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800cb60:	4602      	mov	r2, r0
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	009a      	lsls	r2, r3, #2
 800cb6a:	441a      	add	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb76:	4a31      	ldr	r2, [pc, #196]	; (800cc3c <UART_SetConfig+0x410>)
 800cb78:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7c:	095b      	lsrs	r3, r3, #5
 800cb7e:	011c      	lsls	r4, r3, #4
 800cb80:	f7fc fe8c 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800cb84:	4602      	mov	r2, r0
 800cb86:	4613      	mov	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	009a      	lsls	r2, r3, #2
 800cb8e:	441a      	add	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	fbb2 f5f3 	udiv	r5, r2, r3
 800cb9a:	f7fc fe7f 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009a      	lsls	r2, r3, #2
 800cba8:	441a      	add	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb4:	4a21      	ldr	r2, [pc, #132]	; (800cc3c <UART_SetConfig+0x410>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	095b      	lsrs	r3, r3, #5
 800cbbc:	2264      	movs	r2, #100	; 0x64
 800cbbe:	fb02 f303 	mul.w	r3, r2, r3
 800cbc2:	1aeb      	subs	r3, r5, r3
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	3332      	adds	r3, #50	; 0x32
 800cbc8:	4a1c      	ldr	r2, [pc, #112]	; (800cc3c <UART_SetConfig+0x410>)
 800cbca:	fba2 2303 	umull	r2, r3, r2, r3
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbd4:	441c      	add	r4, r3
 800cbd6:	f7fc fe61 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009a      	lsls	r2, r3, #2
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	fbb2 f5f3 	udiv	r5, r2, r3
 800cbf0:	f7fc fe54 	bl	800989c <HAL_RCC_GetPCLK1Freq>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009a      	lsls	r2, r3, #2
 800cbfe:	441a      	add	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc0a:	4a0c      	ldr	r2, [pc, #48]	; (800cc3c <UART_SetConfig+0x410>)
 800cc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc10:	095b      	lsrs	r3, r3, #5
 800cc12:	2264      	movs	r2, #100	; 0x64
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	1aeb      	subs	r3, r5, r3
 800cc1a:	011b      	lsls	r3, r3, #4
 800cc1c:	3332      	adds	r3, #50	; 0x32
 800cc1e:	4a07      	ldr	r2, [pc, #28]	; (800cc3c <UART_SetConfig+0x410>)
 800cc20:	fba2 2303 	umull	r2, r3, r2, r3
 800cc24:	095b      	lsrs	r3, r3, #5
 800cc26:	f003 020f 	and.w	r2, r3, #15
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4422      	add	r2, r4
 800cc30:	609a      	str	r2, [r3, #8]
}
 800cc32:	e7ff      	b.n	800cc34 <UART_SetConfig+0x408>
 800cc34:	bf00      	nop
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc3c:	51eb851f 	.word	0x51eb851f

0800cc40 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cc40:	b084      	sub	sp, #16
 800cc42:	b480      	push	{r7}
 800cc44:	b085      	sub	sp, #20
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	f107 001c 	add.w	r0, r7, #28
 800cc4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cc56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cc58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cc5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cc5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cc62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cc66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cc6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cc7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	431a      	orrs	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	b004      	add	sp, #16
 800cc94:	4770      	bx	lr

0800cc96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2203      	movs	r2, #3
 800ccde:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 0303 	and.w	r3, r3, #3
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b085      	sub	sp, #20
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd28:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cd2e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cd34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd44:	f023 030f 	bic.w	r3, r3, #15
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	b2db      	uxtb	r3, r3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3314      	adds	r3, #20
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	4413      	add	r3, r2
 800cd90:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
}  
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b085      	sub	sp, #20
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdc8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cdce:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cdd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0

}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b088      	sub	sp, #32
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ce0c:	2310      	movs	r3, #16
 800ce0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce10:	2340      	movs	r3, #64	; 0x40
 800ce12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce14:	2300      	movs	r3, #0
 800ce16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce1c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce1e:	f107 0308 	add.w	r3, r7, #8
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff ff70 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ce2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce2e:	2110      	movs	r1, #16
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fa63 	bl	800d2fc <SDMMC_GetCmdResp1>
 800ce36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce38:	69fb      	ldr	r3, [r7, #28]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b088      	sub	sp, #32
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ce54:	2311      	movs	r3, #17
 800ce56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce58:	2340      	movs	r3, #64	; 0x40
 800ce5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce64:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce66:	f107 0308 	add.w	r3, r7, #8
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff ff4c 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ce72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce76:	2111      	movs	r1, #17
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fa3f 	bl	800d2fc <SDMMC_GetCmdResp1>
 800ce7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce80:	69fb      	ldr	r3, [r7, #28]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3720      	adds	r7, #32
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b088      	sub	sp, #32
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ce9c:	2312      	movs	r3, #18
 800ce9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cea0:	2340      	movs	r3, #64	; 0x40
 800cea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ceae:	f107 0308 	add.w	r3, r7, #8
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff ff28 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ceba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cebe:	2112      	movs	r1, #18
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fa1b 	bl	800d2fc <SDMMC_GetCmdResp1>
 800cec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cec8:	69fb      	ldr	r3, [r7, #28]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3720      	adds	r7, #32
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b088      	sub	sp, #32
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cedc:	2300      	movs	r3, #0
 800cede:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cee4:	2318      	movs	r3, #24
 800cee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cee8:	2340      	movs	r3, #64	; 0x40
 800ceea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cef4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cef6:	f107 0308 	add.w	r3, r7, #8
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff ff04 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cf02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf06:	2118      	movs	r1, #24
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f9f7 	bl	800d2fc <SDMMC_GetCmdResp1>
 800cf0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b088      	sub	sp, #32
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cf2c:	2319      	movs	r3, #25
 800cf2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf30:	2340      	movs	r3, #64	; 0x40
 800cf32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf34:	2300      	movs	r3, #0
 800cf36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf3c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf3e:	f107 0308 	add.w	r3, r7, #8
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff fee0 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4e:	2119      	movs	r1, #25
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f9d3 	bl	800d2fc <SDMMC_GetCmdResp1>
 800cf56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf58:	69fb      	ldr	r3, [r7, #28]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cf74:	230c      	movs	r3, #12
 800cf76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf78:	2340      	movs	r3, #64	; 0x40
 800cf7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf84:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff febc 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800cf92:	4a05      	ldr	r2, [pc, #20]	; (800cfa8 <SDMMC_CmdStopTransfer+0x44>)
 800cf94:	210c      	movs	r1, #12
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f9b0 	bl	800d2fc <SDMMC_GetCmdResp1>
 800cf9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3720      	adds	r7, #32
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	05f5e100 	.word	0x05f5e100

0800cfac <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b08a      	sub	sp, #40	; 0x28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cfc0:	2307      	movs	r3, #7
 800cfc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfc4:	2340      	movs	r3, #64	; 0x40
 800cfc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfd0:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfd2:	f107 0310 	add.w	r3, r7, #16
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7ff fe96 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cfde:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe2:	2107      	movs	r1, #7
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f989 	bl	800d2fc <SDMMC_GetCmdResp1>
 800cfea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3728      	adds	r7, #40	; 0x28
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b088      	sub	sp, #32
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cffe:	2300      	movs	r3, #0
 800d000:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d006:	2300      	movs	r3, #0
 800d008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d00a:	2300      	movs	r3, #0
 800d00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d016:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d018:	f107 0308 	add.w	r3, r7, #8
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff fe73 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f93f 	bl	800d2a8 <SDMMC_GetCmdError>
 800d02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d02c:	69fb      	ldr	r3, [r7, #28]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3720      	adds	r7, #32
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b088      	sub	sp, #32
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d03e:	2300      	movs	r3, #0
 800d040:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d042:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d048:	2308      	movs	r3, #8
 800d04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d04c:	2340      	movs	r3, #64	; 0x40
 800d04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d058:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fe52 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fb10 	bl	800d68c <SDMMC_GetCmdResp7>
 800d06c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d06e:	69fb      	ldr	r3, [r7, #28]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3720      	adds	r7, #32
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b088      	sub	sp, #32
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d082:	2300      	movs	r3, #0
 800d084:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d08a:	2337      	movs	r3, #55	; 0x37
 800d08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d08e:	2340      	movs	r3, #64	; 0x40
 800d090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d092:	2300      	movs	r3, #0
 800d094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d09a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d09c:	f107 0308 	add.w	r3, r7, #8
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fe31 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ac:	2137      	movs	r1, #55	; 0x37
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f924 	bl	800d2fc <SDMMC_GetCmdResp1>
 800d0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0b6:	69fb      	ldr	r3, [r7, #28]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3720      	adds	r7, #32
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d0da:	2329      	movs	r3, #41	; 0x29
 800d0dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0de:	2340      	movs	r3, #64	; 0x40
 800d0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ea:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fe09 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa25 	bl	800d548 <SDMMC_GetCmdResp3>
 800d0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d100:	69fb      	ldr	r3, [r7, #28]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d114:	2300      	movs	r3, #0
 800d116:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d11c:	2306      	movs	r3, #6
 800d11e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d120:	2340      	movs	r3, #64	; 0x40
 800d122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d124:	2300      	movs	r3, #0
 800d126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d12c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d12e:	f107 0308 	add.w	r3, r7, #8
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff fde8 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d13e:	2106      	movs	r1, #6
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f8db 	bl	800d2fc <SDMMC_GetCmdResp1>
 800d146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d148:	69fb      	ldr	r3, [r7, #28]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3720      	adds	r7, #32
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b088      	sub	sp, #32
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d15e:	2300      	movs	r3, #0
 800d160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d162:	2333      	movs	r3, #51	; 0x33
 800d164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d166:	2340      	movs	r3, #64	; 0x40
 800d168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d16a:	2300      	movs	r3, #0
 800d16c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d172:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d174:	f107 0308 	add.w	r3, r7, #8
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff fdc5 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d180:	f241 3288 	movw	r2, #5000	; 0x1388
 800d184:	2133      	movs	r1, #51	; 0x33
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f8b8 	bl	800d2fc <SDMMC_GetCmdResp1>
 800d18c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d18e:	69fb      	ldr	r3, [r7, #28]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d1ac:	23c0      	movs	r3, #192	; 0xc0
 800d1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1ba:	f107 0308 	add.w	r3, r7, #8
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff fda2 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f97e 	bl	800d4c8 <SDMMC_GetCmdResp2>
 800d1cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1ce:	69fb      	ldr	r3, [r7, #28]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3720      	adds	r7, #32
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d1ea:	2309      	movs	r3, #9
 800d1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d1ee:	23c0      	movs	r3, #192	; 0xc0
 800d1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1fa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1fc:	f107 0308 	add.w	r3, r7, #8
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff fd81 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f95d 	bl	800d4c8 <SDMMC_GetCmdResp2>
 800d20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d210:	69fb      	ldr	r3, [r7, #28]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b088      	sub	sp, #32
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d224:	2300      	movs	r3, #0
 800d226:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d22c:	2303      	movs	r3, #3
 800d22e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d230:	2340      	movs	r3, #64	; 0x40
 800d232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d234:	2300      	movs	r3, #0
 800d236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d23c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d23e:	f107 0308 	add.w	r3, r7, #8
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff fd60 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	2103      	movs	r1, #3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f9ae 	bl	800d5b0 <SDMMC_GetCmdResp6>
 800d254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d256:	69fb      	ldr	r3, [r7, #28]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3720      	adds	r7, #32
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b088      	sub	sp, #32
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d26a:	2300      	movs	r3, #0
 800d26c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d272:	230d      	movs	r3, #13
 800d274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d276:	2340      	movs	r3, #64	; 0x40
 800d278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d284:	f107 0308 	add.w	r3, r7, #8
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff fd3d 	bl	800cd0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d290:	f241 3288 	movw	r2, #5000	; 0x1388
 800d294:	210d      	movs	r1, #13
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f830 	bl	800d2fc <SDMMC_GetCmdResp1>
 800d29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d29e:	69fb      	ldr	r3, [r7, #28]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3720      	adds	r7, #32
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d2a8:	b490      	push	{r4, r7}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2b0:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <SDMMC_GetCmdError+0x4c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a10      	ldr	r2, [pc, #64]	; (800d2f8 <SDMMC_GetCmdError+0x50>)
 800d2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ba:	0a5b      	lsrs	r3, r3, #9
 800d2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	1e5c      	subs	r4, r3, #1
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2d0:	e00a      	b.n	800d2e8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0f2      	beq.n	800d2c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d2e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bc90      	pop	{r4, r7}
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	20000170 	.word	0x20000170
 800d2f8:	10624dd3 	.word	0x10624dd3

0800d2fc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	460b      	mov	r3, r1
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d30a:	4b6c      	ldr	r3, [pc, #432]	; (800d4bc <SDMMC_GetCmdResp1+0x1c0>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a6c      	ldr	r2, [pc, #432]	; (800d4c0 <SDMMC_GetCmdResp1+0x1c4>)
 800d310:	fba2 2303 	umull	r2, r3, r2, r3
 800d314:	0a5b      	lsrs	r3, r3, #9
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d31c:	4623      	mov	r3, r4
 800d31e:	1e5c      	subs	r4, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d328:	e0c3      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0f2      	beq.n	800d31c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d33a:	f003 0304 	and.w	r3, r3, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d004      	beq.n	800d34c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2204      	movs	r2, #4
 800d346:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d348:	2304      	movs	r3, #4
 800d34a:	e0b2      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2201      	movs	r2, #1
 800d35c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d35e:	2301      	movs	r3, #1
 800d360:	e0a7      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff fcfb 	bl	800cd5e <SDIO_GetCommandResponse>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	7afb      	ldrb	r3, [r7, #11]
 800d36e:	4293      	cmp	r3, r2
 800d370:	d001      	beq.n	800d376 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d372:	2301      	movs	r3, #1
 800d374:	e09d      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d37c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d37e:	2100      	movs	r1, #0
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff fcf9 	bl	800cd78 <SDIO_GetResponse>
 800d386:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	4b4e      	ldr	r3, [pc, #312]	; (800d4c4 <SDMMC_GetCmdResp1+0x1c8>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800d392:	2300      	movs	r3, #0
 800d394:	e08d      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da02      	bge.n	800d3a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d39c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d3a0:	e087      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d3ac:	2340      	movs	r3, #64	; 0x40
 800d3ae:	e080      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d3ba:	2380      	movs	r3, #128	; 0x80
 800d3bc:	e079      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d3c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3cc:	e071      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3dc:	e069      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ec:	e061      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d3f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3fc:	e059      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d40c:	e051      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d41c:	e049      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d42c:	e041      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d002      	beq.n	800d43e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800d438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d43c:	e039      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d44c:	e031      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d45c:	e029      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d46c:	e021      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d47c:	e019      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d48c:	e011      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d49c:	e009      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d4a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d4ac:	e001      	b.n	800d4b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d4ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd90      	pop	{r4, r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20000170 	.word	0x20000170
 800d4c0:	10624dd3 	.word	0x10624dd3
 800d4c4:	fdffe008 	.word	0xfdffe008

0800d4c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d4c8:	b490      	push	{r4, r7}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4d0:	4b1b      	ldr	r3, [pc, #108]	; (800d540 <SDMMC_GetCmdResp2+0x78>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a1b      	ldr	r2, [pc, #108]	; (800d544 <SDMMC_GetCmdResp2+0x7c>)
 800d4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4da:	0a5b      	lsrs	r3, r3, #9
 800d4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d4e4:	4623      	mov	r3, r4
 800d4e6:	1e5c      	subs	r4, r3, #1
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4f0:	e020      	b.n	800d534 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d0f2      	beq.n	800d4e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d502:	f003 0304 	and.w	r3, r3, #4
 800d506:	2b00      	cmp	r3, #0
 800d508:	d004      	beq.n	800d514 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2204      	movs	r2, #4
 800d50e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d510:	2304      	movs	r3, #4
 800d512:	e00f      	b.n	800d534 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d004      	beq.n	800d52a <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d526:	2301      	movs	r3, #1
 800d528:	e004      	b.n	800d534 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bc90      	pop	{r4, r7}
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	20000170 	.word	0x20000170
 800d544:	10624dd3 	.word	0x10624dd3

0800d548 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d548:	b490      	push	{r4, r7}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d550:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <SDMMC_GetCmdResp3+0x60>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a15      	ldr	r2, [pc, #84]	; (800d5ac <SDMMC_GetCmdResp3+0x64>)
 800d556:	fba2 2303 	umull	r2, r3, r2, r3
 800d55a:	0a5b      	lsrs	r3, r3, #9
 800d55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d560:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d564:	4623      	mov	r3, r4
 800d566:	1e5c      	subs	r4, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d102      	bne.n	800d572 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d56c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d570:	e015      	b.n	800d59e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d576:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0f2      	beq.n	800d564 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d582:	f003 0304 	and.w	r3, r3, #4
 800d586:	2b00      	cmp	r3, #0
 800d588:	d004      	beq.n	800d594 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2204      	movs	r2, #4
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d590:	2304      	movs	r3, #4
 800d592:	e004      	b.n	800d59e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bc90      	pop	{r4, r7}
 800d5a6:	4770      	bx	lr
 800d5a8:	20000170 	.word	0x20000170
 800d5ac:	10624dd3 	.word	0x10624dd3

0800d5b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d5b0:	b590      	push	{r4, r7, lr}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	607a      	str	r2, [r7, #4]
 800d5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d5be:	4b31      	ldr	r3, [pc, #196]	; (800d684 <SDMMC_GetCmdResp6+0xd4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a31      	ldr	r2, [pc, #196]	; (800d688 <SDMMC_GetCmdResp6+0xd8>)
 800d5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c8:	0a5b      	lsrs	r3, r3, #9
 800d5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d5d2:	4623      	mov	r3, r4
 800d5d4:	1e5c      	subs	r4, r3, #1
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5de:	e04c      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0f2      	beq.n	800d5d2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2204      	movs	r2, #4
 800d5fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5fe:	2304      	movs	r3, #4
 800d600:	e03b      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d004      	beq.n	800d618 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d614:	2301      	movs	r3, #1
 800d616:	e030      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff fba0 	bl	800cd5e <SDIO_GetCommandResponse>
 800d61e:	4603      	mov	r3, r0
 800d620:	461a      	mov	r2, r3
 800d622:	7afb      	ldrb	r3, [r7, #11]
 800d624:	4293      	cmp	r3, r2
 800d626:	d001      	beq.n	800d62c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d628:	2301      	movs	r3, #1
 800d62a:	e026      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d632:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d634:	2100      	movs	r1, #0
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff fb9e 	bl	800cd78 <SDIO_GetResponse>
 800d63c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	0c1b      	lsrs	r3, r3, #16
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d652:	2300      	movs	r3, #0
 800d654:	e011      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d664:	e009      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d674:	e001      	b.n	800d67a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	371c      	adds	r7, #28
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd90      	pop	{r4, r7, pc}
 800d682:	bf00      	nop
 800d684:	20000170 	.word	0x20000170
 800d688:	10624dd3 	.word	0x10624dd3

0800d68c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d68c:	b490      	push	{r4, r7}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d694:	4b18      	ldr	r3, [pc, #96]	; (800d6f8 <SDMMC_GetCmdResp7+0x6c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a18      	ldr	r2, [pc, #96]	; (800d6fc <SDMMC_GetCmdResp7+0x70>)
 800d69a:	fba2 2303 	umull	r2, r3, r2, r3
 800d69e:	0a5b      	lsrs	r3, r3, #9
 800d6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	1e5c      	subs	r4, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d102      	bne.n	800d6b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6b4:	e01a      	b.n	800d6ec <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d0f2      	beq.n	800d6a8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c6:	f003 0304 	and.w	r3, r3, #4
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2240      	movs	r2, #64	; 0x40
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6d4:	2304      	movs	r3, #4
 800d6d6:	e009      	b.n	800d6ec <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2240      	movs	r2, #64	; 0x40
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d6ea:	2300      	movs	r3, #0
  
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bc90      	pop	{r4, r7}
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20000170 	.word	0x20000170
 800d6fc:	10624dd3 	.word	0x10624dd3

0800d700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d700:	b084      	sub	sp, #16
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	f107 001c 	add.w	r0, r7, #28
 800d70e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	2b01      	cmp	r3, #1
 800d716:	d122      	bne.n	800d75e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d742:	2b01      	cmp	r3, #1
 800d744:	d105      	bne.n	800d752 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f001 fa7c 	bl	800ec50 <USB_CoreReset>
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]
 800d75c:	e01a      	b.n	800d794 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 fa70 	bl	800ec50 <USB_CoreReset>
 800d770:	4603      	mov	r3, r0
 800d772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	639a      	str	r2, [r3, #56]	; 0x38
 800d786:	e005      	b.n	800d794 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	2b01      	cmp	r3, #1
 800d798:	d10b      	bne.n	800d7b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f043 0206 	orr.w	r2, r3, #6
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	f043 0220 	orr.w	r2, r3, #32
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7be:	b004      	add	sp, #16
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d165      	bne.n	800d8a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	4a41      	ldr	r2, [pc, #260]	; (800d8e0 <USB_SetTurnaroundTime+0x11c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d906      	bls.n	800d7ee <USB_SetTurnaroundTime+0x2a>
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	4a40      	ldr	r2, [pc, #256]	; (800d8e4 <USB_SetTurnaroundTime+0x120>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d802      	bhi.n	800d7ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d7e8:	230f      	movs	r3, #15
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	e062      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	4a3c      	ldr	r2, [pc, #240]	; (800d8e4 <USB_SetTurnaroundTime+0x120>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d906      	bls.n	800d804 <USB_SetTurnaroundTime+0x40>
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	4a3b      	ldr	r2, [pc, #236]	; (800d8e8 <USB_SetTurnaroundTime+0x124>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d802      	bhi.n	800d804 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d7fe:	230e      	movs	r3, #14
 800d800:	617b      	str	r3, [r7, #20]
 800d802:	e057      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4a38      	ldr	r2, [pc, #224]	; (800d8e8 <USB_SetTurnaroundTime+0x124>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d906      	bls.n	800d81a <USB_SetTurnaroundTime+0x56>
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	4a37      	ldr	r2, [pc, #220]	; (800d8ec <USB_SetTurnaroundTime+0x128>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d802      	bhi.n	800d81a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d814:	230d      	movs	r3, #13
 800d816:	617b      	str	r3, [r7, #20]
 800d818:	e04c      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	4a33      	ldr	r2, [pc, #204]	; (800d8ec <USB_SetTurnaroundTime+0x128>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d906      	bls.n	800d830 <USB_SetTurnaroundTime+0x6c>
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	4a32      	ldr	r2, [pc, #200]	; (800d8f0 <USB_SetTurnaroundTime+0x12c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d802      	bhi.n	800d830 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d82a:	230c      	movs	r3, #12
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	e041      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	4a2f      	ldr	r2, [pc, #188]	; (800d8f0 <USB_SetTurnaroundTime+0x12c>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d906      	bls.n	800d846 <USB_SetTurnaroundTime+0x82>
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a2e      	ldr	r2, [pc, #184]	; (800d8f4 <USB_SetTurnaroundTime+0x130>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d802      	bhi.n	800d846 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d840:	230b      	movs	r3, #11
 800d842:	617b      	str	r3, [r7, #20]
 800d844:	e036      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	4a2a      	ldr	r2, [pc, #168]	; (800d8f4 <USB_SetTurnaroundTime+0x130>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d906      	bls.n	800d85c <USB_SetTurnaroundTime+0x98>
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4a29      	ldr	r2, [pc, #164]	; (800d8f8 <USB_SetTurnaroundTime+0x134>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d802      	bhi.n	800d85c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d856:	230a      	movs	r3, #10
 800d858:	617b      	str	r3, [r7, #20]
 800d85a:	e02b      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	4a26      	ldr	r2, [pc, #152]	; (800d8f8 <USB_SetTurnaroundTime+0x134>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d906      	bls.n	800d872 <USB_SetTurnaroundTime+0xae>
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a25      	ldr	r2, [pc, #148]	; (800d8fc <USB_SetTurnaroundTime+0x138>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d802      	bhi.n	800d872 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d86c:	2309      	movs	r3, #9
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	e020      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	4a21      	ldr	r2, [pc, #132]	; (800d8fc <USB_SetTurnaroundTime+0x138>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d906      	bls.n	800d888 <USB_SetTurnaroundTime+0xc4>
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4a20      	ldr	r2, [pc, #128]	; (800d900 <USB_SetTurnaroundTime+0x13c>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d802      	bhi.n	800d888 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d882:	2308      	movs	r3, #8
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	e015      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	4a1d      	ldr	r2, [pc, #116]	; (800d900 <USB_SetTurnaroundTime+0x13c>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d906      	bls.n	800d89e <USB_SetTurnaroundTime+0xda>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4a1c      	ldr	r2, [pc, #112]	; (800d904 <USB_SetTurnaroundTime+0x140>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d802      	bhi.n	800d89e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d898:	2307      	movs	r3, #7
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	e00a      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d89e:	2306      	movs	r3, #6
 800d8a0:	617b      	str	r3, [r7, #20]
 800d8a2:	e007      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d102      	bne.n	800d8b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d8aa:	2309      	movs	r3, #9
 800d8ac:	617b      	str	r3, [r7, #20]
 800d8ae:	e001      	b.n	800d8b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d8b0:	2309      	movs	r3, #9
 800d8b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	68da      	ldr	r2, [r3, #12]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	029b      	lsls	r3, r3, #10
 800d8c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d8cc:	431a      	orrs	r2, r3
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	371c      	adds	r7, #28
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	00d8acbf 	.word	0x00d8acbf
 800d8e4:	00e4e1bf 	.word	0x00e4e1bf
 800d8e8:	00f423ff 	.word	0x00f423ff
 800d8ec:	0106737f 	.word	0x0106737f
 800d8f0:	011a499f 	.word	0x011a499f
 800d8f4:	01312cff 	.word	0x01312cff
 800d8f8:	014ca43f 	.word	0x014ca43f
 800d8fc:	016e35ff 	.word	0x016e35ff
 800d900:	01a6ab1f 	.word	0x01a6ab1f
 800d904:	01e847ff 	.word	0x01e847ff

0800d908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	f043 0201 	orr.w	r2, r3, #1
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f023 0201 	bic.w	r2, r3, #1
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d964:	78fb      	ldrb	r3, [r7, #3]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d106      	bne.n	800d978 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	60da      	str	r2, [r3, #12]
 800d976:	e00b      	b.n	800d990 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d978:	78fb      	ldrb	r3, [r7, #3]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d106      	bne.n	800d98c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	60da      	str	r2, [r3, #12]
 800d98a:	e001      	b.n	800d990 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e003      	b.n	800d998 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d990:	2032      	movs	r0, #50	; 0x32
 800d992:	f7f8 fbff 	bl	8006194 <HAL_Delay>

  return HAL_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b086      	sub	sp, #24
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d9ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	613b      	str	r3, [r7, #16]
 800d9be:	e009      	b.n	800d9d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3340      	adds	r3, #64	; 0x40
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	2b0e      	cmp	r3, #14
 800d9d8:	d9f2      	bls.n	800d9c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d112      	bne.n	800da06 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	639a      	str	r2, [r3, #56]	; 0x38
 800da04:	e00b      	b.n	800da1e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800da24:	461a      	mov	r2, r3
 800da26:	2300      	movs	r3, #0
 800da28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da30:	4619      	mov	r1, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da38:	461a      	mov	r2, r3
 800da3a:	680b      	ldr	r3, [r1, #0]
 800da3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	2b01      	cmp	r3, #1
 800da42:	d10c      	bne.n	800da5e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da46:	2b00      	cmp	r3, #0
 800da48:	d104      	bne.n	800da54 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800da4a:	2100      	movs	r1, #0
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f961 	bl	800dd14 <USB_SetDevSpeed>
 800da52:	e008      	b.n	800da66 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800da54:	2101      	movs	r1, #1
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f95c 	bl	800dd14 <USB_SetDevSpeed>
 800da5c:	e003      	b.n	800da66 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800da5e:	2103      	movs	r1, #3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f957 	bl	800dd14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da66:	2110      	movs	r1, #16
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f000 f90b 	bl	800dc84 <USB_FlushTxFifo>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f929 	bl	800dcd0 <USB_FlushRxFifo>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da8e:	461a      	mov	r2, r3
 800da90:	2300      	movs	r3, #0
 800da92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da9a:	461a      	mov	r2, r3
 800da9c:	2300      	movs	r3, #0
 800da9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa6:	461a      	mov	r2, r3
 800daa8:	2300      	movs	r3, #0
 800daaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800daac:	2300      	movs	r3, #0
 800daae:	613b      	str	r3, [r7, #16]
 800dab0:	e043      	b.n	800db3a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dac8:	d118      	bne.n	800dafc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10a      	bne.n	800dae6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	015a      	lsls	r2, r3, #5
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	4413      	add	r3, r2
 800dad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dadc:	461a      	mov	r2, r3
 800dade:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	e013      	b.n	800db0e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	4413      	add	r3, r2
 800daee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daf2:	461a      	mov	r2, r3
 800daf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800daf8:	6013      	str	r3, [r2, #0]
 800dafa:	e008      	b.n	800db0e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	015a      	lsls	r2, r3, #5
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4413      	add	r3, r2
 800db04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db08:	461a      	mov	r2, r3
 800db0a:	2300      	movs	r3, #0
 800db0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	015a      	lsls	r2, r3, #5
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	4413      	add	r3, r2
 800db16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db1a:	461a      	mov	r2, r3
 800db1c:	2300      	movs	r3, #0
 800db1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	015a      	lsls	r2, r3, #5
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	4413      	add	r3, r2
 800db28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2c:	461a      	mov	r2, r3
 800db2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800db32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	3301      	adds	r3, #1
 800db38:	613b      	str	r3, [r7, #16]
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d3b7      	bcc.n	800dab2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db42:	2300      	movs	r3, #0
 800db44:	613b      	str	r3, [r7, #16]
 800db46:	e043      	b.n	800dbd0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db5e:	d118      	bne.n	800db92 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10a      	bne.n	800db7c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db72:	461a      	mov	r2, r3
 800db74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	e013      	b.n	800dba4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db88:	461a      	mov	r2, r3
 800db8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800db8e:	6013      	str	r3, [r2, #0]
 800db90:	e008      	b.n	800dba4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	015a      	lsls	r2, r3, #5
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	4413      	add	r3, r2
 800db9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db9e:	461a      	mov	r2, r3
 800dba0:	2300      	movs	r3, #0
 800dba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	015a      	lsls	r2, r3, #5
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dbc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	613b      	str	r3, [r7, #16]
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d3b7      	bcc.n	800db48 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbea:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d111      	bne.n	800dc16 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4b20      	ldr	r3, [pc, #128]	; (800dc7c <USB_DevInit+0x2dc>)
 800dbfc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc10:	f043 0303 	orr.w	r3, r3, #3
 800dc14:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dc22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d105      	bne.n	800dc36 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	f043 0210 	orr.w	r2, r3, #16
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	699a      	ldr	r2, [r3, #24]
 800dc3a:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <USB_DevInit+0x2e0>)
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d005      	beq.n	800dc54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	f043 0208 	orr.w	r2, r3, #8
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d107      	bne.n	800dc6a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc62:	f043 0304 	orr.w	r3, r3, #4
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc76:	b004      	add	sp, #16
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	00800100 	.word	0x00800100
 800dc80:	803c3800 	.word	0x803c3800

0800dc84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	019b      	lsls	r3, r3, #6
 800dc96:	f043 0220 	orr.w	r2, r3, #32
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3301      	adds	r3, #1
 800dca2:	60fb      	str	r3, [r7, #12]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4a09      	ldr	r2, [pc, #36]	; (800dccc <USB_FlushTxFifo+0x48>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d901      	bls.n	800dcb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e006      	b.n	800dcbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	f003 0320 	and.w	r3, r3, #32
 800dcb8:	2b20      	cmp	r3, #32
 800dcba:	d0f0      	beq.n	800dc9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	00030d40 	.word	0x00030d40

0800dcd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2210      	movs	r2, #16
 800dce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3301      	adds	r3, #1
 800dce6:	60fb      	str	r3, [r7, #12]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	4a09      	ldr	r2, [pc, #36]	; (800dd10 <USB_FlushRxFifo+0x40>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d901      	bls.n	800dcf4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e006      	b.n	800dd02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	f003 0310 	and.w	r3, r3, #16
 800dcfc:	2b10      	cmp	r3, #16
 800dcfe:	d0f0      	beq.n	800dce2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	00030d40 	.word	0x00030d40

0800dd14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	68f9      	ldr	r1, [r7, #12]
 800dd30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd34:	4313      	orrs	r3, r2
 800dd36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b087      	sub	sp, #28
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	f003 0306 	and.w	r3, r3, #6
 800dd5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d102      	bne.n	800dd6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dd66:	2300      	movs	r3, #0
 800dd68:	75fb      	strb	r3, [r7, #23]
 800dd6a:	e00a      	b.n	800dd82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d002      	beq.n	800dd78 <USB_GetDevSpeed+0x32>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2b06      	cmp	r3, #6
 800dd76:	d102      	bne.n	800dd7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dd78:	2302      	movs	r3, #2
 800dd7a:	75fb      	strb	r3, [r7, #23]
 800dd7c:	e001      	b.n	800dd82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dd7e:	230f      	movs	r3, #15
 800dd80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	371c      	adds	r7, #28
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	785b      	ldrb	r3, [r3, #1]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d13a      	bne.n	800de22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb2:	69da      	ldr	r2, [r3, #28]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	68f9      	ldr	r1, [r7, #12]
 800ddc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	015a      	lsls	r2, r3, #5
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d155      	bne.n	800de90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	78db      	ldrb	r3, [r3, #3]
 800ddfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	059b      	lsls	r3, r3, #22
 800de06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de08:	4313      	orrs	r3, r2
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	0151      	lsls	r1, r2, #5
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	440a      	add	r2, r1
 800de12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de1e:	6013      	str	r3, [r2, #0]
 800de20:	e036      	b.n	800de90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de28:	69da      	ldr	r2, [r3, #28]
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f003 030f 	and.w	r3, r3, #15
 800de32:	2101      	movs	r1, #1
 800de34:	fa01 f303 	lsl.w	r3, r1, r3
 800de38:	041b      	lsls	r3, r3, #16
 800de3a:	68f9      	ldr	r1, [r7, #12]
 800de3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de40:	4313      	orrs	r3, r2
 800de42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	015a      	lsls	r2, r3, #5
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4413      	add	r3, r2
 800de4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d11a      	bne.n	800de90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	4413      	add	r3, r2
 800de62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	78db      	ldrb	r3, [r3, #3]
 800de74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de76:	430b      	orrs	r3, r1
 800de78:	4313      	orrs	r3, r2
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	0151      	lsls	r1, r2, #5
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	440a      	add	r2, r1
 800de82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	785b      	ldrb	r3, [r3, #1]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d135      	bne.n	800df28 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	f003 030f 	and.w	r3, r3, #15
 800decc:	2101      	movs	r1, #1
 800dece:	fa01 f303 	lsl.w	r3, r1, r3
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	43db      	mvns	r3, r3
 800ded6:	68f9      	ldr	r1, [r7, #12]
 800ded8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dedc:	4013      	ands	r3, r2
 800dede:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee6:	69da      	ldr	r2, [r3, #28]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	f003 030f 	and.w	r3, r3, #15
 800def0:	2101      	movs	r1, #1
 800def2:	fa01 f303 	lsl.w	r3, r1, r3
 800def6:	b29b      	uxth	r3, r3
 800def8:	43db      	mvns	r3, r3
 800defa:	68f9      	ldr	r1, [r7, #12]
 800defc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df00:	4013      	ands	r3, r2
 800df02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	0159      	lsls	r1, r3, #5
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	440b      	add	r3, r1
 800df1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1e:	4619      	mov	r1, r3
 800df20:	4b1f      	ldr	r3, [pc, #124]	; (800dfa0 <USB_DeactivateEndpoint+0x100>)
 800df22:	4013      	ands	r3, r2
 800df24:	600b      	str	r3, [r1, #0]
 800df26:	e034      	b.n	800df92 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	f003 030f 	and.w	r3, r3, #15
 800df38:	2101      	movs	r1, #1
 800df3a:	fa01 f303 	lsl.w	r3, r1, r3
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	43db      	mvns	r3, r3
 800df42:	68f9      	ldr	r1, [r7, #12]
 800df44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df48:	4013      	ands	r3, r2
 800df4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df52:	69da      	ldr	r2, [r3, #28]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	2101      	movs	r1, #1
 800df5e:	fa01 f303 	lsl.w	r3, r1, r3
 800df62:	041b      	lsls	r3, r3, #16
 800df64:	43db      	mvns	r3, r3
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df6c:	4013      	ands	r3, r2
 800df6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	015a      	lsls	r2, r3, #5
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	4413      	add	r3, r2
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	0159      	lsls	r1, r3, #5
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	440b      	add	r3, r1
 800df86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8a:	4619      	mov	r1, r3
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <USB_DeactivateEndpoint+0x104>)
 800df8e:	4013      	ands	r3, r2
 800df90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	ec337800 	.word	0xec337800
 800dfa4:	eff37800 	.word	0xeff37800

0800dfa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08a      	sub	sp, #40	; 0x28
 800dfac:	af02      	add	r7, sp, #8
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	f040 815c 	bne.w	800e282 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	695b      	ldr	r3, [r3, #20]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d132      	bne.n	800e038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	69ba      	ldr	r2, [r7, #24]
 800dfe2:	0151      	lsls	r1, r2, #5
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	440a      	add	r2, r1
 800dfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	015a      	lsls	r2, r3, #5
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	4413      	add	r3, r2
 800dffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	0151      	lsls	r1, r2, #5
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	440a      	add	r2, r1
 800e00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	69ba      	ldr	r2, [r7, #24]
 800e026:	0151      	lsls	r1, r2, #5
 800e028:	69fa      	ldr	r2, [r7, #28]
 800e02a:	440a      	add	r2, r1
 800e02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e030:	0cdb      	lsrs	r3, r3, #19
 800e032:	04db      	lsls	r3, r3, #19
 800e034:	6113      	str	r3, [r2, #16]
 800e036:	e074      	b.n	800e122 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	69ba      	ldr	r2, [r7, #24]
 800e048:	0151      	lsls	r1, r2, #5
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	440a      	add	r2, r1
 800e04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e052:	0cdb      	lsrs	r3, r3, #19
 800e054:	04db      	lsls	r3, r3, #19
 800e056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	015a      	lsls	r2, r3, #5
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	4413      	add	r3, r2
 800e060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e064:	691b      	ldr	r3, [r3, #16]
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	0151      	lsls	r1, r2, #5
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	440a      	add	r2, r1
 800e06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	015a      	lsls	r2, r3, #5
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	4413      	add	r3, r2
 800e084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e088:	691a      	ldr	r2, [r3, #16]
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	6959      	ldr	r1, [r3, #20]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	440b      	add	r3, r1
 800e094:	1e59      	subs	r1, r3, #1
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e09e:	04d9      	lsls	r1, r3, #19
 800e0a0:	4b9d      	ldr	r3, [pc, #628]	; (800e318 <USB_EPStartXfer+0x370>)
 800e0a2:	400b      	ands	r3, r1
 800e0a4:	69b9      	ldr	r1, [r7, #24]
 800e0a6:	0148      	lsls	r0, r1, #5
 800e0a8:	69f9      	ldr	r1, [r7, #28]
 800e0aa:	4401      	add	r1, r0
 800e0ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	015a      	lsls	r2, r3, #5
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0c0:	691a      	ldr	r2, [r3, #16]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0ca:	69b9      	ldr	r1, [r7, #24]
 800e0cc:	0148      	lsls	r0, r1, #5
 800e0ce:	69f9      	ldr	r1, [r7, #28]
 800e0d0:	4401      	add	r1, r0
 800e0d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	78db      	ldrb	r3, [r3, #3]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d11f      	bne.n	800e122 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	69ba      	ldr	r2, [r7, #24]
 800e0f2:	0151      	lsls	r1, r2, #5
 800e0f4:	69fa      	ldr	r2, [r7, #28]
 800e0f6:	440a      	add	r2, r1
 800e0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e100:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e10e:	691b      	ldr	r3, [r3, #16]
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	0151      	lsls	r1, r2, #5
 800e114:	69fa      	ldr	r2, [r7, #28]
 800e116:	440a      	add	r2, r1
 800e118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e11c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e120:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d14b      	bne.n	800e1c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	015a      	lsls	r2, r3, #5
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	4413      	add	r3, r2
 800e138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e13c:	461a      	mov	r2, r3
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	78db      	ldrb	r3, [r3, #3]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d128      	bne.n	800e19e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d110      	bne.n	800e17e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69ba      	ldr	r2, [r7, #24]
 800e16c:	0151      	lsls	r1, r2, #5
 800e16e:	69fa      	ldr	r2, [r7, #28]
 800e170:	440a      	add	r2, r1
 800e172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	e00f      	b.n	800e19e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	015a      	lsls	r2, r3, #5
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	4413      	add	r3, r2
 800e186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	69ba      	ldr	r2, [r7, #24]
 800e18e:	0151      	lsls	r1, r2, #5
 800e190:	69fa      	ldr	r2, [r7, #28]
 800e192:	440a      	add	r2, r1
 800e194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e19c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	015a      	lsls	r2, r3, #5
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	69ba      	ldr	r2, [r7, #24]
 800e1ae:	0151      	lsls	r1, r2, #5
 800e1b0:	69fa      	ldr	r2, [r7, #28]
 800e1b2:	440a      	add	r2, r1
 800e1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1bc:	6013      	str	r3, [r2, #0]
 800e1be:	e12f      	b.n	800e420 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	015a      	lsls	r2, r3, #5
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	69ba      	ldr	r2, [r7, #24]
 800e1d0:	0151      	lsls	r1, r2, #5
 800e1d2:	69fa      	ldr	r2, [r7, #28]
 800e1d4:	440a      	add	r2, r1
 800e1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	78db      	ldrb	r3, [r3, #3]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d015      	beq.n	800e214 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 8117 	beq.w	800e420 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	f003 030f 	and.w	r3, r3, #15
 800e202:	2101      	movs	r1, #1
 800e204:	fa01 f303 	lsl.w	r3, r1, r3
 800e208:	69f9      	ldr	r1, [r7, #28]
 800e20a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e20e:	4313      	orrs	r3, r2
 800e210:	634b      	str	r3, [r1, #52]	; 0x34
 800e212:	e105      	b.n	800e420 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e220:	2b00      	cmp	r3, #0
 800e222:	d110      	bne.n	800e246 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	69ba      	ldr	r2, [r7, #24]
 800e234:	0151      	lsls	r1, r2, #5
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	440a      	add	r2, r1
 800e23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e23e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e242:	6013      	str	r3, [r2, #0]
 800e244:	e00f      	b.n	800e266 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	015a      	lsls	r2, r3, #5
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	4413      	add	r3, r2
 800e24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	0151      	lsls	r1, r2, #5
 800e258:	69fa      	ldr	r2, [r7, #28]
 800e25a:	440a      	add	r2, r1
 800e25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e264:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	68d9      	ldr	r1, [r3, #12]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	781a      	ldrb	r2, [r3, #0]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	b298      	uxth	r0, r3
 800e274:	79fb      	ldrb	r3, [r7, #7]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	4603      	mov	r3, r0
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f000 fa2b 	bl	800e6d6 <USB_WritePacket>
 800e280:	e0ce      	b.n	800e420 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	0151      	lsls	r1, r2, #5
 800e294:	69fa      	ldr	r2, [r7, #28]
 800e296:	440a      	add	r2, r1
 800e298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e29c:	0cdb      	lsrs	r3, r3, #19
 800e29e:	04db      	lsls	r3, r3, #19
 800e2a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	015a      	lsls	r2, r3, #5
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	69ba      	ldr	r2, [r7, #24]
 800e2b2:	0151      	lsls	r1, r2, #5
 800e2b4:	69fa      	ldr	r2, [r7, #28]
 800e2b6:	440a      	add	r2, r1
 800e2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d126      	bne.n	800e31c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	015a      	lsls	r2, r3, #5
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2da:	691a      	ldr	r2, [r3, #16]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2e4:	69b9      	ldr	r1, [r7, #24]
 800e2e6:	0148      	lsls	r0, r1, #5
 800e2e8:	69f9      	ldr	r1, [r7, #28]
 800e2ea:	4401      	add	r1, r0
 800e2ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	0151      	lsls	r1, r2, #5
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	440a      	add	r2, r1
 800e30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e30e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e312:	6113      	str	r3, [r2, #16]
 800e314:	e036      	b.n	800e384 <USB_EPStartXfer+0x3dc>
 800e316:	bf00      	nop
 800e318:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	695a      	ldr	r2, [r3, #20]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	4413      	add	r3, r2
 800e326:	1e5a      	subs	r2, r3, #1
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e330:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	015a      	lsls	r2, r3, #5
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	4413      	add	r3, r2
 800e33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e33e:	691a      	ldr	r2, [r3, #16]
 800e340:	8afb      	ldrh	r3, [r7, #22]
 800e342:	04d9      	lsls	r1, r3, #19
 800e344:	4b39      	ldr	r3, [pc, #228]	; (800e42c <USB_EPStartXfer+0x484>)
 800e346:	400b      	ands	r3, r1
 800e348:	69b9      	ldr	r1, [r7, #24]
 800e34a:	0148      	lsls	r0, r1, #5
 800e34c:	69f9      	ldr	r1, [r7, #28]
 800e34e:	4401      	add	r1, r0
 800e350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e354:	4313      	orrs	r3, r2
 800e356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	015a      	lsls	r2, r3, #5
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	4413      	add	r3, r2
 800e360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e364:	691a      	ldr	r2, [r3, #16]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	8af9      	ldrh	r1, [r7, #22]
 800e36c:	fb01 f303 	mul.w	r3, r1, r3
 800e370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e374:	69b9      	ldr	r1, [r7, #24]
 800e376:	0148      	lsls	r0, r1, #5
 800e378:	69f9      	ldr	r1, [r7, #28]
 800e37a:	4401      	add	r1, r0
 800e37c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e380:	4313      	orrs	r3, r2
 800e382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e384:	79fb      	ldrb	r3, [r7, #7]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10d      	bne.n	800e3a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	68d9      	ldr	r1, [r3, #12]
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	015a      	lsls	r2, r3, #5
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	4413      	add	r3, r2
 800e39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a2:	460a      	mov	r2, r1
 800e3a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	78db      	ldrb	r3, [r3, #3]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d128      	bne.n	800e400 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d110      	bne.n	800e3e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	015a      	lsls	r2, r3, #5
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	0151      	lsls	r1, r2, #5
 800e3d0:	69fa      	ldr	r2, [r7, #28]
 800e3d2:	440a      	add	r2, r1
 800e3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	e00f      	b.n	800e400 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	015a      	lsls	r2, r3, #5
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	0151      	lsls	r1, r2, #5
 800e3f2:	69fa      	ldr	r2, [r7, #28]
 800e3f4:	440a      	add	r2, r1
 800e3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	015a      	lsls	r2, r3, #5
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	4413      	add	r3, r2
 800e408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	0151      	lsls	r1, r2, #5
 800e412:	69fa      	ldr	r2, [r7, #28]
 800e414:	440a      	add	r2, r1
 800e416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e41a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e41e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3720      	adds	r7, #32
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	1ff80000 	.word	0x1ff80000

0800e430 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e430:	b480      	push	{r7}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	4613      	mov	r3, r2
 800e43c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	f040 80cd 	bne.w	800e5ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d132      	bne.n	800e4c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	015a      	lsls	r2, r3, #5
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	4413      	add	r3, r2
 800e462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	0151      	lsls	r1, r2, #5
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	440a      	add	r2, r1
 800e470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e47c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	693a      	ldr	r2, [r7, #16]
 800e48e:	0151      	lsls	r1, r2, #5
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	440a      	add	r2, r1
 800e494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e49c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	015a      	lsls	r2, r3, #5
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	693a      	ldr	r2, [r7, #16]
 800e4ae:	0151      	lsls	r1, r2, #5
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	440a      	add	r2, r1
 800e4b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4b8:	0cdb      	lsrs	r3, r3, #19
 800e4ba:	04db      	lsls	r3, r3, #19
 800e4bc:	6113      	str	r3, [r2, #16]
 800e4be:	e04e      	b.n	800e55e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4da:	0cdb      	lsrs	r3, r3, #19
 800e4dc:	04db      	lsls	r3, r3, #19
 800e4de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	0151      	lsls	r1, r2, #5
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	440a      	add	r2, r1
 800e4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e502:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	695a      	ldr	r2, [r3, #20]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d903      	bls.n	800e518 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	689a      	ldr	r2, [r3, #8]
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e524:	691b      	ldr	r3, [r3, #16]
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	015a      	lsls	r2, r3, #5
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	4413      	add	r3, r2
 800e540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e544:	691a      	ldr	r2, [r3, #16]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e54e:	6939      	ldr	r1, [r7, #16]
 800e550:	0148      	lsls	r0, r1, #5
 800e552:	6979      	ldr	r1, [r7, #20]
 800e554:	4401      	add	r1, r0
 800e556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e55a:	4313      	orrs	r3, r2
 800e55c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d11e      	bne.n	800e5a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d009      	beq.n	800e580 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e578:	461a      	mov	r2, r3
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	693a      	ldr	r2, [r7, #16]
 800e590:	0151      	lsls	r1, r2, #5
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	440a      	add	r2, r1
 800e596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e59a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	e092      	b.n	800e6c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	015a      	lsls	r2, r3, #5
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	0151      	lsls	r1, r2, #5
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	440a      	add	r2, r1
 800e5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d07e      	beq.n	800e6c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f003 030f 	and.w	r3, r3, #15
 800e5da:	2101      	movs	r1, #1
 800e5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e0:	6979      	ldr	r1, [r7, #20]
 800e5e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	634b      	str	r3, [r1, #52]	; 0x34
 800e5ea:	e06d      	b.n	800e6c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	015a      	lsls	r2, r3, #5
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	0151      	lsls	r1, r2, #5
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	440a      	add	r2, r1
 800e602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e606:	0cdb      	lsrs	r3, r3, #19
 800e608:	04db      	lsls	r3, r3, #19
 800e60a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	0151      	lsls	r1, r2, #5
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	440a      	add	r2, r1
 800e622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e62a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e62e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d003      	beq.n	800e640 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	689a      	ldr	r2, [r3, #8]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	0151      	lsls	r1, r2, #5
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	440a      	add	r2, r1
 800e656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e65a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e65e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e66c:	691a      	ldr	r2, [r3, #16]
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e676:	6939      	ldr	r1, [r7, #16]
 800e678:	0148      	lsls	r0, r1, #5
 800e67a:	6979      	ldr	r1, [r7, #20]
 800e67c:	4401      	add	r1, r0
 800e67e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e682:	4313      	orrs	r3, r2
 800e684:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d10d      	bne.n	800e6a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d009      	beq.n	800e6a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	68d9      	ldr	r1, [r3, #12]
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	015a      	lsls	r2, r3, #5
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a4:	460a      	mov	r2, r1
 800e6a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	015a      	lsls	r2, r3, #5
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	693a      	ldr	r2, [r7, #16]
 800e6b8:	0151      	lsls	r1, r2, #5
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	440a      	add	r2, r1
 800e6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	371c      	adds	r7, #28
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b089      	sub	sp, #36	; 0x24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	60f8      	str	r0, [r7, #12]
 800e6de:	60b9      	str	r1, [r7, #8]
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	71fb      	strb	r3, [r7, #7]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e6f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d11a      	bne.n	800e732 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e6fc:	88bb      	ldrh	r3, [r7, #4]
 800e6fe:	3303      	adds	r3, #3
 800e700:	089b      	lsrs	r3, r3, #2
 800e702:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e704:	2300      	movs	r3, #0
 800e706:	61bb      	str	r3, [r7, #24]
 800e708:	e00f      	b.n	800e72a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e70a:	79fb      	ldrb	r3, [r7, #7]
 800e70c:	031a      	lsls	r2, r3, #12
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	4413      	add	r3, r2
 800e712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e716:	461a      	mov	r2, r3
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	3304      	adds	r3, #4
 800e722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	3301      	adds	r3, #1
 800e728:	61bb      	str	r3, [r7, #24]
 800e72a:	69ba      	ldr	r2, [r7, #24]
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d3eb      	bcc.n	800e70a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3724      	adds	r7, #36	; 0x24
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e740:	b480      	push	{r7}
 800e742:	b089      	sub	sp, #36	; 0x24
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	4613      	mov	r3, r2
 800e74c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e756:	88fb      	ldrh	r3, [r7, #6]
 800e758:	3303      	adds	r3, #3
 800e75a:	089b      	lsrs	r3, r3, #2
 800e75c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e75e:	2300      	movs	r3, #0
 800e760:	61bb      	str	r3, [r7, #24]
 800e762:	e00b      	b.n	800e77c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	3304      	adds	r3, #4
 800e774:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	3301      	adds	r3, #1
 800e77a:	61bb      	str	r3, [r7, #24]
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	429a      	cmp	r2, r3
 800e782:	d3ef      	bcc.n	800e764 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e784:	69fb      	ldr	r3, [r7, #28]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3724      	adds	r7, #36	; 0x24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e792:	b480      	push	{r7}
 800e794:	b085      	sub	sp, #20
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	785b      	ldrb	r3, [r3, #1]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d12c      	bne.n	800e808 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	015a      	lsls	r2, r3, #5
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	db12      	blt.n	800e7e6 <USB_EPSetStall+0x54>
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00f      	beq.n	800e7e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	0151      	lsls	r1, r2, #5
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	440a      	add	r2, r1
 800e7dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	0151      	lsls	r1, r2, #5
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	440a      	add	r2, r1
 800e7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e804:	6013      	str	r3, [r2, #0]
 800e806:	e02b      	b.n	800e860 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	db12      	blt.n	800e840 <USB_EPSetStall+0xae>
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00f      	beq.n	800e840 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	4413      	add	r3, r2
 800e828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	0151      	lsls	r1, r2, #5
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	440a      	add	r2, r1
 800e836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e83a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e83e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	015a      	lsls	r2, r3, #5
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	4413      	add	r3, r2
 800e848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	0151      	lsls	r1, r2, #5
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	440a      	add	r2, r1
 800e856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e85a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e85e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3714      	adds	r7, #20
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr

0800e86e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e86e:	b480      	push	{r7}
 800e870:	b085      	sub	sp, #20
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	785b      	ldrb	r3, [r3, #1]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d128      	bne.n	800e8dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	015a      	lsls	r2, r3, #5
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	4413      	add	r3, r2
 800e892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	0151      	lsls	r1, r2, #5
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	440a      	add	r2, r1
 800e8a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	78db      	ldrb	r3, [r3, #3]
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d003      	beq.n	800e8ba <USB_EPClearStall+0x4c>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	78db      	ldrb	r3, [r3, #3]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d138      	bne.n	800e92c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	015a      	lsls	r2, r3, #5
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	0151      	lsls	r1, r2, #5
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	440a      	add	r2, r1
 800e8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8d8:	6013      	str	r3, [r2, #0]
 800e8da:	e027      	b.n	800e92c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	0151      	lsls	r1, r2, #5
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	440a      	add	r2, r1
 800e8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	78db      	ldrb	r3, [r3, #3]
 800e900:	2b03      	cmp	r3, #3
 800e902:	d003      	beq.n	800e90c <USB_EPClearStall+0x9e>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	78db      	ldrb	r3, [r3, #3]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d10f      	bne.n	800e92c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4413      	add	r3, r2
 800e914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68ba      	ldr	r2, [r7, #8]
 800e91c:	0151      	lsls	r1, r2, #5
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	440a      	add	r2, r1
 800e922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e92a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b085      	sub	sp, #20
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	460b      	mov	r3, r1
 800e944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e958:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e95c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	78fb      	ldrb	r3, [r7, #3]
 800e968:	011b      	lsls	r3, r3, #4
 800e96a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e96e:	68f9      	ldr	r1, [r7, #12]
 800e970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e974:	4313      	orrs	r3, r2
 800e976:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9a0:	f023 0302 	bic.w	r3, r3, #2
 800e9a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e9a6:	2003      	movs	r0, #3
 800e9a8:	f7f7 fbf4 	bl	8006194 <HAL_Delay>

  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9d0:	f043 0302 	orr.w	r3, r3, #2
 800e9d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e9d6:	2003      	movs	r0, #3
 800e9d8:	f7f7 fbdc 	bl	8006194 <HAL_Delay>

  return HAL_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	b085      	sub	sp, #20
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea28:	69db      	ldr	r3, [r3, #28]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	4013      	ands	r3, r2
 800ea2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	0c1b      	lsrs	r3, r3, #16
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea52:	699b      	ldr	r3, [r3, #24]
 800ea54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4013      	ands	r3, r2
 800ea62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	b29b      	uxth	r3, r3
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3714      	adds	r7, #20
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9a:	695b      	ldr	r3, [r3, #20]
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eaa2:	68bb      	ldr	r3, [r7, #8]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ead4:	78fb      	ldrb	r3, [r7, #3]
 800ead6:	f003 030f 	and.w	r3, r3, #15
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	fa22 f303 	lsr.w	r3, r2, r3
 800eae0:	01db      	lsls	r3, r3, #7
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	015a      	lsls	r2, r3, #5
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	693a      	ldr	r2, [r7, #16]
 800eafa:	4013      	ands	r3, r2
 800eafc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eafe:	68bb      	ldr	r3, [r7, #8]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	371c      	adds	r7, #28
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	f003 0301 	and.w	r3, r3, #1
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f003 0306 	and.w	r3, r3, #6
 800eb58:	2b04      	cmp	r3, #4
 800eb5a:	d109      	bne.n	800eb70 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb6a:	f043 0303 	orr.w	r3, r3, #3
 800eb6e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
	...

0800eb94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b087      	sub	sp, #28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	333c      	adds	r3, #60	; 0x3c
 800ebaa:	3304      	adds	r3, #4
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	4a26      	ldr	r2, [pc, #152]	; (800ec4c <USB_EP0_OutStart+0xb8>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d90a      	bls.n	800ebce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebc8:	d101      	bne.n	800ebce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e037      	b.n	800ec3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	697a      	ldr	r2, [r7, #20]
 800ebe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf4:	691b      	ldr	r3, [r3, #16]
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebfc:	f043 0318 	orr.w	r3, r3, #24
 800ec00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ec16:	7afb      	ldrb	r3, [r7, #11]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d10f      	bne.n	800ec3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec22:	461a      	mov	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ec3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	371c      	adds	r7, #28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	4f54300a 	.word	0x4f54300a

0800ec50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	4a13      	ldr	r2, [pc, #76]	; (800ecb4 <USB_CoreReset+0x64>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d901      	bls.n	800ec6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e01b      	b.n	800eca6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	daf2      	bge.n	800ec5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec76:	2300      	movs	r3, #0
 800ec78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f043 0201 	orr.w	r2, r3, #1
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	60fb      	str	r3, [r7, #12]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4a09      	ldr	r2, [pc, #36]	; (800ecb4 <USB_CoreReset+0x64>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d901      	bls.n	800ec98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e006      	b.n	800eca6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d0f0      	beq.n	800ec86 <USB_CoreReset+0x36>

  return HAL_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	00030d40 	.word	0x00030d40

0800ecb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	7c1b      	ldrb	r3, [r3, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d115      	bne.n	800ecfc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ecd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	2181      	movs	r1, #129	; 0x81
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f007 fe1a 	bl	8016912 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ece4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ece8:	2202      	movs	r2, #2
 800ecea:	2101      	movs	r1, #1
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f007 fe10 	bl	8016912 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800ecfa:	e012      	b.n	800ed22 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ecfc:	2340      	movs	r3, #64	; 0x40
 800ecfe:	2202      	movs	r2, #2
 800ed00:	2181      	movs	r1, #129	; 0x81
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f007 fe05 	bl	8016912 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	2202      	movs	r2, #2
 800ed12:	2101      	movs	r1, #1
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f007 fdfc 	bl	8016912 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ed22:	2308      	movs	r3, #8
 800ed24:	2203      	movs	r2, #3
 800ed26:	2182      	movs	r1, #130	; 0x82
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f007 fdf2 	bl	8016912 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2201      	movs	r2, #1
 800ed32:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ed34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ed38:	f008 f8aa 	bl	8016e90 <malloc>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800ed50:	2301      	movs	r3, #1
 800ed52:	73fb      	strb	r3, [r7, #15]
 800ed54:	e026      	b.n	800eda4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	7c1b      	ldrb	r3, [r3, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d109      	bne.n	800ed94 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed8a:	2101      	movs	r1, #1
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f007 feb1 	bl	8016af4 <USBD_LL_PrepareReceive>
 800ed92:	e007      	b.n	800eda4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed9a:	2340      	movs	r3, #64	; 0x40
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f007 fea8 	bl	8016af4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	460b      	mov	r3, r1
 800edb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800edba:	2300      	movs	r3, #0
 800edbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800edbe:	2181      	movs	r1, #129	; 0x81
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f007 fdcc 	bl	801695e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800edcc:	2101      	movs	r1, #1
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f007 fdc5 	bl	801695e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eddc:	2182      	movs	r1, #130	; 0x82
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f007 fdbd 	bl	801695e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00e      	beq.n	800ee12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ee04:	4618      	mov	r0, r3
 800ee06:	f008 f84b 	bl	8016ea0 <free>
    pdev->pClassData = NULL;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ee2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ee32:	2300      	movs	r3, #0
 800ee34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d039      	beq.n	800eeba <USBD_CDC_Setup+0x9e>
 800ee46:	2b20      	cmp	r3, #32
 800ee48:	d17c      	bne.n	800ef44 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	88db      	ldrh	r3, [r3, #6]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d029      	beq.n	800eea6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	b25b      	sxtb	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	da11      	bge.n	800ee80 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ee68:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	88d2      	ldrh	r2, [r2, #6]
 800ee6e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ee70:	6939      	ldr	r1, [r7, #16]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	88db      	ldrh	r3, [r3, #6]
 800ee76:	461a      	mov	r2, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 f9c9 	bl	8010210 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800ee7e:	e068      	b.n	800ef52 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	785a      	ldrb	r2, [r3, #1]
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	88db      	ldrh	r3, [r3, #6]
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ee96:	6939      	ldr	r1, [r7, #16]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	88db      	ldrh	r3, [r3, #6]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f001 f9e4 	bl	801026c <USBD_CtlPrepareRx>
    break;
 800eea4:	e055      	b.n	800ef52 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	7850      	ldrb	r0, [r2, #1]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	4798      	blx	r3
    break;
 800eeb8:	e04b      	b.n	800ef52 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	785b      	ldrb	r3, [r3, #1]
 800eebe:	2b0a      	cmp	r3, #10
 800eec0:	d017      	beq.n	800eef2 <USBD_CDC_Setup+0xd6>
 800eec2:	2b0b      	cmp	r3, #11
 800eec4:	d029      	beq.n	800ef1a <USBD_CDC_Setup+0xfe>
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d133      	bne.n	800ef32 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eed0:	2b03      	cmp	r3, #3
 800eed2:	d107      	bne.n	800eee4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800eed4:	f107 030c 	add.w	r3, r7, #12
 800eed8:	2202      	movs	r2, #2
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f001 f997 	bl	8010210 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800eee2:	e02e      	b.n	800ef42 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f001 f927 	bl	801013a <USBD_CtlError>
			  ret = USBD_FAIL;
 800eeec:	2302      	movs	r3, #2
 800eeee:	75fb      	strb	r3, [r7, #23]
      break;
 800eef0:	e027      	b.n	800ef42 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d107      	bne.n	800ef0c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800eefc:	f107 030f 	add.w	r3, r7, #15
 800ef00:	2201      	movs	r2, #1
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f001 f983 	bl	8010210 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ef0a:	e01a      	b.n	800ef42 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f001 f913 	bl	801013a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ef14:	2302      	movs	r3, #2
 800ef16:	75fb      	strb	r3, [r7, #23]
      break;
 800ef18:	e013      	b.n	800ef42 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d00d      	beq.n	800ef40 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ef24:	6839      	ldr	r1, [r7, #0]
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f001 f907 	bl	801013a <USBD_CtlError>
			  ret = USBD_FAIL;
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ef30:	e006      	b.n	800ef40 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f001 f900 	bl	801013a <USBD_CtlError>
      ret = USBD_FAIL;
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ef3e:	e000      	b.n	800ef42 <USBD_CDC_Setup+0x126>
      break;
 800ef40:	bf00      	nop
    }
    break;
 800ef42:	e006      	b.n	800ef52 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f001 f8f7 	bl	801013a <USBD_CtlError>
    ret = USBD_FAIL;
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ef50:	bf00      	nop
  }

  return ret;
 800ef52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ef6e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef76:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d03a      	beq.n	800eff8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ef82:	78fa      	ldrb	r2, [r7, #3]
 800ef84:	6879      	ldr	r1, [r7, #4]
 800ef86:	4613      	mov	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4413      	add	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	440b      	add	r3, r1
 800ef90:	331c      	adds	r3, #28
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d029      	beq.n	800efec <USBD_CDC_DataIn+0x90>
 800ef98:	78fa      	ldrb	r2, [r7, #3]
 800ef9a:	6879      	ldr	r1, [r7, #4]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	440b      	add	r3, r1
 800efa6:	331c      	adds	r3, #28
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	78f9      	ldrb	r1, [r7, #3]
 800efac:	68b8      	ldr	r0, [r7, #8]
 800efae:	460b      	mov	r3, r1
 800efb0:	00db      	lsls	r3, r3, #3
 800efb2:	1a5b      	subs	r3, r3, r1
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	4403      	add	r3, r0
 800efb8:	3344      	adds	r3, #68	; 0x44
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	fbb2 f1f3 	udiv	r1, r2, r3
 800efc0:	fb03 f301 	mul.w	r3, r3, r1
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d110      	bne.n	800efec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800efca:	78fa      	ldrb	r2, [r7, #3]
 800efcc:	6879      	ldr	r1, [r7, #4]
 800efce:	4613      	mov	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	440b      	add	r3, r1
 800efd8:	331c      	adds	r3, #28
 800efda:	2200      	movs	r2, #0
 800efdc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800efde:	78f9      	ldrb	r1, [r7, #3]
 800efe0:	2300      	movs	r3, #0
 800efe2:	2200      	movs	r2, #0
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f007 fd62 	bl	8016aae <USBD_LL_Transmit>
 800efea:	e003      	b.n	800eff4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2200      	movs	r2, #0
 800eff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	e000      	b.n	800effa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800eff8:	2302      	movs	r3, #2
  }
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	460b      	mov	r3, r1
 800f00c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f014:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f016:	78fb      	ldrb	r3, [r7, #3]
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f007 fd8d 	bl	8016b3a <USBD_LL_GetRxDataSize>
 800f020:	4602      	mov	r2, r0
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f046:	4611      	mov	r1, r2
 800f048:	4798      	blx	r3

    return USBD_OK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	e000      	b.n	800f050 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f04e:	2302      	movs	r3, #2
  }
}
 800f050:	4618      	mov	r0, r3
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f066:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d015      	beq.n	800f09e <USBD_CDC_EP0_RxReady+0x46>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f078:	2bff      	cmp	r3, #255	; 0xff
 800f07a:	d010      	beq.n	800f09e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f08a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f092:	b292      	uxth	r2, r2
 800f094:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	22ff      	movs	r2, #255	; 0xff
 800f09a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2243      	movs	r2, #67	; 0x43
 800f0b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f0b6:	4b03      	ldr	r3, [pc, #12]	; (800f0c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr
 800f0c4:	20000090 	.word	0x20000090

0800f0c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2243      	movs	r2, #67	; 0x43
 800f0d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f0d6:	4b03      	ldr	r3, [pc, #12]	; (800f0e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	2000004c 	.word	0x2000004c

0800f0e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2243      	movs	r2, #67	; 0x43
 800f0f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f0f6:	4b03      	ldr	r3, [pc, #12]	; (800f104 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	200000d4 	.word	0x200000d4

0800f108 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	220a      	movs	r2, #10
 800f114:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f116:	4b03      	ldr	r3, [pc, #12]	; (800f124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f118:	4618      	mov	r0, r3
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	20000008 	.word	0x20000008

0800f128 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f132:	2302      	movs	r3, #2
 800f134:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d005      	beq.n	800f148 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f148:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr

0800f156 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800f156:	b480      	push	{r7}
 800f158:	b087      	sub	sp, #28
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	60f8      	str	r0, [r7, #12]
 800f15e:	60b9      	str	r1, [r7, #8]
 800f160:	4613      	mov	r3, r2
 800f162:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f16a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f174:	88fa      	ldrh	r2, [r7, #6]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800f18a:	b480      	push	{r7}
 800f18c:	b085      	sub	sp, #20
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f19a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f1c0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d01c      	beq.n	800f206 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d115      	bne.n	800f202 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	2181      	movs	r1, #129	; 0x81
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f007 fc58 	bl	8016aae <USBD_LL_Transmit>

      return USBD_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	e002      	b.n	800f208 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800f202:	2301      	movs	r3, #1
 800f204:	e000      	b.n	800f208 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800f206:	2302      	movs	r3, #2
  }
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f226:	2b00      	cmp	r3, #0
 800f228:	d017      	beq.n	800f25a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	7c1b      	ldrb	r3, [r3, #16]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d109      	bne.n	800f246 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f23c:	2101      	movs	r1, #1
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f007 fc58 	bl	8016af4 <USBD_LL_PrepareReceive>
 800f244:	e007      	b.n	800f256 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f24c:	2340      	movs	r3, #64	; 0x40
 800f24e:	2101      	movs	r1, #1
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f007 fc4f 	bl	8016af4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f256:	2300      	movs	r3, #0
 800f258:	e000      	b.n	800f25c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f25a:	2302      	movs	r3, #2
  }
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	4613      	mov	r3, r2
 800f270:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f278:	2302      	movs	r3, #2
 800f27a:	e01a      	b.n	800f2b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	79fa      	ldrb	r2, [r7, #7]
 800f2a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f007 faca 	bl	8016844 <USBD_LL_Init>

  return USBD_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b085      	sub	sp, #20
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d006      	beq.n	800f2dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	683a      	ldr	r2, [r7, #0]
 800f2d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	73fb      	strb	r3, [r7, #15]
 800f2da:	e001      	b.n	800f2e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f2dc:	2302      	movs	r3, #2
 800f2de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f007 faf0 	bl	80168dc <USBD_LL_Start>

  return USBD_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f328:	2302      	movs	r3, #2
 800f32a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00c      	beq.n	800f350 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	78fa      	ldrb	r2, [r7, #3]
 800f340:	4611      	mov	r1, r2
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	4798      	blx	r3
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d101      	bne.n	800f350 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f350:	7bfb      	ldrb	r3, [r7, #15]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}

0800f35a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f35a:	b580      	push	{r7, lr}
 800f35c:	b082      	sub	sp, #8
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
 800f362:	460b      	mov	r3, r1
 800f364:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	78fa      	ldrb	r2, [r7, #3]
 800f370:	4611      	mov	r1, r2
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	4798      	blx	r3
  return USBD_OK;
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f390:	6839      	ldr	r1, [r7, #0]
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fe94 	bl	80100c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f3b4:	f003 031f 	and.w	r3, r3, #31
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d00c      	beq.n	800f3d6 <USBD_LL_SetupStage+0x56>
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d302      	bcc.n	800f3c6 <USBD_LL_SetupStage+0x46>
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	d010      	beq.n	800f3e6 <USBD_LL_SetupStage+0x66>
 800f3c4:	e017      	b.n	800f3f6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fa04 	bl	800f7dc <USBD_StdDevReq>
    break;
 800f3d4:	e01a      	b.n	800f40c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fa66 	bl	800f8b0 <USBD_StdItfReq>
    break;
 800f3e4:	e012      	b.n	800f40c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 faa4 	bl	800f93c <USBD_StdEPReq>
    break;
 800f3f4:	e00a      	b.n	800f40c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f3fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f400:	b2db      	uxtb	r3, r3
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f007 fac9 	bl	801699c <USBD_LL_StallEP>
    break;
 800f40a:	bf00      	nop
  }

  return USBD_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b086      	sub	sp, #24
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	460b      	mov	r3, r1
 800f420:	607a      	str	r2, [r7, #4]
 800f422:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800f424:	7afb      	ldrb	r3, [r7, #11]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d14b      	bne.n	800f4c2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f430:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f438:	2b03      	cmp	r3, #3
 800f43a:	d134      	bne.n	800f4a6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	429a      	cmp	r2, r3
 800f446:	d919      	bls.n	800f47c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	68da      	ldr	r2, [r3, #12]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	1ad2      	subs	r2, r2, r3
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	68da      	ldr	r2, [r3, #12]
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f45e:	429a      	cmp	r2, r3
 800f460:	d203      	bcs.n	800f46a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800f466:	b29b      	uxth	r3, r3
 800f468:	e002      	b.n	800f470 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f46e:	b29b      	uxth	r3, r3
 800f470:	461a      	mov	r2, r3
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f000 ff17 	bl	80102a8 <USBD_CtlContinueRx>
 800f47a:	e038      	b.n	800f4ee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00a      	beq.n	800f49e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f48e:	2b03      	cmp	r3, #3
 800f490:	d105      	bne.n	800f49e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 ff14 	bl	80102cc <USBD_CtlSendStatus>
 800f4a4:	e023      	b.n	800f4ee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f4ac:	2b05      	cmp	r3, #5
 800f4ae:	d11e      	bne.n	800f4ee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f007 fa6e 	bl	801699c <USBD_LL_StallEP>
 800f4c0:	e015      	b.n	800f4ee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00d      	beq.n	800f4ea <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d108      	bne.n	800f4ea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	7afa      	ldrb	r2, [r7, #11]
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	4798      	blx	r3
 800f4e8:	e001      	b.n	800f4ee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	e000      	b.n	800f4f0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	460b      	mov	r3, r1
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f506:	7afb      	ldrb	r3, [r7, #11]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d17f      	bne.n	800f60c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	3314      	adds	r3, #20
 800f510:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d15c      	bne.n	800f5d6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	68da      	ldr	r2, [r3, #12]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	429a      	cmp	r2, r3
 800f526:	d915      	bls.n	800f554 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	1ad2      	subs	r2, r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	461a      	mov	r2, r3
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f000 fe81 	bl	8010248 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f546:	2300      	movs	r3, #0
 800f548:	2200      	movs	r2, #0
 800f54a:	2100      	movs	r1, #0
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f007 fad1 	bl	8016af4 <USBD_LL_PrepareReceive>
 800f552:	e04e      	b.n	800f5f2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	6912      	ldr	r2, [r2, #16]
 800f55c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f560:	fb02 f201 	mul.w	r2, r2, r1
 800f564:	1a9b      	subs	r3, r3, r2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d11c      	bne.n	800f5a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	689a      	ldr	r2, [r3, #8]
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f572:	429a      	cmp	r2, r3
 800f574:	d316      	bcc.n	800f5a4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	689a      	ldr	r2, [r3, #8]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800f580:	429a      	cmp	r2, r3
 800f582:	d20f      	bcs.n	800f5a4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f584:	2200      	movs	r2, #0
 800f586:	2100      	movs	r1, #0
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f000 fe5d 	bl	8010248 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f596:	2300      	movs	r3, #0
 800f598:	2200      	movs	r2, #0
 800f59a:	2100      	movs	r1, #0
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f007 faa9 	bl	8016af4 <USBD_LL_PrepareReceive>
 800f5a2:	e026      	b.n	800f5f2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00a      	beq.n	800f5c6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f5b6:	2b03      	cmp	r3, #3
 800f5b8:	d105      	bne.n	800f5c6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f5c6:	2180      	movs	r1, #128	; 0x80
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f007 f9e7 	bl	801699c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 fe8f 	bl	80102f2 <USBD_CtlReceiveStatus>
 800f5d4:	e00d      	b.n	800f5f2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f5dc:	2b04      	cmp	r3, #4
 800f5de:	d004      	beq.n	800f5ea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d103      	bne.n	800f5f2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f5ea:	2180      	movs	r1, #128	; 0x80
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f007 f9d5 	bl	801699c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d11d      	bne.n	800f638 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7ff fe82 	bl	800f306 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800f60a:	e015      	b.n	800f638 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00d      	beq.n	800f634 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d108      	bne.n	800f634 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	7afa      	ldrb	r2, [r7, #11]
 800f62c:	4611      	mov	r1, r2
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	4798      	blx	r3
 800f632:	e001      	b.n	800f638 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f634:	2302      	movs	r3, #2
 800f636:	e000      	b.n	800f63a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f64a:	2340      	movs	r3, #64	; 0x40
 800f64c:	2200      	movs	r2, #0
 800f64e:	2100      	movs	r1, #0
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f007 f95e 	bl	8016912 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2240      	movs	r2, #64	; 0x40
 800f662:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f666:	2340      	movs	r3, #64	; 0x40
 800f668:	2200      	movs	r2, #0
 800f66a:	2180      	movs	r1, #128	; 0x80
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f007 f950 	bl	8016912 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2201      	movs	r2, #1
 800f676:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2240      	movs	r2, #64	; 0x40
 800f67c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2200      	movs	r2, #0
 800f692:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d009      	beq.n	800f6ba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	6852      	ldr	r2, [r2, #4]
 800f6b2:	b2d2      	uxtb	r2, r2
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	4798      	blx	r3
  }

  return USBD_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	78fa      	ldrb	r2, [r7, #3]
 800f6d4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2204      	movs	r2, #4
 800f6fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800f70e:	b480      	push	{r7}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d10b      	bne.n	800f75a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f748:	69db      	ldr	r3, [r3, #28]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800f75a:	2300      	movs	r3, #0
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f77e:	b480      	push	{r7}
 800f780:	b083      	sub	sp, #12
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	460b      	mov	r3, r1
 800f788:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	6852      	ldr	r2, [r2, #4]
 800f7ca:	b2d2      	uxtb	r2, r2
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	4798      	blx	r3

  return USBD_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7f2:	2b20      	cmp	r3, #32
 800f7f4:	d004      	beq.n	800f800 <USBD_StdDevReq+0x24>
 800f7f6:	2b40      	cmp	r3, #64	; 0x40
 800f7f8:	d002      	beq.n	800f800 <USBD_StdDevReq+0x24>
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d008      	beq.n	800f810 <USBD_StdDevReq+0x34>
 800f7fe:	e04c      	b.n	800f89a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	6839      	ldr	r1, [r7, #0]
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	4798      	blx	r3
    break;
 800f80e:	e049      	b.n	800f8a4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	785b      	ldrb	r3, [r3, #1]
 800f814:	2b09      	cmp	r3, #9
 800f816:	d83a      	bhi.n	800f88e <USBD_StdDevReq+0xb2>
 800f818:	a201      	add	r2, pc, #4	; (adr r2, 800f820 <USBD_StdDevReq+0x44>)
 800f81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81e:	bf00      	nop
 800f820:	0800f871 	.word	0x0800f871
 800f824:	0800f885 	.word	0x0800f885
 800f828:	0800f88f 	.word	0x0800f88f
 800f82c:	0800f87b 	.word	0x0800f87b
 800f830:	0800f88f 	.word	0x0800f88f
 800f834:	0800f853 	.word	0x0800f853
 800f838:	0800f849 	.word	0x0800f849
 800f83c:	0800f88f 	.word	0x0800f88f
 800f840:	0800f867 	.word	0x0800f867
 800f844:	0800f85d 	.word	0x0800f85d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 f9d2 	bl	800fbf4 <USBD_GetDescriptor>
      break;
 800f850:	e022      	b.n	800f898 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fac7 	bl	800fde8 <USBD_SetAddress>
      break;
 800f85a:	e01d      	b.n	800f898 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fb04 	bl	800fe6c <USBD_SetConfig>
      break;
 800f864:	e018      	b.n	800f898 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fb8d 	bl	800ff88 <USBD_GetConfig>
      break;
 800f86e:	e013      	b.n	800f898 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800f870:	6839      	ldr	r1, [r7, #0]
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fbbc 	bl	800fff0 <USBD_GetStatus>
      break;
 800f878:	e00e      	b.n	800f898 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800f87a:	6839      	ldr	r1, [r7, #0]
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fbea 	bl	8010056 <USBD_SetFeature>
      break;
 800f882:	e009      	b.n	800f898 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fbf9 	bl	801007e <USBD_ClrFeature>
      break;
 800f88c:	e004      	b.n	800f898 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fc52 	bl	801013a <USBD_CtlError>
      break;
 800f896:	bf00      	nop
    }
    break;
 800f898:	e004      	b.n	800f8a4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800f89a:	6839      	ldr	r1, [r7, #0]
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 fc4c 	bl	801013a <USBD_CtlError>
    break;
 800f8a2:	bf00      	nop
  }

  return ret;
 800f8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop

0800f8b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8c6:	2b20      	cmp	r3, #32
 800f8c8:	d003      	beq.n	800f8d2 <USBD_StdItfReq+0x22>
 800f8ca:	2b40      	cmp	r3, #64	; 0x40
 800f8cc:	d001      	beq.n	800f8d2 <USBD_StdItfReq+0x22>
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d12a      	bne.n	800f928 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d81d      	bhi.n	800f91a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	889b      	ldrh	r3, [r3, #4]
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d813      	bhi.n	800f910 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	4798      	blx	r3
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	88db      	ldrh	r3, [r3, #6]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d110      	bne.n	800f924 <USBD_StdItfReq+0x74>
 800f902:	7bfb      	ldrb	r3, [r7, #15]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10d      	bne.n	800f924 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fcdf 	bl	80102cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f90e:	e009      	b.n	800f924 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fc11 	bl	801013a <USBD_CtlError>
      break;
 800f918:	e004      	b.n	800f924 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fc0c 	bl	801013a <USBD_CtlError>
      break;
 800f922:	e000      	b.n	800f926 <USBD_StdItfReq+0x76>
      break;
 800f924:	bf00      	nop
    }
    break;
 800f926:	e004      	b.n	800f932 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f928:	6839      	ldr	r1, [r7, #0]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fc05 	bl	801013a <USBD_CtlError>
    break;
 800f930:	bf00      	nop
  }

  return USBD_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f946:	2300      	movs	r3, #0
 800f948:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	889b      	ldrh	r3, [r3, #4]
 800f94e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f958:	2b20      	cmp	r3, #32
 800f95a:	d004      	beq.n	800f966 <USBD_StdEPReq+0x2a>
 800f95c:	2b40      	cmp	r3, #64	; 0x40
 800f95e:	d002      	beq.n	800f966 <USBD_StdEPReq+0x2a>
 800f960:	2b00      	cmp	r3, #0
 800f962:	d008      	beq.n	800f976 <USBD_StdEPReq+0x3a>
 800f964:	e13b      	b.n	800fbde <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	4798      	blx	r3
    break;
 800f974:	e138      	b.n	800fbe8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f97e:	2b20      	cmp	r3, #32
 800f980:	d10a      	bne.n	800f998 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f988:	689b      	ldr	r3, [r3, #8]
 800f98a:	6839      	ldr	r1, [r7, #0]
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	4798      	blx	r3
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]

      return ret;
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	e128      	b.n	800fbea <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	785b      	ldrb	r3, [r3, #1]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d03e      	beq.n	800fa1e <USBD_StdEPReq+0xe2>
 800f9a0:	2b03      	cmp	r3, #3
 800f9a2:	d002      	beq.n	800f9aa <USBD_StdEPReq+0x6e>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d070      	beq.n	800fa8a <USBD_StdEPReq+0x14e>
 800f9a8:	e113      	b.n	800fbd2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f9b0:	2b02      	cmp	r3, #2
 800f9b2:	d002      	beq.n	800f9ba <USBD_StdEPReq+0x7e>
 800f9b4:	2b03      	cmp	r3, #3
 800f9b6:	d015      	beq.n	800f9e4 <USBD_StdEPReq+0xa8>
 800f9b8:	e02b      	b.n	800fa12 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9ba:	7bbb      	ldrb	r3, [r7, #14]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00c      	beq.n	800f9da <USBD_StdEPReq+0x9e>
 800f9c0:	7bbb      	ldrb	r3, [r7, #14]
 800f9c2:	2b80      	cmp	r3, #128	; 0x80
 800f9c4:	d009      	beq.n	800f9da <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800f9c6:	7bbb      	ldrb	r3, [r7, #14]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f006 ffe6 	bl	801699c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f9d0:	2180      	movs	r1, #128	; 0x80
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f006 ffe2 	bl	801699c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f9d8:	e020      	b.n	800fa1c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fbac 	bl	801013a <USBD_CtlError>
        break;
 800f9e2:	e01b      	b.n	800fa1c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	885b      	ldrh	r3, [r3, #2]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10e      	bne.n	800fa0a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00b      	beq.n	800fa0a <USBD_StdEPReq+0xce>
 800f9f2:	7bbb      	ldrb	r3, [r7, #14]
 800f9f4:	2b80      	cmp	r3, #128	; 0x80
 800f9f6:	d008      	beq.n	800fa0a <USBD_StdEPReq+0xce>
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	88db      	ldrh	r3, [r3, #6]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d104      	bne.n	800fa0a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800fa00:	7bbb      	ldrb	r3, [r7, #14]
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f006 ffc9 	bl	801699c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 fc5e 	bl	80102cc <USBD_CtlSendStatus>

        break;
 800fa10:	e004      	b.n	800fa1c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 fb90 	bl	801013a <USBD_CtlError>
        break;
 800fa1a:	bf00      	nop
      }
      break;
 800fa1c:	e0de      	b.n	800fbdc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d002      	beq.n	800fa2e <USBD_StdEPReq+0xf2>
 800fa28:	2b03      	cmp	r3, #3
 800fa2a:	d015      	beq.n	800fa58 <USBD_StdEPReq+0x11c>
 800fa2c:	e026      	b.n	800fa7c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa2e:	7bbb      	ldrb	r3, [r7, #14]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00c      	beq.n	800fa4e <USBD_StdEPReq+0x112>
 800fa34:	7bbb      	ldrb	r3, [r7, #14]
 800fa36:	2b80      	cmp	r3, #128	; 0x80
 800fa38:	d009      	beq.n	800fa4e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800fa3a:	7bbb      	ldrb	r3, [r7, #14]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f006 ffac 	bl	801699c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800fa44:	2180      	movs	r1, #128	; 0x80
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f006 ffa8 	bl	801699c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fa4c:	e01c      	b.n	800fa88 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 fb72 	bl	801013a <USBD_CtlError>
        break;
 800fa56:	e017      	b.n	800fa88 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	885b      	ldrh	r3, [r3, #2]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d112      	bne.n	800fa86 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d004      	beq.n	800fa74 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa6a:	7bbb      	ldrb	r3, [r7, #14]
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f006 ffb3 	bl	80169da <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 fc29 	bl	80102cc <USBD_CtlSendStatus>
        }
        break;
 800fa7a:	e004      	b.n	800fa86 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800fa7c:	6839      	ldr	r1, [r7, #0]
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 fb5b 	bl	801013a <USBD_CtlError>
        break;
 800fa84:	e000      	b.n	800fa88 <USBD_StdEPReq+0x14c>
        break;
 800fa86:	bf00      	nop
      }
      break;
 800fa88:	e0a8      	b.n	800fbdc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d002      	beq.n	800fa9a <USBD_StdEPReq+0x15e>
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d031      	beq.n	800fafc <USBD_StdEPReq+0x1c0>
 800fa98:	e095      	b.n	800fbc6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa9a:	7bbb      	ldrb	r3, [r7, #14]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <USBD_StdEPReq+0x174>
 800faa0:	7bbb      	ldrb	r3, [r7, #14]
 800faa2:	2b80      	cmp	r3, #128	; 0x80
 800faa4:	d004      	beq.n	800fab0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fb46 	bl	801013a <USBD_CtlError>
          break;
 800faae:	e08f      	b.n	800fbd0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	da0b      	bge.n	800fad0 <USBD_StdEPReq+0x194>
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fabe:	4613      	mov	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	3310      	adds	r3, #16
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	4413      	add	r3, r2
 800facc:	3304      	adds	r3, #4
 800face:	e00a      	b.n	800fae6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800fad0:	7bbb      	ldrb	r3, [r7, #14]
 800fad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	4413      	add	r3, r2
 800fae6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	2200      	movs	r2, #0
 800faec:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2202      	movs	r2, #2
 800faf2:	4619      	mov	r1, r3
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 fb8b 	bl	8010210 <USBD_CtlSendData>
          break;
 800fafa:	e069      	b.n	800fbd0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800fafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	da11      	bge.n	800fb28 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb04:	7bbb      	ldrb	r3, [r7, #14]
 800fb06:	f003 020f 	and.w	r2, r3, #15
 800fb0a:	6879      	ldr	r1, [r7, #4]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	440b      	add	r3, r1
 800fb16:	3318      	adds	r3, #24
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d117      	bne.n	800fb4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 fb0a 	bl	801013a <USBD_CtlError>
            break;
 800fb26:	e053      	b.n	800fbd0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
 800fb2a:	f003 020f 	and.w	r2, r3, #15
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	4613      	mov	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4413      	add	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	440b      	add	r3, r1
 800fb3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d104      	bne.n	800fb4e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 faf7 	bl	801013a <USBD_CtlError>
            break;
 800fb4c:	e040      	b.n	800fbd0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fb4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	da0b      	bge.n	800fb6e <USBD_StdEPReq+0x232>
 800fb56:	7bbb      	ldrb	r3, [r7, #14]
 800fb58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4413      	add	r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	3310      	adds	r3, #16
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	4413      	add	r3, r2
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	e00a      	b.n	800fb84 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
 800fb70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fb74:	4613      	mov	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	4413      	add	r3, r2
 800fb84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb86:	7bbb      	ldrb	r3, [r7, #14]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <USBD_StdEPReq+0x256>
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	2b80      	cmp	r3, #128	; 0x80
 800fb90:	d103      	bne.n	800fb9a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2200      	movs	r2, #0
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	e00e      	b.n	800fbb8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800fb9a:	7bbb      	ldrb	r3, [r7, #14]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f006 ff3a 	bl	8016a18 <USBD_LL_IsStallEP>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	2201      	movs	r2, #1
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	e002      	b.n	800fbb8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fb26 	bl	8010210 <USBD_CtlSendData>
          break;
 800fbc4:	e004      	b.n	800fbd0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800fbc6:	6839      	ldr	r1, [r7, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fab6 	bl	801013a <USBD_CtlError>
        break;
 800fbce:	bf00      	nop
      }
      break;
 800fbd0:	e004      	b.n	800fbdc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800fbd2:	6839      	ldr	r1, [r7, #0]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 fab0 	bl	801013a <USBD_CtlError>
      break;
 800fbda:	bf00      	nop
    }
    break;
 800fbdc:	e004      	b.n	800fbe8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 faaa 	bl	801013a <USBD_CtlError>
    break;
 800fbe6:	bf00      	nop
  }

  return ret;
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	885b      	ldrh	r3, [r3, #2]
 800fc02:	0a1b      	lsrs	r3, r3, #8
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	3b01      	subs	r3, #1
 800fc08:	2b06      	cmp	r3, #6
 800fc0a:	f200 80c9 	bhi.w	800fda0 <USBD_GetDescriptor+0x1ac>
 800fc0e:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <USBD_GetDescriptor+0x20>)
 800fc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc14:	0800fc31 	.word	0x0800fc31
 800fc18:	0800fc49 	.word	0x0800fc49
 800fc1c:	0800fc89 	.word	0x0800fc89
 800fc20:	0800fda1 	.word	0x0800fda1
 800fc24:	0800fda1 	.word	0x0800fda1
 800fc28:	0800fd4d 	.word	0x0800fd4d
 800fc2c:	0800fd73 	.word	0x0800fd73
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	7c12      	ldrb	r2, [r2, #16]
 800fc3c:	f107 010a 	add.w	r1, r7, #10
 800fc40:	4610      	mov	r0, r2
 800fc42:	4798      	blx	r3
 800fc44:	60f8      	str	r0, [r7, #12]
    break;
 800fc46:	e0b0      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7c1b      	ldrb	r3, [r3, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d10d      	bne.n	800fc6c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc58:	f107 020a 	add.w	r2, r7, #10
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	4798      	blx	r3
 800fc60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3301      	adds	r3, #1
 800fc66:	2202      	movs	r2, #2
 800fc68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fc6a:	e09e      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc74:	f107 020a 	add.w	r2, r7, #10
 800fc78:	4610      	mov	r0, r2
 800fc7a:	4798      	blx	r3
 800fc7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	3301      	adds	r3, #1
 800fc82:	2202      	movs	r2, #2
 800fc84:	701a      	strb	r2, [r3, #0]
    break;
 800fc86:	e090      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	885b      	ldrh	r3, [r3, #2]
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b05      	cmp	r3, #5
 800fc90:	d856      	bhi.n	800fd40 <USBD_GetDescriptor+0x14c>
 800fc92:	a201      	add	r2, pc, #4	; (adr r2, 800fc98 <USBD_GetDescriptor+0xa4>)
 800fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc98:	0800fcb1 	.word	0x0800fcb1
 800fc9c:	0800fcc9 	.word	0x0800fcc9
 800fca0:	0800fce1 	.word	0x0800fce1
 800fca4:	0800fcf9 	.word	0x0800fcf9
 800fca8:	0800fd11 	.word	0x0800fd11
 800fcac:	0800fd29 	.word	0x0800fd29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	7c12      	ldrb	r2, [r2, #16]
 800fcbc:	f107 010a 	add.w	r1, r7, #10
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	4798      	blx	r3
 800fcc4:	60f8      	str	r0, [r7, #12]
      break;
 800fcc6:	e040      	b.n	800fd4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	7c12      	ldrb	r2, [r2, #16]
 800fcd4:	f107 010a 	add.w	r1, r7, #10
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
 800fcdc:	60f8      	str	r0, [r7, #12]
      break;
 800fcde:	e034      	b.n	800fd4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	7c12      	ldrb	r2, [r2, #16]
 800fcec:	f107 010a 	add.w	r1, r7, #10
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	4798      	blx	r3
 800fcf4:	60f8      	str	r0, [r7, #12]
      break;
 800fcf6:	e028      	b.n	800fd4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	7c12      	ldrb	r2, [r2, #16]
 800fd04:	f107 010a 	add.w	r1, r7, #10
 800fd08:	4610      	mov	r0, r2
 800fd0a:	4798      	blx	r3
 800fd0c:	60f8      	str	r0, [r7, #12]
      break;
 800fd0e:	e01c      	b.n	800fd4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fd16:	695b      	ldr	r3, [r3, #20]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	7c12      	ldrb	r2, [r2, #16]
 800fd1c:	f107 010a 	add.w	r1, r7, #10
 800fd20:	4610      	mov	r0, r2
 800fd22:	4798      	blx	r3
 800fd24:	60f8      	str	r0, [r7, #12]
      break;
 800fd26:	e010      	b.n	800fd4a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fd2e:	699b      	ldr	r3, [r3, #24]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	7c12      	ldrb	r2, [r2, #16]
 800fd34:	f107 010a 	add.w	r1, r7, #10
 800fd38:	4610      	mov	r0, r2
 800fd3a:	4798      	blx	r3
 800fd3c:	60f8      	str	r0, [r7, #12]
      break;
 800fd3e:	e004      	b.n	800fd4a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f9f9 	bl	801013a <USBD_CtlError>
      return;
 800fd48:	e04b      	b.n	800fde2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800fd4a:	e02e      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	7c1b      	ldrb	r3, [r3, #16]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d109      	bne.n	800fd68 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5c:	f107 020a 	add.w	r2, r7, #10
 800fd60:	4610      	mov	r0, r2
 800fd62:	4798      	blx	r3
 800fd64:	60f8      	str	r0, [r7, #12]
      break;
 800fd66:	e020      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800fd68:	6839      	ldr	r1, [r7, #0]
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 f9e5 	bl	801013a <USBD_CtlError>
      return;
 800fd70:	e037      	b.n	800fde2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	7c1b      	ldrb	r3, [r3, #16]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10d      	bne.n	800fd96 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd82:	f107 020a 	add.w	r2, r7, #10
 800fd86:	4610      	mov	r0, r2
 800fd88:	4798      	blx	r3
 800fd8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	2207      	movs	r2, #7
 800fd92:	701a      	strb	r2, [r3, #0]
      break;
 800fd94:	e009      	b.n	800fdaa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f000 f9ce 	bl	801013a <USBD_CtlError>
      return;
 800fd9e:	e020      	b.n	800fde2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800fda0:	6839      	ldr	r1, [r7, #0]
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 f9c9 	bl	801013a <USBD_CtlError>
    return;
 800fda8:	e01b      	b.n	800fde2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800fdaa:	897b      	ldrh	r3, [r7, #10]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d011      	beq.n	800fdd4 <USBD_GetDescriptor+0x1e0>
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	88db      	ldrh	r3, [r3, #6]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00d      	beq.n	800fdd4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	88da      	ldrh	r2, [r3, #6]
 800fdbc:	897b      	ldrh	r3, [r7, #10]
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	bf28      	it	cs
 800fdc2:	4613      	movcs	r3, r2
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800fdc8:	897b      	ldrh	r3, [r7, #10]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	68f9      	ldr	r1, [r7, #12]
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fa1e 	bl	8010210 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	88db      	ldrh	r3, [r3, #6]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fa75 	bl	80102cc <USBD_CtlSendStatus>
  }
}
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	889b      	ldrh	r3, [r3, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d130      	bne.n	800fe5c <USBD_SetAddress+0x74>
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	88db      	ldrh	r3, [r3, #6]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d12c      	bne.n	800fe5c <USBD_SetAddress+0x74>
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	885b      	ldrh	r3, [r3, #2]
 800fe06:	2b7f      	cmp	r3, #127	; 0x7f
 800fe08:	d828      	bhi.n	800fe5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	885b      	ldrh	r3, [r3, #2]
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d104      	bne.n	800fe2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f989 	bl	801013a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe28:	e01c      	b.n	800fe64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	7bfa      	ldrb	r2, [r7, #15]
 800fe2e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	4619      	mov	r1, r3
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f006 fe1a 	bl	8016a70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fa45 	bl	80102cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d004      	beq.n	800fe52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe50:	e008      	b.n	800fe64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe5a:	e003      	b.n	800fe64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f96b 	bl	801013a <USBD_CtlError>
  }
}
 800fe64:	bf00      	nop
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	885b      	ldrh	r3, [r3, #2]
 800fe7a:	b2da      	uxtb	r2, r3
 800fe7c:	4b41      	ldr	r3, [pc, #260]	; (800ff84 <USBD_SetConfig+0x118>)
 800fe7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe80:	4b40      	ldr	r3, [pc, #256]	; (800ff84 <USBD_SetConfig+0x118>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d904      	bls.n	800fe92 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800fe88:	6839      	ldr	r1, [r7, #0]
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f955 	bl	801013a <USBD_CtlError>
 800fe90:	e075      	b.n	800ff7e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d002      	beq.n	800fea2 <USBD_SetConfig+0x36>
 800fe9c:	2b03      	cmp	r3, #3
 800fe9e:	d023      	beq.n	800fee8 <USBD_SetConfig+0x7c>
 800fea0:	e062      	b.n	800ff68 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800fea2:	4b38      	ldr	r3, [pc, #224]	; (800ff84 <USBD_SetConfig+0x118>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d01a      	beq.n	800fee0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800feaa:	4b36      	ldr	r3, [pc, #216]	; (800ff84 <USBD_SetConfig+0x118>)
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2203      	movs	r2, #3
 800feb8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800febc:	4b31      	ldr	r3, [pc, #196]	; (800ff84 <USBD_SetConfig+0x118>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff fa2a 	bl	800f31c <USBD_SetClassConfig>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d104      	bne.n	800fed8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800fece:	6839      	ldr	r1, [r7, #0]
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 f932 	bl	801013a <USBD_CtlError>
          return;
 800fed6:	e052      	b.n	800ff7e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 f9f7 	bl	80102cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800fede:	e04e      	b.n	800ff7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f9f3 	bl	80102cc <USBD_CtlSendStatus>
      break;
 800fee6:	e04a      	b.n	800ff7e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fee8:	4b26      	ldr	r3, [pc, #152]	; (800ff84 <USBD_SetConfig+0x118>)
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d112      	bne.n	800ff16 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2202      	movs	r2, #2
 800fef4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800fef8:	4b22      	ldr	r3, [pc, #136]	; (800ff84 <USBD_SetConfig+0x118>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	461a      	mov	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ff02:	4b20      	ldr	r3, [pc, #128]	; (800ff84 <USBD_SetConfig+0x118>)
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff fa26 	bl	800f35a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f9dc 	bl	80102cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ff14:	e033      	b.n	800ff7e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ff16:	4b1b      	ldr	r3, [pc, #108]	; (800ff84 <USBD_SetConfig+0x118>)
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d01d      	beq.n	800ff60 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff fa14 	bl	800f35a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff32:	4b14      	ldr	r3, [pc, #80]	; (800ff84 <USBD_SetConfig+0x118>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	461a      	mov	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ff3c:	4b11      	ldr	r3, [pc, #68]	; (800ff84 <USBD_SetConfig+0x118>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	4619      	mov	r1, r3
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f7ff f9ea 	bl	800f31c <USBD_SetClassConfig>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	d104      	bne.n	800ff58 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ff4e:	6839      	ldr	r1, [r7, #0]
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f8f2 	bl	801013a <USBD_CtlError>
          return;
 800ff56:	e012      	b.n	800ff7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f9b7 	bl	80102cc <USBD_CtlSendStatus>
      break;
 800ff5e:	e00e      	b.n	800ff7e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f9b3 	bl	80102cc <USBD_CtlSendStatus>
      break;
 800ff66:	e00a      	b.n	800ff7e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f8e5 	bl	801013a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ff70:	4b04      	ldr	r3, [pc, #16]	; (800ff84 <USBD_SetConfig+0x118>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	4619      	mov	r1, r3
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff f9ef 	bl	800f35a <USBD_ClrClassConfig>
      break;
 800ff7c:	bf00      	nop
    }
  }
}
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20000b64 	.word	0x20000b64

0800ff88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	88db      	ldrh	r3, [r3, #6]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d004      	beq.n	800ffa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f8cc 	bl	801013a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ffa2:	e021      	b.n	800ffe8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	db17      	blt.n	800ffde <USBD_GetConfig+0x56>
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	dd02      	ble.n	800ffb8 <USBD_GetConfig+0x30>
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d00b      	beq.n	800ffce <USBD_GetConfig+0x46>
 800ffb6:	e012      	b.n	800ffde <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3308      	adds	r3, #8
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 f922 	bl	8010210 <USBD_CtlSendData>
      break;
 800ffcc:	e00c      	b.n	800ffe8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	3304      	adds	r3, #4
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 f91a 	bl	8010210 <USBD_CtlSendData>
      break;
 800ffdc:	e004      	b.n	800ffe8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ffde:	6839      	ldr	r1, [r7, #0]
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f8aa 	bl	801013a <USBD_CtlError>
      break;
 800ffe6:	bf00      	nop
}
 800ffe8:	bf00      	nop
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010000:	3b01      	subs	r3, #1
 8010002:	2b02      	cmp	r3, #2
 8010004:	d81e      	bhi.n	8010044 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	88db      	ldrh	r3, [r3, #6]
 801000a:	2b02      	cmp	r3, #2
 801000c:	d004      	beq.n	8010018 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f892 	bl	801013a <USBD_CtlError>
      break;
 8010016:	e01a      	b.n	801004e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2201      	movs	r2, #1
 801001c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010024:	2b00      	cmp	r3, #0
 8010026:	d005      	beq.n	8010034 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	f043 0202 	orr.w	r2, r3, #2
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	330c      	adds	r3, #12
 8010038:	2202      	movs	r2, #2
 801003a:	4619      	mov	r1, r3
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f8e7 	bl	8010210 <USBD_CtlSendData>
    break;
 8010042:	e004      	b.n	801004e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f877 	bl	801013a <USBD_CtlError>
    break;
 801004c:	bf00      	nop
  }
}
 801004e:	bf00      	nop
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b082      	sub	sp, #8
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	885b      	ldrh	r3, [r3, #2]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d106      	bne.n	8010076 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f92b 	bl	80102cc <USBD_CtlSendStatus>
  }

}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b082      	sub	sp, #8
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801008e:	3b01      	subs	r3, #1
 8010090:	2b02      	cmp	r3, #2
 8010092:	d80b      	bhi.n	80100ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	885b      	ldrh	r3, [r3, #2]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d10c      	bne.n	80100b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f911 	bl	80102cc <USBD_CtlSendStatus>
    }
    break;
 80100aa:	e004      	b.n	80100b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f843 	bl	801013a <USBD_CtlError>
    break;
 80100b4:	e000      	b.n	80100b8 <USBD_ClrFeature+0x3a>
    break;
 80100b6:	bf00      	nop
  }
}
 80100b8:	bf00      	nop
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	781a      	ldrb	r2, [r3, #0]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	785a      	ldrb	r2, [r3, #1]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	3302      	adds	r3, #2
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	3303      	adds	r3, #3
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	021b      	lsls	r3, r3, #8
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	4413      	add	r3, r2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	3304      	adds	r3, #4
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	3305      	adds	r3, #5
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	b29b      	uxth	r3, r3
 8010106:	021b      	lsls	r3, r3, #8
 8010108:	b29b      	uxth	r3, r3
 801010a:	4413      	add	r3, r2
 801010c:	b29a      	uxth	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	3306      	adds	r3, #6
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	b29a      	uxth	r2, r3
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	3307      	adds	r3, #7
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	b29b      	uxth	r3, r3
 8010122:	021b      	lsls	r3, r3, #8
 8010124:	b29b      	uxth	r3, r3
 8010126:	4413      	add	r3, r2
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	80da      	strh	r2, [r3, #6]

}
 801012e:	bf00      	nop
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr

0801013a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b082      	sub	sp, #8
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
 8010142:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010144:	2180      	movs	r1, #128	; 0x80
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f006 fc28 	bl	801699c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 801014c:	2100      	movs	r1, #0
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f006 fc24 	bl	801699c <USBD_LL_StallEP>
}
 8010154:	bf00      	nop
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010168:	2300      	movs	r3, #0
 801016a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d032      	beq.n	80101d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f000 f834 	bl	80101e0 <USBD_GetLen>
 8010178:	4603      	mov	r3, r0
 801017a:	3301      	adds	r3, #1
 801017c:	b29b      	uxth	r3, r3
 801017e:	005b      	lsls	r3, r3, #1
 8010180:	b29a      	uxth	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	1c5a      	adds	r2, r3, #1
 801018a:	75fa      	strb	r2, [r7, #23]
 801018c:	461a      	mov	r2, r3
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	4413      	add	r3, r2
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	7812      	ldrb	r2, [r2, #0]
 8010196:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010198:	7dfb      	ldrb	r3, [r7, #23]
 801019a:	1c5a      	adds	r2, r3, #1
 801019c:	75fa      	strb	r2, [r7, #23]
 801019e:	461a      	mov	r2, r3
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	4413      	add	r3, r2
 80101a4:	2203      	movs	r2, #3
 80101a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80101a8:	e012      	b.n	80101d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	60fa      	str	r2, [r7, #12]
 80101b0:	7dfa      	ldrb	r2, [r7, #23]
 80101b2:	1c51      	adds	r1, r2, #1
 80101b4:	75f9      	strb	r1, [r7, #23]
 80101b6:	4611      	mov	r1, r2
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	440a      	add	r2, r1
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	1c5a      	adds	r2, r3, #1
 80101c4:	75fa      	strb	r2, [r7, #23]
 80101c6:	461a      	mov	r2, r3
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	4413      	add	r3, r2
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1e8      	bne.n	80101aa <USBD_GetString+0x4e>
    }
  }
}
 80101d8:	bf00      	nop
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80101e8:	2300      	movs	r3, #0
 80101ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80101ec:	e005      	b.n	80101fa <USBD_GetLen+0x1a>
    {
        len++;
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
 80101f0:	3301      	adds	r3, #1
 80101f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3301      	adds	r3, #1
 80101f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1f5      	bne.n	80101ee <USBD_GetLen+0xe>
    }

    return len;
 8010202:	7bfb      	ldrb	r3, [r7, #15]
}
 8010204:	4618      	mov	r0, r3
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4613      	mov	r3, r2
 801021c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2202      	movs	r2, #2
 8010222:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010226:	88fa      	ldrh	r2, [r7, #6]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801022c:	88fa      	ldrh	r2, [r7, #6]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010232:	88fb      	ldrh	r3, [r7, #6]
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	2100      	movs	r1, #0
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f006 fc38 	bl	8016aae <USBD_LL_Transmit>

  return USBD_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3710      	adds	r7, #16
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	4613      	mov	r3, r2
 8010254:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010256:	88fb      	ldrh	r3, [r7, #6]
 8010258:	68ba      	ldr	r2, [r7, #8]
 801025a:	2100      	movs	r1, #0
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f006 fc26 	bl	8016aae <USBD_LL_Transmit>

  return USBD_OK;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	4613      	mov	r3, r2
 8010278:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2203      	movs	r2, #3
 801027e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010282:	88fa      	ldrh	r2, [r7, #6]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 801028a:	88fa      	ldrh	r2, [r7, #6]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8010292:	88fb      	ldrh	r3, [r7, #6]
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	2100      	movs	r1, #0
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f006 fc2b 	bl	8016af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	4613      	mov	r3, r2
 80102b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102b6:	88fb      	ldrh	r3, [r7, #6]
 80102b8:	68ba      	ldr	r2, [r7, #8]
 80102ba:	2100      	movs	r1, #0
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f006 fc19 	bl	8016af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2204      	movs	r2, #4
 80102d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102dc:	2300      	movs	r3, #0
 80102de:	2200      	movs	r2, #0
 80102e0:	2100      	movs	r1, #0
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f006 fbe3 	bl	8016aae <USBD_LL_Transmit>

  return USBD_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b082      	sub	sp, #8
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2205      	movs	r2, #5
 80102fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010302:	2300      	movs	r3, #0
 8010304:	2200      	movs	r2, #0
 8010306:	2100      	movs	r1, #0
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f006 fbf3 	bl	8016af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801030e:	2300      	movs	r3, #0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	4603      	mov	r3, r0
 8010320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010322:	79fb      	ldrb	r3, [r7, #7]
 8010324:	4a08      	ldr	r2, [pc, #32]	; (8010348 <disk_status+0x30>)
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	4413      	add	r3, r2
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	79fa      	ldrb	r2, [r7, #7]
 8010330:	4905      	ldr	r1, [pc, #20]	; (8010348 <disk_status+0x30>)
 8010332:	440a      	add	r2, r1
 8010334:	7a12      	ldrb	r2, [r2, #8]
 8010336:	4610      	mov	r0, r2
 8010338:	4798      	blx	r3
 801033a:	4603      	mov	r3, r0
 801033c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801033e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	20000b90 	.word	0x20000b90

0801034c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	4a0d      	ldr	r2, [pc, #52]	; (8010394 <disk_initialize+0x48>)
 801035e:	5cd3      	ldrb	r3, [r2, r3]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d111      	bne.n	8010388 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010364:	79fb      	ldrb	r3, [r7, #7]
 8010366:	4a0b      	ldr	r2, [pc, #44]	; (8010394 <disk_initialize+0x48>)
 8010368:	2101      	movs	r1, #1
 801036a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801036c:	79fb      	ldrb	r3, [r7, #7]
 801036e:	4a09      	ldr	r2, [pc, #36]	; (8010394 <disk_initialize+0x48>)
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	79fa      	ldrb	r2, [r7, #7]
 801037a:	4906      	ldr	r1, [pc, #24]	; (8010394 <disk_initialize+0x48>)
 801037c:	440a      	add	r2, r1
 801037e:	7a12      	ldrb	r2, [r2, #8]
 8010380:	4610      	mov	r0, r2
 8010382:	4798      	blx	r3
 8010384:	4603      	mov	r3, r0
 8010386:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010388:	7bfb      	ldrb	r3, [r7, #15]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	20000b90 	.word	0x20000b90

08010398 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b087      	sub	sp, #28
 801039c:	af00      	add	r7, sp, #0
 801039e:	60b9      	str	r1, [r7, #8]
 80103a0:	607a      	str	r2, [r7, #4]
 80103a2:	603b      	str	r3, [r7, #0]
 80103a4:	4603      	mov	r3, r0
 80103a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
 80103aa:	4a0a      	ldr	r2, [pc, #40]	; (80103d4 <disk_read+0x3c>)
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	4413      	add	r3, r2
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	689c      	ldr	r4, [r3, #8]
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
 80103b6:	4a07      	ldr	r2, [pc, #28]	; (80103d4 <disk_read+0x3c>)
 80103b8:	4413      	add	r3, r2
 80103ba:	7a18      	ldrb	r0, [r3, #8]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	68b9      	ldr	r1, [r7, #8]
 80103c2:	47a0      	blx	r4
 80103c4:	4603      	mov	r3, r0
 80103c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80103c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	371c      	adds	r7, #28
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd90      	pop	{r4, r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20000b90 	.word	0x20000b90

080103d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80103d8:	b590      	push	{r4, r7, lr}
 80103da:	b087      	sub	sp, #28
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60b9      	str	r1, [r7, #8]
 80103e0:	607a      	str	r2, [r7, #4]
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	4603      	mov	r3, r0
 80103e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
 80103ea:	4a0a      	ldr	r2, [pc, #40]	; (8010414 <disk_write+0x3c>)
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	4413      	add	r3, r2
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	68dc      	ldr	r4, [r3, #12]
 80103f4:	7bfb      	ldrb	r3, [r7, #15]
 80103f6:	4a07      	ldr	r2, [pc, #28]	; (8010414 <disk_write+0x3c>)
 80103f8:	4413      	add	r3, r2
 80103fa:	7a18      	ldrb	r0, [r3, #8]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	68b9      	ldr	r1, [r7, #8]
 8010402:	47a0      	blx	r4
 8010404:	4603      	mov	r3, r0
 8010406:	75fb      	strb	r3, [r7, #23]
  return res;
 8010408:	7dfb      	ldrb	r3, [r7, #23]
}
 801040a:	4618      	mov	r0, r3
 801040c:	371c      	adds	r7, #28
 801040e:	46bd      	mov	sp, r7
 8010410:	bd90      	pop	{r4, r7, pc}
 8010412:	bf00      	nop
 8010414:	20000b90 	.word	0x20000b90

08010418 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	603a      	str	r2, [r7, #0]
 8010422:	71fb      	strb	r3, [r7, #7]
 8010424:	460b      	mov	r3, r1
 8010426:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	4a09      	ldr	r2, [pc, #36]	; (8010450 <disk_ioctl+0x38>)
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	4413      	add	r3, r2
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	79fa      	ldrb	r2, [r7, #7]
 8010436:	4906      	ldr	r1, [pc, #24]	; (8010450 <disk_ioctl+0x38>)
 8010438:	440a      	add	r2, r1
 801043a:	7a10      	ldrb	r0, [r2, #8]
 801043c:	79b9      	ldrb	r1, [r7, #6]
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	4798      	blx	r3
 8010442:	4603      	mov	r3, r0
 8010444:	73fb      	strb	r3, [r7, #15]
  return res;
 8010446:	7bfb      	ldrb	r3, [r7, #15]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	20000b90 	.word	0x20000b90

08010454 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	3301      	adds	r3, #1
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010464:	89fb      	ldrh	r3, [r7, #14]
 8010466:	021b      	lsls	r3, r3, #8
 8010468:	b21a      	sxth	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	b21b      	sxth	r3, r3
 8010470:	4313      	orrs	r3, r2
 8010472:	b21b      	sxth	r3, r3
 8010474:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010476:	89fb      	ldrh	r3, [r7, #14]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3714      	adds	r7, #20
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3303      	adds	r3, #3
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	021b      	lsls	r3, r3, #8
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	3202      	adds	r2, #2
 801049c:	7812      	ldrb	r2, [r2, #0]
 801049e:	4313      	orrs	r3, r2
 80104a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	3201      	adds	r2, #1
 80104aa:	7812      	ldrb	r2, [r2, #0]
 80104ac:	4313      	orrs	r3, r2
 80104ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	021b      	lsls	r3, r3, #8
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	7812      	ldrb	r2, [r2, #0]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80104ca:	b480      	push	{r7}
 80104cc:	b083      	sub	sp, #12
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	460b      	mov	r3, r1
 80104d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	887a      	ldrh	r2, [r7, #2]
 80104de:	b2d2      	uxtb	r2, r2
 80104e0:	701a      	strb	r2, [r3, #0]
 80104e2:	887b      	ldrh	r3, [r7, #2]
 80104e4:	0a1b      	lsrs	r3, r3, #8
 80104e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	1c5a      	adds	r2, r3, #1
 80104ec:	607a      	str	r2, [r7, #4]
 80104ee:	887a      	ldrh	r2, [r7, #2]
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	1c5a      	adds	r2, r3, #1
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	683a      	ldr	r2, [r7, #0]
 8010512:	b2d2      	uxtb	r2, r2
 8010514:	701a      	strb	r2, [r3, #0]
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	0a1b      	lsrs	r3, r3, #8
 801051a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	1c5a      	adds	r2, r3, #1
 8010520:	607a      	str	r2, [r7, #4]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	b2d2      	uxtb	r2, r2
 8010526:	701a      	strb	r2, [r3, #0]
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	0a1b      	lsrs	r3, r3, #8
 801052c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	683a      	ldr	r2, [r7, #0]
 8010536:	b2d2      	uxtb	r2, r2
 8010538:	701a      	strb	r2, [r3, #0]
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	0a1b      	lsrs	r3, r3, #8
 801053e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	607a      	str	r2, [r7, #4]
 8010546:	683a      	ldr	r2, [r7, #0]
 8010548:	b2d2      	uxtb	r2, r2
 801054a:	701a      	strb	r2, [r3, #0]
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010558:	b480      	push	{r7}
 801055a:	b087      	sub	sp, #28
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00d      	beq.n	801058e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	1c53      	adds	r3, r2, #1
 8010576:	613b      	str	r3, [r7, #16]
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	1c59      	adds	r1, r3, #1
 801057c:	6179      	str	r1, [r7, #20]
 801057e:	7812      	ldrb	r2, [r2, #0]
 8010580:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	3b01      	subs	r3, #1
 8010586:	607b      	str	r3, [r7, #4]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1f1      	bne.n	8010572 <mem_cpy+0x1a>
	}
}
 801058e:	bf00      	nop
 8010590:	371c      	adds	r7, #28
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801059a:	b480      	push	{r7}
 801059c:	b087      	sub	sp, #28
 801059e:	af00      	add	r7, sp, #0
 80105a0:	60f8      	str	r0, [r7, #12]
 80105a2:	60b9      	str	r1, [r7, #8]
 80105a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	617a      	str	r2, [r7, #20]
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	b2d2      	uxtb	r2, r2
 80105b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3b01      	subs	r3, #1
 80105ba:	607b      	str	r3, [r7, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1f3      	bne.n	80105aa <mem_set+0x10>
}
 80105c2:	bf00      	nop
 80105c4:	371c      	adds	r7, #28
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr

080105ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80105ce:	b480      	push	{r7}
 80105d0:	b089      	sub	sp, #36	; 0x24
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	60f8      	str	r0, [r7, #12]
 80105d6:	60b9      	str	r1, [r7, #8]
 80105d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	61fb      	str	r3, [r7, #28]
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	1c5a      	adds	r2, r3, #1
 80105ea:	61fa      	str	r2, [r7, #28]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	4619      	mov	r1, r3
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	1c5a      	adds	r2, r3, #1
 80105f4:	61ba      	str	r2, [r7, #24]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	1acb      	subs	r3, r1, r3
 80105fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	3b01      	subs	r3, #1
 8010600:	607b      	str	r3, [r7, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d002      	beq.n	801060e <mem_cmp+0x40>
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d0eb      	beq.n	80105e6 <mem_cmp+0x18>

	return r;
 801060e:	697b      	ldr	r3, [r7, #20]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3724      	adds	r7, #36	; 0x24
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010626:	e002      	b.n	801062e <chk_chr+0x12>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3301      	adds	r3, #1
 801062c:	607b      	str	r3, [r7, #4]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d005      	beq.n	8010642 <chk_chr+0x26>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	4293      	cmp	r3, r2
 8010640:	d1f2      	bne.n	8010628 <chk_chr+0xc>
	return *str;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	781b      	ldrb	r3, [r3, #0]
}
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
	...

08010654 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801065e:	2300      	movs	r3, #0
 8010660:	60bb      	str	r3, [r7, #8]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e029      	b.n	80106bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010668:	4a27      	ldr	r2, [pc, #156]	; (8010708 <chk_lock+0xb4>)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	4413      	add	r3, r2
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01d      	beq.n	80106b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010676:	4a24      	ldr	r2, [pc, #144]	; (8010708 <chk_lock+0xb4>)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	011b      	lsls	r3, r3, #4
 801067c:	4413      	add	r3, r2
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	429a      	cmp	r2, r3
 8010686:	d116      	bne.n	80106b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010688:	4a1f      	ldr	r2, [pc, #124]	; (8010708 <chk_lock+0xb4>)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	011b      	lsls	r3, r3, #4
 801068e:	4413      	add	r3, r2
 8010690:	3304      	adds	r3, #4
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010698:	429a      	cmp	r2, r3
 801069a:	d10c      	bne.n	80106b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801069c:	4a1a      	ldr	r2, [pc, #104]	; (8010708 <chk_lock+0xb4>)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	011b      	lsls	r3, r3, #4
 80106a2:	4413      	add	r3, r2
 80106a4:	3308      	adds	r3, #8
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d102      	bne.n	80106b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80106b0:	e007      	b.n	80106c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80106b2:	2301      	movs	r3, #1
 80106b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	3301      	adds	r3, #1
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d9d2      	bls.n	8010668 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d109      	bne.n	80106dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d102      	bne.n	80106d4 <chk_lock+0x80>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d101      	bne.n	80106d8 <chk_lock+0x84>
 80106d4:	2300      	movs	r3, #0
 80106d6:	e010      	b.n	80106fa <chk_lock+0xa6>
 80106d8:	2312      	movs	r3, #18
 80106da:	e00e      	b.n	80106fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d108      	bne.n	80106f4 <chk_lock+0xa0>
 80106e2:	4a09      	ldr	r2, [pc, #36]	; (8010708 <chk_lock+0xb4>)
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	011b      	lsls	r3, r3, #4
 80106e8:	4413      	add	r3, r2
 80106ea:	330c      	adds	r3, #12
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106f2:	d101      	bne.n	80106f8 <chk_lock+0xa4>
 80106f4:	2310      	movs	r3, #16
 80106f6:	e000      	b.n	80106fa <chk_lock+0xa6>
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3714      	adds	r7, #20
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	20000b70 	.word	0x20000b70

0801070c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010712:	2300      	movs	r3, #0
 8010714:	607b      	str	r3, [r7, #4]
 8010716:	e002      	b.n	801071e <enq_lock+0x12>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3301      	adds	r3, #1
 801071c:	607b      	str	r3, [r7, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d806      	bhi.n	8010732 <enq_lock+0x26>
 8010724:	4a09      	ldr	r2, [pc, #36]	; (801074c <enq_lock+0x40>)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	011b      	lsls	r3, r3, #4
 801072a:	4413      	add	r3, r2
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1f2      	bne.n	8010718 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2b02      	cmp	r3, #2
 8010736:	bf14      	ite	ne
 8010738:	2301      	movne	r3, #1
 801073a:	2300      	moveq	r3, #0
 801073c:	b2db      	uxtb	r3, r3
}
 801073e:	4618      	mov	r0, r3
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	20000b70 	.word	0x20000b70

08010750 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
 801075e:	e01f      	b.n	80107a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010760:	4a41      	ldr	r2, [pc, #260]	; (8010868 <inc_lock+0x118>)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	011b      	lsls	r3, r3, #4
 8010766:	4413      	add	r3, r2
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	429a      	cmp	r2, r3
 8010770:	d113      	bne.n	801079a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010772:	4a3d      	ldr	r2, [pc, #244]	; (8010868 <inc_lock+0x118>)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	011b      	lsls	r3, r3, #4
 8010778:	4413      	add	r3, r2
 801077a:	3304      	adds	r3, #4
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010782:	429a      	cmp	r2, r3
 8010784:	d109      	bne.n	801079a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010786:	4a38      	ldr	r2, [pc, #224]	; (8010868 <inc_lock+0x118>)
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	011b      	lsls	r3, r3, #4
 801078c:	4413      	add	r3, r2
 801078e:	3308      	adds	r3, #8
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010796:	429a      	cmp	r2, r3
 8010798:	d006      	beq.n	80107a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	3301      	adds	r3, #1
 801079e:	60fb      	str	r3, [r7, #12]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d9dc      	bls.n	8010760 <inc_lock+0x10>
 80107a6:	e000      	b.n	80107aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80107a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2b02      	cmp	r3, #2
 80107ae:	d132      	bne.n	8010816 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80107b0:	2300      	movs	r3, #0
 80107b2:	60fb      	str	r3, [r7, #12]
 80107b4:	e002      	b.n	80107bc <inc_lock+0x6c>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	3301      	adds	r3, #1
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d806      	bhi.n	80107d0 <inc_lock+0x80>
 80107c2:	4a29      	ldr	r2, [pc, #164]	; (8010868 <inc_lock+0x118>)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	011b      	lsls	r3, r3, #4
 80107c8:	4413      	add	r3, r2
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1f2      	bne.n	80107b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d101      	bne.n	80107da <inc_lock+0x8a>
 80107d6:	2300      	movs	r3, #0
 80107d8:	e040      	b.n	801085c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	4922      	ldr	r1, [pc, #136]	; (8010868 <inc_lock+0x118>)
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	011b      	lsls	r3, r3, #4
 80107e4:	440b      	add	r3, r1
 80107e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	689a      	ldr	r2, [r3, #8]
 80107ec:	491e      	ldr	r1, [pc, #120]	; (8010868 <inc_lock+0x118>)
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	011b      	lsls	r3, r3, #4
 80107f2:	440b      	add	r3, r1
 80107f4:	3304      	adds	r3, #4
 80107f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	695a      	ldr	r2, [r3, #20]
 80107fc:	491a      	ldr	r1, [pc, #104]	; (8010868 <inc_lock+0x118>)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	440b      	add	r3, r1
 8010804:	3308      	adds	r3, #8
 8010806:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010808:	4a17      	ldr	r2, [pc, #92]	; (8010868 <inc_lock+0x118>)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	011b      	lsls	r3, r3, #4
 801080e:	4413      	add	r3, r2
 8010810:	330c      	adds	r3, #12
 8010812:	2200      	movs	r2, #0
 8010814:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d009      	beq.n	8010830 <inc_lock+0xe0>
 801081c:	4a12      	ldr	r2, [pc, #72]	; (8010868 <inc_lock+0x118>)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	011b      	lsls	r3, r3, #4
 8010822:	4413      	add	r3, r2
 8010824:	330c      	adds	r3, #12
 8010826:	881b      	ldrh	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <inc_lock+0xe0>
 801082c:	2300      	movs	r3, #0
 801082e:	e015      	b.n	801085c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d108      	bne.n	8010848 <inc_lock+0xf8>
 8010836:	4a0c      	ldr	r2, [pc, #48]	; (8010868 <inc_lock+0x118>)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	011b      	lsls	r3, r3, #4
 801083c:	4413      	add	r3, r2
 801083e:	330c      	adds	r3, #12
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	3301      	adds	r3, #1
 8010844:	b29a      	uxth	r2, r3
 8010846:	e001      	b.n	801084c <inc_lock+0xfc>
 8010848:	f44f 7280 	mov.w	r2, #256	; 0x100
 801084c:	4906      	ldr	r1, [pc, #24]	; (8010868 <inc_lock+0x118>)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	011b      	lsls	r3, r3, #4
 8010852:	440b      	add	r3, r1
 8010854:	330c      	adds	r3, #12
 8010856:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	3301      	adds	r3, #1
}
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	20000b70 	.word	0x20000b70

0801086c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3b01      	subs	r3, #1
 8010878:	607b      	str	r3, [r7, #4]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d825      	bhi.n	80108cc <dec_lock+0x60>
		n = Files[i].ctr;
 8010880:	4a17      	ldr	r2, [pc, #92]	; (80108e0 <dec_lock+0x74>)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	011b      	lsls	r3, r3, #4
 8010886:	4413      	add	r3, r2
 8010888:	330c      	adds	r3, #12
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801088e:	89fb      	ldrh	r3, [r7, #14]
 8010890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010894:	d101      	bne.n	801089a <dec_lock+0x2e>
 8010896:	2300      	movs	r3, #0
 8010898:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801089a:	89fb      	ldrh	r3, [r7, #14]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d002      	beq.n	80108a6 <dec_lock+0x3a>
 80108a0:	89fb      	ldrh	r3, [r7, #14]
 80108a2:	3b01      	subs	r3, #1
 80108a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80108a6:	4a0e      	ldr	r2, [pc, #56]	; (80108e0 <dec_lock+0x74>)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	011b      	lsls	r3, r3, #4
 80108ac:	4413      	add	r3, r2
 80108ae:	330c      	adds	r3, #12
 80108b0:	89fa      	ldrh	r2, [r7, #14]
 80108b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80108b4:	89fb      	ldrh	r3, [r7, #14]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d105      	bne.n	80108c6 <dec_lock+0x5a>
 80108ba:	4a09      	ldr	r2, [pc, #36]	; (80108e0 <dec_lock+0x74>)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	011b      	lsls	r3, r3, #4
 80108c0:	4413      	add	r3, r2
 80108c2:	2200      	movs	r2, #0
 80108c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80108c6:	2300      	movs	r3, #0
 80108c8:	737b      	strb	r3, [r7, #13]
 80108ca:	e001      	b.n	80108d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80108cc:	2302      	movs	r3, #2
 80108ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80108d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3714      	adds	r7, #20
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20000b70 	.word	0x20000b70

080108e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b085      	sub	sp, #20
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80108ec:	2300      	movs	r3, #0
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	e010      	b.n	8010914 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80108f2:	4a0d      	ldr	r2, [pc, #52]	; (8010928 <clear_lock+0x44>)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	011b      	lsls	r3, r3, #4
 80108f8:	4413      	add	r3, r2
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d105      	bne.n	801090e <clear_lock+0x2a>
 8010902:	4a09      	ldr	r2, [pc, #36]	; (8010928 <clear_lock+0x44>)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	011b      	lsls	r3, r3, #4
 8010908:	4413      	add	r3, r2
 801090a:	2200      	movs	r2, #0
 801090c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3301      	adds	r3, #1
 8010912:	60fb      	str	r3, [r7, #12]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d9eb      	bls.n	80108f2 <clear_lock+0xe>
	}
}
 801091a:	bf00      	nop
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	20000b70 	.word	0x20000b70

0801092c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010934:	2300      	movs	r3, #0
 8010936:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	78db      	ldrb	r3, [r3, #3]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d034      	beq.n	80109aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010944:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	7858      	ldrb	r0, [r3, #1]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010950:	2301      	movs	r3, #1
 8010952:	697a      	ldr	r2, [r7, #20]
 8010954:	f7ff fd40 	bl	80103d8 <disk_write>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d002      	beq.n	8010964 <sync_window+0x38>
			res = FR_DISK_ERR;
 801095e:	2301      	movs	r3, #1
 8010960:	73fb      	strb	r3, [r7, #15]
 8010962:	e022      	b.n	80109aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	1ad2      	subs	r2, r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	69db      	ldr	r3, [r3, #28]
 8010976:	429a      	cmp	r2, r3
 8010978:	d217      	bcs.n	80109aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	789b      	ldrb	r3, [r3, #2]
 801097e:	613b      	str	r3, [r7, #16]
 8010980:	e010      	b.n	80109a4 <sync_window+0x78>
					wsect += fs->fsize;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	69db      	ldr	r3, [r3, #28]
 8010986:	697a      	ldr	r2, [r7, #20]
 8010988:	4413      	add	r3, r2
 801098a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	7858      	ldrb	r0, [r3, #1]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010996:	2301      	movs	r3, #1
 8010998:	697a      	ldr	r2, [r7, #20]
 801099a:	f7ff fd1d 	bl	80103d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	613b      	str	r3, [r7, #16]
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d8eb      	bhi.n	8010982 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3718      	adds	r7, #24
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80109be:	2300      	movs	r3, #0
 80109c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c6:	683a      	ldr	r2, [r7, #0]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d01b      	beq.n	8010a04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff ffad 	bl	801092c <sync_window>
 80109d2:	4603      	mov	r3, r0
 80109d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80109d6:	7bfb      	ldrb	r3, [r7, #15]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d113      	bne.n	8010a04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	7858      	ldrb	r0, [r3, #1]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109e6:	2301      	movs	r3, #1
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	f7ff fcd5 	bl	8010398 <disk_read>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80109f4:	f04f 33ff 	mov.w	r3, #4294967295
 80109f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80109fa:	2301      	movs	r3, #1
 80109fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	683a      	ldr	r2, [r7, #0]
 8010a02:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
	...

08010a10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7ff ff87 	bl	801092c <sync_window>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010a22:	7bfb      	ldrb	r3, [r7, #15]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d159      	bne.n	8010adc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	d149      	bne.n	8010ac4 <sync_fs+0xb4>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	791b      	ldrb	r3, [r3, #4]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d145      	bne.n	8010ac4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	461a      	mov	r2, r3
 8010a44:	2100      	movs	r1, #0
 8010a46:	f7ff fda8 	bl	801059a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	3334      	adds	r3, #52	; 0x34
 8010a4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a52:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fd37 	bl	80104ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	3334      	adds	r3, #52	; 0x34
 8010a60:	4921      	ldr	r1, [pc, #132]	; (8010ae8 <sync_fs+0xd8>)
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7ff fd4c 	bl	8010500 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3334      	adds	r3, #52	; 0x34
 8010a6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a70:	491e      	ldr	r1, [pc, #120]	; (8010aec <sync_fs+0xdc>)
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff fd44 	bl	8010500 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	3334      	adds	r3, #52	; 0x34
 8010a7c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	4619      	mov	r1, r3
 8010a86:	4610      	mov	r0, r2
 8010a88:	f7ff fd3a 	bl	8010500 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3334      	adds	r3, #52	; 0x34
 8010a90:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	691b      	ldr	r3, [r3, #16]
 8010a98:	4619      	mov	r1, r3
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	f7ff fd30 	bl	8010500 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6a1b      	ldr	r3, [r3, #32]
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	7858      	ldrb	r0, [r3, #1]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ab8:	2301      	movs	r3, #1
 8010aba:	f7ff fc8d 	bl	80103d8 <disk_write>
			fs->fsi_flag = 0;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	785b      	ldrb	r3, [r3, #1]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	2100      	movs	r1, #0
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff fca3 	bl	8010418 <disk_ioctl>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <sync_fs+0xcc>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	41615252 	.word	0x41615252
 8010aec:	61417272 	.word	0x61417272

08010af0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	3b02      	subs	r3, #2
 8010afe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	699b      	ldr	r3, [r3, #24]
 8010b04:	3b02      	subs	r3, #2
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d301      	bcc.n	8010b10 <clust2sect+0x20>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	e008      	b.n	8010b22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	895b      	ldrh	r3, [r3, #10]
 8010b14:	461a      	mov	r2, r3
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	fb03 f202 	mul.w	r2, r3, r2
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b20:	4413      	add	r3, r2
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b086      	sub	sp, #24
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d904      	bls.n	8010b4e <get_fat+0x20>
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	699b      	ldr	r3, [r3, #24]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d302      	bcc.n	8010b54 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010b4e:	2301      	movs	r3, #1
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	e0b7      	b.n	8010cc4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295
 8010b58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d05a      	beq.n	8010c18 <get_fat+0xea>
 8010b62:	2b03      	cmp	r3, #3
 8010b64:	d07d      	beq.n	8010c62 <get_fat+0x134>
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	f040 80a2 	bne.w	8010cb0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	60fb      	str	r3, [r7, #12]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	085b      	lsrs	r3, r3, #1
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	4413      	add	r3, r2
 8010b78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	899b      	ldrh	r3, [r3, #12]
 8010b82:	4619      	mov	r1, r3
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b8a:	4413      	add	r3, r2
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6938      	ldr	r0, [r7, #16]
 8010b90:	f7ff ff10 	bl	80109b4 <move_window>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f040 808d 	bne.w	8010cb6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	1c5a      	adds	r2, r3, #1
 8010ba0:	60fa      	str	r2, [r7, #12]
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	8992      	ldrh	r2, [r2, #12]
 8010ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010baa:	fb02 f201 	mul.w	r2, r2, r1
 8010bae:	1a9b      	subs	r3, r3, r2
 8010bb0:	693a      	ldr	r2, [r7, #16]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010bb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	899b      	ldrh	r3, [r3, #12]
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bca:	4413      	add	r3, r2
 8010bcc:	4619      	mov	r1, r3
 8010bce:	6938      	ldr	r0, [r7, #16]
 8010bd0:	f7ff fef0 	bl	80109b4 <move_window>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d16f      	bne.n	8010cba <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	899b      	ldrh	r3, [r3, #12]
 8010bde:	461a      	mov	r2, r3
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010be6:	fb02 f201 	mul.w	r2, r2, r1
 8010bea:	1a9b      	subs	r3, r3, r2
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	4413      	add	r3, r2
 8010bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010bf4:	021b      	lsls	r3, r3, #8
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <get_fat+0xe0>
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	091b      	lsrs	r3, r3, #4
 8010c0c:	e002      	b.n	8010c14 <get_fat+0xe6>
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c14:	617b      	str	r3, [r7, #20]
			break;
 8010c16:	e055      	b.n	8010cc4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	899b      	ldrh	r3, [r3, #12]
 8010c20:	085b      	lsrs	r3, r3, #1
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	4619      	mov	r1, r3
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c2c:	4413      	add	r3, r2
 8010c2e:	4619      	mov	r1, r3
 8010c30:	6938      	ldr	r0, [r7, #16]
 8010c32:	f7ff febf 	bl	80109b4 <move_window>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d140      	bne.n	8010cbe <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	8992      	ldrh	r2, [r2, #12]
 8010c4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c4e:	fb02 f200 	mul.w	r2, r2, r0
 8010c52:	1a9b      	subs	r3, r3, r2
 8010c54:	440b      	add	r3, r1
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ff fbfc 	bl	8010454 <ld_word>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	617b      	str	r3, [r7, #20]
			break;
 8010c60:	e030      	b.n	8010cc4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	899b      	ldrh	r3, [r3, #12]
 8010c6a:	089b      	lsrs	r3, r3, #2
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	4619      	mov	r1, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c76:	4413      	add	r3, r2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6938      	ldr	r0, [r7, #16]
 8010c7c:	f7ff fe9a 	bl	80109b4 <move_window>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d11d      	bne.n	8010cc2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	693a      	ldr	r2, [r7, #16]
 8010c92:	8992      	ldrh	r2, [r2, #12]
 8010c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c98:	fb02 f200 	mul.w	r2, r2, r0
 8010c9c:	1a9b      	subs	r3, r3, r2
 8010c9e:	440b      	add	r3, r1
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fbef 	bl	8010484 <ld_dword>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010cac:	617b      	str	r3, [r7, #20]
			break;
 8010cae:	e009      	b.n	8010cc4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	617b      	str	r3, [r7, #20]
 8010cb4:	e006      	b.n	8010cc4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cb6:	bf00      	nop
 8010cb8:	e004      	b.n	8010cc4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cba:	bf00      	nop
 8010cbc:	e002      	b.n	8010cc4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010cbe:	bf00      	nop
 8010cc0:	e000      	b.n	8010cc4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010cc2:	bf00      	nop
		}
	}

	return val;
 8010cc4:	697b      	ldr	r3, [r7, #20]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010cce:	b590      	push	{r4, r7, lr}
 8010cd0:	b089      	sub	sp, #36	; 0x24
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	60f8      	str	r0, [r7, #12]
 8010cd6:	60b9      	str	r1, [r7, #8]
 8010cd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010cda:	2302      	movs	r3, #2
 8010cdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	f240 8106 	bls.w	8010ef2 <put_fat+0x224>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	68ba      	ldr	r2, [r7, #8]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	f080 8100 	bcs.w	8010ef2 <put_fat+0x224>
		switch (fs->fs_type) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	f000 8088 	beq.w	8010e0c <put_fat+0x13e>
 8010cfc:	2b03      	cmp	r3, #3
 8010cfe:	f000 80b0 	beq.w	8010e62 <put_fat+0x194>
 8010d02:	2b01      	cmp	r3, #1
 8010d04:	f040 80f5 	bne.w	8010ef2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	61bb      	str	r3, [r7, #24]
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	085b      	lsrs	r3, r3, #1
 8010d10:	69ba      	ldr	r2, [r7, #24]
 8010d12:	4413      	add	r3, r2
 8010d14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	899b      	ldrh	r3, [r3, #12]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d26:	4413      	add	r3, r2
 8010d28:	4619      	mov	r1, r3
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f7ff fe42 	bl	80109b4 <move_window>
 8010d30:	4603      	mov	r3, r0
 8010d32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d34:	7ffb      	ldrb	r3, [r7, #31]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f040 80d4 	bne.w	8010ee4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	61ba      	str	r2, [r7, #24]
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	8992      	ldrh	r2, [r2, #12]
 8010d4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d50:	fb02 f200 	mul.w	r2, r2, r0
 8010d54:	1a9b      	subs	r3, r3, r2
 8010d56:	440b      	add	r3, r1
 8010d58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f003 0301 	and.w	r3, r3, #1
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00d      	beq.n	8010d80 <put_fat+0xb2>
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	b25b      	sxtb	r3, r3
 8010d6a:	f003 030f 	and.w	r3, r3, #15
 8010d6e:	b25a      	sxtb	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	011b      	lsls	r3, r3, #4
 8010d76:	b25b      	sxtb	r3, r3
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	b25b      	sxtb	r3, r3
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	e001      	b.n	8010d84 <put_fat+0xb6>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	899b      	ldrh	r3, [r3, #12]
 8010d96:	4619      	mov	r1, r3
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d9e:	4413      	add	r3, r2
 8010da0:	4619      	mov	r1, r3
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f7ff fe06 	bl	80109b4 <move_window>
 8010da8:	4603      	mov	r3, r0
 8010daa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010dac:	7ffb      	ldrb	r3, [r7, #31]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f040 809a 	bne.w	8010ee8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	899b      	ldrh	r3, [r3, #12]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dc6:	fb02 f200 	mul.w	r2, r2, r0
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	440b      	add	r3, r1
 8010dce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d003      	beq.n	8010de2 <put_fat+0x114>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	091b      	lsrs	r3, r3, #4
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	e00e      	b.n	8010e00 <put_fat+0x132>
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	b25b      	sxtb	r3, r3
 8010de8:	f023 030f 	bic.w	r3, r3, #15
 8010dec:	b25a      	sxtb	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	0a1b      	lsrs	r3, r3, #8
 8010df2:	b25b      	sxtb	r3, r3
 8010df4:	f003 030f 	and.w	r3, r3, #15
 8010df8:	b25b      	sxtb	r3, r3
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	b25b      	sxtb	r3, r3
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	697a      	ldr	r2, [r7, #20]
 8010e02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2201      	movs	r2, #1
 8010e08:	70da      	strb	r2, [r3, #3]
			break;
 8010e0a:	e072      	b.n	8010ef2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	899b      	ldrh	r3, [r3, #12]
 8010e14:	085b      	lsrs	r3, r3, #1
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	4619      	mov	r1, r3
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e20:	4413      	add	r3, r2
 8010e22:	4619      	mov	r1, r3
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff fdc5 	bl	80109b4 <move_window>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e2e:	7ffb      	ldrb	r3, [r7, #31]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d15b      	bne.n	8010eec <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	005b      	lsls	r3, r3, #1
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	8992      	ldrh	r2, [r2, #12]
 8010e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e46:	fb02 f200 	mul.w	r2, r2, r0
 8010e4a:	1a9b      	subs	r3, r3, r2
 8010e4c:	440b      	add	r3, r1
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	b292      	uxth	r2, r2
 8010e52:	4611      	mov	r1, r2
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff fb38 	bl	80104ca <st_word>
			fs->wflag = 1;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	70da      	strb	r2, [r3, #3]
			break;
 8010e60:	e047      	b.n	8010ef2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	089b      	lsrs	r3, r3, #2
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	4619      	mov	r1, r3
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e76:	4413      	add	r3, r2
 8010e78:	4619      	mov	r1, r3
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f7ff fd9a 	bl	80109b4 <move_window>
 8010e80:	4603      	mov	r3, r0
 8010e82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e84:	7ffb      	ldrb	r3, [r7, #31]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d132      	bne.n	8010ef0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	8992      	ldrh	r2, [r2, #12]
 8010e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ea2:	fb02 f200 	mul.w	r2, r2, r0
 8010ea6:	1a9b      	subs	r3, r3, r2
 8010ea8:	440b      	add	r3, r1
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff faea 	bl	8010484 <ld_dword>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010eb6:	4323      	orrs	r3, r4
 8010eb8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	68fa      	ldr	r2, [r7, #12]
 8010ec6:	8992      	ldrh	r2, [r2, #12]
 8010ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ecc:	fb02 f200 	mul.w	r2, r2, r0
 8010ed0:	1a9b      	subs	r3, r3, r2
 8010ed2:	440b      	add	r3, r1
 8010ed4:	6879      	ldr	r1, [r7, #4]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fb12 	bl	8010500 <st_dword>
			fs->wflag = 1;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	70da      	strb	r2, [r3, #3]
			break;
 8010ee2:	e006      	b.n	8010ef2 <put_fat+0x224>
			if (res != FR_OK) break;
 8010ee4:	bf00      	nop
 8010ee6:	e004      	b.n	8010ef2 <put_fat+0x224>
			if (res != FR_OK) break;
 8010ee8:	bf00      	nop
 8010eea:	e002      	b.n	8010ef2 <put_fat+0x224>
			if (res != FR_OK) break;
 8010eec:	bf00      	nop
 8010eee:	e000      	b.n	8010ef2 <put_fat+0x224>
			if (res != FR_OK) break;
 8010ef0:	bf00      	nop
		}
	}
	return res;
 8010ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3724      	adds	r7, #36	; 0x24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd90      	pop	{r4, r7, pc}

08010efc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b088      	sub	sp, #32
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d904      	bls.n	8010f22 <remove_chain+0x26>
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	699b      	ldr	r3, [r3, #24]
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d301      	bcc.n	8010f26 <remove_chain+0x2a>
 8010f22:	2302      	movs	r3, #2
 8010f24:	e04b      	b.n	8010fbe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00c      	beq.n	8010f46 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f30:	6879      	ldr	r1, [r7, #4]
 8010f32:	69b8      	ldr	r0, [r7, #24]
 8010f34:	f7ff fecb 	bl	8010cce <put_fat>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010f3c:	7ffb      	ldrb	r3, [r7, #31]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <remove_chain+0x4a>
 8010f42:	7ffb      	ldrb	r3, [r7, #31]
 8010f44:	e03b      	b.n	8010fbe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010f46:	68b9      	ldr	r1, [r7, #8]
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff fdf0 	bl	8010b2e <get_fat>
 8010f4e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d031      	beq.n	8010fba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d101      	bne.n	8010f60 <remove_chain+0x64>
 8010f5c:	2302      	movs	r3, #2
 8010f5e:	e02e      	b.n	8010fbe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f66:	d101      	bne.n	8010f6c <remove_chain+0x70>
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e028      	b.n	8010fbe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	68b9      	ldr	r1, [r7, #8]
 8010f70:	69b8      	ldr	r0, [r7, #24]
 8010f72:	f7ff feac 	bl	8010cce <put_fat>
 8010f76:	4603      	mov	r3, r0
 8010f78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010f7a:	7ffb      	ldrb	r3, [r7, #31]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <remove_chain+0x88>
 8010f80:	7ffb      	ldrb	r3, [r7, #31]
 8010f82:	e01c      	b.n	8010fbe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	695a      	ldr	r2, [r3, #20]
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	699b      	ldr	r3, [r3, #24]
 8010f8c:	3b02      	subs	r3, #2
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d20b      	bcs.n	8010faa <remove_chain+0xae>
			fs->free_clst++;
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	791b      	ldrb	r3, [r3, #4]
 8010fa0:	f043 0301 	orr.w	r3, r3, #1
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d3c6      	bcc.n	8010f46 <remove_chain+0x4a>
 8010fb8:	e000      	b.n	8010fbc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010fba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3720      	adds	r7, #32
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b088      	sub	sp, #32
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10d      	bne.n	8010ff8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	691b      	ldr	r3, [r3, #16]
 8010fe0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d004      	beq.n	8010ff2 <create_chain+0x2c>
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	699b      	ldr	r3, [r3, #24]
 8010fec:	69ba      	ldr	r2, [r7, #24]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d31b      	bcc.n	801102a <create_chain+0x64>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	61bb      	str	r3, [r7, #24]
 8010ff6:	e018      	b.n	801102a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010ff8:	6839      	ldr	r1, [r7, #0]
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7ff fd97 	bl	8010b2e <get_fat>
 8011000:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2b01      	cmp	r3, #1
 8011006:	d801      	bhi.n	801100c <create_chain+0x46>
 8011008:	2301      	movs	r3, #1
 801100a:	e070      	b.n	80110ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011012:	d101      	bne.n	8011018 <create_chain+0x52>
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	e06a      	b.n	80110ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	699b      	ldr	r3, [r3, #24]
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	429a      	cmp	r2, r3
 8011020:	d201      	bcs.n	8011026 <create_chain+0x60>
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	e063      	b.n	80110ee <create_chain+0x128>
		scl = clst;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	3301      	adds	r3, #1
 8011032:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	699b      	ldr	r3, [r3, #24]
 8011038:	69fa      	ldr	r2, [r7, #28]
 801103a:	429a      	cmp	r2, r3
 801103c:	d307      	bcc.n	801104e <create_chain+0x88>
				ncl = 2;
 801103e:	2302      	movs	r3, #2
 8011040:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011042:	69fa      	ldr	r2, [r7, #28]
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	429a      	cmp	r2, r3
 8011048:	d901      	bls.n	801104e <create_chain+0x88>
 801104a:	2300      	movs	r3, #0
 801104c:	e04f      	b.n	80110ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801104e:	69f9      	ldr	r1, [r7, #28]
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff fd6c 	bl	8010b2e <get_fat>
 8011056:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00e      	beq.n	801107c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d003      	beq.n	801106c <create_chain+0xa6>
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106a:	d101      	bne.n	8011070 <create_chain+0xaa>
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	e03e      	b.n	80110ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011070:	69fa      	ldr	r2, [r7, #28]
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	429a      	cmp	r2, r3
 8011076:	d1da      	bne.n	801102e <create_chain+0x68>
 8011078:	2300      	movs	r3, #0
 801107a:	e038      	b.n	80110ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801107c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801107e:	f04f 32ff 	mov.w	r2, #4294967295
 8011082:	69f9      	ldr	r1, [r7, #28]
 8011084:	6938      	ldr	r0, [r7, #16]
 8011086:	f7ff fe22 	bl	8010cce <put_fat>
 801108a:	4603      	mov	r3, r0
 801108c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d109      	bne.n	80110a8 <create_chain+0xe2>
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801109a:	69fa      	ldr	r2, [r7, #28]
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6938      	ldr	r0, [r7, #16]
 80110a0:	f7ff fe15 	bl	8010cce <put_fat>
 80110a4:	4603      	mov	r3, r0
 80110a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80110a8:	7dfb      	ldrb	r3, [r7, #23]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d116      	bne.n	80110dc <create_chain+0x116>
		fs->last_clst = ncl;
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	69fa      	ldr	r2, [r7, #28]
 80110b2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	695a      	ldr	r2, [r3, #20]
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	699b      	ldr	r3, [r3, #24]
 80110bc:	3b02      	subs	r3, #2
 80110be:	429a      	cmp	r2, r3
 80110c0:	d804      	bhi.n	80110cc <create_chain+0x106>
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	695b      	ldr	r3, [r3, #20]
 80110c6:	1e5a      	subs	r2, r3, #1
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	791b      	ldrb	r3, [r3, #4]
 80110d0:	f043 0301 	orr.w	r3, r3, #1
 80110d4:	b2da      	uxtb	r2, r3
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	711a      	strb	r2, [r3, #4]
 80110da:	e007      	b.n	80110ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80110dc:	7dfb      	ldrb	r3, [r7, #23]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d102      	bne.n	80110e8 <create_chain+0x122>
 80110e2:	f04f 33ff 	mov.w	r3, #4294967295
 80110e6:	e000      	b.n	80110ea <create_chain+0x124>
 80110e8:	2301      	movs	r3, #1
 80110ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80110ec:	69fb      	ldr	r3, [r7, #28]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3720      	adds	r7, #32
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}

080110f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80110f6:	b480      	push	{r7}
 80110f8:	b087      	sub	sp, #28
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
 80110fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110a:	3304      	adds	r3, #4
 801110c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	899b      	ldrh	r3, [r3, #12]
 8011112:	461a      	mov	r2, r3
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	fbb3 f3f2 	udiv	r3, r3, r2
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	8952      	ldrh	r2, [r2, #10]
 801111e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011122:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	1d1a      	adds	r2, r3, #4
 8011128:	613a      	str	r2, [r7, #16]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <clmt_clust+0x42>
 8011134:	2300      	movs	r3, #0
 8011136:	e010      	b.n	801115a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011138:	697a      	ldr	r2, [r7, #20]
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	429a      	cmp	r2, r3
 801113e:	d307      	bcc.n	8011150 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	617b      	str	r3, [r7, #20]
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	3304      	adds	r3, #4
 801114c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801114e:	e7e9      	b.n	8011124 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011150:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	4413      	add	r3, r2
}
 801115a:	4618      	mov	r0, r3
 801115c:	371c      	adds	r7, #28
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b086      	sub	sp, #24
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801117c:	d204      	bcs.n	8011188 <dir_sdi+0x22>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	f003 031f 	and.w	r3, r3, #31
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <dir_sdi+0x26>
		return FR_INT_ERR;
 8011188:	2302      	movs	r3, #2
 801118a:	e071      	b.n	8011270 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	683a      	ldr	r2, [r7, #0]
 8011190:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d106      	bne.n	80111ac <dir_sdi+0x46>
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	d902      	bls.n	80111ac <dir_sdi+0x46>
		clst = fs->dirbase;
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d10c      	bne.n	80111cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	095b      	lsrs	r3, r3, #5
 80111b6:	693a      	ldr	r2, [r7, #16]
 80111b8:	8912      	ldrh	r2, [r2, #8]
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d301      	bcc.n	80111c2 <dir_sdi+0x5c>
 80111be:	2302      	movs	r3, #2
 80111c0:	e056      	b.n	8011270 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	61da      	str	r2, [r3, #28]
 80111ca:	e02d      	b.n	8011228 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	895b      	ldrh	r3, [r3, #10]
 80111d0:	461a      	mov	r2, r3
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	fb03 f302 	mul.w	r3, r3, r2
 80111da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80111dc:	e019      	b.n	8011212 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6979      	ldr	r1, [r7, #20]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fca3 	bl	8010b2e <get_fat>
 80111e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f0:	d101      	bne.n	80111f6 <dir_sdi+0x90>
 80111f2:	2301      	movs	r3, #1
 80111f4:	e03c      	b.n	8011270 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d904      	bls.n	8011206 <dir_sdi+0xa0>
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	699b      	ldr	r3, [r3, #24]
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	429a      	cmp	r2, r3
 8011204:	d301      	bcc.n	801120a <dir_sdi+0xa4>
 8011206:	2302      	movs	r3, #2
 8011208:	e032      	b.n	8011270 <dir_sdi+0x10a>
			ofs -= csz;
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011212:	683a      	ldr	r2, [r7, #0]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	429a      	cmp	r2, r3
 8011218:	d2e1      	bcs.n	80111de <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801121a:	6979      	ldr	r1, [r7, #20]
 801121c:	6938      	ldr	r0, [r7, #16]
 801121e:	f7ff fc67 	bl	8010af0 <clust2sect>
 8011222:	4602      	mov	r2, r0
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	69db      	ldr	r3, [r3, #28]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <dir_sdi+0xd4>
 8011236:	2302      	movs	r3, #2
 8011238:	e01a      	b.n	8011270 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	69da      	ldr	r2, [r3, #28]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	899b      	ldrh	r3, [r3, #12]
 8011242:	4619      	mov	r1, r3
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	fbb3 f3f1 	udiv	r3, r3, r1
 801124a:	441a      	add	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	899b      	ldrh	r3, [r3, #12]
 801125a:	461a      	mov	r2, r3
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011262:	fb02 f200 	mul.w	r2, r2, r0
 8011266:	1a9b      	subs	r3, r3, r2
 8011268:	18ca      	adds	r2, r1, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3718      	adds	r7, #24
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b086      	sub	sp, #24
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	3320      	adds	r3, #32
 801128e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	69db      	ldr	r3, [r3, #28]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d003      	beq.n	80112a0 <dir_next+0x28>
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801129e:	d301      	bcc.n	80112a4 <dir_next+0x2c>
 80112a0:	2304      	movs	r3, #4
 80112a2:	e0bb      	b.n	801141c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	899b      	ldrh	r3, [r3, #12]
 80112a8:	461a      	mov	r2, r3
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80112b0:	fb02 f201 	mul.w	r2, r2, r1
 80112b4:	1a9b      	subs	r3, r3, r2
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f040 809d 	bne.w	80113f6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	69db      	ldr	r3, [r3, #28]
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	699b      	ldr	r3, [r3, #24]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d10b      	bne.n	80112e6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	095b      	lsrs	r3, r3, #5
 80112d2:	68fa      	ldr	r2, [r7, #12]
 80112d4:	8912      	ldrh	r2, [r2, #8]
 80112d6:	4293      	cmp	r3, r2
 80112d8:	f0c0 808d 	bcc.w	80113f6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2200      	movs	r2, #0
 80112e0:	61da      	str	r2, [r3, #28]
 80112e2:	2304      	movs	r3, #4
 80112e4:	e09a      	b.n	801141c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	899b      	ldrh	r3, [r3, #12]
 80112ea:	461a      	mov	r2, r3
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	8952      	ldrh	r2, [r2, #10]
 80112f6:	3a01      	subs	r2, #1
 80112f8:	4013      	ands	r3, r2
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d17b      	bne.n	80113f6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	4619      	mov	r1, r3
 8011306:	4610      	mov	r0, r2
 8011308:	f7ff fc11 	bl	8010b2e <get_fat>
 801130c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	2b01      	cmp	r3, #1
 8011312:	d801      	bhi.n	8011318 <dir_next+0xa0>
 8011314:	2302      	movs	r3, #2
 8011316:	e081      	b.n	801141c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131e:	d101      	bne.n	8011324 <dir_next+0xac>
 8011320:	2301      	movs	r3, #1
 8011322:	e07b      	b.n	801141c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	699b      	ldr	r3, [r3, #24]
 8011328:	697a      	ldr	r2, [r7, #20]
 801132a:	429a      	cmp	r2, r3
 801132c:	d359      	bcc.n	80113e2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d104      	bne.n	801133e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	61da      	str	r2, [r3, #28]
 801133a:	2304      	movs	r3, #4
 801133c:	e06e      	b.n	801141c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	699b      	ldr	r3, [r3, #24]
 8011344:	4619      	mov	r1, r3
 8011346:	4610      	mov	r0, r2
 8011348:	f7ff fe3d 	bl	8010fc6 <create_chain>
 801134c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <dir_next+0xe0>
 8011354:	2307      	movs	r3, #7
 8011356:	e061      	b.n	801141c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d101      	bne.n	8011362 <dir_next+0xea>
 801135e:	2302      	movs	r3, #2
 8011360:	e05c      	b.n	801141c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011368:	d101      	bne.n	801136e <dir_next+0xf6>
 801136a:	2301      	movs	r3, #1
 801136c:	e056      	b.n	801141c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801136e:	68f8      	ldr	r0, [r7, #12]
 8011370:	f7ff fadc 	bl	801092c <sync_window>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <dir_next+0x106>
 801137a:	2301      	movs	r3, #1
 801137c:	e04e      	b.n	801141c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	899b      	ldrh	r3, [r3, #12]
 8011388:	461a      	mov	r2, r3
 801138a:	2100      	movs	r1, #0
 801138c:	f7ff f905 	bl	801059a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011390:	2300      	movs	r3, #0
 8011392:	613b      	str	r3, [r7, #16]
 8011394:	6979      	ldr	r1, [r7, #20]
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f7ff fbaa 	bl	8010af0 <clust2sect>
 801139c:	4602      	mov	r2, r0
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	631a      	str	r2, [r3, #48]	; 0x30
 80113a2:	e012      	b.n	80113ca <dir_next+0x152>
						fs->wflag = 1;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2201      	movs	r2, #1
 80113a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f7ff fabe 	bl	801092c <sync_window>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d001      	beq.n	80113ba <dir_next+0x142>
 80113b6:	2301      	movs	r3, #1
 80113b8:	e030      	b.n	801141c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	3301      	adds	r3, #1
 80113be:	613b      	str	r3, [r7, #16]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113c4:	1c5a      	adds	r2, r3, #1
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	631a      	str	r2, [r3, #48]	; 0x30
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	895b      	ldrh	r3, [r3, #10]
 80113ce:	461a      	mov	r2, r3
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d3e6      	bcc.n	80113a4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	1ad2      	subs	r2, r2, r3
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	697a      	ldr	r2, [r7, #20]
 80113e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80113e8:	6979      	ldr	r1, [r7, #20]
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff fb80 	bl	8010af0 <clust2sect>
 80113f0:	4602      	mov	r2, r0
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	899b      	ldrh	r3, [r3, #12]
 8011406:	461a      	mov	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	fbb3 f0f2 	udiv	r0, r3, r2
 801140e:	fb02 f200 	mul.w	r2, r2, r0
 8011412:	1a9b      	subs	r3, r3, r2
 8011414:	18ca      	adds	r2, r1, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801141a:	2300      	movs	r3, #0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011434:	2100      	movs	r1, #0
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff fe95 	bl	8011166 <dir_sdi>
 801143c:	4603      	mov	r3, r0
 801143e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d12b      	bne.n	801149e <dir_alloc+0x7a>
		n = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	69db      	ldr	r3, [r3, #28]
 801144e:	4619      	mov	r1, r3
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f7ff faaf 	bl	80109b4 <move_window>
 8011456:	4603      	mov	r3, r0
 8011458:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d11d      	bne.n	801149c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a1b      	ldr	r3, [r3, #32]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	2be5      	cmp	r3, #229	; 0xe5
 8011468:	d004      	beq.n	8011474 <dir_alloc+0x50>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6a1b      	ldr	r3, [r3, #32]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d107      	bne.n	8011484 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	3301      	adds	r3, #1
 8011478:	613b      	str	r3, [r7, #16]
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	429a      	cmp	r2, r3
 8011480:	d102      	bne.n	8011488 <dir_alloc+0x64>
 8011482:	e00c      	b.n	801149e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011484:	2300      	movs	r3, #0
 8011486:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011488:	2101      	movs	r1, #1
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7ff fef4 	bl	8011278 <dir_next>
 8011490:	4603      	mov	r3, r0
 8011492:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011494:	7dfb      	ldrb	r3, [r7, #23]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d0d7      	beq.n	801144a <dir_alloc+0x26>
 801149a:	e000      	b.n	801149e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801149c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801149e:	7dfb      	ldrb	r3, [r7, #23]
 80114a0:	2b04      	cmp	r3, #4
 80114a2:	d101      	bne.n	80114a8 <dir_alloc+0x84>
 80114a4:	2307      	movs	r3, #7
 80114a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b084      	sub	sp, #16
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	331a      	adds	r3, #26
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fe ffc7 	bl	8010454 <ld_word>
 80114c6:	4603      	mov	r3, r0
 80114c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	d109      	bne.n	80114e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	3314      	adds	r3, #20
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fe ffbc 	bl	8010454 <ld_word>
 80114dc:	4603      	mov	r3, r0
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	4313      	orrs	r3, r2
 80114e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80114e6:	68fb      	ldr	r3, [r7, #12]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	331a      	adds	r3, #26
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	b292      	uxth	r2, r2
 8011504:	4611      	mov	r1, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f7fe ffdf 	bl	80104ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	2b03      	cmp	r3, #3
 8011512:	d109      	bne.n	8011528 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	f103 0214 	add.w	r2, r3, #20
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	0c1b      	lsrs	r3, r3, #16
 801151e:	b29b      	uxth	r3, r3
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f7fe ffd1 	bl	80104ca <st_word>
	}
}
 8011528:	bf00      	nop
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801153e:	2100      	movs	r1, #0
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff fe10 	bl	8011166 <dir_sdi>
 8011546:	4603      	mov	r3, r0
 8011548:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <dir_find+0x24>
 8011550:	7dfb      	ldrb	r3, [r7, #23]
 8011552:	e03e      	b.n	80115d2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	69db      	ldr	r3, [r3, #28]
 8011558:	4619      	mov	r1, r3
 801155a:	6938      	ldr	r0, [r7, #16]
 801155c:	f7ff fa2a 	bl	80109b4 <move_window>
 8011560:	4603      	mov	r3, r0
 8011562:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011564:	7dfb      	ldrb	r3, [r7, #23]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d12f      	bne.n	80115ca <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011572:	7bfb      	ldrb	r3, [r7, #15]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d102      	bne.n	801157e <dir_find+0x4e>
 8011578:	2304      	movs	r3, #4
 801157a:	75fb      	strb	r3, [r7, #23]
 801157c:	e028      	b.n	80115d0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a1b      	ldr	r3, [r3, #32]
 8011582:	330b      	adds	r3, #11
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801158a:	b2da      	uxtb	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6a1b      	ldr	r3, [r3, #32]
 8011594:	330b      	adds	r3, #11
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	f003 0308 	and.w	r3, r3, #8
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10a      	bne.n	80115b6 <dir_find+0x86>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6a18      	ldr	r0, [r3, #32]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	3324      	adds	r3, #36	; 0x24
 80115a8:	220b      	movs	r2, #11
 80115aa:	4619      	mov	r1, r3
 80115ac:	f7ff f80f 	bl	80105ce <mem_cmp>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00b      	beq.n	80115ce <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80115b6:	2100      	movs	r1, #0
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff fe5d 	bl	8011278 <dir_next>
 80115be:	4603      	mov	r3, r0
 80115c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d0c5      	beq.n	8011554 <dir_find+0x24>
 80115c8:	e002      	b.n	80115d0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80115ca:	bf00      	nop
 80115cc:	e000      	b.n	80115d0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80115ce:	bf00      	nop

	return res;
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80115e8:	2101      	movs	r1, #1
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f7ff ff1a 	bl	8011424 <dir_alloc>
 80115f0:	4603      	mov	r3, r0
 80115f2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d11c      	bne.n	8011634 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	69db      	ldr	r3, [r3, #28]
 80115fe:	4619      	mov	r1, r3
 8011600:	68b8      	ldr	r0, [r7, #8]
 8011602:	f7ff f9d7 	bl	80109b4 <move_window>
 8011606:	4603      	mov	r3, r0
 8011608:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801160a:	7bfb      	ldrb	r3, [r7, #15]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d111      	bne.n	8011634 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a1b      	ldr	r3, [r3, #32]
 8011614:	2220      	movs	r2, #32
 8011616:	2100      	movs	r1, #0
 8011618:	4618      	mov	r0, r3
 801161a:	f7fe ffbe 	bl	801059a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a18      	ldr	r0, [r3, #32]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	3324      	adds	r3, #36	; 0x24
 8011626:	220b      	movs	r2, #11
 8011628:	4619      	mov	r1, r3
 801162a:	f7fe ff95 	bl	8010558 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	2201      	movs	r2, #1
 8011632:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011634:	7bfb      	ldrb	r3, [r7, #15]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
	...

08011640 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	60fb      	str	r3, [r7, #12]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3324      	adds	r3, #36	; 0x24
 8011654:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011656:	220b      	movs	r2, #11
 8011658:	2120      	movs	r1, #32
 801165a:	68b8      	ldr	r0, [r7, #8]
 801165c:	f7fe ff9d 	bl	801059a <mem_set>
	si = i = 0; ni = 8;
 8011660:	2300      	movs	r3, #0
 8011662:	613b      	str	r3, [r7, #16]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	2308      	movs	r3, #8
 801166a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	617a      	str	r2, [r7, #20]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	4413      	add	r3, r2
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801167a:	7ffb      	ldrb	r3, [r7, #31]
 801167c:	2b20      	cmp	r3, #32
 801167e:	d94e      	bls.n	801171e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011680:	7ffb      	ldrb	r3, [r7, #31]
 8011682:	2b2f      	cmp	r3, #47	; 0x2f
 8011684:	d006      	beq.n	8011694 <create_name+0x54>
 8011686:	7ffb      	ldrb	r3, [r7, #31]
 8011688:	2b5c      	cmp	r3, #92	; 0x5c
 801168a:	d110      	bne.n	80116ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801168c:	e002      	b.n	8011694 <create_name+0x54>
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	3301      	adds	r3, #1
 8011692:	617b      	str	r3, [r7, #20]
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	4413      	add	r3, r2
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	2b2f      	cmp	r3, #47	; 0x2f
 801169e:	d0f6      	beq.n	801168e <create_name+0x4e>
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	4413      	add	r3, r2
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	2b5c      	cmp	r3, #92	; 0x5c
 80116aa:	d0f0      	beq.n	801168e <create_name+0x4e>
			break;
 80116ac:	e038      	b.n	8011720 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80116ae:	7ffb      	ldrb	r3, [r7, #31]
 80116b0:	2b2e      	cmp	r3, #46	; 0x2e
 80116b2:	d003      	beq.n	80116bc <create_name+0x7c>
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d30c      	bcc.n	80116d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	2b0b      	cmp	r3, #11
 80116c0:	d002      	beq.n	80116c8 <create_name+0x88>
 80116c2:	7ffb      	ldrb	r3, [r7, #31]
 80116c4:	2b2e      	cmp	r3, #46	; 0x2e
 80116c6:	d001      	beq.n	80116cc <create_name+0x8c>
 80116c8:	2306      	movs	r3, #6
 80116ca:	e044      	b.n	8011756 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80116cc:	2308      	movs	r3, #8
 80116ce:	613b      	str	r3, [r7, #16]
 80116d0:	230b      	movs	r3, #11
 80116d2:	61bb      	str	r3, [r7, #24]
			continue;
 80116d4:	e022      	b.n	801171c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80116d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	da04      	bge.n	80116e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80116de:	7ffb      	ldrb	r3, [r7, #31]
 80116e0:	3b80      	subs	r3, #128	; 0x80
 80116e2:	4a1f      	ldr	r2, [pc, #124]	; (8011760 <create_name+0x120>)
 80116e4:	5cd3      	ldrb	r3, [r2, r3]
 80116e6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80116e8:	7ffb      	ldrb	r3, [r7, #31]
 80116ea:	4619      	mov	r1, r3
 80116ec:	481d      	ldr	r0, [pc, #116]	; (8011764 <create_name+0x124>)
 80116ee:	f7fe ff95 	bl	801061c <chk_chr>
 80116f2:	4603      	mov	r3, r0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <create_name+0xbc>
 80116f8:	2306      	movs	r3, #6
 80116fa:	e02c      	b.n	8011756 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80116fc:	7ffb      	ldrb	r3, [r7, #31]
 80116fe:	2b60      	cmp	r3, #96	; 0x60
 8011700:	d905      	bls.n	801170e <create_name+0xce>
 8011702:	7ffb      	ldrb	r3, [r7, #31]
 8011704:	2b7a      	cmp	r3, #122	; 0x7a
 8011706:	d802      	bhi.n	801170e <create_name+0xce>
 8011708:	7ffb      	ldrb	r3, [r7, #31]
 801170a:	3b20      	subs	r3, #32
 801170c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	1c5a      	adds	r2, r3, #1
 8011712:	613a      	str	r2, [r7, #16]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	4413      	add	r3, r2
 8011718:	7ffa      	ldrb	r2, [r7, #31]
 801171a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801171c:	e7a6      	b.n	801166c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801171e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	441a      	add	r2, r3
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d101      	bne.n	8011734 <create_name+0xf4>
 8011730:	2306      	movs	r3, #6
 8011732:	e010      	b.n	8011756 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	2be5      	cmp	r3, #229	; 0xe5
 801173a:	d102      	bne.n	8011742 <create_name+0x102>
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2205      	movs	r2, #5
 8011740:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011742:	7ffb      	ldrb	r3, [r7, #31]
 8011744:	2b20      	cmp	r3, #32
 8011746:	d801      	bhi.n	801174c <create_name+0x10c>
 8011748:	2204      	movs	r2, #4
 801174a:	e000      	b.n	801174e <create_name+0x10e>
 801174c:	2200      	movs	r2, #0
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	330b      	adds	r3, #11
 8011752:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011754:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011756:	4618      	mov	r0, r3
 8011758:	3720      	adds	r7, #32
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	0801e3b0 	.word	0x0801e3b0
 8011764:	0801d99c 	.word	0x0801d99c

08011768 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b086      	sub	sp, #24
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801177c:	e002      	b.n	8011784 <follow_path+0x1c>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	3301      	adds	r3, #1
 8011782:	603b      	str	r3, [r7, #0]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b2f      	cmp	r3, #47	; 0x2f
 801178a:	d0f8      	beq.n	801177e <follow_path+0x16>
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	2b5c      	cmp	r3, #92	; 0x5c
 8011792:	d0f4      	beq.n	801177e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	2200      	movs	r2, #0
 8011798:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	2b1f      	cmp	r3, #31
 80117a0:	d80a      	bhi.n	80117b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2280      	movs	r2, #128	; 0x80
 80117a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80117aa:	2100      	movs	r1, #0
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff fcda 	bl	8011166 <dir_sdi>
 80117b2:	4603      	mov	r3, r0
 80117b4:	75fb      	strb	r3, [r7, #23]
 80117b6:	e048      	b.n	801184a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80117b8:	463b      	mov	r3, r7
 80117ba:	4619      	mov	r1, r3
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7ff ff3f 	bl	8011640 <create_name>
 80117c2:	4603      	mov	r3, r0
 80117c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80117c6:	7dfb      	ldrb	r3, [r7, #23]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d139      	bne.n	8011840 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff feaf 	bl	8011530 <dir_find>
 80117d2:	4603      	mov	r3, r0
 80117d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80117de:	7dfb      	ldrb	r3, [r7, #23]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00a      	beq.n	80117fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80117e4:	7dfb      	ldrb	r3, [r7, #23]
 80117e6:	2b04      	cmp	r3, #4
 80117e8:	d12c      	bne.n	8011844 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80117ea:	7afb      	ldrb	r3, [r7, #11]
 80117ec:	f003 0304 	and.w	r3, r3, #4
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d127      	bne.n	8011844 <follow_path+0xdc>
 80117f4:	2305      	movs	r3, #5
 80117f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80117f8:	e024      	b.n	8011844 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80117fa:	7afb      	ldrb	r3, [r7, #11]
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d121      	bne.n	8011848 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	799b      	ldrb	r3, [r3, #6]
 8011808:	f003 0310 	and.w	r3, r3, #16
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011810:	2305      	movs	r3, #5
 8011812:	75fb      	strb	r3, [r7, #23]
 8011814:	e019      	b.n	801184a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	695b      	ldr	r3, [r3, #20]
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	8992      	ldrh	r2, [r2, #12]
 8011824:	fbb3 f0f2 	udiv	r0, r3, r2
 8011828:	fb02 f200 	mul.w	r2, r2, r0
 801182c:	1a9b      	subs	r3, r3, r2
 801182e:	440b      	add	r3, r1
 8011830:	4619      	mov	r1, r3
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f7ff fe3d 	bl	80114b2 <ld_clust>
 8011838:	4602      	mov	r2, r0
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801183e:	e7bb      	b.n	80117b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8011840:	bf00      	nop
 8011842:	e002      	b.n	801184a <follow_path+0xe2>
				break;
 8011844:	bf00      	nop
 8011846:	e000      	b.n	801184a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011848:	bf00      	nop
			}
		}
	}

	return res;
 801184a:	7dfb      	ldrb	r3, [r7, #23]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011854:	b480      	push	{r7}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801185c:	f04f 33ff 	mov.w	r3, #4294967295
 8011860:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d031      	beq.n	80118ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	617b      	str	r3, [r7, #20]
 8011870:	e002      	b.n	8011878 <get_ldnumber+0x24>
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	3301      	adds	r3, #1
 8011876:	617b      	str	r3, [r7, #20]
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b20      	cmp	r3, #32
 801187e:	d903      	bls.n	8011888 <get_ldnumber+0x34>
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b3a      	cmp	r3, #58	; 0x3a
 8011886:	d1f4      	bne.n	8011872 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	2b3a      	cmp	r3, #58	; 0x3a
 801188e:	d11c      	bne.n	80118ca <get_ldnumber+0x76>
			tp = *path;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	1c5a      	adds	r2, r3, #1
 801189a:	60fa      	str	r2, [r7, #12]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	3b30      	subs	r3, #48	; 0x30
 80118a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	2b09      	cmp	r3, #9
 80118a6:	d80e      	bhi.n	80118c6 <get_ldnumber+0x72>
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d10a      	bne.n	80118c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d107      	bne.n	80118c6 <get_ldnumber+0x72>
					vol = (int)i;
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	3301      	adds	r3, #1
 80118be:	617b      	str	r3, [r7, #20]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	697a      	ldr	r2, [r7, #20]
 80118c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	e002      	b.n	80118d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80118ca:	2300      	movs	r3, #0
 80118cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80118ce:	693b      	ldr	r3, [r7, #16]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	371c      	adds	r7, #28
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	70da      	strb	r2, [r3, #3]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f04f 32ff 	mov.w	r2, #4294967295
 80118f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80118f4:	6839      	ldr	r1, [r7, #0]
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff f85c 	bl	80109b4 <move_window>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d001      	beq.n	8011906 <check_fs+0x2a>
 8011902:	2304      	movs	r3, #4
 8011904:	e038      	b.n	8011978 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	3334      	adds	r3, #52	; 0x34
 801190a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801190e:	4618      	mov	r0, r3
 8011910:	f7fe fda0 	bl	8010454 <ld_word>
 8011914:	4603      	mov	r3, r0
 8011916:	461a      	mov	r2, r3
 8011918:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801191c:	429a      	cmp	r2, r3
 801191e:	d001      	beq.n	8011924 <check_fs+0x48>
 8011920:	2303      	movs	r3, #3
 8011922:	e029      	b.n	8011978 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801192a:	2be9      	cmp	r3, #233	; 0xe9
 801192c:	d009      	beq.n	8011942 <check_fs+0x66>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011934:	2beb      	cmp	r3, #235	; 0xeb
 8011936:	d11e      	bne.n	8011976 <check_fs+0x9a>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801193e:	2b90      	cmp	r3, #144	; 0x90
 8011940:	d119      	bne.n	8011976 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	3334      	adds	r3, #52	; 0x34
 8011946:	3336      	adds	r3, #54	; 0x36
 8011948:	4618      	mov	r0, r3
 801194a:	f7fe fd9b 	bl	8010484 <ld_dword>
 801194e:	4603      	mov	r3, r0
 8011950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011954:	4a0a      	ldr	r2, [pc, #40]	; (8011980 <check_fs+0xa4>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d101      	bne.n	801195e <check_fs+0x82>
 801195a:	2300      	movs	r3, #0
 801195c:	e00c      	b.n	8011978 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3334      	adds	r3, #52	; 0x34
 8011962:	3352      	adds	r3, #82	; 0x52
 8011964:	4618      	mov	r0, r3
 8011966:	f7fe fd8d 	bl	8010484 <ld_dword>
 801196a:	4602      	mov	r2, r0
 801196c:	4b05      	ldr	r3, [pc, #20]	; (8011984 <check_fs+0xa8>)
 801196e:	429a      	cmp	r2, r3
 8011970:	d101      	bne.n	8011976 <check_fs+0x9a>
 8011972:	2300      	movs	r3, #0
 8011974:	e000      	b.n	8011978 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011976:	2302      	movs	r3, #2
}
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	00544146 	.word	0x00544146
 8011984:	33544146 	.word	0x33544146

08011988 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b096      	sub	sp, #88	; 0x58
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	4613      	mov	r3, r2
 8011994:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	2200      	movs	r2, #0
 801199a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7ff ff59 	bl	8011854 <get_ldnumber>
 80119a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80119a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	da01      	bge.n	80119ae <find_volume+0x26>
 80119aa:	230b      	movs	r3, #11
 80119ac:	e265      	b.n	8011e7a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80119ae:	4ab0      	ldr	r2, [pc, #704]	; (8011c70 <find_volume+0x2e8>)
 80119b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80119b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d101      	bne.n	80119c2 <find_volume+0x3a>
 80119be:	230c      	movs	r3, #12
 80119c0:	e25b      	b.n	8011e7a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80119c8:	79fb      	ldrb	r3, [r7, #7]
 80119ca:	f023 0301 	bic.w	r3, r3, #1
 80119ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80119d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d01a      	beq.n	8011a0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80119d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119da:	785b      	ldrb	r3, [r3, #1]
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fe fc9b 	bl	8010318 <disk_status>
 80119e2:	4603      	mov	r3, r0
 80119e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80119e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d10c      	bne.n	8011a0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80119f4:	79fb      	ldrb	r3, [r7, #7]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d007      	beq.n	8011a0a <find_volume+0x82>
 80119fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119fe:	f003 0304 	and.w	r3, r3, #4
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011a06:	230a      	movs	r3, #10
 8011a08:	e237      	b.n	8011e7a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e235      	b.n	8011e7a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a10:	2200      	movs	r2, #0
 8011a12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a16:	b2da      	uxtb	r2, r3
 8011a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1e:	785b      	ldrb	r3, [r3, #1]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fe fc93 	bl	801034c <disk_initialize>
 8011a26:	4603      	mov	r3, r0
 8011a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a30:	f003 0301 	and.w	r3, r3, #1
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011a38:	2303      	movs	r3, #3
 8011a3a:	e21e      	b.n	8011e7a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011a3c:	79fb      	ldrb	r3, [r7, #7]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d007      	beq.n	8011a52 <find_volume+0xca>
 8011a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a46:	f003 0304 	and.w	r3, r3, #4
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d001      	beq.n	8011a52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011a4e:	230a      	movs	r3, #10
 8011a50:	e213      	b.n	8011e7a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a54:	7858      	ldrb	r0, [r3, #1]
 8011a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a58:	330c      	adds	r3, #12
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	2102      	movs	r1, #2
 8011a5e:	f7fe fcdb 	bl	8010418 <disk_ioctl>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <find_volume+0xe4>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e206      	b.n	8011e7a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6e:	899b      	ldrh	r3, [r3, #12]
 8011a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a74:	d80d      	bhi.n	8011a92 <find_volume+0x10a>
 8011a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a78:	899b      	ldrh	r3, [r3, #12]
 8011a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a7e:	d308      	bcc.n	8011a92 <find_volume+0x10a>
 8011a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a82:	899b      	ldrh	r3, [r3, #12]
 8011a84:	461a      	mov	r2, r3
 8011a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a88:	899b      	ldrh	r3, [r3, #12]
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	4013      	ands	r3, r2
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d001      	beq.n	8011a96 <find_volume+0x10e>
 8011a92:	2301      	movs	r3, #1
 8011a94:	e1f1      	b.n	8011e7a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a9e:	f7ff ff1d 	bl	80118dc <check_fs>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011aac:	2b02      	cmp	r3, #2
 8011aae:	d14b      	bne.n	8011b48 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ab4:	e01f      	b.n	8011af6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011ac4:	4413      	add	r3, r2
 8011ac6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aca:	3304      	adds	r3, #4
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d006      	beq.n	8011ae0 <find_volume+0x158>
 8011ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad4:	3308      	adds	r3, #8
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fe fcd4 	bl	8010484 <ld_dword>
 8011adc:	4602      	mov	r2, r0
 8011ade:	e000      	b.n	8011ae2 <find_volume+0x15a>
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011aea:	440b      	add	r3, r1
 8011aec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011af2:	3301      	adds	r3, #1
 8011af4:	643b      	str	r3, [r7, #64]	; 0x40
 8011af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	d9dc      	bls.n	8011ab6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011afc:	2300      	movs	r3, #0
 8011afe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <find_volume+0x184>
 8011b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b08:	3b01      	subs	r3, #1
 8011b0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011b14:	4413      	add	r3, r2
 8011b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d005      	beq.n	8011b2e <find_volume+0x1a6>
 8011b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b26:	f7ff fed9 	bl	80118dc <check_fs>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	e000      	b.n	8011b30 <find_volume+0x1a8>
 8011b2e:	2303      	movs	r3, #3
 8011b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	d905      	bls.n	8011b48 <find_volume+0x1c0>
 8011b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b3e:	3301      	adds	r3, #1
 8011b40:	643b      	str	r3, [r7, #64]	; 0x40
 8011b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	d9e1      	bls.n	8011b0c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d101      	bne.n	8011b54 <find_volume+0x1cc>
 8011b50:	2301      	movs	r3, #1
 8011b52:	e192      	b.n	8011e7a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d901      	bls.n	8011b60 <find_volume+0x1d8>
 8011b5c:	230d      	movs	r3, #13
 8011b5e:	e18c      	b.n	8011e7a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b62:	3334      	adds	r3, #52	; 0x34
 8011b64:	330b      	adds	r3, #11
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe fc74 	bl	8010454 <ld_word>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b72:	899b      	ldrh	r3, [r3, #12]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d001      	beq.n	8011b7c <find_volume+0x1f4>
 8011b78:	230d      	movs	r3, #13
 8011b7a:	e17e      	b.n	8011e7a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7e:	3334      	adds	r3, #52	; 0x34
 8011b80:	3316      	adds	r3, #22
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fe fc66 	bl	8010454 <ld_word>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d106      	bne.n	8011ba0 <find_volume+0x218>
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	3334      	adds	r3, #52	; 0x34
 8011b96:	3324      	adds	r3, #36	; 0x24
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7fe fc73 	bl	8010484 <ld_dword>
 8011b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ba4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb2:	789b      	ldrb	r3, [r3, #2]
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d005      	beq.n	8011bc4 <find_volume+0x23c>
 8011bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bba:	789b      	ldrb	r3, [r3, #2]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d001      	beq.n	8011bc4 <find_volume+0x23c>
 8011bc0:	230d      	movs	r3, #13
 8011bc2:	e15a      	b.n	8011e7a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc6:	789b      	ldrb	r3, [r3, #2]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bcc:	fb02 f303 	mul.w	r3, r2, r3
 8011bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be0:	895b      	ldrh	r3, [r3, #10]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d008      	beq.n	8011bf8 <find_volume+0x270>
 8011be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be8:	895b      	ldrh	r3, [r3, #10]
 8011bea:	461a      	mov	r2, r3
 8011bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bee:	895b      	ldrh	r3, [r3, #10]
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <find_volume+0x274>
 8011bf8:	230d      	movs	r3, #13
 8011bfa:	e13e      	b.n	8011e7a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	3334      	adds	r3, #52	; 0x34
 8011c00:	3311      	adds	r3, #17
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fe fc26 	bl	8010454 <ld_word>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	891b      	ldrh	r3, [r3, #8]
 8011c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c16:	8992      	ldrh	r2, [r2, #12]
 8011c18:	0952      	lsrs	r2, r2, #5
 8011c1a:	b292      	uxth	r2, r2
 8011c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c20:	fb02 f201 	mul.w	r2, r2, r1
 8011c24:	1a9b      	subs	r3, r3, r2
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <find_volume+0x2a8>
 8011c2c:	230d      	movs	r3, #13
 8011c2e:	e124      	b.n	8011e7a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	3334      	adds	r3, #52	; 0x34
 8011c34:	3313      	adds	r3, #19
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fc0c 	bl	8010454 <ld_word>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <find_volume+0x2cc>
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	3334      	adds	r3, #52	; 0x34
 8011c4a:	3320      	adds	r3, #32
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe fc19 	bl	8010484 <ld_dword>
 8011c52:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	3334      	adds	r3, #52	; 0x34
 8011c58:	330e      	adds	r3, #14
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fe fbfa 	bl	8010454 <ld_word>
 8011c60:	4603      	mov	r3, r0
 8011c62:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011c64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d104      	bne.n	8011c74 <find_volume+0x2ec>
 8011c6a:	230d      	movs	r3, #13
 8011c6c:	e105      	b.n	8011e7a <find_volume+0x4f2>
 8011c6e:	bf00      	nop
 8011c70:	20000b68 	.word	0x20000b68

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011c74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c78:	4413      	add	r3, r2
 8011c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c7c:	8911      	ldrh	r1, [r2, #8]
 8011c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c80:	8992      	ldrh	r2, [r2, #12]
 8011c82:	0952      	lsrs	r2, r2, #5
 8011c84:	b292      	uxth	r2, r2
 8011c86:	fbb1 f2f2 	udiv	r2, r1, r2
 8011c8a:	b292      	uxth	r2, r2
 8011c8c:	4413      	add	r3, r2
 8011c8e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d201      	bcs.n	8011c9c <find_volume+0x314>
 8011c98:	230d      	movs	r3, #13
 8011c9a:	e0ee      	b.n	8011e7a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ca4:	8952      	ldrh	r2, [r2, #10]
 8011ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <find_volume+0x32e>
 8011cb2:	230d      	movs	r3, #13
 8011cb4:	e0e1      	b.n	8011e7a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d802      	bhi.n	8011ccc <find_volume+0x344>
 8011cc6:	2302      	movs	r3, #2
 8011cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d802      	bhi.n	8011cdc <find_volume+0x354>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	1c9a      	adds	r2, r3, #2
 8011ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ce8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cee:	441a      	add	r2, r3
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	441a      	add	r2, r3
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d02:	2b03      	cmp	r3, #3
 8011d04:	d11e      	bne.n	8011d44 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d08:	3334      	adds	r3, #52	; 0x34
 8011d0a:	332a      	adds	r3, #42	; 0x2a
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fe fba1 	bl	8010454 <ld_word>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <find_volume+0x394>
 8011d18:	230d      	movs	r3, #13
 8011d1a:	e0ae      	b.n	8011e7a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1e:	891b      	ldrh	r3, [r3, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d001      	beq.n	8011d28 <find_volume+0x3a0>
 8011d24:	230d      	movs	r3, #13
 8011d26:	e0a8      	b.n	8011e7a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	3334      	adds	r3, #52	; 0x34
 8011d2c:	332c      	adds	r3, #44	; 0x2c
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fe fba8 	bl	8010484 <ld_dword>
 8011d34:	4602      	mov	r2, r0
 8011d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d38:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	699b      	ldr	r3, [r3, #24]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	647b      	str	r3, [r7, #68]	; 0x44
 8011d42:	e01f      	b.n	8011d84 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d46:	891b      	ldrh	r3, [r3, #8]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <find_volume+0x3c8>
 8011d4c:	230d      	movs	r3, #13
 8011d4e:	e094      	b.n	8011e7a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d56:	441a      	add	r2, r3
 8011d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d103      	bne.n	8011d6c <find_volume+0x3e4>
 8011d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	005b      	lsls	r3, r3, #1
 8011d6a:	e00a      	b.n	8011d82 <find_volume+0x3fa>
 8011d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6e:	699a      	ldr	r2, [r3, #24]
 8011d70:	4613      	mov	r3, r2
 8011d72:	005b      	lsls	r3, r3, #1
 8011d74:	4413      	add	r3, r2
 8011d76:	085a      	lsrs	r2, r3, #1
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	699b      	ldr	r3, [r3, #24]
 8011d7c:	f003 0301 	and.w	r3, r3, #1
 8011d80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011d82:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d86:	69da      	ldr	r2, [r3, #28]
 8011d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8a:	899b      	ldrh	r3, [r3, #12]
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d90:	440b      	add	r3, r1
 8011d92:	3b01      	subs	r3, #1
 8011d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d96:	8989      	ldrh	r1, [r1, #12]
 8011d98:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d201      	bcs.n	8011da4 <find_volume+0x41c>
 8011da0:	230d      	movs	r3, #13
 8011da2:	e06a      	b.n	8011e7a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	f04f 32ff 	mov.w	r2, #4294967295
 8011daa:	615a      	str	r2, [r3, #20]
 8011dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dae:	695a      	ldr	r2, [r3, #20]
 8011db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	2280      	movs	r2, #128	; 0x80
 8011db8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d149      	bne.n	8011e56 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc4:	3334      	adds	r3, #52	; 0x34
 8011dc6:	3330      	adds	r3, #48	; 0x30
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fe fb43 	bl	8010454 <ld_word>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d140      	bne.n	8011e56 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ddc:	f7fe fdea 	bl	80109b4 <move_window>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d137      	bne.n	8011e56 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de8:	2200      	movs	r2, #0
 8011dea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	3334      	adds	r3, #52	; 0x34
 8011df0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fb2d 	bl	8010454 <ld_word>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d127      	bne.n	8011e56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e08:	3334      	adds	r3, #52	; 0x34
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7fe fb3a 	bl	8010484 <ld_dword>
 8011e10:	4602      	mov	r2, r0
 8011e12:	4b1c      	ldr	r3, [pc, #112]	; (8011e84 <find_volume+0x4fc>)
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d11e      	bne.n	8011e56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1a:	3334      	adds	r3, #52	; 0x34
 8011e1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fe fb2f 	bl	8010484 <ld_dword>
 8011e26:	4602      	mov	r2, r0
 8011e28:	4b17      	ldr	r3, [pc, #92]	; (8011e88 <find_volume+0x500>)
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d113      	bne.n	8011e56 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e30:	3334      	adds	r3, #52	; 0x34
 8011e32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fe fb24 	bl	8010484 <ld_dword>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e40:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e44:	3334      	adds	r3, #52	; 0x34
 8011e46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe fb1a 	bl	8010484 <ld_dword>
 8011e50:	4602      	mov	r2, r0
 8011e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e54:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011e5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011e5e:	4b0b      	ldr	r3, [pc, #44]	; (8011e8c <find_volume+0x504>)
 8011e60:	881b      	ldrh	r3, [r3, #0]
 8011e62:	3301      	adds	r3, #1
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	4b09      	ldr	r3, [pc, #36]	; (8011e8c <find_volume+0x504>)
 8011e68:	801a      	strh	r2, [r3, #0]
 8011e6a:	4b08      	ldr	r3, [pc, #32]	; (8011e8c <find_volume+0x504>)
 8011e6c:	881a      	ldrh	r2, [r3, #0]
 8011e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e70:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e74:	f7fe fd36 	bl	80108e4 <clear_lock>
#endif
	return FR_OK;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3758      	adds	r7, #88	; 0x58
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	41615252 	.word	0x41615252
 8011e88:	61417272 	.word	0x61417272
 8011e8c:	20000b6c 	.word	0x20000b6c

08011e90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011e9a:	2309      	movs	r3, #9
 8011e9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d01c      	beq.n	8011ede <validate+0x4e>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d018      	beq.n	8011ede <validate+0x4e>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d013      	beq.n	8011ede <validate+0x4e>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	889a      	ldrh	r2, [r3, #4]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	88db      	ldrh	r3, [r3, #6]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d10c      	bne.n	8011ede <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	785b      	ldrb	r3, [r3, #1]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fe fa24 	bl	8010318 <disk_status>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	f003 0301 	and.w	r3, r3, #1
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d101      	bne.n	8011ede <validate+0x4e>
			res = FR_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011ede:	7bfb      	ldrb	r3, [r7, #15]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d102      	bne.n	8011eea <validate+0x5a>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	e000      	b.n	8011eec <validate+0x5c>
 8011eea:	2300      	movs	r3, #0
 8011eec:	683a      	ldr	r2, [r7, #0]
 8011eee:	6013      	str	r3, [r2, #0]
	return res;
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3710      	adds	r7, #16
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b088      	sub	sp, #32
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	4613      	mov	r3, r2
 8011f08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011f0e:	f107 0310 	add.w	r3, r7, #16
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff fc9e 	bl	8011854 <get_ldnumber>
 8011f18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	da01      	bge.n	8011f24 <f_mount+0x28>
 8011f20:	230b      	movs	r3, #11
 8011f22:	e02b      	b.n	8011f7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011f24:	4a17      	ldr	r2, [pc, #92]	; (8011f84 <f_mount+0x88>)
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d005      	beq.n	8011f40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011f34:	69b8      	ldr	r0, [r7, #24]
 8011f36:	f7fe fcd5 	bl	80108e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	490d      	ldr	r1, [pc, #52]	; (8011f84 <f_mount+0x88>)
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <f_mount+0x66>
 8011f5c:	79fb      	ldrb	r3, [r7, #7]
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	d001      	beq.n	8011f66 <f_mount+0x6a>
 8011f62:	2300      	movs	r3, #0
 8011f64:	e00a      	b.n	8011f7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011f66:	f107 010c 	add.w	r1, r7, #12
 8011f6a:	f107 0308 	add.w	r3, r7, #8
 8011f6e:	2200      	movs	r2, #0
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7ff fd09 	bl	8011988 <find_volume>
 8011f76:	4603      	mov	r3, r0
 8011f78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3720      	adds	r7, #32
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	20000b68 	.word	0x20000b68

08011f88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b098      	sub	sp, #96	; 0x60
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	4613      	mov	r3, r2
 8011f94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d101      	bne.n	8011fa0 <f_open+0x18>
 8011f9c:	2309      	movs	r3, #9
 8011f9e:	e1bb      	b.n	8012318 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011fa8:	79fa      	ldrb	r2, [r7, #7]
 8011faa:	f107 0110 	add.w	r1, r7, #16
 8011fae:	f107 0308 	add.w	r3, r7, #8
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fce8 	bl	8011988 <find_volume>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f040 819f 	bne.w	8012306 <f_open+0x37e>
		dj.obj.fs = fs;
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	f107 0314 	add.w	r3, r7, #20
 8011fd2:	4611      	mov	r1, r2
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7ff fbc7 	bl	8011768 <follow_path>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d11a      	bne.n	801201e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011fec:	b25b      	sxtb	r3, r3
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	da03      	bge.n	8011ffa <f_open+0x72>
				res = FR_INVALID_NAME;
 8011ff2:	2306      	movs	r3, #6
 8011ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011ff8:	e011      	b.n	801201e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	f023 0301 	bic.w	r3, r3, #1
 8012000:	2b00      	cmp	r3, #0
 8012002:	bf14      	ite	ne
 8012004:	2301      	movne	r3, #1
 8012006:	2300      	moveq	r3, #0
 8012008:	b2db      	uxtb	r3, r3
 801200a:	461a      	mov	r2, r3
 801200c:	f107 0314 	add.w	r3, r7, #20
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f7fe fb1e 	bl	8010654 <chk_lock>
 8012018:	4603      	mov	r3, r0
 801201a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801201e:	79fb      	ldrb	r3, [r7, #7]
 8012020:	f003 031c 	and.w	r3, r3, #28
 8012024:	2b00      	cmp	r3, #0
 8012026:	d07f      	beq.n	8012128 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801202c:	2b00      	cmp	r3, #0
 801202e:	d017      	beq.n	8012060 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012034:	2b04      	cmp	r3, #4
 8012036:	d10e      	bne.n	8012056 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012038:	f7fe fb68 	bl	801070c <enq_lock>
 801203c:	4603      	mov	r3, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	d006      	beq.n	8012050 <f_open+0xc8>
 8012042:	f107 0314 	add.w	r3, r7, #20
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff fac7 	bl	80115da <dir_register>
 801204c:	4603      	mov	r3, r0
 801204e:	e000      	b.n	8012052 <f_open+0xca>
 8012050:	2312      	movs	r3, #18
 8012052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	f043 0308 	orr.w	r3, r3, #8
 801205c:	71fb      	strb	r3, [r7, #7]
 801205e:	e010      	b.n	8012082 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012060:	7ebb      	ldrb	r3, [r7, #26]
 8012062:	f003 0311 	and.w	r3, r3, #17
 8012066:	2b00      	cmp	r3, #0
 8012068:	d003      	beq.n	8012072 <f_open+0xea>
					res = FR_DENIED;
 801206a:	2307      	movs	r3, #7
 801206c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012070:	e007      	b.n	8012082 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012072:	79fb      	ldrb	r3, [r7, #7]
 8012074:	f003 0304 	and.w	r3, r3, #4
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <f_open+0xfa>
 801207c:	2308      	movs	r3, #8
 801207e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012086:	2b00      	cmp	r3, #0
 8012088:	d168      	bne.n	801215c <f_open+0x1d4>
 801208a:	79fb      	ldrb	r3, [r7, #7]
 801208c:	f003 0308 	and.w	r3, r3, #8
 8012090:	2b00      	cmp	r3, #0
 8012092:	d063      	beq.n	801215c <f_open+0x1d4>
				dw = GET_FATTIME();
 8012094:	f000 fdf2 	bl	8012c7c <get_fattime>
 8012098:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801209c:	330e      	adds	r3, #14
 801209e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fe fa2d 	bl	8010500 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80120a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a8:	3316      	adds	r3, #22
 80120aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fe fa27 	bl	8010500 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80120b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120b4:	330b      	adds	r3, #11
 80120b6:	2220      	movs	r2, #32
 80120b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120be:	4611      	mov	r1, r2
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7ff f9f6 	bl	80114b2 <ld_clust>
 80120c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80120cc:	2200      	movs	r2, #0
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7ff fa0e 	bl	80114f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80120d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d6:	331c      	adds	r3, #28
 80120d8:	2100      	movs	r1, #0
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fe fa10 	bl	8010500 <st_dword>
					fs->wflag = 1;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	2201      	movs	r2, #1
 80120e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80120e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d037      	beq.n	801215c <f_open+0x1d4>
						dw = fs->winsect;
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80120f2:	f107 0314 	add.w	r3, r7, #20
 80120f6:	2200      	movs	r2, #0
 80120f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fe fefe 	bl	8010efc <remove_chain>
 8012100:	4603      	mov	r3, r0
 8012102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801210a:	2b00      	cmp	r3, #0
 801210c:	d126      	bne.n	801215c <f_open+0x1d4>
							res = move_window(fs, dw);
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012112:	4618      	mov	r0, r3
 8012114:	f7fe fc4e 	bl	80109b4 <move_window>
 8012118:	4603      	mov	r3, r0
 801211a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012122:	3a01      	subs	r2, #1
 8012124:	611a      	str	r2, [r3, #16]
 8012126:	e019      	b.n	801215c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801212c:	2b00      	cmp	r3, #0
 801212e:	d115      	bne.n	801215c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012130:	7ebb      	ldrb	r3, [r7, #26]
 8012132:	f003 0310 	and.w	r3, r3, #16
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <f_open+0x1ba>
					res = FR_NO_FILE;
 801213a:	2304      	movs	r3, #4
 801213c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012140:	e00c      	b.n	801215c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	f003 0302 	and.w	r3, r3, #2
 8012148:	2b00      	cmp	r3, #0
 801214a:	d007      	beq.n	801215c <f_open+0x1d4>
 801214c:	7ebb      	ldrb	r3, [r7, #26]
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	2b00      	cmp	r3, #0
 8012154:	d002      	beq.n	801215c <f_open+0x1d4>
						res = FR_DENIED;
 8012156:	2307      	movs	r3, #7
 8012158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801215c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012160:	2b00      	cmp	r3, #0
 8012162:	d128      	bne.n	80121b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	f003 0308 	and.w	r3, r3, #8
 801216a:	2b00      	cmp	r3, #0
 801216c:	d003      	beq.n	8012176 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012174:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801217e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012184:	79fb      	ldrb	r3, [r7, #7]
 8012186:	f023 0301 	bic.w	r3, r3, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	bf14      	ite	ne
 801218e:	2301      	movne	r3, #1
 8012190:	2300      	moveq	r3, #0
 8012192:	b2db      	uxtb	r3, r3
 8012194:	461a      	mov	r2, r3
 8012196:	f107 0314 	add.w	r3, r7, #20
 801219a:	4611      	mov	r1, r2
 801219c:	4618      	mov	r0, r3
 801219e:	f7fe fad7 	bl	8010750 <inc_lock>
 80121a2:	4602      	mov	r2, r0
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <f_open+0x22e>
 80121b0:	2302      	movs	r3, #2
 80121b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80121b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f040 80a3 	bne.w	8012306 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff f973 	bl	80114b2 <ld_clust>
 80121cc:	4602      	mov	r2, r0
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80121d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d4:	331c      	adds	r3, #28
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fe f954 	bl	8010484 <ld_dword>
 80121dc:	4602      	mov	r2, r0
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2200      	movs	r2, #0
 80121e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80121e8:	693a      	ldr	r2, [r7, #16]
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	88da      	ldrh	r2, [r3, #6]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	79fa      	ldrb	r2, [r7, #7]
 80121fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2200      	movs	r2, #0
 8012200:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2200      	movs	r2, #0
 801220c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	3330      	adds	r3, #48	; 0x30
 8012212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012216:	2100      	movs	r1, #0
 8012218:	4618      	mov	r0, r3
 801221a:	f7fe f9be 	bl	801059a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801221e:	79fb      	ldrb	r3, [r7, #7]
 8012220:	f003 0320 	and.w	r3, r3, #32
 8012224:	2b00      	cmp	r3, #0
 8012226:	d06e      	beq.n	8012306 <f_open+0x37e>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	68db      	ldr	r3, [r3, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d06a      	beq.n	8012306 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	68da      	ldr	r2, [r3, #12]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	895b      	ldrh	r3, [r3, #10]
 801223c:	461a      	mov	r2, r3
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	899b      	ldrh	r3, [r3, #12]
 8012242:	fb03 f302 	mul.w	r3, r3, r2
 8012246:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	657b      	str	r3, [r7, #84]	; 0x54
 8012254:	e016      	b.n	8012284 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801225a:	4618      	mov	r0, r3
 801225c:	f7fe fc67 	bl	8010b2e <get_fat>
 8012260:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012264:	2b01      	cmp	r3, #1
 8012266:	d802      	bhi.n	801226e <f_open+0x2e6>
 8012268:	2302      	movs	r3, #2
 801226a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012274:	d102      	bne.n	801227c <f_open+0x2f4>
 8012276:	2301      	movs	r3, #1
 8012278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801227c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	657b      	str	r3, [r7, #84]	; 0x54
 8012284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012288:	2b00      	cmp	r3, #0
 801228a:	d103      	bne.n	8012294 <f_open+0x30c>
 801228c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012290:	429a      	cmp	r2, r3
 8012292:	d8e0      	bhi.n	8012256 <f_open+0x2ce>
				}
				fp->clust = clst;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012298:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801229a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d131      	bne.n	8012306 <f_open+0x37e>
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	899b      	ldrh	r3, [r3, #12]
 80122a6:	461a      	mov	r2, r3
 80122a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80122ae:	fb02 f201 	mul.w	r2, r2, r1
 80122b2:	1a9b      	subs	r3, r3, r2
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d026      	beq.n	8012306 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fe fc17 	bl	8010af0 <clust2sect>
 80122c2:	6478      	str	r0, [r7, #68]	; 0x44
 80122c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d103      	bne.n	80122d2 <f_open+0x34a>
						res = FR_INT_ERR;
 80122ca:	2302      	movs	r3, #2
 80122cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80122d0:	e019      	b.n	8012306 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	899b      	ldrh	r3, [r3, #12]
 80122d6:	461a      	mov	r2, r3
 80122d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122da:	fbb3 f2f2 	udiv	r2, r3, r2
 80122de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122e0:	441a      	add	r2, r3
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	7858      	ldrb	r0, [r3, #1]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6a1a      	ldr	r2, [r3, #32]
 80122f4:	2301      	movs	r3, #1
 80122f6:	f7fe f84f 	bl	8010398 <disk_read>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d002      	beq.n	8012306 <f_open+0x37e>
 8012300:	2301      	movs	r3, #1
 8012302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801230a:	2b00      	cmp	r3, #0
 801230c:	d002      	beq.n	8012314 <f_open+0x38c>
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012318:	4618      	mov	r0, r3
 801231a:	3760      	adds	r7, #96	; 0x60
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08c      	sub	sp, #48	; 0x30
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	2200      	movs	r2, #0
 8012336:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f107 0210 	add.w	r2, r7, #16
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7ff fda5 	bl	8011e90 <validate>
 8012346:	4603      	mov	r3, r0
 8012348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801234c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012350:	2b00      	cmp	r3, #0
 8012352:	d107      	bne.n	8012364 <f_write+0x44>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	7d5b      	ldrb	r3, [r3, #21]
 8012358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801235c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012360:	2b00      	cmp	r3, #0
 8012362:	d002      	beq.n	801236a <f_write+0x4a>
 8012364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012368:	e16a      	b.n	8012640 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	7d1b      	ldrb	r3, [r3, #20]
 801236e:	f003 0302 	and.w	r3, r3, #2
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <f_write+0x5a>
 8012376:	2307      	movs	r3, #7
 8012378:	e162      	b.n	8012640 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	699a      	ldr	r2, [r3, #24]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	441a      	add	r2, r3
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	699b      	ldr	r3, [r3, #24]
 8012386:	429a      	cmp	r2, r3
 8012388:	f080 814c 	bcs.w	8012624 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	699b      	ldr	r3, [r3, #24]
 8012390:	43db      	mvns	r3, r3
 8012392:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012394:	e146      	b.n	8012624 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	699b      	ldr	r3, [r3, #24]
 801239a:	693a      	ldr	r2, [r7, #16]
 801239c:	8992      	ldrh	r2, [r2, #12]
 801239e:	fbb3 f1f2 	udiv	r1, r3, r2
 80123a2:	fb02 f201 	mul.w	r2, r2, r1
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f040 80f1 	bne.w	8012590 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	699b      	ldr	r3, [r3, #24]
 80123b2:	693a      	ldr	r2, [r7, #16]
 80123b4:	8992      	ldrh	r2, [r2, #12]
 80123b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80123ba:	693a      	ldr	r2, [r7, #16]
 80123bc:	8952      	ldrh	r2, [r2, #10]
 80123be:	3a01      	subs	r2, #1
 80123c0:	4013      	ands	r3, r2
 80123c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d143      	bne.n	8012452 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	699b      	ldr	r3, [r3, #24]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10c      	bne.n	80123ec <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80123d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d11a      	bne.n	8012414 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	2100      	movs	r1, #0
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fe fdef 	bl	8010fc6 <create_chain>
 80123e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80123ea:	e013      	b.n	8012414 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d007      	beq.n	8012404 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	4619      	mov	r1, r3
 80123fa:	68f8      	ldr	r0, [r7, #12]
 80123fc:	f7fe fe7b 	bl	80110f6 <clmt_clust>
 8012400:	62b8      	str	r0, [r7, #40]	; 0x28
 8012402:	e007      	b.n	8012414 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	69db      	ldr	r3, [r3, #28]
 801240a:	4619      	mov	r1, r3
 801240c:	4610      	mov	r0, r2
 801240e:	f7fe fdda 	bl	8010fc6 <create_chain>
 8012412:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012416:	2b00      	cmp	r3, #0
 8012418:	f000 8109 	beq.w	801262e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	2b01      	cmp	r3, #1
 8012420:	d104      	bne.n	801242c <f_write+0x10c>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2202      	movs	r2, #2
 8012426:	755a      	strb	r2, [r3, #21]
 8012428:	2302      	movs	r3, #2
 801242a:	e109      	b.n	8012640 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012432:	d104      	bne.n	801243e <f_write+0x11e>
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2201      	movs	r2, #1
 8012438:	755a      	strb	r2, [r3, #21]
 801243a:	2301      	movs	r3, #1
 801243c:	e100      	b.n	8012640 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012442:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <f_write+0x132>
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012450:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	7d1b      	ldrb	r3, [r3, #20]
 8012456:	b25b      	sxtb	r3, r3
 8012458:	2b00      	cmp	r3, #0
 801245a:	da18      	bge.n	801248e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	7858      	ldrb	r0, [r3, #1]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	6a1a      	ldr	r2, [r3, #32]
 801246a:	2301      	movs	r3, #1
 801246c:	f7fd ffb4 	bl	80103d8 <disk_write>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d004      	beq.n	8012480 <f_write+0x160>
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	2201      	movs	r2, #1
 801247a:	755a      	strb	r2, [r3, #21]
 801247c:	2301      	movs	r3, #1
 801247e:	e0df      	b.n	8012640 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	7d1b      	ldrb	r3, [r3, #20]
 8012484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012488:	b2da      	uxtb	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801248e:	693a      	ldr	r2, [r7, #16]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	69db      	ldr	r3, [r3, #28]
 8012494:	4619      	mov	r1, r3
 8012496:	4610      	mov	r0, r2
 8012498:	f7fe fb2a 	bl	8010af0 <clust2sect>
 801249c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d104      	bne.n	80124ae <f_write+0x18e>
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2202      	movs	r2, #2
 80124a8:	755a      	strb	r2, [r3, #21]
 80124aa:	2302      	movs	r3, #2
 80124ac:	e0c8      	b.n	8012640 <f_write+0x320>
			sect += csect;
 80124ae:	697a      	ldr	r2, [r7, #20]
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	4413      	add	r3, r2
 80124b4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	899b      	ldrh	r3, [r3, #12]
 80124ba:	461a      	mov	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	fbb3 f3f2 	udiv	r3, r3, r2
 80124c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80124c4:	6a3b      	ldr	r3, [r7, #32]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d043      	beq.n	8012552 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80124ca:	69ba      	ldr	r2, [r7, #24]
 80124cc:	6a3b      	ldr	r3, [r7, #32]
 80124ce:	4413      	add	r3, r2
 80124d0:	693a      	ldr	r2, [r7, #16]
 80124d2:	8952      	ldrh	r2, [r2, #10]
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d905      	bls.n	80124e4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	895b      	ldrh	r3, [r3, #10]
 80124dc:	461a      	mov	r2, r3
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	7858      	ldrb	r0, [r3, #1]
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	697a      	ldr	r2, [r7, #20]
 80124ec:	69f9      	ldr	r1, [r7, #28]
 80124ee:	f7fd ff73 	bl	80103d8 <disk_write>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d004      	beq.n	8012502 <f_write+0x1e2>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2201      	movs	r2, #1
 80124fc:	755a      	strb	r2, [r3, #21]
 80124fe:	2301      	movs	r3, #1
 8012500:	e09e      	b.n	8012640 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6a1a      	ldr	r2, [r3, #32]
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	6a3a      	ldr	r2, [r7, #32]
 801250c:	429a      	cmp	r2, r3
 801250e:	d918      	bls.n	8012542 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6a1a      	ldr	r2, [r3, #32]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	1ad3      	subs	r3, r2, r3
 801251e:	693a      	ldr	r2, [r7, #16]
 8012520:	8992      	ldrh	r2, [r2, #12]
 8012522:	fb02 f303 	mul.w	r3, r2, r3
 8012526:	69fa      	ldr	r2, [r7, #28]
 8012528:	18d1      	adds	r1, r2, r3
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	899b      	ldrh	r3, [r3, #12]
 801252e:	461a      	mov	r2, r3
 8012530:	f7fe f812 	bl	8010558 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	7d1b      	ldrb	r3, [r3, #20]
 8012538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801253c:	b2da      	uxtb	r2, r3
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	899b      	ldrh	r3, [r3, #12]
 8012546:	461a      	mov	r2, r3
 8012548:	6a3b      	ldr	r3, [r7, #32]
 801254a:	fb02 f303 	mul.w	r3, r2, r3
 801254e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012550:	e04b      	b.n	80125ea <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6a1b      	ldr	r3, [r3, #32]
 8012556:	697a      	ldr	r2, [r7, #20]
 8012558:	429a      	cmp	r2, r3
 801255a:	d016      	beq.n	801258a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	699a      	ldr	r2, [r3, #24]
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012564:	429a      	cmp	r2, r3
 8012566:	d210      	bcs.n	801258a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	7858      	ldrb	r0, [r3, #1]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012572:	2301      	movs	r3, #1
 8012574:	697a      	ldr	r2, [r7, #20]
 8012576:	f7fd ff0f 	bl	8010398 <disk_read>
 801257a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801257c:	2b00      	cmp	r3, #0
 801257e:	d004      	beq.n	801258a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2201      	movs	r2, #1
 8012584:	755a      	strb	r2, [r3, #21]
 8012586:	2301      	movs	r3, #1
 8012588:	e05a      	b.n	8012640 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	697a      	ldr	r2, [r7, #20]
 801258e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	899b      	ldrh	r3, [r3, #12]
 8012594:	4618      	mov	r0, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	693a      	ldr	r2, [r7, #16]
 801259c:	8992      	ldrh	r2, [r2, #12]
 801259e:	fbb3 f1f2 	udiv	r1, r3, r2
 80125a2:	fb02 f201 	mul.w	r2, r2, r1
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	1ac3      	subs	r3, r0, r3
 80125aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80125ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d901      	bls.n	80125b8 <f_write+0x298>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	699b      	ldr	r3, [r3, #24]
 80125c2:	693a      	ldr	r2, [r7, #16]
 80125c4:	8992      	ldrh	r2, [r2, #12]
 80125c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80125ca:	fb02 f200 	mul.w	r2, r2, r0
 80125ce:	1a9b      	subs	r3, r3, r2
 80125d0:	440b      	add	r3, r1
 80125d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d4:	69f9      	ldr	r1, [r7, #28]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd ffbe 	bl	8010558 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	7d1b      	ldrb	r3, [r3, #20]
 80125e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80125ea:	69fa      	ldr	r2, [r7, #28]
 80125ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ee:	4413      	add	r3, r2
 80125f0:	61fb      	str	r3, [r7, #28]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	699a      	ldr	r2, [r3, #24]
 80125f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f8:	441a      	add	r2, r3
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	619a      	str	r2, [r3, #24]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	68da      	ldr	r2, [r3, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	699b      	ldr	r3, [r3, #24]
 8012606:	429a      	cmp	r2, r3
 8012608:	bf38      	it	cc
 801260a:	461a      	movcc	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	60da      	str	r2, [r3, #12]
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012616:	441a      	add	r2, r3
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	f47f aeb5 	bne.w	8012396 <f_write+0x76>
 801262c:	e000      	b.n	8012630 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801262e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7d1b      	ldrb	r3, [r3, #20]
 8012634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012638:	b2da      	uxtb	r2, r3
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3730      	adds	r7, #48	; 0x30
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f107 0208 	add.w	r2, r7, #8
 8012656:	4611      	mov	r1, r2
 8012658:	4618      	mov	r0, r3
 801265a:	f7ff fc19 	bl	8011e90 <validate>
 801265e:	4603      	mov	r3, r0
 8012660:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012662:	7dfb      	ldrb	r3, [r7, #23]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d168      	bne.n	801273a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	7d1b      	ldrb	r3, [r3, #20]
 801266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012670:	2b00      	cmp	r3, #0
 8012672:	d062      	beq.n	801273a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	7d1b      	ldrb	r3, [r3, #20]
 8012678:	b25b      	sxtb	r3, r3
 801267a:	2b00      	cmp	r3, #0
 801267c:	da15      	bge.n	80126aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	7858      	ldrb	r0, [r3, #1]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a1a      	ldr	r2, [r3, #32]
 801268c:	2301      	movs	r3, #1
 801268e:	f7fd fea3 	bl	80103d8 <disk_write>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d001      	beq.n	801269c <f_sync+0x54>
 8012698:	2301      	movs	r3, #1
 801269a:	e04f      	b.n	801273c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7d1b      	ldrb	r3, [r3, #20]
 80126a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80126aa:	f000 fae7 	bl	8012c7c <get_fattime>
 80126ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b6:	4619      	mov	r1, r3
 80126b8:	4610      	mov	r0, r2
 80126ba:	f7fe f97b 	bl	80109b4 <move_window>
 80126be:	4603      	mov	r3, r0
 80126c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80126c2:	7dfb      	ldrb	r3, [r7, #23]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d138      	bne.n	801273a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	330b      	adds	r3, #11
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	330b      	adds	r3, #11
 80126d8:	f042 0220 	orr.w	r2, r2, #32
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6818      	ldr	r0, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	461a      	mov	r2, r3
 80126ea:	68f9      	ldr	r1, [r7, #12]
 80126ec:	f7fe ff00 	bl	80114f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f103 021c 	add.w	r2, r3, #28
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	4619      	mov	r1, r3
 80126fc:	4610      	mov	r0, r2
 80126fe:	f7fd feff 	bl	8010500 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3316      	adds	r3, #22
 8012706:	6939      	ldr	r1, [r7, #16]
 8012708:	4618      	mov	r0, r3
 801270a:	f7fd fef9 	bl	8010500 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	3312      	adds	r3, #18
 8012712:	2100      	movs	r1, #0
 8012714:	4618      	mov	r0, r3
 8012716:	f7fd fed8 	bl	80104ca <st_word>
					fs->wflag = 1;
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	2201      	movs	r2, #1
 801271e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	4618      	mov	r0, r3
 8012724:	f7fe f974 	bl	8010a10 <sync_fs>
 8012728:	4603      	mov	r3, r0
 801272a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012734:	b2da      	uxtb	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801273a:	7dfb      	ldrb	r3, [r7, #23]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3718      	adds	r7, #24
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7ff ff7b 	bl	8012648 <f_sync>
 8012752:	4603      	mov	r3, r0
 8012754:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012756:	7bfb      	ldrb	r3, [r7, #15]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d118      	bne.n	801278e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f107 0208 	add.w	r2, r7, #8
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f7ff fb93 	bl	8011e90 <validate>
 801276a:	4603      	mov	r3, r0
 801276c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10c      	bne.n	801278e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	691b      	ldr	r3, [r3, #16]
 8012778:	4618      	mov	r0, r3
 801277a:	f7fe f877 	bl	801086c <dec_lock>
 801277e:	4603      	mov	r3, r0
 8012780:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d102      	bne.n	801278e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3710      	adds	r7, #16
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b096      	sub	sp, #88	; 0x58
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80127a0:	f107 0108 	add.w	r1, r7, #8
 80127a4:	1d3b      	adds	r3, r7, #4
 80127a6:	2202      	movs	r2, #2
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff f8ed 	bl	8011988 <find_volume>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80127b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f040 80f2 	bne.w	80129a6 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	f107 030c 	add.w	r3, r7, #12
 80127c8:	4611      	mov	r1, r2
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fe ffcc 	bl	8011768 <follow_path>
 80127d0:	4603      	mov	r3, r0
 80127d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80127d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d102      	bne.n	80127e4 <f_mkdir+0x4c>
 80127de:	2308      	movs	r3, #8
 80127e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80127e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127e8:	2b04      	cmp	r3, #4
 80127ea:	f040 80dc 	bne.w	80129a6 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80127ee:	f107 030c 	add.w	r3, r7, #12
 80127f2:	2100      	movs	r1, #0
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fe fbe6 	bl	8010fc6 <create_chain>
 80127fa:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	895b      	ldrh	r3, [r3, #10]
 8012800:	461a      	mov	r2, r3
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	899b      	ldrh	r3, [r3, #12]
 8012806:	fb03 f302 	mul.w	r3, r3, r2
 801280a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801280c:	2300      	movs	r3, #0
 801280e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012814:	2b00      	cmp	r3, #0
 8012816:	d102      	bne.n	801281e <f_mkdir+0x86>
 8012818:	2307      	movs	r3, #7
 801281a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801281e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012820:	2b01      	cmp	r3, #1
 8012822:	d102      	bne.n	801282a <f_mkdir+0x92>
 8012824:	2302      	movs	r3, #2
 8012826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012830:	d102      	bne.n	8012838 <f_mkdir+0xa0>
 8012832:	2301      	movs	r3, #1
 8012834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801283c:	2b00      	cmp	r3, #0
 801283e:	d106      	bne.n	801284e <f_mkdir+0xb6>
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	4618      	mov	r0, r3
 8012844:	f7fe f872 	bl	801092c <sync_window>
 8012848:	4603      	mov	r3, r0
 801284a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801284e:	f000 fa15 	bl	8012c7c <get_fattime>
 8012852:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012858:	2b00      	cmp	r3, #0
 801285a:	d16c      	bne.n	8012936 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012860:	4618      	mov	r0, r3
 8012862:	f7fe f945 	bl	8010af0 <clust2sect>
 8012866:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	3334      	adds	r3, #52	; 0x34
 801286c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	899b      	ldrh	r3, [r3, #12]
 8012872:	461a      	mov	r2, r3
 8012874:	2100      	movs	r1, #0
 8012876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012878:	f7fd fe8f 	bl	801059a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801287c:	220b      	movs	r2, #11
 801287e:	2120      	movs	r1, #32
 8012880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012882:	f7fd fe8a 	bl	801059a <mem_set>
					dir[DIR_Name] = '.';
 8012886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012888:	222e      	movs	r2, #46	; 0x2e
 801288a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801288e:	330b      	adds	r3, #11
 8012890:	2210      	movs	r2, #16
 8012892:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012896:	3316      	adds	r3, #22
 8012898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801289a:	4618      	mov	r0, r3
 801289c:	f7fd fe30 	bl	8010500 <st_dword>
					st_clust(fs, dir, dcl);
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fe22 	bl	80114f0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80128ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ae:	3320      	adds	r3, #32
 80128b0:	2220      	movs	r2, #32
 80128b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fd fe4f 	bl	8010558 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80128ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128bc:	3321      	adds	r3, #33	; 0x21
 80128be:	222e      	movs	r2, #46	; 0x2e
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d106      	bne.n	80128dc <f_mkdir+0x144>
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d101      	bne.n	80128dc <f_mkdir+0x144>
 80128d8:	2300      	movs	r3, #0
 80128da:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80128dc:	68b8      	ldr	r0, [r7, #8]
 80128de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e0:	3320      	adds	r3, #32
 80128e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128e4:	4619      	mov	r1, r3
 80128e6:	f7fe fe03 	bl	80114f0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	895b      	ldrh	r3, [r3, #10]
 80128ee:	653b      	str	r3, [r7, #80]	; 0x50
 80128f0:	e01c      	b.n	801292c <f_mkdir+0x194>
					fs->winsect = dsc++;
 80128f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2201      	movs	r2, #1
 8012900:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe f811 	bl	801092c <sync_window>
 801290a:	4603      	mov	r3, r0
 801290c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012914:	2b00      	cmp	r3, #0
 8012916:	d10d      	bne.n	8012934 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	899b      	ldrh	r3, [r3, #12]
 801291c:	461a      	mov	r2, r3
 801291e:	2100      	movs	r1, #0
 8012920:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012922:	f7fd fe3a 	bl	801059a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012928:	3b01      	subs	r3, #1
 801292a:	653b      	str	r3, [r7, #80]	; 0x50
 801292c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1df      	bne.n	80128f2 <f_mkdir+0x15a>
 8012932:	e000      	b.n	8012936 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8012934:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801293a:	2b00      	cmp	r3, #0
 801293c:	d107      	bne.n	801294e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801293e:	f107 030c 	add.w	r3, r7, #12
 8012942:	4618      	mov	r0, r3
 8012944:	f7fe fe49 	bl	80115da <dir_register>
 8012948:	4603      	mov	r3, r0
 801294a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801294e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012952:	2b00      	cmp	r3, #0
 8012954:	d120      	bne.n	8012998 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801295c:	3316      	adds	r3, #22
 801295e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012960:	4618      	mov	r0, r3
 8012962:	f7fd fdcd 	bl	8010500 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801296a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801296c:	4618      	mov	r0, r3
 801296e:	f7fe fdbf 	bl	80114f0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012974:	330b      	adds	r3, #11
 8012976:	2210      	movs	r2, #16
 8012978:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2201      	movs	r2, #1
 801297e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012984:	2b00      	cmp	r3, #0
 8012986:	d10e      	bne.n	80129a6 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	4618      	mov	r0, r3
 801298c:	f7fe f840 	bl	8010a10 <sync_fs>
 8012990:	4603      	mov	r3, r0
 8012992:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012996:	e006      	b.n	80129a6 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012998:	f107 030c 	add.w	r3, r7, #12
 801299c:	2200      	movs	r2, #0
 801299e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fe faab 	bl	8010efc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80129a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3758      	adds	r7, #88	; 0x58
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b087      	sub	sp, #28
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	4613      	mov	r3, r2
 80129c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80129c2:	2301      	movs	r3, #1
 80129c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80129ca:	4b1f      	ldr	r3, [pc, #124]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129cc:	7a5b      	ldrb	r3, [r3, #9]
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d131      	bne.n	8012a38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80129d4:	4b1c      	ldr	r3, [pc, #112]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129d6:	7a5b      	ldrb	r3, [r3, #9]
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	461a      	mov	r2, r3
 80129dc:	4b1a      	ldr	r3, [pc, #104]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129de:	2100      	movs	r1, #0
 80129e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80129e2:	4b19      	ldr	r3, [pc, #100]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129e4:	7a5b      	ldrb	r3, [r3, #9]
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	4a17      	ldr	r2, [pc, #92]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80129f2:	4b15      	ldr	r3, [pc, #84]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129f4:	7a5b      	ldrb	r3, [r3, #9]
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	461a      	mov	r2, r3
 80129fa:	4b13      	ldr	r3, [pc, #76]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 80129fc:	4413      	add	r3, r2
 80129fe:	79fa      	ldrb	r2, [r7, #7]
 8012a00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012a02:	4b11      	ldr	r3, [pc, #68]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 8012a04:	7a5b      	ldrb	r3, [r3, #9]
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	1c5a      	adds	r2, r3, #1
 8012a0a:	b2d1      	uxtb	r1, r2
 8012a0c:	4a0e      	ldr	r2, [pc, #56]	; (8012a48 <FATFS_LinkDriverEx+0x94>)
 8012a0e:	7251      	strb	r1, [r2, #9]
 8012a10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012a12:	7dbb      	ldrb	r3, [r7, #22]
 8012a14:	3330      	adds	r3, #48	; 0x30
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	223a      	movs	r2, #58	; 0x3a
 8012a22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	3302      	adds	r3, #2
 8012a28:	222f      	movs	r2, #47	; 0x2f
 8012a2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	3303      	adds	r3, #3
 8012a30:	2200      	movs	r2, #0
 8012a32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012a34:	2300      	movs	r3, #0
 8012a36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	371c      	adds	r7, #28
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
 8012a46:	bf00      	nop
 8012a48:	20000b90 	.word	0x20000b90

08012a4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012a56:	2200      	movs	r2, #0
 8012a58:	6839      	ldr	r1, [r7, #0]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7ff ffaa 	bl	80129b4 <FATFS_LinkDriverEx>
 8012a60:	4603      	mov	r3, r0
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3708      	adds	r7, #8
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
	...

08012a6c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b085      	sub	sp, #20
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	460b      	mov	r3, r1
 8012a76:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8012a80:	4b15      	ldr	r3, [pc, #84]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012a82:	7a5b      	ldrb	r3, [r3, #9]
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d01e      	beq.n	8012ac8 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	3b30      	subs	r3, #48	; 0x30
 8012a90:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8012a92:	7bbb      	ldrb	r3, [r7, #14]
 8012a94:	4a10      	ldr	r2, [pc, #64]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d013      	beq.n	8012ac8 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8012aa0:	7bbb      	ldrb	r3, [r7, #14]
 8012aa2:	4a0d      	ldr	r2, [pc, #52]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4413      	add	r3, r2
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8012aac:	7bbb      	ldrb	r3, [r7, #14]
 8012aae:	4a0a      	ldr	r2, [pc, #40]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012ab0:	4413      	add	r3, r2
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8012ab6:	4b08      	ldr	r3, [pc, #32]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012ab8:	7a5b      	ldrb	r3, [r3, #9]
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	3b01      	subs	r3, #1
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	4b05      	ldr	r3, [pc, #20]	; (8012ad8 <FATFS_UnLinkDriverEx+0x6c>)
 8012ac2:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3714      	adds	r7, #20
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	20000b90 	.word	0x20000b90

08012adc <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff ffc0 	bl	8012a6c <FATFS_UnLinkDriverEx>
 8012aec:	4603      	mov	r3, r0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
	...

08012af8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012afe:	2300      	movs	r3, #0
 8012b00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012b02:	f000 f896 	bl	8012c32 <BSP_SD_IsDetected>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d001      	beq.n	8012b10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	e012      	b.n	8012b36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012b10:	480b      	ldr	r0, [pc, #44]	; (8012b40 <BSP_SD_Init+0x48>)
 8012b12:	f7f7 f97d 	bl	8009e10 <HAL_SD_Init>
 8012b16:	4603      	mov	r3, r0
 8012b18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d109      	bne.n	8012b34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012b24:	4806      	ldr	r0, [pc, #24]	; (8012b40 <BSP_SD_Init+0x48>)
 8012b26:	f7f7 ff58 	bl	800a9da <HAL_SD_ConfigWideBusOperation>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d001      	beq.n	8012b34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012b30:	2301      	movs	r3, #1
 8012b32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012b34:	79fb      	ldrb	r3, [r7, #7]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	20009bc0 	.word	0x20009bc0

08012b44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012b50:	2300      	movs	r3, #0
 8012b52:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	68ba      	ldr	r2, [r7, #8]
 8012b58:	68f9      	ldr	r1, [r7, #12]
 8012b5a:	4806      	ldr	r0, [pc, #24]	; (8012b74 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012b5c:	f7f7 f9e0 	bl	8009f20 <HAL_SD_ReadBlocks_DMA>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d001      	beq.n	8012b6a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012b66:	2301      	movs	r3, #1
 8012b68:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	20009bc0 	.word	0x20009bc0

08012b78 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012b84:	2300      	movs	r3, #0
 8012b86:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	68ba      	ldr	r2, [r7, #8]
 8012b8c:	68f9      	ldr	r1, [r7, #12]
 8012b8e:	4806      	ldr	r0, [pc, #24]	; (8012ba8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012b90:	f7f7 fa92 	bl	800a0b8 <HAL_SD_WriteBlocks_DMA>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3718      	adds	r7, #24
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	20009bc0 	.word	0x20009bc0

08012bac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012bb0:	4805      	ldr	r0, [pc, #20]	; (8012bc8 <BSP_SD_GetCardState+0x1c>)
 8012bb2:	f7f7 ff8e 	bl	800aad2 <HAL_SD_GetCardState>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	2b04      	cmp	r3, #4
 8012bba:	bf14      	ite	ne
 8012bbc:	2301      	movne	r3, #1
 8012bbe:	2300      	moveq	r3, #0
 8012bc0:	b2db      	uxtb	r3, r3
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	20009bc0 	.word	0x20009bc0

08012bcc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012bd4:	6879      	ldr	r1, [r7, #4]
 8012bd6:	4803      	ldr	r0, [pc, #12]	; (8012be4 <BSP_SD_GetCardInfo+0x18>)
 8012bd8:	f7f7 fed3 	bl	800a982 <HAL_SD_GetCardInfo>
}
 8012bdc:	bf00      	nop
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	20009bc0 	.word	0x20009bc0

08012be8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012bf0:	f000 f818 	bl	8012c24 <BSP_SD_AbortCallback>
}
 8012bf4:	bf00      	nop
 8012bf6:	3708      	adds	r7, #8
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012c04:	f002 fffc 	bl	8015c00 <BSP_SD_WriteCpltCallback>
}
 8012c08:	bf00      	nop
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012c18:	f002 fffe 	bl	8015c18 <BSP_SD_ReadCpltCallback>
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012c24:	b480      	push	{r7}
 8012c26:	af00      	add	r7, sp, #0

}
 8012c28:	bf00      	nop
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr

08012c32 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8012c32:	b580      	push	{r7, lr}
 8012c34:	b082      	sub	sp, #8
 8012c36:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8012c3c:	f000 f826 	bl	8012c8c <BSP_PlatformIsDetected>
 8012c40:	4603      	mov	r3, r0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012c46:	2300      	movs	r3, #0
 8012c48:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012c4a:	79fb      	ldrb	r3, [r7, #7]
 8012c4c:	b2db      	uxtb	r3, r3
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012c5c:	4904      	ldr	r1, [pc, #16]	; (8012c70 <MX_FATFS_Init+0x18>)
 8012c5e:	4805      	ldr	r0, [pc, #20]	; (8012c74 <MX_FATFS_Init+0x1c>)
 8012c60:	f7ff fef4 	bl	8012a4c <FATFS_LinkDriver>
 8012c64:	4603      	mov	r3, r0
 8012c66:	461a      	mov	r2, r3
 8012c68:	4b03      	ldr	r3, [pc, #12]	; (8012c78 <MX_FATFS_Init+0x20>)
 8012c6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012c6c:	bf00      	nop
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	20007910 	.word	0x20007910
 8012c74:	0801e430 	.word	0x0801e430
 8012c78:	2000790c 	.word	0x2000790c

08012c7c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012c80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012c92:	2301      	movs	r3, #1
 8012c94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012c9a:	4806      	ldr	r0, [pc, #24]	; (8012cb4 <BSP_PlatformIsDetected+0x28>)
 8012c9c:	f7f4 f8e0 	bl	8006e60 <HAL_GPIO_ReadPin>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d001      	beq.n	8012caa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012caa:	79fb      	ldrb	r3, [r7, #7]
}  
 8012cac:	4618      	mov	r0, r3
 8012cae:	3708      	adds	r7, #8
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	40020000 	.word	0x40020000

08012cb8 <micros>:
 8012cb8:	b480      	push	{r7}
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8012ccc:	b480      	push	{r7}
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd6:	4a04      	ldr	r2, [pc, #16]	; (8012ce8 <millis+0x1c>)
 8012cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8012cdc:	099b      	lsrs	r3, r3, #6
 8012cde:	4618      	mov	r0, r3
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr
 8012ce8:	10624dd3 	.word	0x10624dd3

08012cec <getTime>:
	
	return true;
}

static inline DateTime getTime(void)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b08c      	sub	sp, #48	; 0x30
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8012cf4:	f107 031c 	add.w	r3, r7, #28
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	601a      	str	r2, [r3, #0]
 8012cfc:	605a      	str	r2, [r3, #4]
 8012cfe:	609a      	str	r2, [r3, #8]
 8012d00:	60da      	str	r2, [r3, #12]
 8012d02:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8012d04:	2300      	movs	r3, #0
 8012d06:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8012d08:	f107 030c 	add.w	r3, r7, #12
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	601a      	str	r2, [r3, #0]
 8012d10:	605a      	str	r2, [r3, #4]
 8012d12:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8012d14:	f002 fd4c 	bl	80157b0 <Get_RTC_Instance>
 8012d18:	f107 031c 	add.w	r3, r7, #28
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	4619      	mov	r1, r3
 8012d20:	f7f6 ff57 	bl	8009bd2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8012d24:	f002 fd44 	bl	80157b0 <Get_RTC_Instance>
 8012d28:	f107 0318 	add.w	r3, r7, #24
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	4619      	mov	r1, r3
 8012d30:	f7f6 ffad 	bl	8009c8e <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8012d34:	7efb      	ldrb	r3, [r7, #27]
 8012d36:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8012d38:	7e7b      	ldrb	r3, [r7, #25]
 8012d3a:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8012d3c:	7ebb      	ldrb	r3, [r7, #26]
 8012d3e:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8012d40:	7e3b      	ldrb	r3, [r7, #24]
 8012d42:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8012d44:	7f3b      	ldrb	r3, [r7, #28]
 8012d46:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8012d48:	7f7b      	ldrb	r3, [r7, #29]
 8012d4a:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8012d4c:	7fbb      	ldrb	r3, [r7, #30]
 8012d4e:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8012d50:	f7ff ffbc 	bl	8012ccc <millis>
 8012d54:	4602      	mov	r2, r0
 8012d56:	4b0c      	ldr	r3, [pc, #48]	; (8012d88 <getTime+0x9c>)
 8012d58:	fba3 1302 	umull	r1, r3, r3, r2
 8012d5c:	099b      	lsrs	r3, r3, #6
 8012d5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012d62:	fb01 f303 	mul.w	r3, r1, r3
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	461a      	mov	r2, r3
 8012d70:	f107 030c 	add.w	r3, r7, #12
 8012d74:	cb03      	ldmia	r3!, {r0, r1}
 8012d76:	6010      	str	r0, [r2, #0]
 8012d78:	6051      	str	r1, [r2, #4]
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	8113      	strh	r3, [r2, #8]
}
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	3730      	adds	r7, #48	; 0x30
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	10624dd3 	.word	0x10624dd3

08012d8c <println>:
{
 8012d8c:	b40f      	push	{r0, r1, r2, r3}
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b084      	sub	sp, #16
 8012d92:	af00      	add	r7, sp, #0
	if (usbPresent)
 8012d94:	4b29      	ldr	r3, [pc, #164]	; (8012e3c <println+0xb0>)
 8012d96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d145      	bne.n	8012e2a <println+0x9e>
		writePin(LEDD, HIGH);
 8012d9e:	2201      	movs	r2, #1
 8012da0:	2108      	movs	r1, #8
 8012da2:	4827      	ldr	r0, [pc, #156]	; (8012e40 <println+0xb4>)
 8012da4:	f7f4 f874 	bl	8006e90 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8012da8:	f107 031c 	add.w	r3, r7, #28
 8012dac:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	69b9      	ldr	r1, [r7, #24]
 8012db2:	4824      	ldr	r0, [pc, #144]	; (8012e44 <println+0xb8>)
 8012db4:	f005 fee6 	bl	8018b84 <vsiprintf>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	4b22      	ldr	r3, [pc, #136]	; (8012e48 <println+0xbc>)
 8012dbe:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8012dc0:	4b21      	ldr	r3, [pc, #132]	; (8012e48 <println+0xbc>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a1f      	ldr	r2, [pc, #124]	; (8012e44 <println+0xb8>)
 8012dc6:	210d      	movs	r1, #13
 8012dc8:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8012dca:	4b1f      	ldr	r3, [pc, #124]	; (8012e48 <println+0xbc>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	4a1c      	ldr	r2, [pc, #112]	; (8012e44 <println+0xb8>)
 8012dd2:	210a      	movs	r1, #10
 8012dd4:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8012dd6:	4b1c      	ldr	r3, [pc, #112]	; (8012e48 <println+0xbc>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	3302      	adds	r3, #2
 8012ddc:	4a19      	ldr	r2, [pc, #100]	; (8012e44 <println+0xb8>)
 8012dde:	2100      	movs	r1, #0
 8012de0:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8012de2:	4b19      	ldr	r3, [pc, #100]	; (8012e48 <println+0xbc>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	3303      	adds	r3, #3
 8012de8:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <println+0xbc>)
 8012dea:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8012dec:	f7ff ff64 	bl	8012cb8 <micros>
 8012df0:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8012df2:	4b15      	ldr	r3, [pc, #84]	; (8012e48 <println+0xbc>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	4613      	mov	r3, r2
 8012df8:	009b      	lsls	r3, r3, #2
 8012dfa:	4413      	add	r3, r2
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	3346      	adds	r3, #70	; 0x46
 8012e00:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8012e02:	e001      	b.n	8012e08 <println+0x7c>
			if (micros() - printStart > timeout && false)
 8012e04:	f7ff ff58 	bl	8012cb8 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8012e08:	4b0f      	ldr	r3, [pc, #60]	; (8012e48 <println+0xbc>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	4619      	mov	r1, r3
 8012e10:	480c      	ldr	r0, [pc, #48]	; (8012e44 <println+0xb8>)
 8012e12:	f003 fbab 	bl	801656c <CDC_Transmit_FS>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d0f3      	beq.n	8012e04 <println+0x78>
		writePin(LEDD, LOW);
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	2108      	movs	r1, #8
 8012e20:	4807      	ldr	r0, [pc, #28]	; (8012e40 <println+0xb4>)
 8012e22:	f7f4 f835 	bl	8006e90 <HAL_GPIO_WritePin>
		return true;
 8012e26:	2301      	movs	r3, #1
 8012e28:	e000      	b.n	8012e2c <println+0xa0>
	return false;
 8012e2a:	2300      	movs	r3, #0
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3710      	adds	r7, #16
 8012e30:	46bd      	mov	sp, r7
 8012e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e36:	b004      	add	sp, #16
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	20001538 	.word	0x20001538
 8012e40:	40020800 	.word	0x40020800
 8012e44:	20001124 	.word	0x20001124
 8012e48:	20001120 	.word	0x20001120

08012e4c <floatToBytes>:
			now.dayM, now.month, now.year,
			now.hour, now.minute, now.second, now.msecond);
}

// ############### Useful #################
static inline void floatToBytes(float* value, uint8_t* buffer) { for (uint8_t i = 0; i < 4; i++) buffer[i] = *((uint8_t*)(value) + i); }
 8012e4c:	b480      	push	{r7}
 8012e4e:	b085      	sub	sp, #20
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
 8012e56:	2300      	movs	r3, #0
 8012e58:	73fb      	strb	r3, [r7, #15]
 8012e5a:	e00a      	b.n	8012e72 <floatToBytes+0x26>
 8012e5c:	7bfb      	ldrb	r3, [r7, #15]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	441a      	add	r2, r3
 8012e62:	7bfb      	ldrb	r3, [r7, #15]
 8012e64:	6839      	ldr	r1, [r7, #0]
 8012e66:	440b      	add	r3, r1
 8012e68:	7812      	ldrb	r2, [r2, #0]
 8012e6a:	701a      	strb	r2, [r3, #0]
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	73fb      	strb	r3, [r7, #15]
 8012e72:	7bfb      	ldrb	r3, [r7, #15]
 8012e74:	2b03      	cmp	r3, #3
 8012e76:	d9f1      	bls.n	8012e5c <floatToBytes+0x10>
 8012e78:	bf00      	nop
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <bytesToFloat>:
static inline void bytesToFloat(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + i) = buffer[i]; }
 8012e84:	b480      	push	{r7}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
 8012e8e:	2300      	movs	r3, #0
 8012e90:	73fb      	strb	r3, [r7, #15]
 8012e92:	e00a      	b.n	8012eaa <bytesToFloat+0x26>
 8012e94:	7bfb      	ldrb	r3, [r7, #15]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	441a      	add	r2, r3
 8012e9a:	7bfb      	ldrb	r3, [r7, #15]
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	440b      	add	r3, r1
 8012ea0:	7812      	ldrb	r2, [r2, #0]
 8012ea2:	701a      	strb	r2, [r3, #0]
 8012ea4:	7bfb      	ldrb	r3, [r7, #15]
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	73fb      	strb	r3, [r7, #15]
 8012eaa:	7bfb      	ldrb	r3, [r7, #15]
 8012eac:	2b03      	cmp	r3, #3
 8012eae:	d9f1      	bls.n	8012e94 <bytesToFloat+0x10>
 8012eb0:	bf00      	nop
 8012eb2:	3714      	adds	r7, #20
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <log_print_dummy>:

//void log_new();
char logBuffer[4096];
uint16_t logBufferIndex;
//void log_print(const char* format, ...);
static void log_print_dummy(const char* format, ...) { return; }
 8012ebc:	b40f      	push	{r0, r1, r2, r3}
 8012ebe:	b480      	push	{r7}
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	bf00      	nop
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	b004      	add	sp, #16
 8012ecc:	4770      	bx	lr
	...

08012ed0 <log_new>:
uint32_t lastMotLog;
uint32_t lastTargetYawLog;


static void log_new()
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b086      	sub	sp, #24
 8012ed4:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8012ed6:	1d3b      	adds	r3, r7, #4
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff ff07 	bl	8012cec <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 8012ede:	7a3b      	ldrb	r3, [r7, #8]
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	7a7b      	ldrb	r3, [r7, #9]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	79bb      	ldrb	r3, [r7, #6]
 8012ee8:	797a      	ldrb	r2, [r7, #5]
 8012eea:	9201      	str	r2, [sp, #4]
 8012eec:	9300      	str	r3, [sp, #0]
 8012eee:	4603      	mov	r3, r0
 8012ef0:	460a      	mov	r2, r1
 8012ef2:	4957      	ldr	r1, [pc, #348]	; (8013050 <log_new+0x180>)
 8012ef4:	4857      	ldr	r0, [pc, #348]	; (8013054 <log_new+0x184>)
 8012ef6:	f004 feeb 	bl	8017cd0 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 8012efa:	4956      	ldr	r1, [pc, #344]	; (8013054 <log_new+0x184>)
 8012efc:	4856      	ldr	r0, [pc, #344]	; (8013058 <log_new+0x188>)
 8012efe:	f004 fee7 	bl	8017cd0 <siprintf>

	SD_init();
 8012f02:	f7ee f979 	bl	80011f8 <SD_init>
	SD_newDirectory((char*)directoryName);
 8012f06:	4853      	ldr	r0, [pc, #332]	; (8013054 <log_new+0x184>)
 8012f08:	f7ee fa12 	bl	8001330 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8012f0c:	4851      	ldr	r0, [pc, #324]	; (8013054 <log_new+0x184>)
 8012f0e:	f7ed f969 	bl	80001e4 <strlen>
 8012f12:	4603      	mov	r3, r0
 8012f14:	461a      	mov	r2, r3
 8012f16:	4b4f      	ldr	r3, [pc, #316]	; (8013054 <log_new+0x184>)
 8012f18:	4413      	add	r3, r2
 8012f1a:	4950      	ldr	r1, [pc, #320]	; (801305c <log_new+0x18c>)
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	460b      	mov	r3, r1
 8012f20:	cb03      	ldmia	r3!, {r0, r1}
 8012f22:	6010      	str	r0, [r2, #0]
 8012f24:	6051      	str	r1, [r2, #4]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	7213      	strb	r3, [r2, #8]
 8012f2a:	4b4a      	ldr	r3, [pc, #296]	; (8013054 <log_new+0x184>)
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7ee f99f 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8012f32:	4949      	ldr	r1, [pc, #292]	; (8013058 <log_new+0x188>)
 8012f34:	4847      	ldr	r0, [pc, #284]	; (8013054 <log_new+0x184>)
 8012f36:	f004 fecb 	bl	8017cd0 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8012f3a:	4846      	ldr	r0, [pc, #280]	; (8013054 <log_new+0x184>)
 8012f3c:	f7ed f952 	bl	80001e4 <strlen>
 8012f40:	4603      	mov	r3, r0
 8012f42:	461a      	mov	r2, r3
 8012f44:	4b43      	ldr	r3, [pc, #268]	; (8013054 <log_new+0x184>)
 8012f46:	4413      	add	r3, r2
 8012f48:	4945      	ldr	r1, [pc, #276]	; (8013060 <log_new+0x190>)
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	cb03      	ldmia	r3!, {r0, r1}
 8012f50:	6010      	str	r0, [r2, #0]
 8012f52:	6051      	str	r1, [r2, #4]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	7213      	strb	r3, [r2, #8]
 8012f58:	4b3e      	ldr	r3, [pc, #248]	; (8013054 <log_new+0x184>)
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ee f988 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8012f60:	493d      	ldr	r1, [pc, #244]	; (8013058 <log_new+0x188>)
 8012f62:	483c      	ldr	r0, [pc, #240]	; (8013054 <log_new+0x184>)
 8012f64:	f004 feb4 	bl	8017cd0 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8012f68:	483a      	ldr	r0, [pc, #232]	; (8013054 <log_new+0x184>)
 8012f6a:	f7ed f93b 	bl	80001e4 <strlen>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	461a      	mov	r2, r3
 8012f72:	4b38      	ldr	r3, [pc, #224]	; (8013054 <log_new+0x184>)
 8012f74:	4413      	add	r3, r2
 8012f76:	493b      	ldr	r1, [pc, #236]	; (8013064 <log_new+0x194>)
 8012f78:	461a      	mov	r2, r3
 8012f7a:	460b      	mov	r3, r1
 8012f7c:	cb03      	ldmia	r3!, {r0, r1}
 8012f7e:	6010      	str	r0, [r2, #0]
 8012f80:	6051      	str	r1, [r2, #4]
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	7213      	strb	r3, [r2, #8]
 8012f86:	4b33      	ldr	r3, [pc, #204]	; (8013054 <log_new+0x184>)
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7ee f971 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8012f8e:	4932      	ldr	r1, [pc, #200]	; (8013058 <log_new+0x188>)
 8012f90:	4830      	ldr	r0, [pc, #192]	; (8013054 <log_new+0x184>)
 8012f92:	f004 fe9d 	bl	8017cd0 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8012f96:	482f      	ldr	r0, [pc, #188]	; (8013054 <log_new+0x184>)
 8012f98:	f7ed f924 	bl	80001e4 <strlen>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	4b2c      	ldr	r3, [pc, #176]	; (8013054 <log_new+0x184>)
 8012fa2:	4413      	add	r3, r2
 8012fa4:	4930      	ldr	r1, [pc, #192]	; (8013068 <log_new+0x198>)
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	460b      	mov	r3, r1
 8012faa:	cb03      	ldmia	r3!, {r0, r1}
 8012fac:	6010      	str	r0, [r2, #0]
 8012fae:	6051      	str	r1, [r2, #4]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	7213      	strb	r3, [r2, #8]
 8012fb4:	4b27      	ldr	r3, [pc, #156]	; (8013054 <log_new+0x184>)
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ee f95a 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8012fbc:	4926      	ldr	r1, [pc, #152]	; (8013058 <log_new+0x188>)
 8012fbe:	4825      	ldr	r0, [pc, #148]	; (8013054 <log_new+0x184>)
 8012fc0:	f004 fe86 	bl	8017cd0 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8012fc4:	4823      	ldr	r0, [pc, #140]	; (8013054 <log_new+0x184>)
 8012fc6:	f7ed f90d 	bl	80001e4 <strlen>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	461a      	mov	r2, r3
 8012fce:	4b21      	ldr	r3, [pc, #132]	; (8013054 <log_new+0x184>)
 8012fd0:	4413      	add	r3, r2
 8012fd2:	4926      	ldr	r1, [pc, #152]	; (801306c <log_new+0x19c>)
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	cb03      	ldmia	r3!, {r0, r1}
 8012fda:	6010      	str	r0, [r2, #0]
 8012fdc:	6051      	str	r1, [r2, #4]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	7213      	strb	r3, [r2, #8]
 8012fe2:	4b1c      	ldr	r3, [pc, #112]	; (8013054 <log_new+0x184>)
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ee f943 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8012fea:	491b      	ldr	r1, [pc, #108]	; (8013058 <log_new+0x188>)
 8012fec:	4819      	ldr	r0, [pc, #100]	; (8013054 <log_new+0x184>)
 8012fee:	f004 fe6f 	bl	8017cd0 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 8012ff2:	4818      	ldr	r0, [pc, #96]	; (8013054 <log_new+0x184>)
 8012ff4:	f7ed f8f6 	bl	80001e4 <strlen>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	4b15      	ldr	r3, [pc, #84]	; (8013054 <log_new+0x184>)
 8012ffe:	4413      	add	r3, r2
 8013000:	491b      	ldr	r1, [pc, #108]	; (8013070 <log_new+0x1a0>)
 8013002:	461a      	mov	r2, r3
 8013004:	460b      	mov	r3, r1
 8013006:	cb03      	ldmia	r3!, {r0, r1}
 8013008:	6010      	str	r0, [r2, #0]
 801300a:	6051      	str	r1, [r2, #4]
 801300c:	8819      	ldrh	r1, [r3, #0]
 801300e:	789b      	ldrb	r3, [r3, #2]
 8013010:	8111      	strh	r1, [r2, #8]
 8013012:	7293      	strb	r3, [r2, #10]
 8013014:	4b0f      	ldr	r3, [pc, #60]	; (8013054 <log_new+0x184>)
 8013016:	4618      	mov	r0, r3
 8013018:	f7ee f92a 	bl	8001270 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 801301c:	490e      	ldr	r1, [pc, #56]	; (8013058 <log_new+0x188>)
 801301e:	480d      	ldr	r0, [pc, #52]	; (8013054 <log_new+0x184>)
 8013020:	f004 fe56 	bl	8017cd0 <siprintf>

	logBufferIndex = 0;
 8013024:	4b13      	ldr	r3, [pc, #76]	; (8013074 <log_new+0x1a4>)
 8013026:	2200      	movs	r2, #0
 8013028:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 801302a:	4b13      	ldr	r3, [pc, #76]	; (8013078 <log_new+0x1a8>)
 801302c:	2200      	movs	r2, #0
 801302e:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8013030:	4b12      	ldr	r3, [pc, #72]	; (801307c <log_new+0x1ac>)
 8013032:	2200      	movs	r2, #0
 8013034:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8013036:	4b12      	ldr	r3, [pc, #72]	; (8013080 <log_new+0x1b0>)
 8013038:	2200      	movs	r2, #0
 801303a:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 801303c:	4b11      	ldr	r3, [pc, #68]	; (8013084 <log_new+0x1b4>)
 801303e:	2200      	movs	r2, #0
 8013040:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8013042:	4b11      	ldr	r3, [pc, #68]	; (8013088 <log_new+0x1b8>)
 8013044:	2200      	movs	r2, #0
 8013046:	801a      	strh	r2, [r3, #0]
}
 8013048:	bf00      	nop
 801304a:	3710      	adds	r7, #16
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	0801d9e0 	.word	0x0801d9e0
 8013054:	200074b4 	.word	0x200074b4
 8013058:	20004844 	.word	0x20004844
 801305c:	0801d9f4 	.word	0x0801d9f4
 8013060:	0801da00 	.word	0x0801da00
 8013064:	0801da0c 	.word	0x0801da0c
 8013068:	0801da18 	.word	0x0801da18
 801306c:	0801da24 	.word	0x0801da24
 8013070:	0801da30 	.word	0x0801da30
 8013074:	200074e2 	.word	0x200074e2
 8013078:	200074e0 	.word	0x200074e0
 801307c:	200054b0 	.word	0x200054b0
 8013080:	200074e6 	.word	0x200074e6
 8013084:	200050ac 	.word	0x200050ac
 8013088:	20005084 	.word	0x20005084

0801308c <log_save>:
static void log_save()
{
 801308c:	b580      	push	{r7, lr}
 801308e:	af00      	add	r7, sp, #0
	//__disable_irq();
	if (logBufferIndex > 0)
 8013090:	4b7c      	ldr	r3, [pc, #496]	; (8013284 <log_save+0x1f8>)
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d01b      	beq.n	80130d0 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8013098:	487b      	ldr	r0, [pc, #492]	; (8013288 <log_save+0x1fc>)
 801309a:	f7ed f8a3 	bl	80001e4 <strlen>
 801309e:	4603      	mov	r3, r0
 80130a0:	461a      	mov	r2, r3
 80130a2:	4b79      	ldr	r3, [pc, #484]	; (8013288 <log_save+0x1fc>)
 80130a4:	4413      	add	r3, r2
 80130a6:	4979      	ldr	r1, [pc, #484]	; (801328c <log_save+0x200>)
 80130a8:	461a      	mov	r2, r3
 80130aa:	460b      	mov	r3, r1
 80130ac:	cb03      	ldmia	r3!, {r0, r1}
 80130ae:	6010      	str	r0, [r2, #0]
 80130b0:	6051      	str	r1, [r2, #4]
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	7213      	strb	r3, [r2, #8]
 80130b6:	4b74      	ldr	r3, [pc, #464]	; (8013288 <log_save+0x1fc>)
 80130b8:	4619      	mov	r1, r3
 80130ba:	4875      	ldr	r0, [pc, #468]	; (8013290 <log_save+0x204>)
 80130bc:	f004 fe08 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80130c0:	4974      	ldr	r1, [pc, #464]	; (8013294 <log_save+0x208>)
 80130c2:	4871      	ldr	r0, [pc, #452]	; (8013288 <log_save+0x1fc>)
 80130c4:	f004 fe04 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 80130c8:	4973      	ldr	r1, [pc, #460]	; (8013298 <log_save+0x20c>)
 80130ca:	4871      	ldr	r0, [pc, #452]	; (8013290 <log_save+0x204>)
 80130cc:	f7ee f8f8 	bl	80012c0 <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 80130d0:	4b72      	ldr	r3, [pc, #456]	; (801329c <log_save+0x210>)
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d01b      	beq.n	8013110 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 80130d8:	486b      	ldr	r0, [pc, #428]	; (8013288 <log_save+0x1fc>)
 80130da:	f7ed f883 	bl	80001e4 <strlen>
 80130de:	4603      	mov	r3, r0
 80130e0:	461a      	mov	r2, r3
 80130e2:	4b69      	ldr	r3, [pc, #420]	; (8013288 <log_save+0x1fc>)
 80130e4:	4413      	add	r3, r2
 80130e6:	496e      	ldr	r1, [pc, #440]	; (80132a0 <log_save+0x214>)
 80130e8:	461a      	mov	r2, r3
 80130ea:	460b      	mov	r3, r1
 80130ec:	cb03      	ldmia	r3!, {r0, r1}
 80130ee:	6010      	str	r0, [r2, #0]
 80130f0:	6051      	str	r1, [r2, #4]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	7213      	strb	r3, [r2, #8]
 80130f6:	4b64      	ldr	r3, [pc, #400]	; (8013288 <log_save+0x1fc>)
 80130f8:	4619      	mov	r1, r3
 80130fa:	4865      	ldr	r0, [pc, #404]	; (8013290 <log_save+0x204>)
 80130fc:	f004 fde8 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8013100:	4964      	ldr	r1, [pc, #400]	; (8013294 <log_save+0x208>)
 8013102:	4861      	ldr	r0, [pc, #388]	; (8013288 <log_save+0x1fc>)
 8013104:	f004 fde4 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 8013108:	4966      	ldr	r1, [pc, #408]	; (80132a4 <log_save+0x218>)
 801310a:	4861      	ldr	r0, [pc, #388]	; (8013290 <log_save+0x204>)
 801310c:	f7ee f8d8 	bl	80012c0 <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 8013110:	4b65      	ldr	r3, [pc, #404]	; (80132a8 <log_save+0x21c>)
 8013112:	881b      	ldrh	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d01b      	beq.n	8013150 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 8013118:	485b      	ldr	r0, [pc, #364]	; (8013288 <log_save+0x1fc>)
 801311a:	f7ed f863 	bl	80001e4 <strlen>
 801311e:	4603      	mov	r3, r0
 8013120:	461a      	mov	r2, r3
 8013122:	4b59      	ldr	r3, [pc, #356]	; (8013288 <log_save+0x1fc>)
 8013124:	4413      	add	r3, r2
 8013126:	4961      	ldr	r1, [pc, #388]	; (80132ac <log_save+0x220>)
 8013128:	461a      	mov	r2, r3
 801312a:	460b      	mov	r3, r1
 801312c:	cb03      	ldmia	r3!, {r0, r1}
 801312e:	6010      	str	r0, [r2, #0]
 8013130:	6051      	str	r1, [r2, #4]
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	7213      	strb	r3, [r2, #8]
 8013136:	4b54      	ldr	r3, [pc, #336]	; (8013288 <log_save+0x1fc>)
 8013138:	4619      	mov	r1, r3
 801313a:	4855      	ldr	r0, [pc, #340]	; (8013290 <log_save+0x204>)
 801313c:	f004 fdc8 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8013140:	4954      	ldr	r1, [pc, #336]	; (8013294 <log_save+0x208>)
 8013142:	4851      	ldr	r0, [pc, #324]	; (8013288 <log_save+0x1fc>)
 8013144:	f004 fdc4 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 8013148:	4959      	ldr	r1, [pc, #356]	; (80132b0 <log_save+0x224>)
 801314a:	4851      	ldr	r0, [pc, #324]	; (8013290 <log_save+0x204>)
 801314c:	f7ee f8b8 	bl	80012c0 <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 8013150:	4b58      	ldr	r3, [pc, #352]	; (80132b4 <log_save+0x228>)
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d01b      	beq.n	8013190 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8013158:	484b      	ldr	r0, [pc, #300]	; (8013288 <log_save+0x1fc>)
 801315a:	f7ed f843 	bl	80001e4 <strlen>
 801315e:	4603      	mov	r3, r0
 8013160:	461a      	mov	r2, r3
 8013162:	4b49      	ldr	r3, [pc, #292]	; (8013288 <log_save+0x1fc>)
 8013164:	4413      	add	r3, r2
 8013166:	4954      	ldr	r1, [pc, #336]	; (80132b8 <log_save+0x22c>)
 8013168:	461a      	mov	r2, r3
 801316a:	460b      	mov	r3, r1
 801316c:	cb03      	ldmia	r3!, {r0, r1}
 801316e:	6010      	str	r0, [r2, #0]
 8013170:	6051      	str	r1, [r2, #4]
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	7213      	strb	r3, [r2, #8]
 8013176:	4b44      	ldr	r3, [pc, #272]	; (8013288 <log_save+0x1fc>)
 8013178:	4619      	mov	r1, r3
 801317a:	4845      	ldr	r0, [pc, #276]	; (8013290 <log_save+0x204>)
 801317c:	f004 fda8 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8013180:	4944      	ldr	r1, [pc, #272]	; (8013294 <log_save+0x208>)
 8013182:	4841      	ldr	r0, [pc, #260]	; (8013288 <log_save+0x1fc>)
 8013184:	f004 fda4 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8013188:	494c      	ldr	r1, [pc, #304]	; (80132bc <log_save+0x230>)
 801318a:	4841      	ldr	r0, [pc, #260]	; (8013290 <log_save+0x204>)
 801318c:	f7ee f898 	bl	80012c0 <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8013190:	4b4b      	ldr	r3, [pc, #300]	; (80132c0 <log_save+0x234>)
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d01b      	beq.n	80131d0 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8013198:	483b      	ldr	r0, [pc, #236]	; (8013288 <log_save+0x1fc>)
 801319a:	f7ed f823 	bl	80001e4 <strlen>
 801319e:	4603      	mov	r3, r0
 80131a0:	461a      	mov	r2, r3
 80131a2:	4b39      	ldr	r3, [pc, #228]	; (8013288 <log_save+0x1fc>)
 80131a4:	4413      	add	r3, r2
 80131a6:	4947      	ldr	r1, [pc, #284]	; (80132c4 <log_save+0x238>)
 80131a8:	461a      	mov	r2, r3
 80131aa:	460b      	mov	r3, r1
 80131ac:	cb03      	ldmia	r3!, {r0, r1}
 80131ae:	6010      	str	r0, [r2, #0]
 80131b0:	6051      	str	r1, [r2, #4]
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	7213      	strb	r3, [r2, #8]
 80131b6:	4b34      	ldr	r3, [pc, #208]	; (8013288 <log_save+0x1fc>)
 80131b8:	4619      	mov	r1, r3
 80131ba:	4835      	ldr	r0, [pc, #212]	; (8013290 <log_save+0x204>)
 80131bc:	f004 fd88 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80131c0:	4934      	ldr	r1, [pc, #208]	; (8013294 <log_save+0x208>)
 80131c2:	4831      	ldr	r0, [pc, #196]	; (8013288 <log_save+0x1fc>)
 80131c4:	f004 fd84 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 80131c8:	493f      	ldr	r1, [pc, #252]	; (80132c8 <log_save+0x23c>)
 80131ca:	4831      	ldr	r0, [pc, #196]	; (8013290 <log_save+0x204>)
 80131cc:	f7ee f878 	bl	80012c0 <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 80131d0:	4b3e      	ldr	r3, [pc, #248]	; (80132cc <log_save+0x240>)
 80131d2:	881b      	ldrh	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d01d      	beq.n	8013214 <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 80131d8:	482b      	ldr	r0, [pc, #172]	; (8013288 <log_save+0x1fc>)
 80131da:	f7ed f803 	bl	80001e4 <strlen>
 80131de:	4603      	mov	r3, r0
 80131e0:	461a      	mov	r2, r3
 80131e2:	4b29      	ldr	r3, [pc, #164]	; (8013288 <log_save+0x1fc>)
 80131e4:	4413      	add	r3, r2
 80131e6:	493a      	ldr	r1, [pc, #232]	; (80132d0 <log_save+0x244>)
 80131e8:	461a      	mov	r2, r3
 80131ea:	460b      	mov	r3, r1
 80131ec:	cb03      	ldmia	r3!, {r0, r1}
 80131ee:	6010      	str	r0, [r2, #0]
 80131f0:	6051      	str	r1, [r2, #4]
 80131f2:	8819      	ldrh	r1, [r3, #0]
 80131f4:	789b      	ldrb	r3, [r3, #2]
 80131f6:	8111      	strh	r1, [r2, #8]
 80131f8:	7293      	strb	r3, [r2, #10]
 80131fa:	4b23      	ldr	r3, [pc, #140]	; (8013288 <log_save+0x1fc>)
 80131fc:	4619      	mov	r1, r3
 80131fe:	4824      	ldr	r0, [pc, #144]	; (8013290 <log_save+0x204>)
 8013200:	f004 fd66 	bl	8017cd0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8013204:	4923      	ldr	r1, [pc, #140]	; (8013294 <log_save+0x208>)
 8013206:	4820      	ldr	r0, [pc, #128]	; (8013288 <log_save+0x1fc>)
 8013208:	f004 fd62 	bl	8017cd0 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 801320c:	4931      	ldr	r1, [pc, #196]	; (80132d4 <log_save+0x248>)
 801320e:	4820      	ldr	r0, [pc, #128]	; (8013290 <log_save+0x204>)
 8013210:	f7ee f856 	bl	80012c0 <SD_writeToFile>
	}

	logBufferIndex = 0;
 8013214:	4b1b      	ldr	r3, [pc, #108]	; (8013284 <log_save+0x1f8>)
 8013216:	2200      	movs	r2, #0
 8013218:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 801321a:	4b20      	ldr	r3, [pc, #128]	; (801329c <log_save+0x210>)
 801321c:	2200      	movs	r2, #0
 801321e:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8013220:	4b21      	ldr	r3, [pc, #132]	; (80132a8 <log_save+0x21c>)
 8013222:	2200      	movs	r2, #0
 8013224:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8013226:	4b23      	ldr	r3, [pc, #140]	; (80132b4 <log_save+0x228>)
 8013228:	2200      	movs	r2, #0
 801322a:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 801322c:	4b24      	ldr	r3, [pc, #144]	; (80132c0 <log_save+0x234>)
 801322e:	2200      	movs	r2, #0
 8013230:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8013232:	4b26      	ldr	r3, [pc, #152]	; (80132cc <log_save+0x240>)
 8013234:	2200      	movs	r2, #0
 8013236:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 8013238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801323c:	2100      	movs	r1, #0
 801323e:	4816      	ldr	r0, [pc, #88]	; (8013298 <log_save+0x20c>)
 8013240:	f003 fe41 	bl	8016ec6 <memset>
	memset(bmpBuffer, 0x00, 1024);
 8013244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013248:	2100      	movs	r1, #0
 801324a:	4816      	ldr	r0, [pc, #88]	; (80132a4 <log_save+0x218>)
 801324c:	f003 fe3b 	bl	8016ec6 <memset>
	memset(gpsBuffer, 0x00, 1024);
 8013250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013254:	2100      	movs	r1, #0
 8013256:	4816      	ldr	r0, [pc, #88]	; (80132b0 <log_save+0x224>)
 8013258:	f003 fe35 	bl	8016ec6 <memset>
	memset(imuBuffer, 0x00, 1024);
 801325c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013260:	2100      	movs	r1, #0
 8013262:	4816      	ldr	r0, [pc, #88]	; (80132bc <log_save+0x230>)
 8013264:	f003 fe2f 	bl	8016ec6 <memset>
	memset(motBuffer, 0x00, 1024);
 8013268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801326c:	2100      	movs	r1, #0
 801326e:	4816      	ldr	r0, [pc, #88]	; (80132c8 <log_save+0x23c>)
 8013270:	f003 fe29 	bl	8016ec6 <memset>
	memset(radioBuffer, 0x00, 4096);
 8013274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013278:	2100      	movs	r1, #0
 801327a:	4816      	ldr	r0, [pc, #88]	; (80132d4 <log_save+0x248>)
 801327c:	f003 fe23 	bl	8016ec6 <memset>
}
 8013280:	bf00      	nop
 8013282:	bd80      	pop	{r7, pc}
 8013284:	200074e2 	.word	0x200074e2
 8013288:	200074b4 	.word	0x200074b4
 801328c:	0801d9f4 	.word	0x0801d9f4
 8013290:	20004c64 	.word	0x20004c64
 8013294:	20004844 	.word	0x20004844
 8013298:	200064b4 	.word	0x200064b4
 801329c:	200074e0 	.word	0x200074e0
 80132a0:	0801da00 	.word	0x0801da00
 80132a4:	200074ec 	.word	0x200074ec
 80132a8:	200054b0 	.word	0x200054b0
 80132ac:	0801da0c 	.word	0x0801da0c
 80132b0:	20004864 	.word	0x20004864
 80132b4:	200074e6 	.word	0x200074e6
 80132b8:	0801da18 	.word	0x0801da18
 80132bc:	200050b0 	.word	0x200050b0
 80132c0:	200050ac 	.word	0x200050ac
 80132c4:	0801da24 	.word	0x0801da24
 80132c8:	20004c84 	.word	0x20004c84
 80132cc:	20005084 	.word	0x20005084
 80132d0:	0801da30 	.word	0x0801da30
 80132d4:	20003844 	.word	0x20003844

080132d8 <log_print>:

static void log_print(const char* format, ...)
{
 80132d8:	b40f      	push	{r0, r1, r2, r3}
 80132da:	b580      	push	{r7, lr}
 80132dc:	b082      	sub	sp, #8
 80132de:	af00      	add	r7, sp, #0
	if (logBufferIndex < 3700)
 80132e0:	4b18      	ldr	r3, [pc, #96]	; (8013344 <log_print+0x6c>)
 80132e2:	881b      	ldrh	r3, [r3, #0]
 80132e4:	f640 6273 	movw	r2, #3699	; 0xe73
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d824      	bhi.n	8013336 <log_print+0x5e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80132ec:	f7ff fcee 	bl	8012ccc <millis>
 80132f0:	4603      	mov	r3, r0
 80132f2:	461a      	mov	r2, r3
 80132f4:	4914      	ldr	r1, [pc, #80]	; (8013348 <log_print+0x70>)
 80132f6:	4815      	ldr	r0, [pc, #84]	; (801334c <log_print+0x74>)
 80132f8:	f004 fcea 	bl	8017cd0 <siprintf>

		va_list argptr;
		va_start(argptr, format);
 80132fc:	f107 0314 	add.w	r3, r7, #20
 8013300:	607b      	str	r3, [r7, #4]
		vsprintf(tempBuffer, format, argptr);
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	6939      	ldr	r1, [r7, #16]
 8013306:	4812      	ldr	r0, [pc, #72]	; (8013350 <log_print+0x78>)
 8013308:	f005 fc3c 	bl	8018b84 <vsiprintf>
		va_end(argptr);

		strcat(logBuffer, tempBuffer);
 801330c:	4910      	ldr	r1, [pc, #64]	; (8013350 <log_print+0x78>)
 801330e:	4811      	ldr	r0, [pc, #68]	; (8013354 <log_print+0x7c>)
 8013310:	f004 fcfe 	bl	8017d10 <strcat>
		strcat(logBuffer, timestamp);
 8013314:	490d      	ldr	r1, [pc, #52]	; (801334c <log_print+0x74>)
 8013316:	480f      	ldr	r0, [pc, #60]	; (8013354 <log_print+0x7c>)
 8013318:	f004 fcfa 	bl	8017d10 <strcat>
		logBufferIndex = strlen(logBuffer);
 801331c:	480d      	ldr	r0, [pc, #52]	; (8013354 <log_print+0x7c>)
 801331e:	f7ec ff61 	bl	80001e4 <strlen>
 8013322:	4603      	mov	r3, r0
 8013324:	b29a      	uxth	r2, r3
 8013326:	4b07      	ldr	r3, [pc, #28]	; (8013344 <log_print+0x6c>)
 8013328:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 801332a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801332e:	2100      	movs	r1, #0
 8013330:	4807      	ldr	r0, [pc, #28]	; (8013350 <log_print+0x78>)
 8013332:	f003 fdc8 	bl	8016ec6 <memset>
	}
}
 8013336:	bf00      	nop
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013340:	b004      	add	sp, #16
 8013342:	4770      	bx	lr
 8013344:	200074e2 	.word	0x200074e2
 8013348:	0801da3c 	.word	0x0801da3c
 801334c:	2000508c 	.word	0x2000508c
 8013350:	200054b4 	.word	0x200054b4
 8013354:	200064b4 	.word	0x200064b4

08013358 <log_bmp>:

static void log_bmp(BMP280* bmp)
{
 8013358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801335a:	b085      	sub	sp, #20
 801335c:	af02      	add	r7, sp, #8
 801335e:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 8013360:	4b1e      	ldr	r3, [pc, #120]	; (80133dc <log_bmp+0x84>)
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013368:	4293      	cmp	r3, r2
 801336a:	d832      	bhi.n	80133d2 <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 801336c:	f7ff fcae 	bl	8012ccc <millis>
 8013370:	4603      	mov	r3, r0
 8013372:	461a      	mov	r2, r3
 8013374:	491a      	ldr	r1, [pc, #104]	; (80133e0 <log_bmp+0x88>)
 8013376:	481b      	ldr	r0, [pc, #108]	; (80133e4 <log_bmp+0x8c>)
 8013378:	f004 fcaa 	bl	8017cd0 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	4618      	mov	r0, r3
 8013382:	f7ed f8f1 	bl	8000568 <__aeabi_f2d>
 8013386:	4605      	mov	r5, r0
 8013388:	460e      	mov	r6, r1
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	691b      	ldr	r3, [r3, #16]
 801338e:	4618      	mov	r0, r3
 8013390:	f7ed f8ea 	bl	8000568 <__aeabi_f2d>
 8013394:	4603      	mov	r3, r0
 8013396:	460c      	mov	r4, r1
 8013398:	e9cd 3400 	strd	r3, r4, [sp]
 801339c:	462a      	mov	r2, r5
 801339e:	4633      	mov	r3, r6
 80133a0:	4911      	ldr	r1, [pc, #68]	; (80133e8 <log_bmp+0x90>)
 80133a2:	4812      	ldr	r0, [pc, #72]	; (80133ec <log_bmp+0x94>)
 80133a4:	f004 fc94 	bl	8017cd0 <siprintf>
		strcat(tempBuffer, timestamp);
 80133a8:	490e      	ldr	r1, [pc, #56]	; (80133e4 <log_bmp+0x8c>)
 80133aa:	4810      	ldr	r0, [pc, #64]	; (80133ec <log_bmp+0x94>)
 80133ac:	f004 fcb0 	bl	8017d10 <strcat>
		strcat(bmpBuffer, tempBuffer);
 80133b0:	490e      	ldr	r1, [pc, #56]	; (80133ec <log_bmp+0x94>)
 80133b2:	480f      	ldr	r0, [pc, #60]	; (80133f0 <log_bmp+0x98>)
 80133b4:	f004 fcac 	bl	8017d10 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 80133b8:	480d      	ldr	r0, [pc, #52]	; (80133f0 <log_bmp+0x98>)
 80133ba:	f7ec ff13 	bl	80001e4 <strlen>
 80133be:	4603      	mov	r3, r0
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	4b06      	ldr	r3, [pc, #24]	; (80133dc <log_bmp+0x84>)
 80133c4:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80133c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80133ca:	2100      	movs	r1, #0
 80133cc:	4807      	ldr	r0, [pc, #28]	; (80133ec <log_bmp+0x94>)
 80133ce:	f003 fd7a 	bl	8016ec6 <memset>
	}
}
 80133d2:	bf00      	nop
 80133d4:	370c      	adds	r7, #12
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133da:	bf00      	nop
 80133dc:	200074e0 	.word	0x200074e0
 80133e0:	0801da3c 	.word	0x0801da3c
 80133e4:	2000508c 	.word	0x2000508c
 80133e8:	0801da44 	.word	0x0801da44
 80133ec:	200054b4 	.word	0x200054b4
 80133f0:	200074ec 	.word	0x200074ec

080133f4 <log_gps>:
static void log_gps(GPS* gps)
{
 80133f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80133f8:	b086      	sub	sp, #24
 80133fa:	af04      	add	r7, sp, #16
 80133fc:	6078      	str	r0, [r7, #4]
	if (gpsBufferIndex < 950)
 80133fe:	4b23      	ldr	r3, [pc, #140]	; (801348c <log_gps+0x98>)
 8013400:	881b      	ldrh	r3, [r3, #0]
 8013402:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013406:	4293      	cmp	r3, r2
 8013408:	d83b      	bhi.n	8013482 <log_gps+0x8e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 801340a:	f7ff fc5f 	bl	8012ccc <millis>
 801340e:	4603      	mov	r3, r0
 8013410:	461a      	mov	r2, r3
 8013412:	491f      	ldr	r1, [pc, #124]	; (8013490 <log_gps+0x9c>)
 8013414:	481f      	ldr	r0, [pc, #124]	; (8013494 <log_gps+0xa0>)
 8013416:	f004 fc5b 	bl	8017cd0 <siprintf>
		sprintf(tempBuffer, "%.07f %.07f %.01f", gps->latitudeDegrees, gps->longitudeDegrees, gps->altitude);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801341e:	4618      	mov	r0, r3
 8013420:	f7ed f8a2 	bl	8000568 <__aeabi_f2d>
 8013424:	4680      	mov	r8, r0
 8013426:	4689      	mov	r9, r1
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801342c:	4618      	mov	r0, r3
 801342e:	f7ed f89b 	bl	8000568 <__aeabi_f2d>
 8013432:	4604      	mov	r4, r0
 8013434:	460d      	mov	r5, r1
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801343a:	4618      	mov	r0, r3
 801343c:	f7ed f894 	bl	8000568 <__aeabi_f2d>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013448:	e9cd 4500 	strd	r4, r5, [sp]
 801344c:	4642      	mov	r2, r8
 801344e:	464b      	mov	r3, r9
 8013450:	4911      	ldr	r1, [pc, #68]	; (8013498 <log_gps+0xa4>)
 8013452:	4812      	ldr	r0, [pc, #72]	; (801349c <log_gps+0xa8>)
 8013454:	f004 fc3c 	bl	8017cd0 <siprintf>
		strcat(tempBuffer, timestamp);
 8013458:	490e      	ldr	r1, [pc, #56]	; (8013494 <log_gps+0xa0>)
 801345a:	4810      	ldr	r0, [pc, #64]	; (801349c <log_gps+0xa8>)
 801345c:	f004 fc58 	bl	8017d10 <strcat>
		strcat(gpsBuffer, tempBuffer);
 8013460:	490e      	ldr	r1, [pc, #56]	; (801349c <log_gps+0xa8>)
 8013462:	480f      	ldr	r0, [pc, #60]	; (80134a0 <log_gps+0xac>)
 8013464:	f004 fc54 	bl	8017d10 <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 8013468:	480d      	ldr	r0, [pc, #52]	; (80134a0 <log_gps+0xac>)
 801346a:	f7ec febb 	bl	80001e4 <strlen>
 801346e:	4603      	mov	r3, r0
 8013470:	b29a      	uxth	r2, r3
 8013472:	4b06      	ldr	r3, [pc, #24]	; (801348c <log_gps+0x98>)
 8013474:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8013476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801347a:	2100      	movs	r1, #0
 801347c:	4807      	ldr	r0, [pc, #28]	; (801349c <log_gps+0xa8>)
 801347e:	f003 fd22 	bl	8016ec6 <memset>
	}
}
 8013482:	bf00      	nop
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801348c:	200054b0 	.word	0x200054b0
 8013490:	0801da3c 	.word	0x0801da3c
 8013494:	2000508c 	.word	0x2000508c
 8013498:	0801da50 	.word	0x0801da50
 801349c:	200054b4 	.word	0x200054b4
 80134a0:	20004864 	.word	0x20004864

080134a4 <log_imu>:
static void log_imu(MPU9250* mpu)
{
 80134a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80134a8:	b086      	sub	sp, #24
 80134aa:	af04      	add	r7, sp, #16
 80134ac:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 80134ae:	4b23      	ldr	r3, [pc, #140]	; (801353c <log_imu+0x98>)
 80134b0:	881b      	ldrh	r3, [r3, #0]
 80134b2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d83b      	bhi.n	8013532 <log_imu+0x8e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80134ba:	f7ff fc07 	bl	8012ccc <millis>
 80134be:	4603      	mov	r3, r0
 80134c0:	461a      	mov	r2, r3
 80134c2:	491f      	ldr	r1, [pc, #124]	; (8013540 <log_imu+0x9c>)
 80134c4:	481f      	ldr	r0, [pc, #124]	; (8013544 <log_imu+0xa0>)
 80134c6:	f004 fc03 	bl	8017cd0 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", mpu->yaw, mpu->pitch, mpu->roll);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ed f84a 	bl	8000568 <__aeabi_f2d>
 80134d4:	4680      	mov	r8, r0
 80134d6:	4689      	mov	r9, r1
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	4618      	mov	r0, r3
 80134de:	f7ed f843 	bl	8000568 <__aeabi_f2d>
 80134e2:	4604      	mov	r4, r0
 80134e4:	460d      	mov	r5, r1
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	695b      	ldr	r3, [r3, #20]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7ed f83c 	bl	8000568 <__aeabi_f2d>
 80134f0:	4602      	mov	r2, r0
 80134f2:	460b      	mov	r3, r1
 80134f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80134f8:	e9cd 4500 	strd	r4, r5, [sp]
 80134fc:	4642      	mov	r2, r8
 80134fe:	464b      	mov	r3, r9
 8013500:	4911      	ldr	r1, [pc, #68]	; (8013548 <log_imu+0xa4>)
 8013502:	4812      	ldr	r0, [pc, #72]	; (801354c <log_imu+0xa8>)
 8013504:	f004 fbe4 	bl	8017cd0 <siprintf>
		strcat(tempBuffer, timestamp);
 8013508:	490e      	ldr	r1, [pc, #56]	; (8013544 <log_imu+0xa0>)
 801350a:	4810      	ldr	r0, [pc, #64]	; (801354c <log_imu+0xa8>)
 801350c:	f004 fc00 	bl	8017d10 <strcat>
		strcat(imuBuffer, tempBuffer);
 8013510:	490e      	ldr	r1, [pc, #56]	; (801354c <log_imu+0xa8>)
 8013512:	480f      	ldr	r0, [pc, #60]	; (8013550 <log_imu+0xac>)
 8013514:	f004 fbfc 	bl	8017d10 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8013518:	480d      	ldr	r0, [pc, #52]	; (8013550 <log_imu+0xac>)
 801351a:	f7ec fe63 	bl	80001e4 <strlen>
 801351e:	4603      	mov	r3, r0
 8013520:	b29a      	uxth	r2, r3
 8013522:	4b06      	ldr	r3, [pc, #24]	; (801353c <log_imu+0x98>)
 8013524:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8013526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801352a:	2100      	movs	r1, #0
 801352c:	4807      	ldr	r0, [pc, #28]	; (801354c <log_imu+0xa8>)
 801352e:	f003 fcca 	bl	8016ec6 <memset>
	}
}
 8013532:	bf00      	nop
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801353c:	200074e6 	.word	0x200074e6
 8013540:	0801da3c 	.word	0x0801da3c
 8013544:	2000508c 	.word	0x2000508c
 8013548:	0801da64 	.word	0x0801da64
 801354c:	200054b4 	.word	0x200054b4
 8013550:	200050b0 	.word	0x200050b0

08013554 <log_mot>:
static void log_mot(float left, float right)
{
 8013554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013556:	b085      	sub	sp, #20
 8013558:	af02      	add	r7, sp, #8
 801355a:	ed87 0a01 	vstr	s0, [r7, #4]
 801355e:	edc7 0a00 	vstr	s1, [r7]
	if (motBufferIndex < 950)
 8013562:	4b1c      	ldr	r3, [pc, #112]	; (80135d4 <log_mot+0x80>)
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	f240 32b5 	movw	r2, #949	; 0x3b5
 801356a:	4293      	cmp	r3, r2
 801356c:	d82e      	bhi.n	80135cc <log_mot+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 801356e:	f7ff fbad 	bl	8012ccc <millis>
 8013572:	4603      	mov	r3, r0
 8013574:	461a      	mov	r2, r3
 8013576:	4918      	ldr	r1, [pc, #96]	; (80135d8 <log_mot+0x84>)
 8013578:	4818      	ldr	r0, [pc, #96]	; (80135dc <log_mot+0x88>)
 801357a:	f004 fba9 	bl	8017cd0 <siprintf>
		sprintf(tempBuffer, "%.01f %.01f", left, right);
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f7ec fff2 	bl	8000568 <__aeabi_f2d>
 8013584:	4605      	mov	r5, r0
 8013586:	460e      	mov	r6, r1
 8013588:	6838      	ldr	r0, [r7, #0]
 801358a:	f7ec ffed 	bl	8000568 <__aeabi_f2d>
 801358e:	4603      	mov	r3, r0
 8013590:	460c      	mov	r4, r1
 8013592:	e9cd 3400 	strd	r3, r4, [sp]
 8013596:	462a      	mov	r2, r5
 8013598:	4633      	mov	r3, r6
 801359a:	4911      	ldr	r1, [pc, #68]	; (80135e0 <log_mot+0x8c>)
 801359c:	4811      	ldr	r0, [pc, #68]	; (80135e4 <log_mot+0x90>)
 801359e:	f004 fb97 	bl	8017cd0 <siprintf>
		strcat(tempBuffer, timestamp);
 80135a2:	490e      	ldr	r1, [pc, #56]	; (80135dc <log_mot+0x88>)
 80135a4:	480f      	ldr	r0, [pc, #60]	; (80135e4 <log_mot+0x90>)
 80135a6:	f004 fbb3 	bl	8017d10 <strcat>
		strcat(motBuffer, tempBuffer);
 80135aa:	490e      	ldr	r1, [pc, #56]	; (80135e4 <log_mot+0x90>)
 80135ac:	480e      	ldr	r0, [pc, #56]	; (80135e8 <log_mot+0x94>)
 80135ae:	f004 fbaf 	bl	8017d10 <strcat>
		motBufferIndex = strlen(motBuffer);
 80135b2:	480d      	ldr	r0, [pc, #52]	; (80135e8 <log_mot+0x94>)
 80135b4:	f7ec fe16 	bl	80001e4 <strlen>
 80135b8:	4603      	mov	r3, r0
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	4b05      	ldr	r3, [pc, #20]	; (80135d4 <log_mot+0x80>)
 80135be:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80135c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80135c4:	2100      	movs	r1, #0
 80135c6:	4807      	ldr	r0, [pc, #28]	; (80135e4 <log_mot+0x90>)
 80135c8:	f003 fc7d 	bl	8016ec6 <memset>
	}
}
 80135cc:	bf00      	nop
 80135ce:	370c      	adds	r7, #12
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d4:	200050ac 	.word	0x200050ac
 80135d8:	0801da3c 	.word	0x0801da3c
 80135dc:	2000508c 	.word	0x2000508c
 80135e0:	0801da78 	.word	0x0801da78
 80135e4:	200054b4 	.word	0x200054b4
 80135e8:	20004c84 	.word	0x20004c84

080135ec <log_radio>:
static void log_radio(SX1278* radio)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	if (radioBufferIndex < 3700)
 80135f4:	4b29      	ldr	r3, [pc, #164]	; (801369c <log_radio+0xb0>)
 80135f6:	881b      	ldrh	r3, [r3, #0]
 80135f8:	f640 6273 	movw	r2, #3699	; 0xe73
 80135fc:	4293      	cmp	r3, r2
 80135fe:	d848      	bhi.n	8013692 <log_radio+0xa6>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8013600:	f7ff fb64 	bl	8012ccc <millis>
 8013604:	4603      	mov	r3, r0
 8013606:	461a      	mov	r2, r3
 8013608:	4925      	ldr	r1, [pc, #148]	; (80136a0 <log_radio+0xb4>)
 801360a:	4826      	ldr	r0, [pc, #152]	; (80136a4 <log_radio+0xb8>)
 801360c:	f004 fb60 	bl	8017cd0 <siprintf>

		if (radio->newTxData)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013616:	2b00      	cmp	r3, #0
 8013618:	d010      	beq.n	801363c <log_radio+0x50>
		{
			sprintf(tempBuffer, "TX\t[");
 801361a:	4b23      	ldr	r3, [pc, #140]	; (80136a8 <log_radio+0xbc>)
 801361c:	4a23      	ldr	r2, [pc, #140]	; (80136ac <log_radio+0xc0>)
 801361e:	6810      	ldr	r0, [r2, #0]
 8013620:	6018      	str	r0, [r3, #0]
 8013622:	7912      	ldrb	r2, [r2, #4]
 8013624:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801362c:	4619      	mov	r1, r3
 801362e:	481e      	ldr	r0, [pc, #120]	; (80136a8 <log_radio+0xbc>)
 8013630:	f004 fb6e 	bl	8017d10 <strcat>
			radio->newTxData = false;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		}
		if (radio->newRxData)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013642:	2b00      	cmp	r3, #0
 8013644:	d010      	beq.n	8013668 <log_radio+0x7c>
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801364a:	461a      	mov	r2, r3
 801364c:	4918      	ldr	r1, [pc, #96]	; (80136b0 <log_radio+0xc4>)
 801364e:	4816      	ldr	r0, [pc, #88]	; (80136a8 <log_radio+0xbc>)
 8013650:	f004 fb3e 	bl	8017cd0 <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	3348      	adds	r3, #72	; 0x48
 8013658:	4619      	mov	r1, r3
 801365a:	4813      	ldr	r0, [pc, #76]	; (80136a8 <log_radio+0xbc>)
 801365c:	f004 fb58 	bl	8017d10 <strcat>
			radio->newRxData = false;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2200      	movs	r2, #0
 8013664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		}

		strcat(tempBuffer, timestamp);
 8013668:	490e      	ldr	r1, [pc, #56]	; (80136a4 <log_radio+0xb8>)
 801366a:	480f      	ldr	r0, [pc, #60]	; (80136a8 <log_radio+0xbc>)
 801366c:	f004 fb50 	bl	8017d10 <strcat>
		strcat(radioBuffer, tempBuffer);
 8013670:	490d      	ldr	r1, [pc, #52]	; (80136a8 <log_radio+0xbc>)
 8013672:	4810      	ldr	r0, [pc, #64]	; (80136b4 <log_radio+0xc8>)
 8013674:	f004 fb4c 	bl	8017d10 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 8013678:	480e      	ldr	r0, [pc, #56]	; (80136b4 <log_radio+0xc8>)
 801367a:	f7ec fdb3 	bl	80001e4 <strlen>
 801367e:	4603      	mov	r3, r0
 8013680:	b29a      	uxth	r2, r3
 8013682:	4b06      	ldr	r3, [pc, #24]	; (801369c <log_radio+0xb0>)
 8013684:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8013686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801368a:	2100      	movs	r1, #0
 801368c:	4806      	ldr	r0, [pc, #24]	; (80136a8 <log_radio+0xbc>)
 801368e:	f003 fc1a 	bl	8016ec6 <memset>
	}
}
 8013692:	bf00      	nop
 8013694:	3708      	adds	r7, #8
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	20005084 	.word	0x20005084
 80136a0:	0801da84 	.word	0x0801da84
 80136a4:	2000508c 	.word	0x2000508c
 80136a8:	200054b4 	.word	0x200054b4
 80136ac:	0801da90 	.word	0x0801da90
 80136b0:	0801da98 	.word	0x0801da98
 80136b4:	20003844 	.word	0x20003844

080136b8 <loging_setup>:


static bool loging_setup(void)		// Writes test file to SD card, if successful creates new log folder
{
 80136b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ba:	b091      	sub	sp, #68	; 0x44
 80136bc:	af06      	add	r7, sp, #24
	#if SD_ENABLE
		if (SD_init() == FR_OK)
 80136be:	f7ed fd9b 	bl	80011f8 <SD_init>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d172      	bne.n	80137ae <loging_setup+0xf6>
		{
			#if LOGING_DEBUG
				println("[LOGING] SD detected, creating test file");
 80136c8:	484a      	ldr	r0, [pc, #296]	; (80137f4 <loging_setup+0x13c>)
 80136ca:	f7ff fb5f 	bl	8012d8c <println>
			#endif
			if (SD_newFile("/TEST.TXT") == FR_OK)
 80136ce:	484a      	ldr	r0, [pc, #296]	; (80137f8 <loging_setup+0x140>)
 80136d0:	f7ed fdce 	bl	8001270 <SD_newFile>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d165      	bne.n	80137a6 <loging_setup+0xee>
			{
				bool status = true;
 80136da:	2301      	movs	r3, #1
 80136dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				status &= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 80136e0:	4946      	ldr	r1, [pc, #280]	; (80137fc <loging_setup+0x144>)
 80136e2:	4845      	ldr	r0, [pc, #276]	; (80137f8 <loging_setup+0x140>)
 80136e4:	f7ed fdec 	bl	80012c0 <SD_writeToFile>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	bf0c      	ite	eq
 80136ee:	2301      	moveq	r3, #1
 80136f0:	2300      	movne	r3, #0
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	461a      	mov	r2, r3
 80136f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136fa:	4013      	ands	r3, r2
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	bf14      	ite	ne
 8013700:	2301      	movne	r3, #1
 8013702:	2300      	moveq	r3, #0
 8013704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				DateTime fileCreated = getTime();
 8013708:	f107 031c 	add.w	r3, r7, #28
 801370c:	4618      	mov	r0, r3
 801370e:	f7ff faed 	bl	8012cec <getTime>
				char dateStr[26] = {0};
 8013712:	463b      	mov	r3, r7
 8013714:	2200      	movs	r2, #0
 8013716:	601a      	str	r2, [r3, #0]
 8013718:	605a      	str	r2, [r3, #4]
 801371a:	609a      	str	r2, [r3, #8]
 801371c:	60da      	str	r2, [r3, #12]
 801371e:	611a      	str	r2, [r3, #16]
 8013720:	615a      	str	r2, [r3, #20]
 8013722:	831a      	strh	r2, [r3, #24]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 8013724:	7fbb      	ldrb	r3, [r7, #30]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 8013726:	461e      	mov	r6, r3
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 8013728:	7f7b      	ldrb	r3, [r7, #29]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 801372a:	469c      	mov	ip, r3
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 801372c:	7f3b      	ldrb	r3, [r7, #28]
						fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 801372e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013732:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8013736:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 801373a:	4604      	mov	r4, r0
						fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 801373c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 801373e:	4605      	mov	r5, r0
 8013740:	4638      	mov	r0, r7
 8013742:	9504      	str	r5, [sp, #16]
 8013744:	9403      	str	r4, [sp, #12]
 8013746:	9102      	str	r1, [sp, #8]
 8013748:	9201      	str	r2, [sp, #4]
 801374a:	9300      	str	r3, [sp, #0]
 801374c:	4663      	mov	r3, ip
 801374e:	4632      	mov	r2, r6
 8013750:	492b      	ldr	r1, [pc, #172]	; (8013800 <loging_setup+0x148>)
 8013752:	f004 fabd 	bl	8017cd0 <siprintf>

				status &= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 8013756:	463b      	mov	r3, r7
 8013758:	4619      	mov	r1, r3
 801375a:	4827      	ldr	r0, [pc, #156]	; (80137f8 <loging_setup+0x140>)
 801375c:	f7ed fdb0 	bl	80012c0 <SD_writeToFile>
 8013760:	4603      	mov	r3, r0
 8013762:	2b00      	cmp	r3, #0
 8013764:	bf0c      	ite	eq
 8013766:	2301      	moveq	r3, #1
 8013768:	2300      	movne	r3, #0
 801376a:	b2db      	uxtb	r3, r3
 801376c:	461a      	mov	r2, r3
 801376e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013772:	4013      	ands	r3, r2
 8013774:	2b00      	cmp	r3, #0
 8013776:	bf14      	ite	ne
 8013778:	2301      	movne	r3, #1
 801377a:	2300      	moveq	r3, #0
 801377c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				#if LOGING_DEBUG
					println("[LOGING] Content writing %s", status ? "ok" : "FAIL");
 8013780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013784:	2b00      	cmp	r3, #0
 8013786:	d001      	beq.n	801378c <loging_setup+0xd4>
 8013788:	4b1e      	ldr	r3, [pc, #120]	; (8013804 <loging_setup+0x14c>)
 801378a:	e000      	b.n	801378e <loging_setup+0xd6>
 801378c:	4b1e      	ldr	r3, [pc, #120]	; (8013808 <loging_setup+0x150>)
 801378e:	4619      	mov	r1, r3
 8013790:	481e      	ldr	r0, [pc, #120]	; (801380c <loging_setup+0x154>)
 8013792:	f7ff fafb 	bl	8012d8c <println>
					if (!status) goto error_handler;
 8013796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801379a:	f083 0301 	eor.w	r3, r3, #1
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d008      	beq.n	80137b6 <loging_setup+0xfe>
 80137a4:	e017      	b.n	80137d6 <loging_setup+0x11e>
				#endif
			}
			else
			{
				#if LOGING_DEBUG
					println("[LOGING] Unable to create new file!");
 80137a6:	481a      	ldr	r0, [pc, #104]	; (8013810 <loging_setup+0x158>)
 80137a8:	f7ff faf0 	bl	8012d8c <println>
				#endif
				goto error_handler;
 80137ac:	e013      	b.n	80137d6 <loging_setup+0x11e>
			}
		}
		else
		{
			println("[LOGING] SD Init fail!");
 80137ae:	4819      	ldr	r0, [pc, #100]	; (8013814 <loging_setup+0x15c>)
 80137b0:	f7ff faec 	bl	8012d8c <println>
			goto error_handler;
 80137b4:	e00f      	b.n	80137d6 <loging_setup+0x11e>
		}

		sdActive = true;
 80137b6:	4b18      	ldr	r3, [pc, #96]	; (8013818 <loging_setup+0x160>)
 80137b8:	2201      	movs	r2, #1
 80137ba:	701a      	strb	r2, [r3, #0]
		log_new();
 80137bc:	f7ff fb88 	bl	8012ed0 <log_new>
		Common.log_print = &log_print;
 80137c0:	4b16      	ldr	r3, [pc, #88]	; (801381c <loging_setup+0x164>)
 80137c2:	4a17      	ldr	r2, [pc, #92]	; (8013820 <loging_setup+0x168>)
 80137c4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
		(*Common.log_print)("*L00"); // [LOGING] SD works, welcome onboard!
 80137c8:	4b14      	ldr	r3, [pc, #80]	; (801381c <loging_setup+0x164>)
 80137ca:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80137ce:	4815      	ldr	r0, [pc, #84]	; (8013824 <loging_setup+0x16c>)
 80137d0:	4798      	blx	r3
		return true;
 80137d2:	2301      	movs	r3, #1
 80137d4:	e00a      	b.n	80137ec <loging_setup+0x134>

		error_handler:
			#if LOGING_DEBUG
				println("error: [LOGING] SD logging is not active due to occured errors");
 80137d6:	4814      	ldr	r0, [pc, #80]	; (8013828 <loging_setup+0x170>)
 80137d8:	f7ff fad8 	bl	8012d8c <println>
			#endif
			sdActive = false;
 80137dc:	4b0e      	ldr	r3, [pc, #56]	; (8013818 <loging_setup+0x160>)
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
			Common.log_print = &log_print_dummy;
 80137e2:	4b0e      	ldr	r3, [pc, #56]	; (801381c <loging_setup+0x164>)
 80137e4:	4a11      	ldr	r2, [pc, #68]	; (801382c <loging_setup+0x174>)
 80137e6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
			return false;
 80137ea:	2300      	movs	r3, #0
	#else // SD_ENABLE
		println("warning: [LOGING] SD DISABLED!")
		Common.log_print = &log_print_dummy;
		return false;
	#endif
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	372c      	adds	r7, #44	; 0x2c
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f4:	0801daa0 	.word	0x0801daa0
 80137f8:	0801dacc 	.word	0x0801dacc
 80137fc:	0801dad8 	.word	0x0801dad8
 8013800:	0801dae8 	.word	0x0801dae8
 8013804:	0801db10 	.word	0x0801db10
 8013808:	0801db14 	.word	0x0801db14
 801380c:	0801db1c 	.word	0x0801db1c
 8013810:	0801db38 	.word	0x0801db38
 8013814:	0801db5c 	.word	0x0801db5c
 8013818:	200074e4 	.word	0x200074e4
 801381c:	20000b9c 	.word	0x20000b9c
 8013820:	080132d9 	.word	0x080132d9
 8013824:	0801db74 	.word	0x0801db74
 8013828:	0801db7c 	.word	0x0801db7c
 801382c:	08012ebd 	.word	0x08012ebd

08013830 <loging_loop>:

static void loging_loop(void)
{
 8013830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013834:	b08a      	sub	sp, #40	; 0x28
 8013836:	af06      	add	r7, sp, #24
	#if SD_ENABLE
		if (Common.bmp.active && millis() - lastBmpLog >= LOG_BMP_DELAY) { log_bmp(&(Common.bmp)); lastBmpLog = millis(); }
 8013838:	4ba7      	ldr	r3, [pc, #668]	; (8013ad8 <loging_loop+0x2a8>)
 801383a:	7f1b      	ldrb	r3, [r3, #28]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00f      	beq.n	8013860 <loging_loop+0x30>
 8013840:	f7ff fa44 	bl	8012ccc <millis>
 8013844:	4602      	mov	r2, r0
 8013846:	4ba5      	ldr	r3, [pc, #660]	; (8013adc <loging_loop+0x2ac>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	1ad3      	subs	r3, r2, r3
 801384c:	2b63      	cmp	r3, #99	; 0x63
 801384e:	d907      	bls.n	8013860 <loging_loop+0x30>
 8013850:	48a1      	ldr	r0, [pc, #644]	; (8013ad8 <loging_loop+0x2a8>)
 8013852:	f7ff fd81 	bl	8013358 <log_bmp>
 8013856:	f7ff fa39 	bl	8012ccc <millis>
 801385a:	4602      	mov	r2, r0
 801385c:	4b9f      	ldr	r3, [pc, #636]	; (8013adc <loging_loop+0x2ac>)
 801385e:	601a      	str	r2, [r3, #0]
		if (Common.mpu.active && millis() - lastImuLog >= LOG_IMU_DELAY) { log_imu(&(Common.mpu)); lastImuLog = millis(); }
 8013860:	4b9d      	ldr	r3, [pc, #628]	; (8013ad8 <loging_loop+0x2a8>)
 8013862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00f      	beq.n	801388a <loging_loop+0x5a>
 801386a:	f7ff fa2f 	bl	8012ccc <millis>
 801386e:	4602      	mov	r2, r0
 8013870:	4b9b      	ldr	r3, [pc, #620]	; (8013ae0 <loging_loop+0x2b0>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	1ad3      	subs	r3, r2, r3
 8013876:	2b63      	cmp	r3, #99	; 0x63
 8013878:	d907      	bls.n	801388a <loging_loop+0x5a>
 801387a:	489a      	ldr	r0, [pc, #616]	; (8013ae4 <loging_loop+0x2b4>)
 801387c:	f7ff fe12 	bl	80134a4 <log_imu>
 8013880:	f7ff fa24 	bl	8012ccc <millis>
 8013884:	4602      	mov	r2, r0
 8013886:	4b96      	ldr	r3, [pc, #600]	; (8013ae0 <loging_loop+0x2b0>)
 8013888:	601a      	str	r2, [r3, #0]
		if (millis() - lastMotLog >= LOG_MOT_DELAY) { log_mot(Common.mot_l, Common.mot_r); lastMotLog = millis(); }
 801388a:	f7ff fa1f 	bl	8012ccc <millis>
 801388e:	4602      	mov	r2, r0
 8013890:	4b95      	ldr	r3, [pc, #596]	; (8013ae8 <loging_loop+0x2b8>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	1ad3      	subs	r3, r2, r3
 8013896:	2b63      	cmp	r3, #99	; 0x63
 8013898:	d914      	bls.n	80138c4 <loging_loop+0x94>
 801389a:	4b8f      	ldr	r3, [pc, #572]	; (8013ad8 <loging_loop+0x2a8>)
 801389c:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80138a0:	edd3 7a00 	vldr	s15, [r3]
 80138a4:	4b8c      	ldr	r3, [pc, #560]	; (8013ad8 <loging_loop+0x2a8>)
 80138a6:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80138aa:	ed93 7a00 	vldr	s14, [r3]
 80138ae:	eef0 0a47 	vmov.f32	s1, s14
 80138b2:	eeb0 0a67 	vmov.f32	s0, s15
 80138b6:	f7ff fe4d 	bl	8013554 <log_mot>
 80138ba:	f7ff fa07 	bl	8012ccc <millis>
 80138be:	4602      	mov	r2, r0
 80138c0:	4b89      	ldr	r3, [pc, #548]	; (8013ae8 <loging_loop+0x2b8>)
 80138c2:	601a      	str	r2, [r3, #0]
		if (Common.gps.active && Common.gps.newData) { log_gps(&(Common.gps)); Common.gps.newData = false; }
 80138c4:	4b84      	ldr	r3, [pc, #528]	; (8013ad8 <loging_loop+0x2a8>)
 80138c6:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00b      	beq.n	80138e6 <loging_loop+0xb6>
 80138ce:	4b82      	ldr	r3, [pc, #520]	; (8013ad8 <loging_loop+0x2a8>)
 80138d0:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d006      	beq.n	80138e6 <loging_loop+0xb6>
 80138d8:	4884      	ldr	r0, [pc, #528]	; (8013aec <loging_loop+0x2bc>)
 80138da:	f7ff fd8b 	bl	80133f4 <log_gps>
 80138de:	4b7e      	ldr	r3, [pc, #504]	; (8013ad8 <loging_loop+0x2a8>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
		if (Common.radio.active && (Common.radio.newTxData || Common.radio.newRxData)) { log_radio(&(Common.radio)); }
 80138e6:	4b7c      	ldr	r3, [pc, #496]	; (8013ad8 <loging_loop+0x2a8>)
 80138e8:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d00c      	beq.n	801390a <loging_loop+0xda>
 80138f0:	4b79      	ldr	r3, [pc, #484]	; (8013ad8 <loging_loop+0x2a8>)
 80138f2:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d104      	bne.n	8013904 <loging_loop+0xd4>
 80138fa:	4b77      	ldr	r3, [pc, #476]	; (8013ad8 <loging_loop+0x2a8>)
 80138fc:	f893 334d 	ldrb.w	r3, [r3, #845]	; 0x34d
 8013900:	2b00      	cmp	r3, #0
 8013902:	d002      	beq.n	801390a <loging_loop+0xda>
 8013904:	487a      	ldr	r0, [pc, #488]	; (8013af0 <loging_loop+0x2c0>)
 8013906:	f7ff fe71 	bl	80135ec <log_radio>
		//if (Common.sps.newData) { log_sps(&(Common.sps)); Common.sps.newData = false; }
		if (Common.operation_mode != 31 && millis() - lastTargetYawLog >= LOG_TARGET_YAW_DELAY) { log_print("TY: %.1f*", Common.target_yaw); lastTargetYawLog = millis(); }
 801390a:	4b73      	ldr	r3, [pc, #460]	; (8013ad8 <loging_loop+0x2a8>)
 801390c:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013910:	2b1f      	cmp	r3, #31
 8013912:	d01b      	beq.n	801394c <loging_loop+0x11c>
 8013914:	f7ff f9da 	bl	8012ccc <millis>
 8013918:	4602      	mov	r2, r0
 801391a:	4b76      	ldr	r3, [pc, #472]	; (8013af4 <loging_loop+0x2c4>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013924:	d312      	bcc.n	801394c <loging_loop+0x11c>
 8013926:	4b6c      	ldr	r3, [pc, #432]	; (8013ad8 <loging_loop+0x2a8>)
 8013928:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4618      	mov	r0, r3
 8013930:	f7ec fe1a 	bl	8000568 <__aeabi_f2d>
 8013934:	4603      	mov	r3, r0
 8013936:	460c      	mov	r4, r1
 8013938:	461a      	mov	r2, r3
 801393a:	4623      	mov	r3, r4
 801393c:	486e      	ldr	r0, [pc, #440]	; (8013af8 <loging_loop+0x2c8>)
 801393e:	f7ff fccb 	bl	80132d8 <log_print>
 8013942:	f7ff f9c3 	bl	8012ccc <millis>
 8013946:	4602      	mov	r2, r0
 8013948:	4b6a      	ldr	r3, [pc, #424]	; (8013af4 <loging_loop+0x2c4>)
 801394a:	601a      	str	r2, [r3, #0]

		if (millis() - lastLogSave >= LOG_SAVE_DELAY) { log_save(); lastLogSave = millis(); }
 801394c:	f7ff f9be 	bl	8012ccc <millis>
 8013950:	4602      	mov	r2, r0
 8013952:	4b6a      	ldr	r3, [pc, #424]	; (8013afc <loging_loop+0x2cc>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	1ad3      	subs	r3, r2, r3
 8013958:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 801395c:	d906      	bls.n	801396c <loging_loop+0x13c>
 801395e:	f7ff fb95 	bl	801308c <log_save>
 8013962:	f7ff f9b3 	bl	8012ccc <millis>
 8013966:	4602      	mov	r2, r0
 8013968:	4b64      	ldr	r3, [pc, #400]	; (8013afc <loging_loop+0x2cc>)
 801396a:	601a      	str	r2, [r3, #0]
	#endif

	#if LOGING_PRINT_DATA
		if (millis() - lastDataPrint >= DATA_PRINT_DELAY)
 801396c:	f7ff f9ae 	bl	8012ccc <millis>
 8013970:	4602      	mov	r2, r0
 8013972:	4b63      	ldr	r3, [pc, #396]	; (8013b00 <loging_loop+0x2d0>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	1ad3      	subs	r3, r2, r3
 8013978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801397c:	f0c0 814f 	bcc.w	8013c1e <loging_loop+0x3ee>
		{
			#if LOGING_PRINT_SENSORS
				if (Common.bmp.active)
 8013980:	4b55      	ldr	r3, [pc, #340]	; (8013ad8 <loging_loop+0x2a8>)
 8013982:	7f1b      	ldrb	r3, [r3, #28]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d023      	beq.n	80139d0 <loging_loop+0x1a0>
				{
					println("Pressure: %.4f", Common.bmp.pressure);
 8013988:	4b53      	ldr	r3, [pc, #332]	; (8013ad8 <loging_loop+0x2a8>)
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	4618      	mov	r0, r3
 801398e:	f7ec fdeb 	bl	8000568 <__aeabi_f2d>
 8013992:	4603      	mov	r3, r0
 8013994:	460c      	mov	r4, r1
 8013996:	461a      	mov	r2, r3
 8013998:	4623      	mov	r3, r4
 801399a:	485a      	ldr	r0, [pc, #360]	; (8013b04 <loging_loop+0x2d4>)
 801399c:	f7ff f9f6 	bl	8012d8c <println>
					println("Temperature: %.4f", Common.bmp.temperature);
 80139a0:	4b4d      	ldr	r3, [pc, #308]	; (8013ad8 <loging_loop+0x2a8>)
 80139a2:	691b      	ldr	r3, [r3, #16]
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7ec fddf 	bl	8000568 <__aeabi_f2d>
 80139aa:	4603      	mov	r3, r0
 80139ac:	460c      	mov	r4, r1
 80139ae:	461a      	mov	r2, r3
 80139b0:	4623      	mov	r3, r4
 80139b2:	4855      	ldr	r0, [pc, #340]	; (8013b08 <loging_loop+0x2d8>)
 80139b4:	f7ff f9ea 	bl	8012d8c <println>
					println("Altitude(P): %.1f", Common.bmp.altitude);
 80139b8:	4b47      	ldr	r3, [pc, #284]	; (8013ad8 <loging_loop+0x2a8>)
 80139ba:	695b      	ldr	r3, [r3, #20]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ec fdd3 	bl	8000568 <__aeabi_f2d>
 80139c2:	4603      	mov	r3, r0
 80139c4:	460c      	mov	r4, r1
 80139c6:	461a      	mov	r2, r3
 80139c8:	4623      	mov	r3, r4
 80139ca:	4850      	ldr	r0, [pc, #320]	; (8013b0c <loging_loop+0x2dc>)
 80139cc:	f7ff f9de 	bl	8012d8c <println>
				}
				if (Common.gps.active && Common.gps.fix)
 80139d0:	4b41      	ldr	r3, [pc, #260]	; (8013ad8 <loging_loop+0x2a8>)
 80139d2:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d02c      	beq.n	8013a34 <loging_loop+0x204>
 80139da:	4b3f      	ldr	r3, [pc, #252]	; (8013ad8 <loging_loop+0x2a8>)
 80139dc:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d027      	beq.n	8013a34 <loging_loop+0x204>
				{
					println("Latitude: %.6f", Common.gps.latitudeDegrees);
 80139e4:	4b3c      	ldr	r3, [pc, #240]	; (8013ad8 <loging_loop+0x2a8>)
 80139e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7ec fdbc 	bl	8000568 <__aeabi_f2d>
 80139f0:	4603      	mov	r3, r0
 80139f2:	460c      	mov	r4, r1
 80139f4:	461a      	mov	r2, r3
 80139f6:	4623      	mov	r3, r4
 80139f8:	4845      	ldr	r0, [pc, #276]	; (8013b10 <loging_loop+0x2e0>)
 80139fa:	f7ff f9c7 	bl	8012d8c <println>
					println("Longitude: %.6f", Common.gps.longitudeDegrees);
 80139fe:	4b36      	ldr	r3, [pc, #216]	; (8013ad8 <loging_loop+0x2a8>)
 8013a00:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ec fdaf 	bl	8000568 <__aeabi_f2d>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	460c      	mov	r4, r1
 8013a0e:	461a      	mov	r2, r3
 8013a10:	4623      	mov	r3, r4
 8013a12:	4840      	ldr	r0, [pc, #256]	; (8013b14 <loging_loop+0x2e4>)
 8013a14:	f7ff f9ba 	bl	8012d8c <println>
					println("Altitude(G): %.1f", Common.gps.altitude);
 8013a18:	4b2f      	ldr	r3, [pc, #188]	; (8013ad8 <loging_loop+0x2a8>)
 8013a1a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7ec fda2 	bl	8000568 <__aeabi_f2d>
 8013a24:	4603      	mov	r3, r0
 8013a26:	460c      	mov	r4, r1
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	483a      	ldr	r0, [pc, #232]	; (8013b18 <loging_loop+0x2e8>)
 8013a2e:	f7ff f9ad 	bl	8012d8c <println>
 8013a32:	e007      	b.n	8013a44 <loging_loop+0x214>
				}
				else if (Common.gps.active) println("GPS has no fix");
 8013a34:	4b28      	ldr	r3, [pc, #160]	; (8013ad8 <loging_loop+0x2a8>)
 8013a36:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d002      	beq.n	8013a44 <loging_loop+0x214>
 8013a3e:	4837      	ldr	r0, [pc, #220]	; (8013b1c <loging_loop+0x2ec>)
 8013a40:	f7ff f9a4 	bl	8012d8c <println>
				if (Common.mpu.active) println("Rotation: %.0f, %.0f, %.0f", Common.mpu.yaw, Common.mpu.pitch, Common.mpu.roll);
 8013a44:	4b24      	ldr	r3, [pc, #144]	; (8013ad8 <loging_loop+0x2a8>)
 8013a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d01d      	beq.n	8013a8a <loging_loop+0x25a>
 8013a4e:	4b22      	ldr	r3, [pc, #136]	; (8013ad8 <loging_loop+0x2a8>)
 8013a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ec fd88 	bl	8000568 <__aeabi_f2d>
 8013a58:	4680      	mov	r8, r0
 8013a5a:	4689      	mov	r9, r1
 8013a5c:	4b1e      	ldr	r3, [pc, #120]	; (8013ad8 <loging_loop+0x2a8>)
 8013a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7ec fd81 	bl	8000568 <__aeabi_f2d>
 8013a66:	4604      	mov	r4, r0
 8013a68:	460d      	mov	r5, r1
 8013a6a:	4b1b      	ldr	r3, [pc, #108]	; (8013ad8 <loging_loop+0x2a8>)
 8013a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7ec fd7a 	bl	8000568 <__aeabi_f2d>
 8013a74:	4602      	mov	r2, r0
 8013a76:	460b      	mov	r3, r1
 8013a78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013a7c:	e9cd 4500 	strd	r4, r5, [sp]
 8013a80:	4642      	mov	r2, r8
 8013a82:	464b      	mov	r3, r9
 8013a84:	4826      	ldr	r0, [pc, #152]	; (8013b20 <loging_loop+0x2f0>)
 8013a86:	f7ff f981 	bl	8012d8c <println>
				{
					println("Particulate matter: %.1f, %.1f", Common.sps.pm1, Common.sps.pm10);
				} */
			#endif
			#if LOGING_PRINT_RADIO
				if (Common.radio.active)
 8013a8a:	4b13      	ldr	r3, [pc, #76]	; (8013ad8 <loging_loop+0x2a8>)
 8013a8c:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d00d      	beq.n	8013ab0 <loging_loop+0x280>
				{
					println("Packets transmitted: %d", Common.radio.txCount);
 8013a94:	4b10      	ldr	r3, [pc, #64]	; (8013ad8 <loging_loop+0x2a8>)
 8013a96:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4821      	ldr	r0, [pc, #132]	; (8013b24 <loging_loop+0x2f4>)
 8013a9e:	f7ff f975 	bl	8012d8c <println>
					println("Packets received: %d", Common.radio.rxCount);
 8013aa2:	4b0d      	ldr	r3, [pc, #52]	; (8013ad8 <loging_loop+0x2a8>)
 8013aa4:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	481f      	ldr	r0, [pc, #124]	; (8013b28 <loging_loop+0x2f8>)
 8013aac:	f7ff f96e 	bl	8012d8c <println>
				}
			#endif
			#if LOGING_PRINT_INFO
				println("Motor state: %s", Common.motors_enabled ? "enabled" : "disabled");
 8013ab0:	4b09      	ldr	r3, [pc, #36]	; (8013ad8 <loging_loop+0x2a8>)
 8013ab2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d001      	beq.n	8013abe <loging_loop+0x28e>
 8013aba:	4b1c      	ldr	r3, [pc, #112]	; (8013b2c <loging_loop+0x2fc>)
 8013abc:	e000      	b.n	8013ac0 <loging_loop+0x290>
 8013abe:	4b1c      	ldr	r3, [pc, #112]	; (8013b30 <loging_loop+0x300>)
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	481c      	ldr	r0, [pc, #112]	; (8013b34 <loging_loop+0x304>)
 8013ac4:	f7ff f962 	bl	8012d8c <println>
				println("Servo state: %s", Common.servo_enabled ? "open" : "closed");
 8013ac8:	4b03      	ldr	r3, [pc, #12]	; (8013ad8 <loging_loop+0x2a8>)
 8013aca:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d034      	beq.n	8013b3c <loging_loop+0x30c>
 8013ad2:	4b19      	ldr	r3, [pc, #100]	; (8013b38 <loging_loop+0x308>)
 8013ad4:	e033      	b.n	8013b3e <loging_loop+0x30e>
 8013ad6:	bf00      	nop
 8013ad8:	20000b9c 	.word	0x20000b9c
 8013adc:	200078ec 	.word	0x200078ec
 8013ae0:	20005088 	.word	0x20005088
 8013ae4:	20000bd4 	.word	0x20000bd4
 8013ae8:	200074d8 	.word	0x200074d8
 8013aec:	20000c90 	.word	0x20000c90
 8013af0:	20000eb0 	.word	0x20000eb0
 8013af4:	200074d4 	.word	0x200074d4
 8013af8:	0801dbbc 	.word	0x0801dbbc
 8013afc:	200074dc 	.word	0x200074dc
 8013b00:	200074e8 	.word	0x200074e8
 8013b04:	0801dbc8 	.word	0x0801dbc8
 8013b08:	0801dbd8 	.word	0x0801dbd8
 8013b0c:	0801dbec 	.word	0x0801dbec
 8013b10:	0801dc00 	.word	0x0801dc00
 8013b14:	0801dc10 	.word	0x0801dc10
 8013b18:	0801dc20 	.word	0x0801dc20
 8013b1c:	0801dc34 	.word	0x0801dc34
 8013b20:	0801dc44 	.word	0x0801dc44
 8013b24:	0801dc60 	.word	0x0801dc60
 8013b28:	0801dc78 	.word	0x0801dc78
 8013b2c:	0801dc90 	.word	0x0801dc90
 8013b30:	0801dc98 	.word	0x0801dc98
 8013b34:	0801dca4 	.word	0x0801dca4
 8013b38:	0801dcb4 	.word	0x0801dcb4
 8013b3c:	4b3a      	ldr	r3, [pc, #232]	; (8013c28 <loging_loop+0x3f8>)
 8013b3e:	4619      	mov	r1, r3
 8013b40:	483a      	ldr	r0, [pc, #232]	; (8013c2c <loging_loop+0x3fc>)
 8013b42:	f7ff f923 	bl	8012d8c <println>
				println("Targeting to: %.4f, %.4f, %.1f at %.1f*", Common.target_lat, Common.target_lon, Common.target_alt, Common.target_yaw);
 8013b46:	4b3a      	ldr	r3, [pc, #232]	; (8013c30 <loging_loop+0x400>)
 8013b48:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ec fd0a 	bl	8000568 <__aeabi_f2d>
 8013b54:	4682      	mov	sl, r0
 8013b56:	468b      	mov	fp, r1
 8013b58:	4b35      	ldr	r3, [pc, #212]	; (8013c30 <loging_loop+0x400>)
 8013b5a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ec fd01 	bl	8000568 <__aeabi_f2d>
 8013b66:	4604      	mov	r4, r0
 8013b68:	460d      	mov	r5, r1
 8013b6a:	4b31      	ldr	r3, [pc, #196]	; (8013c30 <loging_loop+0x400>)
 8013b6c:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7ec fcf8 	bl	8000568 <__aeabi_f2d>
 8013b78:	4680      	mov	r8, r0
 8013b7a:	4689      	mov	r9, r1
 8013b7c:	4b2c      	ldr	r3, [pc, #176]	; (8013c30 <loging_loop+0x400>)
 8013b7e:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7ec fcef 	bl	8000568 <__aeabi_f2d>
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013b96:	e9cd 4500 	strd	r4, r5, [sp]
 8013b9a:	4652      	mov	r2, sl
 8013b9c:	465b      	mov	r3, fp
 8013b9e:	4825      	ldr	r0, [pc, #148]	; (8013c34 <loging_loop+0x404>)
 8013ba0:	f7ff f8f4 	bl	8012d8c <println>
				char operation_string[10];
				switch (Common.operation_mode)
 8013ba4:	4b22      	ldr	r3, [pc, #136]	; (8013c30 <loging_loop+0x400>)
 8013ba6:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013baa:	2b03      	cmp	r3, #3
 8013bac:	d826      	bhi.n	8013bfc <loging_loop+0x3cc>
 8013bae:	a201      	add	r2, pc, #4	; (adr r2, 8013bb4 <loging_loop+0x384>)
 8013bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bb4:	08013bc5 	.word	0x08013bc5
 8013bb8:	08013bd5 	.word	0x08013bd5
 8013bbc:	08013be1 	.word	0x08013be1
 8013bc0:	08013bed 	.word	0x08013bed
				{
					case 0:
						sprintf(operation_string, "auto"); break;
 8013bc4:	1d3b      	adds	r3, r7, #4
 8013bc6:	4a1c      	ldr	r2, [pc, #112]	; (8013c38 <loging_loop+0x408>)
 8013bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bcc:	6018      	str	r0, [r3, #0]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	7019      	strb	r1, [r3, #0]
 8013bd2:	e019      	b.n	8013c08 <loging_loop+0x3d8>
					case 1:
						sprintf(operation_string, "settarget"); break;
 8013bd4:	4a19      	ldr	r2, [pc, #100]	; (8013c3c <loging_loop+0x40c>)
 8013bd6:	1d3b      	adds	r3, r7, #4
 8013bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8013bda:	c303      	stmia	r3!, {r0, r1}
 8013bdc:	801a      	strh	r2, [r3, #0]
 8013bde:	e013      	b.n	8013c08 <loging_loop+0x3d8>
					case 2:
						sprintf(operation_string, "direction"); break;
 8013be0:	4a17      	ldr	r2, [pc, #92]	; (8013c40 <loging_loop+0x410>)
 8013be2:	1d3b      	adds	r3, r7, #4
 8013be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8013be6:	c303      	stmia	r3!, {r0, r1}
 8013be8:	801a      	strh	r2, [r3, #0]
 8013bea:	e00d      	b.n	8013c08 <loging_loop+0x3d8>
					case 3:
						sprintf(operation_string, "maual"); break;
 8013bec:	1d3b      	adds	r3, r7, #4
 8013bee:	4a15      	ldr	r2, [pc, #84]	; (8013c44 <loging_loop+0x414>)
 8013bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bf4:	6018      	str	r0, [r3, #0]
 8013bf6:	3304      	adds	r3, #4
 8013bf8:	8019      	strh	r1, [r3, #0]
 8013bfa:	e005      	b.n	8013c08 <loging_loop+0x3d8>
					case 31:
					default:
						sprintf(operation_string, "terminate"); break;
 8013bfc:	4a12      	ldr	r2, [pc, #72]	; (8013c48 <loging_loop+0x418>)
 8013bfe:	1d3b      	adds	r3, r7, #4
 8013c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c02:	c303      	stmia	r3!, {r0, r1}
 8013c04:	801a      	strh	r2, [r3, #0]
 8013c06:	bf00      	nop
				}
				println("Operation mode: %s", operation_string);
 8013c08:	1d3b      	adds	r3, r7, #4
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	480f      	ldr	r0, [pc, #60]	; (8013c4c <loging_loop+0x41c>)
 8013c0e:	f7ff f8bd 	bl	8012d8c <println>
			#endif
			lastDataPrint = millis();
 8013c12:	f7ff f85b 	bl	8012ccc <millis>
 8013c16:	4602      	mov	r2, r0
 8013c18:	4b0d      	ldr	r3, [pc, #52]	; (8013c50 <loging_loop+0x420>)
 8013c1a:	601a      	str	r2, [r3, #0]
		}
	#endif
	return;
 8013c1c:	bf00      	nop
 8013c1e:	bf00      	nop
}
 8013c20:	3710      	adds	r7, #16
 8013c22:	46bd      	mov	sp, r7
 8013c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013c28:	0801dcbc 	.word	0x0801dcbc
 8013c2c:	0801dcc4 	.word	0x0801dcc4
 8013c30:	20000b9c 	.word	0x20000b9c
 8013c34:	0801dcd4 	.word	0x0801dcd4
 8013c38:	0801dcfc 	.word	0x0801dcfc
 8013c3c:	0801dd04 	.word	0x0801dd04
 8013c40:	0801dd10 	.word	0x0801dd10
 8013c44:	0801dd1c 	.word	0x0801dd1c
 8013c48:	0801dd24 	.word	0x0801dd24
 8013c4c:	0801dd30 	.word	0x0801dd30
 8013c50:	200074e8 	.word	0x200074e8

08013c54 <send_info_packet>:

bool transmitting;
uint8_t packetNumber;

static void send_info_packet(void)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	af00      	add	r7, sp, #0
	SX1278_transmit(&(Common.radio), Common.radio.txBuffer, 22);	
 8013c58:	2216      	movs	r2, #22
 8013c5a:	4903      	ldr	r1, [pc, #12]	; (8013c68 <send_info_packet+0x14>)
 8013c5c:	4803      	ldr	r0, [pc, #12]	; (8013c6c <send_info_packet+0x18>)
 8013c5e:	f7ed fd85 	bl	800176c <SX1278_transmit>
}
 8013c62:	bf00      	nop
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	20000ff8 	.word	0x20000ff8
 8013c6c:	20000eb0 	.word	0x20000eb0

08013c70 <duplex_setup>:

static bool duplex_setup(void)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
	(*Common.log_print)("*D00"); // [DUPLEX] Hello!
 8013c76:	4b38      	ldr	r3, [pc, #224]	; (8013d58 <duplex_setup+0xe8>)
 8013c78:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8013c7c:	4837      	ldr	r0, [pc, #220]	; (8013d5c <duplex_setup+0xec>)
 8013c7e:	4798      	blx	r3
	#if RADIO_ENABLE
		Common.radio.reset = LR_RESET_Pin;		Common.radio.reset_port = LR_RESET_GPIO_Port;
 8013c80:	4b35      	ldr	r3, [pc, #212]	; (8013d58 <duplex_setup+0xe8>)
 8013c82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013c86:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
 8013c8a:	4b33      	ldr	r3, [pc, #204]	; (8013d58 <duplex_setup+0xe8>)
 8013c8c:	4a34      	ldr	r2, [pc, #208]	; (8013d60 <duplex_setup+0xf0>)
 8013c8e:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
		Common.radio.dio0 = LR_DIO0_Pin;		Common.radio.dio0_port = LR_DIO0_GPIO_Port;
 8013c92:	4b31      	ldr	r3, [pc, #196]	; (8013d58 <duplex_setup+0xe8>)
 8013c94:	2210      	movs	r2, #16
 8013c96:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
 8013c9a:	4b2f      	ldr	r3, [pc, #188]	; (8013d58 <duplex_setup+0xe8>)
 8013c9c:	4a31      	ldr	r2, [pc, #196]	; (8013d64 <duplex_setup+0xf4>)
 8013c9e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
		Common.radio.nss = LR_NSS_Pin;			Common.radio.nss_port = LR_NSS_GPIO_Port;
 8013ca2:	4b2d      	ldr	r3, [pc, #180]	; (8013d58 <duplex_setup+0xe8>)
 8013ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013ca8:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
 8013cac:	4b2a      	ldr	r3, [pc, #168]	; (8013d58 <duplex_setup+0xe8>)
 8013cae:	4a2d      	ldr	r2, [pc, #180]	; (8013d64 <duplex_setup+0xf4>)
 8013cb0:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
		Common.radio.spi = Get_SPI1_Instance();
 8013cb4:	f001 fd68 	bl	8015788 <Get_SPI1_Instance>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	4b27      	ldr	r3, [pc, #156]	; (8013d58 <duplex_setup+0xe8>)
 8013cbc:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
		Common.radio.config = sx1278_default_config;
 8013cc0:	4b25      	ldr	r3, [pc, #148]	; (8013d58 <duplex_setup+0xe8>)
 8013cc2:	4a29      	ldr	r2, [pc, #164]	; (8013d68 <duplex_setup+0xf8>)
 8013cc4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8013cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Common.radio.useDio0IRQ = true;
 8013cce:	4b22      	ldr	r3, [pc, #136]	; (8013d58 <duplex_setup+0xe8>)
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

		#if DUPLEX_DEBUG
			println("[DUPLEX] Initializing SX1278");
 8013cd6:	4825      	ldr	r0, [pc, #148]	; (8013d6c <duplex_setup+0xfc>)
 8013cd8:	f7ff f858 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*D01");
 8013cdc:	4b1e      	ldr	r3, [pc, #120]	; (8013d58 <duplex_setup+0xe8>)
 8013cde:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8013ce2:	4823      	ldr	r0, [pc, #140]	; (8013d70 <duplex_setup+0x100>)
 8013ce4:	4798      	blx	r3

		uint8_t attempts = 0;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	71fb      	strb	r3, [r7, #7]
		while (!SX1278_init(&(Common.radio)))
 8013cea:	e016      	b.n	8013d1a <duplex_setup+0xaa>
		{
			if (++attempts > 5)
 8013cec:	79fb      	ldrb	r3, [r7, #7]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	71fb      	strb	r3, [r7, #7]
 8013cf2:	79fb      	ldrb	r3, [r7, #7]
 8013cf4:	2b05      	cmp	r3, #5
 8013cf6:	d909      	bls.n	8013d0c <duplex_setup+0x9c>
			{
				#if DUPLEX_DEBUG
					println("error: [DUPLEX] No connection with SX1278, radio is not active");
 8013cf8:	481e      	ldr	r0, [pc, #120]	; (8013d74 <duplex_setup+0x104>)
 8013cfa:	f7ff f847 	bl	8012d8c <println>
				#endif
				(*Common.log_print)("*ED01");
 8013cfe:	4b16      	ldr	r3, [pc, #88]	; (8013d58 <duplex_setup+0xe8>)
 8013d00:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8013d04:	481c      	ldr	r0, [pc, #112]	; (8013d78 <duplex_setup+0x108>)
 8013d06:	4798      	blx	r3
				return false;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e020      	b.n	8013d4e <duplex_setup+0xde>
			}

			#if DUPLEX_DEBUG
				println("[DUPLEX] Init unsuccessful, retrying...");
 8013d0c:	481b      	ldr	r0, [pc, #108]	; (8013d7c <duplex_setup+0x10c>)
 8013d0e:	f7ff f83d 	bl	8012d8c <println>
			#endif
			delay(500);
 8013d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013d16:	f7f2 fa3d 	bl	8006194 <HAL_Delay>
		while (!SX1278_init(&(Common.radio)))
 8013d1a:	4819      	ldr	r0, [pc, #100]	; (8013d80 <duplex_setup+0x110>)
 8013d1c:	f7ed fc2e 	bl	800157c <SX1278_init>
 8013d20:	4603      	mov	r3, r0
 8013d22:	f083 0301 	eor.w	r3, r3, #1
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d1df      	bne.n	8013cec <duplex_setup+0x7c>
		}
		#if DUPLEX_DEBUG
			println("[DUPLEX] Successful radio init");
 8013d2c:	4815      	ldr	r0, [pc, #84]	; (8013d84 <duplex_setup+0x114>)
 8013d2e:	f7ff f82d 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*D02");
 8013d32:	4b09      	ldr	r3, [pc, #36]	; (8013d58 <duplex_setup+0xe8>)
 8013d34:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8013d38:	4813      	ldr	r0, [pc, #76]	; (8013d88 <duplex_setup+0x118>)
 8013d3a:	4798      	blx	r3
		
		packetNumber = 1;
 8013d3c:	4b13      	ldr	r3, [pc, #76]	; (8013d8c <duplex_setup+0x11c>)
 8013d3e:	2201      	movs	r2, #1
 8013d40:	701a      	strb	r2, [r3, #0]
		transmitting = true;
 8013d42:	4b13      	ldr	r3, [pc, #76]	; (8013d90 <duplex_setup+0x120>)
 8013d44:	2201      	movs	r2, #1
 8013d46:	701a      	strb	r2, [r3, #0]

		send_info_packet(); // Send packet to kickstart duplex
 8013d48:	f7ff ff84 	bl	8013c54 <send_info_packet>
		return true;
 8013d4c:	2301      	movs	r3, #1
		#endif
		(*Common.log_print)("*WD00");
		Common.radio.active = false;
		return false;
	#endif
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3708      	adds	r7, #8
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	20000b9c 	.word	0x20000b9c
 8013d5c:	0801dd44 	.word	0x0801dd44
 8013d60:	40020000 	.word	0x40020000
 8013d64:	40020800 	.word	0x40020800
 8013d68:	20000118 	.word	0x20000118
 8013d6c:	0801dd4c 	.word	0x0801dd4c
 8013d70:	0801dd6c 	.word	0x0801dd6c
 8013d74:	0801dd74 	.word	0x0801dd74
 8013d78:	0801ddb4 	.word	0x0801ddb4
 8013d7c:	0801ddbc 	.word	0x0801ddbc
 8013d80:	20000eb0 	.word	0x20000eb0
 8013d84:	0801dde4 	.word	0x0801dde4
 8013d88:	0801de04 	.word	0x0801de04
 8013d8c:	20003840 	.word	0x20003840
 8013d90:	20003841 	.word	0x20003841

08013d94 <duplex_checkINT>:

static bool duplex_checkINT(void)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	af00      	add	r7, sp, #0
	return ((Common.radio.pendingIRQ && HAL_GPIO_ReadPin(Common.radio.dio0_port, Common.radio.dio0) == HIGH) || SX1278_intTimeout(&(Common.radio)));
 8013d98:	4b0f      	ldr	r3, [pc, #60]	; (8013dd8 <duplex_checkINT+0x44>)
 8013d9a:	f893 3359 	ldrb.w	r3, [r3, #857]	; 0x359
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d00c      	beq.n	8013dbc <duplex_checkINT+0x28>
 8013da2:	4b0d      	ldr	r3, [pc, #52]	; (8013dd8 <duplex_checkINT+0x44>)
 8013da4:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 8013da8:	4b0b      	ldr	r3, [pc, #44]	; (8013dd8 <duplex_checkINT+0x44>)
 8013daa:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8013dae:	4619      	mov	r1, r3
 8013db0:	4610      	mov	r0, r2
 8013db2:	f7f3 f855 	bl	8006e60 <HAL_GPIO_ReadPin>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d005      	beq.n	8013dc8 <duplex_checkINT+0x34>
 8013dbc:	4807      	ldr	r0, [pc, #28]	; (8013ddc <duplex_checkINT+0x48>)
 8013dbe:	f7ed ff44 	bl	8001c4a <SX1278_intTimeout>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <duplex_checkINT+0x38>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	e000      	b.n	8013dce <duplex_checkINT+0x3a>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f003 0301 	and.w	r3, r3, #1
 8013dd2:	b2db      	uxtb	r3, r3
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20000b9c 	.word	0x20000b9c
 8013ddc:	20000eb0 	.word	0x20000eb0

08013de0 <decodePacket>:

static void decodePacket()
{
 8013de0:	b590      	push	{r4, r7, lr}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
	if (Common.radio.newPacket)
 8013de6:	4b46      	ldr	r3, [pc, #280]	; (8013f00 <decodePacket+0x120>)
 8013de8:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d07e      	beq.n	8013eee <decodePacket+0x10e>
	{
		// format: MOT-1/8, SER-1/8, OPMOD-6/8, ANG-1, LAT-4, LON-4, ALT-2
		uint32_t temv = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	607b      	str	r3, [r7, #4]

		temv = (uint32_t)Common.radio.rxBuffer[0];
 8013df4:	4b42      	ldr	r3, [pc, #264]	; (8013f00 <decodePacket+0x120>)
 8013df6:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8013dfa:	607b      	str	r3, [r7, #4]
		Common.operation_mode = temv & (0xFF >> 2);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e04:	b2da      	uxtb	r2, r3
 8013e06:	4b3e      	ldr	r3, [pc, #248]	; (8013f00 <decodePacket+0x120>)
 8013e08:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
		if (Common.operation_mode == 3)
 8013e0c:	4b3c      	ldr	r3, [pc, #240]	; (8013f00 <decodePacket+0x120>)
 8013e0e:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013e12:	2b03      	cmp	r3, #3
 8013e14:	d115      	bne.n	8013e42 <decodePacket+0x62>
		{
			Common.motors_enabled = temv & (1 << 7);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	bf14      	ite	ne
 8013e20:	2301      	movne	r3, #1
 8013e22:	2300      	moveq	r3, #0
 8013e24:	b2da      	uxtb	r2, r3
 8013e26:	4b36      	ldr	r3, [pc, #216]	; (8013f00 <decodePacket+0x120>)
 8013e28:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
			Common.servo_enabled = temv & (1 << 6);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	bf14      	ite	ne
 8013e36:	2301      	movne	r3, #1
 8013e38:	2300      	moveq	r3, #0
 8013e3a:	b2da      	uxtb	r2, r3
 8013e3c:	4b30      	ldr	r3, [pc, #192]	; (8013f00 <decodePacket+0x120>)
 8013e3e:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
		}

		if (Common.operation_mode == 2 || Common.operation_mode == 3)
 8013e42:	4b2f      	ldr	r3, [pc, #188]	; (8013f00 <decodePacket+0x120>)
 8013e44:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013e48:	2b02      	cmp	r3, #2
 8013e4a:	d004      	beq.n	8013e56 <decodePacket+0x76>
 8013e4c:	4b2c      	ldr	r3, [pc, #176]	; (8013f00 <decodePacket+0x120>)
 8013e4e:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013e52:	2b03      	cmp	r3, #3
 8013e54:	d125      	bne.n	8013ea2 <decodePacket+0xc2>
		{
			temv = (uint32_t)Common.radio.rxBuffer[1];
 8013e56:	4b2a      	ldr	r3, [pc, #168]	; (8013f00 <decodePacket+0x120>)
 8013e58:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8013e5c:	607b      	str	r3, [r7, #4]
			Common.target_yaw = (float)(temv) * 360.0 / 255.0; 
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	ee07 3a90 	vmov	s15, r3
 8013e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e68:	ee17 0a90 	vmov	r0, s15
 8013e6c:	f7ec fb7c 	bl	8000568 <__aeabi_f2d>
 8013e70:	f04f 0200 	mov.w	r2, #0
 8013e74:	4b23      	ldr	r3, [pc, #140]	; (8013f04 <decodePacket+0x124>)
 8013e76:	f7ec fbcf 	bl	8000618 <__aeabi_dmul>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	460c      	mov	r4, r1
 8013e7e:	4618      	mov	r0, r3
 8013e80:	4621      	mov	r1, r4
 8013e82:	a31d      	add	r3, pc, #116	; (adr r3, 8013ef8 <decodePacket+0x118>)
 8013e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e88:	f7ec fcf0 	bl	800086c <__aeabi_ddiv>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	460c      	mov	r4, r1
 8013e90:	4618      	mov	r0, r3
 8013e92:	4621      	mov	r1, r4
 8013e94:	f7ec feb8 	bl	8000c08 <__aeabi_d2f>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	4b19      	ldr	r3, [pc, #100]	; (8013f00 <decodePacket+0x120>)
 8013e9c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8013ea0:	601a      	str	r2, [r3, #0]
		}
		if (Common.radio.rxLen == 13 && Common.operation_mode == 1)
 8013ea2:	4b17      	ldr	r3, [pc, #92]	; (8013f00 <decodePacket+0x120>)
 8013ea4:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 8013ea8:	2b0d      	cmp	r3, #13
 8013eaa:	d120      	bne.n	8013eee <decodePacket+0x10e>
 8013eac:	4b14      	ldr	r3, [pc, #80]	; (8013f00 <decodePacket+0x120>)
 8013eae:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d11b      	bne.n	8013eee <decodePacket+0x10e>
		{
			bytesToFloat(Common.radio.rxBuffer + 3, (uint8_t*)&(Common.target_lat));
 8013eb6:	4b14      	ldr	r3, [pc, #80]	; (8013f08 <decodePacket+0x128>)
 8013eb8:	4914      	ldr	r1, [pc, #80]	; (8013f0c <decodePacket+0x12c>)
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fe ffe2 	bl	8012e84 <bytesToFloat>
			bytesToFloat(Common.radio.rxBuffer + 7, (uint8_t*)&(Common.target_lat));
 8013ec0:	4b13      	ldr	r3, [pc, #76]	; (8013f10 <decodePacket+0x130>)
 8013ec2:	4912      	ldr	r1, [pc, #72]	; (8013f0c <decodePacket+0x12c>)
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fe ffdd 	bl	8012e84 <bytesToFloat>
			
			memcpy((uint8_t*)&temv, Common.radio.rxBuffer + 11, 2);
 8013eca:	4b12      	ldr	r3, [pc, #72]	; (8013f14 <decodePacket+0x134>)
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	80bb      	strh	r3, [r7, #4]
			Common.target_alt = (float)(temv) / 10;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	ee07 3a90 	vmov	s15, r3
 8013ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013edc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8013ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013ee4:	4b06      	ldr	r3, [pc, #24]	; (8013f00 <decodePacket+0x120>)
 8013ee6:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8013eea:	edc3 7a00 	vstr	s15, [r3]
		}
	}
}
 8013eee:	bf00      	nop
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd90      	pop	{r4, r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	00000000 	.word	0x00000000
 8013efc:	406fe000 	.word	0x406fe000
 8013f00:	20000b9c 	.word	0x20000b9c
 8013f04:	40768000 	.word	0x40768000
 8013f08:	20000efb 	.word	0x20000efb
 8013f0c:	20001108 	.word	0x20001108
 8013f10:	20000eff 	.word	0x20000eff
 8013f14:	20000f03 	.word	0x20000f03

08013f18 <preparePacket>:

static void preparePacket()
{
 8013f18:	b590      	push	{r4, r7, lr}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
	// format: TEMP-2, PRES-3, LAT-4, LON-4, ALT-2, YAW-1, PITCH-1, ROLL-1, SPS1-1, SPS10-1, OPMODE-1, PN-1
	uint32_t temv = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	607b      	str	r3, [r7, #4]

	temv = (uint32_t)((Common.bmp.temperature + 10) * 1000);
 8013f22:	4b4b      	ldr	r3, [pc, #300]	; (8014050 <preparePacket+0x138>)
 8013f24:	edd3 7a04 	vldr	s15, [r3, #16]
 8013f28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f30:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014054 <preparePacket+0x13c>
 8013f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f3c:	ee17 3a90 	vmov	r3, s15
 8013f40:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 0, (uint8_t*)&temv, 2);	// 0:1
 8013f42:	88ba      	ldrh	r2, [r7, #4]
 8013f44:	4b42      	ldr	r3, [pc, #264]	; (8014050 <preparePacket+0x138>)
 8013f46:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c

	temv = (uint32_t)(Common.bmp.pressure * 10000);
 8013f4a:	4b41      	ldr	r3, [pc, #260]	; (8014050 <preparePacket+0x138>)
 8013f4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013f50:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014058 <preparePacket+0x140>
 8013f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f5c:	ee17 3a90 	vmov	r3, s15
 8013f60:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 2, (uint8_t*)&temv, 3);	// 2:5
 8013f62:	483e      	ldr	r0, [pc, #248]	; (801405c <preparePacket+0x144>)
 8013f64:	1d3b      	adds	r3, r7, #4
 8013f66:	2203      	movs	r2, #3
 8013f68:	4619      	mov	r1, r3
 8013f6a:	f002 ffa1 	bl	8016eb0 <memcpy>

	floatToBytes(&(Common.gps.latitudeDegrees), Common.radio.txBuffer + 6);		// 6:9
 8013f6e:	4b3c      	ldr	r3, [pc, #240]	; (8014060 <preparePacket+0x148>)
 8013f70:	4619      	mov	r1, r3
 8013f72:	483c      	ldr	r0, [pc, #240]	; (8014064 <preparePacket+0x14c>)
 8013f74:	f7fe ff6a 	bl	8012e4c <floatToBytes>
	floatToBytes(&(Common.gps.longitudeDegrees), Common.radio.txBuffer + 10);	// 10:13
 8013f78:	4b3b      	ldr	r3, [pc, #236]	; (8014068 <preparePacket+0x150>)
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	483b      	ldr	r0, [pc, #236]	; (801406c <preparePacket+0x154>)
 8013f7e:	f7fe ff65 	bl	8012e4c <floatToBytes>

	temv = (uint32_t)(Common.gps.altitude * 10);
 8013f82:	4b33      	ldr	r3, [pc, #204]	; (8014050 <preparePacket+0x138>)
 8013f84:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8013f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f94:	ee17 3a90 	vmov	r3, s15
 8013f98:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 14, (uint8_t*)&temv, 2);	// 14:15
 8013f9a:	4a35      	ldr	r2, [pc, #212]	; (8014070 <preparePacket+0x158>)
 8013f9c:	88bb      	ldrh	r3, [r7, #4]
 8013f9e:	8013      	strh	r3, [r2, #0]

	Common.radio.txBuffer[16] = (uint8_t)(Common.mpu.yaw * (255.0 / 360.0));	// 16
 8013fa0:	4b2b      	ldr	r3, [pc, #172]	; (8014050 <preparePacket+0x138>)
 8013fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7ec fadf 	bl	8000568 <__aeabi_f2d>
 8013faa:	a327      	add	r3, pc, #156	; (adr r3, 8014048 <preparePacket+0x130>)
 8013fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb0:	f7ec fb32 	bl	8000618 <__aeabi_dmul>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	460c      	mov	r4, r1
 8013fb8:	4618      	mov	r0, r3
 8013fba:	4621      	mov	r1, r4
 8013fbc:	f7ec fe04 	bl	8000bc8 <__aeabi_d2uiz>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	b2da      	uxtb	r2, r3
 8013fc4:	4b22      	ldr	r3, [pc, #136]	; (8014050 <preparePacket+0x138>)
 8013fc6:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
	Common.radio.txBuffer[17] = (uint8_t)(Common.mpu.pitch * (255.0 / 360.0));	// 17
 8013fca:	4b21      	ldr	r3, [pc, #132]	; (8014050 <preparePacket+0x138>)
 8013fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7ec faca 	bl	8000568 <__aeabi_f2d>
 8013fd4:	a31c      	add	r3, pc, #112	; (adr r3, 8014048 <preparePacket+0x130>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f7ec fb1d 	bl	8000618 <__aeabi_dmul>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	f7ec fdef 	bl	8000bc8 <__aeabi_d2uiz>
 8013fea:	4603      	mov	r3, r0
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	4b18      	ldr	r3, [pc, #96]	; (8014050 <preparePacket+0x138>)
 8013ff0:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
	Common.radio.txBuffer[18] = (uint8_t)(Common.mpu.roll * (255.0 / 360.0));	// 18
 8013ff4:	4b16      	ldr	r3, [pc, #88]	; (8014050 <preparePacket+0x138>)
 8013ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7ec fab5 	bl	8000568 <__aeabi_f2d>
 8013ffe:	a312      	add	r3, pc, #72	; (adr r3, 8014048 <preparePacket+0x130>)
 8014000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014004:	f7ec fb08 	bl	8000618 <__aeabi_dmul>
 8014008:	4603      	mov	r3, r0
 801400a:	460c      	mov	r4, r1
 801400c:	4618      	mov	r0, r3
 801400e:	4621      	mov	r1, r4
 8014010:	f7ec fdda 	bl	8000bc8 <__aeabi_d2uiz>
 8014014:	4603      	mov	r3, r0
 8014016:	b2da      	uxtb	r2, r3
 8014018:	4b0d      	ldr	r3, [pc, #52]	; (8014050 <preparePacket+0x138>)
 801401a:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
	/*
	Common.radio.txBuffer[19] = (uint8_t)(Common.sps.pm1 * (255.0 / __)); B++;		// 19
	Common.radio.txBuffer[20] = (uint8_t)(Common.sps.pm10 * (255.0 / __)); B++;		// 20
	*/

	Common.radio.txBuffer[21] = Common.operation_mode;	// 21
 801401e:	4b0c      	ldr	r3, [pc, #48]	; (8014050 <preparePacket+0x138>)
 8014020:	f893 257c 	ldrb.w	r2, [r3, #1404]	; 0x57c
 8014024:	4b0a      	ldr	r3, [pc, #40]	; (8014050 <preparePacket+0x138>)
 8014026:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
	Common.radio.txBuffer[22] = packetNumber;			// 22
 801402a:	4b12      	ldr	r3, [pc, #72]	; (8014074 <preparePacket+0x15c>)
 801402c:	781a      	ldrb	r2, [r3, #0]
 801402e:	4b08      	ldr	r3, [pc, #32]	; (8014050 <preparePacket+0x138>)
 8014030:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
	Common.radio.txLen = 23;
 8014034:	4b06      	ldr	r3, [pc, #24]	; (8014050 <preparePacket+0x138>)
 8014036:	2217      	movs	r2, #23
 8014038:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}
 801403c:	bf00      	nop
 801403e:	370c      	adds	r7, #12
 8014040:	46bd      	mov	sp, r7
 8014042:	bd90      	pop	{r4, r7, pc}
 8014044:	f3af 8000 	nop.w
 8014048:	aaaaaaab 	.word	0xaaaaaaab
 801404c:	3fe6aaaa 	.word	0x3fe6aaaa
 8014050:	20000b9c 	.word	0x20000b9c
 8014054:	447a0000 	.word	0x447a0000
 8014058:	461c4000 	.word	0x461c4000
 801405c:	20000ffa 	.word	0x20000ffa
 8014060:	20000ffe 	.word	0x20000ffe
 8014064:	20000cdc 	.word	0x20000cdc
 8014068:	20001002 	.word	0x20001002
 801406c:	20000ce0 	.word	0x20000ce0
 8014070:	20001006 	.word	0x20001006
 8014074:	20003840 	.word	0x20003840

08014078 <duplex_loop>:

static void duplex_loop(void)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	af00      	add	r7, sp, #0
	#if RADIO_ENABLE
		if (Common.radio.active && Common.radio.useDio0IRQ && duplex_checkINT())	// Manually check for interrupt
 801407c:	4b22      	ldr	r3, [pc, #136]	; (8014108 <duplex_loop+0x90>)
 801407e:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 8014082:	2b00      	cmp	r3, #0
 8014084:	d03e      	beq.n	8014104 <duplex_loop+0x8c>
 8014086:	4b20      	ldr	r3, [pc, #128]	; (8014108 <duplex_loop+0x90>)
 8014088:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 801408c:	2b00      	cmp	r3, #0
 801408e:	d039      	beq.n	8014104 <duplex_loop+0x8c>
 8014090:	f7ff fe80 	bl	8013d94 <duplex_checkINT>
 8014094:	4603      	mov	r3, r0
 8014096:	2b00      	cmp	r3, #0
 8014098:	d034      	beq.n	8014104 <duplex_loop+0x8c>
		{
			SX1278_dio0_IRQ(&(Common.radio));
 801409a:	481c      	ldr	r0, [pc, #112]	; (801410c <duplex_loop+0x94>)
 801409c:	f7ed fda8 	bl	8001bf0 <SX1278_dio0_IRQ>
			if (!transmitting)	// If in receiving mode: decode packet
 80140a0:	4b1b      	ldr	r3, [pc, #108]	; (8014110 <duplex_loop+0x98>)
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f083 0301 	eor.w	r3, r3, #1
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d009      	beq.n	80140c2 <duplex_loop+0x4a>
			{
				decodePacket();
 80140ae:	f7ff fe97 	bl	8013de0 <decodePacket>
				#if DUPLEX_DEBUG
					if (Common.radio.rxTimeout)
 80140b2:	4b15      	ldr	r3, [pc, #84]	; (8014108 <duplex_loop+0x90>)
 80140b4:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d002      	beq.n	80140c2 <duplex_loop+0x4a>
					{
						println("[DUPLEX] Receive timeout.");
 80140bc:	4815      	ldr	r0, [pc, #84]	; (8014114 <duplex_loop+0x9c>)
 80140be:	f7fe fe65 	bl	8012d8c <println>
					}
				#endif
			}

			transmitting = true;
 80140c2:	4b13      	ldr	r3, [pc, #76]	; (8014110 <duplex_loop+0x98>)
 80140c4:	2201      	movs	r2, #1
 80140c6:	701a      	strb	r2, [r3, #0]

			if (packetNumber == DUPLEX_TX_COUNT)
 80140c8:	4b13      	ldr	r3, [pc, #76]	; (8014118 <duplex_loop+0xa0>)
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	2b05      	cmp	r3, #5
 80140ce:	d109      	bne.n	80140e4 <duplex_loop+0x6c>
			{
				SX1278_receive(&(Common.radio));
 80140d0:	480e      	ldr	r0, [pc, #56]	; (801410c <duplex_loop+0x94>)
 80140d2:	f7ed fb87 	bl	80017e4 <SX1278_receive>
				packetNumber = 0;
 80140d6:	4b10      	ldr	r3, [pc, #64]	; (8014118 <duplex_loop+0xa0>)
 80140d8:	2200      	movs	r2, #0
 80140da:	701a      	strb	r2, [r3, #0]
				transmitting = false;
 80140dc:	4b0c      	ldr	r3, [pc, #48]	; (8014110 <duplex_loop+0x98>)
 80140de:	2200      	movs	r2, #0
 80140e0:	701a      	strb	r2, [r3, #0]
				return;
 80140e2:	e010      	b.n	8014106 <duplex_loop+0x8e>
			}
			else
			{
				preparePacket();
 80140e4:	f7ff ff18 	bl	8013f18 <preparePacket>
				SX1278_transmit(&(Common.radio), &(Common.radio.txBuffer), &(Common.radio.txLen));	// Packet is written directly to memory buffer of the instance
 80140e8:	4b0c      	ldr	r3, [pc, #48]	; (801411c <duplex_loop+0xa4>)
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	461a      	mov	r2, r3
 80140ee:	490c      	ldr	r1, [pc, #48]	; (8014120 <duplex_loop+0xa8>)
 80140f0:	4806      	ldr	r0, [pc, #24]	; (801410c <duplex_loop+0x94>)
 80140f2:	f7ed fb3b 	bl	800176c <SX1278_transmit>
				packetNumber++;
 80140f6:	4b08      	ldr	r3, [pc, #32]	; (8014118 <duplex_loop+0xa0>)
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	3301      	adds	r3, #1
 80140fc:	b2da      	uxtb	r2, r3
 80140fe:	4b06      	ldr	r3, [pc, #24]	; (8014118 <duplex_loop+0xa0>)
 8014100:	701a      	strb	r2, [r3, #0]
				return;
 8014102:	e000      	b.n	8014106 <duplex_loop+0x8e>
			}
		}
	#endif
	return;
 8014104:	bf00      	nop
}
 8014106:	bd80      	pop	{r7, pc}
 8014108:	20000b9c 	.word	0x20000b9c
 801410c:	20000eb0 	.word	0x20000eb0
 8014110:	20003841 	.word	0x20003841
 8014114:	0801de0c 	.word	0x0801de0c
 8014118:	20003840 	.word	0x20003840
 801411c:	20000ef6 	.word	0x20000ef6
 8014120:	20000ff8 	.word	0x20000ff8

08014124 <sensing_setup>:
//#include "sps30.h"

uint32_t lastBmpRead;

static bool sensing_setup(void)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
	(*Common.log_print)("*S00"); // [SENSING] Hello!
 801412a:	4bae      	ldr	r3, [pc, #696]	; (80143e4 <sensing_setup+0x2c0>)
 801412c:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014130:	48ad      	ldr	r0, [pc, #692]	; (80143e8 <sensing_setup+0x2c4>)
 8014132:	4798      	blx	r3
	uint8_t attempts;
	#if BMP_ENABLE
		attempts = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	71fb      	strb	r3, [r7, #7]
		Common.bmp.i2c_addr = BMP280_I2C_ADDRESS;
 8014138:	4baa      	ldr	r3, [pc, #680]	; (80143e4 <sensing_setup+0x2c0>)
 801413a:	22ee      	movs	r2, #238	; 0xee
 801413c:	809a      	strh	r2, [r3, #4]
		Common.bmp.i2c = Get_I2C1_Instance();
 801413e:	f001 fb19 	bl	8015774 <Get_I2C1_Instance>
 8014142:	4602      	mov	r2, r0
 8014144:	4ba7      	ldr	r3, [pc, #668]	; (80143e4 <sensing_setup+0x2c0>)
 8014146:	601a      	str	r2, [r3, #0]
		#if SENSING_DEBUG
			println("[SENSING] Initializing BMP280");
 8014148:	48a8      	ldr	r0, [pc, #672]	; (80143ec <sensing_setup+0x2c8>)
 801414a:	f7fe fe1f 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*S10");
 801414e:	4ba5      	ldr	r3, [pc, #660]	; (80143e4 <sensing_setup+0x2c0>)
 8014150:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014154:	48a6      	ldr	r0, [pc, #664]	; (80143f0 <sensing_setup+0x2cc>)
 8014156:	4798      	blx	r3
		
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 8014158:	e015      	b.n	8014186 <sensing_setup+0x62>
		{
			if (++attempts > 5)
 801415a:	79fb      	ldrb	r3, [r7, #7]
 801415c:	3301      	adds	r3, #1
 801415e:	71fb      	strb	r3, [r7, #7]
 8014160:	79fb      	ldrb	r3, [r7, #7]
 8014162:	2b05      	cmp	r3, #5
 8014164:	d908      	bls.n	8014178 <sensing_setup+0x54>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with BMP280, sensor is not active");
 8014166:	48a3      	ldr	r0, [pc, #652]	; (80143f4 <sensing_setup+0x2d0>)
 8014168:	f7fe fe10 	bl	8012d8c <println>
				#endif
				(*Common.log_print)("*ES10");
 801416c:	4b9d      	ldr	r3, [pc, #628]	; (80143e4 <sensing_setup+0x2c0>)
 801416e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014172:	48a1      	ldr	r0, [pc, #644]	; (80143f8 <sensing_setup+0x2d4>)
 8014174:	4798      	blx	r3
				break;
 8014176:	e010      	b.n	801419a <sensing_setup+0x76>
			}

			delay(500);
 8014178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801417c:	f7f2 f80a 	bl	8006194 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] BMP280 init unsuccesfull, retrying...");
 8014180:	489e      	ldr	r0, [pc, #632]	; (80143fc <sensing_setup+0x2d8>)
 8014182:	f7fe fe03 	bl	8012d8c <println>
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 8014186:	499e      	ldr	r1, [pc, #632]	; (8014400 <sensing_setup+0x2dc>)
 8014188:	4896      	ldr	r0, [pc, #600]	; (80143e4 <sensing_setup+0x2c0>)
 801418a:	f7ee f8fc 	bl	8002386 <bmp280_init>
 801418e:	4603      	mov	r3, r0
 8014190:	f083 0301 	eor.w	r3, r3, #1
 8014194:	b2db      	uxtb	r3, r3
 8014196:	2b00      	cmp	r3, #0
 8014198:	d1df      	bne.n	801415a <sensing_setup+0x36>
		(*Common.log_print)("*WS10");
		Common.bmp.active = false;
	#endif

	#if GPS_ENABLE
		attempts = 0;
 801419a:	2300      	movs	r3, #0
 801419c:	71fb      	strb	r3, [r7, #7]
		Common.gps.uart = Get_UART1_Instance();
 801419e:	f001 fafd 	bl	801579c <Get_UART1_Instance>
 80141a2:	4602      	mov	r2, r0
 80141a4:	4b8f      	ldr	r3, [pc, #572]	; (80143e4 <sensing_setup+0x2c0>)
 80141a6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		#if SENSING_DEBUG
			println("[SENSING] Initializing L86");
 80141aa:	4896      	ldr	r0, [pc, #600]	; (8014404 <sensing_setup+0x2e0>)
 80141ac:	f7fe fdee 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*S20");
 80141b0:	4b8c      	ldr	r3, [pc, #560]	; (80143e4 <sensing_setup+0x2c0>)
 80141b2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80141b6:	4894      	ldr	r0, [pc, #592]	; (8014408 <sensing_setup+0x2e4>)
 80141b8:	4798      	blx	r3

		while (!GPS_init(&(Common.gps)))
 80141ba:	e015      	b.n	80141e8 <sensing_setup+0xc4>
		{
			if (++attempts > 5)
 80141bc:	79fb      	ldrb	r3, [r7, #7]
 80141be:	3301      	adds	r3, #1
 80141c0:	71fb      	strb	r3, [r7, #7]
 80141c2:	79fb      	ldrb	r3, [r7, #7]
 80141c4:	2b05      	cmp	r3, #5
 80141c6:	d908      	bls.n	80141da <sensing_setup+0xb6>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with L86, no GPS data will be avaliable");
 80141c8:	4890      	ldr	r0, [pc, #576]	; (801440c <sensing_setup+0x2e8>)
 80141ca:	f7fe fddf 	bl	8012d8c <println>
				#endif
				(*Common.log_print)("*ES20");
 80141ce:	4b85      	ldr	r3, [pc, #532]	; (80143e4 <sensing_setup+0x2c0>)
 80141d0:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80141d4:	488e      	ldr	r0, [pc, #568]	; (8014410 <sensing_setup+0x2ec>)
 80141d6:	4798      	blx	r3
				break;
 80141d8:	e00f      	b.n	80141fa <sensing_setup+0xd6>
			}

			delay(500);
 80141da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80141de:	f7f1 ffd9 	bl	8006194 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] L86 init unsuccesfull, retrying...");
 80141e2:	488c      	ldr	r0, [pc, #560]	; (8014414 <sensing_setup+0x2f0>)
 80141e4:	f7fe fdd2 	bl	8012d8c <println>
		while (!GPS_init(&(Common.gps)))
 80141e8:	488b      	ldr	r0, [pc, #556]	; (8014418 <sensing_setup+0x2f4>)
 80141ea:	f7ee f9f1 	bl	80025d0 <GPS_init>
 80141ee:	4603      	mov	r3, r0
 80141f0:	f083 0301 	eor.w	r3, r3, #1
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1e0      	bne.n	80141bc <sensing_setup+0x98>
			#endif
		}
		if (Common.gps.active && !Common.gps.fix)
 80141fa:	4b7a      	ldr	r3, [pc, #488]	; (80143e4 <sensing_setup+0x2c0>)
 80141fc:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8014200:	2b00      	cmp	r3, #0
 8014202:	d013      	beq.n	801422c <sensing_setup+0x108>
 8014204:	4b77      	ldr	r3, [pc, #476]	; (80143e4 <sensing_setup+0x2c0>)
 8014206:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 801420a:	f083 0301 	eor.w	r3, r3, #1
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b00      	cmp	r3, #0
 8014212:	d00b      	beq.n	801422c <sensing_setup+0x108>
		{
			Common.gps.latitudeDegrees = DEFAULT_TARGET_LAT;
 8014214:	4b73      	ldr	r3, [pc, #460]	; (80143e4 <sensing_setup+0x2c0>)
 8014216:	4a81      	ldr	r2, [pc, #516]	; (801441c <sensing_setup+0x2f8>)
 8014218:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			Common.gps.longitudeDegrees = DEFAULT_TARGET_LON;
 801421c:	4b71      	ldr	r3, [pc, #452]	; (80143e4 <sensing_setup+0x2c0>)
 801421e:	4a80      	ldr	r2, [pc, #512]	; (8014420 <sensing_setup+0x2fc>)
 8014220:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			Common.gps.altitude = DEFAULT_TARGET_ALT;
 8014224:	4b6f      	ldr	r3, [pc, #444]	; (80143e4 <sensing_setup+0x2c0>)
 8014226:	4a7f      	ldr	r2, [pc, #508]	; (8014424 <sensing_setup+0x300>)
 8014228:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		(*Common.log_print)("*WS20");
		Common.gps.active = false;
	#endif

	#if IMU_ENABLE
		attempts = 0;
 801422c:	2300      	movs	r3, #0
 801422e:	71fb      	strb	r3, [r7, #7]
		Common.mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 8014230:	4b6c      	ldr	r3, [pc, #432]	; (80143e4 <sensing_setup+0x2c0>)
 8014232:	22d2      	movs	r2, #210	; 0xd2
 8014234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		Common.mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 8014238:	4b6a      	ldr	r3, [pc, #424]	; (80143e4 <sensing_setup+0x2c0>)
 801423a:	2218      	movs	r2, #24
 801423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		Common.mpu.i2c = Get_I2C1_Instance();
 8014240:	f001 fa98 	bl	8015774 <Get_I2C1_Instance>
 8014244:	4602      	mov	r2, r0
 8014246:	4b67      	ldr	r3, [pc, #412]	; (80143e4 <sensing_setup+0x2c0>)
 8014248:	639a      	str	r2, [r3, #56]	; 0x38
		#if SENSING_DEBUG
			println("[SENSING] Initializing MPU9250");
 801424a:	4877      	ldr	r0, [pc, #476]	; (8014428 <sensing_setup+0x304>)
 801424c:	f7fe fd9e 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*S30");
 8014250:	4b64      	ldr	r3, [pc, #400]	; (80143e4 <sensing_setup+0x2c0>)
 8014252:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014256:	4875      	ldr	r0, [pc, #468]	; (801442c <sensing_setup+0x308>)
 8014258:	4798      	blx	r3

		Common.mpu.active = true;
 801425a:	4b62      	ldr	r3, [pc, #392]	; (80143e4 <sensing_setup+0x2c0>)
 801425c:	2201      	movs	r2, #1
 801425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		while (!MPU9250_present(&(Common.mpu)))
 8014262:	e019      	b.n	8014298 <sensing_setup+0x174>
		{
			if (++attempts > 5)
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	3301      	adds	r3, #1
 8014268:	71fb      	strb	r3, [r7, #7]
 801426a:	79fb      	ldrb	r3, [r7, #7]
 801426c:	2b05      	cmp	r3, #5
 801426e:	d90c      	bls.n	801428a <sensing_setup+0x166>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with MPU9250, no IMU data will be avaliable");
 8014270:	486f      	ldr	r0, [pc, #444]	; (8014430 <sensing_setup+0x30c>)
 8014272:	f7fe fd8b 	bl	8012d8c <println>
				#endif
				(*Common.log_print)("*ES30");
 8014276:	4b5b      	ldr	r3, [pc, #364]	; (80143e4 <sensing_setup+0x2c0>)
 8014278:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 801427c:	486d      	ldr	r0, [pc, #436]	; (8014434 <sensing_setup+0x310>)
 801427e:	4798      	blx	r3
				Common.mpu.active = false;
 8014280:	4b58      	ldr	r3, [pc, #352]	; (80143e4 <sensing_setup+0x2c0>)
 8014282:	2200      	movs	r2, #0
 8014284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				break;
 8014288:	e00f      	b.n	80142aa <sensing_setup+0x186>
			}

			delay(500);
 801428a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801428e:	f7f1 ff81 	bl	8006194 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] MPU9250 init unsuccesfull, retrying...");
 8014292:	4869      	ldr	r0, [pc, #420]	; (8014438 <sensing_setup+0x314>)
 8014294:	f7fe fd7a 	bl	8012d8c <println>
		while (!MPU9250_present(&(Common.mpu)))
 8014298:	4868      	ldr	r0, [pc, #416]	; (801443c <sensing_setup+0x318>)
 801429a:	f7ef ff17 	bl	80040cc <MPU9250_present>
 801429e:	4603      	mov	r3, r0
 80142a0:	f083 0301 	eor.w	r3, r3, #1
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d1dc      	bne.n	8014264 <sensing_setup+0x140>
			#endif
		}
		if (Common.mpu.active)
 80142aa:	4b4e      	ldr	r3, [pc, #312]	; (80143e4 <sensing_setup+0x2c0>)
 80142ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d02b      	beq.n	801430c <sensing_setup+0x1e8>
		{
			#if SENSING_DEBUG
				println("[SENSING] Initializing AK8963");
 80142b4:	4862      	ldr	r0, [pc, #392]	; (8014440 <sensing_setup+0x31c>)
 80142b6:	f7fe fd69 	bl	8012d8c <println>
			#endif
			(*Common.log_print)("*S31");
 80142ba:	4b4a      	ldr	r3, [pc, #296]	; (80143e4 <sensing_setup+0x2c0>)
 80142bc:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80142c0:	4860      	ldr	r0, [pc, #384]	; (8014444 <sensing_setup+0x320>)
 80142c2:	4798      	blx	r3
			while (!AK8963_present(&(Common.mpu)))
 80142c4:	e019      	b.n	80142fa <sensing_setup+0x1d6>
			{
				if (++attempts > 5)
 80142c6:	79fb      	ldrb	r3, [r7, #7]
 80142c8:	3301      	adds	r3, #1
 80142ca:	71fb      	strb	r3, [r7, #7]
 80142cc:	79fb      	ldrb	r3, [r7, #7]
 80142ce:	2b05      	cmp	r3, #5
 80142d0:	d90c      	bls.n	80142ec <sensing_setup+0x1c8>
				{
					#if SENSING_DEBUG
						println("error: [SENSING] No connection with AK8963, no IMU data will be avaliable");
 80142d2:	485d      	ldr	r0, [pc, #372]	; (8014448 <sensing_setup+0x324>)
 80142d4:	f7fe fd5a 	bl	8012d8c <println>
					#endif
					(*Common.log_print)("*ES31");
 80142d8:	4b42      	ldr	r3, [pc, #264]	; (80143e4 <sensing_setup+0x2c0>)
 80142da:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80142de:	485b      	ldr	r0, [pc, #364]	; (801444c <sensing_setup+0x328>)
 80142e0:	4798      	blx	r3
					Common.mpu.active = false;
 80142e2:	4b40      	ldr	r3, [pc, #256]	; (80143e4 <sensing_setup+0x2c0>)
 80142e4:	2200      	movs	r2, #0
 80142e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					break;
 80142ea:	e00f      	b.n	801430c <sensing_setup+0x1e8>
				}

				delay(500);
 80142ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80142f0:	f7f1 ff50 	bl	8006194 <HAL_Delay>
				#if SENSING_DEBUG
					println("[SENSING] AK8963 init unsuccesfull, retrying...");
 80142f4:	4856      	ldr	r0, [pc, #344]	; (8014450 <sensing_setup+0x32c>)
 80142f6:	f7fe fd49 	bl	8012d8c <println>
			while (!AK8963_present(&(Common.mpu)))
 80142fa:	4850      	ldr	r0, [pc, #320]	; (801443c <sensing_setup+0x318>)
 80142fc:	f7ef fef8 	bl	80040f0 <AK8963_present>
 8014300:	4603      	mov	r3, r0
 8014302:	f083 0301 	eor.w	r3, r3, #1
 8014306:	b2db      	uxtb	r3, r3
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1dc      	bne.n	80142c6 <sensing_setup+0x1a2>
				#endif
			}
		}
		if (Common.mpu.active)
 801430c:	4b35      	ldr	r3, [pc, #212]	; (80143e4 <sensing_setup+0x2c0>)
 801430e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014312:	2b00      	cmp	r3, #0
 8014314:	d051      	beq.n	80143ba <sensing_setup+0x296>
		{	
			#if SENSING_DEBUG
					println("[SENSING] Checking MPU9250 readings. Don't move the board!");
 8014316:	484f      	ldr	r0, [pc, #316]	; (8014454 <sensing_setup+0x330>)
 8014318:	f7fe fd38 	bl	8012d8c <println>
			#endif
			(*Common.log_print)("*S32");
 801431c:	4b31      	ldr	r3, [pc, #196]	; (80143e4 <sensing_setup+0x2c0>)
 801431e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014322:	484d      	ldr	r0, [pc, #308]	; (8014458 <sensing_setup+0x334>)
 8014324:	4798      	blx	r3
			attempts = 0;
 8014326:	2300      	movs	r3, #0
 8014328:	71fb      	strb	r3, [r7, #7]
			
			delay(500);
 801432a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801432e:	f7f1 ff31 	bl	8006194 <HAL_Delay>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8014332:	e015      	b.n	8014360 <sensing_setup+0x23c>
			{
				if (++attempts > 5)
 8014334:	79fb      	ldrb	r3, [r7, #7]
 8014336:	3301      	adds	r3, #1
 8014338:	71fb      	strb	r3, [r7, #7]
 801433a:	79fb      	ldrb	r3, [r7, #7]
 801433c:	2b05      	cmp	r3, #5
 801433e:	d908      	bls.n	8014352 <sensing_setup+0x22e>
				{
					#if SENSING_DEBUG
						println("warning: [SENSING] MPU9250 SelfTest not passed, performance issues may occur");
 8014340:	4846      	ldr	r0, [pc, #280]	; (801445c <sensing_setup+0x338>)
 8014342:	f7fe fd23 	bl	8012d8c <println>
					#endif
					(*Common.log_print)("*WS32");
 8014346:	4b27      	ldr	r3, [pc, #156]	; (80143e4 <sensing_setup+0x2c0>)
 8014348:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 801434c:	4844      	ldr	r0, [pc, #272]	; (8014460 <sensing_setup+0x33c>)
 801434e:	4798      	blx	r3
					break;
 8014350:	e00f      	b.n	8014372 <sensing_setup+0x24e>
				}
				
				delay(500);
 8014352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014356:	f7f1 ff1d 	bl	8006194 <HAL_Delay>
				#if SENSING_DEBUG
					println("[SENSING] MPU9250 SelfTest failed, retrying...");
 801435a:	4842      	ldr	r0, [pc, #264]	; (8014464 <sensing_setup+0x340>)
 801435c:	f7fe fd16 	bl	8012d8c <println>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8014360:	4836      	ldr	r0, [pc, #216]	; (801443c <sensing_setup+0x318>)
 8014362:	f7f0 f9b9 	bl	80046d8 <MPU9250_SelfTest>
 8014366:	4603      	mov	r3, r0
 8014368:	f083 0301 	eor.w	r3, r3, #1
 801436c:	b2db      	uxtb	r3, r3
 801436e:	2b00      	cmp	r3, #0
 8014370:	d1e0      	bne.n	8014334 <sensing_setup+0x210>
				#endif
			}
			(*Common.log_print)("*S33");
 8014372:	4b1c      	ldr	r3, [pc, #112]	; (80143e4 <sensing_setup+0x2c0>)
 8014374:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014378:	483b      	ldr	r0, [pc, #236]	; (8014468 <sensing_setup+0x344>)
 801437a:	4798      	blx	r3
			if (mpu9250_default_config.calibrate)
 801437c:	4b3b      	ldr	r3, [pc, #236]	; (801446c <sensing_setup+0x348>)
 801437e:	7c1b      	ldrb	r3, [r3, #16]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d003      	beq.n	801438c <sensing_setup+0x268>
			{
				#if SENSING_DEBUG
					println("[SENSING] Performing MPU9250 calibration. Don't move the board!");
 8014384:	483a      	ldr	r0, [pc, #232]	; (8014470 <sensing_setup+0x34c>)
 8014386:	f7fe fd01 	bl	8012d8c <println>
 801438a:	e007      	b.n	801439c <sensing_setup+0x278>
				#endif
			}
			else
			{
				#if SENSING_DEBUG
					println("warning: [SENSING] Skipping IMU calibration!");
 801438c:	4839      	ldr	r0, [pc, #228]	; (8014474 <sensing_setup+0x350>)
 801438e:	f7fe fcfd 	bl	8012d8c <println>
				#endif
				(*Common.log_print)("*WS33");
 8014392:	4b14      	ldr	r3, [pc, #80]	; (80143e4 <sensing_setup+0x2c0>)
 8014394:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014398:	4837      	ldr	r0, [pc, #220]	; (8014478 <sensing_setup+0x354>)
 801439a:	4798      	blx	r3
			}
			MPU9250_init(&(Common.mpu), &mpu9250_default_config);
 801439c:	4933      	ldr	r1, [pc, #204]	; (801446c <sensing_setup+0x348>)
 801439e:	4827      	ldr	r0, [pc, #156]	; (801443c <sensing_setup+0x318>)
 80143a0:	f7ef fcb2 	bl	8003d08 <MPU9250_init>
			if (mpu9250_default_config.calibrate)
 80143a4:	4b31      	ldr	r3, [pc, #196]	; (801446c <sensing_setup+0x348>)
 80143a6:	7c1b      	ldrb	r3, [r3, #16]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d002      	beq.n	80143b2 <sensing_setup+0x28e>
			{
				#if SENSING_DEBUG
					println("[SENSING] Performing AK8963 calibration. Rotate the board.");
 80143ac:	4833      	ldr	r0, [pc, #204]	; (801447c <sensing_setup+0x358>)
 80143ae:	f7fe fced 	bl	8012d8c <println>
				#endif
			}
			AK8963_init(&(Common.mpu), &mpu9250_default_config);
 80143b2:	492e      	ldr	r1, [pc, #184]	; (801446c <sensing_setup+0x348>)
 80143b4:	4821      	ldr	r0, [pc, #132]	; (801443c <sensing_setup+0x318>)
 80143b6:	f7ef fde3 	bl	8003f80 <AK8963_init>
		(*Common.log_print)("*WS30");
		Common.gps.active = false;
	#endif

	#if SENSING_DEBUG
		println("[SENSING] Sensor init summary:");
 80143ba:	4831      	ldr	r0, [pc, #196]	; (8014480 <sensing_setup+0x35c>)
 80143bc:	f7fe fce6 	bl	8012d8c <println>
		println("- BMP %s", Common.bmp.active ? "active" : "not active");
 80143c0:	4b08      	ldr	r3, [pc, #32]	; (80143e4 <sensing_setup+0x2c0>)
 80143c2:	7f1b      	ldrb	r3, [r3, #28]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d001      	beq.n	80143cc <sensing_setup+0x2a8>
 80143c8:	4b2e      	ldr	r3, [pc, #184]	; (8014484 <sensing_setup+0x360>)
 80143ca:	e000      	b.n	80143ce <sensing_setup+0x2aa>
 80143cc:	4b2e      	ldr	r3, [pc, #184]	; (8014488 <sensing_setup+0x364>)
 80143ce:	4619      	mov	r1, r3
 80143d0:	482e      	ldr	r0, [pc, #184]	; (801448c <sensing_setup+0x368>)
 80143d2:	f7fe fcdb 	bl	8012d8c <println>
		println("- GPS %s", Common.gps.active ? "active" : "not active");
 80143d6:	4b03      	ldr	r3, [pc, #12]	; (80143e4 <sensing_setup+0x2c0>)
 80143d8:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d057      	beq.n	8014490 <sensing_setup+0x36c>
 80143e0:	4b28      	ldr	r3, [pc, #160]	; (8014484 <sensing_setup+0x360>)
 80143e2:	e056      	b.n	8014492 <sensing_setup+0x36e>
 80143e4:	20000b9c 	.word	0x20000b9c
 80143e8:	0801de28 	.word	0x0801de28
 80143ec:	0801de30 	.word	0x0801de30
 80143f0:	0801de50 	.word	0x0801de50
 80143f4:	0801de58 	.word	0x0801de58
 80143f8:	0801de9c 	.word	0x0801de9c
 80143fc:	0801dea4 	.word	0x0801dea4
 8014400:	20000124 	.word	0x20000124
 8014404:	0801ded4 	.word	0x0801ded4
 8014408:	0801def0 	.word	0x0801def0
 801440c:	0801def8 	.word	0x0801def8
 8014410:	0801df40 	.word	0x0801df40
 8014414:	0801df48 	.word	0x0801df48
 8014418:	20000c90 	.word	0x20000c90
 801441c:	42480000 	.word	0x42480000
 8014420:	41980000 	.word	0x41980000
 8014424:	43fa0000 	.word	0x43fa0000
 8014428:	0801df78 	.word	0x0801df78
 801442c:	0801df98 	.word	0x0801df98
 8014430:	0801dfa0 	.word	0x0801dfa0
 8014434:	0801dfec 	.word	0x0801dfec
 8014438:	0801dff4 	.word	0x0801dff4
 801443c:	20000bd4 	.word	0x20000bd4
 8014440:	0801e028 	.word	0x0801e028
 8014444:	0801e048 	.word	0x0801e048
 8014448:	0801e050 	.word	0x0801e050
 801444c:	0801e09c 	.word	0x0801e09c
 8014450:	0801e0a4 	.word	0x0801e0a4
 8014454:	0801e0d4 	.word	0x0801e0d4
 8014458:	0801e110 	.word	0x0801e110
 801445c:	0801e118 	.word	0x0801e118
 8014460:	0801e168 	.word	0x0801e168
 8014464:	0801e170 	.word	0x0801e170
 8014468:	0801e1a0 	.word	0x0801e1a0
 801446c:	2000012c 	.word	0x2000012c
 8014470:	0801e1a8 	.word	0x0801e1a8
 8014474:	0801e1e8 	.word	0x0801e1e8
 8014478:	0801e218 	.word	0x0801e218
 801447c:	0801e220 	.word	0x0801e220
 8014480:	0801e25c 	.word	0x0801e25c
 8014484:	0801e27c 	.word	0x0801e27c
 8014488:	0801e284 	.word	0x0801e284
 801448c:	0801e290 	.word	0x0801e290
 8014490:	4b22      	ldr	r3, [pc, #136]	; (801451c <sensing_setup+0x3f8>)
 8014492:	4619      	mov	r1, r3
 8014494:	4822      	ldr	r0, [pc, #136]	; (8014520 <sensing_setup+0x3fc>)
 8014496:	f7fe fc79 	bl	8012d8c <println>
		println("- IMU %s", Common.mpu.active ? "active" : "not active");
 801449a:	4b22      	ldr	r3, [pc, #136]	; (8014524 <sensing_setup+0x400>)
 801449c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <sensing_setup+0x384>
 80144a4:	4b20      	ldr	r3, [pc, #128]	; (8014528 <sensing_setup+0x404>)
 80144a6:	e000      	b.n	80144aa <sensing_setup+0x386>
 80144a8:	4b1c      	ldr	r3, [pc, #112]	; (801451c <sensing_setup+0x3f8>)
 80144aa:	4619      	mov	r1, r3
 80144ac:	481f      	ldr	r0, [pc, #124]	; (801452c <sensing_setup+0x408>)
 80144ae:	f7fe fc6d 	bl	8012d8c <println>
	#endif
	if (!Common.bmp.active || !Common.gps.active || !Common.mpu.active) (*Common.log_print)("*WS00");
 80144b2:	4b1c      	ldr	r3, [pc, #112]	; (8014524 <sensing_setup+0x400>)
 80144b4:	7f1b      	ldrb	r3, [r3, #28]
 80144b6:	f083 0301 	eor.w	r3, r3, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10f      	bne.n	80144e0 <sensing_setup+0x3bc>
 80144c0:	4b18      	ldr	r3, [pc, #96]	; (8014524 <sensing_setup+0x400>)
 80144c2:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80144c6:	f083 0301 	eor.w	r3, r3, #1
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d107      	bne.n	80144e0 <sensing_setup+0x3bc>
 80144d0:	4b14      	ldr	r3, [pc, #80]	; (8014524 <sensing_setup+0x400>)
 80144d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144d6:	f083 0301 	eor.w	r3, r3, #1
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d004      	beq.n	80144ea <sensing_setup+0x3c6>
 80144e0:	4b10      	ldr	r3, [pc, #64]	; (8014524 <sensing_setup+0x400>)
 80144e2:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 80144e6:	4812      	ldr	r0, [pc, #72]	; (8014530 <sensing_setup+0x40c>)
 80144e8:	4798      	blx	r3

	return (Common.bmp.active || !BMP_ENABLE) && (Common.gps.active || !GPS_ENABLE) && (Common.mpu.active || !IMU_ENABLE);
 80144ea:	4b0e      	ldr	r3, [pc, #56]	; (8014524 <sensing_setup+0x400>)
 80144ec:	7f1b      	ldrb	r3, [r3, #28]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00b      	beq.n	801450a <sensing_setup+0x3e6>
 80144f2:	4b0c      	ldr	r3, [pc, #48]	; (8014524 <sensing_setup+0x400>)
 80144f4:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d006      	beq.n	801450a <sensing_setup+0x3e6>
 80144fc:	4b09      	ldr	r3, [pc, #36]	; (8014524 <sensing_setup+0x400>)
 80144fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014502:	2b00      	cmp	r3, #0
 8014504:	d001      	beq.n	801450a <sensing_setup+0x3e6>
 8014506:	2301      	movs	r3, #1
 8014508:	e000      	b.n	801450c <sensing_setup+0x3e8>
 801450a:	2300      	movs	r3, #0
 801450c:	f003 0301 	and.w	r3, r3, #1
 8014510:	b2db      	uxtb	r3, r3
}
 8014512:	4618      	mov	r0, r3
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}
 801451a:	bf00      	nop
 801451c:	0801e284 	.word	0x0801e284
 8014520:	0801e29c 	.word	0x0801e29c
 8014524:	20000b9c 	.word	0x20000b9c
 8014528:	0801e27c 	.word	0x0801e27c
 801452c:	0801e2a8 	.word	0x0801e2a8
 8014530:	0801e2b4 	.word	0x0801e2b4

08014534 <sensing_loop>:

static void sensing_loop(void)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	af00      	add	r7, sp, #0
	#if BMP_ENABLE
		if (Common.bmp.active && millis() - lastBmpRead >= SENSING_BMP_DELAY)
 8014538:	4b25      	ldr	r3, [pc, #148]	; (80145d0 <sensing_loop+0x9c>)
 801453a:	7f1b      	ldrb	r3, [r3, #28]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d034      	beq.n	80145aa <sensing_loop+0x76>
 8014540:	f7fe fbc4 	bl	8012ccc <millis>
 8014544:	4602      	mov	r2, r0
 8014546:	4b23      	ldr	r3, [pc, #140]	; (80145d4 <sensing_loop+0xa0>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	2b31      	cmp	r3, #49	; 0x31
 801454e:	d92c      	bls.n	80145aa <sensing_loop+0x76>
		{
			Common.bmp.alt_dx = Common.bmp.altitude;
 8014550:	4b1f      	ldr	r3, [pc, #124]	; (80145d0 <sensing_loop+0x9c>)
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	4a1e      	ldr	r2, [pc, #120]	; (80145d0 <sensing_loop+0x9c>)
 8014556:	6193      	str	r3, [r2, #24]
			bmp280_update(&(Common.bmp));
 8014558:	481d      	ldr	r0, [pc, #116]	; (80145d0 <sensing_loop+0x9c>)
 801455a:	f7ed ff99 	bl	8002490 <bmp280_update>
			Common.bmp.alt_dx -= Common.bmp.altitude;
 801455e:	4b1c      	ldr	r3, [pc, #112]	; (80145d0 <sensing_loop+0x9c>)
 8014560:	ed93 7a06 	vldr	s14, [r3, #24]
 8014564:	4b1a      	ldr	r3, [pc, #104]	; (80145d0 <sensing_loop+0x9c>)
 8014566:	edd3 7a05 	vldr	s15, [r3, #20]
 801456a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801456e:	4b18      	ldr	r3, [pc, #96]	; (80145d0 <sensing_loop+0x9c>)
 8014570:	edc3 7a06 	vstr	s15, [r3, #24]
			Common.bmp.alt_dx *= 1000 / (millis() - lastBmpRead);
 8014574:	f7fe fbaa 	bl	8012ccc <millis>
 8014578:	4602      	mov	r2, r0
 801457a:	4b16      	ldr	r3, [pc, #88]	; (80145d4 <sensing_loop+0xa0>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	1ad3      	subs	r3, r2, r3
 8014580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014584:	fbb2 f2f3 	udiv	r2, r2, r3
 8014588:	4b11      	ldr	r3, [pc, #68]	; (80145d0 <sensing_loop+0x9c>)
 801458a:	ed93 7a06 	vldr	s14, [r3, #24]
 801458e:	ee07 2a90 	vmov	s15, r2
 8014592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801459a:	4b0d      	ldr	r3, [pc, #52]	; (80145d0 <sensing_loop+0x9c>)
 801459c:	edc3 7a06 	vstr	s15, [r3, #24]
			lastBmpRead = millis();
 80145a0:	f7fe fb94 	bl	8012ccc <millis>
 80145a4:	4602      	mov	r2, r0
 80145a6:	4b0b      	ldr	r3, [pc, #44]	; (80145d4 <sensing_loop+0xa0>)
 80145a8:	601a      	str	r2, [r3, #0]
		}
	#endif

	#if GPS_ENABLE
		if (Common.gps.active) GPS_update(&(Common.gps));
 80145aa:	4b09      	ldr	r3, [pc, #36]	; (80145d0 <sensing_loop+0x9c>)
 80145ac:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d002      	beq.n	80145ba <sensing_loop+0x86>
 80145b4:	4808      	ldr	r0, [pc, #32]	; (80145d8 <sensing_loop+0xa4>)
 80145b6:	f7ee f927 	bl	8002808 <GPS_update>
	#endif

	#if IMU_ENABLE
		if (Common.mpu.active) MPU9250_update(&(Common.mpu));
 80145ba:	4b05      	ldr	r3, [pc, #20]	; (80145d0 <sensing_loop+0x9c>)
 80145bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d002      	beq.n	80145ca <sensing_loop+0x96>
 80145c4:	4805      	ldr	r0, [pc, #20]	; (80145dc <sensing_loop+0xa8>)
 80145c6:	f7ef fda5 	bl	8004114 <MPU9250_update>
	#endif

	//SPS30
}
 80145ca:	bf00      	nop
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	20000b9c 	.word	0x20000b9c
 80145d4:	200078f0 	.word	0x200078f0
 80145d8:	20000c90 	.word	0x20000c90
 80145dc:	20000bd4 	.word	0x20000bd4

080145e0 <PID>:
uint32_t lastAlgo;

float yaw_last_error;

static void PID(float yaw, float target_yaw)
{
 80145e0:	b5b0      	push	{r4, r5, r7, lr}
 80145e2:	ed2d 8b02 	vpush	{d8}
 80145e6:	b08a      	sub	sp, #40	; 0x28
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80145ee:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.6;	// scale of motor power
 80145f2:	4b87      	ldr	r3, [pc, #540]	; (8014810 <PID+0x230>)
 80145f4:	61bb      	str	r3, [r7, #24]
	float TurboMode= 50.0;
 80145f6:	4b87      	ldr	r3, [pc, #540]	; (8014814 <PID+0x234>)
 80145f8:	617b      	str	r3, [r7, #20]
	float error= target_yaw-yaw;
 80145fa:	ed97 7a00 	vldr	s14, [r7]
 80145fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8014602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014606:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float thrust;

	if (error<-180.0) //ulomne modulo
 801460a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801460e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8014818 <PID+0x238>
 8014612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461a:	d50c      	bpl.n	8014636 <PID+0x56>
		error = target_yaw-yaw+360.0;
 801461c:	ed97 7a00 	vldr	s14, [r7]
 8014620:	edd7 7a01 	vldr	s15, [r7, #4]
 8014624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014628:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 801481c <PID+0x23c>
 801462c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014630:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8014634:	e014      	b.n	8014660 <PID+0x80>
	else if (error>180.0)
 8014636:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801463a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8014820 <PID+0x240>
 801463e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014646:	dd0b      	ble.n	8014660 <PID+0x80>
		error = target_yaw-yaw-360.0;
 8014648:	ed97 7a00 	vldr	s14, [r7]
 801464c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014654:	ed9f 7a71 	vldr	s14, [pc, #452]	; 801481c <PID+0x23c>
 8014658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801465c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (error>-10 && error<10)
 8014660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014664:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8014668:	eef4 7ac7 	vcmpe.f32	s15, s14
 801466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014670:	dd0b      	ble.n	801468a <PID+0xaa>
 8014672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014676:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801467a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014682:	d502      	bpl.n	801468a <PID+0xaa>
		thrust = 340.0;
 8014684:	4b67      	ldr	r3, [pc, #412]	; (8014824 <PID+0x244>)
 8014686:	623b      	str	r3, [r7, #32]
 8014688:	e007      	b.n	801469a <PID+0xba>
	else
		thrust = 180.0+TurboMode;
 801468a:	edd7 7a05 	vldr	s15, [r7, #20]
 801468e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8014820 <PID+0x240>
 8014692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014696:	edc7 7a08 	vstr	s15, [r7, #32]

	float pid_p, pid_i, pid_d;

	pid_p=PID_kp*error;
 801469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469c:	613b      	str	r3, [r7, #16]
	pid_d=PID_kd*((error-yaw_last_error)/(millis() - lastAlgo));
 801469e:	4b62      	ldr	r3, [pc, #392]	; (8014828 <PID+0x248>)
 80146a0:	edd3 7a00 	vldr	s15, [r3]
 80146a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80146a8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80146ac:	f7fe fb0e 	bl	8012ccc <millis>
 80146b0:	4602      	mov	r2, r0
 80146b2:	4b5e      	ldr	r3, [pc, #376]	; (801482c <PID+0x24c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	1ad3      	subs	r3, r2, r3
 80146b8:	ee07 3a90 	vmov	s15, r3
 80146bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80146c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80146c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8014830 <PID+0x250>
 80146c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146cc:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID_coef;
	//if (error>-15 && error <15)
	//	PID_coef=pid_p+pid_d+pid_i;
	//else
		PID_coef=pid_p+pid_d;
 80146d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80146d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80146d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146dc:	edc7 7a07 	vstr	s15, [r7, #28]

	if (PID_coef>180.0-TurboMode)
 80146e0:	69f8      	ldr	r0, [r7, #28]
 80146e2:	f7eb ff41 	bl	8000568 <__aeabi_f2d>
 80146e6:	4604      	mov	r4, r0
 80146e8:	460d      	mov	r5, r1
 80146ea:	6978      	ldr	r0, [r7, #20]
 80146ec:	f7eb ff3c 	bl	8000568 <__aeabi_f2d>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	f04f 0000 	mov.w	r0, #0
 80146f8:	494e      	ldr	r1, [pc, #312]	; (8014834 <PID+0x254>)
 80146fa:	f7eb fdd5 	bl	80002a8 <__aeabi_dsub>
 80146fe:	4602      	mov	r2, r0
 8014700:	460b      	mov	r3, r1
 8014702:	4620      	mov	r0, r4
 8014704:	4629      	mov	r1, r5
 8014706:	f7ec fa17 	bl	8000b38 <__aeabi_dcmpgt>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d008      	beq.n	8014722 <PID+0x142>
			PID_coef=180.0-TurboMode;
 8014710:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014820 <PID+0x240>
 8014714:	edd7 7a05 	vldr	s15, [r7, #20]
 8014718:	ee77 7a67 	vsub.f32	s15, s14, s15
 801471c:	edc7 7a07 	vstr	s15, [r7, #28]
 8014720:	e01d      	b.n	801475e <PID+0x17e>
		else if (PID_coef<-180.0+TurboMode)
 8014722:	69f8      	ldr	r0, [r7, #28]
 8014724:	f7eb ff20 	bl	8000568 <__aeabi_f2d>
 8014728:	4604      	mov	r4, r0
 801472a:	460d      	mov	r5, r1
 801472c:	6978      	ldr	r0, [r7, #20]
 801472e:	f7eb ff1b 	bl	8000568 <__aeabi_f2d>
 8014732:	f04f 0200 	mov.w	r2, #0
 8014736:	4b3f      	ldr	r3, [pc, #252]	; (8014834 <PID+0x254>)
 8014738:	f7eb fdb6 	bl	80002a8 <__aeabi_dsub>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	4620      	mov	r0, r4
 8014742:	4629      	mov	r1, r5
 8014744:	f7ec f9da 	bl	8000afc <__aeabi_dcmplt>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d007      	beq.n	801475e <PID+0x17e>
			PID_coef=-180.0+TurboMode;
 801474e:	edd7 7a05 	vldr	s15, [r7, #20]
 8014752:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014820 <PID+0x240>
 8014756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801475a:	edc7 7a07 	vstr	s15, [r7, #28]

	setMotors((thrust - PID_coef) * maxPower * (1.0 / 360.0), (thrust + PID_coef) * maxPower * (1.0 / 360.0) * 0.92);
 801475e:	ed97 7a08 	vldr	s14, [r7, #32]
 8014762:	edd7 7a07 	vldr	s15, [r7, #28]
 8014766:	ee37 7a67 	vsub.f32	s14, s14, s15
 801476a:	edd7 7a06 	vldr	s15, [r7, #24]
 801476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014772:	ee17 0a90 	vmov	r0, s15
 8014776:	f7eb fef7 	bl	8000568 <__aeabi_f2d>
 801477a:	a321      	add	r3, pc, #132	; (adr r3, 8014800 <PID+0x220>)
 801477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014780:	f7eb ff4a 	bl	8000618 <__aeabi_dmul>
 8014784:	4603      	mov	r3, r0
 8014786:	460c      	mov	r4, r1
 8014788:	4618      	mov	r0, r3
 801478a:	4621      	mov	r1, r4
 801478c:	f7ec fa3c 	bl	8000c08 <__aeabi_d2f>
 8014790:	4605      	mov	r5, r0
 8014792:	ed97 7a08 	vldr	s14, [r7, #32]
 8014796:	edd7 7a07 	vldr	s15, [r7, #28]
 801479a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801479e:	edd7 7a06 	vldr	s15, [r7, #24]
 80147a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147a6:	ee17 0a90 	vmov	r0, s15
 80147aa:	f7eb fedd 	bl	8000568 <__aeabi_f2d>
 80147ae:	a314      	add	r3, pc, #80	; (adr r3, 8014800 <PID+0x220>)
 80147b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b4:	f7eb ff30 	bl	8000618 <__aeabi_dmul>
 80147b8:	4603      	mov	r3, r0
 80147ba:	460c      	mov	r4, r1
 80147bc:	4618      	mov	r0, r3
 80147be:	4621      	mov	r1, r4
 80147c0:	a311      	add	r3, pc, #68	; (adr r3, 8014808 <PID+0x228>)
 80147c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c6:	f7eb ff27 	bl	8000618 <__aeabi_dmul>
 80147ca:	4603      	mov	r3, r0
 80147cc:	460c      	mov	r4, r1
 80147ce:	4618      	mov	r0, r3
 80147d0:	4621      	mov	r1, r4
 80147d2:	f7ec fa19 	bl	8000c08 <__aeabi_d2f>
 80147d6:	4603      	mov	r3, r0
 80147d8:	ee00 3a90 	vmov	s1, r3
 80147dc:	ee00 5a10 	vmov	s0, r5
 80147e0:	f7ec fc32 	bl	8001048 <setMotors>

	//setMotors(maxPower, maxPower*0.9); //prawie skalibrowane
	//setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	yaw_last_error=error;
 80147e4:	4a10      	ldr	r2, [pc, #64]	; (8014828 <PID+0x248>)
 80147e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e8:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 80147ea:	f7fe fa6f 	bl	8012ccc <millis>
 80147ee:	4602      	mov	r2, r0
 80147f0:	4b0e      	ldr	r3, [pc, #56]	; (801482c <PID+0x24c>)
 80147f2:	601a      	str	r2, [r3, #0]
}
 80147f4:	bf00      	nop
 80147f6:	3728      	adds	r7, #40	; 0x28
 80147f8:	46bd      	mov	sp, r7
 80147fa:	ecbd 8b02 	vpop	{d8}
 80147fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014800:	16c16c17 	.word	0x16c16c17
 8014804:	3f66c16c 	.word	0x3f66c16c
 8014808:	d70a3d71 	.word	0xd70a3d71
 801480c:	3fed70a3 	.word	0x3fed70a3
 8014810:	3f19999a 	.word	0x3f19999a
 8014814:	42480000 	.word	0x42480000
 8014818:	c3340000 	.word	0xc3340000
 801481c:	43b40000 	.word	0x43b40000
 8014820:	43340000 	.word	0x43340000
 8014824:	43aa0000 	.word	0x43aa0000
 8014828:	20007900 	.word	0x20007900
 801482c:	200078f8 	.word	0x200078f8
 8014830:	43fa0000 	.word	0x43fa0000
 8014834:	40668000 	.word	0x40668000

08014838 <bearing>:

static float bearing(float lat, float lon, float lat2, float lon2)
{
 8014838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801483c:	b08c      	sub	sp, #48	; 0x30
 801483e:	af00      	add	r7, sp, #0
 8014840:	ed87 0a03 	vstr	s0, [r7, #12]
 8014844:	edc7 0a02 	vstr	s1, [r7, #8]
 8014848:	ed87 1a01 	vstr	s2, [r7, #4]
 801484c:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f7eb fe89 	bl	8000568 <__aeabi_f2d>
 8014856:	a39e      	add	r3, pc, #632	; (adr r3, 8014ad0 <bearing+0x298>)
 8014858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485c:	f7eb fedc 	bl	8000618 <__aeabi_dmul>
 8014860:	4603      	mov	r3, r0
 8014862:	460c      	mov	r4, r1
 8014864:	4618      	mov	r0, r3
 8014866:	4621      	mov	r1, r4
 8014868:	f04f 0200 	mov.w	r2, #0
 801486c:	4b9c      	ldr	r3, [pc, #624]	; (8014ae0 <bearing+0x2a8>)
 801486e:	f7eb fffd 	bl	800086c <__aeabi_ddiv>
 8014872:	4603      	mov	r3, r0
 8014874:	460c      	mov	r4, r1
 8014876:	4618      	mov	r0, r3
 8014878:	4621      	mov	r1, r4
 801487a:	f7ec f9c5 	bl	8000c08 <__aeabi_d2f>
 801487e:	4603      	mov	r3, r0
 8014880:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7eb fe70 	bl	8000568 <__aeabi_f2d>
 8014888:	a391      	add	r3, pc, #580	; (adr r3, 8014ad0 <bearing+0x298>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	f7eb fec3 	bl	8000618 <__aeabi_dmul>
 8014892:	4603      	mov	r3, r0
 8014894:	460c      	mov	r4, r1
 8014896:	4618      	mov	r0, r3
 8014898:	4621      	mov	r1, r4
 801489a:	f04f 0200 	mov.w	r2, #0
 801489e:	4b90      	ldr	r3, [pc, #576]	; (8014ae0 <bearing+0x2a8>)
 80148a0:	f7eb ffe4 	bl	800086c <__aeabi_ddiv>
 80148a4:	4603      	mov	r3, r0
 80148a6:	460c      	mov	r4, r1
 80148a8:	4618      	mov	r0, r3
 80148aa:	4621      	mov	r1, r4
 80148ac:	f7ec f9ac 	bl	8000c08 <__aeabi_d2f>
 80148b0:	4603      	mov	r3, r0
 80148b2:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 80148b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80148b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80148bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148c0:	ee17 0a90 	vmov	r0, s15
 80148c4:	f7eb fe50 	bl	8000568 <__aeabi_f2d>
 80148c8:	a381      	add	r3, pc, #516	; (adr r3, 8014ad0 <bearing+0x298>)
 80148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ce:	f7eb fea3 	bl	8000618 <__aeabi_dmul>
 80148d2:	4603      	mov	r3, r0
 80148d4:	460c      	mov	r4, r1
 80148d6:	4618      	mov	r0, r3
 80148d8:	4621      	mov	r1, r4
 80148da:	f04f 0200 	mov.w	r2, #0
 80148de:	4b80      	ldr	r3, [pc, #512]	; (8014ae0 <bearing+0x2a8>)
 80148e0:	f7eb ffc4 	bl	800086c <__aeabi_ddiv>
 80148e4:	4603      	mov	r3, r0
 80148e6:	460c      	mov	r4, r1
 80148e8:	4618      	mov	r0, r3
 80148ea:	4621      	mov	r1, r4
 80148ec:	f7ec f98c 	bl	8000c08 <__aeabi_d2f>
 80148f0:	4603      	mov	r3, r0
 80148f2:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 80148f4:	ed97 7a00 	vldr	s14, [r7]
 80148f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80148fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014900:	ee17 0a90 	vmov	r0, s15
 8014904:	f7eb fe30 	bl	8000568 <__aeabi_f2d>
 8014908:	a371      	add	r3, pc, #452	; (adr r3, 8014ad0 <bearing+0x298>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	f7eb fe83 	bl	8000618 <__aeabi_dmul>
 8014912:	4603      	mov	r3, r0
 8014914:	460c      	mov	r4, r1
 8014916:	4618      	mov	r0, r3
 8014918:	4621      	mov	r1, r4
 801491a:	f04f 0200 	mov.w	r2, #0
 801491e:	4b70      	ldr	r3, [pc, #448]	; (8014ae0 <bearing+0x2a8>)
 8014920:	f7eb ffa4 	bl	800086c <__aeabi_ddiv>
 8014924:	4603      	mov	r3, r0
 8014926:	460c      	mov	r4, r1
 8014928:	4618      	mov	r0, r3
 801492a:	4621      	mov	r1, r4
 801492c:	f7ec f96c 	bl	8000c08 <__aeabi_d2f>
 8014930:	4603      	mov	r3, r0
 8014932:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8014934:	6a38      	ldr	r0, [r7, #32]
 8014936:	f7eb fe17 	bl	8000568 <__aeabi_f2d>
 801493a:	4603      	mov	r3, r0
 801493c:	460c      	mov	r4, r1
 801493e:	ec44 3b10 	vmov	d0, r3, r4
 8014942:	f006 f8b5 	bl	801aab0 <sin>
 8014946:	ec55 4b10 	vmov	r4, r5, d0
 801494a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801494c:	f7eb fe0c 	bl	8000568 <__aeabi_f2d>
 8014950:	4602      	mov	r2, r0
 8014952:	460b      	mov	r3, r1
 8014954:	ec43 2b10 	vmov	d0, r2, r3
 8014958:	f006 f866 	bl	801aa28 <cos>
 801495c:	ec53 2b10 	vmov	r2, r3, d0
 8014960:	4620      	mov	r0, r4
 8014962:	4629      	mov	r1, r5
 8014964:	f7eb fe58 	bl	8000618 <__aeabi_dmul>
 8014968:	4603      	mov	r3, r0
 801496a:	460c      	mov	r4, r1
 801496c:	4618      	mov	r0, r3
 801496e:	4621      	mov	r1, r4
 8014970:	f7ec f94a 	bl	8000c08 <__aeabi_d2f>
 8014974:	4603      	mov	r3, r0
 8014976:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8014978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801497a:	f7eb fdf5 	bl	8000568 <__aeabi_f2d>
 801497e:	4603      	mov	r3, r0
 8014980:	460c      	mov	r4, r1
 8014982:	ec44 3b10 	vmov	d0, r3, r4
 8014986:	f006 f84f 	bl	801aa28 <cos>
 801498a:	ec55 4b10 	vmov	r4, r5, d0
 801498e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014990:	f7eb fdea 	bl	8000568 <__aeabi_f2d>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	ec43 2b10 	vmov	d0, r2, r3
 801499c:	f006 f888 	bl	801aab0 <sin>
 80149a0:	ec53 2b10 	vmov	r2, r3, d0
 80149a4:	4620      	mov	r0, r4
 80149a6:	4629      	mov	r1, r5
 80149a8:	f7eb fe36 	bl	8000618 <__aeabi_dmul>
 80149ac:	4603      	mov	r3, r0
 80149ae:	460c      	mov	r4, r1
 80149b0:	4625      	mov	r5, r4
 80149b2:	461c      	mov	r4, r3
 80149b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80149b6:	f7eb fdd7 	bl	8000568 <__aeabi_f2d>
 80149ba:	4602      	mov	r2, r0
 80149bc:	460b      	mov	r3, r1
 80149be:	ec43 2b10 	vmov	d0, r2, r3
 80149c2:	f006 f875 	bl	801aab0 <sin>
 80149c6:	ec59 8b10 	vmov	r8, r9, d0
 80149ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149cc:	f7eb fdcc 	bl	8000568 <__aeabi_f2d>
 80149d0:	4602      	mov	r2, r0
 80149d2:	460b      	mov	r3, r1
 80149d4:	ec43 2b10 	vmov	d0, r2, r3
 80149d8:	f006 f826 	bl	801aa28 <cos>
 80149dc:	ec53 2b10 	vmov	r2, r3, d0
 80149e0:	4640      	mov	r0, r8
 80149e2:	4649      	mov	r1, r9
 80149e4:	f7eb fe18 	bl	8000618 <__aeabi_dmul>
 80149e8:	4602      	mov	r2, r0
 80149ea:	460b      	mov	r3, r1
 80149ec:	4690      	mov	r8, r2
 80149ee:	4699      	mov	r9, r3
 80149f0:	6a38      	ldr	r0, [r7, #32]
 80149f2:	f7eb fdb9 	bl	8000568 <__aeabi_f2d>
 80149f6:	4602      	mov	r2, r0
 80149f8:	460b      	mov	r3, r1
 80149fa:	ec43 2b10 	vmov	d0, r2, r3
 80149fe:	f006 f813 	bl	801aa28 <cos>
 8014a02:	ec53 2b10 	vmov	r2, r3, d0
 8014a06:	4640      	mov	r0, r8
 8014a08:	4649      	mov	r1, r9
 8014a0a:	f7eb fe05 	bl	8000618 <__aeabi_dmul>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	460b      	mov	r3, r1
 8014a12:	4620      	mov	r0, r4
 8014a14:	4629      	mov	r1, r5
 8014a16:	f7eb fc47 	bl	80002a8 <__aeabi_dsub>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	460c      	mov	r4, r1
 8014a1e:	4618      	mov	r0, r3
 8014a20:	4621      	mov	r1, r4
 8014a22:	f7ec f8f1 	bl	8000c08 <__aeabi_d2f>
 8014a26:	4603      	mov	r3, r0
 8014a28:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8014a2a:	69f8      	ldr	r0, [r7, #28]
 8014a2c:	f7eb fd9c 	bl	8000568 <__aeabi_f2d>
 8014a30:	4604      	mov	r4, r0
 8014a32:	460d      	mov	r5, r1
 8014a34:	69b8      	ldr	r0, [r7, #24]
 8014a36:	f7eb fd97 	bl	8000568 <__aeabi_f2d>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	ec43 2b11 	vmov	d1, r2, r3
 8014a42:	ec45 4b10 	vmov	d0, r4, r5
 8014a46:	f006 f8d3 	bl	801abf0 <atan2>
 8014a4a:	ec54 3b10 	vmov	r3, r4, d0
 8014a4e:	4618      	mov	r0, r3
 8014a50:	4621      	mov	r1, r4
 8014a52:	f7ec f8d9 	bl	8000c08 <__aeabi_d2f>
 8014a56:	4603      	mov	r3, r0
 8014a58:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;			// radians to degrees
 8014a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a5e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014ae4 <bearing+0x2ac>
 8014a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a66:	ee17 0a90 	vmov	r0, s15
 8014a6a:	f7eb fd7d 	bl	8000568 <__aeabi_f2d>
 8014a6e:	a318      	add	r3, pc, #96	; (adr r3, 8014ad0 <bearing+0x298>)
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	f7eb fefa 	bl	800086c <__aeabi_ddiv>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	4621      	mov	r1, r4
 8014a80:	f7ec f8c2 	bl	8000c08 <__aeabi_d2f>
 8014a84:	4603      	mov	r3, r0
 8014a86:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8014a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a8c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014ae8 <bearing+0x2b0>
 8014a90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a94:	ee17 0a90 	vmov	r0, s15
 8014a98:	f7eb fd66 	bl	8000568 <__aeabi_f2d>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	460c      	mov	r4, r1
 8014aa0:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8014ad8 <bearing+0x2a0>
 8014aa4:	ec44 3b10 	vmov	d0, r3, r4
 8014aa8:	f006 f8a4 	bl	801abf4 <fmod>
 8014aac:	ec54 3b10 	vmov	r3, r4, d0
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	4621      	mov	r1, r4
 8014ab4:	f7ec f8a8 	bl	8000c08 <__aeabi_d2f>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	617b      	str	r3, [r7, #20]

    return brng;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	ee07 3a90 	vmov	s15, r3
}
 8014ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ac6:	3730      	adds	r7, #48	; 0x30
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014ace:	bf00      	nop
 8014ad0:	54442d18 	.word	0x54442d18
 8014ad4:	400921fb 	.word	0x400921fb
 8014ad8:	00000000 	.word	0x00000000
 8014adc:	40768000 	.word	0x40768000
 8014ae0:	40668000 	.word	0x40668000
 8014ae4:	43340000 	.word	0x43340000
 8014ae8:	43b40000 	.word	0x43b40000

08014aec <steering_setup>:

static void steering_setup(void)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
		#if STEERING_DEBUG
			println("[STEERING] Activating PID algorithm");
 8014af0:	4819      	ldr	r0, [pc, #100]	; (8014b58 <steering_setup+0x6c>)
 8014af2:	f7fe f94b 	bl	8012d8c <println>
		#endif
		(*Common.log_print)("*P00");
 8014af6:	4b19      	ldr	r3, [pc, #100]	; (8014b5c <steering_setup+0x70>)
 8014af8:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014afc:	4818      	ldr	r0, [pc, #96]	; (8014b60 <steering_setup+0x74>)
 8014afe:	4798      	blx	r3

		if (!Common.mpu.active)
 8014b00:	4b16      	ldr	r3, [pc, #88]	; (8014b5c <steering_setup+0x70>)
 8014b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b06:	f083 0301 	eor.w	r3, r3, #1
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d007      	beq.n	8014b20 <steering_setup+0x34>
		{
			#if STEERING_DEBUG
				println("error: [STEERING] PID cannot function because IMU is not active!");
 8014b10:	4814      	ldr	r0, [pc, #80]	; (8014b64 <steering_setup+0x78>)
 8014b12:	f7fe f93b 	bl	8012d8c <println>
			#endif
			(*Common.log_print)("*EP00");
 8014b16:	4b11      	ldr	r3, [pc, #68]	; (8014b5c <steering_setup+0x70>)
 8014b18:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014b1c:	4812      	ldr	r0, [pc, #72]	; (8014b68 <steering_setup+0x7c>)
 8014b1e:	4798      	blx	r3
		}
		yaw_last_error=0.0;
 8014b20:	4b12      	ldr	r3, [pc, #72]	; (8014b6c <steering_setup+0x80>)
 8014b22:	f04f 0200 	mov.w	r2, #0
 8014b26:	601a      	str	r2, [r3, #0]
		Common.target_lat = DEFAULT_TARGET_LAT;
 8014b28:	4b0c      	ldr	r3, [pc, #48]	; (8014b5c <steering_setup+0x70>)
 8014b2a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8014b2e:	4a10      	ldr	r2, [pc, #64]	; (8014b70 <steering_setup+0x84>)
 8014b30:	601a      	str	r2, [r3, #0]
		Common.target_lon = DEFAULT_TARGET_LON;
 8014b32:	4b0a      	ldr	r3, [pc, #40]	; (8014b5c <steering_setup+0x70>)
 8014b34:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8014b38:	4a0e      	ldr	r2, [pc, #56]	; (8014b74 <steering_setup+0x88>)
 8014b3a:	601a      	str	r2, [r3, #0]
		Common.target_alt = DEFAULT_TARGET_ALT;
 8014b3c:	4b07      	ldr	r3, [pc, #28]	; (8014b5c <steering_setup+0x70>)
 8014b3e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8014b42:	4a0d      	ldr	r2, [pc, #52]	; (8014b78 <steering_setup+0x8c>)
 8014b44:	601a      	str	r2, [r3, #0]
		Common.target_yaw = DEFAULT_TARGET_YAW;
 8014b46:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <steering_setup+0x70>)
 8014b48:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8014b4c:	f04f 0200 	mov.w	r2, #0
 8014b50:	601a      	str	r2, [r3, #0]
		(*Common.log_print)("*WP00");
		disableMotors();
		Common.motors_enabled = false;
		return false;
	#endif
}
 8014b52:	bf00      	nop
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	0801e2bc 	.word	0x0801e2bc
 8014b5c:	20000b9c 	.word	0x20000b9c
 8014b60:	0801e2e0 	.word	0x0801e2e0
 8014b64:	0801e2e8 	.word	0x0801e2e8
 8014b68:	0801e32c 	.word	0x0801e32c
 8014b6c:	20007900 	.word	0x20007900
 8014b70:	42480000 	.word	0x42480000
 8014b74:	41980000 	.word	0x41980000
 8014b78:	43fa0000 	.word	0x43fa0000

08014b7c <steering_loop>:

static void steering_loop(void)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
	if (Common.mpu.active && Common.operation_mode != 31 && Common.motors_enabled && Common.servo_enabled) 
 8014b80:	4b34      	ldr	r3, [pc, #208]	; (8014c54 <steering_loop+0xd8>)
 8014b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d061      	beq.n	8014c4e <steering_loop+0xd2>
 8014b8a:	4b32      	ldr	r3, [pc, #200]	; (8014c54 <steering_loop+0xd8>)
 8014b8c:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014b90:	2b1f      	cmp	r3, #31
 8014b92:	d05c      	beq.n	8014c4e <steering_loop+0xd2>
 8014b94:	4b2f      	ldr	r3, [pc, #188]	; (8014c54 <steering_loop+0xd8>)
 8014b96:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d057      	beq.n	8014c4e <steering_loop+0xd2>
 8014b9e:	4b2d      	ldr	r3, [pc, #180]	; (8014c54 <steering_loop+0xd8>)
 8014ba0:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d052      	beq.n	8014c4e <steering_loop+0xd2>
	{
		if (millis() - lastMotUpdate >= STEERING_PID_DELAY)	// run motor alogrithm
 8014ba8:	f7fe f890 	bl	8012ccc <millis>
 8014bac:	4602      	mov	r2, r0
 8014bae:	4b2a      	ldr	r3, [pc, #168]	; (8014c58 <steering_loop+0xdc>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	2b09      	cmp	r3, #9
 8014bb6:	d912      	bls.n	8014bde <steering_loop+0x62>
		{	
			PID(Common.mpu.yaw, Common.target_yaw);
 8014bb8:	4b26      	ldr	r3, [pc, #152]	; (8014c54 <steering_loop+0xd8>)
 8014bba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8014bbe:	4b25      	ldr	r3, [pc, #148]	; (8014c54 <steering_loop+0xd8>)
 8014bc0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8014bc4:	ed93 7a00 	vldr	s14, [r3]
 8014bc8:	eef0 0a47 	vmov.f32	s1, s14
 8014bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8014bd0:	f7ff fd06 	bl	80145e0 <PID>
			lastMotUpdate = millis();
 8014bd4:	f7fe f87a 	bl	8012ccc <millis>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	4b1f      	ldr	r3, [pc, #124]	; (8014c58 <steering_loop+0xdc>)
 8014bdc:	601a      	str	r2, [r3, #0]
		}

		if ((Common.operation_mode == 0 || Common.operation_mode == 1) && millis() - lastYawUpdate >= STEERING_YAW_DELAY)
 8014bde:	4b1d      	ldr	r3, [pc, #116]	; (8014c54 <steering_loop+0xd8>)
 8014be0:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d004      	beq.n	8014bf2 <steering_loop+0x76>
 8014be8:	4b1a      	ldr	r3, [pc, #104]	; (8014c54 <steering_loop+0xd8>)
 8014bea:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d12d      	bne.n	8014c4e <steering_loop+0xd2>
 8014bf2:	f7fe f86b 	bl	8012ccc <millis>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	4b18      	ldr	r3, [pc, #96]	; (8014c5c <steering_loop+0xe0>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b63      	cmp	r3, #99	; 0x63
 8014c00:	d925      	bls.n	8014c4e <steering_loop+0xd2>
		{
			Common.target_yaw = bearing(Common.gps.latitudeDegrees, Common.gps.longitudeDegrees, Common.target_lat, Common.target_lon); // target_yaw wyliczane z pozycji anteny
 8014c02:	4b14      	ldr	r3, [pc, #80]	; (8014c54 <steering_loop+0xd8>)
 8014c04:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8014c08:	4b12      	ldr	r3, [pc, #72]	; (8014c54 <steering_loop+0xd8>)
 8014c0a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8014c0e:	4b11      	ldr	r3, [pc, #68]	; (8014c54 <steering_loop+0xd8>)
 8014c10:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8014c14:	edd3 6a00 	vldr	s13, [r3]
 8014c18:	4b0e      	ldr	r3, [pc, #56]	; (8014c54 <steering_loop+0xd8>)
 8014c1a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8014c1e:	ed93 6a00 	vldr	s12, [r3]
 8014c22:	eef0 1a46 	vmov.f32	s3, s12
 8014c26:	eeb0 1a66 	vmov.f32	s2, s13
 8014c2a:	eef0 0a47 	vmov.f32	s1, s14
 8014c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8014c32:	f7ff fe01 	bl	8014838 <bearing>
 8014c36:	eef0 7a40 	vmov.f32	s15, s0
 8014c3a:	4b06      	ldr	r3, [pc, #24]	; (8014c54 <steering_loop+0xd8>)
 8014c3c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8014c40:	edc3 7a00 	vstr	s15, [r3]
			lastYawUpdate = millis();
 8014c44:	f7fe f842 	bl	8012ccc <millis>
 8014c48:	4602      	mov	r2, r0
 8014c4a:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <steering_loop+0xe0>)
 8014c4c:	601a      	str	r2, [r3, #0]
		}
	}
	#endif
}
 8014c4e:	bf00      	nop
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	20000b9c 	.word	0x20000b9c
 8014c58:	200078f4 	.word	0x200078f4
 8014c5c:	200078fc 	.word	0x200078fc

08014c60 <latchArms>:

uint8_t flight_safety;
bool armsOpen;

static void latchArms(void)
{
 8014c60:	b480      	push	{r7}
 8014c62:	af00      	add	r7, sp, #0
	if (armsOpen)
 8014c64:	4b05      	ldr	r3, [pc, #20]	; (8014c7c <latchArms+0x1c>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d002      	beq.n	8014c72 <latchArms+0x12>
	{	
		//TIM_->CCR_ = 900;
		armsOpen = false;
 8014c6c:	4b03      	ldr	r3, [pc, #12]	; (8014c7c <latchArms+0x1c>)
 8014c6e:	2200      	movs	r2, #0
 8014c70:	701a      	strb	r2, [r3, #0]
	}
}
 8014c72:	bf00      	nop
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr
 8014c7c:	20007904 	.word	0x20007904

08014c80 <openArms>:

static void openArms(void)
{
 8014c80:	b480      	push	{r7}
 8014c82:	af00      	add	r7, sp, #0
	if (!armsOpen)
 8014c84:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <openArms+0x24>)
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	f083 0301 	eor.w	r3, r3, #1
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d002      	beq.n	8014c98 <openArms+0x18>
	{
		//TIM_->CCR_ = 550;
		armsOpen = true;
 8014c92:	4b04      	ldr	r3, [pc, #16]	; (8014ca4 <openArms+0x24>)
 8014c94:	2201      	movs	r2, #1
 8014c96:	701a      	strb	r2, [r3, #0]
	}
}
 8014c98:	bf00      	nop
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	20007904 	.word	0x20007904

08014ca8 <terminator>:

static void terminator(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
	if (Common.operation_mode != 31)
 8014cae:	4b98      	ldr	r3, [pc, #608]	; (8014f10 <terminator+0x268>)
 8014cb0:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014cb4:	2b1f      	cmp	r3, #31
 8014cb6:	f000 811e 	beq.w	8014ef6 <terminator+0x24e>
	{
		uint8_t terminate = 0;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	71fb      	strb	r3, [r7, #7]
		terminate |= ((Common.bmp.active) && (-(Common.bmp.alt_dx) > TERMINAL_ALT_DX)) << 1; // Falling too fast
 8014cbe:	4b94      	ldr	r3, [pc, #592]	; (8014f10 <terminator+0x268>)
 8014cc0:	7f1b      	ldrb	r3, [r3, #28]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d00b      	beq.n	8014cde <terminator+0x36>
 8014cc6:	4b92      	ldr	r3, [pc, #584]	; (8014f10 <terminator+0x268>)
 8014cc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8014ccc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd8:	d501      	bpl.n	8014cde <terminator+0x36>
 8014cda:	2301      	movs	r3, #1
 8014cdc:	e000      	b.n	8014ce0 <terminator+0x38>
 8014cde:	2300      	movs	r3, #0
 8014ce0:	005b      	lsls	r3, r3, #1
 8014ce2:	b25a      	sxtb	r2, r3
 8014ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ce8:	4313      	orrs	r3, r2
 8014cea:	b25b      	sxtb	r3, r3
 8014cec:	71fb      	strb	r3, [r7, #7]
		terminate |= (abs(Common.mpu.yaw_dx) > TERMINAL_YAW_DX) << 2;	// Spinning too fast 
 8014cee:	4b88      	ldr	r3, [pc, #544]	; (8014f10 <terminator+0x268>)
 8014cf0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cf8:	ee17 3a90 	vmov	r3, s15
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bfb8      	it	lt
 8014d00:	425b      	neglt	r3, r3
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7eb fc1e 	bl	8000544 <__aeabi_i2d>
 8014d08:	f04f 0200 	mov.w	r2, #0
 8014d0c:	4b81      	ldr	r3, [pc, #516]	; (8014f14 <terminator+0x26c>)
 8014d0e:	f7eb ff13 	bl	8000b38 <__aeabi_dcmpgt>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <terminator+0x74>
 8014d18:	2204      	movs	r2, #4
 8014d1a:	e000      	b.n	8014d1e <terminator+0x76>
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d22:	4313      	orrs	r3, r2
 8014d24:	b25b      	sxtb	r3, r3
 8014d26:	71fb      	strb	r3, [r7, #7]
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 8014d28:	4b79      	ldr	r3, [pc, #484]	; (8014f10 <terminator+0x268>)
 8014d2a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8014d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d32:	ee17 3a90 	vmov	r3, s15
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	bfb8      	it	lt
 8014d3a:	425b      	neglt	r3, r3
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7eb fc01 	bl	8000544 <__aeabi_i2d>
 8014d42:	f04f 0200 	mov.w	r2, #0
 8014d46:	4b74      	ldr	r3, [pc, #464]	; (8014f18 <terminator+0x270>)
 8014d48:	f7eb fef6 	bl	8000b38 <__aeabi_dcmpgt>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d114      	bne.n	8014d7c <terminator+0xd4>
					  (abs(Common.mpu.roll) > TERMINAL_HOR)) << 3;		// In vertical position
 8014d52:	4b6f      	ldr	r3, [pc, #444]	; (8014f10 <terminator+0x268>)
 8014d54:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8014d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d5c:	ee17 3a90 	vmov	r3, s15
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	bfb8      	it	lt
 8014d64:	425b      	neglt	r3, r3
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7eb fbec 	bl	8000544 <__aeabi_i2d>
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 8014d6c:	f04f 0200 	mov.w	r2, #0
 8014d70:	4b69      	ldr	r3, [pc, #420]	; (8014f18 <terminator+0x270>)
 8014d72:	f7eb fee1 	bl	8000b38 <__aeabi_dcmpgt>
 8014d76:	4603      	mov	r3, r0
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d001      	beq.n	8014d80 <terminator+0xd8>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e000      	b.n	8014d82 <terminator+0xda>
 8014d80:	2300      	movs	r3, #0
					  (abs(Common.mpu.roll) > TERMINAL_HOR)) << 3;		// In vertical position
 8014d82:	00db      	lsls	r3, r3, #3
		terminate |= ((abs(Common.mpu.pitch) > TERMINAL_HOR) ||
 8014d84:	b25a      	sxtb	r2, r3
 8014d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d8a:	4313      	orrs	r3, r2
 8014d8c:	b25b      	sxtb	r3, r3
 8014d8e:	71fb      	strb	r3, [r7, #7]
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 8014d90:	4b5f      	ldr	r3, [pc, #380]	; (8014f10 <terminator+0x268>)
 8014d92:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8014d96:	4b5e      	ldr	r3, [pc, #376]	; (8014f10 <terminator+0x268>)
 8014d98:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8014d9c:	edd3 7a00 	vldr	s15, [r3]
 8014da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014da8:	ee17 3a90 	vmov	r3, s15
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	bfb8      	it	lt
 8014db0:	425b      	neglt	r3, r3
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7eb fbc6 	bl	8000544 <__aeabi_i2d>
 8014db8:	a353      	add	r3, pc, #332	; (adr r3, 8014f08 <terminator+0x260>)
 8014dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbe:	f7eb fe9d 	bl	8000afc <__aeabi_dcmplt>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d11b      	bne.n	8014e00 <terminator+0x158>
					  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 8014dc8:	4b51      	ldr	r3, [pc, #324]	; (8014f10 <terminator+0x268>)
 8014dca:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8014dce:	4b50      	ldr	r3, [pc, #320]	; (8014f10 <terminator+0x268>)
 8014dd0:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8014dd4:	edd3 7a00 	vldr	s15, [r3]
 8014dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014de0:	ee17 3a90 	vmov	r3, s15
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	bfb8      	it	lt
 8014de8:	425b      	neglt	r3, r3
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7eb fbaa 	bl	8000544 <__aeabi_i2d>
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 8014df0:	a345      	add	r3, pc, #276	; (adr r3, 8014f08 <terminator+0x260>)
 8014df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df6:	f7eb fe81 	bl	8000afc <__aeabi_dcmplt>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <terminator+0x15c>
 8014e00:	2301      	movs	r3, #1
 8014e02:	e000      	b.n	8014e06 <terminator+0x15e>
 8014e04:	2300      	movs	r3, #0
					  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 8014e06:	011b      	lsls	r3, r3, #4
		terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) ||
 8014e08:	b25a      	sxtb	r2, r3
 8014e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e0e:	4313      	orrs	r3, r2
 8014e10:	b25b      	sxtb	r3, r3
 8014e12:	71fb      	strb	r3, [r7, #7]
		terminate |= (Common.bmp.altitude - Common.target_alt < KEEPOUT_ALT) << 5;	// Close to the ground
 8014e14:	4b3e      	ldr	r3, [pc, #248]	; (8014f10 <terminator+0x268>)
 8014e16:	ed93 7a05 	vldr	s14, [r3, #20]
 8014e1a:	4b3d      	ldr	r3, [pc, #244]	; (8014f10 <terminator+0x268>)
 8014e1c:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8014e20:	edd3 7a00 	vldr	s15, [r3]
 8014e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e28:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8014e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e34:	d501      	bpl.n	8014e3a <terminator+0x192>
 8014e36:	2220      	movs	r2, #32
 8014e38:	e000      	b.n	8014e3c <terminator+0x194>
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e40:	4313      	orrs	r3, r2
 8014e42:	b25b      	sxtb	r3, r3
 8014e44:	71fb      	strb	r3, [r7, #7]

		if (Common.operation_mode == 3) flight_safety = FLIGHT_START_THRE;
 8014e46:	4b32      	ldr	r3, [pc, #200]	; (8014f10 <terminator+0x268>)
 8014e48:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	d103      	bne.n	8014e58 <terminator+0x1b0>
 8014e50:	4b32      	ldr	r3, [pc, #200]	; (8014f1c <terminator+0x274>)
 8014e52:	2210      	movs	r2, #16
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	e022      	b.n	8014e9e <terminator+0x1f6>
		else if (terminate > 0)
 8014e58:	79fb      	ldrb	r3, [r7, #7]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d01f      	beq.n	8014e9e <terminator+0x1f6>
		{
			Common.operation_mode = 31;
 8014e5e:	4b2c      	ldr	r3, [pc, #176]	; (8014f10 <terminator+0x268>)
 8014e60:	221f      	movs	r2, #31
 8014e62:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
			#if RUN_DEBUG
				println("warning: [RUN] Flight terminated! Code: 0x%x", terminate);
 8014e66:	79fb      	ldrb	r3, [r7, #7]
 8014e68:	4619      	mov	r1, r3
 8014e6a:	482d      	ldr	r0, [pc, #180]	; (8014f20 <terminator+0x278>)
 8014e6c:	f7fd ff8e 	bl	8012d8c <println>
			#endif
			(*Common.log_print)("*T0x%x", terminate);
 8014e70:	4b27      	ldr	r3, [pc, #156]	; (8014f10 <terminator+0x268>)
 8014e72:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8014e76:	79fa      	ldrb	r2, [r7, #7]
 8014e78:	4611      	mov	r1, r2
 8014e7a:	482a      	ldr	r0, [pc, #168]	; (8014f24 <terminator+0x27c>)
 8014e7c:	4798      	blx	r3
			flight_safety = 0;
 8014e7e:	4b27      	ldr	r3, [pc, #156]	; (8014f1c <terminator+0x274>)
 8014e80:	2200      	movs	r2, #0
 8014e82:	701a      	strb	r2, [r3, #0]
			Common.servo_enabled = false;
 8014e84:	4b22      	ldr	r3, [pc, #136]	; (8014f10 <terminator+0x268>)
 8014e86:	2200      	movs	r2, #0
 8014e88:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
			Common.motors_enabled = false;
 8014e8c:	4b20      	ldr	r3, [pc, #128]	; (8014f10 <terminator+0x268>)
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
			latchArms();
 8014e94:	f7ff fee4 	bl	8014c60 <latchArms>
			disableMotors();
 8014e98:	f7ec f98a 	bl	80011b0 <disableMotors>
			return;
 8014e9c:	e02f      	b.n	8014efe <terminator+0x256>
		}

		if (flight_safety >= FLIGHT_START_THRE)
 8014e9e:	4b1f      	ldr	r3, [pc, #124]	; (8014f1c <terminator+0x274>)
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	2b0f      	cmp	r3, #15
 8014ea4:	d920      	bls.n	8014ee8 <terminator+0x240>
		{
			if (Common.servo_enabled || Common.operation_mode != 3) { openArms(); Common.servo_enabled = true; }
 8014ea6:	4b1a      	ldr	r3, [pc, #104]	; (8014f10 <terminator+0x268>)
 8014ea8:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d104      	bne.n	8014eba <terminator+0x212>
 8014eb0:	4b17      	ldr	r3, [pc, #92]	; (8014f10 <terminator+0x268>)
 8014eb2:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d005      	beq.n	8014ec6 <terminator+0x21e>
 8014eba:	f7ff fee1 	bl	8014c80 <openArms>
 8014ebe:	4b14      	ldr	r3, [pc, #80]	; (8014f10 <terminator+0x268>)
 8014ec0:	2201      	movs	r2, #1
 8014ec2:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
			if (Common.motors_enabled || Common.operation_mode != 3) { enableMotors(); Common.motors_enabled = true; }
 8014ec6:	4b12      	ldr	r3, [pc, #72]	; (8014f10 <terminator+0x268>)
 8014ec8:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d104      	bne.n	8014eda <terminator+0x232>
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	; (8014f10 <terminator+0x268>)
 8014ed2:	f893 357c 	ldrb.w	r3, [r3, #1404]	; 0x57c
 8014ed6:	2b03      	cmp	r3, #3
 8014ed8:	d011      	beq.n	8014efe <terminator+0x256>
 8014eda:	f7ec f92b 	bl	8001134 <enableMotors>
 8014ede:	4b0c      	ldr	r3, [pc, #48]	; (8014f10 <terminator+0x268>)
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8014ee6:	e00a      	b.n	8014efe <terminator+0x256>
		}
		else flight_safety++;
 8014ee8:	4b0c      	ldr	r3, [pc, #48]	; (8014f1c <terminator+0x274>)
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	3301      	adds	r3, #1
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	4b0a      	ldr	r3, [pc, #40]	; (8014f1c <terminator+0x274>)
 8014ef2:	701a      	strb	r2, [r3, #0]
 8014ef4:	e003      	b.n	8014efe <terminator+0x256>

	}
	else
	{
		latchArms();
 8014ef6:	f7ff feb3 	bl	8014c60 <latchArms>
		disableMotors();
 8014efa:	f7ec f959 	bl	80011b0 <disableMotors>
	}
}
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	f3af 8000 	nop.w
 8014f08:	47ae147b 	.word	0x47ae147b
 8014f0c:	3f847ae1 	.word	0x3f847ae1
 8014f10:	20000b9c 	.word	0x20000b9c
 8014f14:	40440000 	.word	0x40440000
 8014f18:	40468000 	.word	0x40468000
 8014f1c:	20007905 	.word	0x20007905
 8014f20:	0801e334 	.word	0x0801e334
 8014f24:	0801e364 	.word	0x0801e364

08014f28 <setup>:

static void setup(void)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	af00      	add	r7, sp, #0
	//writePin(LEDD, HIGH);	while (readPin(BTN_1) == HIGH);	writePin(LEDD, LOW);

	armsOpen = true;
 8014f2c:	4b0c      	ldr	r3, [pc, #48]	; (8014f60 <setup+0x38>)
 8014f2e:	2201      	movs	r2, #1
 8014f30:	701a      	strb	r2, [r3, #0]
	flight_safety = 0;
 8014f32:	4b0c      	ldr	r3, [pc, #48]	; (8014f64 <setup+0x3c>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	701a      	strb	r2, [r3, #0]
	latchArms();
 8014f38:	f7ff fe92 	bl	8014c60 <latchArms>
	Common.servo_enabled = false;
 8014f3c:	4b0a      	ldr	r3, [pc, #40]	; (8014f68 <setup+0x40>)
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
	Common.motors_enabled = false;
 8014f44:	4b08      	ldr	r3, [pc, #32]	; (8014f68 <setup+0x40>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568

	loging_setup();
 8014f4c:	f7fe fbb4 	bl	80136b8 <loging_setup>
	
	sensing_setup();
 8014f50:	f7ff f8e8 	bl	8014124 <sensing_setup>
	
	duplex_setup();
 8014f54:	f7fe fe8c 	bl	8013c70 <duplex_setup>

	steering_setup();
 8014f58:	f7ff fdc8 	bl	8014aec <steering_setup>

	//writePin(LEDD, HIGH);	while (readPin(BTN_1) == HIGH);	writePin(LEDD, LOW);
}
 8014f5c:	bf00      	nop
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	20007904 	.word	0x20007904
 8014f64:	20007905 	.word	0x20007905
 8014f68:	20000b9c 	.word	0x20000b9c

08014f6c <loop>:

static void loop(void)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	af00      	add	r7, sp, #0
	loging_loop();
 8014f70:	f7fe fc5e 	bl	8013830 <loging_loop>

	sensing_loop();
 8014f74:	f7ff fade 	bl	8014534 <sensing_loop>

	duplex_loop();
 8014f78:	f7ff f87e 	bl	8014078 <duplex_loop>

	terminator();
 8014f7c:	f7ff fe94 	bl	8014ca8 <terminator>

	steering_loop();
 8014f80:	f7ff fdfc 	bl	8014b7c <steering_loop>
}
 8014f84:	bf00      	nop
 8014f86:	bd80      	pop	{r7, pc}

08014f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014f8c:	f7f1 f890 	bl	80060b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014f90:	f000 f848 	bl	8015024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014f94:	f000 fb10 	bl	80155b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8014f98:	f000 fae6 	bl	8015568 <MX_DMA_Init>
  MX_I2C1_Init();
 8014f9c:	f000 f8c4 	bl	8015128 <MX_I2C1_Init>
  MX_RTC_Init();
 8014fa0:	f000 f91e 	bl	80151e0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8014fa4:	f000 f942 	bl	801522c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8014fa8:	f000 f960 	bl	801526c <MX_SPI1_Init>
  MX_TIM2_Init();
 8014fac:	f000 f994 	bl	80152d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8014fb0:	f000 f9e0 	bl	8015374 <MX_TIM3_Init>
  MX_TIM5_Init();
 8014fb4:	f000 fa60 	bl	8015478 <MX_TIM5_Init>
  MX_FATFS_Init();
 8014fb8:	f7fd fe4e 	bl	8012c58 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8014fbc:	f001 f9e0 	bl	8016380 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8014fc0:	f000 faa8 	bl	8015514 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8014fc4:	f000 f8de 	bl	8015184 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8014fc8:	4813      	ldr	r0, [pc, #76]	; (8015018 <main+0x90>)
 8014fca:	f7f6 fe20 	bl	800bc0e <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014fce:	2200      	movs	r2, #0
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	4812      	ldr	r0, [pc, #72]	; (801501c <main+0x94>)
 8014fd4:	f7f1 ff5c 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014fd8:	2200      	movs	r2, #0
 8014fda:	2102      	movs	r1, #2
 8014fdc:	480f      	ldr	r0, [pc, #60]	; (801501c <main+0x94>)
 8014fde:	f7f1 ff57 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	2104      	movs	r1, #4
 8014fe6:	480d      	ldr	r0, [pc, #52]	; (801501c <main+0x94>)
 8014fe8:	f7f1 ff52 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014fec:	2200      	movs	r2, #0
 8014fee:	2108      	movs	r1, #8
 8014ff0:	480a      	ldr	r0, [pc, #40]	; (801501c <main+0x94>)
 8014ff2:	f7f1 ff4d 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014ffc:	4808      	ldr	r0, [pc, #32]	; (8015020 <main+0x98>)
 8014ffe:	f7f1 ff47 	bl	8006e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8015002:	2200      	movs	r2, #0
 8015004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015008:	4805      	ldr	r0, [pc, #20]	; (8015020 <main+0x98>)
 801500a:	f7f1 ff41 	bl	8006e90 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);

	// Execute code
	setup();
 801500e:	f7ff ff8b 	bl	8014f28 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8015012:	f7ff ffab 	bl	8014f6c <loop>
 8015016:	e7fc      	b.n	8015012 <main+0x8a>
 8015018:	20009c9c 	.word	0x20009c9c
 801501c:	40020800 	.word	0x40020800
 8015020:	40020400 	.word	0x40020400

08015024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b098      	sub	sp, #96	; 0x60
 8015028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801502a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801502e:	2230      	movs	r2, #48	; 0x30
 8015030:	2100      	movs	r1, #0
 8015032:	4618      	mov	r0, r3
 8015034:	f001 ff47 	bl	8016ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015038:	f107 031c 	add.w	r3, r7, #28
 801503c:	2200      	movs	r2, #0
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	605a      	str	r2, [r3, #4]
 8015042:	609a      	str	r2, [r3, #8]
 8015044:	60da      	str	r2, [r3, #12]
 8015046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015048:	f107 030c 	add.w	r3, r7, #12
 801504c:	2200      	movs	r2, #0
 801504e:	601a      	str	r2, [r3, #0]
 8015050:	605a      	str	r2, [r3, #4]
 8015052:	609a      	str	r2, [r3, #8]
 8015054:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015056:	2300      	movs	r3, #0
 8015058:	60bb      	str	r3, [r7, #8]
 801505a:	4b31      	ldr	r3, [pc, #196]	; (8015120 <SystemClock_Config+0xfc>)
 801505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801505e:	4a30      	ldr	r2, [pc, #192]	; (8015120 <SystemClock_Config+0xfc>)
 8015060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015064:	6413      	str	r3, [r2, #64]	; 0x40
 8015066:	4b2e      	ldr	r3, [pc, #184]	; (8015120 <SystemClock_Config+0xfc>)
 8015068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801506e:	60bb      	str	r3, [r7, #8]
 8015070:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015072:	2300      	movs	r3, #0
 8015074:	607b      	str	r3, [r7, #4]
 8015076:	4b2b      	ldr	r3, [pc, #172]	; (8015124 <SystemClock_Config+0x100>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4a2a      	ldr	r2, [pc, #168]	; (8015124 <SystemClock_Config+0x100>)
 801507c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015080:	6013      	str	r3, [r2, #0]
 8015082:	4b28      	ldr	r3, [pc, #160]	; (8015124 <SystemClock_Config+0x100>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801508a:	607b      	str	r3, [r7, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801508e:	2305      	movs	r3, #5
 8015090:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8015098:	2301      	movs	r3, #1
 801509a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801509c:	2302      	movs	r3, #2
 801509e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80150a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80150a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80150a6:	2306      	movs	r3, #6
 80150a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80150aa:	23a8      	movs	r3, #168	; 0xa8
 80150ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80150ae:	2302      	movs	r3, #2
 80150b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80150b2:	2307      	movs	r3, #7
 80150b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80150b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7f4 f80c 	bl	80090d8 <HAL_RCC_OscConfig>
 80150c0:	4603      	mov	r3, r0
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d001      	beq.n	80150ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80150c6:	f000 fb87 	bl	80157d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80150ca:	230f      	movs	r3, #15
 80150cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80150ce:	2302      	movs	r3, #2
 80150d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80150d2:	2300      	movs	r3, #0
 80150d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80150d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80150da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80150dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80150e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80150e2:	f107 031c 	add.w	r3, r7, #28
 80150e6:	2105      	movs	r1, #5
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7f4 fa37 	bl	800955c <HAL_RCC_ClockConfig>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80150f4:	f000 fb70 	bl	80157d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80150f8:	2302      	movs	r3, #2
 80150fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80150fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015100:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015102:	f107 030c 	add.w	r3, r7, #12
 8015106:	4618      	mov	r0, r3
 8015108:	f7f4 fbf0 	bl	80098ec <HAL_RCCEx_PeriphCLKConfig>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d001      	beq.n	8015116 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8015112:	f000 fb61 	bl	80157d8 <Error_Handler>
  }
}
 8015116:	bf00      	nop
 8015118:	3760      	adds	r7, #96	; 0x60
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	40023800 	.word	0x40023800
 8015124:	40007000 	.word	0x40007000

08015128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801512c:	4b12      	ldr	r3, [pc, #72]	; (8015178 <MX_I2C1_Init+0x50>)
 801512e:	4a13      	ldr	r2, [pc, #76]	; (801517c <MX_I2C1_Init+0x54>)
 8015130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8015132:	4b11      	ldr	r3, [pc, #68]	; (8015178 <MX_I2C1_Init+0x50>)
 8015134:	4a12      	ldr	r2, [pc, #72]	; (8015180 <MX_I2C1_Init+0x58>)
 8015136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8015138:	4b0f      	ldr	r3, [pc, #60]	; (8015178 <MX_I2C1_Init+0x50>)
 801513a:	2200      	movs	r2, #0
 801513c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801513e:	4b0e      	ldr	r3, [pc, #56]	; (8015178 <MX_I2C1_Init+0x50>)
 8015140:	2200      	movs	r2, #0
 8015142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015144:	4b0c      	ldr	r3, [pc, #48]	; (8015178 <MX_I2C1_Init+0x50>)
 8015146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801514a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801514c:	4b0a      	ldr	r3, [pc, #40]	; (8015178 <MX_I2C1_Init+0x50>)
 801514e:	2200      	movs	r2, #0
 8015150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8015152:	4b09      	ldr	r3, [pc, #36]	; (8015178 <MX_I2C1_Init+0x50>)
 8015154:	2200      	movs	r2, #0
 8015156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015158:	4b07      	ldr	r3, [pc, #28]	; (8015178 <MX_I2C1_Init+0x50>)
 801515a:	2200      	movs	r2, #0
 801515c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801515e:	4b06      	ldr	r3, [pc, #24]	; (8015178 <MX_I2C1_Init+0x50>)
 8015160:	2200      	movs	r2, #0
 8015162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015164:	4804      	ldr	r0, [pc, #16]	; (8015178 <MX_I2C1_Init+0x50>)
 8015166:	f7f1 fead 	bl	8006ec4 <HAL_I2C_Init>
 801516a:	4603      	mov	r3, r0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8015170:	f000 fb32 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015174:	bf00      	nop
 8015176:	bd80      	pop	{r7, pc}
 8015178:	200099d8 	.word	0x200099d8
 801517c:	40005400 	.word	0x40005400
 8015180:	00061a80 	.word	0x00061a80

08015184 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8015188:	4b12      	ldr	r3, [pc, #72]	; (80151d4 <MX_I2C2_Init+0x50>)
 801518a:	4a13      	ldr	r2, [pc, #76]	; (80151d8 <MX_I2C2_Init+0x54>)
 801518c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 801518e:	4b11      	ldr	r3, [pc, #68]	; (80151d4 <MX_I2C2_Init+0x50>)
 8015190:	4a12      	ldr	r2, [pc, #72]	; (80151dc <MX_I2C2_Init+0x58>)
 8015192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8015194:	4b0f      	ldr	r3, [pc, #60]	; (80151d4 <MX_I2C2_Init+0x50>)
 8015196:	2200      	movs	r2, #0
 8015198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 801519a:	4b0e      	ldr	r3, [pc, #56]	; (80151d4 <MX_I2C2_Init+0x50>)
 801519c:	2200      	movs	r2, #0
 801519e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80151a0:	4b0c      	ldr	r3, [pc, #48]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80151a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80151a8:	4b0a      	ldr	r3, [pc, #40]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151aa:	2200      	movs	r2, #0
 80151ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80151ae:	4b09      	ldr	r3, [pc, #36]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80151b4:	4b07      	ldr	r3, [pc, #28]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151b6:	2200      	movs	r2, #0
 80151b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80151ba:	4b06      	ldr	r3, [pc, #24]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151bc:	2200      	movs	r2, #0
 80151be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80151c0:	4804      	ldr	r0, [pc, #16]	; (80151d4 <MX_I2C2_Init+0x50>)
 80151c2:	f7f1 fe7f 	bl	8006ec4 <HAL_I2C_Init>
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d001      	beq.n	80151d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80151cc:	f000 fb04 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80151d0:	bf00      	nop
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	20009a2c 	.word	0x20009a2c
 80151d8:	40005800 	.word	0x40005800
 80151dc:	000186a0 	.word	0x000186a0

080151e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80151e4:	4b0f      	ldr	r3, [pc, #60]	; (8015224 <MX_RTC_Init+0x44>)
 80151e6:	4a10      	ldr	r2, [pc, #64]	; (8015228 <MX_RTC_Init+0x48>)
 80151e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80151ea:	4b0e      	ldr	r3, [pc, #56]	; (8015224 <MX_RTC_Init+0x44>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80151f0:	4b0c      	ldr	r3, [pc, #48]	; (8015224 <MX_RTC_Init+0x44>)
 80151f2:	227f      	movs	r2, #127	; 0x7f
 80151f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80151f6:	4b0b      	ldr	r3, [pc, #44]	; (8015224 <MX_RTC_Init+0x44>)
 80151f8:	22ff      	movs	r2, #255	; 0xff
 80151fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80151fc:	4b09      	ldr	r3, [pc, #36]	; (8015224 <MX_RTC_Init+0x44>)
 80151fe:	2200      	movs	r2, #0
 8015200:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015202:	4b08      	ldr	r3, [pc, #32]	; (8015224 <MX_RTC_Init+0x44>)
 8015204:	2200      	movs	r2, #0
 8015206:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015208:	4b06      	ldr	r3, [pc, #24]	; (8015224 <MX_RTC_Init+0x44>)
 801520a:	2200      	movs	r2, #0
 801520c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801520e:	4805      	ldr	r0, [pc, #20]	; (8015224 <MX_RTC_Init+0x44>)
 8015210:	f7f4 fc4e 	bl	8009ab0 <HAL_RTC_Init>
 8015214:	4603      	mov	r3, r0
 8015216:	2b00      	cmp	r3, #0
 8015218:	d001      	beq.n	801521e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 801521a:	f000 fadd 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801521e:	bf00      	nop
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	20009b40 	.word	0x20009b40
 8015228:	40002800 	.word	0x40002800

0801522c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 801522c:	b480      	push	{r7}
 801522e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8015230:	4b0c      	ldr	r3, [pc, #48]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 8015232:	4a0d      	ldr	r2, [pc, #52]	; (8015268 <MX_SDIO_SD_Init+0x3c>)
 8015234:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8015236:	4b0b      	ldr	r3, [pc, #44]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 8015238:	2200      	movs	r2, #0
 801523a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 801523c:	4b09      	ldr	r3, [pc, #36]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 801523e:	2200      	movs	r2, #0
 8015240:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8015242:	4b08      	ldr	r3, [pc, #32]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 8015244:	2200      	movs	r2, #0
 8015246:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8015248:	4b06      	ldr	r3, [pc, #24]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 801524a:	2200      	movs	r2, #0
 801524c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 801524e:	4b05      	ldr	r3, [pc, #20]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 8015250:	2200      	movs	r2, #0
 8015252:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8015254:	4b03      	ldr	r3, [pc, #12]	; (8015264 <MX_SDIO_SD_Init+0x38>)
 8015256:	2200      	movs	r2, #0
 8015258:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 801525a:	bf00      	nop
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	20009bc0 	.word	0x20009bc0
 8015268:	40012c00 	.word	0x40012c00

0801526c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8015270:	4b17      	ldr	r3, [pc, #92]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015272:	4a18      	ldr	r2, [pc, #96]	; (80152d4 <MX_SPI1_Init+0x68>)
 8015274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8015276:	4b16      	ldr	r3, [pc, #88]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015278:	f44f 7282 	mov.w	r2, #260	; 0x104
 801527c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801527e:	4b14      	ldr	r3, [pc, #80]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015280:	2200      	movs	r2, #0
 8015282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8015284:	4b12      	ldr	r3, [pc, #72]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015286:	2200      	movs	r2, #0
 8015288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801528a:	4b11      	ldr	r3, [pc, #68]	; (80152d0 <MX_SPI1_Init+0x64>)
 801528c:	2200      	movs	r2, #0
 801528e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8015290:	4b0f      	ldr	r3, [pc, #60]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015292:	2200      	movs	r2, #0
 8015294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8015296:	4b0e      	ldr	r3, [pc, #56]	; (80152d0 <MX_SPI1_Init+0x64>)
 8015298:	f44f 7200 	mov.w	r2, #512	; 0x200
 801529c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801529e:	4b0c      	ldr	r3, [pc, #48]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152a0:	2218      	movs	r2, #24
 80152a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80152a4:	4b0a      	ldr	r3, [pc, #40]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152a6:	2200      	movs	r2, #0
 80152a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80152aa:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80152b0:	4b07      	ldr	r3, [pc, #28]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80152b6:	4b06      	ldr	r3, [pc, #24]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152b8:	220a      	movs	r2, #10
 80152ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80152bc:	4804      	ldr	r0, [pc, #16]	; (80152d0 <MX_SPI1_Init+0x64>)
 80152be:	f7f6 f886 	bl	800b3ce <HAL_SPI_Init>
 80152c2:	4603      	mov	r3, r0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d001      	beq.n	80152cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80152c8:	f000 fa86 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80152cc:	bf00      	nop
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	20009c44 	.word	0x20009c44
 80152d4:	40013000 	.word	0x40013000

080152d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b086      	sub	sp, #24
 80152dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80152de:	f107 0308 	add.w	r3, r7, #8
 80152e2:	2200      	movs	r2, #0
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	605a      	str	r2, [r3, #4]
 80152e8:	609a      	str	r2, [r3, #8]
 80152ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80152ec:	463b      	mov	r3, r7
 80152ee:	2200      	movs	r2, #0
 80152f0:	601a      	str	r2, [r3, #0]
 80152f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80152f4:	4b1d      	ldr	r3, [pc, #116]	; (801536c <MX_TIM2_Init+0x94>)
 80152f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80152fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80152fc:	4b1b      	ldr	r3, [pc, #108]	; (801536c <MX_TIM2_Init+0x94>)
 80152fe:	2253      	movs	r2, #83	; 0x53
 8015300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015302:	4b1a      	ldr	r3, [pc, #104]	; (801536c <MX_TIM2_Init+0x94>)
 8015304:	2200      	movs	r2, #0
 8015306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8015308:	4b18      	ldr	r3, [pc, #96]	; (801536c <MX_TIM2_Init+0x94>)
 801530a:	4a19      	ldr	r2, [pc, #100]	; (8015370 <MX_TIM2_Init+0x98>)
 801530c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801530e:	4b17      	ldr	r3, [pc, #92]	; (801536c <MX_TIM2_Init+0x94>)
 8015310:	2200      	movs	r2, #0
 8015312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015314:	4b15      	ldr	r3, [pc, #84]	; (801536c <MX_TIM2_Init+0x94>)
 8015316:	2200      	movs	r2, #0
 8015318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801531a:	4814      	ldr	r0, [pc, #80]	; (801536c <MX_TIM2_Init+0x94>)
 801531c:	f7f6 fc4c 	bl	800bbb8 <HAL_TIM_Base_Init>
 8015320:	4603      	mov	r3, r0
 8015322:	2b00      	cmp	r3, #0
 8015324:	d001      	beq.n	801532a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8015326:	f000 fa57 	bl	80157d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801532a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801532e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8015330:	f107 0308 	add.w	r3, r7, #8
 8015334:	4619      	mov	r1, r3
 8015336:	480d      	ldr	r0, [pc, #52]	; (801536c <MX_TIM2_Init+0x94>)
 8015338:	f7f6 fe1e 	bl	800bf78 <HAL_TIM_ConfigClockSource>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d001      	beq.n	8015346 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8015342:	f000 fa49 	bl	80157d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015346:	2300      	movs	r3, #0
 8015348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801534a:	2300      	movs	r3, #0
 801534c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801534e:	463b      	mov	r3, r7
 8015350:	4619      	mov	r1, r3
 8015352:	4806      	ldr	r0, [pc, #24]	; (801536c <MX_TIM2_Init+0x94>)
 8015354:	f7f7 f9d7 	bl	800c706 <HAL_TIMEx_MasterConfigSynchronization>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 801535e:	f000 fa3b 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8015362:	bf00      	nop
 8015364:	3718      	adds	r7, #24
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	20009c9c 	.word	0x20009c9c
 8015370:	fa56ea00 	.word	0xfa56ea00

08015374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08e      	sub	sp, #56	; 0x38
 8015378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801537a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801537e:	2200      	movs	r2, #0
 8015380:	601a      	str	r2, [r3, #0]
 8015382:	605a      	str	r2, [r3, #4]
 8015384:	609a      	str	r2, [r3, #8]
 8015386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015388:	f107 0320 	add.w	r3, r7, #32
 801538c:	2200      	movs	r2, #0
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015392:	1d3b      	adds	r3, r7, #4
 8015394:	2200      	movs	r2, #0
 8015396:	601a      	str	r2, [r3, #0]
 8015398:	605a      	str	r2, [r3, #4]
 801539a:	609a      	str	r2, [r3, #8]
 801539c:	60da      	str	r2, [r3, #12]
 801539e:	611a      	str	r2, [r3, #16]
 80153a0:	615a      	str	r2, [r3, #20]
 80153a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80153a4:	4b32      	ldr	r3, [pc, #200]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153a6:	4a33      	ldr	r2, [pc, #204]	; (8015474 <MX_TIM3_Init+0x100>)
 80153a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80153aa:	4b31      	ldr	r3, [pc, #196]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153ac:	2201      	movs	r2, #1
 80153ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80153b0:	4b2f      	ldr	r3, [pc, #188]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153b2:	2200      	movs	r2, #0
 80153b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 80153b6:	4b2e      	ldr	r3, [pc, #184]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80153bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80153be:	4b2c      	ldr	r3, [pc, #176]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153c0:	2200      	movs	r2, #0
 80153c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80153c4:	4b2a      	ldr	r3, [pc, #168]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153c6:	2200      	movs	r2, #0
 80153c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80153ca:	4829      	ldr	r0, [pc, #164]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153cc:	f7f6 fbf4 	bl	800bbb8 <HAL_TIM_Base_Init>
 80153d0:	4603      	mov	r3, r0
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d001      	beq.n	80153da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80153d6:	f000 f9ff 	bl	80157d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80153da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80153de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80153e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153e4:	4619      	mov	r1, r3
 80153e6:	4822      	ldr	r0, [pc, #136]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153e8:	f7f6 fdc6 	bl	800bf78 <HAL_TIM_ConfigClockSource>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d001      	beq.n	80153f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80153f2:	f000 f9f1 	bl	80157d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80153f6:	481e      	ldr	r0, [pc, #120]	; (8015470 <MX_TIM3_Init+0xfc>)
 80153f8:	f7f6 fc2d 	bl	800bc56 <HAL_TIM_PWM_Init>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d001      	beq.n	8015406 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8015402:	f000 f9e9 	bl	80157d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015406:	2300      	movs	r3, #0
 8015408:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801540a:	2300      	movs	r3, #0
 801540c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801540e:	f107 0320 	add.w	r3, r7, #32
 8015412:	4619      	mov	r1, r3
 8015414:	4816      	ldr	r0, [pc, #88]	; (8015470 <MX_TIM3_Init+0xfc>)
 8015416:	f7f7 f976 	bl	800c706 <HAL_TIMEx_MasterConfigSynchronization>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d001      	beq.n	8015424 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8015420:	f000 f9da 	bl	80157d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015424:	2360      	movs	r3, #96	; 0x60
 8015426:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8015428:	2300      	movs	r3, #0
 801542a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 801542c:	2302      	movs	r3, #2
 801542e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8015430:	2300      	movs	r3, #0
 8015432:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8015434:	1d3b      	adds	r3, r7, #4
 8015436:	2204      	movs	r2, #4
 8015438:	4619      	mov	r1, r3
 801543a:	480d      	ldr	r0, [pc, #52]	; (8015470 <MX_TIM3_Init+0xfc>)
 801543c:	f7f6 fcd6 	bl	800bdec <HAL_TIM_PWM_ConfigChannel>
 8015440:	4603      	mov	r3, r0
 8015442:	2b00      	cmp	r3, #0
 8015444:	d001      	beq.n	801544a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8015446:	f000 f9c7 	bl	80157d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801544a:	1d3b      	adds	r3, r7, #4
 801544c:	2208      	movs	r2, #8
 801544e:	4619      	mov	r1, r3
 8015450:	4807      	ldr	r0, [pc, #28]	; (8015470 <MX_TIM3_Init+0xfc>)
 8015452:	f7f6 fccb 	bl	800bdec <HAL_TIM_PWM_ConfigChannel>
 8015456:	4603      	mov	r3, r0
 8015458:	2b00      	cmp	r3, #0
 801545a:	d001      	beq.n	8015460 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 801545c:	f000 f9bc 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8015460:	4803      	ldr	r0, [pc, #12]	; (8015470 <MX_TIM3_Init+0xfc>)
 8015462:	f000 fe33 	bl	80160cc <HAL_TIM_MspPostInit>

}
 8015466:	bf00      	nop
 8015468:	3738      	adds	r7, #56	; 0x38
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	20009ac0 	.word	0x20009ac0
 8015474:	40000400 	.word	0x40000400

08015478 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b086      	sub	sp, #24
 801547c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801547e:	f107 0308 	add.w	r3, r7, #8
 8015482:	2200      	movs	r2, #0
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	605a      	str	r2, [r3, #4]
 8015488:	609a      	str	r2, [r3, #8]
 801548a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801548c:	463b      	mov	r3, r7
 801548e:	2200      	movs	r2, #0
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8015494:	4b1d      	ldr	r3, [pc, #116]	; (801550c <MX_TIM5_Init+0x94>)
 8015496:	4a1e      	ldr	r2, [pc, #120]	; (8015510 <MX_TIM5_Init+0x98>)
 8015498:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 801549a:	4b1c      	ldr	r3, [pc, #112]	; (801550c <MX_TIM5_Init+0x94>)
 801549c:	2201      	movs	r2, #1
 801549e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80154a0:	4b1a      	ldr	r3, [pc, #104]	; (801550c <MX_TIM5_Init+0x94>)
 80154a2:	2200      	movs	r2, #0
 80154a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80154a6:	4b19      	ldr	r3, [pc, #100]	; (801550c <MX_TIM5_Init+0x94>)
 80154a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80154ae:	4b17      	ldr	r3, [pc, #92]	; (801550c <MX_TIM5_Init+0x94>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80154b4:	4b15      	ldr	r3, [pc, #84]	; (801550c <MX_TIM5_Init+0x94>)
 80154b6:	2200      	movs	r2, #0
 80154b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80154ba:	4814      	ldr	r0, [pc, #80]	; (801550c <MX_TIM5_Init+0x94>)
 80154bc:	f7f6 fb7c 	bl	800bbb8 <HAL_TIM_Base_Init>
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d001      	beq.n	80154ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80154c6:	f000 f987 	bl	80157d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80154ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80154ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80154d0:	f107 0308 	add.w	r3, r7, #8
 80154d4:	4619      	mov	r1, r3
 80154d6:	480d      	ldr	r0, [pc, #52]	; (801550c <MX_TIM5_Init+0x94>)
 80154d8:	f7f6 fd4e 	bl	800bf78 <HAL_TIM_ConfigClockSource>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d001      	beq.n	80154e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80154e2:	f000 f979 	bl	80157d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80154e6:	2300      	movs	r3, #0
 80154e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80154ea:	2300      	movs	r3, #0
 80154ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80154ee:	463b      	mov	r3, r7
 80154f0:	4619      	mov	r1, r3
 80154f2:	4806      	ldr	r0, [pc, #24]	; (801550c <MX_TIM5_Init+0x94>)
 80154f4:	f7f7 f907 	bl	800c706 <HAL_TIMEx_MasterConfigSynchronization>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d001      	beq.n	8015502 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80154fe:	f000 f96b 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8015502:	bf00      	nop
 8015504:	3718      	adds	r7, #24
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	20009a80 	.word	0x20009a80
 8015510:	40000c00 	.word	0x40000c00

08015514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8015518:	4b11      	ldr	r3, [pc, #68]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 801551a:	4a12      	ldr	r2, [pc, #72]	; (8015564 <MX_USART1_UART_Init+0x50>)
 801551c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 801551e:	4b10      	ldr	r3, [pc, #64]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 8015520:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8015524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8015526:	4b0e      	ldr	r3, [pc, #56]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 8015528:	2200      	movs	r2, #0
 801552a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801552c:	4b0c      	ldr	r3, [pc, #48]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 801552e:	2200      	movs	r2, #0
 8015530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8015532:	4b0b      	ldr	r3, [pc, #44]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 8015534:	2200      	movs	r2, #0
 8015536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8015538:	4b09      	ldr	r3, [pc, #36]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 801553a:	220c      	movs	r2, #12
 801553c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801553e:	4b08      	ldr	r3, [pc, #32]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 8015540:	2200      	movs	r2, #0
 8015542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8015544:	4b06      	ldr	r3, [pc, #24]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 8015546:	2200      	movs	r2, #0
 8015548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801554a:	4805      	ldr	r0, [pc, #20]	; (8015560 <MX_USART1_UART_Init+0x4c>)
 801554c:	f7f7 f920 	bl	800c790 <HAL_UART_Init>
 8015550:	4603      	mov	r3, r0
 8015552:	2b00      	cmp	r3, #0
 8015554:	d001      	beq.n	801555a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8015556:	f000 f93f 	bl	80157d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801555a:	bf00      	nop
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	20009b00 	.word	0x20009b00
 8015564:	40011000 	.word	0x40011000

08015568 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801556e:	2300      	movs	r3, #0
 8015570:	607b      	str	r3, [r7, #4]
 8015572:	4b10      	ldr	r3, [pc, #64]	; (80155b4 <MX_DMA_Init+0x4c>)
 8015574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015576:	4a0f      	ldr	r2, [pc, #60]	; (80155b4 <MX_DMA_Init+0x4c>)
 8015578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801557c:	6313      	str	r3, [r2, #48]	; 0x30
 801557e:	4b0d      	ldr	r3, [pc, #52]	; (80155b4 <MX_DMA_Init+0x4c>)
 8015580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015586:	607b      	str	r3, [r7, #4]
 8015588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 801558a:	2200      	movs	r2, #0
 801558c:	2100      	movs	r1, #0
 801558e:	203b      	movs	r0, #59	; 0x3b
 8015590:	f7f0 fefd 	bl	800638e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8015594:	203b      	movs	r0, #59	; 0x3b
 8015596:	f7f0 ff16 	bl	80063c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 801559a:	2200      	movs	r2, #0
 801559c:	2100      	movs	r1, #0
 801559e:	2045      	movs	r0, #69	; 0x45
 80155a0:	f7f0 fef5 	bl	800638e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80155a4:	2045      	movs	r0, #69	; 0x45
 80155a6:	f7f0 ff0e 	bl	80063c6 <HAL_NVIC_EnableIRQ>

}
 80155aa:	bf00      	nop
 80155ac:	3708      	adds	r7, #8
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	40023800 	.word	0x40023800

080155b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b08a      	sub	sp, #40	; 0x28
 80155bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155be:	f107 0314 	add.w	r3, r7, #20
 80155c2:	2200      	movs	r2, #0
 80155c4:	601a      	str	r2, [r3, #0]
 80155c6:	605a      	str	r2, [r3, #4]
 80155c8:	609a      	str	r2, [r3, #8]
 80155ca:	60da      	str	r2, [r3, #12]
 80155cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80155ce:	2300      	movs	r3, #0
 80155d0:	613b      	str	r3, [r7, #16]
 80155d2:	4b64      	ldr	r3, [pc, #400]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d6:	4a63      	ldr	r2, [pc, #396]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155d8:	f043 0304 	orr.w	r3, r3, #4
 80155dc:	6313      	str	r3, [r2, #48]	; 0x30
 80155de:	4b61      	ldr	r3, [pc, #388]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e2:	f003 0304 	and.w	r3, r3, #4
 80155e6:	613b      	str	r3, [r7, #16]
 80155e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80155ea:	2300      	movs	r3, #0
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	4b5d      	ldr	r3, [pc, #372]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155f2:	4a5c      	ldr	r2, [pc, #368]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155f8:	6313      	str	r3, [r2, #48]	; 0x30
 80155fa:	4b5a      	ldr	r3, [pc, #360]	; (8015764 <MX_GPIO_Init+0x1ac>)
 80155fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015602:	60fb      	str	r3, [r7, #12]
 8015604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015606:	2300      	movs	r3, #0
 8015608:	60bb      	str	r3, [r7, #8]
 801560a:	4b56      	ldr	r3, [pc, #344]	; (8015764 <MX_GPIO_Init+0x1ac>)
 801560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801560e:	4a55      	ldr	r2, [pc, #340]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015610:	f043 0302 	orr.w	r3, r3, #2
 8015614:	6313      	str	r3, [r2, #48]	; 0x30
 8015616:	4b53      	ldr	r3, [pc, #332]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801561a:	f003 0302 	and.w	r3, r3, #2
 801561e:	60bb      	str	r3, [r7, #8]
 8015620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015622:	2300      	movs	r3, #0
 8015624:	607b      	str	r3, [r7, #4]
 8015626:	4b4f      	ldr	r3, [pc, #316]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801562a:	4a4e      	ldr	r2, [pc, #312]	; (8015764 <MX_GPIO_Init+0x1ac>)
 801562c:	f043 0301 	orr.w	r3, r3, #1
 8015630:	6313      	str	r3, [r2, #48]	; 0x30
 8015632:	4b4c      	ldr	r3, [pc, #304]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015636:	f003 0301 	and.w	r3, r3, #1
 801563a:	607b      	str	r3, [r7, #4]
 801563c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801563e:	2300      	movs	r3, #0
 8015640:	603b      	str	r3, [r7, #0]
 8015642:	4b48      	ldr	r3, [pc, #288]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015646:	4a47      	ldr	r2, [pc, #284]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015648:	f043 0308 	orr.w	r3, r3, #8
 801564c:	6313      	str	r3, [r2, #48]	; 0x30
 801564e:	4b45      	ldr	r3, [pc, #276]	; (8015764 <MX_GPIO_Init+0x1ac>)
 8015650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015652:	f003 0308 	and.w	r3, r3, #8
 8015656:	603b      	str	r3, [r7, #0]
 8015658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LR_NSS_Pin|LEDA_Pin|LEDB_Pin|LEDC_Pin 
 801565a:	2200      	movs	r2, #0
 801565c:	f242 010f 	movw	r1, #8207	; 0x200f
 8015660:	4841      	ldr	r0, [pc, #260]	; (8015768 <MX_GPIO_Init+0x1b0>)
 8015662:	f7f1 fc15 	bl	8006e90 <HAL_GPIO_WritePin>
                          |LEDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_STBY_Pin|PH_R_Pin|PH_L_Pin, GPIO_PIN_RESET);
 8015666:	2200      	movs	r2, #0
 8015668:	f245 0104 	movw	r1, #20484	; 0x5004
 801566c:	483f      	ldr	r0, [pc, #252]	; (801576c <MX_GPIO_Init+0x1b4>)
 801566e:	f7f1 fc0f 	bl	8006e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_RESET_GPIO_Port, LR_RESET_Pin, GPIO_PIN_RESET);
 8015672:	2200      	movs	r2, #0
 8015674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015678:	483d      	ldr	r0, [pc, #244]	; (8015770 <MX_GPIO_Init+0x1b8>)
 801567a:	f7f1 fc09 	bl	8006e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 801567e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015684:	2301      	movs	r3, #1
 8015686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015688:	2302      	movs	r3, #2
 801568a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801568c:	2300      	movs	r3, #0
 801568e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8015690:	f107 0314 	add.w	r3, r7, #20
 8015694:	4619      	mov	r1, r3
 8015696:	4834      	ldr	r0, [pc, #208]	; (8015768 <MX_GPIO_Init+0x1b0>)
 8015698:	f7f1 fa48 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 801569c:	230f      	movs	r3, #15
 801569e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80156a0:	2301      	movs	r3, #1
 80156a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156a4:	2300      	movs	r3, #0
 80156a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156a8:	2300      	movs	r3, #0
 80156aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80156ac:	f107 0314 	add.w	r3, r7, #20
 80156b0:	4619      	mov	r1, r3
 80156b2:	482d      	ldr	r0, [pc, #180]	; (8015768 <MX_GPIO_Init+0x1b0>)
 80156b4:	f7f1 fa3a 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_DIO1_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_DIO1_Pin;
 80156b8:	2330      	movs	r3, #48	; 0x30
 80156ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80156bc:	2300      	movs	r3, #0
 80156be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80156c0:	2302      	movs	r3, #2
 80156c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80156c4:	f107 0314 	add.w	r3, r7, #20
 80156c8:	4619      	mov	r1, r3
 80156ca:	4827      	ldr	r0, [pc, #156]	; (8015768 <MX_GPIO_Init+0x1b0>)
 80156cc:	f7f1 fa2e 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_STBY_Pin */
  GPIO_InitStruct.Pin = MOT_STBY_Pin;
 80156d0:	2304      	movs	r3, #4
 80156d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80156d4:	2301      	movs	r3, #1
 80156d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156d8:	2300      	movs	r3, #0
 80156da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156dc:	2300      	movs	r3, #0
 80156de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT_STBY_GPIO_Port, &GPIO_InitStruct);
 80156e0:	f107 0314 	add.w	r3, r7, #20
 80156e4:	4619      	mov	r1, r3
 80156e6:	4821      	ldr	r0, [pc, #132]	; (801576c <MX_GPIO_Init+0x1b4>)
 80156e8:	f7f1 fa20 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_R_Pin PH_L_Pin */
  GPIO_InitStruct.Pin = PH_R_Pin|PH_L_Pin;
 80156ec:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80156f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80156f2:	2301      	movs	r3, #1
 80156f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80156f6:	2302      	movs	r3, #2
 80156f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156fa:	2300      	movs	r3, #0
 80156fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80156fe:	f107 0314 	add.w	r3, r7, #20
 8015702:	4619      	mov	r1, r3
 8015704:	4819      	ldr	r0, [pc, #100]	; (801576c <MX_GPIO_Init+0x1b4>)
 8015706:	f7f1 fa11 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 801570a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801570e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015710:	2300      	movs	r3, #0
 8015712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015714:	2301      	movs	r3, #1
 8015716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8015718:	f107 0314 	add.w	r3, r7, #20
 801571c:	4619      	mov	r1, r3
 801571e:	4814      	ldr	r0, [pc, #80]	; (8015770 <MX_GPIO_Init+0x1b8>)
 8015720:	f7f1 fa04 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 8015724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801572a:	2301      	movs	r3, #1
 801572c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801572e:	2302      	movs	r3, #2
 8015730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015732:	2300      	movs	r3, #0
 8015734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 8015736:	f107 0314 	add.w	r3, r7, #20
 801573a:	4619      	mov	r1, r3
 801573c:	480c      	ldr	r0, [pc, #48]	; (8015770 <MX_GPIO_Init+0x1b8>)
 801573e:	f7f1 f9f5 	bl	8006b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8015742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015748:	2300      	movs	r3, #0
 801574a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801574c:	2302      	movs	r3, #2
 801574e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015750:	f107 0314 	add.w	r3, r7, #20
 8015754:	4619      	mov	r1, r3
 8015756:	4805      	ldr	r0, [pc, #20]	; (801576c <MX_GPIO_Init+0x1b4>)
 8015758:	f7f1 f9e8 	bl	8006b2c <HAL_GPIO_Init>

}
 801575c:	bf00      	nop
 801575e:	3728      	adds	r7, #40	; 0x28
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}
 8015764:	40023800 	.word	0x40023800
 8015768:	40020800 	.word	0x40020800
 801576c:	40020400 	.word	0x40020400
 8015770:	40020000 	.word	0x40020000

08015774 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8015774:	b480      	push	{r7}
 8015776:	af00      	add	r7, sp, #0
 8015778:	4b02      	ldr	r3, [pc, #8]	; (8015784 <Get_I2C1_Instance+0x10>)
 801577a:	4618      	mov	r0, r3
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr
 8015784:	200099d8 	.word	0x200099d8

08015788 <Get_SPI1_Instance>:
I2C_HandleTypeDef* Get_I2C2_Instance(void) { return &hi2c2; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8015788:	b480      	push	{r7}
 801578a:	af00      	add	r7, sp, #0
 801578c:	4b02      	ldr	r3, [pc, #8]	; (8015798 <Get_SPI1_Instance+0x10>)
 801578e:	4618      	mov	r0, r3
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr
 8015798:	20009c44 	.word	0x20009c44

0801579c <Get_UART1_Instance>:
UART_HandleTypeDef* Get_UART1_Instance(void) { return &huart1; }
 801579c:	b480      	push	{r7}
 801579e:	af00      	add	r7, sp, #0
 80157a0:	4b02      	ldr	r3, [pc, #8]	; (80157ac <Get_UART1_Instance+0x10>)
 80157a2:	4618      	mov	r0, r3
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr
 80157ac:	20009b00 	.word	0x20009b00

080157b0 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 80157b0:	b480      	push	{r7}
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	4b02      	ldr	r3, [pc, #8]	; (80157c0 <Get_RTC_Instance+0x10>)
 80157b6:	4618      	mov	r0, r3
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	20009b40 	.word	0x20009b40

080157c4 <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 80157c4:	b480      	push	{r7}
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	4b02      	ldr	r3, [pc, #8]	; (80157d4 <Get_TIM3_Instance+0x10>)
 80157ca:	4618      	mov	r0, r3
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	20009ac0 	.word	0x20009ac0

080157d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80157d8:	b480      	push	{r7}
 80157da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80157dc:	bf00      	nop
 80157de:	46bd      	mov	sp, r7
 80157e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e4:	4770      	bx	lr

080157e6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80157e6:	b580      	push	{r7, lr}
 80157e8:	b084      	sub	sp, #16
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80157ee:	f7f0 fcc5 	bl	800617c <HAL_GetTick>
 80157f2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80157f4:	e006      	b.n	8015804 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80157f6:	f7fd f9d9 	bl	8012bac <BSP_SD_GetCardState>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d101      	bne.n	8015804 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015800:	2300      	movs	r3, #0
 8015802:	e009      	b.n	8015818 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015804:	f7f0 fcba 	bl	800617c <HAL_GetTick>
 8015808:	4602      	mov	r2, r0
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	1ad3      	subs	r3, r2, r3
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	429a      	cmp	r2, r3
 8015812:	d8f0      	bhi.n	80157f6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015818:	4618      	mov	r0, r3
 801581a:	3710      	adds	r7, #16
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	4603      	mov	r3, r0
 8015828:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801582a:	4b0b      	ldr	r3, [pc, #44]	; (8015858 <SD_CheckStatus+0x38>)
 801582c:	2201      	movs	r2, #1
 801582e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015830:	f7fd f9bc 	bl	8012bac <BSP_SD_GetCardState>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d107      	bne.n	801584a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801583a:	4b07      	ldr	r3, [pc, #28]	; (8015858 <SD_CheckStatus+0x38>)
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	b2db      	uxtb	r3, r3
 8015840:	f023 0301 	bic.w	r3, r3, #1
 8015844:	b2da      	uxtb	r2, r3
 8015846:	4b04      	ldr	r3, [pc, #16]	; (8015858 <SD_CheckStatus+0x38>)
 8015848:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801584a:	4b03      	ldr	r3, [pc, #12]	; (8015858 <SD_CheckStatus+0x38>)
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	b2db      	uxtb	r3, r3
}
 8015850:	4618      	mov	r0, r3
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	2000016c 	.word	0x2000016c

0801585c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	4603      	mov	r3, r0
 8015864:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015866:	f7fd f947 	bl	8012af8 <BSP_SD_Init>
 801586a:	4603      	mov	r3, r0
 801586c:	2b00      	cmp	r3, #0
 801586e:	d107      	bne.n	8015880 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015870:	79fb      	ldrb	r3, [r7, #7]
 8015872:	4618      	mov	r0, r3
 8015874:	f7ff ffd4 	bl	8015820 <SD_CheckStatus>
 8015878:	4603      	mov	r3, r0
 801587a:	461a      	mov	r2, r3
 801587c:	4b04      	ldr	r3, [pc, #16]	; (8015890 <SD_initialize+0x34>)
 801587e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8015880:	4b03      	ldr	r3, [pc, #12]	; (8015890 <SD_initialize+0x34>)
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	b2db      	uxtb	r3, r3
}
 8015886:	4618      	mov	r0, r3
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	2000016c 	.word	0x2000016c

08015894 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	4603      	mov	r3, r0
 801589c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801589e:	79fb      	ldrb	r3, [r7, #7]
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7ff ffbd 	bl	8015820 <SD_CheckStatus>
 80158a6:	4603      	mov	r3, r0
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b088      	sub	sp, #32
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60b9      	str	r1, [r7, #8]
 80158b8:	607a      	str	r2, [r7, #4]
 80158ba:	603b      	str	r3, [r7, #0]
 80158bc:	4603      	mov	r3, r0
 80158be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80158c0:	2301      	movs	r3, #1
 80158c2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80158c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80158c8:	f7ff ff8d 	bl	80157e6 <SD_CheckStatusWithTimeout>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	da01      	bge.n	80158d6 <SD_read+0x26>
  {
    return res;
 80158d2:	7ffb      	ldrb	r3, [r7, #31]
 80158d4:	e08b      	b.n	80159ee <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	f003 0303 	and.w	r3, r3, #3
 80158dc:	2b00      	cmp	r3, #0
 80158de:	f040 8085 	bne.w	80159ec <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80158e2:	683a      	ldr	r2, [r7, #0]
 80158e4:	6879      	ldr	r1, [r7, #4]
 80158e6:	68b8      	ldr	r0, [r7, #8]
 80158e8:	f7fd f92c 	bl	8012b44 <BSP_SD_ReadBlocks_DMA>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d133      	bne.n	801595a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80158f2:	4b41      	ldr	r3, [pc, #260]	; (80159f8 <SD_read+0x148>)
 80158f4:	2200      	movs	r2, #0
 80158f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80158f8:	f7f0 fc40 	bl	800617c <HAL_GetTick>
 80158fc:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80158fe:	bf00      	nop
 8015900:	4b3d      	ldr	r3, [pc, #244]	; (80159f8 <SD_read+0x148>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d108      	bne.n	801591a <SD_read+0x6a>
 8015908:	f7f0 fc38 	bl	800617c <HAL_GetTick>
 801590c:	4602      	mov	r2, r0
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	1ad3      	subs	r3, r2, r3
 8015912:	f247 522f 	movw	r2, #29999	; 0x752f
 8015916:	4293      	cmp	r3, r2
 8015918:	d9f2      	bls.n	8015900 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801591a:	4b37      	ldr	r3, [pc, #220]	; (80159f8 <SD_read+0x148>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d102      	bne.n	8015928 <SD_read+0x78>
      {
        res = RES_ERROR;
 8015922:	2301      	movs	r3, #1
 8015924:	77fb      	strb	r3, [r7, #31]
 8015926:	e061      	b.n	80159ec <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8015928:	4b33      	ldr	r3, [pc, #204]	; (80159f8 <SD_read+0x148>)
 801592a:	2200      	movs	r2, #0
 801592c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801592e:	f7f0 fc25 	bl	800617c <HAL_GetTick>
 8015932:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015934:	e007      	b.n	8015946 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015936:	f7fd f939 	bl	8012bac <BSP_SD_GetCardState>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d102      	bne.n	8015946 <SD_read+0x96>
          {
            res = RES_OK;
 8015940:	2300      	movs	r3, #0
 8015942:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015944:	e052      	b.n	80159ec <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015946:	f7f0 fc19 	bl	800617c <HAL_GetTick>
 801594a:	4602      	mov	r2, r0
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	1ad3      	subs	r3, r2, r3
 8015950:	f247 522f 	movw	r2, #29999	; 0x752f
 8015954:	4293      	cmp	r3, r2
 8015956:	d9ee      	bls.n	8015936 <SD_read+0x86>
 8015958:	e048      	b.n	80159ec <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801595a:	2300      	movs	r3, #0
 801595c:	61bb      	str	r3, [r7, #24]
 801595e:	e034      	b.n	80159ca <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	1c5a      	adds	r2, r3, #1
 8015964:	607a      	str	r2, [r7, #4]
 8015966:	2201      	movs	r2, #1
 8015968:	4619      	mov	r1, r3
 801596a:	4824      	ldr	r0, [pc, #144]	; (80159fc <SD_read+0x14c>)
 801596c:	f7fd f8ea 	bl	8012b44 <BSP_SD_ReadBlocks_DMA>
 8015970:	4603      	mov	r3, r0
 8015972:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015974:	7fbb      	ldrb	r3, [r7, #30]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d12c      	bne.n	80159d4 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 801597a:	4b1f      	ldr	r3, [pc, #124]	; (80159f8 <SD_read+0x148>)
 801597c:	2200      	movs	r2, #0
 801597e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8015980:	f7f0 fbfc 	bl	800617c <HAL_GetTick>
 8015984:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015986:	bf00      	nop
 8015988:	4b1b      	ldr	r3, [pc, #108]	; (80159f8 <SD_read+0x148>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d108      	bne.n	80159a2 <SD_read+0xf2>
 8015990:	f7f0 fbf4 	bl	800617c <HAL_GetTick>
 8015994:	4602      	mov	r2, r0
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	f247 522f 	movw	r2, #29999	; 0x752f
 801599e:	4293      	cmp	r3, r2
 80159a0:	d9f2      	bls.n	8015988 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 80159a2:	4b15      	ldr	r3, [pc, #84]	; (80159f8 <SD_read+0x148>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d016      	beq.n	80159d8 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	4a13      	ldr	r2, [pc, #76]	; (80159fc <SD_read+0x14c>)
 80159ae:	4618      	mov	r0, r3
 80159b0:	4611      	mov	r1, r2
 80159b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159b6:	461a      	mov	r2, r3
 80159b8:	f001 fa7a 	bl	8016eb0 <memcpy>
          buff += BLOCKSIZE;
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80159c2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	3301      	adds	r3, #1
 80159c8:	61bb      	str	r3, [r7, #24]
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	683a      	ldr	r2, [r7, #0]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d8c6      	bhi.n	8015960 <SD_read+0xb0>
 80159d2:	e002      	b.n	80159da <SD_read+0x12a>
        }
        else
        {
          break;
 80159d4:	bf00      	nop
 80159d6:	e000      	b.n	80159da <SD_read+0x12a>
            break;
 80159d8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	683a      	ldr	r2, [r7, #0]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d104      	bne.n	80159ec <SD_read+0x13c>
 80159e2:	7fbb      	ldrb	r3, [r7, #30]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d101      	bne.n	80159ec <SD_read+0x13c>
        res = RES_OK;
 80159e8:	2300      	movs	r3, #0
 80159ea:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80159ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3720      	adds	r7, #32
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	20001528 	.word	0x20001528
 80159fc:	20001324 	.word	0x20001324

08015a00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b088      	sub	sp, #32
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	60b9      	str	r1, [r7, #8]
 8015a08:	607a      	str	r2, [r7, #4]
 8015a0a:	603b      	str	r3, [r7, #0]
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015a10:	2301      	movs	r3, #1
 8015a12:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8015a14:	4b4c      	ldr	r3, [pc, #304]	; (8015b48 <SD_write+0x148>)
 8015a16:	2200      	movs	r2, #0
 8015a18:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015a1a:	f247 5030 	movw	r0, #30000	; 0x7530
 8015a1e:	f7ff fee2 	bl	80157e6 <SD_CheckStatusWithTimeout>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	da01      	bge.n	8015a2c <SD_write+0x2c>
  {
    return res;
 8015a28:	7ffb      	ldrb	r3, [r7, #31]
 8015a2a:	e088      	b.n	8015b3e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	f003 0303 	and.w	r3, r3, #3
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	f040 8082 	bne.w	8015b3c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015a38:	683a      	ldr	r2, [r7, #0]
 8015a3a:	6879      	ldr	r1, [r7, #4]
 8015a3c:	68b8      	ldr	r0, [r7, #8]
 8015a3e:	f7fd f89b 	bl	8012b78 <BSP_SD_WriteBlocks_DMA>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d130      	bne.n	8015aaa <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015a48:	f7f0 fb98 	bl	800617c <HAL_GetTick>
 8015a4c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015a4e:	bf00      	nop
 8015a50:	4b3d      	ldr	r3, [pc, #244]	; (8015b48 <SD_write+0x148>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d108      	bne.n	8015a6a <SD_write+0x6a>
 8015a58:	f7f0 fb90 	bl	800617c <HAL_GetTick>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	697b      	ldr	r3, [r7, #20]
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	f247 522f 	movw	r2, #29999	; 0x752f
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d9f2      	bls.n	8015a50 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015a6a:	4b37      	ldr	r3, [pc, #220]	; (8015b48 <SD_write+0x148>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d102      	bne.n	8015a78 <SD_write+0x78>
      {
        res = RES_ERROR;
 8015a72:	2301      	movs	r3, #1
 8015a74:	77fb      	strb	r3, [r7, #31]
 8015a76:	e061      	b.n	8015b3c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8015a78:	4b33      	ldr	r3, [pc, #204]	; (8015b48 <SD_write+0x148>)
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015a7e:	f7f0 fb7d 	bl	800617c <HAL_GetTick>
 8015a82:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015a84:	e007      	b.n	8015a96 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015a86:	f7fd f891 	bl	8012bac <BSP_SD_GetCardState>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d102      	bne.n	8015a96 <SD_write+0x96>
          {
            res = RES_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	77fb      	strb	r3, [r7, #31]
            break;
 8015a94:	e052      	b.n	8015b3c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015a96:	f7f0 fb71 	bl	800617c <HAL_GetTick>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	1ad3      	subs	r3, r2, r3
 8015aa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8015aa4:	4293      	cmp	r3, r2
 8015aa6:	d9ee      	bls.n	8015a86 <SD_write+0x86>
 8015aa8:	e048      	b.n	8015b3c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8015aaa:	2300      	movs	r3, #0
 8015aac:	61bb      	str	r3, [r7, #24]
 8015aae:	e034      	b.n	8015b1a <SD_write+0x11a>
      {
        WriteStatus = 0;
 8015ab0:	4b25      	ldr	r3, [pc, #148]	; (8015b48 <SD_write+0x148>)
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	1c5a      	adds	r2, r3, #1
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	2201      	movs	r2, #1
 8015abe:	4619      	mov	r1, r3
 8015ac0:	4822      	ldr	r0, [pc, #136]	; (8015b4c <SD_write+0x14c>)
 8015ac2:	f7fd f859 	bl	8012b78 <BSP_SD_WriteBlocks_DMA>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015aca:	7fbb      	ldrb	r3, [r7, #30]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d129      	bne.n	8015b24 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8015ad0:	f7f0 fb54 	bl	800617c <HAL_GetTick>
 8015ad4:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015ad6:	bf00      	nop
 8015ad8:	4b1b      	ldr	r3, [pc, #108]	; (8015b48 <SD_write+0x148>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d108      	bne.n	8015af2 <SD_write+0xf2>
 8015ae0:	f7f0 fb4c 	bl	800617c <HAL_GetTick>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	f247 522f 	movw	r2, #29999	; 0x752f
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d9f2      	bls.n	8015ad8 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8015af2:	4b15      	ldr	r3, [pc, #84]	; (8015b48 <SD_write+0x148>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d016      	beq.n	8015b28 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	4a13      	ldr	r2, [pc, #76]	; (8015b4c <SD_write+0x14c>)
 8015afe:	4618      	mov	r0, r3
 8015b00:	4611      	mov	r1, r2
 8015b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b06:	461a      	mov	r2, r3
 8015b08:	f001 f9d2 	bl	8016eb0 <memcpy>
          buff += BLOCKSIZE;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015b12:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8015b14:	69bb      	ldr	r3, [r7, #24]
 8015b16:	3301      	adds	r3, #1
 8015b18:	61bb      	str	r3, [r7, #24]
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	683a      	ldr	r2, [r7, #0]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d8c6      	bhi.n	8015ab0 <SD_write+0xb0>
 8015b22:	e002      	b.n	8015b2a <SD_write+0x12a>
        }
        else
        {
          break;
 8015b24:	bf00      	nop
 8015b26:	e000      	b.n	8015b2a <SD_write+0x12a>
            break;
 8015b28:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d104      	bne.n	8015b3c <SD_write+0x13c>
 8015b32:	7fbb      	ldrb	r3, [r7, #30]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <SD_write+0x13c>
        res = RES_OK;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8015b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3720      	adds	r7, #32
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	20001524 	.word	0x20001524
 8015b4c:	20001324 	.word	0x20001324

08015b50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b08c      	sub	sp, #48	; 0x30
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	4603      	mov	r3, r0
 8015b58:	603a      	str	r2, [r7, #0]
 8015b5a:	71fb      	strb	r3, [r7, #7]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015b60:	2301      	movs	r3, #1
 8015b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015b66:	4b25      	ldr	r3, [pc, #148]	; (8015bfc <SD_ioctl+0xac>)
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	f003 0301 	and.w	r3, r3, #1
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d001      	beq.n	8015b78 <SD_ioctl+0x28>
 8015b74:	2303      	movs	r3, #3
 8015b76:	e03c      	b.n	8015bf2 <SD_ioctl+0xa2>

  switch (cmd)
 8015b78:	79bb      	ldrb	r3, [r7, #6]
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d834      	bhi.n	8015be8 <SD_ioctl+0x98>
 8015b7e:	a201      	add	r2, pc, #4	; (adr r2, 8015b84 <SD_ioctl+0x34>)
 8015b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b84:	08015b95 	.word	0x08015b95
 8015b88:	08015b9d 	.word	0x08015b9d
 8015b8c:	08015bb5 	.word	0x08015bb5
 8015b90:	08015bcf 	.word	0x08015bcf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015b94:	2300      	movs	r3, #0
 8015b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015b9a:	e028      	b.n	8015bee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b9c:	f107 030c 	add.w	r3, r7, #12
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7fd f813 	bl	8012bcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015bac:	2300      	movs	r3, #0
 8015bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015bb2:	e01c      	b.n	8015bee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015bb4:	f107 030c 	add.w	r3, r7, #12
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f7fd f807 	bl	8012bcc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015bcc:	e00f      	b.n	8015bee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015bce:	f107 030c 	add.w	r3, r7, #12
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fc fffa 	bl	8012bcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bda:	0a5a      	lsrs	r2, r3, #9
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015be0:	2300      	movs	r3, #0
 8015be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015be6:	e002      	b.n	8015bee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015be8:	2304      	movs	r3, #4
 8015bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3730      	adds	r7, #48	; 0x30
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	2000016c 	.word	0x2000016c

08015c00 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015c00:	b480      	push	{r7}
 8015c02:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8015c04:	4b03      	ldr	r3, [pc, #12]	; (8015c14 <BSP_SD_WriteCpltCallback+0x14>)
 8015c06:	2201      	movs	r2, #1
 8015c08:	601a      	str	r2, [r3, #0]
}
 8015c0a:	bf00      	nop
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	20001524 	.word	0x20001524

08015c18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015c1c:	4b03      	ldr	r3, [pc, #12]	; (8015c2c <BSP_SD_ReadCpltCallback+0x14>)
 8015c1e:	2201      	movs	r2, #1
 8015c20:	601a      	str	r2, [r3, #0]
}
 8015c22:	bf00      	nop
 8015c24:	46bd      	mov	sp, r7
 8015c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2a:	4770      	bx	lr
 8015c2c:	20001528 	.word	0x20001528

08015c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015c30:	b480      	push	{r7}
 8015c32:	b083      	sub	sp, #12
 8015c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015c36:	2300      	movs	r3, #0
 8015c38:	607b      	str	r3, [r7, #4]
 8015c3a:	4b10      	ldr	r3, [pc, #64]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c3e:	4a0f      	ldr	r2, [pc, #60]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c44:	6453      	str	r3, [r2, #68]	; 0x44
 8015c46:	4b0d      	ldr	r3, [pc, #52]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c4e:	607b      	str	r3, [r7, #4]
 8015c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015c52:	2300      	movs	r3, #0
 8015c54:	603b      	str	r3, [r7, #0]
 8015c56:	4b09      	ldr	r3, [pc, #36]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c5a:	4a08      	ldr	r2, [pc, #32]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c60:	6413      	str	r3, [r2, #64]	; 0x40
 8015c62:	4b06      	ldr	r3, [pc, #24]	; (8015c7c <HAL_MspInit+0x4c>)
 8015c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c6a:	603b      	str	r3, [r7, #0]
 8015c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015c6e:	bf00      	nop
 8015c70:	370c      	adds	r7, #12
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
 8015c7a:	bf00      	nop
 8015c7c:	40023800 	.word	0x40023800

08015c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b08c      	sub	sp, #48	; 0x30
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c88:	f107 031c 	add.w	r3, r7, #28
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	601a      	str	r2, [r3, #0]
 8015c90:	605a      	str	r2, [r3, #4]
 8015c92:	609a      	str	r2, [r3, #8]
 8015c94:	60da      	str	r2, [r3, #12]
 8015c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	4a32      	ldr	r2, [pc, #200]	; (8015d68 <HAL_I2C_MspInit+0xe8>)
 8015c9e:	4293      	cmp	r3, r2
 8015ca0:	d12c      	bne.n	8015cfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	61bb      	str	r3, [r7, #24]
 8015ca6:	4b31      	ldr	r3, [pc, #196]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015caa:	4a30      	ldr	r2, [pc, #192]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015cac:	f043 0302 	orr.w	r3, r3, #2
 8015cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8015cb2:	4b2e      	ldr	r3, [pc, #184]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cb6:	f003 0302 	and.w	r3, r3, #2
 8015cba:	61bb      	str	r3, [r7, #24]
 8015cbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8015cbe:	23c0      	movs	r3, #192	; 0xc0
 8015cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015cc2:	2312      	movs	r3, #18
 8015cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cca:	2303      	movs	r3, #3
 8015ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015cce:	2304      	movs	r3, #4
 8015cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015cd2:	f107 031c 	add.w	r3, r7, #28
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	4825      	ldr	r0, [pc, #148]	; (8015d70 <HAL_I2C_MspInit+0xf0>)
 8015cda:	f7f0 ff27 	bl	8006b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015cde:	2300      	movs	r3, #0
 8015ce0:	617b      	str	r3, [r7, #20]
 8015ce2:	4b22      	ldr	r3, [pc, #136]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ce6:	4a21      	ldr	r2, [pc, #132]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015cec:	6413      	str	r3, [r2, #64]	; 0x40
 8015cee:	4b1f      	ldr	r3, [pc, #124]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015cf6:	617b      	str	r3, [r7, #20]
 8015cf8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8015cfa:	e031      	b.n	8015d60 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4a1c      	ldr	r2, [pc, #112]	; (8015d74 <HAL_I2C_MspInit+0xf4>)
 8015d02:	4293      	cmp	r3, r2
 8015d04:	d12c      	bne.n	8015d60 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015d06:	2300      	movs	r3, #0
 8015d08:	613b      	str	r3, [r7, #16]
 8015d0a:	4b18      	ldr	r3, [pc, #96]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d0e:	4a17      	ldr	r2, [pc, #92]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d10:	f043 0302 	orr.w	r3, r3, #2
 8015d14:	6313      	str	r3, [r2, #48]	; 0x30
 8015d16:	4b15      	ldr	r3, [pc, #84]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d1a:	f003 0302 	and.w	r3, r3, #2
 8015d1e:	613b      	str	r3, [r7, #16]
 8015d20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8015d22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015d28:	2312      	movs	r3, #18
 8015d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d30:	2303      	movs	r3, #3
 8015d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8015d34:	2304      	movs	r3, #4
 8015d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015d38:	f107 031c 	add.w	r3, r7, #28
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	480c      	ldr	r0, [pc, #48]	; (8015d70 <HAL_I2C_MspInit+0xf0>)
 8015d40:	f7f0 fef4 	bl	8006b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8015d44:	2300      	movs	r3, #0
 8015d46:	60fb      	str	r3, [r7, #12]
 8015d48:	4b08      	ldr	r3, [pc, #32]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d4c:	4a07      	ldr	r2, [pc, #28]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015d52:	6413      	str	r3, [r2, #64]	; 0x40
 8015d54:	4b05      	ldr	r3, [pc, #20]	; (8015d6c <HAL_I2C_MspInit+0xec>)
 8015d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d5c:	60fb      	str	r3, [r7, #12]
 8015d5e:	68fb      	ldr	r3, [r7, #12]
}
 8015d60:	bf00      	nop
 8015d62:	3730      	adds	r7, #48	; 0x30
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	40005400 	.word	0x40005400
 8015d6c:	40023800 	.word	0x40023800
 8015d70:	40020400 	.word	0x40020400
 8015d74:	40005800 	.word	0x40005800

08015d78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015d78:	b480      	push	{r7}
 8015d7a:	b083      	sub	sp, #12
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a05      	ldr	r2, [pc, #20]	; (8015d9c <HAL_RTC_MspInit+0x24>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d102      	bne.n	8015d90 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015d8a:	4b05      	ldr	r3, [pc, #20]	; (8015da0 <HAL_RTC_MspInit+0x28>)
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015d90:	bf00      	nop
 8015d92:	370c      	adds	r7, #12
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr
 8015d9c:	40002800 	.word	0x40002800
 8015da0:	42470e3c 	.word	0x42470e3c

08015da4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b08a      	sub	sp, #40	; 0x28
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dac:	f107 0314 	add.w	r3, r7, #20
 8015db0:	2200      	movs	r2, #0
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	605a      	str	r2, [r3, #4]
 8015db6:	609a      	str	r2, [r3, #8]
 8015db8:	60da      	str	r2, [r3, #12]
 8015dba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4a70      	ldr	r2, [pc, #448]	; (8015f84 <HAL_SD_MspInit+0x1e0>)
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	f040 80da 	bne.w	8015f7c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8015dc8:	2300      	movs	r3, #0
 8015dca:	613b      	str	r3, [r7, #16]
 8015dcc:	4b6e      	ldr	r3, [pc, #440]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dd0:	4a6d      	ldr	r2, [pc, #436]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015dd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8015dd8:	4b6b      	ldr	r3, [pc, #428]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015de0:	613b      	str	r3, [r7, #16]
 8015de2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015de4:	2300      	movs	r3, #0
 8015de6:	60fb      	str	r3, [r7, #12]
 8015de8:	4b67      	ldr	r3, [pc, #412]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dec:	4a66      	ldr	r2, [pc, #408]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015dee:	f043 0304 	orr.w	r3, r3, #4
 8015df2:	6313      	str	r3, [r2, #48]	; 0x30
 8015df4:	4b64      	ldr	r3, [pc, #400]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df8:	f003 0304 	and.w	r3, r3, #4
 8015dfc:	60fb      	str	r3, [r7, #12]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015e00:	2300      	movs	r3, #0
 8015e02:	60bb      	str	r3, [r7, #8]
 8015e04:	4b60      	ldr	r3, [pc, #384]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e08:	4a5f      	ldr	r2, [pc, #380]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015e0a:	f043 0308 	orr.w	r3, r3, #8
 8015e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8015e10:	4b5d      	ldr	r3, [pc, #372]	; (8015f88 <HAL_SD_MspInit+0x1e4>)
 8015e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e14:	f003 0308 	and.w	r3, r3, #8
 8015e18:	60bb      	str	r3, [r7, #8]
 8015e1a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8015e1c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8015e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e22:	2302      	movs	r3, #2
 8015e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015e26:	2301      	movs	r3, #1
 8015e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e2a:	2303      	movs	r3, #3
 8015e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015e2e:	230c      	movs	r3, #12
 8015e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015e32:	f107 0314 	add.w	r3, r7, #20
 8015e36:	4619      	mov	r1, r3
 8015e38:	4854      	ldr	r0, [pc, #336]	; (8015f8c <HAL_SD_MspInit+0x1e8>)
 8015e3a:	f7f0 fe77 	bl	8006b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e44:	2302      	movs	r3, #2
 8015e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e4c:	2303      	movs	r3, #3
 8015e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015e50:	230c      	movs	r3, #12
 8015e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015e54:	f107 0314 	add.w	r3, r7, #20
 8015e58:	4619      	mov	r1, r3
 8015e5a:	484c      	ldr	r0, [pc, #304]	; (8015f8c <HAL_SD_MspInit+0x1e8>)
 8015e5c:	f7f0 fe66 	bl	8006b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015e60:	2304      	movs	r3, #4
 8015e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e64:	2302      	movs	r3, #2
 8015e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e6c:	2303      	movs	r3, #3
 8015e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015e70:	230c      	movs	r3, #12
 8015e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015e74:	f107 0314 	add.w	r3, r7, #20
 8015e78:	4619      	mov	r1, r3
 8015e7a:	4845      	ldr	r0, [pc, #276]	; (8015f90 <HAL_SD_MspInit+0x1ec>)
 8015e7c:	f7f0 fe56 	bl	8006b2c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8015e80:	4b44      	ldr	r3, [pc, #272]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015e82:	4a45      	ldr	r2, [pc, #276]	; (8015f98 <HAL_SD_MspInit+0x1f4>)
 8015e84:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8015e86:	4b43      	ldr	r3, [pc, #268]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015e8c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015e8e:	4b41      	ldr	r3, [pc, #260]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015e90:	2200      	movs	r2, #0
 8015e92:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015e94:	4b3f      	ldr	r3, [pc, #252]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015e96:	2200      	movs	r2, #0
 8015e98:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015e9a:	4b3e      	ldr	r3, [pc, #248]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ea0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015ea2:	4b3c      	ldr	r3, [pc, #240]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015ea8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015eaa:	4b3a      	ldr	r3, [pc, #232]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015eb0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8015eb2:	4b38      	ldr	r3, [pc, #224]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015eb4:	2220      	movs	r2, #32
 8015eb6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015eb8:	4b36      	ldr	r3, [pc, #216]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015eba:	2200      	movs	r2, #0
 8015ebc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015ebe:	4b35      	ldr	r3, [pc, #212]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ec0:	2204      	movs	r2, #4
 8015ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015ec4:	4b33      	ldr	r3, [pc, #204]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ec6:	2203      	movs	r2, #3
 8015ec8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8015eca:	4b32      	ldr	r3, [pc, #200]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ecc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015ed2:	4b30      	ldr	r3, [pc, #192]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ed4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015ed8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8015eda:	482e      	ldr	r0, [pc, #184]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015edc:	f7f0 fa8e 	bl	80063fc <HAL_DMA_Init>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d001      	beq.n	8015eea <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8015ee6:	f7ff fc77 	bl	80157d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	4a29      	ldr	r2, [pc, #164]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8015ef0:	4a28      	ldr	r2, [pc, #160]	; (8015f94 <HAL_SD_MspInit+0x1f0>)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8015ef6:	4b29      	ldr	r3, [pc, #164]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015ef8:	4a29      	ldr	r2, [pc, #164]	; (8015fa0 <HAL_SD_MspInit+0x1fc>)
 8015efa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8015efc:	4b27      	ldr	r3, [pc, #156]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015f02:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015f04:	4b25      	ldr	r3, [pc, #148]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f06:	2240      	movs	r2, #64	; 0x40
 8015f08:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015f0a:	4b24      	ldr	r3, [pc, #144]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015f10:	4b22      	ldr	r3, [pc, #136]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015f16:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015f18:	4b20      	ldr	r3, [pc, #128]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015f1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015f20:	4b1e      	ldr	r3, [pc, #120]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015f26:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8015f28:	4b1c      	ldr	r3, [pc, #112]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f2a:	2220      	movs	r2, #32
 8015f2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015f2e:	4b1b      	ldr	r3, [pc, #108]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f30:	2200      	movs	r2, #0
 8015f32:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015f34:	4b19      	ldr	r3, [pc, #100]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f36:	2204      	movs	r2, #4
 8015f38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015f3a:	4b18      	ldr	r3, [pc, #96]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f3c:	2203      	movs	r2, #3
 8015f3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8015f40:	4b16      	ldr	r3, [pc, #88]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015f48:	4b14      	ldr	r3, [pc, #80]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015f4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8015f50:	4812      	ldr	r0, [pc, #72]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f52:	f7f0 fa53 	bl	80063fc <HAL_DMA_Init>
 8015f56:	4603      	mov	r3, r0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d001      	beq.n	8015f60 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8015f5c:	f7ff fc3c 	bl	80157d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	4a0e      	ldr	r2, [pc, #56]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f64:	641a      	str	r2, [r3, #64]	; 0x40
 8015f66:	4a0d      	ldr	r2, [pc, #52]	; (8015f9c <HAL_SD_MspInit+0x1f8>)
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	2100      	movs	r1, #0
 8015f70:	2031      	movs	r0, #49	; 0x31
 8015f72:	f7f0 fa0c 	bl	800638e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8015f76:	2031      	movs	r0, #49	; 0x31
 8015f78:	f7f0 fa25 	bl	80063c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8015f7c:	bf00      	nop
 8015f7e:	3728      	adds	r7, #40	; 0x28
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	40012c00 	.word	0x40012c00
 8015f88:	40023800 	.word	0x40023800
 8015f8c:	40020800 	.word	0x40020800
 8015f90:	40020c00 	.word	0x40020c00
 8015f94:	20009978 	.word	0x20009978
 8015f98:	40026458 	.word	0x40026458
 8015f9c:	20009b60 	.word	0x20009b60
 8015fa0:	400264a0 	.word	0x400264a0

08015fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b08a      	sub	sp, #40	; 0x28
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015fac:	f107 0314 	add.w	r3, r7, #20
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	601a      	str	r2, [r3, #0]
 8015fb4:	605a      	str	r2, [r3, #4]
 8015fb6:	609a      	str	r2, [r3, #8]
 8015fb8:	60da      	str	r2, [r3, #12]
 8015fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4a19      	ldr	r2, [pc, #100]	; (8016028 <HAL_SPI_MspInit+0x84>)
 8015fc2:	4293      	cmp	r3, r2
 8015fc4:	d12b      	bne.n	801601e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	613b      	str	r3, [r7, #16]
 8015fca:	4b18      	ldr	r3, [pc, #96]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fce:	4a17      	ldr	r2, [pc, #92]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8015fd6:	4b15      	ldr	r3, [pc, #84]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015fde:	613b      	str	r3, [r7, #16]
 8015fe0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	60fb      	str	r3, [r7, #12]
 8015fe6:	4b11      	ldr	r3, [pc, #68]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fea:	4a10      	ldr	r2, [pc, #64]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015fec:	f043 0302 	orr.w	r3, r3, #2
 8015ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8015ff2:	4b0e      	ldr	r3, [pc, #56]	; (801602c <HAL_SPI_MspInit+0x88>)
 8015ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff6:	f003 0302 	and.w	r3, r3, #2
 8015ffa:	60fb      	str	r3, [r7, #12]
 8015ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8015ffe:	2338      	movs	r3, #56	; 0x38
 8016000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016002:	2302      	movs	r3, #2
 8016004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016006:	2300      	movs	r3, #0
 8016008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801600a:	2303      	movs	r3, #3
 801600c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801600e:	2305      	movs	r3, #5
 8016010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016012:	f107 0314 	add.w	r3, r7, #20
 8016016:	4619      	mov	r1, r3
 8016018:	4805      	ldr	r0, [pc, #20]	; (8016030 <HAL_SPI_MspInit+0x8c>)
 801601a:	f7f0 fd87 	bl	8006b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801601e:	bf00      	nop
 8016020:	3728      	adds	r7, #40	; 0x28
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	40013000 	.word	0x40013000
 801602c:	40023800 	.word	0x40023800
 8016030:	40020400 	.word	0x40020400

08016034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8016034:	b480      	push	{r7}
 8016036:	b087      	sub	sp, #28
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016044:	d10e      	bne.n	8016064 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8016046:	2300      	movs	r3, #0
 8016048:	617b      	str	r3, [r7, #20]
 801604a:	4b1d      	ldr	r3, [pc, #116]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 801604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801604e:	4a1c      	ldr	r2, [pc, #112]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 8016050:	f043 0301 	orr.w	r3, r3, #1
 8016054:	6413      	str	r3, [r2, #64]	; 0x40
 8016056:	4b1a      	ldr	r3, [pc, #104]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 8016058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801605a:	f003 0301 	and.w	r3, r3, #1
 801605e:	617b      	str	r3, [r7, #20]
 8016060:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8016062:	e026      	b.n	80160b2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4a16      	ldr	r2, [pc, #88]	; (80160c4 <HAL_TIM_Base_MspInit+0x90>)
 801606a:	4293      	cmp	r3, r2
 801606c:	d10e      	bne.n	801608c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801606e:	2300      	movs	r3, #0
 8016070:	613b      	str	r3, [r7, #16]
 8016072:	4b13      	ldr	r3, [pc, #76]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 8016074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016076:	4a12      	ldr	r2, [pc, #72]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 8016078:	f043 0302 	orr.w	r3, r3, #2
 801607c:	6413      	str	r3, [r2, #64]	; 0x40
 801607e:	4b10      	ldr	r3, [pc, #64]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 8016080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016082:	f003 0302 	and.w	r3, r3, #2
 8016086:	613b      	str	r3, [r7, #16]
 8016088:	693b      	ldr	r3, [r7, #16]
}
 801608a:	e012      	b.n	80160b2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	4a0d      	ldr	r2, [pc, #52]	; (80160c8 <HAL_TIM_Base_MspInit+0x94>)
 8016092:	4293      	cmp	r3, r2
 8016094:	d10d      	bne.n	80160b2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8016096:	2300      	movs	r3, #0
 8016098:	60fb      	str	r3, [r7, #12]
 801609a:	4b09      	ldr	r3, [pc, #36]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 801609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801609e:	4a08      	ldr	r2, [pc, #32]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 80160a0:	f043 0308 	orr.w	r3, r3, #8
 80160a4:	6413      	str	r3, [r2, #64]	; 0x40
 80160a6:	4b06      	ldr	r3, [pc, #24]	; (80160c0 <HAL_TIM_Base_MspInit+0x8c>)
 80160a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160aa:	f003 0308 	and.w	r3, r3, #8
 80160ae:	60fb      	str	r3, [r7, #12]
 80160b0:	68fb      	ldr	r3, [r7, #12]
}
 80160b2:	bf00      	nop
 80160b4:	371c      	adds	r7, #28
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	40023800 	.word	0x40023800
 80160c4:	40000400 	.word	0x40000400
 80160c8:	40000c00 	.word	0x40000c00

080160cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b08a      	sub	sp, #40	; 0x28
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160d4:	f107 0314 	add.w	r3, r7, #20
 80160d8:	2200      	movs	r2, #0
 80160da:	601a      	str	r2, [r3, #0]
 80160dc:	605a      	str	r2, [r3, #4]
 80160de:	609a      	str	r2, [r3, #8]
 80160e0:	60da      	str	r2, [r3, #12]
 80160e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4a21      	ldr	r2, [pc, #132]	; (8016170 <HAL_TIM_MspPostInit+0xa4>)
 80160ea:	4293      	cmp	r3, r2
 80160ec:	d13b      	bne.n	8016166 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80160ee:	2300      	movs	r3, #0
 80160f0:	613b      	str	r3, [r7, #16]
 80160f2:	4b20      	ldr	r3, [pc, #128]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 80160f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f6:	4a1f      	ldr	r2, [pc, #124]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 80160f8:	f043 0302 	orr.w	r3, r3, #2
 80160fc:	6313      	str	r3, [r2, #48]	; 0x30
 80160fe:	4b1d      	ldr	r3, [pc, #116]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 8016100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016102:	f003 0302 	and.w	r3, r3, #2
 8016106:	613b      	str	r3, [r7, #16]
 8016108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801610a:	2300      	movs	r3, #0
 801610c:	60fb      	str	r3, [r7, #12]
 801610e:	4b19      	ldr	r3, [pc, #100]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 8016110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016112:	4a18      	ldr	r2, [pc, #96]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 8016114:	f043 0304 	orr.w	r3, r3, #4
 8016118:	6313      	str	r3, [r2, #48]	; 0x30
 801611a:	4b16      	ldr	r3, [pc, #88]	; (8016174 <HAL_TIM_MspPostInit+0xa8>)
 801611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611e:	f003 0304 	and.w	r3, r3, #4
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 8016126:	2301      	movs	r3, #1
 8016128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801612a:	2302      	movs	r3, #2
 801612c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801612e:	2300      	movs	r3, #0
 8016130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016132:	2300      	movs	r3, #0
 8016134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016136:	2302      	movs	r3, #2
 8016138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 801613a:	f107 0314 	add.w	r3, r7, #20
 801613e:	4619      	mov	r1, r3
 8016140:	480d      	ldr	r0, [pc, #52]	; (8016178 <HAL_TIM_MspPostInit+0xac>)
 8016142:	f7f0 fcf3 	bl	8006b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EN_L_Pin;
 8016146:	2380      	movs	r3, #128	; 0x80
 8016148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801614a:	2302      	movs	r3, #2
 801614c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801614e:	2300      	movs	r3, #0
 8016150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016152:	2300      	movs	r3, #0
 8016154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016156:	2302      	movs	r3, #2
 8016158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_L_GPIO_Port, &GPIO_InitStruct);
 801615a:	f107 0314 	add.w	r3, r7, #20
 801615e:	4619      	mov	r1, r3
 8016160:	4806      	ldr	r0, [pc, #24]	; (801617c <HAL_TIM_MspPostInit+0xb0>)
 8016162:	f7f0 fce3 	bl	8006b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8016166:	bf00      	nop
 8016168:	3728      	adds	r7, #40	; 0x28
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}
 801616e:	bf00      	nop
 8016170:	40000400 	.word	0x40000400
 8016174:	40023800 	.word	0x40023800
 8016178:	40020400 	.word	0x40020400
 801617c:	40020800 	.word	0x40020800

08016180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08a      	sub	sp, #40	; 0x28
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016188:	f107 0314 	add.w	r3, r7, #20
 801618c:	2200      	movs	r2, #0
 801618e:	601a      	str	r2, [r3, #0]
 8016190:	605a      	str	r2, [r3, #4]
 8016192:	609a      	str	r2, [r3, #8]
 8016194:	60da      	str	r2, [r3, #12]
 8016196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	4a19      	ldr	r2, [pc, #100]	; (8016204 <HAL_UART_MspInit+0x84>)
 801619e:	4293      	cmp	r3, r2
 80161a0:	d12c      	bne.n	80161fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80161a2:	2300      	movs	r3, #0
 80161a4:	613b      	str	r3, [r7, #16]
 80161a6:	4b18      	ldr	r3, [pc, #96]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161aa:	4a17      	ldr	r2, [pc, #92]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161ac:	f043 0310 	orr.w	r3, r3, #16
 80161b0:	6453      	str	r3, [r2, #68]	; 0x44
 80161b2:	4b15      	ldr	r3, [pc, #84]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161b6:	f003 0310 	and.w	r3, r3, #16
 80161ba:	613b      	str	r3, [r7, #16]
 80161bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161be:	2300      	movs	r3, #0
 80161c0:	60fb      	str	r3, [r7, #12]
 80161c2:	4b11      	ldr	r3, [pc, #68]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161c6:	4a10      	ldr	r2, [pc, #64]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161c8:	f043 0301 	orr.w	r3, r3, #1
 80161cc:	6313      	str	r3, [r2, #48]	; 0x30
 80161ce:	4b0e      	ldr	r3, [pc, #56]	; (8016208 <HAL_UART_MspInit+0x88>)
 80161d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161d2:	f003 0301 	and.w	r3, r3, #1
 80161d6:	60fb      	str	r3, [r7, #12]
 80161d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80161da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80161de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161e0:	2302      	movs	r3, #2
 80161e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80161e4:	2301      	movs	r3, #1
 80161e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161e8:	2303      	movs	r3, #3
 80161ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80161ec:	2307      	movs	r3, #7
 80161ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80161f0:	f107 0314 	add.w	r3, r7, #20
 80161f4:	4619      	mov	r1, r3
 80161f6:	4805      	ldr	r0, [pc, #20]	; (801620c <HAL_UART_MspInit+0x8c>)
 80161f8:	f7f0 fc98 	bl	8006b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80161fc:	bf00      	nop
 80161fe:	3728      	adds	r7, #40	; 0x28
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}
 8016204:	40011000 	.word	0x40011000
 8016208:	40023800 	.word	0x40023800
 801620c:	40020000 	.word	0x40020000

08016210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016210:	b480      	push	{r7}
 8016212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016214:	bf00      	nop
 8016216:	46bd      	mov	sp, r7
 8016218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621c:	4770      	bx	lr

0801621e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801621e:	b480      	push	{r7}
 8016220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016222:	e7fe      	b.n	8016222 <HardFault_Handler+0x4>

08016224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016224:	b480      	push	{r7}
 8016226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016228:	e7fe      	b.n	8016228 <MemManage_Handler+0x4>

0801622a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801622a:	b480      	push	{r7}
 801622c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801622e:	e7fe      	b.n	801622e <BusFault_Handler+0x4>

08016230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016230:	b480      	push	{r7}
 8016232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016234:	e7fe      	b.n	8016234 <UsageFault_Handler+0x4>

08016236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016236:	b480      	push	{r7}
 8016238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801623a:	bf00      	nop
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016244:	b480      	push	{r7}
 8016246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016248:	bf00      	nop
 801624a:	46bd      	mov	sp, r7
 801624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016250:	4770      	bx	lr

08016252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8016252:	b480      	push	{r7}
 8016254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016256:	bf00      	nop
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr

08016260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016264:	f7ef ff76 	bl	8006154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016268:	bf00      	nop
 801626a:	bd80      	pop	{r7, pc}

0801626c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8016270:	4802      	ldr	r0, [pc, #8]	; (801627c <SDIO_IRQHandler+0x10>)
 8016272:	f7f3 ffed 	bl	800a250 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8016276:	bf00      	nop
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	20009bc0 	.word	0x20009bc0

08016280 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8016284:	4802      	ldr	r0, [pc, #8]	; (8016290 <DMA2_Stream3_IRQHandler+0x10>)
 8016286:	f7f0 f9e9 	bl	800665c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801628a:	bf00      	nop
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	20009978 	.word	0x20009978

08016294 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016298:	4802      	ldr	r0, [pc, #8]	; (80162a4 <OTG_FS_IRQHandler+0x10>)
 801629a:	f7f1 fee2 	bl	8008062 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801629e:	bf00      	nop
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	2000acdc 	.word	0x2000acdc

080162a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80162ac:	4802      	ldr	r0, [pc, #8]	; (80162b8 <DMA2_Stream6_IRQHandler+0x10>)
 80162ae:	f7f0 f9d5 	bl	800665c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80162b2:	bf00      	nop
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	20009b60 	.word	0x20009b60

080162bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80162c4:	4b11      	ldr	r3, [pc, #68]	; (801630c <_sbrk+0x50>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d102      	bne.n	80162d2 <_sbrk+0x16>
		heap_end = &end;
 80162cc:	4b0f      	ldr	r3, [pc, #60]	; (801630c <_sbrk+0x50>)
 80162ce:	4a10      	ldr	r2, [pc, #64]	; (8016310 <_sbrk+0x54>)
 80162d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80162d2:	4b0e      	ldr	r3, [pc, #56]	; (801630c <_sbrk+0x50>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80162d8:	4b0c      	ldr	r3, [pc, #48]	; (801630c <_sbrk+0x50>)
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	4413      	add	r3, r2
 80162e0:	466a      	mov	r2, sp
 80162e2:	4293      	cmp	r3, r2
 80162e4:	d907      	bls.n	80162f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80162e6:	f000 fda9 	bl	8016e3c <__errno>
 80162ea:	4602      	mov	r2, r0
 80162ec:	230c      	movs	r3, #12
 80162ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80162f0:	f04f 33ff 	mov.w	r3, #4294967295
 80162f4:	e006      	b.n	8016304 <_sbrk+0x48>
	}

	heap_end += incr;
 80162f6:	4b05      	ldr	r3, [pc, #20]	; (801630c <_sbrk+0x50>)
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	4413      	add	r3, r2
 80162fe:	4a03      	ldr	r2, [pc, #12]	; (801630c <_sbrk+0x50>)
 8016300:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8016302:	68fb      	ldr	r3, [r7, #12]
}
 8016304:	4618      	mov	r0, r3
 8016306:	3710      	adds	r7, #16
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	2000152c 	.word	0x2000152c
 8016310:	2000b2e8 	.word	0x2000b2e8

08016314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016314:	b480      	push	{r7}
 8016316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016318:	4b16      	ldr	r3, [pc, #88]	; (8016374 <SystemInit+0x60>)
 801631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801631e:	4a15      	ldr	r2, [pc, #84]	; (8016374 <SystemInit+0x60>)
 8016320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8016328:	4b13      	ldr	r3, [pc, #76]	; (8016378 <SystemInit+0x64>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	4a12      	ldr	r2, [pc, #72]	; (8016378 <SystemInit+0x64>)
 801632e:	f043 0301 	orr.w	r3, r3, #1
 8016332:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8016334:	4b10      	ldr	r3, [pc, #64]	; (8016378 <SystemInit+0x64>)
 8016336:	2200      	movs	r2, #0
 8016338:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801633a:	4b0f      	ldr	r3, [pc, #60]	; (8016378 <SystemInit+0x64>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	4a0e      	ldr	r2, [pc, #56]	; (8016378 <SystemInit+0x64>)
 8016340:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8016344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016348:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801634a:	4b0b      	ldr	r3, [pc, #44]	; (8016378 <SystemInit+0x64>)
 801634c:	4a0b      	ldr	r2, [pc, #44]	; (801637c <SystemInit+0x68>)
 801634e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8016350:	4b09      	ldr	r3, [pc, #36]	; (8016378 <SystemInit+0x64>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4a08      	ldr	r2, [pc, #32]	; (8016378 <SystemInit+0x64>)
 8016356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801635a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <SystemInit+0x64>)
 801635e:	2200      	movs	r2, #0
 8016360:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016362:	4b04      	ldr	r3, [pc, #16]	; (8016374 <SystemInit+0x60>)
 8016364:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016368:	609a      	str	r2, [r3, #8]
#endif
}
 801636a:	bf00      	nop
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr
 8016374:	e000ed00 	.word	0xe000ed00
 8016378:	40023800 	.word	0x40023800
 801637c:	24003010 	.word	0x24003010

08016380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016384:	2200      	movs	r2, #0
 8016386:	4912      	ldr	r1, [pc, #72]	; (80163d0 <MX_USB_DEVICE_Init+0x50>)
 8016388:	4812      	ldr	r0, [pc, #72]	; (80163d4 <MX_USB_DEVICE_Init+0x54>)
 801638a:	f7f8 ff6b 	bl	800f264 <USBD_Init>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d001      	beq.n	8016398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016394:	f7ff fa20 	bl	80157d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016398:	490f      	ldr	r1, [pc, #60]	; (80163d8 <MX_USB_DEVICE_Init+0x58>)
 801639a:	480e      	ldr	r0, [pc, #56]	; (80163d4 <MX_USB_DEVICE_Init+0x54>)
 801639c:	f7f8 ff8d 	bl	800f2ba <USBD_RegisterClass>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d001      	beq.n	80163aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163a6:	f7ff fa17 	bl	80157d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163aa:	490c      	ldr	r1, [pc, #48]	; (80163dc <MX_USB_DEVICE_Init+0x5c>)
 80163ac:	4809      	ldr	r0, [pc, #36]	; (80163d4 <MX_USB_DEVICE_Init+0x54>)
 80163ae:	f7f8 febb 	bl	800f128 <USBD_CDC_RegisterInterface>
 80163b2:	4603      	mov	r3, r0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d001      	beq.n	80163bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163b8:	f7ff fa0e 	bl	80157d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163bc:	4805      	ldr	r0, [pc, #20]	; (80163d4 <MX_USB_DEVICE_Init+0x54>)
 80163be:	f7f8 ff96 	bl	800f2ee <USBD_Start>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d001      	beq.n	80163cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163c8:	f7ff fa06 	bl	80157d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163cc:	bf00      	nop
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	20000184 	.word	0x20000184
 80163d4:	20001538 	.word	0x20001538
 80163d8:	20000014 	.word	0x20000014
 80163dc:	20000174 	.word	0x20000174

080163e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80163e4:	2200      	movs	r2, #0
 80163e6:	4905      	ldr	r1, [pc, #20]	; (80163fc <CDC_Init_FS+0x1c>)
 80163e8:	4805      	ldr	r0, [pc, #20]	; (8016400 <CDC_Init_FS+0x20>)
 80163ea:	f7f8 feb4 	bl	800f156 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80163ee:	4905      	ldr	r1, [pc, #20]	; (8016404 <CDC_Init_FS+0x24>)
 80163f0:	4803      	ldr	r0, [pc, #12]	; (8016400 <CDC_Init_FS+0x20>)
 80163f2:	f7f8 feca 	bl	800f18a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80163f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	2000a4dc 	.word	0x2000a4dc
 8016400:	20001538 	.word	0x20001538
 8016404:	20009cdc 	.word	0x20009cdc

08016408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016408:	b480      	push	{r7}
 801640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801640c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801640e:	4618      	mov	r0, r3
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr

08016418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016418:	b480      	push	{r7}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	4603      	mov	r3, r0
 8016420:	6039      	str	r1, [r7, #0]
 8016422:	71fb      	strb	r3, [r7, #7]
 8016424:	4613      	mov	r3, r2
 8016426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8016428:	f107 0308 	add.w	r3, r7, #8
 801642c:	2200      	movs	r2, #0
 801642e:	601a      	str	r2, [r3, #0]
 8016430:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8016434:	79fb      	ldrb	r3, [r7, #7]
 8016436:	2b23      	cmp	r3, #35	; 0x23
 8016438:	d87c      	bhi.n	8016534 <CDC_Control_FS+0x11c>
 801643a:	a201      	add	r2, pc, #4	; (adr r2, 8016440 <CDC_Control_FS+0x28>)
 801643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016440:	08016535 	.word	0x08016535
 8016444:	08016535 	.word	0x08016535
 8016448:	08016535 	.word	0x08016535
 801644c:	08016535 	.word	0x08016535
 8016450:	08016535 	.word	0x08016535
 8016454:	08016535 	.word	0x08016535
 8016458:	08016535 	.word	0x08016535
 801645c:	08016535 	.word	0x08016535
 8016460:	08016535 	.word	0x08016535
 8016464:	08016535 	.word	0x08016535
 8016468:	08016535 	.word	0x08016535
 801646c:	08016535 	.word	0x08016535
 8016470:	08016535 	.word	0x08016535
 8016474:	08016535 	.word	0x08016535
 8016478:	08016535 	.word	0x08016535
 801647c:	08016535 	.word	0x08016535
 8016480:	08016535 	.word	0x08016535
 8016484:	08016535 	.word	0x08016535
 8016488:	08016535 	.word	0x08016535
 801648c:	08016535 	.word	0x08016535
 8016490:	08016535 	.word	0x08016535
 8016494:	08016535 	.word	0x08016535
 8016498:	08016535 	.word	0x08016535
 801649c:	08016535 	.word	0x08016535
 80164a0:	08016535 	.word	0x08016535
 80164a4:	08016535 	.word	0x08016535
 80164a8:	08016535 	.word	0x08016535
 80164ac:	08016535 	.word	0x08016535
 80164b0:	08016535 	.word	0x08016535
 80164b4:	08016535 	.word	0x08016535
 80164b8:	08016535 	.word	0x08016535
 80164bc:	08016535 	.word	0x08016535
 80164c0:	080164d1 	.word	0x080164d1
 80164c4:	080164fd 	.word	0x080164fd
 80164c8:	08016535 	.word	0x08016535
 80164cc:	08016535 	.word	0x08016535
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	785b      	ldrb	r3, [r3, #1]
 80164da:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	789b      	ldrb	r3, [r3, #2]
 80164e0:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	78db      	ldrb	r3, [r3, #3]
 80164e6:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	791b      	ldrb	r3, [r3, #4]
 80164ec:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	795b      	ldrb	r3, [r3, #5]
 80164f2:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	799b      	ldrb	r3, [r3, #6]
 80164f8:	73bb      	strb	r3, [r7, #14]
        	break;
 80164fa:	e01c      	b.n	8016536 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80164fc:	7a3a      	ldrb	r2, [r7, #8]
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	3301      	adds	r3, #1
 8016506:	7a7a      	ldrb	r2, [r7, #9]
 8016508:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	3302      	adds	r3, #2
 801650e:	7aba      	ldrb	r2, [r7, #10]
 8016510:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	3303      	adds	r3, #3
 8016516:	7afa      	ldrb	r2, [r7, #11]
 8016518:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	3304      	adds	r3, #4
 801651e:	7b3a      	ldrb	r2, [r7, #12]
 8016520:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	3305      	adds	r3, #5
 8016526:	7b7a      	ldrb	r2, [r7, #13]
 8016528:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	3306      	adds	r3, #6
 801652e:	7bba      	ldrb	r2, [r7, #14]
 8016530:	701a      	strb	r2, [r3, #0]
        	break;
 8016532:	e000      	b.n	8016536 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016534:	bf00      	nop
  }

  return (USBD_OK);
 8016536:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016538:	4618      	mov	r0, r3
 801653a:	3714      	adds	r7, #20
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801654e:	6879      	ldr	r1, [r7, #4]
 8016550:	4805      	ldr	r0, [pc, #20]	; (8016568 <CDC_Receive_FS+0x24>)
 8016552:	f7f8 fe1a 	bl	800f18a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016556:	4804      	ldr	r0, [pc, #16]	; (8016568 <CDC_Receive_FS+0x24>)
 8016558:	f7f8 fe5a 	bl	800f210 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801655c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801655e:	4618      	mov	r0, r3
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	20001538 	.word	0x20001538

0801656c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	460b      	mov	r3, r1
 8016576:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016578:	2300      	movs	r3, #0
 801657a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801657c:	4b0d      	ldr	r3, [pc, #52]	; (80165b4 <CDC_Transmit_FS+0x48>)
 801657e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8016582:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801658a:	2b00      	cmp	r3, #0
 801658c:	d001      	beq.n	8016592 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801658e:	2301      	movs	r3, #1
 8016590:	e00b      	b.n	80165aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016592:	887b      	ldrh	r3, [r7, #2]
 8016594:	461a      	mov	r2, r3
 8016596:	6879      	ldr	r1, [r7, #4]
 8016598:	4806      	ldr	r0, [pc, #24]	; (80165b4 <CDC_Transmit_FS+0x48>)
 801659a:	f7f8 fddc 	bl	800f156 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801659e:	4805      	ldr	r0, [pc, #20]	; (80165b4 <CDC_Transmit_FS+0x48>)
 80165a0:	f7f8 fe07 	bl	800f1b2 <USBD_CDC_TransmitPacket>
 80165a4:	4603      	mov	r3, r0
 80165a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80165a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	20001538 	.word	0x20001538

080165b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b08a      	sub	sp, #40	; 0x28
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80165c0:	f107 0314 	add.w	r3, r7, #20
 80165c4:	2200      	movs	r2, #0
 80165c6:	601a      	str	r2, [r3, #0]
 80165c8:	605a      	str	r2, [r3, #4]
 80165ca:	609a      	str	r2, [r3, #8]
 80165cc:	60da      	str	r2, [r3, #12]
 80165ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80165d8:	d13a      	bne.n	8016650 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80165da:	2300      	movs	r3, #0
 80165dc:	613b      	str	r3, [r7, #16]
 80165de:	4b1e      	ldr	r3, [pc, #120]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 80165e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165e2:	4a1d      	ldr	r2, [pc, #116]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 80165e4:	f043 0301 	orr.w	r3, r3, #1
 80165e8:	6313      	str	r3, [r2, #48]	; 0x30
 80165ea:	4b1b      	ldr	r3, [pc, #108]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 80165ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ee:	f003 0301 	and.w	r3, r3, #1
 80165f2:	613b      	str	r3, [r7, #16]
 80165f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80165f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80165fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165fc:	2302      	movs	r3, #2
 80165fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016600:	2300      	movs	r3, #0
 8016602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016604:	2303      	movs	r3, #3
 8016606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016608:	230a      	movs	r3, #10
 801660a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801660c:	f107 0314 	add.w	r3, r7, #20
 8016610:	4619      	mov	r1, r3
 8016612:	4812      	ldr	r0, [pc, #72]	; (801665c <HAL_PCD_MspInit+0xa4>)
 8016614:	f7f0 fa8a 	bl	8006b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016618:	4b0f      	ldr	r3, [pc, #60]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 801661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801661c:	4a0e      	ldr	r2, [pc, #56]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 801661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016622:	6353      	str	r3, [r2, #52]	; 0x34
 8016624:	2300      	movs	r3, #0
 8016626:	60fb      	str	r3, [r7, #12]
 8016628:	4b0b      	ldr	r3, [pc, #44]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 801662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801662c:	4a0a      	ldr	r2, [pc, #40]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 801662e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016632:	6453      	str	r3, [r2, #68]	; 0x44
 8016634:	4b08      	ldr	r3, [pc, #32]	; (8016658 <HAL_PCD_MspInit+0xa0>)
 8016636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801663c:	60fb      	str	r3, [r7, #12]
 801663e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016640:	2200      	movs	r2, #0
 8016642:	2100      	movs	r1, #0
 8016644:	2043      	movs	r0, #67	; 0x43
 8016646:	f7ef fea2 	bl	800638e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801664a:	2043      	movs	r0, #67	; 0x43
 801664c:	f7ef febb 	bl	80063c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016650:	bf00      	nop
 8016652:	3728      	adds	r7, #40	; 0x28
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}
 8016658:	40023800 	.word	0x40023800
 801665c:	40020000 	.word	0x40020000

08016660 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b082      	sub	sp, #8
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016674:	4619      	mov	r1, r3
 8016676:	4610      	mov	r0, r2
 8016678:	f7f8 fe82 	bl	800f380 <USBD_LL_SetupStage>
}
 801667c:	bf00      	nop
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
 801668c:	460b      	mov	r3, r1
 801668e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016696:	78fa      	ldrb	r2, [r7, #3]
 8016698:	6879      	ldr	r1, [r7, #4]
 801669a:	4613      	mov	r3, r2
 801669c:	00db      	lsls	r3, r3, #3
 801669e:	1a9b      	subs	r3, r3, r2
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	440b      	add	r3, r1
 80166a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80166a8:	681a      	ldr	r2, [r3, #0]
 80166aa:	78fb      	ldrb	r3, [r7, #3]
 80166ac:	4619      	mov	r1, r3
 80166ae:	f7f8 feb2 	bl	800f416 <USBD_LL_DataOutStage>
}
 80166b2:	bf00      	nop
 80166b4:	3708      	adds	r7, #8
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}

080166ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ba:	b580      	push	{r7, lr}
 80166bc:	b082      	sub	sp, #8
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
 80166c2:	460b      	mov	r3, r1
 80166c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80166cc:	78fa      	ldrb	r2, [r7, #3]
 80166ce:	6879      	ldr	r1, [r7, #4]
 80166d0:	4613      	mov	r3, r2
 80166d2:	00db      	lsls	r3, r3, #3
 80166d4:	1a9b      	subs	r3, r3, r2
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	440b      	add	r3, r1
 80166da:	3348      	adds	r3, #72	; 0x48
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	78fb      	ldrb	r3, [r7, #3]
 80166e0:	4619      	mov	r1, r3
 80166e2:	f7f8 ff09 	bl	800f4f8 <USBD_LL_DataInStage>
}
 80166e6:	bf00      	nop
 80166e8:	3708      	adds	r7, #8
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ee:	b580      	push	{r7, lr}
 80166f0:	b082      	sub	sp, #8
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7f9 f817 	bl	800f730 <USBD_LL_SOF>
}
 8016702:	bf00      	nop
 8016704:	3708      	adds	r7, #8
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}

0801670a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801670a:	b580      	push	{r7, lr}
 801670c:	b084      	sub	sp, #16
 801670e:	af00      	add	r7, sp, #0
 8016710:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016712:	2301      	movs	r3, #1
 8016714:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	68db      	ldr	r3, [r3, #12]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d102      	bne.n	8016724 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801671e:	2300      	movs	r3, #0
 8016720:	73fb      	strb	r3, [r7, #15]
 8016722:	e008      	b.n	8016736 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	68db      	ldr	r3, [r3, #12]
 8016728:	2b02      	cmp	r3, #2
 801672a:	d102      	bne.n	8016732 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801672c:	2301      	movs	r3, #1
 801672e:	73fb      	strb	r3, [r7, #15]
 8016730:	e001      	b.n	8016736 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016732:	f7ff f851 	bl	80157d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801673c:	7bfa      	ldrb	r2, [r7, #15]
 801673e:	4611      	mov	r1, r2
 8016740:	4618      	mov	r0, r3
 8016742:	f7f8 ffbf 	bl	800f6c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801674c:	4618      	mov	r0, r3
 801674e:	f7f8 ff78 	bl	800f642 <USBD_LL_Reset>
}
 8016752:	bf00      	nop
 8016754:	3710      	adds	r7, #16
 8016756:	46bd      	mov	sp, r7
 8016758:	bd80      	pop	{r7, pc}
	...

0801675c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801676a:	4618      	mov	r0, r3
 801676c:	f7f8 ffba 	bl	800f6e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	6812      	ldr	r2, [r2, #0]
 801677e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016782:	f043 0301 	orr.w	r3, r3, #1
 8016786:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	6a1b      	ldr	r3, [r3, #32]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d005      	beq.n	801679c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016790:	4b04      	ldr	r3, [pc, #16]	; (80167a4 <HAL_PCD_SuspendCallback+0x48>)
 8016792:	691b      	ldr	r3, [r3, #16]
 8016794:	4a03      	ldr	r2, [pc, #12]	; (80167a4 <HAL_PCD_SuspendCallback+0x48>)
 8016796:	f043 0306 	orr.w	r3, r3, #6
 801679a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801679c:	bf00      	nop
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	e000ed00 	.word	0xe000ed00

080167a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b082      	sub	sp, #8
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7f8 ffa9 	bl	800f70e <USBD_LL_Resume>
}
 80167bc:	bf00      	nop
 80167be:	3708      	adds	r7, #8
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	460b      	mov	r3, r1
 80167ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167d6:	78fa      	ldrb	r2, [r7, #3]
 80167d8:	4611      	mov	r1, r2
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f8 ffcf 	bl	800f77e <USBD_LL_IsoOUTIncomplete>
}
 80167e0:	bf00      	nop
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	460b      	mov	r3, r1
 80167f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167fa:	78fa      	ldrb	r2, [r7, #3]
 80167fc:	4611      	mov	r1, r2
 80167fe:	4618      	mov	r0, r3
 8016800:	f7f8 ffb0 	bl	800f764 <USBD_LL_IsoINIncomplete>
}
 8016804:	bf00      	nop
 8016806:	3708      	adds	r7, #8
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}

0801680c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b082      	sub	sp, #8
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801681a:	4618      	mov	r0, r3
 801681c:	f7f8 ffbc 	bl	800f798 <USBD_LL_DevConnected>
}
 8016820:	bf00      	nop
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}

08016828 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016836:	4618      	mov	r0, r3
 8016838:	f7f8 ffb9 	bl	800f7ae <USBD_LL_DevDisconnected>
}
 801683c:	bf00      	nop
 801683e:	3708      	adds	r7, #8
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d13c      	bne.n	80168ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016854:	4a20      	ldr	r2, [pc, #128]	; (80168d8 <USBD_LL_Init+0x94>)
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	4a1e      	ldr	r2, [pc, #120]	; (80168d8 <USBD_LL_Init+0x94>)
 8016860:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016864:	4b1c      	ldr	r3, [pc, #112]	; (80168d8 <USBD_LL_Init+0x94>)
 8016866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801686a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801686c:	4b1a      	ldr	r3, [pc, #104]	; (80168d8 <USBD_LL_Init+0x94>)
 801686e:	2204      	movs	r2, #4
 8016870:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016872:	4b19      	ldr	r3, [pc, #100]	; (80168d8 <USBD_LL_Init+0x94>)
 8016874:	2202      	movs	r2, #2
 8016876:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016878:	4b17      	ldr	r3, [pc, #92]	; (80168d8 <USBD_LL_Init+0x94>)
 801687a:	2200      	movs	r2, #0
 801687c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801687e:	4b16      	ldr	r3, [pc, #88]	; (80168d8 <USBD_LL_Init+0x94>)
 8016880:	2202      	movs	r2, #2
 8016882:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016884:	4b14      	ldr	r3, [pc, #80]	; (80168d8 <USBD_LL_Init+0x94>)
 8016886:	2200      	movs	r2, #0
 8016888:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801688a:	4b13      	ldr	r3, [pc, #76]	; (80168d8 <USBD_LL_Init+0x94>)
 801688c:	2200      	movs	r2, #0
 801688e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016890:	4b11      	ldr	r3, [pc, #68]	; (80168d8 <USBD_LL_Init+0x94>)
 8016892:	2200      	movs	r2, #0
 8016894:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016896:	4b10      	ldr	r3, [pc, #64]	; (80168d8 <USBD_LL_Init+0x94>)
 8016898:	2200      	movs	r2, #0
 801689a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801689c:	4b0e      	ldr	r3, [pc, #56]	; (80168d8 <USBD_LL_Init+0x94>)
 801689e:	2200      	movs	r2, #0
 80168a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80168a2:	480d      	ldr	r0, [pc, #52]	; (80168d8 <USBD_LL_Init+0x94>)
 80168a4:	f7f1 fa8d 	bl	8007dc2 <HAL_PCD_Init>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d001      	beq.n	80168b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80168ae:	f7fe ff93 	bl	80157d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80168b2:	2180      	movs	r1, #128	; 0x80
 80168b4:	4808      	ldr	r0, [pc, #32]	; (80168d8 <USBD_LL_Init+0x94>)
 80168b6:	f7f2 fbf2 	bl	800909e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80168ba:	2240      	movs	r2, #64	; 0x40
 80168bc:	2100      	movs	r1, #0
 80168be:	4806      	ldr	r0, [pc, #24]	; (80168d8 <USBD_LL_Init+0x94>)
 80168c0:	f7f2 fba6 	bl	8009010 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80168c4:	2280      	movs	r2, #128	; 0x80
 80168c6:	2101      	movs	r1, #1
 80168c8:	4803      	ldr	r0, [pc, #12]	; (80168d8 <USBD_LL_Init+0x94>)
 80168ca:	f7f2 fba1 	bl	8009010 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80168ce:	2300      	movs	r3, #0
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3708      	adds	r7, #8
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	2000acdc 	.word	0x2000acdc

080168dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168e4:	2300      	movs	r3, #0
 80168e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168e8:	2300      	movs	r3, #0
 80168ea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f1 fb82 	bl	8007ffc <HAL_PCD_Start>
 80168f8:	4603      	mov	r3, r0
 80168fa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80168fc:	7bfb      	ldrb	r3, [r7, #15]
 80168fe:	4618      	mov	r0, r3
 8016900:	f000 f92e 	bl	8016b60 <USBD_Get_USB_Status>
 8016904:	4603      	mov	r3, r0
 8016906:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016908:	7bbb      	ldrb	r3, [r7, #14]
}
 801690a:	4618      	mov	r0, r3
 801690c:	3710      	adds	r7, #16
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b084      	sub	sp, #16
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	4608      	mov	r0, r1
 801691c:	4611      	mov	r1, r2
 801691e:	461a      	mov	r2, r3
 8016920:	4603      	mov	r3, r0
 8016922:	70fb      	strb	r3, [r7, #3]
 8016924:	460b      	mov	r3, r1
 8016926:	70bb      	strb	r3, [r7, #2]
 8016928:	4613      	mov	r3, r2
 801692a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801692c:	2300      	movs	r3, #0
 801692e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016930:	2300      	movs	r3, #0
 8016932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801693a:	78bb      	ldrb	r3, [r7, #2]
 801693c:	883a      	ldrh	r2, [r7, #0]
 801693e:	78f9      	ldrb	r1, [r7, #3]
 8016940:	f7f1 ff57 	bl	80087f2 <HAL_PCD_EP_Open>
 8016944:	4603      	mov	r3, r0
 8016946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016948:	7bfb      	ldrb	r3, [r7, #15]
 801694a:	4618      	mov	r0, r3
 801694c:	f000 f908 	bl	8016b60 <USBD_Get_USB_Status>
 8016950:	4603      	mov	r3, r0
 8016952:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016954:	7bbb      	ldrb	r3, [r7, #14]
}
 8016956:	4618      	mov	r0, r3
 8016958:	3710      	adds	r7, #16
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b084      	sub	sp, #16
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	460b      	mov	r3, r1
 8016968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801696a:	2300      	movs	r3, #0
 801696c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801696e:	2300      	movs	r3, #0
 8016970:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016978:	78fa      	ldrb	r2, [r7, #3]
 801697a:	4611      	mov	r1, r2
 801697c:	4618      	mov	r0, r3
 801697e:	f7f1 ffa0 	bl	80088c2 <HAL_PCD_EP_Close>
 8016982:	4603      	mov	r3, r0
 8016984:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016986:	7bfb      	ldrb	r3, [r7, #15]
 8016988:	4618      	mov	r0, r3
 801698a:	f000 f8e9 	bl	8016b60 <USBD_Get_USB_Status>
 801698e:	4603      	mov	r3, r0
 8016990:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016992:	7bbb      	ldrb	r3, [r7, #14]
}
 8016994:	4618      	mov	r0, r3
 8016996:	3710      	adds	r7, #16
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b084      	sub	sp, #16
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	460b      	mov	r3, r1
 80169a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169a8:	2300      	movs	r3, #0
 80169aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ac:	2300      	movs	r3, #0
 80169ae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80169b6:	78fa      	ldrb	r2, [r7, #3]
 80169b8:	4611      	mov	r1, r2
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7f2 f878 	bl	8008ab0 <HAL_PCD_EP_SetStall>
 80169c0:	4603      	mov	r3, r0
 80169c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f000 f8ca 	bl	8016b60 <USBD_Get_USB_Status>
 80169cc:	4603      	mov	r3, r0
 80169ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80169d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3710      	adds	r7, #16
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169da:	b580      	push	{r7, lr}
 80169dc:	b084      	sub	sp, #16
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
 80169e2:	460b      	mov	r3, r1
 80169e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169e6:	2300      	movs	r3, #0
 80169e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ea:	2300      	movs	r3, #0
 80169ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80169f4:	78fa      	ldrb	r2, [r7, #3]
 80169f6:	4611      	mov	r1, r2
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7f2 f8bd 	bl	8008b78 <HAL_PCD_EP_ClrStall>
 80169fe:	4603      	mov	r3, r0
 8016a00:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016a02:	7bfb      	ldrb	r3, [r7, #15]
 8016a04:	4618      	mov	r0, r3
 8016a06:	f000 f8ab 	bl	8016b60 <USBD_Get_USB_Status>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a2a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	da0b      	bge.n	8016a4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016a34:	78fb      	ldrb	r3, [r7, #3]
 8016a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a3a:	68f9      	ldr	r1, [r7, #12]
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	1a9b      	subs	r3, r3, r2
 8016a42:	009b      	lsls	r3, r3, #2
 8016a44:	440b      	add	r3, r1
 8016a46:	333e      	adds	r3, #62	; 0x3e
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	e00b      	b.n	8016a64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016a4c:	78fb      	ldrb	r3, [r7, #3]
 8016a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a52:	68f9      	ldr	r1, [r7, #12]
 8016a54:	4613      	mov	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	1a9b      	subs	r3, r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	440b      	add	r3, r1
 8016a5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	3714      	adds	r7, #20
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
 8016a78:	460b      	mov	r3, r1
 8016a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a80:	2300      	movs	r3, #0
 8016a82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a8a:	78fa      	ldrb	r2, [r7, #3]
 8016a8c:	4611      	mov	r1, r2
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f7f1 fe8a 	bl	80087a8 <HAL_PCD_SetAddress>
 8016a94:	4603      	mov	r3, r0
 8016a96:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a98:	7bfb      	ldrb	r3, [r7, #15]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f000 f860 	bl	8016b60 <USBD_Get_USB_Status>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	3710      	adds	r7, #16
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}

08016aae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016aae:	b580      	push	{r7, lr}
 8016ab0:	b086      	sub	sp, #24
 8016ab2:	af00      	add	r7, sp, #0
 8016ab4:	60f8      	str	r0, [r7, #12]
 8016ab6:	607a      	str	r2, [r7, #4]
 8016ab8:	461a      	mov	r2, r3
 8016aba:	460b      	mov	r3, r1
 8016abc:	72fb      	strb	r3, [r7, #11]
 8016abe:	4613      	mov	r3, r2
 8016ac0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016ad0:	893b      	ldrh	r3, [r7, #8]
 8016ad2:	7af9      	ldrb	r1, [r7, #11]
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	f7f1 ffa1 	bl	8008a1c <HAL_PCD_EP_Transmit>
 8016ada:	4603      	mov	r3, r0
 8016adc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016ade:	7dfb      	ldrb	r3, [r7, #23]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f000 f83d 	bl	8016b60 <USBD_Get_USB_Status>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3718      	adds	r7, #24
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	607a      	str	r2, [r7, #4]
 8016afe:	461a      	mov	r2, r3
 8016b00:	460b      	mov	r3, r1
 8016b02:	72fb      	strb	r3, [r7, #11]
 8016b04:	4613      	mov	r3, r2
 8016b06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016b16:	893b      	ldrh	r3, [r7, #8]
 8016b18:	7af9      	ldrb	r1, [r7, #11]
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	f7f1 ff1b 	bl	8008956 <HAL_PCD_EP_Receive>
 8016b20:	4603      	mov	r3, r0
 8016b22:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016b24:	7dfb      	ldrb	r3, [r7, #23]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f000 f81a 	bl	8016b60 <USBD_Get_USB_Status>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016b30:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3718      	adds	r7, #24
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b082      	sub	sp, #8
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	6078      	str	r0, [r7, #4]
 8016b42:	460b      	mov	r3, r1
 8016b44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b4c:	78fa      	ldrb	r2, [r7, #3]
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7f1 ff4b 	bl	80089ec <HAL_PCD_EP_GetRxCount>
 8016b56:	4603      	mov	r3, r0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016b60:	b480      	push	{r7}
 8016b62:	b085      	sub	sp, #20
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	4603      	mov	r3, r0
 8016b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016b6e:	79fb      	ldrb	r3, [r7, #7]
 8016b70:	2b03      	cmp	r3, #3
 8016b72:	d817      	bhi.n	8016ba4 <USBD_Get_USB_Status+0x44>
 8016b74:	a201      	add	r2, pc, #4	; (adr r2, 8016b7c <USBD_Get_USB_Status+0x1c>)
 8016b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b7a:	bf00      	nop
 8016b7c:	08016b8d 	.word	0x08016b8d
 8016b80:	08016b93 	.word	0x08016b93
 8016b84:	08016b99 	.word	0x08016b99
 8016b88:	08016b9f 	.word	0x08016b9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b90:	e00b      	b.n	8016baa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b92:	2302      	movs	r3, #2
 8016b94:	73fb      	strb	r3, [r7, #15]
    break;
 8016b96:	e008      	b.n	8016baa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b98:	2301      	movs	r3, #1
 8016b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016b9c:	e005      	b.n	8016baa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b9e:	2302      	movs	r3, #2
 8016ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ba2:	e002      	b.n	8016baa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ba4:	2302      	movs	r3, #2
 8016ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ba8:	bf00      	nop
  }
  return usb_status;
 8016baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3714      	adds	r7, #20
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr

08016bb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	6039      	str	r1, [r7, #0]
 8016bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	2212      	movs	r2, #18
 8016bc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016bca:	4b03      	ldr	r3, [pc, #12]	; (8016bd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	370c      	adds	r7, #12
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd6:	4770      	bx	lr
 8016bd8:	200001a0 	.word	0x200001a0

08016bdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	4603      	mov	r3, r0
 8016be4:	6039      	str	r1, [r7, #0]
 8016be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	2204      	movs	r2, #4
 8016bec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bee:	4b03      	ldr	r3, [pc, #12]	; (8016bfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	370c      	adds	r7, #12
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfa:	4770      	bx	lr
 8016bfc:	200001b4 	.word	0x200001b4

08016c00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	4603      	mov	r3, r0
 8016c08:	6039      	str	r1, [r7, #0]
 8016c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016c0c:	79fb      	ldrb	r3, [r7, #7]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d105      	bne.n	8016c1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c12:	683a      	ldr	r2, [r7, #0]
 8016c14:	4907      	ldr	r1, [pc, #28]	; (8016c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8016c16:	4808      	ldr	r0, [pc, #32]	; (8016c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c18:	f7f9 faa0 	bl	801015c <USBD_GetString>
 8016c1c:	e004      	b.n	8016c28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c1e:	683a      	ldr	r2, [r7, #0]
 8016c20:	4904      	ldr	r1, [pc, #16]	; (8016c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8016c22:	4805      	ldr	r0, [pc, #20]	; (8016c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c24:	f7f9 fa9a 	bl	801015c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c28:	4b02      	ldr	r3, [pc, #8]	; (8016c34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3708      	adds	r7, #8
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	2000b0e4 	.word	0x2000b0e4
 8016c38:	0801e36c 	.word	0x0801e36c

08016c3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	4603      	mov	r3, r0
 8016c44:	6039      	str	r1, [r7, #0]
 8016c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c48:	683a      	ldr	r2, [r7, #0]
 8016c4a:	4904      	ldr	r1, [pc, #16]	; (8016c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016c4c:	4804      	ldr	r0, [pc, #16]	; (8016c60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016c4e:	f7f9 fa85 	bl	801015c <USBD_GetString>
  return USBD_StrDesc;
 8016c52:	4b02      	ldr	r3, [pc, #8]	; (8016c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	3708      	adds	r7, #8
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	2000b0e4 	.word	0x2000b0e4
 8016c60:	0801e378 	.word	0x0801e378

08016c64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	6039      	str	r1, [r7, #0]
 8016c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	221a      	movs	r2, #26
 8016c74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c76:	f000 f843 	bl	8016d00 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016c7a:	4b02      	ldr	r3, [pc, #8]	; (8016c84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	200001b8 	.word	0x200001b8

08016c88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	4603      	mov	r3, r0
 8016c90:	6039      	str	r1, [r7, #0]
 8016c92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016c94:	79fb      	ldrb	r3, [r7, #7]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d105      	bne.n	8016ca6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016c9a:	683a      	ldr	r2, [r7, #0]
 8016c9c:	4907      	ldr	r1, [pc, #28]	; (8016cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8016c9e:	4808      	ldr	r0, [pc, #32]	; (8016cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ca0:	f7f9 fa5c 	bl	801015c <USBD_GetString>
 8016ca4:	e004      	b.n	8016cb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ca6:	683a      	ldr	r2, [r7, #0]
 8016ca8:	4904      	ldr	r1, [pc, #16]	; (8016cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8016caa:	4805      	ldr	r0, [pc, #20]	; (8016cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016cac:	f7f9 fa56 	bl	801015c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cb0:	4b02      	ldr	r3, [pc, #8]	; (8016cbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	2000b0e4 	.word	0x2000b0e4
 8016cc0:	0801e38c 	.word	0x0801e38c

08016cc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	4603      	mov	r3, r0
 8016ccc:	6039      	str	r1, [r7, #0]
 8016cce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cd0:	79fb      	ldrb	r3, [r7, #7]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d105      	bne.n	8016ce2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cd6:	683a      	ldr	r2, [r7, #0]
 8016cd8:	4907      	ldr	r1, [pc, #28]	; (8016cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cda:	4808      	ldr	r0, [pc, #32]	; (8016cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cdc:	f7f9 fa3e 	bl	801015c <USBD_GetString>
 8016ce0:	e004      	b.n	8016cec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016ce2:	683a      	ldr	r2, [r7, #0]
 8016ce4:	4904      	ldr	r1, [pc, #16]	; (8016cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016ce6:	4805      	ldr	r0, [pc, #20]	; (8016cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016ce8:	f7f9 fa38 	bl	801015c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cec:	4b02      	ldr	r3, [pc, #8]	; (8016cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3708      	adds	r7, #8
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	2000b0e4 	.word	0x2000b0e4
 8016cfc:	0801e398 	.word	0x0801e398

08016d00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b084      	sub	sp, #16
 8016d04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016d06:	4b0f      	ldr	r3, [pc, #60]	; (8016d44 <Get_SerialNum+0x44>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016d0c:	4b0e      	ldr	r3, [pc, #56]	; (8016d48 <Get_SerialNum+0x48>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016d12:	4b0e      	ldr	r3, [pc, #56]	; (8016d4c <Get_SerialNum+0x4c>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016d18:	68fa      	ldr	r2, [r7, #12]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d009      	beq.n	8016d3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016d26:	2208      	movs	r2, #8
 8016d28:	4909      	ldr	r1, [pc, #36]	; (8016d50 <Get_SerialNum+0x50>)
 8016d2a:	68f8      	ldr	r0, [r7, #12]
 8016d2c:	f000 f814 	bl	8016d58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016d30:	2204      	movs	r2, #4
 8016d32:	4908      	ldr	r1, [pc, #32]	; (8016d54 <Get_SerialNum+0x54>)
 8016d34:	68b8      	ldr	r0, [r7, #8]
 8016d36:	f000 f80f 	bl	8016d58 <IntToUnicode>
  }
}
 8016d3a:	bf00      	nop
 8016d3c:	3710      	adds	r7, #16
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	1fff7a10 	.word	0x1fff7a10
 8016d48:	1fff7a14 	.word	0x1fff7a14
 8016d4c:	1fff7a18 	.word	0x1fff7a18
 8016d50:	200001ba 	.word	0x200001ba
 8016d54:	200001ca 	.word	0x200001ca

08016d58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d58:	b480      	push	{r7}
 8016d5a:	b087      	sub	sp, #28
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	4613      	mov	r3, r2
 8016d64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d66:	2300      	movs	r3, #0
 8016d68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	75fb      	strb	r3, [r7, #23]
 8016d6e:	e027      	b.n	8016dc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	0f1b      	lsrs	r3, r3, #28
 8016d74:	2b09      	cmp	r3, #9
 8016d76:	d80b      	bhi.n	8016d90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	0f1b      	lsrs	r3, r3, #28
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	7dfb      	ldrb	r3, [r7, #23]
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4619      	mov	r1, r3
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	440b      	add	r3, r1
 8016d88:	3230      	adds	r2, #48	; 0x30
 8016d8a:	b2d2      	uxtb	r2, r2
 8016d8c:	701a      	strb	r2, [r3, #0]
 8016d8e:	e00a      	b.n	8016da6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	0f1b      	lsrs	r3, r3, #28
 8016d94:	b2da      	uxtb	r2, r3
 8016d96:	7dfb      	ldrb	r3, [r7, #23]
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	440b      	add	r3, r1
 8016da0:	3237      	adds	r2, #55	; 0x37
 8016da2:	b2d2      	uxtb	r2, r2
 8016da4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	011b      	lsls	r3, r3, #4
 8016daa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016dac:	7dfb      	ldrb	r3, [r7, #23]
 8016dae:	005b      	lsls	r3, r3, #1
 8016db0:	3301      	adds	r3, #1
 8016db2:	68ba      	ldr	r2, [r7, #8]
 8016db4:	4413      	add	r3, r2
 8016db6:	2200      	movs	r2, #0
 8016db8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016dba:	7dfb      	ldrb	r3, [r7, #23]
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	75fb      	strb	r3, [r7, #23]
 8016dc0:	7dfa      	ldrb	r2, [r7, #23]
 8016dc2:	79fb      	ldrb	r3, [r7, #7]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d3d3      	bcc.n	8016d70 <IntToUnicode+0x18>
  }
}
 8016dc8:	bf00      	nop
 8016dca:	371c      	adds	r7, #28
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd2:	4770      	bx	lr

08016dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8016dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016dda:	e003      	b.n	8016de4 <LoopCopyDataInit>

08016ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016ddc:	4b0c      	ldr	r3, [pc, #48]	; (8016e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016de2:	3104      	adds	r1, #4

08016de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016de4:	480b      	ldr	r0, [pc, #44]	; (8016e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016de6:	4b0c      	ldr	r3, [pc, #48]	; (8016e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016dec:	d3f6      	bcc.n	8016ddc <CopyDataInit>
  ldr  r2, =_sbss
 8016dee:	4a0b      	ldr	r2, [pc, #44]	; (8016e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016df0:	e002      	b.n	8016df8 <LoopFillZerobss>

08016df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016df4:	f842 3b04 	str.w	r3, [r2], #4

08016df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016df8:	4b09      	ldr	r3, [pc, #36]	; (8016e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016dfc:	d3f9      	bcc.n	8016df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016dfe:	f7ff fa89 	bl	8016314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016e02:	f000 f821 	bl	8016e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016e06:	f7fe f8bf 	bl	8014f88 <main>
  bx  lr    
 8016e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8016e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8016e10:	0801e9a0 	.word	0x0801e9a0
  ldr  r0, =_sdata
 8016e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016e18:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 8016e1c:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8016e20:	2000b2e8 	.word	0x2000b2e8

08016e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016e24:	e7fe      	b.n	8016e24 <ADC_IRQHandler>

08016e26 <atof>:
 8016e26:	2100      	movs	r1, #0
 8016e28:	f001 bdde 	b.w	80189e8 <strtod>

08016e2c <atoi>:
 8016e2c:	220a      	movs	r2, #10
 8016e2e:	2100      	movs	r1, #0
 8016e30:	f001 be7c 	b.w	8018b2c <strtol>

08016e34 <atol>:
 8016e34:	220a      	movs	r2, #10
 8016e36:	2100      	movs	r1, #0
 8016e38:	f001 be78 	b.w	8018b2c <strtol>

08016e3c <__errno>:
 8016e3c:	4b01      	ldr	r3, [pc, #4]	; (8016e44 <__errno+0x8>)
 8016e3e:	6818      	ldr	r0, [r3, #0]
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	200001d4 	.word	0x200001d4

08016e48 <__libc_init_array>:
 8016e48:	b570      	push	{r4, r5, r6, lr}
 8016e4a:	4e0d      	ldr	r6, [pc, #52]	; (8016e80 <__libc_init_array+0x38>)
 8016e4c:	4c0d      	ldr	r4, [pc, #52]	; (8016e84 <__libc_init_array+0x3c>)
 8016e4e:	1ba4      	subs	r4, r4, r6
 8016e50:	10a4      	asrs	r4, r4, #2
 8016e52:	2500      	movs	r5, #0
 8016e54:	42a5      	cmp	r5, r4
 8016e56:	d109      	bne.n	8016e6c <__libc_init_array+0x24>
 8016e58:	4e0b      	ldr	r6, [pc, #44]	; (8016e88 <__libc_init_array+0x40>)
 8016e5a:	4c0c      	ldr	r4, [pc, #48]	; (8016e8c <__libc_init_array+0x44>)
 8016e5c:	f006 fcba 	bl	801d7d4 <_init>
 8016e60:	1ba4      	subs	r4, r4, r6
 8016e62:	10a4      	asrs	r4, r4, #2
 8016e64:	2500      	movs	r5, #0
 8016e66:	42a5      	cmp	r5, r4
 8016e68:	d105      	bne.n	8016e76 <__libc_init_array+0x2e>
 8016e6a:	bd70      	pop	{r4, r5, r6, pc}
 8016e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e70:	4798      	blx	r3
 8016e72:	3501      	adds	r5, #1
 8016e74:	e7ee      	b.n	8016e54 <__libc_init_array+0xc>
 8016e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e7a:	4798      	blx	r3
 8016e7c:	3501      	adds	r5, #1
 8016e7e:	e7f2      	b.n	8016e66 <__libc_init_array+0x1e>
 8016e80:	0801e998 	.word	0x0801e998
 8016e84:	0801e998 	.word	0x0801e998
 8016e88:	0801e998 	.word	0x0801e998
 8016e8c:	0801e99c 	.word	0x0801e99c

08016e90 <malloc>:
 8016e90:	4b02      	ldr	r3, [pc, #8]	; (8016e9c <malloc+0xc>)
 8016e92:	4601      	mov	r1, r0
 8016e94:	6818      	ldr	r0, [r3, #0]
 8016e96:	f000 b86d 	b.w	8016f74 <_malloc_r>
 8016e9a:	bf00      	nop
 8016e9c:	200001d4 	.word	0x200001d4

08016ea0 <free>:
 8016ea0:	4b02      	ldr	r3, [pc, #8]	; (8016eac <free+0xc>)
 8016ea2:	4601      	mov	r1, r0
 8016ea4:	6818      	ldr	r0, [r3, #0]
 8016ea6:	f000 b817 	b.w	8016ed8 <_free_r>
 8016eaa:	bf00      	nop
 8016eac:	200001d4 	.word	0x200001d4

08016eb0 <memcpy>:
 8016eb0:	b510      	push	{r4, lr}
 8016eb2:	1e43      	subs	r3, r0, #1
 8016eb4:	440a      	add	r2, r1
 8016eb6:	4291      	cmp	r1, r2
 8016eb8:	d100      	bne.n	8016ebc <memcpy+0xc>
 8016eba:	bd10      	pop	{r4, pc}
 8016ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ec4:	e7f7      	b.n	8016eb6 <memcpy+0x6>

08016ec6 <memset>:
 8016ec6:	4402      	add	r2, r0
 8016ec8:	4603      	mov	r3, r0
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d100      	bne.n	8016ed0 <memset+0xa>
 8016ece:	4770      	bx	lr
 8016ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8016ed4:	e7f9      	b.n	8016eca <memset+0x4>
	...

08016ed8 <_free_r>:
 8016ed8:	b538      	push	{r3, r4, r5, lr}
 8016eda:	4605      	mov	r5, r0
 8016edc:	2900      	cmp	r1, #0
 8016ede:	d045      	beq.n	8016f6c <_free_r+0x94>
 8016ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ee4:	1f0c      	subs	r4, r1, #4
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	bfb8      	it	lt
 8016eea:	18e4      	addlt	r4, r4, r3
 8016eec:	f002 ffe4 	bl	8019eb8 <__malloc_lock>
 8016ef0:	4a1f      	ldr	r2, [pc, #124]	; (8016f70 <_free_r+0x98>)
 8016ef2:	6813      	ldr	r3, [r2, #0]
 8016ef4:	4610      	mov	r0, r2
 8016ef6:	b933      	cbnz	r3, 8016f06 <_free_r+0x2e>
 8016ef8:	6063      	str	r3, [r4, #4]
 8016efa:	6014      	str	r4, [r2, #0]
 8016efc:	4628      	mov	r0, r5
 8016efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f02:	f002 bfda 	b.w	8019eba <__malloc_unlock>
 8016f06:	42a3      	cmp	r3, r4
 8016f08:	d90c      	bls.n	8016f24 <_free_r+0x4c>
 8016f0a:	6821      	ldr	r1, [r4, #0]
 8016f0c:	1862      	adds	r2, r4, r1
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	bf04      	itt	eq
 8016f12:	681a      	ldreq	r2, [r3, #0]
 8016f14:	685b      	ldreq	r3, [r3, #4]
 8016f16:	6063      	str	r3, [r4, #4]
 8016f18:	bf04      	itt	eq
 8016f1a:	1852      	addeq	r2, r2, r1
 8016f1c:	6022      	streq	r2, [r4, #0]
 8016f1e:	6004      	str	r4, [r0, #0]
 8016f20:	e7ec      	b.n	8016efc <_free_r+0x24>
 8016f22:	4613      	mov	r3, r2
 8016f24:	685a      	ldr	r2, [r3, #4]
 8016f26:	b10a      	cbz	r2, 8016f2c <_free_r+0x54>
 8016f28:	42a2      	cmp	r2, r4
 8016f2a:	d9fa      	bls.n	8016f22 <_free_r+0x4a>
 8016f2c:	6819      	ldr	r1, [r3, #0]
 8016f2e:	1858      	adds	r0, r3, r1
 8016f30:	42a0      	cmp	r0, r4
 8016f32:	d10b      	bne.n	8016f4c <_free_r+0x74>
 8016f34:	6820      	ldr	r0, [r4, #0]
 8016f36:	4401      	add	r1, r0
 8016f38:	1858      	adds	r0, r3, r1
 8016f3a:	4282      	cmp	r2, r0
 8016f3c:	6019      	str	r1, [r3, #0]
 8016f3e:	d1dd      	bne.n	8016efc <_free_r+0x24>
 8016f40:	6810      	ldr	r0, [r2, #0]
 8016f42:	6852      	ldr	r2, [r2, #4]
 8016f44:	605a      	str	r2, [r3, #4]
 8016f46:	4401      	add	r1, r0
 8016f48:	6019      	str	r1, [r3, #0]
 8016f4a:	e7d7      	b.n	8016efc <_free_r+0x24>
 8016f4c:	d902      	bls.n	8016f54 <_free_r+0x7c>
 8016f4e:	230c      	movs	r3, #12
 8016f50:	602b      	str	r3, [r5, #0]
 8016f52:	e7d3      	b.n	8016efc <_free_r+0x24>
 8016f54:	6820      	ldr	r0, [r4, #0]
 8016f56:	1821      	adds	r1, r4, r0
 8016f58:	428a      	cmp	r2, r1
 8016f5a:	bf04      	itt	eq
 8016f5c:	6811      	ldreq	r1, [r2, #0]
 8016f5e:	6852      	ldreq	r2, [r2, #4]
 8016f60:	6062      	str	r2, [r4, #4]
 8016f62:	bf04      	itt	eq
 8016f64:	1809      	addeq	r1, r1, r0
 8016f66:	6021      	streq	r1, [r4, #0]
 8016f68:	605c      	str	r4, [r3, #4]
 8016f6a:	e7c7      	b.n	8016efc <_free_r+0x24>
 8016f6c:	bd38      	pop	{r3, r4, r5, pc}
 8016f6e:	bf00      	nop
 8016f70:	20001530 	.word	0x20001530

08016f74 <_malloc_r>:
 8016f74:	b570      	push	{r4, r5, r6, lr}
 8016f76:	1ccd      	adds	r5, r1, #3
 8016f78:	f025 0503 	bic.w	r5, r5, #3
 8016f7c:	3508      	adds	r5, #8
 8016f7e:	2d0c      	cmp	r5, #12
 8016f80:	bf38      	it	cc
 8016f82:	250c      	movcc	r5, #12
 8016f84:	2d00      	cmp	r5, #0
 8016f86:	4606      	mov	r6, r0
 8016f88:	db01      	blt.n	8016f8e <_malloc_r+0x1a>
 8016f8a:	42a9      	cmp	r1, r5
 8016f8c:	d903      	bls.n	8016f96 <_malloc_r+0x22>
 8016f8e:	230c      	movs	r3, #12
 8016f90:	6033      	str	r3, [r6, #0]
 8016f92:	2000      	movs	r0, #0
 8016f94:	bd70      	pop	{r4, r5, r6, pc}
 8016f96:	f002 ff8f 	bl	8019eb8 <__malloc_lock>
 8016f9a:	4a21      	ldr	r2, [pc, #132]	; (8017020 <_malloc_r+0xac>)
 8016f9c:	6814      	ldr	r4, [r2, #0]
 8016f9e:	4621      	mov	r1, r4
 8016fa0:	b991      	cbnz	r1, 8016fc8 <_malloc_r+0x54>
 8016fa2:	4c20      	ldr	r4, [pc, #128]	; (8017024 <_malloc_r+0xb0>)
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	b91b      	cbnz	r3, 8016fb0 <_malloc_r+0x3c>
 8016fa8:	4630      	mov	r0, r6
 8016faa:	f000 fe7b 	bl	8017ca4 <_sbrk_r>
 8016fae:	6020      	str	r0, [r4, #0]
 8016fb0:	4629      	mov	r1, r5
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	f000 fe76 	bl	8017ca4 <_sbrk_r>
 8016fb8:	1c43      	adds	r3, r0, #1
 8016fba:	d124      	bne.n	8017006 <_malloc_r+0x92>
 8016fbc:	230c      	movs	r3, #12
 8016fbe:	6033      	str	r3, [r6, #0]
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f002 ff7a 	bl	8019eba <__malloc_unlock>
 8016fc6:	e7e4      	b.n	8016f92 <_malloc_r+0x1e>
 8016fc8:	680b      	ldr	r3, [r1, #0]
 8016fca:	1b5b      	subs	r3, r3, r5
 8016fcc:	d418      	bmi.n	8017000 <_malloc_r+0x8c>
 8016fce:	2b0b      	cmp	r3, #11
 8016fd0:	d90f      	bls.n	8016ff2 <_malloc_r+0x7e>
 8016fd2:	600b      	str	r3, [r1, #0]
 8016fd4:	50cd      	str	r5, [r1, r3]
 8016fd6:	18cc      	adds	r4, r1, r3
 8016fd8:	4630      	mov	r0, r6
 8016fda:	f002 ff6e 	bl	8019eba <__malloc_unlock>
 8016fde:	f104 000b 	add.w	r0, r4, #11
 8016fe2:	1d23      	adds	r3, r4, #4
 8016fe4:	f020 0007 	bic.w	r0, r0, #7
 8016fe8:	1ac3      	subs	r3, r0, r3
 8016fea:	d0d3      	beq.n	8016f94 <_malloc_r+0x20>
 8016fec:	425a      	negs	r2, r3
 8016fee:	50e2      	str	r2, [r4, r3]
 8016ff0:	e7d0      	b.n	8016f94 <_malloc_r+0x20>
 8016ff2:	428c      	cmp	r4, r1
 8016ff4:	684b      	ldr	r3, [r1, #4]
 8016ff6:	bf16      	itet	ne
 8016ff8:	6063      	strne	r3, [r4, #4]
 8016ffa:	6013      	streq	r3, [r2, #0]
 8016ffc:	460c      	movne	r4, r1
 8016ffe:	e7eb      	b.n	8016fd8 <_malloc_r+0x64>
 8017000:	460c      	mov	r4, r1
 8017002:	6849      	ldr	r1, [r1, #4]
 8017004:	e7cc      	b.n	8016fa0 <_malloc_r+0x2c>
 8017006:	1cc4      	adds	r4, r0, #3
 8017008:	f024 0403 	bic.w	r4, r4, #3
 801700c:	42a0      	cmp	r0, r4
 801700e:	d005      	beq.n	801701c <_malloc_r+0xa8>
 8017010:	1a21      	subs	r1, r4, r0
 8017012:	4630      	mov	r0, r6
 8017014:	f000 fe46 	bl	8017ca4 <_sbrk_r>
 8017018:	3001      	adds	r0, #1
 801701a:	d0cf      	beq.n	8016fbc <_malloc_r+0x48>
 801701c:	6025      	str	r5, [r4, #0]
 801701e:	e7db      	b.n	8016fd8 <_malloc_r+0x64>
 8017020:	20001530 	.word	0x20001530
 8017024:	20001534 	.word	0x20001534

08017028 <__cvt>:
 8017028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801702c:	ec55 4b10 	vmov	r4, r5, d0
 8017030:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017032:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017036:	2d00      	cmp	r5, #0
 8017038:	460e      	mov	r6, r1
 801703a:	4691      	mov	r9, r2
 801703c:	4619      	mov	r1, r3
 801703e:	bfb8      	it	lt
 8017040:	4622      	movlt	r2, r4
 8017042:	462b      	mov	r3, r5
 8017044:	f027 0720 	bic.w	r7, r7, #32
 8017048:	bfbb      	ittet	lt
 801704a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801704e:	461d      	movlt	r5, r3
 8017050:	2300      	movge	r3, #0
 8017052:	232d      	movlt	r3, #45	; 0x2d
 8017054:	bfb8      	it	lt
 8017056:	4614      	movlt	r4, r2
 8017058:	2f46      	cmp	r7, #70	; 0x46
 801705a:	700b      	strb	r3, [r1, #0]
 801705c:	d004      	beq.n	8017068 <__cvt+0x40>
 801705e:	2f45      	cmp	r7, #69	; 0x45
 8017060:	d100      	bne.n	8017064 <__cvt+0x3c>
 8017062:	3601      	adds	r6, #1
 8017064:	2102      	movs	r1, #2
 8017066:	e000      	b.n	801706a <__cvt+0x42>
 8017068:	2103      	movs	r1, #3
 801706a:	ab03      	add	r3, sp, #12
 801706c:	9301      	str	r3, [sp, #4]
 801706e:	ab02      	add	r3, sp, #8
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	4632      	mov	r2, r6
 8017074:	4653      	mov	r3, sl
 8017076:	ec45 4b10 	vmov	d0, r4, r5
 801707a:	f001 fe19 	bl	8018cb0 <_dtoa_r>
 801707e:	2f47      	cmp	r7, #71	; 0x47
 8017080:	4680      	mov	r8, r0
 8017082:	d102      	bne.n	801708a <__cvt+0x62>
 8017084:	f019 0f01 	tst.w	r9, #1
 8017088:	d026      	beq.n	80170d8 <__cvt+0xb0>
 801708a:	2f46      	cmp	r7, #70	; 0x46
 801708c:	eb08 0906 	add.w	r9, r8, r6
 8017090:	d111      	bne.n	80170b6 <__cvt+0x8e>
 8017092:	f898 3000 	ldrb.w	r3, [r8]
 8017096:	2b30      	cmp	r3, #48	; 0x30
 8017098:	d10a      	bne.n	80170b0 <__cvt+0x88>
 801709a:	2200      	movs	r2, #0
 801709c:	2300      	movs	r3, #0
 801709e:	4620      	mov	r0, r4
 80170a0:	4629      	mov	r1, r5
 80170a2:	f7e9 fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 80170a6:	b918      	cbnz	r0, 80170b0 <__cvt+0x88>
 80170a8:	f1c6 0601 	rsb	r6, r6, #1
 80170ac:	f8ca 6000 	str.w	r6, [sl]
 80170b0:	f8da 3000 	ldr.w	r3, [sl]
 80170b4:	4499      	add	r9, r3
 80170b6:	2200      	movs	r2, #0
 80170b8:	2300      	movs	r3, #0
 80170ba:	4620      	mov	r0, r4
 80170bc:	4629      	mov	r1, r5
 80170be:	f7e9 fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 80170c2:	b938      	cbnz	r0, 80170d4 <__cvt+0xac>
 80170c4:	2230      	movs	r2, #48	; 0x30
 80170c6:	9b03      	ldr	r3, [sp, #12]
 80170c8:	454b      	cmp	r3, r9
 80170ca:	d205      	bcs.n	80170d8 <__cvt+0xb0>
 80170cc:	1c59      	adds	r1, r3, #1
 80170ce:	9103      	str	r1, [sp, #12]
 80170d0:	701a      	strb	r2, [r3, #0]
 80170d2:	e7f8      	b.n	80170c6 <__cvt+0x9e>
 80170d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80170d8:	9b03      	ldr	r3, [sp, #12]
 80170da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170dc:	eba3 0308 	sub.w	r3, r3, r8
 80170e0:	4640      	mov	r0, r8
 80170e2:	6013      	str	r3, [r2, #0]
 80170e4:	b004      	add	sp, #16
 80170e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080170ea <__exponent>:
 80170ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170ec:	2900      	cmp	r1, #0
 80170ee:	4604      	mov	r4, r0
 80170f0:	bfba      	itte	lt
 80170f2:	4249      	neglt	r1, r1
 80170f4:	232d      	movlt	r3, #45	; 0x2d
 80170f6:	232b      	movge	r3, #43	; 0x2b
 80170f8:	2909      	cmp	r1, #9
 80170fa:	f804 2b02 	strb.w	r2, [r4], #2
 80170fe:	7043      	strb	r3, [r0, #1]
 8017100:	dd20      	ble.n	8017144 <__exponent+0x5a>
 8017102:	f10d 0307 	add.w	r3, sp, #7
 8017106:	461f      	mov	r7, r3
 8017108:	260a      	movs	r6, #10
 801710a:	fb91 f5f6 	sdiv	r5, r1, r6
 801710e:	fb06 1115 	mls	r1, r6, r5, r1
 8017112:	3130      	adds	r1, #48	; 0x30
 8017114:	2d09      	cmp	r5, #9
 8017116:	f803 1c01 	strb.w	r1, [r3, #-1]
 801711a:	f103 32ff 	add.w	r2, r3, #4294967295
 801711e:	4629      	mov	r1, r5
 8017120:	dc09      	bgt.n	8017136 <__exponent+0x4c>
 8017122:	3130      	adds	r1, #48	; 0x30
 8017124:	3b02      	subs	r3, #2
 8017126:	f802 1c01 	strb.w	r1, [r2, #-1]
 801712a:	42bb      	cmp	r3, r7
 801712c:	4622      	mov	r2, r4
 801712e:	d304      	bcc.n	801713a <__exponent+0x50>
 8017130:	1a10      	subs	r0, r2, r0
 8017132:	b003      	add	sp, #12
 8017134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017136:	4613      	mov	r3, r2
 8017138:	e7e7      	b.n	801710a <__exponent+0x20>
 801713a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801713e:	f804 2b01 	strb.w	r2, [r4], #1
 8017142:	e7f2      	b.n	801712a <__exponent+0x40>
 8017144:	2330      	movs	r3, #48	; 0x30
 8017146:	4419      	add	r1, r3
 8017148:	7083      	strb	r3, [r0, #2]
 801714a:	1d02      	adds	r2, r0, #4
 801714c:	70c1      	strb	r1, [r0, #3]
 801714e:	e7ef      	b.n	8017130 <__exponent+0x46>

08017150 <_printf_float>:
 8017150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	b08d      	sub	sp, #52	; 0x34
 8017156:	460c      	mov	r4, r1
 8017158:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801715c:	4616      	mov	r6, r2
 801715e:	461f      	mov	r7, r3
 8017160:	4605      	mov	r5, r0
 8017162:	f002 fe89 	bl	8019e78 <_localeconv_r>
 8017166:	6803      	ldr	r3, [r0, #0]
 8017168:	9304      	str	r3, [sp, #16]
 801716a:	4618      	mov	r0, r3
 801716c:	f7e9 f83a 	bl	80001e4 <strlen>
 8017170:	2300      	movs	r3, #0
 8017172:	930a      	str	r3, [sp, #40]	; 0x28
 8017174:	f8d8 3000 	ldr.w	r3, [r8]
 8017178:	9005      	str	r0, [sp, #20]
 801717a:	3307      	adds	r3, #7
 801717c:	f023 0307 	bic.w	r3, r3, #7
 8017180:	f103 0208 	add.w	r2, r3, #8
 8017184:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017188:	f8d4 b000 	ldr.w	fp, [r4]
 801718c:	f8c8 2000 	str.w	r2, [r8]
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017198:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801719c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80171a0:	9307      	str	r3, [sp, #28]
 80171a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80171a6:	f04f 32ff 	mov.w	r2, #4294967295
 80171aa:	4ba7      	ldr	r3, [pc, #668]	; (8017448 <_printf_float+0x2f8>)
 80171ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171b0:	f7e9 fccc 	bl	8000b4c <__aeabi_dcmpun>
 80171b4:	bb70      	cbnz	r0, 8017214 <_printf_float+0xc4>
 80171b6:	f04f 32ff 	mov.w	r2, #4294967295
 80171ba:	4ba3      	ldr	r3, [pc, #652]	; (8017448 <_printf_float+0x2f8>)
 80171bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171c0:	f7e9 fca6 	bl	8000b10 <__aeabi_dcmple>
 80171c4:	bb30      	cbnz	r0, 8017214 <_printf_float+0xc4>
 80171c6:	2200      	movs	r2, #0
 80171c8:	2300      	movs	r3, #0
 80171ca:	4640      	mov	r0, r8
 80171cc:	4649      	mov	r1, r9
 80171ce:	f7e9 fc95 	bl	8000afc <__aeabi_dcmplt>
 80171d2:	b110      	cbz	r0, 80171da <_printf_float+0x8a>
 80171d4:	232d      	movs	r3, #45	; 0x2d
 80171d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171da:	4a9c      	ldr	r2, [pc, #624]	; (801744c <_printf_float+0x2fc>)
 80171dc:	4b9c      	ldr	r3, [pc, #624]	; (8017450 <_printf_float+0x300>)
 80171de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80171e2:	bf8c      	ite	hi
 80171e4:	4690      	movhi	r8, r2
 80171e6:	4698      	movls	r8, r3
 80171e8:	2303      	movs	r3, #3
 80171ea:	f02b 0204 	bic.w	r2, fp, #4
 80171ee:	6123      	str	r3, [r4, #16]
 80171f0:	6022      	str	r2, [r4, #0]
 80171f2:	f04f 0900 	mov.w	r9, #0
 80171f6:	9700      	str	r7, [sp, #0]
 80171f8:	4633      	mov	r3, r6
 80171fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80171fc:	4621      	mov	r1, r4
 80171fe:	4628      	mov	r0, r5
 8017200:	f000 f9e6 	bl	80175d0 <_printf_common>
 8017204:	3001      	adds	r0, #1
 8017206:	f040 808d 	bne.w	8017324 <_printf_float+0x1d4>
 801720a:	f04f 30ff 	mov.w	r0, #4294967295
 801720e:	b00d      	add	sp, #52	; 0x34
 8017210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017214:	4642      	mov	r2, r8
 8017216:	464b      	mov	r3, r9
 8017218:	4640      	mov	r0, r8
 801721a:	4649      	mov	r1, r9
 801721c:	f7e9 fc96 	bl	8000b4c <__aeabi_dcmpun>
 8017220:	b110      	cbz	r0, 8017228 <_printf_float+0xd8>
 8017222:	4a8c      	ldr	r2, [pc, #560]	; (8017454 <_printf_float+0x304>)
 8017224:	4b8c      	ldr	r3, [pc, #560]	; (8017458 <_printf_float+0x308>)
 8017226:	e7da      	b.n	80171de <_printf_float+0x8e>
 8017228:	6861      	ldr	r1, [r4, #4]
 801722a:	1c4b      	adds	r3, r1, #1
 801722c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8017230:	a80a      	add	r0, sp, #40	; 0x28
 8017232:	d13e      	bne.n	80172b2 <_printf_float+0x162>
 8017234:	2306      	movs	r3, #6
 8017236:	6063      	str	r3, [r4, #4]
 8017238:	2300      	movs	r3, #0
 801723a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801723e:	ab09      	add	r3, sp, #36	; 0x24
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	ec49 8b10 	vmov	d0, r8, r9
 8017246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801724a:	6022      	str	r2, [r4, #0]
 801724c:	f8cd a004 	str.w	sl, [sp, #4]
 8017250:	6861      	ldr	r1, [r4, #4]
 8017252:	4628      	mov	r0, r5
 8017254:	f7ff fee8 	bl	8017028 <__cvt>
 8017258:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801725c:	2b47      	cmp	r3, #71	; 0x47
 801725e:	4680      	mov	r8, r0
 8017260:	d109      	bne.n	8017276 <_printf_float+0x126>
 8017262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017264:	1cd8      	adds	r0, r3, #3
 8017266:	db02      	blt.n	801726e <_printf_float+0x11e>
 8017268:	6862      	ldr	r2, [r4, #4]
 801726a:	4293      	cmp	r3, r2
 801726c:	dd47      	ble.n	80172fe <_printf_float+0x1ae>
 801726e:	f1aa 0a02 	sub.w	sl, sl, #2
 8017272:	fa5f fa8a 	uxtb.w	sl, sl
 8017276:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801727a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801727c:	d824      	bhi.n	80172c8 <_printf_float+0x178>
 801727e:	3901      	subs	r1, #1
 8017280:	4652      	mov	r2, sl
 8017282:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017286:	9109      	str	r1, [sp, #36]	; 0x24
 8017288:	f7ff ff2f 	bl	80170ea <__exponent>
 801728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801728e:	1813      	adds	r3, r2, r0
 8017290:	2a01      	cmp	r2, #1
 8017292:	4681      	mov	r9, r0
 8017294:	6123      	str	r3, [r4, #16]
 8017296:	dc02      	bgt.n	801729e <_printf_float+0x14e>
 8017298:	6822      	ldr	r2, [r4, #0]
 801729a:	07d1      	lsls	r1, r2, #31
 801729c:	d501      	bpl.n	80172a2 <_printf_float+0x152>
 801729e:	3301      	adds	r3, #1
 80172a0:	6123      	str	r3, [r4, #16]
 80172a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d0a5      	beq.n	80171f6 <_printf_float+0xa6>
 80172aa:	232d      	movs	r3, #45	; 0x2d
 80172ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172b0:	e7a1      	b.n	80171f6 <_printf_float+0xa6>
 80172b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80172b6:	f000 8177 	beq.w	80175a8 <_printf_float+0x458>
 80172ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80172be:	d1bb      	bne.n	8017238 <_printf_float+0xe8>
 80172c0:	2900      	cmp	r1, #0
 80172c2:	d1b9      	bne.n	8017238 <_printf_float+0xe8>
 80172c4:	2301      	movs	r3, #1
 80172c6:	e7b6      	b.n	8017236 <_printf_float+0xe6>
 80172c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80172cc:	d119      	bne.n	8017302 <_printf_float+0x1b2>
 80172ce:	2900      	cmp	r1, #0
 80172d0:	6863      	ldr	r3, [r4, #4]
 80172d2:	dd0c      	ble.n	80172ee <_printf_float+0x19e>
 80172d4:	6121      	str	r1, [r4, #16]
 80172d6:	b913      	cbnz	r3, 80172de <_printf_float+0x18e>
 80172d8:	6822      	ldr	r2, [r4, #0]
 80172da:	07d2      	lsls	r2, r2, #31
 80172dc:	d502      	bpl.n	80172e4 <_printf_float+0x194>
 80172de:	3301      	adds	r3, #1
 80172e0:	440b      	add	r3, r1
 80172e2:	6123      	str	r3, [r4, #16]
 80172e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80172e8:	f04f 0900 	mov.w	r9, #0
 80172ec:	e7d9      	b.n	80172a2 <_printf_float+0x152>
 80172ee:	b913      	cbnz	r3, 80172f6 <_printf_float+0x1a6>
 80172f0:	6822      	ldr	r2, [r4, #0]
 80172f2:	07d0      	lsls	r0, r2, #31
 80172f4:	d501      	bpl.n	80172fa <_printf_float+0x1aa>
 80172f6:	3302      	adds	r3, #2
 80172f8:	e7f3      	b.n	80172e2 <_printf_float+0x192>
 80172fa:	2301      	movs	r3, #1
 80172fc:	e7f1      	b.n	80172e2 <_printf_float+0x192>
 80172fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8017302:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017306:	4293      	cmp	r3, r2
 8017308:	db05      	blt.n	8017316 <_printf_float+0x1c6>
 801730a:	6822      	ldr	r2, [r4, #0]
 801730c:	6123      	str	r3, [r4, #16]
 801730e:	07d1      	lsls	r1, r2, #31
 8017310:	d5e8      	bpl.n	80172e4 <_printf_float+0x194>
 8017312:	3301      	adds	r3, #1
 8017314:	e7e5      	b.n	80172e2 <_printf_float+0x192>
 8017316:	2b00      	cmp	r3, #0
 8017318:	bfd4      	ite	le
 801731a:	f1c3 0302 	rsble	r3, r3, #2
 801731e:	2301      	movgt	r3, #1
 8017320:	4413      	add	r3, r2
 8017322:	e7de      	b.n	80172e2 <_printf_float+0x192>
 8017324:	6823      	ldr	r3, [r4, #0]
 8017326:	055a      	lsls	r2, r3, #21
 8017328:	d407      	bmi.n	801733a <_printf_float+0x1ea>
 801732a:	6923      	ldr	r3, [r4, #16]
 801732c:	4642      	mov	r2, r8
 801732e:	4631      	mov	r1, r6
 8017330:	4628      	mov	r0, r5
 8017332:	47b8      	blx	r7
 8017334:	3001      	adds	r0, #1
 8017336:	d12b      	bne.n	8017390 <_printf_float+0x240>
 8017338:	e767      	b.n	801720a <_printf_float+0xba>
 801733a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801733e:	f240 80dc 	bls.w	80174fa <_printf_float+0x3aa>
 8017342:	2200      	movs	r2, #0
 8017344:	2300      	movs	r3, #0
 8017346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801734a:	f7e9 fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 801734e:	2800      	cmp	r0, #0
 8017350:	d033      	beq.n	80173ba <_printf_float+0x26a>
 8017352:	2301      	movs	r3, #1
 8017354:	4a41      	ldr	r2, [pc, #260]	; (801745c <_printf_float+0x30c>)
 8017356:	4631      	mov	r1, r6
 8017358:	4628      	mov	r0, r5
 801735a:	47b8      	blx	r7
 801735c:	3001      	adds	r0, #1
 801735e:	f43f af54 	beq.w	801720a <_printf_float+0xba>
 8017362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017366:	429a      	cmp	r2, r3
 8017368:	db02      	blt.n	8017370 <_printf_float+0x220>
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	07d8      	lsls	r0, r3, #31
 801736e:	d50f      	bpl.n	8017390 <_printf_float+0x240>
 8017370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017374:	4631      	mov	r1, r6
 8017376:	4628      	mov	r0, r5
 8017378:	47b8      	blx	r7
 801737a:	3001      	adds	r0, #1
 801737c:	f43f af45 	beq.w	801720a <_printf_float+0xba>
 8017380:	f04f 0800 	mov.w	r8, #0
 8017384:	f104 091a 	add.w	r9, r4, #26
 8017388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801738a:	3b01      	subs	r3, #1
 801738c:	4543      	cmp	r3, r8
 801738e:	dc09      	bgt.n	80173a4 <_printf_float+0x254>
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	079b      	lsls	r3, r3, #30
 8017394:	f100 8103 	bmi.w	801759e <_printf_float+0x44e>
 8017398:	68e0      	ldr	r0, [r4, #12]
 801739a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801739c:	4298      	cmp	r0, r3
 801739e:	bfb8      	it	lt
 80173a0:	4618      	movlt	r0, r3
 80173a2:	e734      	b.n	801720e <_printf_float+0xbe>
 80173a4:	2301      	movs	r3, #1
 80173a6:	464a      	mov	r2, r9
 80173a8:	4631      	mov	r1, r6
 80173aa:	4628      	mov	r0, r5
 80173ac:	47b8      	blx	r7
 80173ae:	3001      	adds	r0, #1
 80173b0:	f43f af2b 	beq.w	801720a <_printf_float+0xba>
 80173b4:	f108 0801 	add.w	r8, r8, #1
 80173b8:	e7e6      	b.n	8017388 <_printf_float+0x238>
 80173ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173bc:	2b00      	cmp	r3, #0
 80173be:	dc2b      	bgt.n	8017418 <_printf_float+0x2c8>
 80173c0:	2301      	movs	r3, #1
 80173c2:	4a26      	ldr	r2, [pc, #152]	; (801745c <_printf_float+0x30c>)
 80173c4:	4631      	mov	r1, r6
 80173c6:	4628      	mov	r0, r5
 80173c8:	47b8      	blx	r7
 80173ca:	3001      	adds	r0, #1
 80173cc:	f43f af1d 	beq.w	801720a <_printf_float+0xba>
 80173d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173d2:	b923      	cbnz	r3, 80173de <_printf_float+0x28e>
 80173d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173d6:	b913      	cbnz	r3, 80173de <_printf_float+0x28e>
 80173d8:	6823      	ldr	r3, [r4, #0]
 80173da:	07d9      	lsls	r1, r3, #31
 80173dc:	d5d8      	bpl.n	8017390 <_printf_float+0x240>
 80173de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80173e2:	4631      	mov	r1, r6
 80173e4:	4628      	mov	r0, r5
 80173e6:	47b8      	blx	r7
 80173e8:	3001      	adds	r0, #1
 80173ea:	f43f af0e 	beq.w	801720a <_printf_float+0xba>
 80173ee:	f04f 0900 	mov.w	r9, #0
 80173f2:	f104 0a1a 	add.w	sl, r4, #26
 80173f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f8:	425b      	negs	r3, r3
 80173fa:	454b      	cmp	r3, r9
 80173fc:	dc01      	bgt.n	8017402 <_printf_float+0x2b2>
 80173fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017400:	e794      	b.n	801732c <_printf_float+0x1dc>
 8017402:	2301      	movs	r3, #1
 8017404:	4652      	mov	r2, sl
 8017406:	4631      	mov	r1, r6
 8017408:	4628      	mov	r0, r5
 801740a:	47b8      	blx	r7
 801740c:	3001      	adds	r0, #1
 801740e:	f43f aefc 	beq.w	801720a <_printf_float+0xba>
 8017412:	f109 0901 	add.w	r9, r9, #1
 8017416:	e7ee      	b.n	80173f6 <_printf_float+0x2a6>
 8017418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801741a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801741c:	429a      	cmp	r2, r3
 801741e:	bfa8      	it	ge
 8017420:	461a      	movge	r2, r3
 8017422:	2a00      	cmp	r2, #0
 8017424:	4691      	mov	r9, r2
 8017426:	dd07      	ble.n	8017438 <_printf_float+0x2e8>
 8017428:	4613      	mov	r3, r2
 801742a:	4631      	mov	r1, r6
 801742c:	4642      	mov	r2, r8
 801742e:	4628      	mov	r0, r5
 8017430:	47b8      	blx	r7
 8017432:	3001      	adds	r0, #1
 8017434:	f43f aee9 	beq.w	801720a <_printf_float+0xba>
 8017438:	f104 031a 	add.w	r3, r4, #26
 801743c:	f04f 0b00 	mov.w	fp, #0
 8017440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017444:	9306      	str	r3, [sp, #24]
 8017446:	e015      	b.n	8017474 <_printf_float+0x324>
 8017448:	7fefffff 	.word	0x7fefffff
 801744c:	0801e460 	.word	0x0801e460
 8017450:	0801e45c 	.word	0x0801e45c
 8017454:	0801e468 	.word	0x0801e468
 8017458:	0801e464 	.word	0x0801e464
 801745c:	0801e46c 	.word	0x0801e46c
 8017460:	2301      	movs	r3, #1
 8017462:	9a06      	ldr	r2, [sp, #24]
 8017464:	4631      	mov	r1, r6
 8017466:	4628      	mov	r0, r5
 8017468:	47b8      	blx	r7
 801746a:	3001      	adds	r0, #1
 801746c:	f43f aecd 	beq.w	801720a <_printf_float+0xba>
 8017470:	f10b 0b01 	add.w	fp, fp, #1
 8017474:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017478:	ebaa 0309 	sub.w	r3, sl, r9
 801747c:	455b      	cmp	r3, fp
 801747e:	dcef      	bgt.n	8017460 <_printf_float+0x310>
 8017480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017484:	429a      	cmp	r2, r3
 8017486:	44d0      	add	r8, sl
 8017488:	db15      	blt.n	80174b6 <_printf_float+0x366>
 801748a:	6823      	ldr	r3, [r4, #0]
 801748c:	07da      	lsls	r2, r3, #31
 801748e:	d412      	bmi.n	80174b6 <_printf_float+0x366>
 8017490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017494:	eba3 020a 	sub.w	r2, r3, sl
 8017498:	eba3 0a01 	sub.w	sl, r3, r1
 801749c:	4592      	cmp	sl, r2
 801749e:	bfa8      	it	ge
 80174a0:	4692      	movge	sl, r2
 80174a2:	f1ba 0f00 	cmp.w	sl, #0
 80174a6:	dc0e      	bgt.n	80174c6 <_printf_float+0x376>
 80174a8:	f04f 0800 	mov.w	r8, #0
 80174ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80174b0:	f104 091a 	add.w	r9, r4, #26
 80174b4:	e019      	b.n	80174ea <_printf_float+0x39a>
 80174b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174ba:	4631      	mov	r1, r6
 80174bc:	4628      	mov	r0, r5
 80174be:	47b8      	blx	r7
 80174c0:	3001      	adds	r0, #1
 80174c2:	d1e5      	bne.n	8017490 <_printf_float+0x340>
 80174c4:	e6a1      	b.n	801720a <_printf_float+0xba>
 80174c6:	4653      	mov	r3, sl
 80174c8:	4642      	mov	r2, r8
 80174ca:	4631      	mov	r1, r6
 80174cc:	4628      	mov	r0, r5
 80174ce:	47b8      	blx	r7
 80174d0:	3001      	adds	r0, #1
 80174d2:	d1e9      	bne.n	80174a8 <_printf_float+0x358>
 80174d4:	e699      	b.n	801720a <_printf_float+0xba>
 80174d6:	2301      	movs	r3, #1
 80174d8:	464a      	mov	r2, r9
 80174da:	4631      	mov	r1, r6
 80174dc:	4628      	mov	r0, r5
 80174de:	47b8      	blx	r7
 80174e0:	3001      	adds	r0, #1
 80174e2:	f43f ae92 	beq.w	801720a <_printf_float+0xba>
 80174e6:	f108 0801 	add.w	r8, r8, #1
 80174ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80174ee:	1a9b      	subs	r3, r3, r2
 80174f0:	eba3 030a 	sub.w	r3, r3, sl
 80174f4:	4543      	cmp	r3, r8
 80174f6:	dcee      	bgt.n	80174d6 <_printf_float+0x386>
 80174f8:	e74a      	b.n	8017390 <_printf_float+0x240>
 80174fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174fc:	2a01      	cmp	r2, #1
 80174fe:	dc01      	bgt.n	8017504 <_printf_float+0x3b4>
 8017500:	07db      	lsls	r3, r3, #31
 8017502:	d53a      	bpl.n	801757a <_printf_float+0x42a>
 8017504:	2301      	movs	r3, #1
 8017506:	4642      	mov	r2, r8
 8017508:	4631      	mov	r1, r6
 801750a:	4628      	mov	r0, r5
 801750c:	47b8      	blx	r7
 801750e:	3001      	adds	r0, #1
 8017510:	f43f ae7b 	beq.w	801720a <_printf_float+0xba>
 8017514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017518:	4631      	mov	r1, r6
 801751a:	4628      	mov	r0, r5
 801751c:	47b8      	blx	r7
 801751e:	3001      	adds	r0, #1
 8017520:	f108 0801 	add.w	r8, r8, #1
 8017524:	f43f ae71 	beq.w	801720a <_printf_float+0xba>
 8017528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801752a:	2200      	movs	r2, #0
 801752c:	f103 3aff 	add.w	sl, r3, #4294967295
 8017530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017534:	2300      	movs	r3, #0
 8017536:	f7e9 fad7 	bl	8000ae8 <__aeabi_dcmpeq>
 801753a:	b9c8      	cbnz	r0, 8017570 <_printf_float+0x420>
 801753c:	4653      	mov	r3, sl
 801753e:	4642      	mov	r2, r8
 8017540:	4631      	mov	r1, r6
 8017542:	4628      	mov	r0, r5
 8017544:	47b8      	blx	r7
 8017546:	3001      	adds	r0, #1
 8017548:	d10e      	bne.n	8017568 <_printf_float+0x418>
 801754a:	e65e      	b.n	801720a <_printf_float+0xba>
 801754c:	2301      	movs	r3, #1
 801754e:	4652      	mov	r2, sl
 8017550:	4631      	mov	r1, r6
 8017552:	4628      	mov	r0, r5
 8017554:	47b8      	blx	r7
 8017556:	3001      	adds	r0, #1
 8017558:	f43f ae57 	beq.w	801720a <_printf_float+0xba>
 801755c:	f108 0801 	add.w	r8, r8, #1
 8017560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017562:	3b01      	subs	r3, #1
 8017564:	4543      	cmp	r3, r8
 8017566:	dcf1      	bgt.n	801754c <_printf_float+0x3fc>
 8017568:	464b      	mov	r3, r9
 801756a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801756e:	e6de      	b.n	801732e <_printf_float+0x1de>
 8017570:	f04f 0800 	mov.w	r8, #0
 8017574:	f104 0a1a 	add.w	sl, r4, #26
 8017578:	e7f2      	b.n	8017560 <_printf_float+0x410>
 801757a:	2301      	movs	r3, #1
 801757c:	e7df      	b.n	801753e <_printf_float+0x3ee>
 801757e:	2301      	movs	r3, #1
 8017580:	464a      	mov	r2, r9
 8017582:	4631      	mov	r1, r6
 8017584:	4628      	mov	r0, r5
 8017586:	47b8      	blx	r7
 8017588:	3001      	adds	r0, #1
 801758a:	f43f ae3e 	beq.w	801720a <_printf_float+0xba>
 801758e:	f108 0801 	add.w	r8, r8, #1
 8017592:	68e3      	ldr	r3, [r4, #12]
 8017594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017596:	1a9b      	subs	r3, r3, r2
 8017598:	4543      	cmp	r3, r8
 801759a:	dcf0      	bgt.n	801757e <_printf_float+0x42e>
 801759c:	e6fc      	b.n	8017398 <_printf_float+0x248>
 801759e:	f04f 0800 	mov.w	r8, #0
 80175a2:	f104 0919 	add.w	r9, r4, #25
 80175a6:	e7f4      	b.n	8017592 <_printf_float+0x442>
 80175a8:	2900      	cmp	r1, #0
 80175aa:	f43f ae8b 	beq.w	80172c4 <_printf_float+0x174>
 80175ae:	2300      	movs	r3, #0
 80175b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80175b4:	ab09      	add	r3, sp, #36	; 0x24
 80175b6:	9300      	str	r3, [sp, #0]
 80175b8:	ec49 8b10 	vmov	d0, r8, r9
 80175bc:	6022      	str	r2, [r4, #0]
 80175be:	f8cd a004 	str.w	sl, [sp, #4]
 80175c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80175c6:	4628      	mov	r0, r5
 80175c8:	f7ff fd2e 	bl	8017028 <__cvt>
 80175cc:	4680      	mov	r8, r0
 80175ce:	e648      	b.n	8017262 <_printf_float+0x112>

080175d0 <_printf_common>:
 80175d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d4:	4691      	mov	r9, r2
 80175d6:	461f      	mov	r7, r3
 80175d8:	688a      	ldr	r2, [r1, #8]
 80175da:	690b      	ldr	r3, [r1, #16]
 80175dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175e0:	4293      	cmp	r3, r2
 80175e2:	bfb8      	it	lt
 80175e4:	4613      	movlt	r3, r2
 80175e6:	f8c9 3000 	str.w	r3, [r9]
 80175ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175ee:	4606      	mov	r6, r0
 80175f0:	460c      	mov	r4, r1
 80175f2:	b112      	cbz	r2, 80175fa <_printf_common+0x2a>
 80175f4:	3301      	adds	r3, #1
 80175f6:	f8c9 3000 	str.w	r3, [r9]
 80175fa:	6823      	ldr	r3, [r4, #0]
 80175fc:	0699      	lsls	r1, r3, #26
 80175fe:	bf42      	ittt	mi
 8017600:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017604:	3302      	addmi	r3, #2
 8017606:	f8c9 3000 	strmi.w	r3, [r9]
 801760a:	6825      	ldr	r5, [r4, #0]
 801760c:	f015 0506 	ands.w	r5, r5, #6
 8017610:	d107      	bne.n	8017622 <_printf_common+0x52>
 8017612:	f104 0a19 	add.w	sl, r4, #25
 8017616:	68e3      	ldr	r3, [r4, #12]
 8017618:	f8d9 2000 	ldr.w	r2, [r9]
 801761c:	1a9b      	subs	r3, r3, r2
 801761e:	42ab      	cmp	r3, r5
 8017620:	dc28      	bgt.n	8017674 <_printf_common+0xa4>
 8017622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017626:	6822      	ldr	r2, [r4, #0]
 8017628:	3300      	adds	r3, #0
 801762a:	bf18      	it	ne
 801762c:	2301      	movne	r3, #1
 801762e:	0692      	lsls	r2, r2, #26
 8017630:	d42d      	bmi.n	801768e <_printf_common+0xbe>
 8017632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017636:	4639      	mov	r1, r7
 8017638:	4630      	mov	r0, r6
 801763a:	47c0      	blx	r8
 801763c:	3001      	adds	r0, #1
 801763e:	d020      	beq.n	8017682 <_printf_common+0xb2>
 8017640:	6823      	ldr	r3, [r4, #0]
 8017642:	68e5      	ldr	r5, [r4, #12]
 8017644:	f8d9 2000 	ldr.w	r2, [r9]
 8017648:	f003 0306 	and.w	r3, r3, #6
 801764c:	2b04      	cmp	r3, #4
 801764e:	bf08      	it	eq
 8017650:	1aad      	subeq	r5, r5, r2
 8017652:	68a3      	ldr	r3, [r4, #8]
 8017654:	6922      	ldr	r2, [r4, #16]
 8017656:	bf0c      	ite	eq
 8017658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801765c:	2500      	movne	r5, #0
 801765e:	4293      	cmp	r3, r2
 8017660:	bfc4      	itt	gt
 8017662:	1a9b      	subgt	r3, r3, r2
 8017664:	18ed      	addgt	r5, r5, r3
 8017666:	f04f 0900 	mov.w	r9, #0
 801766a:	341a      	adds	r4, #26
 801766c:	454d      	cmp	r5, r9
 801766e:	d11a      	bne.n	80176a6 <_printf_common+0xd6>
 8017670:	2000      	movs	r0, #0
 8017672:	e008      	b.n	8017686 <_printf_common+0xb6>
 8017674:	2301      	movs	r3, #1
 8017676:	4652      	mov	r2, sl
 8017678:	4639      	mov	r1, r7
 801767a:	4630      	mov	r0, r6
 801767c:	47c0      	blx	r8
 801767e:	3001      	adds	r0, #1
 8017680:	d103      	bne.n	801768a <_printf_common+0xba>
 8017682:	f04f 30ff 	mov.w	r0, #4294967295
 8017686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801768a:	3501      	adds	r5, #1
 801768c:	e7c3      	b.n	8017616 <_printf_common+0x46>
 801768e:	18e1      	adds	r1, r4, r3
 8017690:	1c5a      	adds	r2, r3, #1
 8017692:	2030      	movs	r0, #48	; 0x30
 8017694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017698:	4422      	add	r2, r4
 801769a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801769e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80176a2:	3302      	adds	r3, #2
 80176a4:	e7c5      	b.n	8017632 <_printf_common+0x62>
 80176a6:	2301      	movs	r3, #1
 80176a8:	4622      	mov	r2, r4
 80176aa:	4639      	mov	r1, r7
 80176ac:	4630      	mov	r0, r6
 80176ae:	47c0      	blx	r8
 80176b0:	3001      	adds	r0, #1
 80176b2:	d0e6      	beq.n	8017682 <_printf_common+0xb2>
 80176b4:	f109 0901 	add.w	r9, r9, #1
 80176b8:	e7d8      	b.n	801766c <_printf_common+0x9c>
	...

080176bc <_printf_i>:
 80176bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80176c4:	460c      	mov	r4, r1
 80176c6:	7e09      	ldrb	r1, [r1, #24]
 80176c8:	b085      	sub	sp, #20
 80176ca:	296e      	cmp	r1, #110	; 0x6e
 80176cc:	4617      	mov	r7, r2
 80176ce:	4606      	mov	r6, r0
 80176d0:	4698      	mov	r8, r3
 80176d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176d4:	f000 80b3 	beq.w	801783e <_printf_i+0x182>
 80176d8:	d822      	bhi.n	8017720 <_printf_i+0x64>
 80176da:	2963      	cmp	r1, #99	; 0x63
 80176dc:	d036      	beq.n	801774c <_printf_i+0x90>
 80176de:	d80a      	bhi.n	80176f6 <_printf_i+0x3a>
 80176e0:	2900      	cmp	r1, #0
 80176e2:	f000 80b9 	beq.w	8017858 <_printf_i+0x19c>
 80176e6:	2958      	cmp	r1, #88	; 0x58
 80176e8:	f000 8083 	beq.w	80177f2 <_printf_i+0x136>
 80176ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80176f4:	e032      	b.n	801775c <_printf_i+0xa0>
 80176f6:	2964      	cmp	r1, #100	; 0x64
 80176f8:	d001      	beq.n	80176fe <_printf_i+0x42>
 80176fa:	2969      	cmp	r1, #105	; 0x69
 80176fc:	d1f6      	bne.n	80176ec <_printf_i+0x30>
 80176fe:	6820      	ldr	r0, [r4, #0]
 8017700:	6813      	ldr	r3, [r2, #0]
 8017702:	0605      	lsls	r5, r0, #24
 8017704:	f103 0104 	add.w	r1, r3, #4
 8017708:	d52a      	bpl.n	8017760 <_printf_i+0xa4>
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	6011      	str	r1, [r2, #0]
 801770e:	2b00      	cmp	r3, #0
 8017710:	da03      	bge.n	801771a <_printf_i+0x5e>
 8017712:	222d      	movs	r2, #45	; 0x2d
 8017714:	425b      	negs	r3, r3
 8017716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801771a:	486f      	ldr	r0, [pc, #444]	; (80178d8 <_printf_i+0x21c>)
 801771c:	220a      	movs	r2, #10
 801771e:	e039      	b.n	8017794 <_printf_i+0xd8>
 8017720:	2973      	cmp	r1, #115	; 0x73
 8017722:	f000 809d 	beq.w	8017860 <_printf_i+0x1a4>
 8017726:	d808      	bhi.n	801773a <_printf_i+0x7e>
 8017728:	296f      	cmp	r1, #111	; 0x6f
 801772a:	d020      	beq.n	801776e <_printf_i+0xb2>
 801772c:	2970      	cmp	r1, #112	; 0x70
 801772e:	d1dd      	bne.n	80176ec <_printf_i+0x30>
 8017730:	6823      	ldr	r3, [r4, #0]
 8017732:	f043 0320 	orr.w	r3, r3, #32
 8017736:	6023      	str	r3, [r4, #0]
 8017738:	e003      	b.n	8017742 <_printf_i+0x86>
 801773a:	2975      	cmp	r1, #117	; 0x75
 801773c:	d017      	beq.n	801776e <_printf_i+0xb2>
 801773e:	2978      	cmp	r1, #120	; 0x78
 8017740:	d1d4      	bne.n	80176ec <_printf_i+0x30>
 8017742:	2378      	movs	r3, #120	; 0x78
 8017744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017748:	4864      	ldr	r0, [pc, #400]	; (80178dc <_printf_i+0x220>)
 801774a:	e055      	b.n	80177f8 <_printf_i+0x13c>
 801774c:	6813      	ldr	r3, [r2, #0]
 801774e:	1d19      	adds	r1, r3, #4
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	6011      	str	r1, [r2, #0]
 8017754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801775c:	2301      	movs	r3, #1
 801775e:	e08c      	b.n	801787a <_printf_i+0x1be>
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	6011      	str	r1, [r2, #0]
 8017764:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017768:	bf18      	it	ne
 801776a:	b21b      	sxthne	r3, r3
 801776c:	e7cf      	b.n	801770e <_printf_i+0x52>
 801776e:	6813      	ldr	r3, [r2, #0]
 8017770:	6825      	ldr	r5, [r4, #0]
 8017772:	1d18      	adds	r0, r3, #4
 8017774:	6010      	str	r0, [r2, #0]
 8017776:	0628      	lsls	r0, r5, #24
 8017778:	d501      	bpl.n	801777e <_printf_i+0xc2>
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	e002      	b.n	8017784 <_printf_i+0xc8>
 801777e:	0668      	lsls	r0, r5, #25
 8017780:	d5fb      	bpl.n	801777a <_printf_i+0xbe>
 8017782:	881b      	ldrh	r3, [r3, #0]
 8017784:	4854      	ldr	r0, [pc, #336]	; (80178d8 <_printf_i+0x21c>)
 8017786:	296f      	cmp	r1, #111	; 0x6f
 8017788:	bf14      	ite	ne
 801778a:	220a      	movne	r2, #10
 801778c:	2208      	moveq	r2, #8
 801778e:	2100      	movs	r1, #0
 8017790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017794:	6865      	ldr	r5, [r4, #4]
 8017796:	60a5      	str	r5, [r4, #8]
 8017798:	2d00      	cmp	r5, #0
 801779a:	f2c0 8095 	blt.w	80178c8 <_printf_i+0x20c>
 801779e:	6821      	ldr	r1, [r4, #0]
 80177a0:	f021 0104 	bic.w	r1, r1, #4
 80177a4:	6021      	str	r1, [r4, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d13d      	bne.n	8017826 <_printf_i+0x16a>
 80177aa:	2d00      	cmp	r5, #0
 80177ac:	f040 808e 	bne.w	80178cc <_printf_i+0x210>
 80177b0:	4665      	mov	r5, ip
 80177b2:	2a08      	cmp	r2, #8
 80177b4:	d10b      	bne.n	80177ce <_printf_i+0x112>
 80177b6:	6823      	ldr	r3, [r4, #0]
 80177b8:	07db      	lsls	r3, r3, #31
 80177ba:	d508      	bpl.n	80177ce <_printf_i+0x112>
 80177bc:	6923      	ldr	r3, [r4, #16]
 80177be:	6862      	ldr	r2, [r4, #4]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	bfde      	ittt	le
 80177c4:	2330      	movle	r3, #48	; 0x30
 80177c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80177ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80177ce:	ebac 0305 	sub.w	r3, ip, r5
 80177d2:	6123      	str	r3, [r4, #16]
 80177d4:	f8cd 8000 	str.w	r8, [sp]
 80177d8:	463b      	mov	r3, r7
 80177da:	aa03      	add	r2, sp, #12
 80177dc:	4621      	mov	r1, r4
 80177de:	4630      	mov	r0, r6
 80177e0:	f7ff fef6 	bl	80175d0 <_printf_common>
 80177e4:	3001      	adds	r0, #1
 80177e6:	d14d      	bne.n	8017884 <_printf_i+0x1c8>
 80177e8:	f04f 30ff 	mov.w	r0, #4294967295
 80177ec:	b005      	add	sp, #20
 80177ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f2:	4839      	ldr	r0, [pc, #228]	; (80178d8 <_printf_i+0x21c>)
 80177f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80177f8:	6813      	ldr	r3, [r2, #0]
 80177fa:	6821      	ldr	r1, [r4, #0]
 80177fc:	1d1d      	adds	r5, r3, #4
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	6015      	str	r5, [r2, #0]
 8017802:	060a      	lsls	r2, r1, #24
 8017804:	d50b      	bpl.n	801781e <_printf_i+0x162>
 8017806:	07ca      	lsls	r2, r1, #31
 8017808:	bf44      	itt	mi
 801780a:	f041 0120 	orrmi.w	r1, r1, #32
 801780e:	6021      	strmi	r1, [r4, #0]
 8017810:	b91b      	cbnz	r3, 801781a <_printf_i+0x15e>
 8017812:	6822      	ldr	r2, [r4, #0]
 8017814:	f022 0220 	bic.w	r2, r2, #32
 8017818:	6022      	str	r2, [r4, #0]
 801781a:	2210      	movs	r2, #16
 801781c:	e7b7      	b.n	801778e <_printf_i+0xd2>
 801781e:	064d      	lsls	r5, r1, #25
 8017820:	bf48      	it	mi
 8017822:	b29b      	uxthmi	r3, r3
 8017824:	e7ef      	b.n	8017806 <_printf_i+0x14a>
 8017826:	4665      	mov	r5, ip
 8017828:	fbb3 f1f2 	udiv	r1, r3, r2
 801782c:	fb02 3311 	mls	r3, r2, r1, r3
 8017830:	5cc3      	ldrb	r3, [r0, r3]
 8017832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017836:	460b      	mov	r3, r1
 8017838:	2900      	cmp	r1, #0
 801783a:	d1f5      	bne.n	8017828 <_printf_i+0x16c>
 801783c:	e7b9      	b.n	80177b2 <_printf_i+0xf6>
 801783e:	6813      	ldr	r3, [r2, #0]
 8017840:	6825      	ldr	r5, [r4, #0]
 8017842:	6961      	ldr	r1, [r4, #20]
 8017844:	1d18      	adds	r0, r3, #4
 8017846:	6010      	str	r0, [r2, #0]
 8017848:	0628      	lsls	r0, r5, #24
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	d501      	bpl.n	8017852 <_printf_i+0x196>
 801784e:	6019      	str	r1, [r3, #0]
 8017850:	e002      	b.n	8017858 <_printf_i+0x19c>
 8017852:	066a      	lsls	r2, r5, #25
 8017854:	d5fb      	bpl.n	801784e <_printf_i+0x192>
 8017856:	8019      	strh	r1, [r3, #0]
 8017858:	2300      	movs	r3, #0
 801785a:	6123      	str	r3, [r4, #16]
 801785c:	4665      	mov	r5, ip
 801785e:	e7b9      	b.n	80177d4 <_printf_i+0x118>
 8017860:	6813      	ldr	r3, [r2, #0]
 8017862:	1d19      	adds	r1, r3, #4
 8017864:	6011      	str	r1, [r2, #0]
 8017866:	681d      	ldr	r5, [r3, #0]
 8017868:	6862      	ldr	r2, [r4, #4]
 801786a:	2100      	movs	r1, #0
 801786c:	4628      	mov	r0, r5
 801786e:	f7e8 fcc7 	bl	8000200 <memchr>
 8017872:	b108      	cbz	r0, 8017878 <_printf_i+0x1bc>
 8017874:	1b40      	subs	r0, r0, r5
 8017876:	6060      	str	r0, [r4, #4]
 8017878:	6863      	ldr	r3, [r4, #4]
 801787a:	6123      	str	r3, [r4, #16]
 801787c:	2300      	movs	r3, #0
 801787e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017882:	e7a7      	b.n	80177d4 <_printf_i+0x118>
 8017884:	6923      	ldr	r3, [r4, #16]
 8017886:	462a      	mov	r2, r5
 8017888:	4639      	mov	r1, r7
 801788a:	4630      	mov	r0, r6
 801788c:	47c0      	blx	r8
 801788e:	3001      	adds	r0, #1
 8017890:	d0aa      	beq.n	80177e8 <_printf_i+0x12c>
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	079b      	lsls	r3, r3, #30
 8017896:	d413      	bmi.n	80178c0 <_printf_i+0x204>
 8017898:	68e0      	ldr	r0, [r4, #12]
 801789a:	9b03      	ldr	r3, [sp, #12]
 801789c:	4298      	cmp	r0, r3
 801789e:	bfb8      	it	lt
 80178a0:	4618      	movlt	r0, r3
 80178a2:	e7a3      	b.n	80177ec <_printf_i+0x130>
 80178a4:	2301      	movs	r3, #1
 80178a6:	464a      	mov	r2, r9
 80178a8:	4639      	mov	r1, r7
 80178aa:	4630      	mov	r0, r6
 80178ac:	47c0      	blx	r8
 80178ae:	3001      	adds	r0, #1
 80178b0:	d09a      	beq.n	80177e8 <_printf_i+0x12c>
 80178b2:	3501      	adds	r5, #1
 80178b4:	68e3      	ldr	r3, [r4, #12]
 80178b6:	9a03      	ldr	r2, [sp, #12]
 80178b8:	1a9b      	subs	r3, r3, r2
 80178ba:	42ab      	cmp	r3, r5
 80178bc:	dcf2      	bgt.n	80178a4 <_printf_i+0x1e8>
 80178be:	e7eb      	b.n	8017898 <_printf_i+0x1dc>
 80178c0:	2500      	movs	r5, #0
 80178c2:	f104 0919 	add.w	r9, r4, #25
 80178c6:	e7f5      	b.n	80178b4 <_printf_i+0x1f8>
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d1ac      	bne.n	8017826 <_printf_i+0x16a>
 80178cc:	7803      	ldrb	r3, [r0, #0]
 80178ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178d6:	e76c      	b.n	80177b2 <_printf_i+0xf6>
 80178d8:	0801e46e 	.word	0x0801e46e
 80178dc:	0801e47f 	.word	0x0801e47f

080178e0 <_scanf_float>:
 80178e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e4:	469a      	mov	sl, r3
 80178e6:	688b      	ldr	r3, [r1, #8]
 80178e8:	4616      	mov	r6, r2
 80178ea:	1e5a      	subs	r2, r3, #1
 80178ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80178f0:	b087      	sub	sp, #28
 80178f2:	bf83      	ittte	hi
 80178f4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80178f8:	189b      	addhi	r3, r3, r2
 80178fa:	9301      	strhi	r3, [sp, #4]
 80178fc:	2300      	movls	r3, #0
 80178fe:	bf86      	itte	hi
 8017900:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017904:	608b      	strhi	r3, [r1, #8]
 8017906:	9301      	strls	r3, [sp, #4]
 8017908:	680b      	ldr	r3, [r1, #0]
 801790a:	4688      	mov	r8, r1
 801790c:	f04f 0b00 	mov.w	fp, #0
 8017910:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017914:	f848 3b1c 	str.w	r3, [r8], #28
 8017918:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801791c:	4607      	mov	r7, r0
 801791e:	460c      	mov	r4, r1
 8017920:	4645      	mov	r5, r8
 8017922:	465a      	mov	r2, fp
 8017924:	46d9      	mov	r9, fp
 8017926:	f8cd b008 	str.w	fp, [sp, #8]
 801792a:	68a1      	ldr	r1, [r4, #8]
 801792c:	b181      	cbz	r1, 8017950 <_scanf_float+0x70>
 801792e:	6833      	ldr	r3, [r6, #0]
 8017930:	781b      	ldrb	r3, [r3, #0]
 8017932:	2b49      	cmp	r3, #73	; 0x49
 8017934:	d071      	beq.n	8017a1a <_scanf_float+0x13a>
 8017936:	d84d      	bhi.n	80179d4 <_scanf_float+0xf4>
 8017938:	2b39      	cmp	r3, #57	; 0x39
 801793a:	d840      	bhi.n	80179be <_scanf_float+0xde>
 801793c:	2b31      	cmp	r3, #49	; 0x31
 801793e:	f080 8088 	bcs.w	8017a52 <_scanf_float+0x172>
 8017942:	2b2d      	cmp	r3, #45	; 0x2d
 8017944:	f000 8090 	beq.w	8017a68 <_scanf_float+0x188>
 8017948:	d815      	bhi.n	8017976 <_scanf_float+0x96>
 801794a:	2b2b      	cmp	r3, #43	; 0x2b
 801794c:	f000 808c 	beq.w	8017a68 <_scanf_float+0x188>
 8017950:	f1b9 0f00 	cmp.w	r9, #0
 8017954:	d003      	beq.n	801795e <_scanf_float+0x7e>
 8017956:	6823      	ldr	r3, [r4, #0]
 8017958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801795c:	6023      	str	r3, [r4, #0]
 801795e:	3a01      	subs	r2, #1
 8017960:	2a01      	cmp	r2, #1
 8017962:	f200 80ea 	bhi.w	8017b3a <_scanf_float+0x25a>
 8017966:	4545      	cmp	r5, r8
 8017968:	f200 80dc 	bhi.w	8017b24 <_scanf_float+0x244>
 801796c:	2601      	movs	r6, #1
 801796e:	4630      	mov	r0, r6
 8017970:	b007      	add	sp, #28
 8017972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017976:	2b2e      	cmp	r3, #46	; 0x2e
 8017978:	f000 809f 	beq.w	8017aba <_scanf_float+0x1da>
 801797c:	2b30      	cmp	r3, #48	; 0x30
 801797e:	d1e7      	bne.n	8017950 <_scanf_float+0x70>
 8017980:	6820      	ldr	r0, [r4, #0]
 8017982:	f410 7f80 	tst.w	r0, #256	; 0x100
 8017986:	d064      	beq.n	8017a52 <_scanf_float+0x172>
 8017988:	9b01      	ldr	r3, [sp, #4]
 801798a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801798e:	6020      	str	r0, [r4, #0]
 8017990:	f109 0901 	add.w	r9, r9, #1
 8017994:	b11b      	cbz	r3, 801799e <_scanf_float+0xbe>
 8017996:	3b01      	subs	r3, #1
 8017998:	3101      	adds	r1, #1
 801799a:	9301      	str	r3, [sp, #4]
 801799c:	60a1      	str	r1, [r4, #8]
 801799e:	68a3      	ldr	r3, [r4, #8]
 80179a0:	3b01      	subs	r3, #1
 80179a2:	60a3      	str	r3, [r4, #8]
 80179a4:	6923      	ldr	r3, [r4, #16]
 80179a6:	3301      	adds	r3, #1
 80179a8:	6123      	str	r3, [r4, #16]
 80179aa:	6873      	ldr	r3, [r6, #4]
 80179ac:	3b01      	subs	r3, #1
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	6073      	str	r3, [r6, #4]
 80179b2:	f340 80ac 	ble.w	8017b0e <_scanf_float+0x22e>
 80179b6:	6833      	ldr	r3, [r6, #0]
 80179b8:	3301      	adds	r3, #1
 80179ba:	6033      	str	r3, [r6, #0]
 80179bc:	e7b5      	b.n	801792a <_scanf_float+0x4a>
 80179be:	2b45      	cmp	r3, #69	; 0x45
 80179c0:	f000 8085 	beq.w	8017ace <_scanf_float+0x1ee>
 80179c4:	2b46      	cmp	r3, #70	; 0x46
 80179c6:	d06a      	beq.n	8017a9e <_scanf_float+0x1be>
 80179c8:	2b41      	cmp	r3, #65	; 0x41
 80179ca:	d1c1      	bne.n	8017950 <_scanf_float+0x70>
 80179cc:	2a01      	cmp	r2, #1
 80179ce:	d1bf      	bne.n	8017950 <_scanf_float+0x70>
 80179d0:	2202      	movs	r2, #2
 80179d2:	e046      	b.n	8017a62 <_scanf_float+0x182>
 80179d4:	2b65      	cmp	r3, #101	; 0x65
 80179d6:	d07a      	beq.n	8017ace <_scanf_float+0x1ee>
 80179d8:	d818      	bhi.n	8017a0c <_scanf_float+0x12c>
 80179da:	2b54      	cmp	r3, #84	; 0x54
 80179dc:	d066      	beq.n	8017aac <_scanf_float+0x1cc>
 80179de:	d811      	bhi.n	8017a04 <_scanf_float+0x124>
 80179e0:	2b4e      	cmp	r3, #78	; 0x4e
 80179e2:	d1b5      	bne.n	8017950 <_scanf_float+0x70>
 80179e4:	2a00      	cmp	r2, #0
 80179e6:	d146      	bne.n	8017a76 <_scanf_float+0x196>
 80179e8:	f1b9 0f00 	cmp.w	r9, #0
 80179ec:	d145      	bne.n	8017a7a <_scanf_float+0x19a>
 80179ee:	6821      	ldr	r1, [r4, #0]
 80179f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80179f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80179f8:	d13f      	bne.n	8017a7a <_scanf_float+0x19a>
 80179fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80179fe:	6021      	str	r1, [r4, #0]
 8017a00:	2201      	movs	r2, #1
 8017a02:	e02e      	b.n	8017a62 <_scanf_float+0x182>
 8017a04:	2b59      	cmp	r3, #89	; 0x59
 8017a06:	d01e      	beq.n	8017a46 <_scanf_float+0x166>
 8017a08:	2b61      	cmp	r3, #97	; 0x61
 8017a0a:	e7de      	b.n	80179ca <_scanf_float+0xea>
 8017a0c:	2b6e      	cmp	r3, #110	; 0x6e
 8017a0e:	d0e9      	beq.n	80179e4 <_scanf_float+0x104>
 8017a10:	d815      	bhi.n	8017a3e <_scanf_float+0x15e>
 8017a12:	2b66      	cmp	r3, #102	; 0x66
 8017a14:	d043      	beq.n	8017a9e <_scanf_float+0x1be>
 8017a16:	2b69      	cmp	r3, #105	; 0x69
 8017a18:	d19a      	bne.n	8017950 <_scanf_float+0x70>
 8017a1a:	f1bb 0f00 	cmp.w	fp, #0
 8017a1e:	d138      	bne.n	8017a92 <_scanf_float+0x1b2>
 8017a20:	f1b9 0f00 	cmp.w	r9, #0
 8017a24:	d197      	bne.n	8017956 <_scanf_float+0x76>
 8017a26:	6821      	ldr	r1, [r4, #0]
 8017a28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017a2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017a30:	d195      	bne.n	801795e <_scanf_float+0x7e>
 8017a32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017a36:	6021      	str	r1, [r4, #0]
 8017a38:	f04f 0b01 	mov.w	fp, #1
 8017a3c:	e011      	b.n	8017a62 <_scanf_float+0x182>
 8017a3e:	2b74      	cmp	r3, #116	; 0x74
 8017a40:	d034      	beq.n	8017aac <_scanf_float+0x1cc>
 8017a42:	2b79      	cmp	r3, #121	; 0x79
 8017a44:	d184      	bne.n	8017950 <_scanf_float+0x70>
 8017a46:	f1bb 0f07 	cmp.w	fp, #7
 8017a4a:	d181      	bne.n	8017950 <_scanf_float+0x70>
 8017a4c:	f04f 0b08 	mov.w	fp, #8
 8017a50:	e007      	b.n	8017a62 <_scanf_float+0x182>
 8017a52:	eb12 0f0b 	cmn.w	r2, fp
 8017a56:	f47f af7b 	bne.w	8017950 <_scanf_float+0x70>
 8017a5a:	6821      	ldr	r1, [r4, #0]
 8017a5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8017a60:	6021      	str	r1, [r4, #0]
 8017a62:	702b      	strb	r3, [r5, #0]
 8017a64:	3501      	adds	r5, #1
 8017a66:	e79a      	b.n	801799e <_scanf_float+0xbe>
 8017a68:	6821      	ldr	r1, [r4, #0]
 8017a6a:	0608      	lsls	r0, r1, #24
 8017a6c:	f57f af70 	bpl.w	8017950 <_scanf_float+0x70>
 8017a70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017a74:	e7f4      	b.n	8017a60 <_scanf_float+0x180>
 8017a76:	2a02      	cmp	r2, #2
 8017a78:	d047      	beq.n	8017b0a <_scanf_float+0x22a>
 8017a7a:	f1bb 0f01 	cmp.w	fp, #1
 8017a7e:	d003      	beq.n	8017a88 <_scanf_float+0x1a8>
 8017a80:	f1bb 0f04 	cmp.w	fp, #4
 8017a84:	f47f af64 	bne.w	8017950 <_scanf_float+0x70>
 8017a88:	f10b 0b01 	add.w	fp, fp, #1
 8017a8c:	fa5f fb8b 	uxtb.w	fp, fp
 8017a90:	e7e7      	b.n	8017a62 <_scanf_float+0x182>
 8017a92:	f1bb 0f03 	cmp.w	fp, #3
 8017a96:	d0f7      	beq.n	8017a88 <_scanf_float+0x1a8>
 8017a98:	f1bb 0f05 	cmp.w	fp, #5
 8017a9c:	e7f2      	b.n	8017a84 <_scanf_float+0x1a4>
 8017a9e:	f1bb 0f02 	cmp.w	fp, #2
 8017aa2:	f47f af55 	bne.w	8017950 <_scanf_float+0x70>
 8017aa6:	f04f 0b03 	mov.w	fp, #3
 8017aaa:	e7da      	b.n	8017a62 <_scanf_float+0x182>
 8017aac:	f1bb 0f06 	cmp.w	fp, #6
 8017ab0:	f47f af4e 	bne.w	8017950 <_scanf_float+0x70>
 8017ab4:	f04f 0b07 	mov.w	fp, #7
 8017ab8:	e7d3      	b.n	8017a62 <_scanf_float+0x182>
 8017aba:	6821      	ldr	r1, [r4, #0]
 8017abc:	0588      	lsls	r0, r1, #22
 8017abe:	f57f af47 	bpl.w	8017950 <_scanf_float+0x70>
 8017ac2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017ac6:	6021      	str	r1, [r4, #0]
 8017ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017acc:	e7c9      	b.n	8017a62 <_scanf_float+0x182>
 8017ace:	6821      	ldr	r1, [r4, #0]
 8017ad0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017ad4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017ad8:	d006      	beq.n	8017ae8 <_scanf_float+0x208>
 8017ada:	0548      	lsls	r0, r1, #21
 8017adc:	f57f af38 	bpl.w	8017950 <_scanf_float+0x70>
 8017ae0:	f1b9 0f00 	cmp.w	r9, #0
 8017ae4:	f43f af3b 	beq.w	801795e <_scanf_float+0x7e>
 8017ae8:	0588      	lsls	r0, r1, #22
 8017aea:	bf58      	it	pl
 8017aec:	9802      	ldrpl	r0, [sp, #8]
 8017aee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017af2:	bf58      	it	pl
 8017af4:	eba9 0000 	subpl.w	r0, r9, r0
 8017af8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017afc:	bf58      	it	pl
 8017afe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017b02:	6021      	str	r1, [r4, #0]
 8017b04:	f04f 0900 	mov.w	r9, #0
 8017b08:	e7ab      	b.n	8017a62 <_scanf_float+0x182>
 8017b0a:	2203      	movs	r2, #3
 8017b0c:	e7a9      	b.n	8017a62 <_scanf_float+0x182>
 8017b0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b12:	9205      	str	r2, [sp, #20]
 8017b14:	4631      	mov	r1, r6
 8017b16:	4638      	mov	r0, r7
 8017b18:	4798      	blx	r3
 8017b1a:	9a05      	ldr	r2, [sp, #20]
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	f43f af04 	beq.w	801792a <_scanf_float+0x4a>
 8017b22:	e715      	b.n	8017950 <_scanf_float+0x70>
 8017b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017b2c:	4632      	mov	r2, r6
 8017b2e:	4638      	mov	r0, r7
 8017b30:	4798      	blx	r3
 8017b32:	6923      	ldr	r3, [r4, #16]
 8017b34:	3b01      	subs	r3, #1
 8017b36:	6123      	str	r3, [r4, #16]
 8017b38:	e715      	b.n	8017966 <_scanf_float+0x86>
 8017b3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017b3e:	2b06      	cmp	r3, #6
 8017b40:	d80a      	bhi.n	8017b58 <_scanf_float+0x278>
 8017b42:	f1bb 0f02 	cmp.w	fp, #2
 8017b46:	d968      	bls.n	8017c1a <_scanf_float+0x33a>
 8017b48:	f1ab 0b03 	sub.w	fp, fp, #3
 8017b4c:	fa5f fb8b 	uxtb.w	fp, fp
 8017b50:	eba5 0b0b 	sub.w	fp, r5, fp
 8017b54:	455d      	cmp	r5, fp
 8017b56:	d14b      	bne.n	8017bf0 <_scanf_float+0x310>
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	05da      	lsls	r2, r3, #23
 8017b5c:	d51f      	bpl.n	8017b9e <_scanf_float+0x2be>
 8017b5e:	055b      	lsls	r3, r3, #21
 8017b60:	d468      	bmi.n	8017c34 <_scanf_float+0x354>
 8017b62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017b66:	6923      	ldr	r3, [r4, #16]
 8017b68:	2965      	cmp	r1, #101	; 0x65
 8017b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017b6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8017b72:	6123      	str	r3, [r4, #16]
 8017b74:	d00d      	beq.n	8017b92 <_scanf_float+0x2b2>
 8017b76:	2945      	cmp	r1, #69	; 0x45
 8017b78:	d00b      	beq.n	8017b92 <_scanf_float+0x2b2>
 8017b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b7e:	4632      	mov	r2, r6
 8017b80:	4638      	mov	r0, r7
 8017b82:	4798      	blx	r3
 8017b84:	6923      	ldr	r3, [r4, #16]
 8017b86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8017b8a:	3b01      	subs	r3, #1
 8017b8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8017b90:	6123      	str	r3, [r4, #16]
 8017b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b96:	4632      	mov	r2, r6
 8017b98:	4638      	mov	r0, r7
 8017b9a:	4798      	blx	r3
 8017b9c:	465d      	mov	r5, fp
 8017b9e:	6826      	ldr	r6, [r4, #0]
 8017ba0:	f016 0610 	ands.w	r6, r6, #16
 8017ba4:	d17a      	bne.n	8017c9c <_scanf_float+0x3bc>
 8017ba6:	702e      	strb	r6, [r5, #0]
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017bb2:	d142      	bne.n	8017c3a <_scanf_float+0x35a>
 8017bb4:	9b02      	ldr	r3, [sp, #8]
 8017bb6:	eba9 0303 	sub.w	r3, r9, r3
 8017bba:	425a      	negs	r2, r3
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d149      	bne.n	8017c54 <_scanf_float+0x374>
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	4641      	mov	r1, r8
 8017bc4:	4638      	mov	r0, r7
 8017bc6:	f000 feff 	bl	80189c8 <_strtod_r>
 8017bca:	6825      	ldr	r5, [r4, #0]
 8017bcc:	f8da 3000 	ldr.w	r3, [sl]
 8017bd0:	f015 0f02 	tst.w	r5, #2
 8017bd4:	f103 0204 	add.w	r2, r3, #4
 8017bd8:	ec59 8b10 	vmov	r8, r9, d0
 8017bdc:	f8ca 2000 	str.w	r2, [sl]
 8017be0:	d043      	beq.n	8017c6a <_scanf_float+0x38a>
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	e9c3 8900 	strd	r8, r9, [r3]
 8017be8:	68e3      	ldr	r3, [r4, #12]
 8017bea:	3301      	adds	r3, #1
 8017bec:	60e3      	str	r3, [r4, #12]
 8017bee:	e6be      	b.n	801796e <_scanf_float+0x8e>
 8017bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bf4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017bf8:	4632      	mov	r2, r6
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	4798      	blx	r3
 8017bfe:	6923      	ldr	r3, [r4, #16]
 8017c00:	3b01      	subs	r3, #1
 8017c02:	6123      	str	r3, [r4, #16]
 8017c04:	e7a6      	b.n	8017b54 <_scanf_float+0x274>
 8017c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017c0e:	4632      	mov	r2, r6
 8017c10:	4638      	mov	r0, r7
 8017c12:	4798      	blx	r3
 8017c14:	6923      	ldr	r3, [r4, #16]
 8017c16:	3b01      	subs	r3, #1
 8017c18:	6123      	str	r3, [r4, #16]
 8017c1a:	4545      	cmp	r5, r8
 8017c1c:	d8f3      	bhi.n	8017c06 <_scanf_float+0x326>
 8017c1e:	e6a5      	b.n	801796c <_scanf_float+0x8c>
 8017c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017c28:	4632      	mov	r2, r6
 8017c2a:	4638      	mov	r0, r7
 8017c2c:	4798      	blx	r3
 8017c2e:	6923      	ldr	r3, [r4, #16]
 8017c30:	3b01      	subs	r3, #1
 8017c32:	6123      	str	r3, [r4, #16]
 8017c34:	4545      	cmp	r5, r8
 8017c36:	d8f3      	bhi.n	8017c20 <_scanf_float+0x340>
 8017c38:	e698      	b.n	801796c <_scanf_float+0x8c>
 8017c3a:	9b03      	ldr	r3, [sp, #12]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d0bf      	beq.n	8017bc0 <_scanf_float+0x2e0>
 8017c40:	9904      	ldr	r1, [sp, #16]
 8017c42:	230a      	movs	r3, #10
 8017c44:	4632      	mov	r2, r6
 8017c46:	3101      	adds	r1, #1
 8017c48:	4638      	mov	r0, r7
 8017c4a:	f000 ff5d 	bl	8018b08 <_strtol_r>
 8017c4e:	9b03      	ldr	r3, [sp, #12]
 8017c50:	9d04      	ldr	r5, [sp, #16]
 8017c52:	1ac2      	subs	r2, r0, r3
 8017c54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017c58:	429d      	cmp	r5, r3
 8017c5a:	bf28      	it	cs
 8017c5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8017c60:	490f      	ldr	r1, [pc, #60]	; (8017ca0 <_scanf_float+0x3c0>)
 8017c62:	4628      	mov	r0, r5
 8017c64:	f000 f834 	bl	8017cd0 <siprintf>
 8017c68:	e7aa      	b.n	8017bc0 <_scanf_float+0x2e0>
 8017c6a:	f015 0504 	ands.w	r5, r5, #4
 8017c6e:	d1b8      	bne.n	8017be2 <_scanf_float+0x302>
 8017c70:	681f      	ldr	r7, [r3, #0]
 8017c72:	ee10 2a10 	vmov	r2, s0
 8017c76:	464b      	mov	r3, r9
 8017c78:	ee10 0a10 	vmov	r0, s0
 8017c7c:	4649      	mov	r1, r9
 8017c7e:	f7e8 ff65 	bl	8000b4c <__aeabi_dcmpun>
 8017c82:	b128      	cbz	r0, 8017c90 <_scanf_float+0x3b0>
 8017c84:	4628      	mov	r0, r5
 8017c86:	f000 f81d 	bl	8017cc4 <nanf>
 8017c8a:	ed87 0a00 	vstr	s0, [r7]
 8017c8e:	e7ab      	b.n	8017be8 <_scanf_float+0x308>
 8017c90:	4640      	mov	r0, r8
 8017c92:	4649      	mov	r1, r9
 8017c94:	f7e8 ffb8 	bl	8000c08 <__aeabi_d2f>
 8017c98:	6038      	str	r0, [r7, #0]
 8017c9a:	e7a5      	b.n	8017be8 <_scanf_float+0x308>
 8017c9c:	2600      	movs	r6, #0
 8017c9e:	e666      	b.n	801796e <_scanf_float+0x8e>
 8017ca0:	0801e490 	.word	0x0801e490

08017ca4 <_sbrk_r>:
 8017ca4:	b538      	push	{r3, r4, r5, lr}
 8017ca6:	4c06      	ldr	r4, [pc, #24]	; (8017cc0 <_sbrk_r+0x1c>)
 8017ca8:	2300      	movs	r3, #0
 8017caa:	4605      	mov	r5, r0
 8017cac:	4608      	mov	r0, r1
 8017cae:	6023      	str	r3, [r4, #0]
 8017cb0:	f7fe fb04 	bl	80162bc <_sbrk>
 8017cb4:	1c43      	adds	r3, r0, #1
 8017cb6:	d102      	bne.n	8017cbe <_sbrk_r+0x1a>
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	b103      	cbz	r3, 8017cbe <_sbrk_r+0x1a>
 8017cbc:	602b      	str	r3, [r5, #0]
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}
 8017cc0:	2000b2e4 	.word	0x2000b2e4

08017cc4 <nanf>:
 8017cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017ccc <nanf+0x8>
 8017cc8:	4770      	bx	lr
 8017cca:	bf00      	nop
 8017ccc:	7fc00000 	.word	0x7fc00000

08017cd0 <siprintf>:
 8017cd0:	b40e      	push	{r1, r2, r3}
 8017cd2:	b500      	push	{lr}
 8017cd4:	b09c      	sub	sp, #112	; 0x70
 8017cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8017cd8:	9002      	str	r0, [sp, #8]
 8017cda:	9006      	str	r0, [sp, #24]
 8017cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ce0:	4809      	ldr	r0, [pc, #36]	; (8017d08 <siprintf+0x38>)
 8017ce2:	9107      	str	r1, [sp, #28]
 8017ce4:	9104      	str	r1, [sp, #16]
 8017ce6:	4909      	ldr	r1, [pc, #36]	; (8017d0c <siprintf+0x3c>)
 8017ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cec:	9105      	str	r1, [sp, #20]
 8017cee:	6800      	ldr	r0, [r0, #0]
 8017cf0:	9301      	str	r3, [sp, #4]
 8017cf2:	a902      	add	r1, sp, #8
 8017cf4:	f002 fd4a 	bl	801a78c <_svfiprintf_r>
 8017cf8:	9b02      	ldr	r3, [sp, #8]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	701a      	strb	r2, [r3, #0]
 8017cfe:	b01c      	add	sp, #112	; 0x70
 8017d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d04:	b003      	add	sp, #12
 8017d06:	4770      	bx	lr
 8017d08:	200001d4 	.word	0x200001d4
 8017d0c:	ffff0208 	.word	0xffff0208

08017d10 <strcat>:
 8017d10:	b510      	push	{r4, lr}
 8017d12:	4603      	mov	r3, r0
 8017d14:	781a      	ldrb	r2, [r3, #0]
 8017d16:	1c5c      	adds	r4, r3, #1
 8017d18:	b93a      	cbnz	r2, 8017d2a <strcat+0x1a>
 8017d1a:	3b01      	subs	r3, #1
 8017d1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d24:	2a00      	cmp	r2, #0
 8017d26:	d1f9      	bne.n	8017d1c <strcat+0xc>
 8017d28:	bd10      	pop	{r4, pc}
 8017d2a:	4623      	mov	r3, r4
 8017d2c:	e7f2      	b.n	8017d14 <strcat+0x4>

08017d2e <strchr>:
 8017d2e:	b2c9      	uxtb	r1, r1
 8017d30:	4603      	mov	r3, r0
 8017d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d36:	b11a      	cbz	r2, 8017d40 <strchr+0x12>
 8017d38:	428a      	cmp	r2, r1
 8017d3a:	d1f9      	bne.n	8017d30 <strchr+0x2>
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	4770      	bx	lr
 8017d40:	2900      	cmp	r1, #0
 8017d42:	bf18      	it	ne
 8017d44:	2300      	movne	r3, #0
 8017d46:	e7f9      	b.n	8017d3c <strchr+0xe>

08017d48 <strcpy>:
 8017d48:	4603      	mov	r3, r0
 8017d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d4e:	f803 2b01 	strb.w	r2, [r3], #1
 8017d52:	2a00      	cmp	r2, #0
 8017d54:	d1f9      	bne.n	8017d4a <strcpy+0x2>
 8017d56:	4770      	bx	lr

08017d58 <strncmp>:
 8017d58:	b510      	push	{r4, lr}
 8017d5a:	b16a      	cbz	r2, 8017d78 <strncmp+0x20>
 8017d5c:	3901      	subs	r1, #1
 8017d5e:	1884      	adds	r4, r0, r2
 8017d60:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017d64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017d68:	4293      	cmp	r3, r2
 8017d6a:	d103      	bne.n	8017d74 <strncmp+0x1c>
 8017d6c:	42a0      	cmp	r0, r4
 8017d6e:	d001      	beq.n	8017d74 <strncmp+0x1c>
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d1f5      	bne.n	8017d60 <strncmp+0x8>
 8017d74:	1a98      	subs	r0, r3, r2
 8017d76:	bd10      	pop	{r4, pc}
 8017d78:	4610      	mov	r0, r2
 8017d7a:	e7fc      	b.n	8017d76 <strncmp+0x1e>

08017d7c <strncpy>:
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	3901      	subs	r1, #1
 8017d80:	4604      	mov	r4, r0
 8017d82:	b902      	cbnz	r2, 8017d86 <strncpy+0xa>
 8017d84:	bd70      	pop	{r4, r5, r6, pc}
 8017d86:	4623      	mov	r3, r4
 8017d88:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017d8c:	f803 5b01 	strb.w	r5, [r3], #1
 8017d90:	1e56      	subs	r6, r2, #1
 8017d92:	b92d      	cbnz	r5, 8017da0 <strncpy+0x24>
 8017d94:	4414      	add	r4, r2
 8017d96:	42a3      	cmp	r3, r4
 8017d98:	d0f4      	beq.n	8017d84 <strncpy+0x8>
 8017d9a:	f803 5b01 	strb.w	r5, [r3], #1
 8017d9e:	e7fa      	b.n	8017d96 <strncpy+0x1a>
 8017da0:	461c      	mov	r4, r3
 8017da2:	4632      	mov	r2, r6
 8017da4:	e7ed      	b.n	8017d82 <strncpy+0x6>

08017da6 <sulp>:
 8017da6:	b570      	push	{r4, r5, r6, lr}
 8017da8:	4604      	mov	r4, r0
 8017daa:	460d      	mov	r5, r1
 8017dac:	ec45 4b10 	vmov	d0, r4, r5
 8017db0:	4616      	mov	r6, r2
 8017db2:	f002 fb4f 	bl	801a454 <__ulp>
 8017db6:	ec51 0b10 	vmov	r0, r1, d0
 8017dba:	b17e      	cbz	r6, 8017ddc <sulp+0x36>
 8017dbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017dc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	dd09      	ble.n	8017ddc <sulp+0x36>
 8017dc8:	051b      	lsls	r3, r3, #20
 8017dca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017dce:	2400      	movs	r4, #0
 8017dd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017dd4:	4622      	mov	r2, r4
 8017dd6:	462b      	mov	r3, r5
 8017dd8:	f7e8 fc1e 	bl	8000618 <__aeabi_dmul>
 8017ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08017de0 <_strtod_l>:
 8017de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de4:	461f      	mov	r7, r3
 8017de6:	b0a1      	sub	sp, #132	; 0x84
 8017de8:	2300      	movs	r3, #0
 8017dea:	4681      	mov	r9, r0
 8017dec:	4638      	mov	r0, r7
 8017dee:	460e      	mov	r6, r1
 8017df0:	9217      	str	r2, [sp, #92]	; 0x5c
 8017df2:	931c      	str	r3, [sp, #112]	; 0x70
 8017df4:	f002 f83d 	bl	8019e72 <__localeconv_l>
 8017df8:	4680      	mov	r8, r0
 8017dfa:	6800      	ldr	r0, [r0, #0]
 8017dfc:	f7e8 f9f2 	bl	80001e4 <strlen>
 8017e00:	f04f 0a00 	mov.w	sl, #0
 8017e04:	4604      	mov	r4, r0
 8017e06:	f04f 0b00 	mov.w	fp, #0
 8017e0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8017e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e0e:	781a      	ldrb	r2, [r3, #0]
 8017e10:	2a0d      	cmp	r2, #13
 8017e12:	d832      	bhi.n	8017e7a <_strtod_l+0x9a>
 8017e14:	2a09      	cmp	r2, #9
 8017e16:	d236      	bcs.n	8017e86 <_strtod_l+0xa6>
 8017e18:	2a00      	cmp	r2, #0
 8017e1a:	d03e      	beq.n	8017e9a <_strtod_l+0xba>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8017e20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017e22:	782b      	ldrb	r3, [r5, #0]
 8017e24:	2b30      	cmp	r3, #48	; 0x30
 8017e26:	f040 80ac 	bne.w	8017f82 <_strtod_l+0x1a2>
 8017e2a:	786b      	ldrb	r3, [r5, #1]
 8017e2c:	2b58      	cmp	r3, #88	; 0x58
 8017e2e:	d001      	beq.n	8017e34 <_strtod_l+0x54>
 8017e30:	2b78      	cmp	r3, #120	; 0x78
 8017e32:	d167      	bne.n	8017f04 <_strtod_l+0x124>
 8017e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e36:	9301      	str	r3, [sp, #4]
 8017e38:	ab1c      	add	r3, sp, #112	; 0x70
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	9702      	str	r7, [sp, #8]
 8017e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8017e40:	4a88      	ldr	r2, [pc, #544]	; (8018064 <_strtod_l+0x284>)
 8017e42:	a91b      	add	r1, sp, #108	; 0x6c
 8017e44:	4648      	mov	r0, r9
 8017e46:	f001 fd3a 	bl	80198be <__gethex>
 8017e4a:	f010 0407 	ands.w	r4, r0, #7
 8017e4e:	4606      	mov	r6, r0
 8017e50:	d005      	beq.n	8017e5e <_strtod_l+0x7e>
 8017e52:	2c06      	cmp	r4, #6
 8017e54:	d12b      	bne.n	8017eae <_strtod_l+0xce>
 8017e56:	3501      	adds	r5, #1
 8017e58:	2300      	movs	r3, #0
 8017e5a:	951b      	str	r5, [sp, #108]	; 0x6c
 8017e5c:	930d      	str	r3, [sp, #52]	; 0x34
 8017e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f040 859a 	bne.w	801899a <_strtod_l+0xbba>
 8017e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e68:	b1e3      	cbz	r3, 8017ea4 <_strtod_l+0xc4>
 8017e6a:	4652      	mov	r2, sl
 8017e6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017e70:	ec43 2b10 	vmov	d0, r2, r3
 8017e74:	b021      	add	sp, #132	; 0x84
 8017e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7a:	2a2b      	cmp	r2, #43	; 0x2b
 8017e7c:	d015      	beq.n	8017eaa <_strtod_l+0xca>
 8017e7e:	2a2d      	cmp	r2, #45	; 0x2d
 8017e80:	d004      	beq.n	8017e8c <_strtod_l+0xac>
 8017e82:	2a20      	cmp	r2, #32
 8017e84:	d1ca      	bne.n	8017e1c <_strtod_l+0x3c>
 8017e86:	3301      	adds	r3, #1
 8017e88:	931b      	str	r3, [sp, #108]	; 0x6c
 8017e8a:	e7bf      	b.n	8017e0c <_strtod_l+0x2c>
 8017e8c:	2201      	movs	r2, #1
 8017e8e:	920d      	str	r2, [sp, #52]	; 0x34
 8017e90:	1c5a      	adds	r2, r3, #1
 8017e92:	921b      	str	r2, [sp, #108]	; 0x6c
 8017e94:	785b      	ldrb	r3, [r3, #1]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d1c2      	bne.n	8017e20 <_strtod_l+0x40>
 8017e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017e9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	f040 8579 	bne.w	8018996 <_strtod_l+0xbb6>
 8017ea4:	4652      	mov	r2, sl
 8017ea6:	465b      	mov	r3, fp
 8017ea8:	e7e2      	b.n	8017e70 <_strtod_l+0x90>
 8017eaa:	2200      	movs	r2, #0
 8017eac:	e7ef      	b.n	8017e8e <_strtod_l+0xae>
 8017eae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017eb0:	b13a      	cbz	r2, 8017ec2 <_strtod_l+0xe2>
 8017eb2:	2135      	movs	r1, #53	; 0x35
 8017eb4:	a81e      	add	r0, sp, #120	; 0x78
 8017eb6:	f002 fbc5 	bl	801a644 <__copybits>
 8017eba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017ebc:	4648      	mov	r0, r9
 8017ebe:	f002 f831 	bl	8019f24 <_Bfree>
 8017ec2:	3c01      	subs	r4, #1
 8017ec4:	2c04      	cmp	r4, #4
 8017ec6:	d806      	bhi.n	8017ed6 <_strtod_l+0xf6>
 8017ec8:	e8df f004 	tbb	[pc, r4]
 8017ecc:	1714030a 	.word	0x1714030a
 8017ed0:	0a          	.byte	0x0a
 8017ed1:	00          	.byte	0x00
 8017ed2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8017ed6:	0730      	lsls	r0, r6, #28
 8017ed8:	d5c1      	bpl.n	8017e5e <_strtod_l+0x7e>
 8017eda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017ede:	e7be      	b.n	8017e5e <_strtod_l+0x7e>
 8017ee0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8017ee4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017ee6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017eea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017eee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017ef2:	e7f0      	b.n	8017ed6 <_strtod_l+0xf6>
 8017ef4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018068 <_strtod_l+0x288>
 8017ef8:	e7ed      	b.n	8017ed6 <_strtod_l+0xf6>
 8017efa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017efe:	f04f 3aff 	mov.w	sl, #4294967295
 8017f02:	e7e8      	b.n	8017ed6 <_strtod_l+0xf6>
 8017f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f06:	1c5a      	adds	r2, r3, #1
 8017f08:	921b      	str	r2, [sp, #108]	; 0x6c
 8017f0a:	785b      	ldrb	r3, [r3, #1]
 8017f0c:	2b30      	cmp	r3, #48	; 0x30
 8017f0e:	d0f9      	beq.n	8017f04 <_strtod_l+0x124>
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d0a4      	beq.n	8017e5e <_strtod_l+0x7e>
 8017f14:	2301      	movs	r3, #1
 8017f16:	2500      	movs	r5, #0
 8017f18:	9306      	str	r3, [sp, #24]
 8017f1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f1c:	9308      	str	r3, [sp, #32]
 8017f1e:	9507      	str	r5, [sp, #28]
 8017f20:	9505      	str	r5, [sp, #20]
 8017f22:	220a      	movs	r2, #10
 8017f24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017f26:	7807      	ldrb	r7, [r0, #0]
 8017f28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017f2c:	b2d9      	uxtb	r1, r3
 8017f2e:	2909      	cmp	r1, #9
 8017f30:	d929      	bls.n	8017f86 <_strtod_l+0x1a6>
 8017f32:	4622      	mov	r2, r4
 8017f34:	f8d8 1000 	ldr.w	r1, [r8]
 8017f38:	f7ff ff0e 	bl	8017d58 <strncmp>
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	d031      	beq.n	8017fa4 <_strtod_l+0x1c4>
 8017f40:	2000      	movs	r0, #0
 8017f42:	9c05      	ldr	r4, [sp, #20]
 8017f44:	9004      	str	r0, [sp, #16]
 8017f46:	463b      	mov	r3, r7
 8017f48:	4602      	mov	r2, r0
 8017f4a:	2b65      	cmp	r3, #101	; 0x65
 8017f4c:	d001      	beq.n	8017f52 <_strtod_l+0x172>
 8017f4e:	2b45      	cmp	r3, #69	; 0x45
 8017f50:	d114      	bne.n	8017f7c <_strtod_l+0x19c>
 8017f52:	b924      	cbnz	r4, 8017f5e <_strtod_l+0x17e>
 8017f54:	b910      	cbnz	r0, 8017f5c <_strtod_l+0x17c>
 8017f56:	9b06      	ldr	r3, [sp, #24]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d09e      	beq.n	8017e9a <_strtod_l+0xba>
 8017f5c:	2400      	movs	r4, #0
 8017f5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017f60:	1c73      	adds	r3, r6, #1
 8017f62:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f64:	7873      	ldrb	r3, [r6, #1]
 8017f66:	2b2b      	cmp	r3, #43	; 0x2b
 8017f68:	d078      	beq.n	801805c <_strtod_l+0x27c>
 8017f6a:	2b2d      	cmp	r3, #45	; 0x2d
 8017f6c:	d070      	beq.n	8018050 <_strtod_l+0x270>
 8017f6e:	f04f 0c00 	mov.w	ip, #0
 8017f72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8017f76:	2f09      	cmp	r7, #9
 8017f78:	d97c      	bls.n	8018074 <_strtod_l+0x294>
 8017f7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8017f7c:	f04f 0e00 	mov.w	lr, #0
 8017f80:	e09a      	b.n	80180b8 <_strtod_l+0x2d8>
 8017f82:	2300      	movs	r3, #0
 8017f84:	e7c7      	b.n	8017f16 <_strtod_l+0x136>
 8017f86:	9905      	ldr	r1, [sp, #20]
 8017f88:	2908      	cmp	r1, #8
 8017f8a:	bfdd      	ittte	le
 8017f8c:	9907      	ldrle	r1, [sp, #28]
 8017f8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8017f92:	9307      	strle	r3, [sp, #28]
 8017f94:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017f98:	9b05      	ldr	r3, [sp, #20]
 8017f9a:	3001      	adds	r0, #1
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	9305      	str	r3, [sp, #20]
 8017fa0:	901b      	str	r0, [sp, #108]	; 0x6c
 8017fa2:	e7bf      	b.n	8017f24 <_strtod_l+0x144>
 8017fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017fa6:	191a      	adds	r2, r3, r4
 8017fa8:	921b      	str	r2, [sp, #108]	; 0x6c
 8017faa:	9a05      	ldr	r2, [sp, #20]
 8017fac:	5d1b      	ldrb	r3, [r3, r4]
 8017fae:	2a00      	cmp	r2, #0
 8017fb0:	d037      	beq.n	8018022 <_strtod_l+0x242>
 8017fb2:	9c05      	ldr	r4, [sp, #20]
 8017fb4:	4602      	mov	r2, r0
 8017fb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017fba:	2909      	cmp	r1, #9
 8017fbc:	d913      	bls.n	8017fe6 <_strtod_l+0x206>
 8017fbe:	2101      	movs	r1, #1
 8017fc0:	9104      	str	r1, [sp, #16]
 8017fc2:	e7c2      	b.n	8017f4a <_strtod_l+0x16a>
 8017fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017fc6:	1c5a      	adds	r2, r3, #1
 8017fc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8017fca:	785b      	ldrb	r3, [r3, #1]
 8017fcc:	3001      	adds	r0, #1
 8017fce:	2b30      	cmp	r3, #48	; 0x30
 8017fd0:	d0f8      	beq.n	8017fc4 <_strtod_l+0x1e4>
 8017fd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017fd6:	2a08      	cmp	r2, #8
 8017fd8:	f200 84e4 	bhi.w	80189a4 <_strtod_l+0xbc4>
 8017fdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017fde:	9208      	str	r2, [sp, #32]
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	2000      	movs	r0, #0
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017fea:	f100 0101 	add.w	r1, r0, #1
 8017fee:	d012      	beq.n	8018016 <_strtod_l+0x236>
 8017ff0:	440a      	add	r2, r1
 8017ff2:	eb00 0c04 	add.w	ip, r0, r4
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	270a      	movs	r7, #10
 8017ffa:	458c      	cmp	ip, r1
 8017ffc:	d113      	bne.n	8018026 <_strtod_l+0x246>
 8017ffe:	1821      	adds	r1, r4, r0
 8018000:	2908      	cmp	r1, #8
 8018002:	f104 0401 	add.w	r4, r4, #1
 8018006:	4404      	add	r4, r0
 8018008:	dc19      	bgt.n	801803e <_strtod_l+0x25e>
 801800a:	9b07      	ldr	r3, [sp, #28]
 801800c:	210a      	movs	r1, #10
 801800e:	fb01 e303 	mla	r3, r1, r3, lr
 8018012:	9307      	str	r3, [sp, #28]
 8018014:	2100      	movs	r1, #0
 8018016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018018:	1c58      	adds	r0, r3, #1
 801801a:	901b      	str	r0, [sp, #108]	; 0x6c
 801801c:	785b      	ldrb	r3, [r3, #1]
 801801e:	4608      	mov	r0, r1
 8018020:	e7c9      	b.n	8017fb6 <_strtod_l+0x1d6>
 8018022:	9805      	ldr	r0, [sp, #20]
 8018024:	e7d3      	b.n	8017fce <_strtod_l+0x1ee>
 8018026:	2908      	cmp	r1, #8
 8018028:	f101 0101 	add.w	r1, r1, #1
 801802c:	dc03      	bgt.n	8018036 <_strtod_l+0x256>
 801802e:	9b07      	ldr	r3, [sp, #28]
 8018030:	437b      	muls	r3, r7
 8018032:	9307      	str	r3, [sp, #28]
 8018034:	e7e1      	b.n	8017ffa <_strtod_l+0x21a>
 8018036:	2910      	cmp	r1, #16
 8018038:	bfd8      	it	le
 801803a:	437d      	mulle	r5, r7
 801803c:	e7dd      	b.n	8017ffa <_strtod_l+0x21a>
 801803e:	2c10      	cmp	r4, #16
 8018040:	bfdc      	itt	le
 8018042:	210a      	movle	r1, #10
 8018044:	fb01 e505 	mlale	r5, r1, r5, lr
 8018048:	e7e4      	b.n	8018014 <_strtod_l+0x234>
 801804a:	2301      	movs	r3, #1
 801804c:	9304      	str	r3, [sp, #16]
 801804e:	e781      	b.n	8017f54 <_strtod_l+0x174>
 8018050:	f04f 0c01 	mov.w	ip, #1
 8018054:	1cb3      	adds	r3, r6, #2
 8018056:	931b      	str	r3, [sp, #108]	; 0x6c
 8018058:	78b3      	ldrb	r3, [r6, #2]
 801805a:	e78a      	b.n	8017f72 <_strtod_l+0x192>
 801805c:	f04f 0c00 	mov.w	ip, #0
 8018060:	e7f8      	b.n	8018054 <_strtod_l+0x274>
 8018062:	bf00      	nop
 8018064:	0801e498 	.word	0x0801e498
 8018068:	7ff00000 	.word	0x7ff00000
 801806c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801806e:	1c5f      	adds	r7, r3, #1
 8018070:	971b      	str	r7, [sp, #108]	; 0x6c
 8018072:	785b      	ldrb	r3, [r3, #1]
 8018074:	2b30      	cmp	r3, #48	; 0x30
 8018076:	d0f9      	beq.n	801806c <_strtod_l+0x28c>
 8018078:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801807c:	2f08      	cmp	r7, #8
 801807e:	f63f af7d 	bhi.w	8017f7c <_strtod_l+0x19c>
 8018082:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018088:	930a      	str	r3, [sp, #40]	; 0x28
 801808a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801808c:	1c5f      	adds	r7, r3, #1
 801808e:	971b      	str	r7, [sp, #108]	; 0x6c
 8018090:	785b      	ldrb	r3, [r3, #1]
 8018092:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8018096:	f1b8 0f09 	cmp.w	r8, #9
 801809a:	d937      	bls.n	801810c <_strtod_l+0x32c>
 801809c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801809e:	1a7f      	subs	r7, r7, r1
 80180a0:	2f08      	cmp	r7, #8
 80180a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80180a6:	dc37      	bgt.n	8018118 <_strtod_l+0x338>
 80180a8:	45be      	cmp	lr, r7
 80180aa:	bfa8      	it	ge
 80180ac:	46be      	movge	lr, r7
 80180ae:	f1bc 0f00 	cmp.w	ip, #0
 80180b2:	d001      	beq.n	80180b8 <_strtod_l+0x2d8>
 80180b4:	f1ce 0e00 	rsb	lr, lr, #0
 80180b8:	2c00      	cmp	r4, #0
 80180ba:	d151      	bne.n	8018160 <_strtod_l+0x380>
 80180bc:	2800      	cmp	r0, #0
 80180be:	f47f aece 	bne.w	8017e5e <_strtod_l+0x7e>
 80180c2:	9a06      	ldr	r2, [sp, #24]
 80180c4:	2a00      	cmp	r2, #0
 80180c6:	f47f aeca 	bne.w	8017e5e <_strtod_l+0x7e>
 80180ca:	9a04      	ldr	r2, [sp, #16]
 80180cc:	2a00      	cmp	r2, #0
 80180ce:	f47f aee4 	bne.w	8017e9a <_strtod_l+0xba>
 80180d2:	2b4e      	cmp	r3, #78	; 0x4e
 80180d4:	d027      	beq.n	8018126 <_strtod_l+0x346>
 80180d6:	dc21      	bgt.n	801811c <_strtod_l+0x33c>
 80180d8:	2b49      	cmp	r3, #73	; 0x49
 80180da:	f47f aede 	bne.w	8017e9a <_strtod_l+0xba>
 80180de:	49a0      	ldr	r1, [pc, #640]	; (8018360 <_strtod_l+0x580>)
 80180e0:	a81b      	add	r0, sp, #108	; 0x6c
 80180e2:	f001 fe1f 	bl	8019d24 <__match>
 80180e6:	2800      	cmp	r0, #0
 80180e8:	f43f aed7 	beq.w	8017e9a <_strtod_l+0xba>
 80180ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80180ee:	499d      	ldr	r1, [pc, #628]	; (8018364 <_strtod_l+0x584>)
 80180f0:	3b01      	subs	r3, #1
 80180f2:	a81b      	add	r0, sp, #108	; 0x6c
 80180f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80180f6:	f001 fe15 	bl	8019d24 <__match>
 80180fa:	b910      	cbnz	r0, 8018102 <_strtod_l+0x322>
 80180fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80180fe:	3301      	adds	r3, #1
 8018100:	931b      	str	r3, [sp, #108]	; 0x6c
 8018102:	f8df b274 	ldr.w	fp, [pc, #628]	; 8018378 <_strtod_l+0x598>
 8018106:	f04f 0a00 	mov.w	sl, #0
 801810a:	e6a8      	b.n	8017e5e <_strtod_l+0x7e>
 801810c:	210a      	movs	r1, #10
 801810e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018112:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018116:	e7b8      	b.n	801808a <_strtod_l+0x2aa>
 8018118:	46be      	mov	lr, r7
 801811a:	e7c8      	b.n	80180ae <_strtod_l+0x2ce>
 801811c:	2b69      	cmp	r3, #105	; 0x69
 801811e:	d0de      	beq.n	80180de <_strtod_l+0x2fe>
 8018120:	2b6e      	cmp	r3, #110	; 0x6e
 8018122:	f47f aeba 	bne.w	8017e9a <_strtod_l+0xba>
 8018126:	4990      	ldr	r1, [pc, #576]	; (8018368 <_strtod_l+0x588>)
 8018128:	a81b      	add	r0, sp, #108	; 0x6c
 801812a:	f001 fdfb 	bl	8019d24 <__match>
 801812e:	2800      	cmp	r0, #0
 8018130:	f43f aeb3 	beq.w	8017e9a <_strtod_l+0xba>
 8018134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	2b28      	cmp	r3, #40	; 0x28
 801813a:	d10e      	bne.n	801815a <_strtod_l+0x37a>
 801813c:	aa1e      	add	r2, sp, #120	; 0x78
 801813e:	498b      	ldr	r1, [pc, #556]	; (801836c <_strtod_l+0x58c>)
 8018140:	a81b      	add	r0, sp, #108	; 0x6c
 8018142:	f001 fe03 	bl	8019d4c <__hexnan>
 8018146:	2805      	cmp	r0, #5
 8018148:	d107      	bne.n	801815a <_strtod_l+0x37a>
 801814a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801814c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8018150:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018154:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018158:	e681      	b.n	8017e5e <_strtod_l+0x7e>
 801815a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8018380 <_strtod_l+0x5a0>
 801815e:	e7d2      	b.n	8018106 <_strtod_l+0x326>
 8018160:	ebae 0302 	sub.w	r3, lr, r2
 8018164:	9306      	str	r3, [sp, #24]
 8018166:	9b05      	ldr	r3, [sp, #20]
 8018168:	9807      	ldr	r0, [sp, #28]
 801816a:	2b00      	cmp	r3, #0
 801816c:	bf08      	it	eq
 801816e:	4623      	moveq	r3, r4
 8018170:	2c10      	cmp	r4, #16
 8018172:	9305      	str	r3, [sp, #20]
 8018174:	46a0      	mov	r8, r4
 8018176:	bfa8      	it	ge
 8018178:	f04f 0810 	movge.w	r8, #16
 801817c:	f7e8 f9d2 	bl	8000524 <__aeabi_ui2d>
 8018180:	2c09      	cmp	r4, #9
 8018182:	4682      	mov	sl, r0
 8018184:	468b      	mov	fp, r1
 8018186:	dc13      	bgt.n	80181b0 <_strtod_l+0x3d0>
 8018188:	9b06      	ldr	r3, [sp, #24]
 801818a:	2b00      	cmp	r3, #0
 801818c:	f43f ae67 	beq.w	8017e5e <_strtod_l+0x7e>
 8018190:	9b06      	ldr	r3, [sp, #24]
 8018192:	dd7a      	ble.n	801828a <_strtod_l+0x4aa>
 8018194:	2b16      	cmp	r3, #22
 8018196:	dc61      	bgt.n	801825c <_strtod_l+0x47c>
 8018198:	4a75      	ldr	r2, [pc, #468]	; (8018370 <_strtod_l+0x590>)
 801819a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801819e:	e9de 0100 	ldrd	r0, r1, [lr]
 80181a2:	4652      	mov	r2, sl
 80181a4:	465b      	mov	r3, fp
 80181a6:	f7e8 fa37 	bl	8000618 <__aeabi_dmul>
 80181aa:	4682      	mov	sl, r0
 80181ac:	468b      	mov	fp, r1
 80181ae:	e656      	b.n	8017e5e <_strtod_l+0x7e>
 80181b0:	4b6f      	ldr	r3, [pc, #444]	; (8018370 <_strtod_l+0x590>)
 80181b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80181b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80181ba:	f7e8 fa2d 	bl	8000618 <__aeabi_dmul>
 80181be:	4606      	mov	r6, r0
 80181c0:	4628      	mov	r0, r5
 80181c2:	460f      	mov	r7, r1
 80181c4:	f7e8 f9ae 	bl	8000524 <__aeabi_ui2d>
 80181c8:	4602      	mov	r2, r0
 80181ca:	460b      	mov	r3, r1
 80181cc:	4630      	mov	r0, r6
 80181ce:	4639      	mov	r1, r7
 80181d0:	f7e8 f86c 	bl	80002ac <__adddf3>
 80181d4:	2c0f      	cmp	r4, #15
 80181d6:	4682      	mov	sl, r0
 80181d8:	468b      	mov	fp, r1
 80181da:	ddd5      	ble.n	8018188 <_strtod_l+0x3a8>
 80181dc:	9b06      	ldr	r3, [sp, #24]
 80181de:	eba4 0808 	sub.w	r8, r4, r8
 80181e2:	4498      	add	r8, r3
 80181e4:	f1b8 0f00 	cmp.w	r8, #0
 80181e8:	f340 8096 	ble.w	8018318 <_strtod_l+0x538>
 80181ec:	f018 030f 	ands.w	r3, r8, #15
 80181f0:	d00a      	beq.n	8018208 <_strtod_l+0x428>
 80181f2:	495f      	ldr	r1, [pc, #380]	; (8018370 <_strtod_l+0x590>)
 80181f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80181f8:	4652      	mov	r2, sl
 80181fa:	465b      	mov	r3, fp
 80181fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018200:	f7e8 fa0a 	bl	8000618 <__aeabi_dmul>
 8018204:	4682      	mov	sl, r0
 8018206:	468b      	mov	fp, r1
 8018208:	f038 080f 	bics.w	r8, r8, #15
 801820c:	d073      	beq.n	80182f6 <_strtod_l+0x516>
 801820e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018212:	dd47      	ble.n	80182a4 <_strtod_l+0x4c4>
 8018214:	2400      	movs	r4, #0
 8018216:	46a0      	mov	r8, r4
 8018218:	9407      	str	r4, [sp, #28]
 801821a:	9405      	str	r4, [sp, #20]
 801821c:	2322      	movs	r3, #34	; 0x22
 801821e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8018378 <_strtod_l+0x598>
 8018222:	f8c9 3000 	str.w	r3, [r9]
 8018226:	f04f 0a00 	mov.w	sl, #0
 801822a:	9b07      	ldr	r3, [sp, #28]
 801822c:	2b00      	cmp	r3, #0
 801822e:	f43f ae16 	beq.w	8017e5e <_strtod_l+0x7e>
 8018232:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018234:	4648      	mov	r0, r9
 8018236:	f001 fe75 	bl	8019f24 <_Bfree>
 801823a:	9905      	ldr	r1, [sp, #20]
 801823c:	4648      	mov	r0, r9
 801823e:	f001 fe71 	bl	8019f24 <_Bfree>
 8018242:	4641      	mov	r1, r8
 8018244:	4648      	mov	r0, r9
 8018246:	f001 fe6d 	bl	8019f24 <_Bfree>
 801824a:	9907      	ldr	r1, [sp, #28]
 801824c:	4648      	mov	r0, r9
 801824e:	f001 fe69 	bl	8019f24 <_Bfree>
 8018252:	4621      	mov	r1, r4
 8018254:	4648      	mov	r0, r9
 8018256:	f001 fe65 	bl	8019f24 <_Bfree>
 801825a:	e600      	b.n	8017e5e <_strtod_l+0x7e>
 801825c:	9a06      	ldr	r2, [sp, #24]
 801825e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8018262:	4293      	cmp	r3, r2
 8018264:	dbba      	blt.n	80181dc <_strtod_l+0x3fc>
 8018266:	4d42      	ldr	r5, [pc, #264]	; (8018370 <_strtod_l+0x590>)
 8018268:	f1c4 040f 	rsb	r4, r4, #15
 801826c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8018270:	4652      	mov	r2, sl
 8018272:	465b      	mov	r3, fp
 8018274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018278:	f7e8 f9ce 	bl	8000618 <__aeabi_dmul>
 801827c:	9b06      	ldr	r3, [sp, #24]
 801827e:	1b1c      	subs	r4, r3, r4
 8018280:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8018284:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018288:	e78d      	b.n	80181a6 <_strtod_l+0x3c6>
 801828a:	f113 0f16 	cmn.w	r3, #22
 801828e:	dba5      	blt.n	80181dc <_strtod_l+0x3fc>
 8018290:	4a37      	ldr	r2, [pc, #220]	; (8018370 <_strtod_l+0x590>)
 8018292:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8018296:	e9d2 2300 	ldrd	r2, r3, [r2]
 801829a:	4650      	mov	r0, sl
 801829c:	4659      	mov	r1, fp
 801829e:	f7e8 fae5 	bl	800086c <__aeabi_ddiv>
 80182a2:	e782      	b.n	80181aa <_strtod_l+0x3ca>
 80182a4:	2300      	movs	r3, #0
 80182a6:	4e33      	ldr	r6, [pc, #204]	; (8018374 <_strtod_l+0x594>)
 80182a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80182ac:	4650      	mov	r0, sl
 80182ae:	4659      	mov	r1, fp
 80182b0:	461d      	mov	r5, r3
 80182b2:	f1b8 0f01 	cmp.w	r8, #1
 80182b6:	dc21      	bgt.n	80182fc <_strtod_l+0x51c>
 80182b8:	b10b      	cbz	r3, 80182be <_strtod_l+0x4de>
 80182ba:	4682      	mov	sl, r0
 80182bc:	468b      	mov	fp, r1
 80182be:	4b2d      	ldr	r3, [pc, #180]	; (8018374 <_strtod_l+0x594>)
 80182c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80182c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80182c8:	4652      	mov	r2, sl
 80182ca:	465b      	mov	r3, fp
 80182cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80182d0:	f7e8 f9a2 	bl	8000618 <__aeabi_dmul>
 80182d4:	4b28      	ldr	r3, [pc, #160]	; (8018378 <_strtod_l+0x598>)
 80182d6:	460a      	mov	r2, r1
 80182d8:	400b      	ands	r3, r1
 80182da:	4928      	ldr	r1, [pc, #160]	; (801837c <_strtod_l+0x59c>)
 80182dc:	428b      	cmp	r3, r1
 80182de:	4682      	mov	sl, r0
 80182e0:	d898      	bhi.n	8018214 <_strtod_l+0x434>
 80182e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80182e6:	428b      	cmp	r3, r1
 80182e8:	bf86      	itte	hi
 80182ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018384 <_strtod_l+0x5a4>
 80182ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80182f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80182f6:	2300      	movs	r3, #0
 80182f8:	9304      	str	r3, [sp, #16]
 80182fa:	e077      	b.n	80183ec <_strtod_l+0x60c>
 80182fc:	f018 0f01 	tst.w	r8, #1
 8018300:	d006      	beq.n	8018310 <_strtod_l+0x530>
 8018302:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8018306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801830a:	f7e8 f985 	bl	8000618 <__aeabi_dmul>
 801830e:	2301      	movs	r3, #1
 8018310:	3501      	adds	r5, #1
 8018312:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018316:	e7cc      	b.n	80182b2 <_strtod_l+0x4d2>
 8018318:	d0ed      	beq.n	80182f6 <_strtod_l+0x516>
 801831a:	f1c8 0800 	rsb	r8, r8, #0
 801831e:	f018 020f 	ands.w	r2, r8, #15
 8018322:	d00a      	beq.n	801833a <_strtod_l+0x55a>
 8018324:	4b12      	ldr	r3, [pc, #72]	; (8018370 <_strtod_l+0x590>)
 8018326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801832a:	4650      	mov	r0, sl
 801832c:	4659      	mov	r1, fp
 801832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018332:	f7e8 fa9b 	bl	800086c <__aeabi_ddiv>
 8018336:	4682      	mov	sl, r0
 8018338:	468b      	mov	fp, r1
 801833a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801833e:	d0da      	beq.n	80182f6 <_strtod_l+0x516>
 8018340:	f1b8 0f1f 	cmp.w	r8, #31
 8018344:	dd20      	ble.n	8018388 <_strtod_l+0x5a8>
 8018346:	2400      	movs	r4, #0
 8018348:	46a0      	mov	r8, r4
 801834a:	9407      	str	r4, [sp, #28]
 801834c:	9405      	str	r4, [sp, #20]
 801834e:	2322      	movs	r3, #34	; 0x22
 8018350:	f04f 0a00 	mov.w	sl, #0
 8018354:	f04f 0b00 	mov.w	fp, #0
 8018358:	f8c9 3000 	str.w	r3, [r9]
 801835c:	e765      	b.n	801822a <_strtod_l+0x44a>
 801835e:	bf00      	nop
 8018360:	0801e461 	.word	0x0801e461
 8018364:	0801e4eb 	.word	0x0801e4eb
 8018368:	0801e469 	.word	0x0801e469
 801836c:	0801e4ac 	.word	0x0801e4ac
 8018370:	0801e528 	.word	0x0801e528
 8018374:	0801e500 	.word	0x0801e500
 8018378:	7ff00000 	.word	0x7ff00000
 801837c:	7ca00000 	.word	0x7ca00000
 8018380:	fff80000 	.word	0xfff80000
 8018384:	7fefffff 	.word	0x7fefffff
 8018388:	f018 0310 	ands.w	r3, r8, #16
 801838c:	bf18      	it	ne
 801838e:	236a      	movne	r3, #106	; 0x6a
 8018390:	4da0      	ldr	r5, [pc, #640]	; (8018614 <_strtod_l+0x834>)
 8018392:	9304      	str	r3, [sp, #16]
 8018394:	4650      	mov	r0, sl
 8018396:	4659      	mov	r1, fp
 8018398:	2300      	movs	r3, #0
 801839a:	f1b8 0f00 	cmp.w	r8, #0
 801839e:	f300 810a 	bgt.w	80185b6 <_strtod_l+0x7d6>
 80183a2:	b10b      	cbz	r3, 80183a8 <_strtod_l+0x5c8>
 80183a4:	4682      	mov	sl, r0
 80183a6:	468b      	mov	fp, r1
 80183a8:	9b04      	ldr	r3, [sp, #16]
 80183aa:	b1bb      	cbz	r3, 80183dc <_strtod_l+0x5fc>
 80183ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80183b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	4659      	mov	r1, fp
 80183b8:	dd10      	ble.n	80183dc <_strtod_l+0x5fc>
 80183ba:	2b1f      	cmp	r3, #31
 80183bc:	f340 8107 	ble.w	80185ce <_strtod_l+0x7ee>
 80183c0:	2b34      	cmp	r3, #52	; 0x34
 80183c2:	bfde      	ittt	le
 80183c4:	3b20      	suble	r3, #32
 80183c6:	f04f 32ff 	movle.w	r2, #4294967295
 80183ca:	fa02 f303 	lslle.w	r3, r2, r3
 80183ce:	f04f 0a00 	mov.w	sl, #0
 80183d2:	bfcc      	ite	gt
 80183d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80183d8:	ea03 0b01 	andle.w	fp, r3, r1
 80183dc:	2200      	movs	r2, #0
 80183de:	2300      	movs	r3, #0
 80183e0:	4650      	mov	r0, sl
 80183e2:	4659      	mov	r1, fp
 80183e4:	f7e8 fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 80183e8:	2800      	cmp	r0, #0
 80183ea:	d1ac      	bne.n	8018346 <_strtod_l+0x566>
 80183ec:	9b07      	ldr	r3, [sp, #28]
 80183ee:	9300      	str	r3, [sp, #0]
 80183f0:	9a05      	ldr	r2, [sp, #20]
 80183f2:	9908      	ldr	r1, [sp, #32]
 80183f4:	4623      	mov	r3, r4
 80183f6:	4648      	mov	r0, r9
 80183f8:	f001 fde6 	bl	8019fc8 <__s2b>
 80183fc:	9007      	str	r0, [sp, #28]
 80183fe:	2800      	cmp	r0, #0
 8018400:	f43f af08 	beq.w	8018214 <_strtod_l+0x434>
 8018404:	9a06      	ldr	r2, [sp, #24]
 8018406:	9b06      	ldr	r3, [sp, #24]
 8018408:	2a00      	cmp	r2, #0
 801840a:	f1c3 0300 	rsb	r3, r3, #0
 801840e:	bfa8      	it	ge
 8018410:	2300      	movge	r3, #0
 8018412:	930e      	str	r3, [sp, #56]	; 0x38
 8018414:	2400      	movs	r4, #0
 8018416:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801841a:	9316      	str	r3, [sp, #88]	; 0x58
 801841c:	46a0      	mov	r8, r4
 801841e:	9b07      	ldr	r3, [sp, #28]
 8018420:	4648      	mov	r0, r9
 8018422:	6859      	ldr	r1, [r3, #4]
 8018424:	f001 fd4a 	bl	8019ebc <_Balloc>
 8018428:	9005      	str	r0, [sp, #20]
 801842a:	2800      	cmp	r0, #0
 801842c:	f43f aef6 	beq.w	801821c <_strtod_l+0x43c>
 8018430:	9b07      	ldr	r3, [sp, #28]
 8018432:	691a      	ldr	r2, [r3, #16]
 8018434:	3202      	adds	r2, #2
 8018436:	f103 010c 	add.w	r1, r3, #12
 801843a:	0092      	lsls	r2, r2, #2
 801843c:	300c      	adds	r0, #12
 801843e:	f7fe fd37 	bl	8016eb0 <memcpy>
 8018442:	aa1e      	add	r2, sp, #120	; 0x78
 8018444:	a91d      	add	r1, sp, #116	; 0x74
 8018446:	ec4b ab10 	vmov	d0, sl, fp
 801844a:	4648      	mov	r0, r9
 801844c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018450:	f002 f876 	bl	801a540 <__d2b>
 8018454:	901c      	str	r0, [sp, #112]	; 0x70
 8018456:	2800      	cmp	r0, #0
 8018458:	f43f aee0 	beq.w	801821c <_strtod_l+0x43c>
 801845c:	2101      	movs	r1, #1
 801845e:	4648      	mov	r0, r9
 8018460:	f001 fe3e 	bl	801a0e0 <__i2b>
 8018464:	4680      	mov	r8, r0
 8018466:	2800      	cmp	r0, #0
 8018468:	f43f aed8 	beq.w	801821c <_strtod_l+0x43c>
 801846c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801846e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018470:	2e00      	cmp	r6, #0
 8018472:	bfab      	itete	ge
 8018474:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8018476:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8018478:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801847a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801847c:	bfac      	ite	ge
 801847e:	18f7      	addge	r7, r6, r3
 8018480:	1b9d      	sublt	r5, r3, r6
 8018482:	9b04      	ldr	r3, [sp, #16]
 8018484:	1af6      	subs	r6, r6, r3
 8018486:	4416      	add	r6, r2
 8018488:	4b63      	ldr	r3, [pc, #396]	; (8018618 <_strtod_l+0x838>)
 801848a:	3e01      	subs	r6, #1
 801848c:	429e      	cmp	r6, r3
 801848e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018492:	f280 80af 	bge.w	80185f4 <_strtod_l+0x814>
 8018496:	1b9b      	subs	r3, r3, r6
 8018498:	2b1f      	cmp	r3, #31
 801849a:	eba2 0203 	sub.w	r2, r2, r3
 801849e:	f04f 0101 	mov.w	r1, #1
 80184a2:	f300 809b 	bgt.w	80185dc <_strtod_l+0x7fc>
 80184a6:	fa01 f303 	lsl.w	r3, r1, r3
 80184aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80184ac:	2300      	movs	r3, #0
 80184ae:	930a      	str	r3, [sp, #40]	; 0x28
 80184b0:	18be      	adds	r6, r7, r2
 80184b2:	9b04      	ldr	r3, [sp, #16]
 80184b4:	42b7      	cmp	r7, r6
 80184b6:	4415      	add	r5, r2
 80184b8:	441d      	add	r5, r3
 80184ba:	463b      	mov	r3, r7
 80184bc:	bfa8      	it	ge
 80184be:	4633      	movge	r3, r6
 80184c0:	42ab      	cmp	r3, r5
 80184c2:	bfa8      	it	ge
 80184c4:	462b      	movge	r3, r5
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	bfc2      	ittt	gt
 80184ca:	1af6      	subgt	r6, r6, r3
 80184cc:	1aed      	subgt	r5, r5, r3
 80184ce:	1aff      	subgt	r7, r7, r3
 80184d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184d2:	b1bb      	cbz	r3, 8018504 <_strtod_l+0x724>
 80184d4:	4641      	mov	r1, r8
 80184d6:	461a      	mov	r2, r3
 80184d8:	4648      	mov	r0, r9
 80184da:	f001 fea1 	bl	801a220 <__pow5mult>
 80184de:	4680      	mov	r8, r0
 80184e0:	2800      	cmp	r0, #0
 80184e2:	f43f ae9b 	beq.w	801821c <_strtod_l+0x43c>
 80184e6:	4601      	mov	r1, r0
 80184e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80184ea:	4648      	mov	r0, r9
 80184ec:	f001 fe01 	bl	801a0f2 <__multiply>
 80184f0:	900c      	str	r0, [sp, #48]	; 0x30
 80184f2:	2800      	cmp	r0, #0
 80184f4:	f43f ae92 	beq.w	801821c <_strtod_l+0x43c>
 80184f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80184fa:	4648      	mov	r0, r9
 80184fc:	f001 fd12 	bl	8019f24 <_Bfree>
 8018500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018502:	931c      	str	r3, [sp, #112]	; 0x70
 8018504:	2e00      	cmp	r6, #0
 8018506:	dc7a      	bgt.n	80185fe <_strtod_l+0x81e>
 8018508:	9b06      	ldr	r3, [sp, #24]
 801850a:	2b00      	cmp	r3, #0
 801850c:	dd08      	ble.n	8018520 <_strtod_l+0x740>
 801850e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018510:	9905      	ldr	r1, [sp, #20]
 8018512:	4648      	mov	r0, r9
 8018514:	f001 fe84 	bl	801a220 <__pow5mult>
 8018518:	9005      	str	r0, [sp, #20]
 801851a:	2800      	cmp	r0, #0
 801851c:	f43f ae7e 	beq.w	801821c <_strtod_l+0x43c>
 8018520:	2d00      	cmp	r5, #0
 8018522:	dd08      	ble.n	8018536 <_strtod_l+0x756>
 8018524:	462a      	mov	r2, r5
 8018526:	9905      	ldr	r1, [sp, #20]
 8018528:	4648      	mov	r0, r9
 801852a:	f001 fec7 	bl	801a2bc <__lshift>
 801852e:	9005      	str	r0, [sp, #20]
 8018530:	2800      	cmp	r0, #0
 8018532:	f43f ae73 	beq.w	801821c <_strtod_l+0x43c>
 8018536:	2f00      	cmp	r7, #0
 8018538:	dd08      	ble.n	801854c <_strtod_l+0x76c>
 801853a:	4641      	mov	r1, r8
 801853c:	463a      	mov	r2, r7
 801853e:	4648      	mov	r0, r9
 8018540:	f001 febc 	bl	801a2bc <__lshift>
 8018544:	4680      	mov	r8, r0
 8018546:	2800      	cmp	r0, #0
 8018548:	f43f ae68 	beq.w	801821c <_strtod_l+0x43c>
 801854c:	9a05      	ldr	r2, [sp, #20]
 801854e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018550:	4648      	mov	r0, r9
 8018552:	f001 ff21 	bl	801a398 <__mdiff>
 8018556:	4604      	mov	r4, r0
 8018558:	2800      	cmp	r0, #0
 801855a:	f43f ae5f 	beq.w	801821c <_strtod_l+0x43c>
 801855e:	68c3      	ldr	r3, [r0, #12]
 8018560:	930c      	str	r3, [sp, #48]	; 0x30
 8018562:	2300      	movs	r3, #0
 8018564:	60c3      	str	r3, [r0, #12]
 8018566:	4641      	mov	r1, r8
 8018568:	f001 fefc 	bl	801a364 <__mcmp>
 801856c:	2800      	cmp	r0, #0
 801856e:	da55      	bge.n	801861c <_strtod_l+0x83c>
 8018570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018572:	b9e3      	cbnz	r3, 80185ae <_strtod_l+0x7ce>
 8018574:	f1ba 0f00 	cmp.w	sl, #0
 8018578:	d119      	bne.n	80185ae <_strtod_l+0x7ce>
 801857a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801857e:	b9b3      	cbnz	r3, 80185ae <_strtod_l+0x7ce>
 8018580:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018584:	0d1b      	lsrs	r3, r3, #20
 8018586:	051b      	lsls	r3, r3, #20
 8018588:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801858c:	d90f      	bls.n	80185ae <_strtod_l+0x7ce>
 801858e:	6963      	ldr	r3, [r4, #20]
 8018590:	b913      	cbnz	r3, 8018598 <_strtod_l+0x7b8>
 8018592:	6923      	ldr	r3, [r4, #16]
 8018594:	2b01      	cmp	r3, #1
 8018596:	dd0a      	ble.n	80185ae <_strtod_l+0x7ce>
 8018598:	4621      	mov	r1, r4
 801859a:	2201      	movs	r2, #1
 801859c:	4648      	mov	r0, r9
 801859e:	f001 fe8d 	bl	801a2bc <__lshift>
 80185a2:	4641      	mov	r1, r8
 80185a4:	4604      	mov	r4, r0
 80185a6:	f001 fedd 	bl	801a364 <__mcmp>
 80185aa:	2800      	cmp	r0, #0
 80185ac:	dc67      	bgt.n	801867e <_strtod_l+0x89e>
 80185ae:	9b04      	ldr	r3, [sp, #16]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d171      	bne.n	8018698 <_strtod_l+0x8b8>
 80185b4:	e63d      	b.n	8018232 <_strtod_l+0x452>
 80185b6:	f018 0f01 	tst.w	r8, #1
 80185ba:	d004      	beq.n	80185c6 <_strtod_l+0x7e6>
 80185bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80185c0:	f7e8 f82a 	bl	8000618 <__aeabi_dmul>
 80185c4:	2301      	movs	r3, #1
 80185c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80185ca:	3508      	adds	r5, #8
 80185cc:	e6e5      	b.n	801839a <_strtod_l+0x5ba>
 80185ce:	f04f 32ff 	mov.w	r2, #4294967295
 80185d2:	fa02 f303 	lsl.w	r3, r2, r3
 80185d6:	ea03 0a0a 	and.w	sl, r3, sl
 80185da:	e6ff      	b.n	80183dc <_strtod_l+0x5fc>
 80185dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80185e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80185e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80185e8:	36e2      	adds	r6, #226	; 0xe2
 80185ea:	fa01 f306 	lsl.w	r3, r1, r6
 80185ee:	930a      	str	r3, [sp, #40]	; 0x28
 80185f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80185f2:	e75d      	b.n	80184b0 <_strtod_l+0x6d0>
 80185f4:	2300      	movs	r3, #0
 80185f6:	930a      	str	r3, [sp, #40]	; 0x28
 80185f8:	2301      	movs	r3, #1
 80185fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80185fc:	e758      	b.n	80184b0 <_strtod_l+0x6d0>
 80185fe:	4632      	mov	r2, r6
 8018600:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018602:	4648      	mov	r0, r9
 8018604:	f001 fe5a 	bl	801a2bc <__lshift>
 8018608:	901c      	str	r0, [sp, #112]	; 0x70
 801860a:	2800      	cmp	r0, #0
 801860c:	f47f af7c 	bne.w	8018508 <_strtod_l+0x728>
 8018610:	e604      	b.n	801821c <_strtod_l+0x43c>
 8018612:	bf00      	nop
 8018614:	0801e4c0 	.word	0x0801e4c0
 8018618:	fffffc02 	.word	0xfffffc02
 801861c:	465d      	mov	r5, fp
 801861e:	f040 8086 	bne.w	801872e <_strtod_l+0x94e>
 8018622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018628:	b32a      	cbz	r2, 8018676 <_strtod_l+0x896>
 801862a:	4aaf      	ldr	r2, [pc, #700]	; (80188e8 <_strtod_l+0xb08>)
 801862c:	4293      	cmp	r3, r2
 801862e:	d153      	bne.n	80186d8 <_strtod_l+0x8f8>
 8018630:	9b04      	ldr	r3, [sp, #16]
 8018632:	4650      	mov	r0, sl
 8018634:	b1d3      	cbz	r3, 801866c <_strtod_l+0x88c>
 8018636:	4aad      	ldr	r2, [pc, #692]	; (80188ec <_strtod_l+0xb0c>)
 8018638:	402a      	ands	r2, r5
 801863a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801863e:	f04f 31ff 	mov.w	r1, #4294967295
 8018642:	d816      	bhi.n	8018672 <_strtod_l+0x892>
 8018644:	0d12      	lsrs	r2, r2, #20
 8018646:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801864a:	fa01 f303 	lsl.w	r3, r1, r3
 801864e:	4298      	cmp	r0, r3
 8018650:	d142      	bne.n	80186d8 <_strtod_l+0x8f8>
 8018652:	4ba7      	ldr	r3, [pc, #668]	; (80188f0 <_strtod_l+0xb10>)
 8018654:	429d      	cmp	r5, r3
 8018656:	d102      	bne.n	801865e <_strtod_l+0x87e>
 8018658:	3001      	adds	r0, #1
 801865a:	f43f addf 	beq.w	801821c <_strtod_l+0x43c>
 801865e:	4ba3      	ldr	r3, [pc, #652]	; (80188ec <_strtod_l+0xb0c>)
 8018660:	402b      	ands	r3, r5
 8018662:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018666:	f04f 0a00 	mov.w	sl, #0
 801866a:	e7a0      	b.n	80185ae <_strtod_l+0x7ce>
 801866c:	f04f 33ff 	mov.w	r3, #4294967295
 8018670:	e7ed      	b.n	801864e <_strtod_l+0x86e>
 8018672:	460b      	mov	r3, r1
 8018674:	e7eb      	b.n	801864e <_strtod_l+0x86e>
 8018676:	bb7b      	cbnz	r3, 80186d8 <_strtod_l+0x8f8>
 8018678:	f1ba 0f00 	cmp.w	sl, #0
 801867c:	d12c      	bne.n	80186d8 <_strtod_l+0x8f8>
 801867e:	9904      	ldr	r1, [sp, #16]
 8018680:	4a9a      	ldr	r2, [pc, #616]	; (80188ec <_strtod_l+0xb0c>)
 8018682:	465b      	mov	r3, fp
 8018684:	b1f1      	cbz	r1, 80186c4 <_strtod_l+0x8e4>
 8018686:	ea02 010b 	and.w	r1, r2, fp
 801868a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801868e:	dc19      	bgt.n	80186c4 <_strtod_l+0x8e4>
 8018690:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018694:	f77f ae5b 	ble.w	801834e <_strtod_l+0x56e>
 8018698:	4a96      	ldr	r2, [pc, #600]	; (80188f4 <_strtod_l+0xb14>)
 801869a:	2300      	movs	r3, #0
 801869c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80186a0:	4650      	mov	r0, sl
 80186a2:	4659      	mov	r1, fp
 80186a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80186a8:	f7e7 ffb6 	bl	8000618 <__aeabi_dmul>
 80186ac:	4682      	mov	sl, r0
 80186ae:	468b      	mov	fp, r1
 80186b0:	2900      	cmp	r1, #0
 80186b2:	f47f adbe 	bne.w	8018232 <_strtod_l+0x452>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	f47f adbb 	bne.w	8018232 <_strtod_l+0x452>
 80186bc:	2322      	movs	r3, #34	; 0x22
 80186be:	f8c9 3000 	str.w	r3, [r9]
 80186c2:	e5b6      	b.n	8018232 <_strtod_l+0x452>
 80186c4:	4013      	ands	r3, r2
 80186c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80186ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80186ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80186d2:	f04f 3aff 	mov.w	sl, #4294967295
 80186d6:	e76a      	b.n	80185ae <_strtod_l+0x7ce>
 80186d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186da:	b193      	cbz	r3, 8018702 <_strtod_l+0x922>
 80186dc:	422b      	tst	r3, r5
 80186de:	f43f af66 	beq.w	80185ae <_strtod_l+0x7ce>
 80186e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186e4:	9a04      	ldr	r2, [sp, #16]
 80186e6:	4650      	mov	r0, sl
 80186e8:	4659      	mov	r1, fp
 80186ea:	b173      	cbz	r3, 801870a <_strtod_l+0x92a>
 80186ec:	f7ff fb5b 	bl	8017da6 <sulp>
 80186f0:	4602      	mov	r2, r0
 80186f2:	460b      	mov	r3, r1
 80186f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80186f8:	f7e7 fdd8 	bl	80002ac <__adddf3>
 80186fc:	4682      	mov	sl, r0
 80186fe:	468b      	mov	fp, r1
 8018700:	e755      	b.n	80185ae <_strtod_l+0x7ce>
 8018702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018704:	ea13 0f0a 	tst.w	r3, sl
 8018708:	e7e9      	b.n	80186de <_strtod_l+0x8fe>
 801870a:	f7ff fb4c 	bl	8017da6 <sulp>
 801870e:	4602      	mov	r2, r0
 8018710:	460b      	mov	r3, r1
 8018712:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018716:	f7e7 fdc7 	bl	80002a8 <__aeabi_dsub>
 801871a:	2200      	movs	r2, #0
 801871c:	2300      	movs	r3, #0
 801871e:	4682      	mov	sl, r0
 8018720:	468b      	mov	fp, r1
 8018722:	f7e8 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8018726:	2800      	cmp	r0, #0
 8018728:	f47f ae11 	bne.w	801834e <_strtod_l+0x56e>
 801872c:	e73f      	b.n	80185ae <_strtod_l+0x7ce>
 801872e:	4641      	mov	r1, r8
 8018730:	4620      	mov	r0, r4
 8018732:	f001 ff54 	bl	801a5de <__ratio>
 8018736:	ec57 6b10 	vmov	r6, r7, d0
 801873a:	2200      	movs	r2, #0
 801873c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018740:	ee10 0a10 	vmov	r0, s0
 8018744:	4639      	mov	r1, r7
 8018746:	f7e8 f9e3 	bl	8000b10 <__aeabi_dcmple>
 801874a:	2800      	cmp	r0, #0
 801874c:	d077      	beq.n	801883e <_strtod_l+0xa5e>
 801874e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018750:	2b00      	cmp	r3, #0
 8018752:	d04a      	beq.n	80187ea <_strtod_l+0xa0a>
 8018754:	4b68      	ldr	r3, [pc, #416]	; (80188f8 <_strtod_l+0xb18>)
 8018756:	2200      	movs	r2, #0
 8018758:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801875c:	4f66      	ldr	r7, [pc, #408]	; (80188f8 <_strtod_l+0xb18>)
 801875e:	2600      	movs	r6, #0
 8018760:	4b62      	ldr	r3, [pc, #392]	; (80188ec <_strtod_l+0xb0c>)
 8018762:	402b      	ands	r3, r5
 8018764:	930f      	str	r3, [sp, #60]	; 0x3c
 8018766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018768:	4b64      	ldr	r3, [pc, #400]	; (80188fc <_strtod_l+0xb1c>)
 801876a:	429a      	cmp	r2, r3
 801876c:	f040 80ce 	bne.w	801890c <_strtod_l+0xb2c>
 8018770:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018774:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018778:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801877c:	ec4b ab10 	vmov	d0, sl, fp
 8018780:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8018784:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018788:	f001 fe64 	bl	801a454 <__ulp>
 801878c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018790:	ec53 2b10 	vmov	r2, r3, d0
 8018794:	f7e7 ff40 	bl	8000618 <__aeabi_dmul>
 8018798:	4652      	mov	r2, sl
 801879a:	465b      	mov	r3, fp
 801879c:	f7e7 fd86 	bl	80002ac <__adddf3>
 80187a0:	460b      	mov	r3, r1
 80187a2:	4952      	ldr	r1, [pc, #328]	; (80188ec <_strtod_l+0xb0c>)
 80187a4:	4a56      	ldr	r2, [pc, #344]	; (8018900 <_strtod_l+0xb20>)
 80187a6:	4019      	ands	r1, r3
 80187a8:	4291      	cmp	r1, r2
 80187aa:	4682      	mov	sl, r0
 80187ac:	d95b      	bls.n	8018866 <_strtod_l+0xa86>
 80187ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80187b4:	4293      	cmp	r3, r2
 80187b6:	d103      	bne.n	80187c0 <_strtod_l+0x9e0>
 80187b8:	9b08      	ldr	r3, [sp, #32]
 80187ba:	3301      	adds	r3, #1
 80187bc:	f43f ad2e 	beq.w	801821c <_strtod_l+0x43c>
 80187c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80188f0 <_strtod_l+0xb10>
 80187c4:	f04f 3aff 	mov.w	sl, #4294967295
 80187c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80187ca:	4648      	mov	r0, r9
 80187cc:	f001 fbaa 	bl	8019f24 <_Bfree>
 80187d0:	9905      	ldr	r1, [sp, #20]
 80187d2:	4648      	mov	r0, r9
 80187d4:	f001 fba6 	bl	8019f24 <_Bfree>
 80187d8:	4641      	mov	r1, r8
 80187da:	4648      	mov	r0, r9
 80187dc:	f001 fba2 	bl	8019f24 <_Bfree>
 80187e0:	4621      	mov	r1, r4
 80187e2:	4648      	mov	r0, r9
 80187e4:	f001 fb9e 	bl	8019f24 <_Bfree>
 80187e8:	e619      	b.n	801841e <_strtod_l+0x63e>
 80187ea:	f1ba 0f00 	cmp.w	sl, #0
 80187ee:	d11a      	bne.n	8018826 <_strtod_l+0xa46>
 80187f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80187f4:	b9eb      	cbnz	r3, 8018832 <_strtod_l+0xa52>
 80187f6:	2200      	movs	r2, #0
 80187f8:	4b3f      	ldr	r3, [pc, #252]	; (80188f8 <_strtod_l+0xb18>)
 80187fa:	4630      	mov	r0, r6
 80187fc:	4639      	mov	r1, r7
 80187fe:	f7e8 f97d 	bl	8000afc <__aeabi_dcmplt>
 8018802:	b9c8      	cbnz	r0, 8018838 <_strtod_l+0xa58>
 8018804:	4630      	mov	r0, r6
 8018806:	4639      	mov	r1, r7
 8018808:	2200      	movs	r2, #0
 801880a:	4b3e      	ldr	r3, [pc, #248]	; (8018904 <_strtod_l+0xb24>)
 801880c:	f7e7 ff04 	bl	8000618 <__aeabi_dmul>
 8018810:	4606      	mov	r6, r0
 8018812:	460f      	mov	r7, r1
 8018814:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018818:	9618      	str	r6, [sp, #96]	; 0x60
 801881a:	9319      	str	r3, [sp, #100]	; 0x64
 801881c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018820:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018824:	e79c      	b.n	8018760 <_strtod_l+0x980>
 8018826:	f1ba 0f01 	cmp.w	sl, #1
 801882a:	d102      	bne.n	8018832 <_strtod_l+0xa52>
 801882c:	2d00      	cmp	r5, #0
 801882e:	f43f ad8e 	beq.w	801834e <_strtod_l+0x56e>
 8018832:	2200      	movs	r2, #0
 8018834:	4b34      	ldr	r3, [pc, #208]	; (8018908 <_strtod_l+0xb28>)
 8018836:	e78f      	b.n	8018758 <_strtod_l+0x978>
 8018838:	2600      	movs	r6, #0
 801883a:	4f32      	ldr	r7, [pc, #200]	; (8018904 <_strtod_l+0xb24>)
 801883c:	e7ea      	b.n	8018814 <_strtod_l+0xa34>
 801883e:	4b31      	ldr	r3, [pc, #196]	; (8018904 <_strtod_l+0xb24>)
 8018840:	4630      	mov	r0, r6
 8018842:	4639      	mov	r1, r7
 8018844:	2200      	movs	r2, #0
 8018846:	f7e7 fee7 	bl	8000618 <__aeabi_dmul>
 801884a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801884c:	4606      	mov	r6, r0
 801884e:	460f      	mov	r7, r1
 8018850:	b933      	cbnz	r3, 8018860 <_strtod_l+0xa80>
 8018852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018856:	9010      	str	r0, [sp, #64]	; 0x40
 8018858:	9311      	str	r3, [sp, #68]	; 0x44
 801885a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801885e:	e7df      	b.n	8018820 <_strtod_l+0xa40>
 8018860:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8018864:	e7f9      	b.n	801885a <_strtod_l+0xa7a>
 8018866:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801886a:	9b04      	ldr	r3, [sp, #16]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d1ab      	bne.n	80187c8 <_strtod_l+0x9e8>
 8018870:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018874:	0d1b      	lsrs	r3, r3, #20
 8018876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018878:	051b      	lsls	r3, r3, #20
 801887a:	429a      	cmp	r2, r3
 801887c:	465d      	mov	r5, fp
 801887e:	d1a3      	bne.n	80187c8 <_strtod_l+0x9e8>
 8018880:	4639      	mov	r1, r7
 8018882:	4630      	mov	r0, r6
 8018884:	f7e8 f978 	bl	8000b78 <__aeabi_d2iz>
 8018888:	f7e7 fe5c 	bl	8000544 <__aeabi_i2d>
 801888c:	460b      	mov	r3, r1
 801888e:	4602      	mov	r2, r0
 8018890:	4639      	mov	r1, r7
 8018892:	4630      	mov	r0, r6
 8018894:	f7e7 fd08 	bl	80002a8 <__aeabi_dsub>
 8018898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801889a:	4606      	mov	r6, r0
 801889c:	460f      	mov	r7, r1
 801889e:	b933      	cbnz	r3, 80188ae <_strtod_l+0xace>
 80188a0:	f1ba 0f00 	cmp.w	sl, #0
 80188a4:	d103      	bne.n	80188ae <_strtod_l+0xace>
 80188a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80188aa:	2d00      	cmp	r5, #0
 80188ac:	d06d      	beq.n	801898a <_strtod_l+0xbaa>
 80188ae:	a30a      	add	r3, pc, #40	; (adr r3, 80188d8 <_strtod_l+0xaf8>)
 80188b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b4:	4630      	mov	r0, r6
 80188b6:	4639      	mov	r1, r7
 80188b8:	f7e8 f920 	bl	8000afc <__aeabi_dcmplt>
 80188bc:	2800      	cmp	r0, #0
 80188be:	f47f acb8 	bne.w	8018232 <_strtod_l+0x452>
 80188c2:	a307      	add	r3, pc, #28	; (adr r3, 80188e0 <_strtod_l+0xb00>)
 80188c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188c8:	4630      	mov	r0, r6
 80188ca:	4639      	mov	r1, r7
 80188cc:	f7e8 f934 	bl	8000b38 <__aeabi_dcmpgt>
 80188d0:	2800      	cmp	r0, #0
 80188d2:	f43f af79 	beq.w	80187c8 <_strtod_l+0x9e8>
 80188d6:	e4ac      	b.n	8018232 <_strtod_l+0x452>
 80188d8:	94a03595 	.word	0x94a03595
 80188dc:	3fdfffff 	.word	0x3fdfffff
 80188e0:	35afe535 	.word	0x35afe535
 80188e4:	3fe00000 	.word	0x3fe00000
 80188e8:	000fffff 	.word	0x000fffff
 80188ec:	7ff00000 	.word	0x7ff00000
 80188f0:	7fefffff 	.word	0x7fefffff
 80188f4:	39500000 	.word	0x39500000
 80188f8:	3ff00000 	.word	0x3ff00000
 80188fc:	7fe00000 	.word	0x7fe00000
 8018900:	7c9fffff 	.word	0x7c9fffff
 8018904:	3fe00000 	.word	0x3fe00000
 8018908:	bff00000 	.word	0xbff00000
 801890c:	9b04      	ldr	r3, [sp, #16]
 801890e:	b333      	cbz	r3, 801895e <_strtod_l+0xb7e>
 8018910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018912:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018916:	d822      	bhi.n	801895e <_strtod_l+0xb7e>
 8018918:	a327      	add	r3, pc, #156	; (adr r3, 80189b8 <_strtod_l+0xbd8>)
 801891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801891e:	4630      	mov	r0, r6
 8018920:	4639      	mov	r1, r7
 8018922:	f7e8 f8f5 	bl	8000b10 <__aeabi_dcmple>
 8018926:	b1a0      	cbz	r0, 8018952 <_strtod_l+0xb72>
 8018928:	4639      	mov	r1, r7
 801892a:	4630      	mov	r0, r6
 801892c:	f7e8 f94c 	bl	8000bc8 <__aeabi_d2uiz>
 8018930:	2800      	cmp	r0, #0
 8018932:	bf08      	it	eq
 8018934:	2001      	moveq	r0, #1
 8018936:	f7e7 fdf5 	bl	8000524 <__aeabi_ui2d>
 801893a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801893c:	4606      	mov	r6, r0
 801893e:	460f      	mov	r7, r1
 8018940:	bb03      	cbnz	r3, 8018984 <_strtod_l+0xba4>
 8018942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018946:	9012      	str	r0, [sp, #72]	; 0x48
 8018948:	9313      	str	r3, [sp, #76]	; 0x4c
 801894a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801894e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018956:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801895a:	1a9b      	subs	r3, r3, r2
 801895c:	930b      	str	r3, [sp, #44]	; 0x2c
 801895e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018962:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8018966:	f001 fd75 	bl	801a454 <__ulp>
 801896a:	4650      	mov	r0, sl
 801896c:	ec53 2b10 	vmov	r2, r3, d0
 8018970:	4659      	mov	r1, fp
 8018972:	f7e7 fe51 	bl	8000618 <__aeabi_dmul>
 8018976:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801897a:	f7e7 fc97 	bl	80002ac <__adddf3>
 801897e:	4682      	mov	sl, r0
 8018980:	468b      	mov	fp, r1
 8018982:	e772      	b.n	801886a <_strtod_l+0xa8a>
 8018984:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8018988:	e7df      	b.n	801894a <_strtod_l+0xb6a>
 801898a:	a30d      	add	r3, pc, #52	; (adr r3, 80189c0 <_strtod_l+0xbe0>)
 801898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018990:	f7e8 f8b4 	bl	8000afc <__aeabi_dcmplt>
 8018994:	e79c      	b.n	80188d0 <_strtod_l+0xaf0>
 8018996:	2300      	movs	r3, #0
 8018998:	930d      	str	r3, [sp, #52]	; 0x34
 801899a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801899c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801899e:	6013      	str	r3, [r2, #0]
 80189a0:	f7ff ba61 	b.w	8017e66 <_strtod_l+0x86>
 80189a4:	2b65      	cmp	r3, #101	; 0x65
 80189a6:	f04f 0200 	mov.w	r2, #0
 80189aa:	f43f ab4e 	beq.w	801804a <_strtod_l+0x26a>
 80189ae:	2101      	movs	r1, #1
 80189b0:	4614      	mov	r4, r2
 80189b2:	9104      	str	r1, [sp, #16]
 80189b4:	f7ff bacb 	b.w	8017f4e <_strtod_l+0x16e>
 80189b8:	ffc00000 	.word	0xffc00000
 80189bc:	41dfffff 	.word	0x41dfffff
 80189c0:	94a03595 	.word	0x94a03595
 80189c4:	3fcfffff 	.word	0x3fcfffff

080189c8 <_strtod_r>:
 80189c8:	4b05      	ldr	r3, [pc, #20]	; (80189e0 <_strtod_r+0x18>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	b410      	push	{r4}
 80189ce:	6a1b      	ldr	r3, [r3, #32]
 80189d0:	4c04      	ldr	r4, [pc, #16]	; (80189e4 <_strtod_r+0x1c>)
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	bf08      	it	eq
 80189d6:	4623      	moveq	r3, r4
 80189d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189dc:	f7ff ba00 	b.w	8017de0 <_strtod_l>
 80189e0:	200001d4 	.word	0x200001d4
 80189e4:	20000238 	.word	0x20000238

080189e8 <strtod>:
 80189e8:	4b07      	ldr	r3, [pc, #28]	; (8018a08 <strtod+0x20>)
 80189ea:	4a08      	ldr	r2, [pc, #32]	; (8018a0c <strtod+0x24>)
 80189ec:	b410      	push	{r4}
 80189ee:	681c      	ldr	r4, [r3, #0]
 80189f0:	6a23      	ldr	r3, [r4, #32]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	bf08      	it	eq
 80189f6:	4613      	moveq	r3, r2
 80189f8:	460a      	mov	r2, r1
 80189fa:	4601      	mov	r1, r0
 80189fc:	4620      	mov	r0, r4
 80189fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a02:	f7ff b9ed 	b.w	8017de0 <_strtod_l>
 8018a06:	bf00      	nop
 8018a08:	200001d4 	.word	0x200001d4
 8018a0c:	20000238 	.word	0x20000238

08018a10 <_strtol_l.isra.0>:
 8018a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a14:	4680      	mov	r8, r0
 8018a16:	4689      	mov	r9, r1
 8018a18:	4692      	mov	sl, r2
 8018a1a:	461e      	mov	r6, r3
 8018a1c:	460f      	mov	r7, r1
 8018a1e:	463d      	mov	r5, r7
 8018a20:	9808      	ldr	r0, [sp, #32]
 8018a22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a26:	f001 fa21 	bl	8019e6c <__locale_ctype_ptr_l>
 8018a2a:	4420      	add	r0, r4
 8018a2c:	7843      	ldrb	r3, [r0, #1]
 8018a2e:	f013 0308 	ands.w	r3, r3, #8
 8018a32:	d132      	bne.n	8018a9a <_strtol_l.isra.0+0x8a>
 8018a34:	2c2d      	cmp	r4, #45	; 0x2d
 8018a36:	d132      	bne.n	8018a9e <_strtol_l.isra.0+0x8e>
 8018a38:	787c      	ldrb	r4, [r7, #1]
 8018a3a:	1cbd      	adds	r5, r7, #2
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	2e00      	cmp	r6, #0
 8018a40:	d05d      	beq.n	8018afe <_strtol_l.isra.0+0xee>
 8018a42:	2e10      	cmp	r6, #16
 8018a44:	d109      	bne.n	8018a5a <_strtol_l.isra.0+0x4a>
 8018a46:	2c30      	cmp	r4, #48	; 0x30
 8018a48:	d107      	bne.n	8018a5a <_strtol_l.isra.0+0x4a>
 8018a4a:	782b      	ldrb	r3, [r5, #0]
 8018a4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018a50:	2b58      	cmp	r3, #88	; 0x58
 8018a52:	d14f      	bne.n	8018af4 <_strtol_l.isra.0+0xe4>
 8018a54:	786c      	ldrb	r4, [r5, #1]
 8018a56:	2610      	movs	r6, #16
 8018a58:	3502      	adds	r5, #2
 8018a5a:	2a00      	cmp	r2, #0
 8018a5c:	bf14      	ite	ne
 8018a5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8018a62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018a66:	2700      	movs	r7, #0
 8018a68:	fbb1 fcf6 	udiv	ip, r1, r6
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8018a72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018a76:	2b09      	cmp	r3, #9
 8018a78:	d817      	bhi.n	8018aaa <_strtol_l.isra.0+0x9a>
 8018a7a:	461c      	mov	r4, r3
 8018a7c:	42a6      	cmp	r6, r4
 8018a7e:	dd23      	ble.n	8018ac8 <_strtol_l.isra.0+0xb8>
 8018a80:	1c7b      	adds	r3, r7, #1
 8018a82:	d007      	beq.n	8018a94 <_strtol_l.isra.0+0x84>
 8018a84:	4584      	cmp	ip, r0
 8018a86:	d31c      	bcc.n	8018ac2 <_strtol_l.isra.0+0xb2>
 8018a88:	d101      	bne.n	8018a8e <_strtol_l.isra.0+0x7e>
 8018a8a:	45a6      	cmp	lr, r4
 8018a8c:	db19      	blt.n	8018ac2 <_strtol_l.isra.0+0xb2>
 8018a8e:	fb00 4006 	mla	r0, r0, r6, r4
 8018a92:	2701      	movs	r7, #1
 8018a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a98:	e7eb      	b.n	8018a72 <_strtol_l.isra.0+0x62>
 8018a9a:	462f      	mov	r7, r5
 8018a9c:	e7bf      	b.n	8018a1e <_strtol_l.isra.0+0xe>
 8018a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8018aa0:	bf04      	itt	eq
 8018aa2:	1cbd      	addeq	r5, r7, #2
 8018aa4:	787c      	ldrbeq	r4, [r7, #1]
 8018aa6:	461a      	mov	r2, r3
 8018aa8:	e7c9      	b.n	8018a3e <_strtol_l.isra.0+0x2e>
 8018aaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018aae:	2b19      	cmp	r3, #25
 8018ab0:	d801      	bhi.n	8018ab6 <_strtol_l.isra.0+0xa6>
 8018ab2:	3c37      	subs	r4, #55	; 0x37
 8018ab4:	e7e2      	b.n	8018a7c <_strtol_l.isra.0+0x6c>
 8018ab6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018aba:	2b19      	cmp	r3, #25
 8018abc:	d804      	bhi.n	8018ac8 <_strtol_l.isra.0+0xb8>
 8018abe:	3c57      	subs	r4, #87	; 0x57
 8018ac0:	e7dc      	b.n	8018a7c <_strtol_l.isra.0+0x6c>
 8018ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8018ac6:	e7e5      	b.n	8018a94 <_strtol_l.isra.0+0x84>
 8018ac8:	1c7b      	adds	r3, r7, #1
 8018aca:	d108      	bne.n	8018ade <_strtol_l.isra.0+0xce>
 8018acc:	2322      	movs	r3, #34	; 0x22
 8018ace:	f8c8 3000 	str.w	r3, [r8]
 8018ad2:	4608      	mov	r0, r1
 8018ad4:	f1ba 0f00 	cmp.w	sl, #0
 8018ad8:	d107      	bne.n	8018aea <_strtol_l.isra.0+0xda>
 8018ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ade:	b102      	cbz	r2, 8018ae2 <_strtol_l.isra.0+0xd2>
 8018ae0:	4240      	negs	r0, r0
 8018ae2:	f1ba 0f00 	cmp.w	sl, #0
 8018ae6:	d0f8      	beq.n	8018ada <_strtol_l.isra.0+0xca>
 8018ae8:	b10f      	cbz	r7, 8018aee <_strtol_l.isra.0+0xde>
 8018aea:	f105 39ff 	add.w	r9, r5, #4294967295
 8018aee:	f8ca 9000 	str.w	r9, [sl]
 8018af2:	e7f2      	b.n	8018ada <_strtol_l.isra.0+0xca>
 8018af4:	2430      	movs	r4, #48	; 0x30
 8018af6:	2e00      	cmp	r6, #0
 8018af8:	d1af      	bne.n	8018a5a <_strtol_l.isra.0+0x4a>
 8018afa:	2608      	movs	r6, #8
 8018afc:	e7ad      	b.n	8018a5a <_strtol_l.isra.0+0x4a>
 8018afe:	2c30      	cmp	r4, #48	; 0x30
 8018b00:	d0a3      	beq.n	8018a4a <_strtol_l.isra.0+0x3a>
 8018b02:	260a      	movs	r6, #10
 8018b04:	e7a9      	b.n	8018a5a <_strtol_l.isra.0+0x4a>
	...

08018b08 <_strtol_r>:
 8018b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b0a:	4c06      	ldr	r4, [pc, #24]	; (8018b24 <_strtol_r+0x1c>)
 8018b0c:	4d06      	ldr	r5, [pc, #24]	; (8018b28 <_strtol_r+0x20>)
 8018b0e:	6824      	ldr	r4, [r4, #0]
 8018b10:	6a24      	ldr	r4, [r4, #32]
 8018b12:	2c00      	cmp	r4, #0
 8018b14:	bf08      	it	eq
 8018b16:	462c      	moveq	r4, r5
 8018b18:	9400      	str	r4, [sp, #0]
 8018b1a:	f7ff ff79 	bl	8018a10 <_strtol_l.isra.0>
 8018b1e:	b003      	add	sp, #12
 8018b20:	bd30      	pop	{r4, r5, pc}
 8018b22:	bf00      	nop
 8018b24:	200001d4 	.word	0x200001d4
 8018b28:	20000238 	.word	0x20000238

08018b2c <strtol>:
 8018b2c:	4b08      	ldr	r3, [pc, #32]	; (8018b50 <strtol+0x24>)
 8018b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b30:	681c      	ldr	r4, [r3, #0]
 8018b32:	4d08      	ldr	r5, [pc, #32]	; (8018b54 <strtol+0x28>)
 8018b34:	6a23      	ldr	r3, [r4, #32]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	bf08      	it	eq
 8018b3a:	462b      	moveq	r3, r5
 8018b3c:	9300      	str	r3, [sp, #0]
 8018b3e:	4613      	mov	r3, r2
 8018b40:	460a      	mov	r2, r1
 8018b42:	4601      	mov	r1, r0
 8018b44:	4620      	mov	r0, r4
 8018b46:	f7ff ff63 	bl	8018a10 <_strtol_l.isra.0>
 8018b4a:	b003      	add	sp, #12
 8018b4c:	bd30      	pop	{r4, r5, pc}
 8018b4e:	bf00      	nop
 8018b50:	200001d4 	.word	0x200001d4
 8018b54:	20000238 	.word	0x20000238

08018b58 <_vsiprintf_r>:
 8018b58:	b500      	push	{lr}
 8018b5a:	b09b      	sub	sp, #108	; 0x6c
 8018b5c:	9100      	str	r1, [sp, #0]
 8018b5e:	9104      	str	r1, [sp, #16]
 8018b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b64:	9105      	str	r1, [sp, #20]
 8018b66:	9102      	str	r1, [sp, #8]
 8018b68:	4905      	ldr	r1, [pc, #20]	; (8018b80 <_vsiprintf_r+0x28>)
 8018b6a:	9103      	str	r1, [sp, #12]
 8018b6c:	4669      	mov	r1, sp
 8018b6e:	f001 fe0d 	bl	801a78c <_svfiprintf_r>
 8018b72:	9b00      	ldr	r3, [sp, #0]
 8018b74:	2200      	movs	r2, #0
 8018b76:	701a      	strb	r2, [r3, #0]
 8018b78:	b01b      	add	sp, #108	; 0x6c
 8018b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b7e:	bf00      	nop
 8018b80:	ffff0208 	.word	0xffff0208

08018b84 <vsiprintf>:
 8018b84:	4613      	mov	r3, r2
 8018b86:	460a      	mov	r2, r1
 8018b88:	4601      	mov	r1, r0
 8018b8a:	4802      	ldr	r0, [pc, #8]	; (8018b94 <vsiprintf+0x10>)
 8018b8c:	6800      	ldr	r0, [r0, #0]
 8018b8e:	f7ff bfe3 	b.w	8018b58 <_vsiprintf_r>
 8018b92:	bf00      	nop
 8018b94:	200001d4 	.word	0x200001d4

08018b98 <quorem>:
 8018b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9c:	6903      	ldr	r3, [r0, #16]
 8018b9e:	690c      	ldr	r4, [r1, #16]
 8018ba0:	42a3      	cmp	r3, r4
 8018ba2:	4680      	mov	r8, r0
 8018ba4:	f2c0 8082 	blt.w	8018cac <quorem+0x114>
 8018ba8:	3c01      	subs	r4, #1
 8018baa:	f101 0714 	add.w	r7, r1, #20
 8018bae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8018bb2:	f100 0614 	add.w	r6, r0, #20
 8018bb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018bba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8018bbe:	eb06 030c 	add.w	r3, r6, ip
 8018bc2:	3501      	adds	r5, #1
 8018bc4:	eb07 090c 	add.w	r9, r7, ip
 8018bc8:	9301      	str	r3, [sp, #4]
 8018bca:	fbb0 f5f5 	udiv	r5, r0, r5
 8018bce:	b395      	cbz	r5, 8018c36 <quorem+0x9e>
 8018bd0:	f04f 0a00 	mov.w	sl, #0
 8018bd4:	4638      	mov	r0, r7
 8018bd6:	46b6      	mov	lr, r6
 8018bd8:	46d3      	mov	fp, sl
 8018bda:	f850 2b04 	ldr.w	r2, [r0], #4
 8018bde:	b293      	uxth	r3, r2
 8018be0:	fb05 a303 	mla	r3, r5, r3, sl
 8018be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	ebab 0303 	sub.w	r3, fp, r3
 8018bee:	0c12      	lsrs	r2, r2, #16
 8018bf0:	f8de b000 	ldr.w	fp, [lr]
 8018bf4:	fb05 a202 	mla	r2, r5, r2, sl
 8018bf8:	fa13 f38b 	uxtah	r3, r3, fp
 8018bfc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8018c00:	fa1f fb82 	uxth.w	fp, r2
 8018c04:	f8de 2000 	ldr.w	r2, [lr]
 8018c08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018c10:	b29b      	uxth	r3, r3
 8018c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c16:	4581      	cmp	r9, r0
 8018c18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018c1c:	f84e 3b04 	str.w	r3, [lr], #4
 8018c20:	d2db      	bcs.n	8018bda <quorem+0x42>
 8018c22:	f856 300c 	ldr.w	r3, [r6, ip]
 8018c26:	b933      	cbnz	r3, 8018c36 <quorem+0x9e>
 8018c28:	9b01      	ldr	r3, [sp, #4]
 8018c2a:	3b04      	subs	r3, #4
 8018c2c:	429e      	cmp	r6, r3
 8018c2e:	461a      	mov	r2, r3
 8018c30:	d330      	bcc.n	8018c94 <quorem+0xfc>
 8018c32:	f8c8 4010 	str.w	r4, [r8, #16]
 8018c36:	4640      	mov	r0, r8
 8018c38:	f001 fb94 	bl	801a364 <__mcmp>
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	db25      	blt.n	8018c8c <quorem+0xf4>
 8018c40:	3501      	adds	r5, #1
 8018c42:	4630      	mov	r0, r6
 8018c44:	f04f 0c00 	mov.w	ip, #0
 8018c48:	f857 2b04 	ldr.w	r2, [r7], #4
 8018c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8018c50:	b293      	uxth	r3, r2
 8018c52:	ebac 0303 	sub.w	r3, ip, r3
 8018c56:	0c12      	lsrs	r2, r2, #16
 8018c58:	fa13 f38e 	uxtah	r3, r3, lr
 8018c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018c64:	b29b      	uxth	r3, r3
 8018c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c6a:	45b9      	cmp	r9, r7
 8018c6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018c70:	f840 3b04 	str.w	r3, [r0], #4
 8018c74:	d2e8      	bcs.n	8018c48 <quorem+0xb0>
 8018c76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018c7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018c7e:	b92a      	cbnz	r2, 8018c8c <quorem+0xf4>
 8018c80:	3b04      	subs	r3, #4
 8018c82:	429e      	cmp	r6, r3
 8018c84:	461a      	mov	r2, r3
 8018c86:	d30b      	bcc.n	8018ca0 <quorem+0x108>
 8018c88:	f8c8 4010 	str.w	r4, [r8, #16]
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	b003      	add	sp, #12
 8018c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c94:	6812      	ldr	r2, [r2, #0]
 8018c96:	3b04      	subs	r3, #4
 8018c98:	2a00      	cmp	r2, #0
 8018c9a:	d1ca      	bne.n	8018c32 <quorem+0x9a>
 8018c9c:	3c01      	subs	r4, #1
 8018c9e:	e7c5      	b.n	8018c2c <quorem+0x94>
 8018ca0:	6812      	ldr	r2, [r2, #0]
 8018ca2:	3b04      	subs	r3, #4
 8018ca4:	2a00      	cmp	r2, #0
 8018ca6:	d1ef      	bne.n	8018c88 <quorem+0xf0>
 8018ca8:	3c01      	subs	r4, #1
 8018caa:	e7ea      	b.n	8018c82 <quorem+0xea>
 8018cac:	2000      	movs	r0, #0
 8018cae:	e7ee      	b.n	8018c8e <quorem+0xf6>

08018cb0 <_dtoa_r>:
 8018cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb4:	ec57 6b10 	vmov	r6, r7, d0
 8018cb8:	b097      	sub	sp, #92	; 0x5c
 8018cba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018cbc:	9106      	str	r1, [sp, #24]
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8018cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8018cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018cc8:	e9cd 6700 	strd	r6, r7, [sp]
 8018ccc:	b93d      	cbnz	r5, 8018cde <_dtoa_r+0x2e>
 8018cce:	2010      	movs	r0, #16
 8018cd0:	f7fe f8de 	bl	8016e90 <malloc>
 8018cd4:	6260      	str	r0, [r4, #36]	; 0x24
 8018cd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018cda:	6005      	str	r5, [r0, #0]
 8018cdc:	60c5      	str	r5, [r0, #12]
 8018cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ce0:	6819      	ldr	r1, [r3, #0]
 8018ce2:	b151      	cbz	r1, 8018cfa <_dtoa_r+0x4a>
 8018ce4:	685a      	ldr	r2, [r3, #4]
 8018ce6:	604a      	str	r2, [r1, #4]
 8018ce8:	2301      	movs	r3, #1
 8018cea:	4093      	lsls	r3, r2
 8018cec:	608b      	str	r3, [r1, #8]
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f001 f918 	bl	8019f24 <_Bfree>
 8018cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	601a      	str	r2, [r3, #0]
 8018cfa:	1e3b      	subs	r3, r7, #0
 8018cfc:	bfbb      	ittet	lt
 8018cfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018d02:	9301      	strlt	r3, [sp, #4]
 8018d04:	2300      	movge	r3, #0
 8018d06:	2201      	movlt	r2, #1
 8018d08:	bfac      	ite	ge
 8018d0a:	f8c8 3000 	strge.w	r3, [r8]
 8018d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8018d12:	4baf      	ldr	r3, [pc, #700]	; (8018fd0 <_dtoa_r+0x320>)
 8018d14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018d18:	ea33 0308 	bics.w	r3, r3, r8
 8018d1c:	d114      	bne.n	8018d48 <_dtoa_r+0x98>
 8018d1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018d20:	f242 730f 	movw	r3, #9999	; 0x270f
 8018d24:	6013      	str	r3, [r2, #0]
 8018d26:	9b00      	ldr	r3, [sp, #0]
 8018d28:	b923      	cbnz	r3, 8018d34 <_dtoa_r+0x84>
 8018d2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	f000 8542 	beq.w	80197b8 <_dtoa_r+0xb08>
 8018d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8018fe4 <_dtoa_r+0x334>
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	f000 8544 	beq.w	80197c8 <_dtoa_r+0xb18>
 8018d40:	f10b 0303 	add.w	r3, fp, #3
 8018d44:	f000 bd3e 	b.w	80197c4 <_dtoa_r+0xb14>
 8018d48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	2300      	movs	r3, #0
 8018d50:	4630      	mov	r0, r6
 8018d52:	4639      	mov	r1, r7
 8018d54:	f7e7 fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8018d58:	4681      	mov	r9, r0
 8018d5a:	b168      	cbz	r0, 8018d78 <_dtoa_r+0xc8>
 8018d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018d5e:	2301      	movs	r3, #1
 8018d60:	6013      	str	r3, [r2, #0]
 8018d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	f000 8524 	beq.w	80197b2 <_dtoa_r+0xb02>
 8018d6a:	4b9a      	ldr	r3, [pc, #616]	; (8018fd4 <_dtoa_r+0x324>)
 8018d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018d6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8018d72:	6013      	str	r3, [r2, #0]
 8018d74:	f000 bd28 	b.w	80197c8 <_dtoa_r+0xb18>
 8018d78:	aa14      	add	r2, sp, #80	; 0x50
 8018d7a:	a915      	add	r1, sp, #84	; 0x54
 8018d7c:	ec47 6b10 	vmov	d0, r6, r7
 8018d80:	4620      	mov	r0, r4
 8018d82:	f001 fbdd 	bl	801a540 <__d2b>
 8018d86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8018d8a:	9004      	str	r0, [sp, #16]
 8018d8c:	2d00      	cmp	r5, #0
 8018d8e:	d07c      	beq.n	8018e8a <_dtoa_r+0x1da>
 8018d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018d94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8018d98:	46b2      	mov	sl, r6
 8018d9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8018d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018da2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8018da6:	2200      	movs	r2, #0
 8018da8:	4b8b      	ldr	r3, [pc, #556]	; (8018fd8 <_dtoa_r+0x328>)
 8018daa:	4650      	mov	r0, sl
 8018dac:	4659      	mov	r1, fp
 8018dae:	f7e7 fa7b 	bl	80002a8 <__aeabi_dsub>
 8018db2:	a381      	add	r3, pc, #516	; (adr r3, 8018fb8 <_dtoa_r+0x308>)
 8018db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db8:	f7e7 fc2e 	bl	8000618 <__aeabi_dmul>
 8018dbc:	a380      	add	r3, pc, #512	; (adr r3, 8018fc0 <_dtoa_r+0x310>)
 8018dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc2:	f7e7 fa73 	bl	80002ac <__adddf3>
 8018dc6:	4606      	mov	r6, r0
 8018dc8:	4628      	mov	r0, r5
 8018dca:	460f      	mov	r7, r1
 8018dcc:	f7e7 fbba 	bl	8000544 <__aeabi_i2d>
 8018dd0:	a37d      	add	r3, pc, #500	; (adr r3, 8018fc8 <_dtoa_r+0x318>)
 8018dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd6:	f7e7 fc1f 	bl	8000618 <__aeabi_dmul>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	4630      	mov	r0, r6
 8018de0:	4639      	mov	r1, r7
 8018de2:	f7e7 fa63 	bl	80002ac <__adddf3>
 8018de6:	4606      	mov	r6, r0
 8018de8:	460f      	mov	r7, r1
 8018dea:	f7e7 fec5 	bl	8000b78 <__aeabi_d2iz>
 8018dee:	2200      	movs	r2, #0
 8018df0:	4682      	mov	sl, r0
 8018df2:	2300      	movs	r3, #0
 8018df4:	4630      	mov	r0, r6
 8018df6:	4639      	mov	r1, r7
 8018df8:	f7e7 fe80 	bl	8000afc <__aeabi_dcmplt>
 8018dfc:	b148      	cbz	r0, 8018e12 <_dtoa_r+0x162>
 8018dfe:	4650      	mov	r0, sl
 8018e00:	f7e7 fba0 	bl	8000544 <__aeabi_i2d>
 8018e04:	4632      	mov	r2, r6
 8018e06:	463b      	mov	r3, r7
 8018e08:	f7e7 fe6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e0c:	b908      	cbnz	r0, 8018e12 <_dtoa_r+0x162>
 8018e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e12:	f1ba 0f16 	cmp.w	sl, #22
 8018e16:	d859      	bhi.n	8018ecc <_dtoa_r+0x21c>
 8018e18:	4970      	ldr	r1, [pc, #448]	; (8018fdc <_dtoa_r+0x32c>)
 8018e1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e26:	f7e7 fe87 	bl	8000b38 <__aeabi_dcmpgt>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d050      	beq.n	8018ed0 <_dtoa_r+0x220>
 8018e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e32:	2300      	movs	r3, #0
 8018e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e38:	1b5d      	subs	r5, r3, r5
 8018e3a:	f1b5 0801 	subs.w	r8, r5, #1
 8018e3e:	bf49      	itett	mi
 8018e40:	f1c5 0301 	rsbmi	r3, r5, #1
 8018e44:	2300      	movpl	r3, #0
 8018e46:	9305      	strmi	r3, [sp, #20]
 8018e48:	f04f 0800 	movmi.w	r8, #0
 8018e4c:	bf58      	it	pl
 8018e4e:	9305      	strpl	r3, [sp, #20]
 8018e50:	f1ba 0f00 	cmp.w	sl, #0
 8018e54:	db3e      	blt.n	8018ed4 <_dtoa_r+0x224>
 8018e56:	2300      	movs	r3, #0
 8018e58:	44d0      	add	r8, sl
 8018e5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018e5e:	9307      	str	r3, [sp, #28]
 8018e60:	9b06      	ldr	r3, [sp, #24]
 8018e62:	2b09      	cmp	r3, #9
 8018e64:	f200 8090 	bhi.w	8018f88 <_dtoa_r+0x2d8>
 8018e68:	2b05      	cmp	r3, #5
 8018e6a:	bfc4      	itt	gt
 8018e6c:	3b04      	subgt	r3, #4
 8018e6e:	9306      	strgt	r3, [sp, #24]
 8018e70:	9b06      	ldr	r3, [sp, #24]
 8018e72:	f1a3 0302 	sub.w	r3, r3, #2
 8018e76:	bfcc      	ite	gt
 8018e78:	2500      	movgt	r5, #0
 8018e7a:	2501      	movle	r5, #1
 8018e7c:	2b03      	cmp	r3, #3
 8018e7e:	f200 808f 	bhi.w	8018fa0 <_dtoa_r+0x2f0>
 8018e82:	e8df f003 	tbb	[pc, r3]
 8018e86:	7f7d      	.short	0x7f7d
 8018e88:	7131      	.short	0x7131
 8018e8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8018e8e:	441d      	add	r5, r3
 8018e90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8018e94:	2820      	cmp	r0, #32
 8018e96:	dd13      	ble.n	8018ec0 <_dtoa_r+0x210>
 8018e98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8018e9c:	9b00      	ldr	r3, [sp, #0]
 8018e9e:	fa08 f800 	lsl.w	r8, r8, r0
 8018ea2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8018ea6:	fa23 f000 	lsr.w	r0, r3, r0
 8018eaa:	ea48 0000 	orr.w	r0, r8, r0
 8018eae:	f7e7 fb39 	bl	8000524 <__aeabi_ui2d>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	4682      	mov	sl, r0
 8018eb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8018eba:	3d01      	subs	r5, #1
 8018ebc:	9313      	str	r3, [sp, #76]	; 0x4c
 8018ebe:	e772      	b.n	8018da6 <_dtoa_r+0xf6>
 8018ec0:	9b00      	ldr	r3, [sp, #0]
 8018ec2:	f1c0 0020 	rsb	r0, r0, #32
 8018ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8018eca:	e7f0      	b.n	8018eae <_dtoa_r+0x1fe>
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e7b1      	b.n	8018e34 <_dtoa_r+0x184>
 8018ed0:	900f      	str	r0, [sp, #60]	; 0x3c
 8018ed2:	e7b0      	b.n	8018e36 <_dtoa_r+0x186>
 8018ed4:	9b05      	ldr	r3, [sp, #20]
 8018ed6:	eba3 030a 	sub.w	r3, r3, sl
 8018eda:	9305      	str	r3, [sp, #20]
 8018edc:	f1ca 0300 	rsb	r3, sl, #0
 8018ee0:	9307      	str	r3, [sp, #28]
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8018ee6:	e7bb      	b.n	8018e60 <_dtoa_r+0x1b0>
 8018ee8:	2301      	movs	r3, #1
 8018eea:	930a      	str	r3, [sp, #40]	; 0x28
 8018eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	dd59      	ble.n	8018fa6 <_dtoa_r+0x2f6>
 8018ef2:	9302      	str	r3, [sp, #8]
 8018ef4:	4699      	mov	r9, r3
 8018ef6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018ef8:	2200      	movs	r2, #0
 8018efa:	6072      	str	r2, [r6, #4]
 8018efc:	2204      	movs	r2, #4
 8018efe:	f102 0014 	add.w	r0, r2, #20
 8018f02:	4298      	cmp	r0, r3
 8018f04:	6871      	ldr	r1, [r6, #4]
 8018f06:	d953      	bls.n	8018fb0 <_dtoa_r+0x300>
 8018f08:	4620      	mov	r0, r4
 8018f0a:	f000 ffd7 	bl	8019ebc <_Balloc>
 8018f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f10:	6030      	str	r0, [r6, #0]
 8018f12:	f1b9 0f0e 	cmp.w	r9, #14
 8018f16:	f8d3 b000 	ldr.w	fp, [r3]
 8018f1a:	f200 80e6 	bhi.w	80190ea <_dtoa_r+0x43a>
 8018f1e:	2d00      	cmp	r5, #0
 8018f20:	f000 80e3 	beq.w	80190ea <_dtoa_r+0x43a>
 8018f24:	ed9d 7b00 	vldr	d7, [sp]
 8018f28:	f1ba 0f00 	cmp.w	sl, #0
 8018f2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018f30:	dd74      	ble.n	801901c <_dtoa_r+0x36c>
 8018f32:	4a2a      	ldr	r2, [pc, #168]	; (8018fdc <_dtoa_r+0x32c>)
 8018f34:	f00a 030f 	and.w	r3, sl, #15
 8018f38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018f3c:	ed93 7b00 	vldr	d7, [r3]
 8018f40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8018f44:	06f0      	lsls	r0, r6, #27
 8018f46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018f4a:	d565      	bpl.n	8019018 <_dtoa_r+0x368>
 8018f4c:	4b24      	ldr	r3, [pc, #144]	; (8018fe0 <_dtoa_r+0x330>)
 8018f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018f52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018f56:	f7e7 fc89 	bl	800086c <__aeabi_ddiv>
 8018f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8018f5e:	f006 060f 	and.w	r6, r6, #15
 8018f62:	2503      	movs	r5, #3
 8018f64:	4f1e      	ldr	r7, [pc, #120]	; (8018fe0 <_dtoa_r+0x330>)
 8018f66:	e04c      	b.n	8019002 <_dtoa_r+0x352>
 8018f68:	2301      	movs	r3, #1
 8018f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8018f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f6e:	4453      	add	r3, sl
 8018f70:	f103 0901 	add.w	r9, r3, #1
 8018f74:	9302      	str	r3, [sp, #8]
 8018f76:	464b      	mov	r3, r9
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	bfb8      	it	lt
 8018f7c:	2301      	movlt	r3, #1
 8018f7e:	e7ba      	b.n	8018ef6 <_dtoa_r+0x246>
 8018f80:	2300      	movs	r3, #0
 8018f82:	e7b2      	b.n	8018eea <_dtoa_r+0x23a>
 8018f84:	2300      	movs	r3, #0
 8018f86:	e7f0      	b.n	8018f6a <_dtoa_r+0x2ba>
 8018f88:	2501      	movs	r5, #1
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	9306      	str	r3, [sp, #24]
 8018f8e:	950a      	str	r5, [sp, #40]	; 0x28
 8018f90:	f04f 33ff 	mov.w	r3, #4294967295
 8018f94:	9302      	str	r3, [sp, #8]
 8018f96:	4699      	mov	r9, r3
 8018f98:	2200      	movs	r2, #0
 8018f9a:	2312      	movs	r3, #18
 8018f9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8018f9e:	e7aa      	b.n	8018ef6 <_dtoa_r+0x246>
 8018fa0:	2301      	movs	r3, #1
 8018fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8018fa4:	e7f4      	b.n	8018f90 <_dtoa_r+0x2e0>
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	9302      	str	r3, [sp, #8]
 8018faa:	4699      	mov	r9, r3
 8018fac:	461a      	mov	r2, r3
 8018fae:	e7f5      	b.n	8018f9c <_dtoa_r+0x2ec>
 8018fb0:	3101      	adds	r1, #1
 8018fb2:	6071      	str	r1, [r6, #4]
 8018fb4:	0052      	lsls	r2, r2, #1
 8018fb6:	e7a2      	b.n	8018efe <_dtoa_r+0x24e>
 8018fb8:	636f4361 	.word	0x636f4361
 8018fbc:	3fd287a7 	.word	0x3fd287a7
 8018fc0:	8b60c8b3 	.word	0x8b60c8b3
 8018fc4:	3fc68a28 	.word	0x3fc68a28
 8018fc8:	509f79fb 	.word	0x509f79fb
 8018fcc:	3fd34413 	.word	0x3fd34413
 8018fd0:	7ff00000 	.word	0x7ff00000
 8018fd4:	0801e46d 	.word	0x0801e46d
 8018fd8:	3ff80000 	.word	0x3ff80000
 8018fdc:	0801e528 	.word	0x0801e528
 8018fe0:	0801e500 	.word	0x0801e500
 8018fe4:	0801e4f1 	.word	0x0801e4f1
 8018fe8:	07f1      	lsls	r1, r6, #31
 8018fea:	d508      	bpl.n	8018ffe <_dtoa_r+0x34e>
 8018fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ff4:	f7e7 fb10 	bl	8000618 <__aeabi_dmul>
 8018ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018ffc:	3501      	adds	r5, #1
 8018ffe:	1076      	asrs	r6, r6, #1
 8019000:	3708      	adds	r7, #8
 8019002:	2e00      	cmp	r6, #0
 8019004:	d1f0      	bne.n	8018fe8 <_dtoa_r+0x338>
 8019006:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801900a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801900e:	f7e7 fc2d 	bl	800086c <__aeabi_ddiv>
 8019012:	e9cd 0100 	strd	r0, r1, [sp]
 8019016:	e01a      	b.n	801904e <_dtoa_r+0x39e>
 8019018:	2502      	movs	r5, #2
 801901a:	e7a3      	b.n	8018f64 <_dtoa_r+0x2b4>
 801901c:	f000 80a0 	beq.w	8019160 <_dtoa_r+0x4b0>
 8019020:	f1ca 0600 	rsb	r6, sl, #0
 8019024:	4b9f      	ldr	r3, [pc, #636]	; (80192a4 <_dtoa_r+0x5f4>)
 8019026:	4fa0      	ldr	r7, [pc, #640]	; (80192a8 <_dtoa_r+0x5f8>)
 8019028:	f006 020f 	and.w	r2, r6, #15
 801902c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019034:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019038:	f7e7 faee 	bl	8000618 <__aeabi_dmul>
 801903c:	e9cd 0100 	strd	r0, r1, [sp]
 8019040:	1136      	asrs	r6, r6, #4
 8019042:	2300      	movs	r3, #0
 8019044:	2502      	movs	r5, #2
 8019046:	2e00      	cmp	r6, #0
 8019048:	d17f      	bne.n	801914a <_dtoa_r+0x49a>
 801904a:	2b00      	cmp	r3, #0
 801904c:	d1e1      	bne.n	8019012 <_dtoa_r+0x362>
 801904e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019050:	2b00      	cmp	r3, #0
 8019052:	f000 8087 	beq.w	8019164 <_dtoa_r+0x4b4>
 8019056:	e9dd 6700 	ldrd	r6, r7, [sp]
 801905a:	2200      	movs	r2, #0
 801905c:	4b93      	ldr	r3, [pc, #588]	; (80192ac <_dtoa_r+0x5fc>)
 801905e:	4630      	mov	r0, r6
 8019060:	4639      	mov	r1, r7
 8019062:	f7e7 fd4b 	bl	8000afc <__aeabi_dcmplt>
 8019066:	2800      	cmp	r0, #0
 8019068:	d07c      	beq.n	8019164 <_dtoa_r+0x4b4>
 801906a:	f1b9 0f00 	cmp.w	r9, #0
 801906e:	d079      	beq.n	8019164 <_dtoa_r+0x4b4>
 8019070:	9b02      	ldr	r3, [sp, #8]
 8019072:	2b00      	cmp	r3, #0
 8019074:	dd35      	ble.n	80190e2 <_dtoa_r+0x432>
 8019076:	f10a 33ff 	add.w	r3, sl, #4294967295
 801907a:	9308      	str	r3, [sp, #32]
 801907c:	4639      	mov	r1, r7
 801907e:	2200      	movs	r2, #0
 8019080:	4b8b      	ldr	r3, [pc, #556]	; (80192b0 <_dtoa_r+0x600>)
 8019082:	4630      	mov	r0, r6
 8019084:	f7e7 fac8 	bl	8000618 <__aeabi_dmul>
 8019088:	e9cd 0100 	strd	r0, r1, [sp]
 801908c:	9f02      	ldr	r7, [sp, #8]
 801908e:	3501      	adds	r5, #1
 8019090:	4628      	mov	r0, r5
 8019092:	f7e7 fa57 	bl	8000544 <__aeabi_i2d>
 8019096:	e9dd 2300 	ldrd	r2, r3, [sp]
 801909a:	f7e7 fabd 	bl	8000618 <__aeabi_dmul>
 801909e:	2200      	movs	r2, #0
 80190a0:	4b84      	ldr	r3, [pc, #528]	; (80192b4 <_dtoa_r+0x604>)
 80190a2:	f7e7 f903 	bl	80002ac <__adddf3>
 80190a6:	4605      	mov	r5, r0
 80190a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80190ac:	2f00      	cmp	r7, #0
 80190ae:	d15d      	bne.n	801916c <_dtoa_r+0x4bc>
 80190b0:	2200      	movs	r2, #0
 80190b2:	4b81      	ldr	r3, [pc, #516]	; (80192b8 <_dtoa_r+0x608>)
 80190b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190b8:	f7e7 f8f6 	bl	80002a8 <__aeabi_dsub>
 80190bc:	462a      	mov	r2, r5
 80190be:	4633      	mov	r3, r6
 80190c0:	e9cd 0100 	strd	r0, r1, [sp]
 80190c4:	f7e7 fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80190c8:	2800      	cmp	r0, #0
 80190ca:	f040 8288 	bne.w	80195de <_dtoa_r+0x92e>
 80190ce:	462a      	mov	r2, r5
 80190d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80190d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190d8:	f7e7 fd10 	bl	8000afc <__aeabi_dcmplt>
 80190dc:	2800      	cmp	r0, #0
 80190de:	f040 827c 	bne.w	80195da <_dtoa_r+0x92a>
 80190e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80190e6:	e9cd 2300 	strd	r2, r3, [sp]
 80190ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	f2c0 8150 	blt.w	8019392 <_dtoa_r+0x6e2>
 80190f2:	f1ba 0f0e 	cmp.w	sl, #14
 80190f6:	f300 814c 	bgt.w	8019392 <_dtoa_r+0x6e2>
 80190fa:	4b6a      	ldr	r3, [pc, #424]	; (80192a4 <_dtoa_r+0x5f4>)
 80190fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019100:	ed93 7b00 	vldr	d7, [r3]
 8019104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019106:	2b00      	cmp	r3, #0
 8019108:	ed8d 7b02 	vstr	d7, [sp, #8]
 801910c:	f280 80d8 	bge.w	80192c0 <_dtoa_r+0x610>
 8019110:	f1b9 0f00 	cmp.w	r9, #0
 8019114:	f300 80d4 	bgt.w	80192c0 <_dtoa_r+0x610>
 8019118:	f040 825e 	bne.w	80195d8 <_dtoa_r+0x928>
 801911c:	2200      	movs	r2, #0
 801911e:	4b66      	ldr	r3, [pc, #408]	; (80192b8 <_dtoa_r+0x608>)
 8019120:	ec51 0b17 	vmov	r0, r1, d7
 8019124:	f7e7 fa78 	bl	8000618 <__aeabi_dmul>
 8019128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801912c:	f7e7 fcfa 	bl	8000b24 <__aeabi_dcmpge>
 8019130:	464f      	mov	r7, r9
 8019132:	464e      	mov	r6, r9
 8019134:	2800      	cmp	r0, #0
 8019136:	f040 8234 	bne.w	80195a2 <_dtoa_r+0x8f2>
 801913a:	2331      	movs	r3, #49	; 0x31
 801913c:	f10b 0501 	add.w	r5, fp, #1
 8019140:	f88b 3000 	strb.w	r3, [fp]
 8019144:	f10a 0a01 	add.w	sl, sl, #1
 8019148:	e22f      	b.n	80195aa <_dtoa_r+0x8fa>
 801914a:	07f2      	lsls	r2, r6, #31
 801914c:	d505      	bpl.n	801915a <_dtoa_r+0x4aa>
 801914e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019152:	f7e7 fa61 	bl	8000618 <__aeabi_dmul>
 8019156:	3501      	adds	r5, #1
 8019158:	2301      	movs	r3, #1
 801915a:	1076      	asrs	r6, r6, #1
 801915c:	3708      	adds	r7, #8
 801915e:	e772      	b.n	8019046 <_dtoa_r+0x396>
 8019160:	2502      	movs	r5, #2
 8019162:	e774      	b.n	801904e <_dtoa_r+0x39e>
 8019164:	f8cd a020 	str.w	sl, [sp, #32]
 8019168:	464f      	mov	r7, r9
 801916a:	e791      	b.n	8019090 <_dtoa_r+0x3e0>
 801916c:	4b4d      	ldr	r3, [pc, #308]	; (80192a4 <_dtoa_r+0x5f4>)
 801916e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019172:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8019176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019178:	2b00      	cmp	r3, #0
 801917a:	d047      	beq.n	801920c <_dtoa_r+0x55c>
 801917c:	4602      	mov	r2, r0
 801917e:	460b      	mov	r3, r1
 8019180:	2000      	movs	r0, #0
 8019182:	494e      	ldr	r1, [pc, #312]	; (80192bc <_dtoa_r+0x60c>)
 8019184:	f7e7 fb72 	bl	800086c <__aeabi_ddiv>
 8019188:	462a      	mov	r2, r5
 801918a:	4633      	mov	r3, r6
 801918c:	f7e7 f88c 	bl	80002a8 <__aeabi_dsub>
 8019190:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019194:	465d      	mov	r5, fp
 8019196:	e9dd 0100 	ldrd	r0, r1, [sp]
 801919a:	f7e7 fced 	bl	8000b78 <__aeabi_d2iz>
 801919e:	4606      	mov	r6, r0
 80191a0:	f7e7 f9d0 	bl	8000544 <__aeabi_i2d>
 80191a4:	4602      	mov	r2, r0
 80191a6:	460b      	mov	r3, r1
 80191a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191ac:	f7e7 f87c 	bl	80002a8 <__aeabi_dsub>
 80191b0:	3630      	adds	r6, #48	; 0x30
 80191b2:	f805 6b01 	strb.w	r6, [r5], #1
 80191b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80191ba:	e9cd 0100 	strd	r0, r1, [sp]
 80191be:	f7e7 fc9d 	bl	8000afc <__aeabi_dcmplt>
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d163      	bne.n	801928e <_dtoa_r+0x5de>
 80191c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80191ca:	2000      	movs	r0, #0
 80191cc:	4937      	ldr	r1, [pc, #220]	; (80192ac <_dtoa_r+0x5fc>)
 80191ce:	f7e7 f86b 	bl	80002a8 <__aeabi_dsub>
 80191d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80191d6:	f7e7 fc91 	bl	8000afc <__aeabi_dcmplt>
 80191da:	2800      	cmp	r0, #0
 80191dc:	f040 80b7 	bne.w	801934e <_dtoa_r+0x69e>
 80191e0:	eba5 030b 	sub.w	r3, r5, fp
 80191e4:	429f      	cmp	r7, r3
 80191e6:	f77f af7c 	ble.w	80190e2 <_dtoa_r+0x432>
 80191ea:	2200      	movs	r2, #0
 80191ec:	4b30      	ldr	r3, [pc, #192]	; (80192b0 <_dtoa_r+0x600>)
 80191ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80191f2:	f7e7 fa11 	bl	8000618 <__aeabi_dmul>
 80191f6:	2200      	movs	r2, #0
 80191f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80191fc:	4b2c      	ldr	r3, [pc, #176]	; (80192b0 <_dtoa_r+0x600>)
 80191fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019202:	f7e7 fa09 	bl	8000618 <__aeabi_dmul>
 8019206:	e9cd 0100 	strd	r0, r1, [sp]
 801920a:	e7c4      	b.n	8019196 <_dtoa_r+0x4e6>
 801920c:	462a      	mov	r2, r5
 801920e:	4633      	mov	r3, r6
 8019210:	f7e7 fa02 	bl	8000618 <__aeabi_dmul>
 8019214:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019218:	eb0b 0507 	add.w	r5, fp, r7
 801921c:	465e      	mov	r6, fp
 801921e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019222:	f7e7 fca9 	bl	8000b78 <__aeabi_d2iz>
 8019226:	4607      	mov	r7, r0
 8019228:	f7e7 f98c 	bl	8000544 <__aeabi_i2d>
 801922c:	3730      	adds	r7, #48	; 0x30
 801922e:	4602      	mov	r2, r0
 8019230:	460b      	mov	r3, r1
 8019232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019236:	f7e7 f837 	bl	80002a8 <__aeabi_dsub>
 801923a:	f806 7b01 	strb.w	r7, [r6], #1
 801923e:	42ae      	cmp	r6, r5
 8019240:	e9cd 0100 	strd	r0, r1, [sp]
 8019244:	f04f 0200 	mov.w	r2, #0
 8019248:	d126      	bne.n	8019298 <_dtoa_r+0x5e8>
 801924a:	4b1c      	ldr	r3, [pc, #112]	; (80192bc <_dtoa_r+0x60c>)
 801924c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019250:	f7e7 f82c 	bl	80002ac <__adddf3>
 8019254:	4602      	mov	r2, r0
 8019256:	460b      	mov	r3, r1
 8019258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801925c:	f7e7 fc6c 	bl	8000b38 <__aeabi_dcmpgt>
 8019260:	2800      	cmp	r0, #0
 8019262:	d174      	bne.n	801934e <_dtoa_r+0x69e>
 8019264:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019268:	2000      	movs	r0, #0
 801926a:	4914      	ldr	r1, [pc, #80]	; (80192bc <_dtoa_r+0x60c>)
 801926c:	f7e7 f81c 	bl	80002a8 <__aeabi_dsub>
 8019270:	4602      	mov	r2, r0
 8019272:	460b      	mov	r3, r1
 8019274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019278:	f7e7 fc40 	bl	8000afc <__aeabi_dcmplt>
 801927c:	2800      	cmp	r0, #0
 801927e:	f43f af30 	beq.w	80190e2 <_dtoa_r+0x432>
 8019282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019286:	2b30      	cmp	r3, #48	; 0x30
 8019288:	f105 32ff 	add.w	r2, r5, #4294967295
 801928c:	d002      	beq.n	8019294 <_dtoa_r+0x5e4>
 801928e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019292:	e04a      	b.n	801932a <_dtoa_r+0x67a>
 8019294:	4615      	mov	r5, r2
 8019296:	e7f4      	b.n	8019282 <_dtoa_r+0x5d2>
 8019298:	4b05      	ldr	r3, [pc, #20]	; (80192b0 <_dtoa_r+0x600>)
 801929a:	f7e7 f9bd 	bl	8000618 <__aeabi_dmul>
 801929e:	e9cd 0100 	strd	r0, r1, [sp]
 80192a2:	e7bc      	b.n	801921e <_dtoa_r+0x56e>
 80192a4:	0801e528 	.word	0x0801e528
 80192a8:	0801e500 	.word	0x0801e500
 80192ac:	3ff00000 	.word	0x3ff00000
 80192b0:	40240000 	.word	0x40240000
 80192b4:	401c0000 	.word	0x401c0000
 80192b8:	40140000 	.word	0x40140000
 80192bc:	3fe00000 	.word	0x3fe00000
 80192c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80192c4:	465d      	mov	r5, fp
 80192c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80192ca:	4630      	mov	r0, r6
 80192cc:	4639      	mov	r1, r7
 80192ce:	f7e7 facd 	bl	800086c <__aeabi_ddiv>
 80192d2:	f7e7 fc51 	bl	8000b78 <__aeabi_d2iz>
 80192d6:	4680      	mov	r8, r0
 80192d8:	f7e7 f934 	bl	8000544 <__aeabi_i2d>
 80192dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80192e0:	f7e7 f99a 	bl	8000618 <__aeabi_dmul>
 80192e4:	4602      	mov	r2, r0
 80192e6:	460b      	mov	r3, r1
 80192e8:	4630      	mov	r0, r6
 80192ea:	4639      	mov	r1, r7
 80192ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80192f0:	f7e6 ffda 	bl	80002a8 <__aeabi_dsub>
 80192f4:	f805 6b01 	strb.w	r6, [r5], #1
 80192f8:	eba5 060b 	sub.w	r6, r5, fp
 80192fc:	45b1      	cmp	r9, r6
 80192fe:	4602      	mov	r2, r0
 8019300:	460b      	mov	r3, r1
 8019302:	d139      	bne.n	8019378 <_dtoa_r+0x6c8>
 8019304:	f7e6 ffd2 	bl	80002ac <__adddf3>
 8019308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801930c:	4606      	mov	r6, r0
 801930e:	460f      	mov	r7, r1
 8019310:	f7e7 fc12 	bl	8000b38 <__aeabi_dcmpgt>
 8019314:	b9c8      	cbnz	r0, 801934a <_dtoa_r+0x69a>
 8019316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801931a:	4630      	mov	r0, r6
 801931c:	4639      	mov	r1, r7
 801931e:	f7e7 fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8019322:	b110      	cbz	r0, 801932a <_dtoa_r+0x67a>
 8019324:	f018 0f01 	tst.w	r8, #1
 8019328:	d10f      	bne.n	801934a <_dtoa_r+0x69a>
 801932a:	9904      	ldr	r1, [sp, #16]
 801932c:	4620      	mov	r0, r4
 801932e:	f000 fdf9 	bl	8019f24 <_Bfree>
 8019332:	2300      	movs	r3, #0
 8019334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019336:	702b      	strb	r3, [r5, #0]
 8019338:	f10a 0301 	add.w	r3, sl, #1
 801933c:	6013      	str	r3, [r2, #0]
 801933e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019340:	2b00      	cmp	r3, #0
 8019342:	f000 8241 	beq.w	80197c8 <_dtoa_r+0xb18>
 8019346:	601d      	str	r5, [r3, #0]
 8019348:	e23e      	b.n	80197c8 <_dtoa_r+0xb18>
 801934a:	f8cd a020 	str.w	sl, [sp, #32]
 801934e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019352:	2a39      	cmp	r2, #57	; 0x39
 8019354:	f105 33ff 	add.w	r3, r5, #4294967295
 8019358:	d108      	bne.n	801936c <_dtoa_r+0x6bc>
 801935a:	459b      	cmp	fp, r3
 801935c:	d10a      	bne.n	8019374 <_dtoa_r+0x6c4>
 801935e:	9b08      	ldr	r3, [sp, #32]
 8019360:	3301      	adds	r3, #1
 8019362:	9308      	str	r3, [sp, #32]
 8019364:	2330      	movs	r3, #48	; 0x30
 8019366:	f88b 3000 	strb.w	r3, [fp]
 801936a:	465b      	mov	r3, fp
 801936c:	781a      	ldrb	r2, [r3, #0]
 801936e:	3201      	adds	r2, #1
 8019370:	701a      	strb	r2, [r3, #0]
 8019372:	e78c      	b.n	801928e <_dtoa_r+0x5de>
 8019374:	461d      	mov	r5, r3
 8019376:	e7ea      	b.n	801934e <_dtoa_r+0x69e>
 8019378:	2200      	movs	r2, #0
 801937a:	4b9b      	ldr	r3, [pc, #620]	; (80195e8 <_dtoa_r+0x938>)
 801937c:	f7e7 f94c 	bl	8000618 <__aeabi_dmul>
 8019380:	2200      	movs	r2, #0
 8019382:	2300      	movs	r3, #0
 8019384:	4606      	mov	r6, r0
 8019386:	460f      	mov	r7, r1
 8019388:	f7e7 fbae 	bl	8000ae8 <__aeabi_dcmpeq>
 801938c:	2800      	cmp	r0, #0
 801938e:	d09a      	beq.n	80192c6 <_dtoa_r+0x616>
 8019390:	e7cb      	b.n	801932a <_dtoa_r+0x67a>
 8019392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019394:	2a00      	cmp	r2, #0
 8019396:	f000 808b 	beq.w	80194b0 <_dtoa_r+0x800>
 801939a:	9a06      	ldr	r2, [sp, #24]
 801939c:	2a01      	cmp	r2, #1
 801939e:	dc6e      	bgt.n	801947e <_dtoa_r+0x7ce>
 80193a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80193a2:	2a00      	cmp	r2, #0
 80193a4:	d067      	beq.n	8019476 <_dtoa_r+0x7c6>
 80193a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80193aa:	9f07      	ldr	r7, [sp, #28]
 80193ac:	9d05      	ldr	r5, [sp, #20]
 80193ae:	9a05      	ldr	r2, [sp, #20]
 80193b0:	2101      	movs	r1, #1
 80193b2:	441a      	add	r2, r3
 80193b4:	4620      	mov	r0, r4
 80193b6:	9205      	str	r2, [sp, #20]
 80193b8:	4498      	add	r8, r3
 80193ba:	f000 fe91 	bl	801a0e0 <__i2b>
 80193be:	4606      	mov	r6, r0
 80193c0:	2d00      	cmp	r5, #0
 80193c2:	dd0c      	ble.n	80193de <_dtoa_r+0x72e>
 80193c4:	f1b8 0f00 	cmp.w	r8, #0
 80193c8:	dd09      	ble.n	80193de <_dtoa_r+0x72e>
 80193ca:	4545      	cmp	r5, r8
 80193cc:	9a05      	ldr	r2, [sp, #20]
 80193ce:	462b      	mov	r3, r5
 80193d0:	bfa8      	it	ge
 80193d2:	4643      	movge	r3, r8
 80193d4:	1ad2      	subs	r2, r2, r3
 80193d6:	9205      	str	r2, [sp, #20]
 80193d8:	1aed      	subs	r5, r5, r3
 80193da:	eba8 0803 	sub.w	r8, r8, r3
 80193de:	9b07      	ldr	r3, [sp, #28]
 80193e0:	b1eb      	cbz	r3, 801941e <_dtoa_r+0x76e>
 80193e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d067      	beq.n	80194b8 <_dtoa_r+0x808>
 80193e8:	b18f      	cbz	r7, 801940e <_dtoa_r+0x75e>
 80193ea:	4631      	mov	r1, r6
 80193ec:	463a      	mov	r2, r7
 80193ee:	4620      	mov	r0, r4
 80193f0:	f000 ff16 	bl	801a220 <__pow5mult>
 80193f4:	9a04      	ldr	r2, [sp, #16]
 80193f6:	4601      	mov	r1, r0
 80193f8:	4606      	mov	r6, r0
 80193fa:	4620      	mov	r0, r4
 80193fc:	f000 fe79 	bl	801a0f2 <__multiply>
 8019400:	9904      	ldr	r1, [sp, #16]
 8019402:	9008      	str	r0, [sp, #32]
 8019404:	4620      	mov	r0, r4
 8019406:	f000 fd8d 	bl	8019f24 <_Bfree>
 801940a:	9b08      	ldr	r3, [sp, #32]
 801940c:	9304      	str	r3, [sp, #16]
 801940e:	9b07      	ldr	r3, [sp, #28]
 8019410:	1bda      	subs	r2, r3, r7
 8019412:	d004      	beq.n	801941e <_dtoa_r+0x76e>
 8019414:	9904      	ldr	r1, [sp, #16]
 8019416:	4620      	mov	r0, r4
 8019418:	f000 ff02 	bl	801a220 <__pow5mult>
 801941c:	9004      	str	r0, [sp, #16]
 801941e:	2101      	movs	r1, #1
 8019420:	4620      	mov	r0, r4
 8019422:	f000 fe5d 	bl	801a0e0 <__i2b>
 8019426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019428:	4607      	mov	r7, r0
 801942a:	2b00      	cmp	r3, #0
 801942c:	f000 81d0 	beq.w	80197d0 <_dtoa_r+0xb20>
 8019430:	461a      	mov	r2, r3
 8019432:	4601      	mov	r1, r0
 8019434:	4620      	mov	r0, r4
 8019436:	f000 fef3 	bl	801a220 <__pow5mult>
 801943a:	9b06      	ldr	r3, [sp, #24]
 801943c:	2b01      	cmp	r3, #1
 801943e:	4607      	mov	r7, r0
 8019440:	dc40      	bgt.n	80194c4 <_dtoa_r+0x814>
 8019442:	9b00      	ldr	r3, [sp, #0]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d139      	bne.n	80194bc <_dtoa_r+0x80c>
 8019448:	9b01      	ldr	r3, [sp, #4]
 801944a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801944e:	2b00      	cmp	r3, #0
 8019450:	d136      	bne.n	80194c0 <_dtoa_r+0x810>
 8019452:	9b01      	ldr	r3, [sp, #4]
 8019454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019458:	0d1b      	lsrs	r3, r3, #20
 801945a:	051b      	lsls	r3, r3, #20
 801945c:	b12b      	cbz	r3, 801946a <_dtoa_r+0x7ba>
 801945e:	9b05      	ldr	r3, [sp, #20]
 8019460:	3301      	adds	r3, #1
 8019462:	9305      	str	r3, [sp, #20]
 8019464:	f108 0801 	add.w	r8, r8, #1
 8019468:	2301      	movs	r3, #1
 801946a:	9307      	str	r3, [sp, #28]
 801946c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801946e:	2b00      	cmp	r3, #0
 8019470:	d12a      	bne.n	80194c8 <_dtoa_r+0x818>
 8019472:	2001      	movs	r0, #1
 8019474:	e030      	b.n	80194d8 <_dtoa_r+0x828>
 8019476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019478:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801947c:	e795      	b.n	80193aa <_dtoa_r+0x6fa>
 801947e:	9b07      	ldr	r3, [sp, #28]
 8019480:	f109 37ff 	add.w	r7, r9, #4294967295
 8019484:	42bb      	cmp	r3, r7
 8019486:	bfbf      	itttt	lt
 8019488:	9b07      	ldrlt	r3, [sp, #28]
 801948a:	9707      	strlt	r7, [sp, #28]
 801948c:	1afa      	sublt	r2, r7, r3
 801948e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8019490:	bfbb      	ittet	lt
 8019492:	189b      	addlt	r3, r3, r2
 8019494:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019496:	1bdf      	subge	r7, r3, r7
 8019498:	2700      	movlt	r7, #0
 801949a:	f1b9 0f00 	cmp.w	r9, #0
 801949e:	bfb5      	itete	lt
 80194a0:	9b05      	ldrlt	r3, [sp, #20]
 80194a2:	9d05      	ldrge	r5, [sp, #20]
 80194a4:	eba3 0509 	sublt.w	r5, r3, r9
 80194a8:	464b      	movge	r3, r9
 80194aa:	bfb8      	it	lt
 80194ac:	2300      	movlt	r3, #0
 80194ae:	e77e      	b.n	80193ae <_dtoa_r+0x6fe>
 80194b0:	9f07      	ldr	r7, [sp, #28]
 80194b2:	9d05      	ldr	r5, [sp, #20]
 80194b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80194b6:	e783      	b.n	80193c0 <_dtoa_r+0x710>
 80194b8:	9a07      	ldr	r2, [sp, #28]
 80194ba:	e7ab      	b.n	8019414 <_dtoa_r+0x764>
 80194bc:	2300      	movs	r3, #0
 80194be:	e7d4      	b.n	801946a <_dtoa_r+0x7ba>
 80194c0:	9b00      	ldr	r3, [sp, #0]
 80194c2:	e7d2      	b.n	801946a <_dtoa_r+0x7ba>
 80194c4:	2300      	movs	r3, #0
 80194c6:	9307      	str	r3, [sp, #28]
 80194c8:	693b      	ldr	r3, [r7, #16]
 80194ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80194ce:	6918      	ldr	r0, [r3, #16]
 80194d0:	f000 fdb8 	bl	801a044 <__hi0bits>
 80194d4:	f1c0 0020 	rsb	r0, r0, #32
 80194d8:	4440      	add	r0, r8
 80194da:	f010 001f 	ands.w	r0, r0, #31
 80194de:	d047      	beq.n	8019570 <_dtoa_r+0x8c0>
 80194e0:	f1c0 0320 	rsb	r3, r0, #32
 80194e4:	2b04      	cmp	r3, #4
 80194e6:	dd3b      	ble.n	8019560 <_dtoa_r+0x8b0>
 80194e8:	9b05      	ldr	r3, [sp, #20]
 80194ea:	f1c0 001c 	rsb	r0, r0, #28
 80194ee:	4403      	add	r3, r0
 80194f0:	9305      	str	r3, [sp, #20]
 80194f2:	4405      	add	r5, r0
 80194f4:	4480      	add	r8, r0
 80194f6:	9b05      	ldr	r3, [sp, #20]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	dd05      	ble.n	8019508 <_dtoa_r+0x858>
 80194fc:	461a      	mov	r2, r3
 80194fe:	9904      	ldr	r1, [sp, #16]
 8019500:	4620      	mov	r0, r4
 8019502:	f000 fedb 	bl	801a2bc <__lshift>
 8019506:	9004      	str	r0, [sp, #16]
 8019508:	f1b8 0f00 	cmp.w	r8, #0
 801950c:	dd05      	ble.n	801951a <_dtoa_r+0x86a>
 801950e:	4639      	mov	r1, r7
 8019510:	4642      	mov	r2, r8
 8019512:	4620      	mov	r0, r4
 8019514:	f000 fed2 	bl	801a2bc <__lshift>
 8019518:	4607      	mov	r7, r0
 801951a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801951c:	b353      	cbz	r3, 8019574 <_dtoa_r+0x8c4>
 801951e:	4639      	mov	r1, r7
 8019520:	9804      	ldr	r0, [sp, #16]
 8019522:	f000 ff1f 	bl	801a364 <__mcmp>
 8019526:	2800      	cmp	r0, #0
 8019528:	da24      	bge.n	8019574 <_dtoa_r+0x8c4>
 801952a:	2300      	movs	r3, #0
 801952c:	220a      	movs	r2, #10
 801952e:	9904      	ldr	r1, [sp, #16]
 8019530:	4620      	mov	r0, r4
 8019532:	f000 fd0e 	bl	8019f52 <__multadd>
 8019536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019538:	9004      	str	r0, [sp, #16]
 801953a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801953e:	2b00      	cmp	r3, #0
 8019540:	f000 814d 	beq.w	80197de <_dtoa_r+0xb2e>
 8019544:	2300      	movs	r3, #0
 8019546:	4631      	mov	r1, r6
 8019548:	220a      	movs	r2, #10
 801954a:	4620      	mov	r0, r4
 801954c:	f000 fd01 	bl	8019f52 <__multadd>
 8019550:	9b02      	ldr	r3, [sp, #8]
 8019552:	2b00      	cmp	r3, #0
 8019554:	4606      	mov	r6, r0
 8019556:	dc4f      	bgt.n	80195f8 <_dtoa_r+0x948>
 8019558:	9b06      	ldr	r3, [sp, #24]
 801955a:	2b02      	cmp	r3, #2
 801955c:	dd4c      	ble.n	80195f8 <_dtoa_r+0x948>
 801955e:	e011      	b.n	8019584 <_dtoa_r+0x8d4>
 8019560:	d0c9      	beq.n	80194f6 <_dtoa_r+0x846>
 8019562:	9a05      	ldr	r2, [sp, #20]
 8019564:	331c      	adds	r3, #28
 8019566:	441a      	add	r2, r3
 8019568:	9205      	str	r2, [sp, #20]
 801956a:	441d      	add	r5, r3
 801956c:	4498      	add	r8, r3
 801956e:	e7c2      	b.n	80194f6 <_dtoa_r+0x846>
 8019570:	4603      	mov	r3, r0
 8019572:	e7f6      	b.n	8019562 <_dtoa_r+0x8b2>
 8019574:	f1b9 0f00 	cmp.w	r9, #0
 8019578:	dc38      	bgt.n	80195ec <_dtoa_r+0x93c>
 801957a:	9b06      	ldr	r3, [sp, #24]
 801957c:	2b02      	cmp	r3, #2
 801957e:	dd35      	ble.n	80195ec <_dtoa_r+0x93c>
 8019580:	f8cd 9008 	str.w	r9, [sp, #8]
 8019584:	9b02      	ldr	r3, [sp, #8]
 8019586:	b963      	cbnz	r3, 80195a2 <_dtoa_r+0x8f2>
 8019588:	4639      	mov	r1, r7
 801958a:	2205      	movs	r2, #5
 801958c:	4620      	mov	r0, r4
 801958e:	f000 fce0 	bl	8019f52 <__multadd>
 8019592:	4601      	mov	r1, r0
 8019594:	4607      	mov	r7, r0
 8019596:	9804      	ldr	r0, [sp, #16]
 8019598:	f000 fee4 	bl	801a364 <__mcmp>
 801959c:	2800      	cmp	r0, #0
 801959e:	f73f adcc 	bgt.w	801913a <_dtoa_r+0x48a>
 80195a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195a4:	465d      	mov	r5, fp
 80195a6:	ea6f 0a03 	mvn.w	sl, r3
 80195aa:	f04f 0900 	mov.w	r9, #0
 80195ae:	4639      	mov	r1, r7
 80195b0:	4620      	mov	r0, r4
 80195b2:	f000 fcb7 	bl	8019f24 <_Bfree>
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	f43f aeb7 	beq.w	801932a <_dtoa_r+0x67a>
 80195bc:	f1b9 0f00 	cmp.w	r9, #0
 80195c0:	d005      	beq.n	80195ce <_dtoa_r+0x91e>
 80195c2:	45b1      	cmp	r9, r6
 80195c4:	d003      	beq.n	80195ce <_dtoa_r+0x91e>
 80195c6:	4649      	mov	r1, r9
 80195c8:	4620      	mov	r0, r4
 80195ca:	f000 fcab 	bl	8019f24 <_Bfree>
 80195ce:	4631      	mov	r1, r6
 80195d0:	4620      	mov	r0, r4
 80195d2:	f000 fca7 	bl	8019f24 <_Bfree>
 80195d6:	e6a8      	b.n	801932a <_dtoa_r+0x67a>
 80195d8:	2700      	movs	r7, #0
 80195da:	463e      	mov	r6, r7
 80195dc:	e7e1      	b.n	80195a2 <_dtoa_r+0x8f2>
 80195de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80195e2:	463e      	mov	r6, r7
 80195e4:	e5a9      	b.n	801913a <_dtoa_r+0x48a>
 80195e6:	bf00      	nop
 80195e8:	40240000 	.word	0x40240000
 80195ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	f000 80fa 	beq.w	80197ec <_dtoa_r+0xb3c>
 80195f8:	2d00      	cmp	r5, #0
 80195fa:	dd05      	ble.n	8019608 <_dtoa_r+0x958>
 80195fc:	4631      	mov	r1, r6
 80195fe:	462a      	mov	r2, r5
 8019600:	4620      	mov	r0, r4
 8019602:	f000 fe5b 	bl	801a2bc <__lshift>
 8019606:	4606      	mov	r6, r0
 8019608:	9b07      	ldr	r3, [sp, #28]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d04c      	beq.n	80196a8 <_dtoa_r+0x9f8>
 801960e:	6871      	ldr	r1, [r6, #4]
 8019610:	4620      	mov	r0, r4
 8019612:	f000 fc53 	bl	8019ebc <_Balloc>
 8019616:	6932      	ldr	r2, [r6, #16]
 8019618:	3202      	adds	r2, #2
 801961a:	4605      	mov	r5, r0
 801961c:	0092      	lsls	r2, r2, #2
 801961e:	f106 010c 	add.w	r1, r6, #12
 8019622:	300c      	adds	r0, #12
 8019624:	f7fd fc44 	bl	8016eb0 <memcpy>
 8019628:	2201      	movs	r2, #1
 801962a:	4629      	mov	r1, r5
 801962c:	4620      	mov	r0, r4
 801962e:	f000 fe45 	bl	801a2bc <__lshift>
 8019632:	9b00      	ldr	r3, [sp, #0]
 8019634:	f8cd b014 	str.w	fp, [sp, #20]
 8019638:	f003 0301 	and.w	r3, r3, #1
 801963c:	46b1      	mov	r9, r6
 801963e:	9307      	str	r3, [sp, #28]
 8019640:	4606      	mov	r6, r0
 8019642:	4639      	mov	r1, r7
 8019644:	9804      	ldr	r0, [sp, #16]
 8019646:	f7ff faa7 	bl	8018b98 <quorem>
 801964a:	4649      	mov	r1, r9
 801964c:	4605      	mov	r5, r0
 801964e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019652:	9804      	ldr	r0, [sp, #16]
 8019654:	f000 fe86 	bl	801a364 <__mcmp>
 8019658:	4632      	mov	r2, r6
 801965a:	9000      	str	r0, [sp, #0]
 801965c:	4639      	mov	r1, r7
 801965e:	4620      	mov	r0, r4
 8019660:	f000 fe9a 	bl	801a398 <__mdiff>
 8019664:	68c3      	ldr	r3, [r0, #12]
 8019666:	4602      	mov	r2, r0
 8019668:	bb03      	cbnz	r3, 80196ac <_dtoa_r+0x9fc>
 801966a:	4601      	mov	r1, r0
 801966c:	9008      	str	r0, [sp, #32]
 801966e:	9804      	ldr	r0, [sp, #16]
 8019670:	f000 fe78 	bl	801a364 <__mcmp>
 8019674:	9a08      	ldr	r2, [sp, #32]
 8019676:	4603      	mov	r3, r0
 8019678:	4611      	mov	r1, r2
 801967a:	4620      	mov	r0, r4
 801967c:	9308      	str	r3, [sp, #32]
 801967e:	f000 fc51 	bl	8019f24 <_Bfree>
 8019682:	9b08      	ldr	r3, [sp, #32]
 8019684:	b9a3      	cbnz	r3, 80196b0 <_dtoa_r+0xa00>
 8019686:	9a06      	ldr	r2, [sp, #24]
 8019688:	b992      	cbnz	r2, 80196b0 <_dtoa_r+0xa00>
 801968a:	9a07      	ldr	r2, [sp, #28]
 801968c:	b982      	cbnz	r2, 80196b0 <_dtoa_r+0xa00>
 801968e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019692:	d029      	beq.n	80196e8 <_dtoa_r+0xa38>
 8019694:	9b00      	ldr	r3, [sp, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	dd01      	ble.n	801969e <_dtoa_r+0x9ee>
 801969a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801969e:	9b05      	ldr	r3, [sp, #20]
 80196a0:	1c5d      	adds	r5, r3, #1
 80196a2:	f883 8000 	strb.w	r8, [r3]
 80196a6:	e782      	b.n	80195ae <_dtoa_r+0x8fe>
 80196a8:	4630      	mov	r0, r6
 80196aa:	e7c2      	b.n	8019632 <_dtoa_r+0x982>
 80196ac:	2301      	movs	r3, #1
 80196ae:	e7e3      	b.n	8019678 <_dtoa_r+0x9c8>
 80196b0:	9a00      	ldr	r2, [sp, #0]
 80196b2:	2a00      	cmp	r2, #0
 80196b4:	db04      	blt.n	80196c0 <_dtoa_r+0xa10>
 80196b6:	d125      	bne.n	8019704 <_dtoa_r+0xa54>
 80196b8:	9a06      	ldr	r2, [sp, #24]
 80196ba:	bb1a      	cbnz	r2, 8019704 <_dtoa_r+0xa54>
 80196bc:	9a07      	ldr	r2, [sp, #28]
 80196be:	bb0a      	cbnz	r2, 8019704 <_dtoa_r+0xa54>
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	ddec      	ble.n	801969e <_dtoa_r+0x9ee>
 80196c4:	2201      	movs	r2, #1
 80196c6:	9904      	ldr	r1, [sp, #16]
 80196c8:	4620      	mov	r0, r4
 80196ca:	f000 fdf7 	bl	801a2bc <__lshift>
 80196ce:	4639      	mov	r1, r7
 80196d0:	9004      	str	r0, [sp, #16]
 80196d2:	f000 fe47 	bl	801a364 <__mcmp>
 80196d6:	2800      	cmp	r0, #0
 80196d8:	dc03      	bgt.n	80196e2 <_dtoa_r+0xa32>
 80196da:	d1e0      	bne.n	801969e <_dtoa_r+0x9ee>
 80196dc:	f018 0f01 	tst.w	r8, #1
 80196e0:	d0dd      	beq.n	801969e <_dtoa_r+0x9ee>
 80196e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80196e6:	d1d8      	bne.n	801969a <_dtoa_r+0x9ea>
 80196e8:	9b05      	ldr	r3, [sp, #20]
 80196ea:	9a05      	ldr	r2, [sp, #20]
 80196ec:	1c5d      	adds	r5, r3, #1
 80196ee:	2339      	movs	r3, #57	; 0x39
 80196f0:	7013      	strb	r3, [r2, #0]
 80196f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80196f6:	2b39      	cmp	r3, #57	; 0x39
 80196f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80196fc:	d04f      	beq.n	801979e <_dtoa_r+0xaee>
 80196fe:	3301      	adds	r3, #1
 8019700:	7013      	strb	r3, [r2, #0]
 8019702:	e754      	b.n	80195ae <_dtoa_r+0x8fe>
 8019704:	9a05      	ldr	r2, [sp, #20]
 8019706:	2b00      	cmp	r3, #0
 8019708:	f102 0501 	add.w	r5, r2, #1
 801970c:	dd06      	ble.n	801971c <_dtoa_r+0xa6c>
 801970e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019712:	d0e9      	beq.n	80196e8 <_dtoa_r+0xa38>
 8019714:	f108 0801 	add.w	r8, r8, #1
 8019718:	9b05      	ldr	r3, [sp, #20]
 801971a:	e7c2      	b.n	80196a2 <_dtoa_r+0x9f2>
 801971c:	9a02      	ldr	r2, [sp, #8]
 801971e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019722:	eba5 030b 	sub.w	r3, r5, fp
 8019726:	4293      	cmp	r3, r2
 8019728:	d021      	beq.n	801976e <_dtoa_r+0xabe>
 801972a:	2300      	movs	r3, #0
 801972c:	220a      	movs	r2, #10
 801972e:	9904      	ldr	r1, [sp, #16]
 8019730:	4620      	mov	r0, r4
 8019732:	f000 fc0e 	bl	8019f52 <__multadd>
 8019736:	45b1      	cmp	r9, r6
 8019738:	9004      	str	r0, [sp, #16]
 801973a:	f04f 0300 	mov.w	r3, #0
 801973e:	f04f 020a 	mov.w	r2, #10
 8019742:	4649      	mov	r1, r9
 8019744:	4620      	mov	r0, r4
 8019746:	d105      	bne.n	8019754 <_dtoa_r+0xaa4>
 8019748:	f000 fc03 	bl	8019f52 <__multadd>
 801974c:	4681      	mov	r9, r0
 801974e:	4606      	mov	r6, r0
 8019750:	9505      	str	r5, [sp, #20]
 8019752:	e776      	b.n	8019642 <_dtoa_r+0x992>
 8019754:	f000 fbfd 	bl	8019f52 <__multadd>
 8019758:	4631      	mov	r1, r6
 801975a:	4681      	mov	r9, r0
 801975c:	2300      	movs	r3, #0
 801975e:	220a      	movs	r2, #10
 8019760:	4620      	mov	r0, r4
 8019762:	f000 fbf6 	bl	8019f52 <__multadd>
 8019766:	4606      	mov	r6, r0
 8019768:	e7f2      	b.n	8019750 <_dtoa_r+0xaa0>
 801976a:	f04f 0900 	mov.w	r9, #0
 801976e:	2201      	movs	r2, #1
 8019770:	9904      	ldr	r1, [sp, #16]
 8019772:	4620      	mov	r0, r4
 8019774:	f000 fda2 	bl	801a2bc <__lshift>
 8019778:	4639      	mov	r1, r7
 801977a:	9004      	str	r0, [sp, #16]
 801977c:	f000 fdf2 	bl	801a364 <__mcmp>
 8019780:	2800      	cmp	r0, #0
 8019782:	dcb6      	bgt.n	80196f2 <_dtoa_r+0xa42>
 8019784:	d102      	bne.n	801978c <_dtoa_r+0xadc>
 8019786:	f018 0f01 	tst.w	r8, #1
 801978a:	d1b2      	bne.n	80196f2 <_dtoa_r+0xa42>
 801978c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019790:	2b30      	cmp	r3, #48	; 0x30
 8019792:	f105 32ff 	add.w	r2, r5, #4294967295
 8019796:	f47f af0a 	bne.w	80195ae <_dtoa_r+0x8fe>
 801979a:	4615      	mov	r5, r2
 801979c:	e7f6      	b.n	801978c <_dtoa_r+0xadc>
 801979e:	4593      	cmp	fp, r2
 80197a0:	d105      	bne.n	80197ae <_dtoa_r+0xafe>
 80197a2:	2331      	movs	r3, #49	; 0x31
 80197a4:	f10a 0a01 	add.w	sl, sl, #1
 80197a8:	f88b 3000 	strb.w	r3, [fp]
 80197ac:	e6ff      	b.n	80195ae <_dtoa_r+0x8fe>
 80197ae:	4615      	mov	r5, r2
 80197b0:	e79f      	b.n	80196f2 <_dtoa_r+0xa42>
 80197b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019818 <_dtoa_r+0xb68>
 80197b6:	e007      	b.n	80197c8 <_dtoa_r+0xb18>
 80197b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80197ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 801981c <_dtoa_r+0xb6c>
 80197be:	b11b      	cbz	r3, 80197c8 <_dtoa_r+0xb18>
 80197c0:	f10b 0308 	add.w	r3, fp, #8
 80197c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80197c6:	6013      	str	r3, [r2, #0]
 80197c8:	4658      	mov	r0, fp
 80197ca:	b017      	add	sp, #92	; 0x5c
 80197cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d0:	9b06      	ldr	r3, [sp, #24]
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	f77f ae35 	ble.w	8019442 <_dtoa_r+0x792>
 80197d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197da:	9307      	str	r3, [sp, #28]
 80197dc:	e649      	b.n	8019472 <_dtoa_r+0x7c2>
 80197de:	9b02      	ldr	r3, [sp, #8]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	dc03      	bgt.n	80197ec <_dtoa_r+0xb3c>
 80197e4:	9b06      	ldr	r3, [sp, #24]
 80197e6:	2b02      	cmp	r3, #2
 80197e8:	f73f aecc 	bgt.w	8019584 <_dtoa_r+0x8d4>
 80197ec:	465d      	mov	r5, fp
 80197ee:	4639      	mov	r1, r7
 80197f0:	9804      	ldr	r0, [sp, #16]
 80197f2:	f7ff f9d1 	bl	8018b98 <quorem>
 80197f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80197fa:	f805 8b01 	strb.w	r8, [r5], #1
 80197fe:	9a02      	ldr	r2, [sp, #8]
 8019800:	eba5 030b 	sub.w	r3, r5, fp
 8019804:	429a      	cmp	r2, r3
 8019806:	ddb0      	ble.n	801976a <_dtoa_r+0xaba>
 8019808:	2300      	movs	r3, #0
 801980a:	220a      	movs	r2, #10
 801980c:	9904      	ldr	r1, [sp, #16]
 801980e:	4620      	mov	r0, r4
 8019810:	f000 fb9f 	bl	8019f52 <__multadd>
 8019814:	9004      	str	r0, [sp, #16]
 8019816:	e7ea      	b.n	80197ee <_dtoa_r+0xb3e>
 8019818:	0801e46c 	.word	0x0801e46c
 801981c:	0801e4e8 	.word	0x0801e4e8

08019820 <rshift>:
 8019820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019822:	6906      	ldr	r6, [r0, #16]
 8019824:	114b      	asrs	r3, r1, #5
 8019826:	429e      	cmp	r6, r3
 8019828:	f100 0414 	add.w	r4, r0, #20
 801982c:	dd30      	ble.n	8019890 <rshift+0x70>
 801982e:	f011 011f 	ands.w	r1, r1, #31
 8019832:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019836:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801983a:	d108      	bne.n	801984e <rshift+0x2e>
 801983c:	4621      	mov	r1, r4
 801983e:	42b2      	cmp	r2, r6
 8019840:	460b      	mov	r3, r1
 8019842:	d211      	bcs.n	8019868 <rshift+0x48>
 8019844:	f852 3b04 	ldr.w	r3, [r2], #4
 8019848:	f841 3b04 	str.w	r3, [r1], #4
 801984c:	e7f7      	b.n	801983e <rshift+0x1e>
 801984e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8019852:	f1c1 0c20 	rsb	ip, r1, #32
 8019856:	40cd      	lsrs	r5, r1
 8019858:	3204      	adds	r2, #4
 801985a:	4623      	mov	r3, r4
 801985c:	42b2      	cmp	r2, r6
 801985e:	4617      	mov	r7, r2
 8019860:	d30c      	bcc.n	801987c <rshift+0x5c>
 8019862:	601d      	str	r5, [r3, #0]
 8019864:	b105      	cbz	r5, 8019868 <rshift+0x48>
 8019866:	3304      	adds	r3, #4
 8019868:	1b1a      	subs	r2, r3, r4
 801986a:	42a3      	cmp	r3, r4
 801986c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019870:	bf08      	it	eq
 8019872:	2300      	moveq	r3, #0
 8019874:	6102      	str	r2, [r0, #16]
 8019876:	bf08      	it	eq
 8019878:	6143      	streq	r3, [r0, #20]
 801987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801987c:	683f      	ldr	r7, [r7, #0]
 801987e:	fa07 f70c 	lsl.w	r7, r7, ip
 8019882:	433d      	orrs	r5, r7
 8019884:	f843 5b04 	str.w	r5, [r3], #4
 8019888:	f852 5b04 	ldr.w	r5, [r2], #4
 801988c:	40cd      	lsrs	r5, r1
 801988e:	e7e5      	b.n	801985c <rshift+0x3c>
 8019890:	4623      	mov	r3, r4
 8019892:	e7e9      	b.n	8019868 <rshift+0x48>

08019894 <__hexdig_fun>:
 8019894:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019898:	2b09      	cmp	r3, #9
 801989a:	d802      	bhi.n	80198a2 <__hexdig_fun+0xe>
 801989c:	3820      	subs	r0, #32
 801989e:	b2c0      	uxtb	r0, r0
 80198a0:	4770      	bx	lr
 80198a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80198a6:	2b05      	cmp	r3, #5
 80198a8:	d801      	bhi.n	80198ae <__hexdig_fun+0x1a>
 80198aa:	3847      	subs	r0, #71	; 0x47
 80198ac:	e7f7      	b.n	801989e <__hexdig_fun+0xa>
 80198ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80198b2:	2b05      	cmp	r3, #5
 80198b4:	d801      	bhi.n	80198ba <__hexdig_fun+0x26>
 80198b6:	3827      	subs	r0, #39	; 0x27
 80198b8:	e7f1      	b.n	801989e <__hexdig_fun+0xa>
 80198ba:	2000      	movs	r0, #0
 80198bc:	4770      	bx	lr

080198be <__gethex>:
 80198be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c2:	b08b      	sub	sp, #44	; 0x2c
 80198c4:	468a      	mov	sl, r1
 80198c6:	9002      	str	r0, [sp, #8]
 80198c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80198ca:	9306      	str	r3, [sp, #24]
 80198cc:	4690      	mov	r8, r2
 80198ce:	f000 fad0 	bl	8019e72 <__localeconv_l>
 80198d2:	6803      	ldr	r3, [r0, #0]
 80198d4:	9303      	str	r3, [sp, #12]
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7e6 fc84 	bl	80001e4 <strlen>
 80198dc:	9b03      	ldr	r3, [sp, #12]
 80198de:	9001      	str	r0, [sp, #4]
 80198e0:	4403      	add	r3, r0
 80198e2:	f04f 0b00 	mov.w	fp, #0
 80198e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80198ea:	9307      	str	r3, [sp, #28]
 80198ec:	f8da 3000 	ldr.w	r3, [sl]
 80198f0:	3302      	adds	r3, #2
 80198f2:	461f      	mov	r7, r3
 80198f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80198f8:	2830      	cmp	r0, #48	; 0x30
 80198fa:	d06c      	beq.n	80199d6 <__gethex+0x118>
 80198fc:	f7ff ffca 	bl	8019894 <__hexdig_fun>
 8019900:	4604      	mov	r4, r0
 8019902:	2800      	cmp	r0, #0
 8019904:	d16a      	bne.n	80199dc <__gethex+0x11e>
 8019906:	9a01      	ldr	r2, [sp, #4]
 8019908:	9903      	ldr	r1, [sp, #12]
 801990a:	4638      	mov	r0, r7
 801990c:	f7fe fa24 	bl	8017d58 <strncmp>
 8019910:	2800      	cmp	r0, #0
 8019912:	d166      	bne.n	80199e2 <__gethex+0x124>
 8019914:	9b01      	ldr	r3, [sp, #4]
 8019916:	5cf8      	ldrb	r0, [r7, r3]
 8019918:	18fe      	adds	r6, r7, r3
 801991a:	f7ff ffbb 	bl	8019894 <__hexdig_fun>
 801991e:	2800      	cmp	r0, #0
 8019920:	d062      	beq.n	80199e8 <__gethex+0x12a>
 8019922:	4633      	mov	r3, r6
 8019924:	7818      	ldrb	r0, [r3, #0]
 8019926:	2830      	cmp	r0, #48	; 0x30
 8019928:	461f      	mov	r7, r3
 801992a:	f103 0301 	add.w	r3, r3, #1
 801992e:	d0f9      	beq.n	8019924 <__gethex+0x66>
 8019930:	f7ff ffb0 	bl	8019894 <__hexdig_fun>
 8019934:	fab0 f580 	clz	r5, r0
 8019938:	096d      	lsrs	r5, r5, #5
 801993a:	4634      	mov	r4, r6
 801993c:	f04f 0b01 	mov.w	fp, #1
 8019940:	463a      	mov	r2, r7
 8019942:	4616      	mov	r6, r2
 8019944:	3201      	adds	r2, #1
 8019946:	7830      	ldrb	r0, [r6, #0]
 8019948:	f7ff ffa4 	bl	8019894 <__hexdig_fun>
 801994c:	2800      	cmp	r0, #0
 801994e:	d1f8      	bne.n	8019942 <__gethex+0x84>
 8019950:	9a01      	ldr	r2, [sp, #4]
 8019952:	9903      	ldr	r1, [sp, #12]
 8019954:	4630      	mov	r0, r6
 8019956:	f7fe f9ff 	bl	8017d58 <strncmp>
 801995a:	b950      	cbnz	r0, 8019972 <__gethex+0xb4>
 801995c:	b954      	cbnz	r4, 8019974 <__gethex+0xb6>
 801995e:	9b01      	ldr	r3, [sp, #4]
 8019960:	18f4      	adds	r4, r6, r3
 8019962:	4622      	mov	r2, r4
 8019964:	4616      	mov	r6, r2
 8019966:	3201      	adds	r2, #1
 8019968:	7830      	ldrb	r0, [r6, #0]
 801996a:	f7ff ff93 	bl	8019894 <__hexdig_fun>
 801996e:	2800      	cmp	r0, #0
 8019970:	d1f8      	bne.n	8019964 <__gethex+0xa6>
 8019972:	b10c      	cbz	r4, 8019978 <__gethex+0xba>
 8019974:	1ba4      	subs	r4, r4, r6
 8019976:	00a4      	lsls	r4, r4, #2
 8019978:	7833      	ldrb	r3, [r6, #0]
 801997a:	2b50      	cmp	r3, #80	; 0x50
 801997c:	d001      	beq.n	8019982 <__gethex+0xc4>
 801997e:	2b70      	cmp	r3, #112	; 0x70
 8019980:	d140      	bne.n	8019a04 <__gethex+0x146>
 8019982:	7873      	ldrb	r3, [r6, #1]
 8019984:	2b2b      	cmp	r3, #43	; 0x2b
 8019986:	d031      	beq.n	80199ec <__gethex+0x12e>
 8019988:	2b2d      	cmp	r3, #45	; 0x2d
 801998a:	d033      	beq.n	80199f4 <__gethex+0x136>
 801998c:	1c71      	adds	r1, r6, #1
 801998e:	f04f 0900 	mov.w	r9, #0
 8019992:	7808      	ldrb	r0, [r1, #0]
 8019994:	f7ff ff7e 	bl	8019894 <__hexdig_fun>
 8019998:	1e43      	subs	r3, r0, #1
 801999a:	b2db      	uxtb	r3, r3
 801999c:	2b18      	cmp	r3, #24
 801999e:	d831      	bhi.n	8019a04 <__gethex+0x146>
 80199a0:	f1a0 0210 	sub.w	r2, r0, #16
 80199a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80199a8:	f7ff ff74 	bl	8019894 <__hexdig_fun>
 80199ac:	1e43      	subs	r3, r0, #1
 80199ae:	b2db      	uxtb	r3, r3
 80199b0:	2b18      	cmp	r3, #24
 80199b2:	d922      	bls.n	80199fa <__gethex+0x13c>
 80199b4:	f1b9 0f00 	cmp.w	r9, #0
 80199b8:	d000      	beq.n	80199bc <__gethex+0xfe>
 80199ba:	4252      	negs	r2, r2
 80199bc:	4414      	add	r4, r2
 80199be:	f8ca 1000 	str.w	r1, [sl]
 80199c2:	b30d      	cbz	r5, 8019a08 <__gethex+0x14a>
 80199c4:	f1bb 0f00 	cmp.w	fp, #0
 80199c8:	bf0c      	ite	eq
 80199ca:	2706      	moveq	r7, #6
 80199cc:	2700      	movne	r7, #0
 80199ce:	4638      	mov	r0, r7
 80199d0:	b00b      	add	sp, #44	; 0x2c
 80199d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d6:	f10b 0b01 	add.w	fp, fp, #1
 80199da:	e78a      	b.n	80198f2 <__gethex+0x34>
 80199dc:	2500      	movs	r5, #0
 80199de:	462c      	mov	r4, r5
 80199e0:	e7ae      	b.n	8019940 <__gethex+0x82>
 80199e2:	463e      	mov	r6, r7
 80199e4:	2501      	movs	r5, #1
 80199e6:	e7c7      	b.n	8019978 <__gethex+0xba>
 80199e8:	4604      	mov	r4, r0
 80199ea:	e7fb      	b.n	80199e4 <__gethex+0x126>
 80199ec:	f04f 0900 	mov.w	r9, #0
 80199f0:	1cb1      	adds	r1, r6, #2
 80199f2:	e7ce      	b.n	8019992 <__gethex+0xd4>
 80199f4:	f04f 0901 	mov.w	r9, #1
 80199f8:	e7fa      	b.n	80199f0 <__gethex+0x132>
 80199fa:	230a      	movs	r3, #10
 80199fc:	fb03 0202 	mla	r2, r3, r2, r0
 8019a00:	3a10      	subs	r2, #16
 8019a02:	e7cf      	b.n	80199a4 <__gethex+0xe6>
 8019a04:	4631      	mov	r1, r6
 8019a06:	e7da      	b.n	80199be <__gethex+0x100>
 8019a08:	1bf3      	subs	r3, r6, r7
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	4629      	mov	r1, r5
 8019a0e:	2b07      	cmp	r3, #7
 8019a10:	dc49      	bgt.n	8019aa6 <__gethex+0x1e8>
 8019a12:	9802      	ldr	r0, [sp, #8]
 8019a14:	f000 fa52 	bl	8019ebc <_Balloc>
 8019a18:	9b01      	ldr	r3, [sp, #4]
 8019a1a:	f100 0914 	add.w	r9, r0, #20
 8019a1e:	f04f 0b00 	mov.w	fp, #0
 8019a22:	f1c3 0301 	rsb	r3, r3, #1
 8019a26:	4605      	mov	r5, r0
 8019a28:	f8cd 9010 	str.w	r9, [sp, #16]
 8019a2c:	46da      	mov	sl, fp
 8019a2e:	9308      	str	r3, [sp, #32]
 8019a30:	42b7      	cmp	r7, r6
 8019a32:	d33b      	bcc.n	8019aac <__gethex+0x1ee>
 8019a34:	9804      	ldr	r0, [sp, #16]
 8019a36:	f840 ab04 	str.w	sl, [r0], #4
 8019a3a:	eba0 0009 	sub.w	r0, r0, r9
 8019a3e:	1080      	asrs	r0, r0, #2
 8019a40:	6128      	str	r0, [r5, #16]
 8019a42:	0147      	lsls	r7, r0, #5
 8019a44:	4650      	mov	r0, sl
 8019a46:	f000 fafd 	bl	801a044 <__hi0bits>
 8019a4a:	f8d8 6000 	ldr.w	r6, [r8]
 8019a4e:	1a3f      	subs	r7, r7, r0
 8019a50:	42b7      	cmp	r7, r6
 8019a52:	dd64      	ble.n	8019b1e <__gethex+0x260>
 8019a54:	1bbf      	subs	r7, r7, r6
 8019a56:	4639      	mov	r1, r7
 8019a58:	4628      	mov	r0, r5
 8019a5a:	f000 fe0d 	bl	801a678 <__any_on>
 8019a5e:	4682      	mov	sl, r0
 8019a60:	b178      	cbz	r0, 8019a82 <__gethex+0x1c4>
 8019a62:	1e7b      	subs	r3, r7, #1
 8019a64:	1159      	asrs	r1, r3, #5
 8019a66:	f003 021f 	and.w	r2, r3, #31
 8019a6a:	f04f 0a01 	mov.w	sl, #1
 8019a6e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019a72:	fa0a f202 	lsl.w	r2, sl, r2
 8019a76:	420a      	tst	r2, r1
 8019a78:	d003      	beq.n	8019a82 <__gethex+0x1c4>
 8019a7a:	4553      	cmp	r3, sl
 8019a7c:	dc46      	bgt.n	8019b0c <__gethex+0x24e>
 8019a7e:	f04f 0a02 	mov.w	sl, #2
 8019a82:	4639      	mov	r1, r7
 8019a84:	4628      	mov	r0, r5
 8019a86:	f7ff fecb 	bl	8019820 <rshift>
 8019a8a:	443c      	add	r4, r7
 8019a8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019a90:	42a3      	cmp	r3, r4
 8019a92:	da52      	bge.n	8019b3a <__gethex+0x27c>
 8019a94:	4629      	mov	r1, r5
 8019a96:	9802      	ldr	r0, [sp, #8]
 8019a98:	f000 fa44 	bl	8019f24 <_Bfree>
 8019a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	6013      	str	r3, [r2, #0]
 8019aa2:	27a3      	movs	r7, #163	; 0xa3
 8019aa4:	e793      	b.n	80199ce <__gethex+0x110>
 8019aa6:	3101      	adds	r1, #1
 8019aa8:	105b      	asrs	r3, r3, #1
 8019aaa:	e7b0      	b.n	8019a0e <__gethex+0x150>
 8019aac:	1e73      	subs	r3, r6, #1
 8019aae:	9305      	str	r3, [sp, #20]
 8019ab0:	9a07      	ldr	r2, [sp, #28]
 8019ab2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019ab6:	4293      	cmp	r3, r2
 8019ab8:	d018      	beq.n	8019aec <__gethex+0x22e>
 8019aba:	f1bb 0f20 	cmp.w	fp, #32
 8019abe:	d107      	bne.n	8019ad0 <__gethex+0x212>
 8019ac0:	9b04      	ldr	r3, [sp, #16]
 8019ac2:	f8c3 a000 	str.w	sl, [r3]
 8019ac6:	3304      	adds	r3, #4
 8019ac8:	f04f 0a00 	mov.w	sl, #0
 8019acc:	9304      	str	r3, [sp, #16]
 8019ace:	46d3      	mov	fp, sl
 8019ad0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019ad4:	f7ff fede 	bl	8019894 <__hexdig_fun>
 8019ad8:	f000 000f 	and.w	r0, r0, #15
 8019adc:	fa00 f00b 	lsl.w	r0, r0, fp
 8019ae0:	ea4a 0a00 	orr.w	sl, sl, r0
 8019ae4:	f10b 0b04 	add.w	fp, fp, #4
 8019ae8:	9b05      	ldr	r3, [sp, #20]
 8019aea:	e00d      	b.n	8019b08 <__gethex+0x24a>
 8019aec:	9b05      	ldr	r3, [sp, #20]
 8019aee:	9a08      	ldr	r2, [sp, #32]
 8019af0:	4413      	add	r3, r2
 8019af2:	42bb      	cmp	r3, r7
 8019af4:	d3e1      	bcc.n	8019aba <__gethex+0x1fc>
 8019af6:	4618      	mov	r0, r3
 8019af8:	9a01      	ldr	r2, [sp, #4]
 8019afa:	9903      	ldr	r1, [sp, #12]
 8019afc:	9309      	str	r3, [sp, #36]	; 0x24
 8019afe:	f7fe f92b 	bl	8017d58 <strncmp>
 8019b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b04:	2800      	cmp	r0, #0
 8019b06:	d1d8      	bne.n	8019aba <__gethex+0x1fc>
 8019b08:	461e      	mov	r6, r3
 8019b0a:	e791      	b.n	8019a30 <__gethex+0x172>
 8019b0c:	1eb9      	subs	r1, r7, #2
 8019b0e:	4628      	mov	r0, r5
 8019b10:	f000 fdb2 	bl	801a678 <__any_on>
 8019b14:	2800      	cmp	r0, #0
 8019b16:	d0b2      	beq.n	8019a7e <__gethex+0x1c0>
 8019b18:	f04f 0a03 	mov.w	sl, #3
 8019b1c:	e7b1      	b.n	8019a82 <__gethex+0x1c4>
 8019b1e:	da09      	bge.n	8019b34 <__gethex+0x276>
 8019b20:	1bf7      	subs	r7, r6, r7
 8019b22:	4629      	mov	r1, r5
 8019b24:	463a      	mov	r2, r7
 8019b26:	9802      	ldr	r0, [sp, #8]
 8019b28:	f000 fbc8 	bl	801a2bc <__lshift>
 8019b2c:	1be4      	subs	r4, r4, r7
 8019b2e:	4605      	mov	r5, r0
 8019b30:	f100 0914 	add.w	r9, r0, #20
 8019b34:	f04f 0a00 	mov.w	sl, #0
 8019b38:	e7a8      	b.n	8019a8c <__gethex+0x1ce>
 8019b3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019b3e:	42a0      	cmp	r0, r4
 8019b40:	dd6a      	ble.n	8019c18 <__gethex+0x35a>
 8019b42:	1b04      	subs	r4, r0, r4
 8019b44:	42a6      	cmp	r6, r4
 8019b46:	dc2e      	bgt.n	8019ba6 <__gethex+0x2e8>
 8019b48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019b4c:	2b02      	cmp	r3, #2
 8019b4e:	d022      	beq.n	8019b96 <__gethex+0x2d8>
 8019b50:	2b03      	cmp	r3, #3
 8019b52:	d024      	beq.n	8019b9e <__gethex+0x2e0>
 8019b54:	2b01      	cmp	r3, #1
 8019b56:	d115      	bne.n	8019b84 <__gethex+0x2c6>
 8019b58:	42a6      	cmp	r6, r4
 8019b5a:	d113      	bne.n	8019b84 <__gethex+0x2c6>
 8019b5c:	2e01      	cmp	r6, #1
 8019b5e:	dc0b      	bgt.n	8019b78 <__gethex+0x2ba>
 8019b60:	9a06      	ldr	r2, [sp, #24]
 8019b62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019b66:	6013      	str	r3, [r2, #0]
 8019b68:	2301      	movs	r3, #1
 8019b6a:	612b      	str	r3, [r5, #16]
 8019b6c:	f8c9 3000 	str.w	r3, [r9]
 8019b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019b72:	2762      	movs	r7, #98	; 0x62
 8019b74:	601d      	str	r5, [r3, #0]
 8019b76:	e72a      	b.n	80199ce <__gethex+0x110>
 8019b78:	1e71      	subs	r1, r6, #1
 8019b7a:	4628      	mov	r0, r5
 8019b7c:	f000 fd7c 	bl	801a678 <__any_on>
 8019b80:	2800      	cmp	r0, #0
 8019b82:	d1ed      	bne.n	8019b60 <__gethex+0x2a2>
 8019b84:	4629      	mov	r1, r5
 8019b86:	9802      	ldr	r0, [sp, #8]
 8019b88:	f000 f9cc 	bl	8019f24 <_Bfree>
 8019b8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b8e:	2300      	movs	r3, #0
 8019b90:	6013      	str	r3, [r2, #0]
 8019b92:	2750      	movs	r7, #80	; 0x50
 8019b94:	e71b      	b.n	80199ce <__gethex+0x110>
 8019b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d0e1      	beq.n	8019b60 <__gethex+0x2a2>
 8019b9c:	e7f2      	b.n	8019b84 <__gethex+0x2c6>
 8019b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d1dd      	bne.n	8019b60 <__gethex+0x2a2>
 8019ba4:	e7ee      	b.n	8019b84 <__gethex+0x2c6>
 8019ba6:	1e67      	subs	r7, r4, #1
 8019ba8:	f1ba 0f00 	cmp.w	sl, #0
 8019bac:	d131      	bne.n	8019c12 <__gethex+0x354>
 8019bae:	b127      	cbz	r7, 8019bba <__gethex+0x2fc>
 8019bb0:	4639      	mov	r1, r7
 8019bb2:	4628      	mov	r0, r5
 8019bb4:	f000 fd60 	bl	801a678 <__any_on>
 8019bb8:	4682      	mov	sl, r0
 8019bba:	117a      	asrs	r2, r7, #5
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	f007 071f 	and.w	r7, r7, #31
 8019bc2:	fa03 f707 	lsl.w	r7, r3, r7
 8019bc6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019bca:	4621      	mov	r1, r4
 8019bcc:	421f      	tst	r7, r3
 8019bce:	4628      	mov	r0, r5
 8019bd0:	bf18      	it	ne
 8019bd2:	f04a 0a02 	orrne.w	sl, sl, #2
 8019bd6:	1b36      	subs	r6, r6, r4
 8019bd8:	f7ff fe22 	bl	8019820 <rshift>
 8019bdc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019be0:	2702      	movs	r7, #2
 8019be2:	f1ba 0f00 	cmp.w	sl, #0
 8019be6:	d048      	beq.n	8019c7a <__gethex+0x3bc>
 8019be8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019bec:	2b02      	cmp	r3, #2
 8019bee:	d015      	beq.n	8019c1c <__gethex+0x35e>
 8019bf0:	2b03      	cmp	r3, #3
 8019bf2:	d017      	beq.n	8019c24 <__gethex+0x366>
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d109      	bne.n	8019c0c <__gethex+0x34e>
 8019bf8:	f01a 0f02 	tst.w	sl, #2
 8019bfc:	d006      	beq.n	8019c0c <__gethex+0x34e>
 8019bfe:	f8d9 3000 	ldr.w	r3, [r9]
 8019c02:	ea4a 0a03 	orr.w	sl, sl, r3
 8019c06:	f01a 0f01 	tst.w	sl, #1
 8019c0a:	d10e      	bne.n	8019c2a <__gethex+0x36c>
 8019c0c:	f047 0710 	orr.w	r7, r7, #16
 8019c10:	e033      	b.n	8019c7a <__gethex+0x3bc>
 8019c12:	f04f 0a01 	mov.w	sl, #1
 8019c16:	e7d0      	b.n	8019bba <__gethex+0x2fc>
 8019c18:	2701      	movs	r7, #1
 8019c1a:	e7e2      	b.n	8019be2 <__gethex+0x324>
 8019c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c1e:	f1c3 0301 	rsb	r3, r3, #1
 8019c22:	9315      	str	r3, [sp, #84]	; 0x54
 8019c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d0f0      	beq.n	8019c0c <__gethex+0x34e>
 8019c2a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8019c2e:	f105 0314 	add.w	r3, r5, #20
 8019c32:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8019c36:	eb03 010a 	add.w	r1, r3, sl
 8019c3a:	f04f 0c00 	mov.w	ip, #0
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019c48:	d01c      	beq.n	8019c84 <__gethex+0x3c6>
 8019c4a:	3201      	adds	r2, #1
 8019c4c:	6002      	str	r2, [r0, #0]
 8019c4e:	2f02      	cmp	r7, #2
 8019c50:	f105 0314 	add.w	r3, r5, #20
 8019c54:	d138      	bne.n	8019cc8 <__gethex+0x40a>
 8019c56:	f8d8 2000 	ldr.w	r2, [r8]
 8019c5a:	3a01      	subs	r2, #1
 8019c5c:	42b2      	cmp	r2, r6
 8019c5e:	d10a      	bne.n	8019c76 <__gethex+0x3b8>
 8019c60:	1171      	asrs	r1, r6, #5
 8019c62:	2201      	movs	r2, #1
 8019c64:	f006 061f 	and.w	r6, r6, #31
 8019c68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019c6c:	fa02 f606 	lsl.w	r6, r2, r6
 8019c70:	421e      	tst	r6, r3
 8019c72:	bf18      	it	ne
 8019c74:	4617      	movne	r7, r2
 8019c76:	f047 0720 	orr.w	r7, r7, #32
 8019c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019c7c:	601d      	str	r5, [r3, #0]
 8019c7e:	9b06      	ldr	r3, [sp, #24]
 8019c80:	601c      	str	r4, [r3, #0]
 8019c82:	e6a4      	b.n	80199ce <__gethex+0x110>
 8019c84:	4299      	cmp	r1, r3
 8019c86:	f843 cc04 	str.w	ip, [r3, #-4]
 8019c8a:	d8d8      	bhi.n	8019c3e <__gethex+0x380>
 8019c8c:	68ab      	ldr	r3, [r5, #8]
 8019c8e:	4599      	cmp	r9, r3
 8019c90:	db12      	blt.n	8019cb8 <__gethex+0x3fa>
 8019c92:	6869      	ldr	r1, [r5, #4]
 8019c94:	9802      	ldr	r0, [sp, #8]
 8019c96:	3101      	adds	r1, #1
 8019c98:	f000 f910 	bl	8019ebc <_Balloc>
 8019c9c:	692a      	ldr	r2, [r5, #16]
 8019c9e:	3202      	adds	r2, #2
 8019ca0:	f105 010c 	add.w	r1, r5, #12
 8019ca4:	4683      	mov	fp, r0
 8019ca6:	0092      	lsls	r2, r2, #2
 8019ca8:	300c      	adds	r0, #12
 8019caa:	f7fd f901 	bl	8016eb0 <memcpy>
 8019cae:	4629      	mov	r1, r5
 8019cb0:	9802      	ldr	r0, [sp, #8]
 8019cb2:	f000 f937 	bl	8019f24 <_Bfree>
 8019cb6:	465d      	mov	r5, fp
 8019cb8:	692b      	ldr	r3, [r5, #16]
 8019cba:	1c5a      	adds	r2, r3, #1
 8019cbc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019cc0:	612a      	str	r2, [r5, #16]
 8019cc2:	2201      	movs	r2, #1
 8019cc4:	615a      	str	r2, [r3, #20]
 8019cc6:	e7c2      	b.n	8019c4e <__gethex+0x390>
 8019cc8:	692a      	ldr	r2, [r5, #16]
 8019cca:	454a      	cmp	r2, r9
 8019ccc:	dd0b      	ble.n	8019ce6 <__gethex+0x428>
 8019cce:	2101      	movs	r1, #1
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	f7ff fda5 	bl	8019820 <rshift>
 8019cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019cda:	3401      	adds	r4, #1
 8019cdc:	42a3      	cmp	r3, r4
 8019cde:	f6ff aed9 	blt.w	8019a94 <__gethex+0x1d6>
 8019ce2:	2701      	movs	r7, #1
 8019ce4:	e7c7      	b.n	8019c76 <__gethex+0x3b8>
 8019ce6:	f016 061f 	ands.w	r6, r6, #31
 8019cea:	d0fa      	beq.n	8019ce2 <__gethex+0x424>
 8019cec:	449a      	add	sl, r3
 8019cee:	f1c6 0620 	rsb	r6, r6, #32
 8019cf2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019cf6:	f000 f9a5 	bl	801a044 <__hi0bits>
 8019cfa:	42b0      	cmp	r0, r6
 8019cfc:	dbe7      	blt.n	8019cce <__gethex+0x410>
 8019cfe:	e7f0      	b.n	8019ce2 <__gethex+0x424>

08019d00 <L_shift>:
 8019d00:	f1c2 0208 	rsb	r2, r2, #8
 8019d04:	0092      	lsls	r2, r2, #2
 8019d06:	b570      	push	{r4, r5, r6, lr}
 8019d08:	f1c2 0620 	rsb	r6, r2, #32
 8019d0c:	6843      	ldr	r3, [r0, #4]
 8019d0e:	6804      	ldr	r4, [r0, #0]
 8019d10:	fa03 f506 	lsl.w	r5, r3, r6
 8019d14:	432c      	orrs	r4, r5
 8019d16:	40d3      	lsrs	r3, r2
 8019d18:	6004      	str	r4, [r0, #0]
 8019d1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8019d1e:	4288      	cmp	r0, r1
 8019d20:	d3f4      	bcc.n	8019d0c <L_shift+0xc>
 8019d22:	bd70      	pop	{r4, r5, r6, pc}

08019d24 <__match>:
 8019d24:	b530      	push	{r4, r5, lr}
 8019d26:	6803      	ldr	r3, [r0, #0]
 8019d28:	3301      	adds	r3, #1
 8019d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d2e:	b914      	cbnz	r4, 8019d36 <__match+0x12>
 8019d30:	6003      	str	r3, [r0, #0]
 8019d32:	2001      	movs	r0, #1
 8019d34:	bd30      	pop	{r4, r5, pc}
 8019d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019d3e:	2d19      	cmp	r5, #25
 8019d40:	bf98      	it	ls
 8019d42:	3220      	addls	r2, #32
 8019d44:	42a2      	cmp	r2, r4
 8019d46:	d0f0      	beq.n	8019d2a <__match+0x6>
 8019d48:	2000      	movs	r0, #0
 8019d4a:	e7f3      	b.n	8019d34 <__match+0x10>

08019d4c <__hexnan>:
 8019d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d50:	680b      	ldr	r3, [r1, #0]
 8019d52:	6801      	ldr	r1, [r0, #0]
 8019d54:	115f      	asrs	r7, r3, #5
 8019d56:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019d5a:	f013 031f 	ands.w	r3, r3, #31
 8019d5e:	b087      	sub	sp, #28
 8019d60:	bf18      	it	ne
 8019d62:	3704      	addne	r7, #4
 8019d64:	2500      	movs	r5, #0
 8019d66:	1f3e      	subs	r6, r7, #4
 8019d68:	4682      	mov	sl, r0
 8019d6a:	4690      	mov	r8, r2
 8019d6c:	9301      	str	r3, [sp, #4]
 8019d6e:	f847 5c04 	str.w	r5, [r7, #-4]
 8019d72:	46b1      	mov	r9, r6
 8019d74:	4634      	mov	r4, r6
 8019d76:	9502      	str	r5, [sp, #8]
 8019d78:	46ab      	mov	fp, r5
 8019d7a:	784a      	ldrb	r2, [r1, #1]
 8019d7c:	1c4b      	adds	r3, r1, #1
 8019d7e:	9303      	str	r3, [sp, #12]
 8019d80:	b342      	cbz	r2, 8019dd4 <__hexnan+0x88>
 8019d82:	4610      	mov	r0, r2
 8019d84:	9105      	str	r1, [sp, #20]
 8019d86:	9204      	str	r2, [sp, #16]
 8019d88:	f7ff fd84 	bl	8019894 <__hexdig_fun>
 8019d8c:	2800      	cmp	r0, #0
 8019d8e:	d143      	bne.n	8019e18 <__hexnan+0xcc>
 8019d90:	9a04      	ldr	r2, [sp, #16]
 8019d92:	9905      	ldr	r1, [sp, #20]
 8019d94:	2a20      	cmp	r2, #32
 8019d96:	d818      	bhi.n	8019dca <__hexnan+0x7e>
 8019d98:	9b02      	ldr	r3, [sp, #8]
 8019d9a:	459b      	cmp	fp, r3
 8019d9c:	dd13      	ble.n	8019dc6 <__hexnan+0x7a>
 8019d9e:	454c      	cmp	r4, r9
 8019da0:	d206      	bcs.n	8019db0 <__hexnan+0x64>
 8019da2:	2d07      	cmp	r5, #7
 8019da4:	dc04      	bgt.n	8019db0 <__hexnan+0x64>
 8019da6:	462a      	mov	r2, r5
 8019da8:	4649      	mov	r1, r9
 8019daa:	4620      	mov	r0, r4
 8019dac:	f7ff ffa8 	bl	8019d00 <L_shift>
 8019db0:	4544      	cmp	r4, r8
 8019db2:	d944      	bls.n	8019e3e <__hexnan+0xf2>
 8019db4:	2300      	movs	r3, #0
 8019db6:	f1a4 0904 	sub.w	r9, r4, #4
 8019dba:	f844 3c04 	str.w	r3, [r4, #-4]
 8019dbe:	f8cd b008 	str.w	fp, [sp, #8]
 8019dc2:	464c      	mov	r4, r9
 8019dc4:	461d      	mov	r5, r3
 8019dc6:	9903      	ldr	r1, [sp, #12]
 8019dc8:	e7d7      	b.n	8019d7a <__hexnan+0x2e>
 8019dca:	2a29      	cmp	r2, #41	; 0x29
 8019dcc:	d14a      	bne.n	8019e64 <__hexnan+0x118>
 8019dce:	3102      	adds	r1, #2
 8019dd0:	f8ca 1000 	str.w	r1, [sl]
 8019dd4:	f1bb 0f00 	cmp.w	fp, #0
 8019dd8:	d044      	beq.n	8019e64 <__hexnan+0x118>
 8019dda:	454c      	cmp	r4, r9
 8019ddc:	d206      	bcs.n	8019dec <__hexnan+0xa0>
 8019dde:	2d07      	cmp	r5, #7
 8019de0:	dc04      	bgt.n	8019dec <__hexnan+0xa0>
 8019de2:	462a      	mov	r2, r5
 8019de4:	4649      	mov	r1, r9
 8019de6:	4620      	mov	r0, r4
 8019de8:	f7ff ff8a 	bl	8019d00 <L_shift>
 8019dec:	4544      	cmp	r4, r8
 8019dee:	d928      	bls.n	8019e42 <__hexnan+0xf6>
 8019df0:	4643      	mov	r3, r8
 8019df2:	f854 2b04 	ldr.w	r2, [r4], #4
 8019df6:	f843 2b04 	str.w	r2, [r3], #4
 8019dfa:	42a6      	cmp	r6, r4
 8019dfc:	d2f9      	bcs.n	8019df2 <__hexnan+0xa6>
 8019dfe:	2200      	movs	r2, #0
 8019e00:	f843 2b04 	str.w	r2, [r3], #4
 8019e04:	429e      	cmp	r6, r3
 8019e06:	d2fb      	bcs.n	8019e00 <__hexnan+0xb4>
 8019e08:	6833      	ldr	r3, [r6, #0]
 8019e0a:	b91b      	cbnz	r3, 8019e14 <__hexnan+0xc8>
 8019e0c:	4546      	cmp	r6, r8
 8019e0e:	d127      	bne.n	8019e60 <__hexnan+0x114>
 8019e10:	2301      	movs	r3, #1
 8019e12:	6033      	str	r3, [r6, #0]
 8019e14:	2005      	movs	r0, #5
 8019e16:	e026      	b.n	8019e66 <__hexnan+0x11a>
 8019e18:	3501      	adds	r5, #1
 8019e1a:	2d08      	cmp	r5, #8
 8019e1c:	f10b 0b01 	add.w	fp, fp, #1
 8019e20:	dd06      	ble.n	8019e30 <__hexnan+0xe4>
 8019e22:	4544      	cmp	r4, r8
 8019e24:	d9cf      	bls.n	8019dc6 <__hexnan+0x7a>
 8019e26:	2300      	movs	r3, #0
 8019e28:	f844 3c04 	str.w	r3, [r4, #-4]
 8019e2c:	2501      	movs	r5, #1
 8019e2e:	3c04      	subs	r4, #4
 8019e30:	6822      	ldr	r2, [r4, #0]
 8019e32:	f000 000f 	and.w	r0, r0, #15
 8019e36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019e3a:	6020      	str	r0, [r4, #0]
 8019e3c:	e7c3      	b.n	8019dc6 <__hexnan+0x7a>
 8019e3e:	2508      	movs	r5, #8
 8019e40:	e7c1      	b.n	8019dc6 <__hexnan+0x7a>
 8019e42:	9b01      	ldr	r3, [sp, #4]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d0df      	beq.n	8019e08 <__hexnan+0xbc>
 8019e48:	f04f 32ff 	mov.w	r2, #4294967295
 8019e4c:	f1c3 0320 	rsb	r3, r3, #32
 8019e50:	fa22 f303 	lsr.w	r3, r2, r3
 8019e54:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019e58:	401a      	ands	r2, r3
 8019e5a:	f847 2c04 	str.w	r2, [r7, #-4]
 8019e5e:	e7d3      	b.n	8019e08 <__hexnan+0xbc>
 8019e60:	3e04      	subs	r6, #4
 8019e62:	e7d1      	b.n	8019e08 <__hexnan+0xbc>
 8019e64:	2004      	movs	r0, #4
 8019e66:	b007      	add	sp, #28
 8019e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e6c <__locale_ctype_ptr_l>:
 8019e6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019e70:	4770      	bx	lr

08019e72 <__localeconv_l>:
 8019e72:	30f0      	adds	r0, #240	; 0xf0
 8019e74:	4770      	bx	lr
	...

08019e78 <_localeconv_r>:
 8019e78:	4b04      	ldr	r3, [pc, #16]	; (8019e8c <_localeconv_r+0x14>)
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	6a18      	ldr	r0, [r3, #32]
 8019e7e:	4b04      	ldr	r3, [pc, #16]	; (8019e90 <_localeconv_r+0x18>)
 8019e80:	2800      	cmp	r0, #0
 8019e82:	bf08      	it	eq
 8019e84:	4618      	moveq	r0, r3
 8019e86:	30f0      	adds	r0, #240	; 0xf0
 8019e88:	4770      	bx	lr
 8019e8a:	bf00      	nop
 8019e8c:	200001d4 	.word	0x200001d4
 8019e90:	20000238 	.word	0x20000238

08019e94 <__ascii_mbtowc>:
 8019e94:	b082      	sub	sp, #8
 8019e96:	b901      	cbnz	r1, 8019e9a <__ascii_mbtowc+0x6>
 8019e98:	a901      	add	r1, sp, #4
 8019e9a:	b142      	cbz	r2, 8019eae <__ascii_mbtowc+0x1a>
 8019e9c:	b14b      	cbz	r3, 8019eb2 <__ascii_mbtowc+0x1e>
 8019e9e:	7813      	ldrb	r3, [r2, #0]
 8019ea0:	600b      	str	r3, [r1, #0]
 8019ea2:	7812      	ldrb	r2, [r2, #0]
 8019ea4:	1c10      	adds	r0, r2, #0
 8019ea6:	bf18      	it	ne
 8019ea8:	2001      	movne	r0, #1
 8019eaa:	b002      	add	sp, #8
 8019eac:	4770      	bx	lr
 8019eae:	4610      	mov	r0, r2
 8019eb0:	e7fb      	b.n	8019eaa <__ascii_mbtowc+0x16>
 8019eb2:	f06f 0001 	mvn.w	r0, #1
 8019eb6:	e7f8      	b.n	8019eaa <__ascii_mbtowc+0x16>

08019eb8 <__malloc_lock>:
 8019eb8:	4770      	bx	lr

08019eba <__malloc_unlock>:
 8019eba:	4770      	bx	lr

08019ebc <_Balloc>:
 8019ebc:	b570      	push	{r4, r5, r6, lr}
 8019ebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019ec0:	4604      	mov	r4, r0
 8019ec2:	460e      	mov	r6, r1
 8019ec4:	b93d      	cbnz	r5, 8019ed6 <_Balloc+0x1a>
 8019ec6:	2010      	movs	r0, #16
 8019ec8:	f7fc ffe2 	bl	8016e90 <malloc>
 8019ecc:	6260      	str	r0, [r4, #36]	; 0x24
 8019ece:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019ed2:	6005      	str	r5, [r0, #0]
 8019ed4:	60c5      	str	r5, [r0, #12]
 8019ed6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019ed8:	68eb      	ldr	r3, [r5, #12]
 8019eda:	b183      	cbz	r3, 8019efe <_Balloc+0x42>
 8019edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8019ee4:	b9b8      	cbnz	r0, 8019f16 <_Balloc+0x5a>
 8019ee6:	2101      	movs	r1, #1
 8019ee8:	fa01 f506 	lsl.w	r5, r1, r6
 8019eec:	1d6a      	adds	r2, r5, #5
 8019eee:	0092      	lsls	r2, r2, #2
 8019ef0:	4620      	mov	r0, r4
 8019ef2:	f000 fbe2 	bl	801a6ba <_calloc_r>
 8019ef6:	b160      	cbz	r0, 8019f12 <_Balloc+0x56>
 8019ef8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019efc:	e00e      	b.n	8019f1c <_Balloc+0x60>
 8019efe:	2221      	movs	r2, #33	; 0x21
 8019f00:	2104      	movs	r1, #4
 8019f02:	4620      	mov	r0, r4
 8019f04:	f000 fbd9 	bl	801a6ba <_calloc_r>
 8019f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f0a:	60e8      	str	r0, [r5, #12]
 8019f0c:	68db      	ldr	r3, [r3, #12]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d1e4      	bne.n	8019edc <_Balloc+0x20>
 8019f12:	2000      	movs	r0, #0
 8019f14:	bd70      	pop	{r4, r5, r6, pc}
 8019f16:	6802      	ldr	r2, [r0, #0]
 8019f18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019f22:	e7f7      	b.n	8019f14 <_Balloc+0x58>

08019f24 <_Bfree>:
 8019f24:	b570      	push	{r4, r5, r6, lr}
 8019f26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019f28:	4606      	mov	r6, r0
 8019f2a:	460d      	mov	r5, r1
 8019f2c:	b93c      	cbnz	r4, 8019f3e <_Bfree+0x1a>
 8019f2e:	2010      	movs	r0, #16
 8019f30:	f7fc ffae 	bl	8016e90 <malloc>
 8019f34:	6270      	str	r0, [r6, #36]	; 0x24
 8019f36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019f3a:	6004      	str	r4, [r0, #0]
 8019f3c:	60c4      	str	r4, [r0, #12]
 8019f3e:	b13d      	cbz	r5, 8019f50 <_Bfree+0x2c>
 8019f40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019f42:	686a      	ldr	r2, [r5, #4]
 8019f44:	68db      	ldr	r3, [r3, #12]
 8019f46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019f4a:	6029      	str	r1, [r5, #0]
 8019f4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019f50:	bd70      	pop	{r4, r5, r6, pc}

08019f52 <__multadd>:
 8019f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f56:	690d      	ldr	r5, [r1, #16]
 8019f58:	461f      	mov	r7, r3
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	460c      	mov	r4, r1
 8019f5e:	f101 0c14 	add.w	ip, r1, #20
 8019f62:	2300      	movs	r3, #0
 8019f64:	f8dc 0000 	ldr.w	r0, [ip]
 8019f68:	b281      	uxth	r1, r0
 8019f6a:	fb02 7101 	mla	r1, r2, r1, r7
 8019f6e:	0c0f      	lsrs	r7, r1, #16
 8019f70:	0c00      	lsrs	r0, r0, #16
 8019f72:	fb02 7000 	mla	r0, r2, r0, r7
 8019f76:	b289      	uxth	r1, r1
 8019f78:	3301      	adds	r3, #1
 8019f7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019f7e:	429d      	cmp	r5, r3
 8019f80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8019f84:	f84c 1b04 	str.w	r1, [ip], #4
 8019f88:	dcec      	bgt.n	8019f64 <__multadd+0x12>
 8019f8a:	b1d7      	cbz	r7, 8019fc2 <__multadd+0x70>
 8019f8c:	68a3      	ldr	r3, [r4, #8]
 8019f8e:	42ab      	cmp	r3, r5
 8019f90:	dc12      	bgt.n	8019fb8 <__multadd+0x66>
 8019f92:	6861      	ldr	r1, [r4, #4]
 8019f94:	4630      	mov	r0, r6
 8019f96:	3101      	adds	r1, #1
 8019f98:	f7ff ff90 	bl	8019ebc <_Balloc>
 8019f9c:	6922      	ldr	r2, [r4, #16]
 8019f9e:	3202      	adds	r2, #2
 8019fa0:	f104 010c 	add.w	r1, r4, #12
 8019fa4:	4680      	mov	r8, r0
 8019fa6:	0092      	lsls	r2, r2, #2
 8019fa8:	300c      	adds	r0, #12
 8019faa:	f7fc ff81 	bl	8016eb0 <memcpy>
 8019fae:	4621      	mov	r1, r4
 8019fb0:	4630      	mov	r0, r6
 8019fb2:	f7ff ffb7 	bl	8019f24 <_Bfree>
 8019fb6:	4644      	mov	r4, r8
 8019fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019fbc:	3501      	adds	r5, #1
 8019fbe:	615f      	str	r7, [r3, #20]
 8019fc0:	6125      	str	r5, [r4, #16]
 8019fc2:	4620      	mov	r0, r4
 8019fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fc8 <__s2b>:
 8019fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fcc:	460c      	mov	r4, r1
 8019fce:	4615      	mov	r5, r2
 8019fd0:	461f      	mov	r7, r3
 8019fd2:	2209      	movs	r2, #9
 8019fd4:	3308      	adds	r3, #8
 8019fd6:	4606      	mov	r6, r0
 8019fd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8019fdc:	2100      	movs	r1, #0
 8019fde:	2201      	movs	r2, #1
 8019fe0:	429a      	cmp	r2, r3
 8019fe2:	db20      	blt.n	801a026 <__s2b+0x5e>
 8019fe4:	4630      	mov	r0, r6
 8019fe6:	f7ff ff69 	bl	8019ebc <_Balloc>
 8019fea:	9b08      	ldr	r3, [sp, #32]
 8019fec:	6143      	str	r3, [r0, #20]
 8019fee:	2d09      	cmp	r5, #9
 8019ff0:	f04f 0301 	mov.w	r3, #1
 8019ff4:	6103      	str	r3, [r0, #16]
 8019ff6:	dd19      	ble.n	801a02c <__s2b+0x64>
 8019ff8:	f104 0809 	add.w	r8, r4, #9
 8019ffc:	46c1      	mov	r9, r8
 8019ffe:	442c      	add	r4, r5
 801a000:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a004:	4601      	mov	r1, r0
 801a006:	3b30      	subs	r3, #48	; 0x30
 801a008:	220a      	movs	r2, #10
 801a00a:	4630      	mov	r0, r6
 801a00c:	f7ff ffa1 	bl	8019f52 <__multadd>
 801a010:	45a1      	cmp	r9, r4
 801a012:	d1f5      	bne.n	801a000 <__s2b+0x38>
 801a014:	eb08 0405 	add.w	r4, r8, r5
 801a018:	3c08      	subs	r4, #8
 801a01a:	1b2d      	subs	r5, r5, r4
 801a01c:	1963      	adds	r3, r4, r5
 801a01e:	42bb      	cmp	r3, r7
 801a020:	db07      	blt.n	801a032 <__s2b+0x6a>
 801a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a026:	0052      	lsls	r2, r2, #1
 801a028:	3101      	adds	r1, #1
 801a02a:	e7d9      	b.n	8019fe0 <__s2b+0x18>
 801a02c:	340a      	adds	r4, #10
 801a02e:	2509      	movs	r5, #9
 801a030:	e7f3      	b.n	801a01a <__s2b+0x52>
 801a032:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a036:	4601      	mov	r1, r0
 801a038:	3b30      	subs	r3, #48	; 0x30
 801a03a:	220a      	movs	r2, #10
 801a03c:	4630      	mov	r0, r6
 801a03e:	f7ff ff88 	bl	8019f52 <__multadd>
 801a042:	e7eb      	b.n	801a01c <__s2b+0x54>

0801a044 <__hi0bits>:
 801a044:	0c02      	lsrs	r2, r0, #16
 801a046:	0412      	lsls	r2, r2, #16
 801a048:	4603      	mov	r3, r0
 801a04a:	b9b2      	cbnz	r2, 801a07a <__hi0bits+0x36>
 801a04c:	0403      	lsls	r3, r0, #16
 801a04e:	2010      	movs	r0, #16
 801a050:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a054:	bf04      	itt	eq
 801a056:	021b      	lsleq	r3, r3, #8
 801a058:	3008      	addeq	r0, #8
 801a05a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a05e:	bf04      	itt	eq
 801a060:	011b      	lsleq	r3, r3, #4
 801a062:	3004      	addeq	r0, #4
 801a064:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a068:	bf04      	itt	eq
 801a06a:	009b      	lsleq	r3, r3, #2
 801a06c:	3002      	addeq	r0, #2
 801a06e:	2b00      	cmp	r3, #0
 801a070:	db06      	blt.n	801a080 <__hi0bits+0x3c>
 801a072:	005b      	lsls	r3, r3, #1
 801a074:	d503      	bpl.n	801a07e <__hi0bits+0x3a>
 801a076:	3001      	adds	r0, #1
 801a078:	4770      	bx	lr
 801a07a:	2000      	movs	r0, #0
 801a07c:	e7e8      	b.n	801a050 <__hi0bits+0xc>
 801a07e:	2020      	movs	r0, #32
 801a080:	4770      	bx	lr

0801a082 <__lo0bits>:
 801a082:	6803      	ldr	r3, [r0, #0]
 801a084:	f013 0207 	ands.w	r2, r3, #7
 801a088:	4601      	mov	r1, r0
 801a08a:	d00b      	beq.n	801a0a4 <__lo0bits+0x22>
 801a08c:	07da      	lsls	r2, r3, #31
 801a08e:	d423      	bmi.n	801a0d8 <__lo0bits+0x56>
 801a090:	0798      	lsls	r0, r3, #30
 801a092:	bf49      	itett	mi
 801a094:	085b      	lsrmi	r3, r3, #1
 801a096:	089b      	lsrpl	r3, r3, #2
 801a098:	2001      	movmi	r0, #1
 801a09a:	600b      	strmi	r3, [r1, #0]
 801a09c:	bf5c      	itt	pl
 801a09e:	600b      	strpl	r3, [r1, #0]
 801a0a0:	2002      	movpl	r0, #2
 801a0a2:	4770      	bx	lr
 801a0a4:	b298      	uxth	r0, r3
 801a0a6:	b9a8      	cbnz	r0, 801a0d4 <__lo0bits+0x52>
 801a0a8:	0c1b      	lsrs	r3, r3, #16
 801a0aa:	2010      	movs	r0, #16
 801a0ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a0b0:	bf04      	itt	eq
 801a0b2:	0a1b      	lsreq	r3, r3, #8
 801a0b4:	3008      	addeq	r0, #8
 801a0b6:	071a      	lsls	r2, r3, #28
 801a0b8:	bf04      	itt	eq
 801a0ba:	091b      	lsreq	r3, r3, #4
 801a0bc:	3004      	addeq	r0, #4
 801a0be:	079a      	lsls	r2, r3, #30
 801a0c0:	bf04      	itt	eq
 801a0c2:	089b      	lsreq	r3, r3, #2
 801a0c4:	3002      	addeq	r0, #2
 801a0c6:	07da      	lsls	r2, r3, #31
 801a0c8:	d402      	bmi.n	801a0d0 <__lo0bits+0x4e>
 801a0ca:	085b      	lsrs	r3, r3, #1
 801a0cc:	d006      	beq.n	801a0dc <__lo0bits+0x5a>
 801a0ce:	3001      	adds	r0, #1
 801a0d0:	600b      	str	r3, [r1, #0]
 801a0d2:	4770      	bx	lr
 801a0d4:	4610      	mov	r0, r2
 801a0d6:	e7e9      	b.n	801a0ac <__lo0bits+0x2a>
 801a0d8:	2000      	movs	r0, #0
 801a0da:	4770      	bx	lr
 801a0dc:	2020      	movs	r0, #32
 801a0de:	4770      	bx	lr

0801a0e0 <__i2b>:
 801a0e0:	b510      	push	{r4, lr}
 801a0e2:	460c      	mov	r4, r1
 801a0e4:	2101      	movs	r1, #1
 801a0e6:	f7ff fee9 	bl	8019ebc <_Balloc>
 801a0ea:	2201      	movs	r2, #1
 801a0ec:	6144      	str	r4, [r0, #20]
 801a0ee:	6102      	str	r2, [r0, #16]
 801a0f0:	bd10      	pop	{r4, pc}

0801a0f2 <__multiply>:
 801a0f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f6:	4614      	mov	r4, r2
 801a0f8:	690a      	ldr	r2, [r1, #16]
 801a0fa:	6923      	ldr	r3, [r4, #16]
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	bfb8      	it	lt
 801a100:	460b      	movlt	r3, r1
 801a102:	4688      	mov	r8, r1
 801a104:	bfbc      	itt	lt
 801a106:	46a0      	movlt	r8, r4
 801a108:	461c      	movlt	r4, r3
 801a10a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a10e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a116:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a11a:	eb07 0609 	add.w	r6, r7, r9
 801a11e:	42b3      	cmp	r3, r6
 801a120:	bfb8      	it	lt
 801a122:	3101      	addlt	r1, #1
 801a124:	f7ff feca 	bl	8019ebc <_Balloc>
 801a128:	f100 0514 	add.w	r5, r0, #20
 801a12c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801a130:	462b      	mov	r3, r5
 801a132:	2200      	movs	r2, #0
 801a134:	4573      	cmp	r3, lr
 801a136:	d316      	bcc.n	801a166 <__multiply+0x74>
 801a138:	f104 0214 	add.w	r2, r4, #20
 801a13c:	f108 0114 	add.w	r1, r8, #20
 801a140:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a144:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	9b00      	ldr	r3, [sp, #0]
 801a14c:	9201      	str	r2, [sp, #4]
 801a14e:	4293      	cmp	r3, r2
 801a150:	d80c      	bhi.n	801a16c <__multiply+0x7a>
 801a152:	2e00      	cmp	r6, #0
 801a154:	dd03      	ble.n	801a15e <__multiply+0x6c>
 801a156:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d05d      	beq.n	801a21a <__multiply+0x128>
 801a15e:	6106      	str	r6, [r0, #16]
 801a160:	b003      	add	sp, #12
 801a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a166:	f843 2b04 	str.w	r2, [r3], #4
 801a16a:	e7e3      	b.n	801a134 <__multiply+0x42>
 801a16c:	f8b2 b000 	ldrh.w	fp, [r2]
 801a170:	f1bb 0f00 	cmp.w	fp, #0
 801a174:	d023      	beq.n	801a1be <__multiply+0xcc>
 801a176:	4689      	mov	r9, r1
 801a178:	46ac      	mov	ip, r5
 801a17a:	f04f 0800 	mov.w	r8, #0
 801a17e:	f859 4b04 	ldr.w	r4, [r9], #4
 801a182:	f8dc a000 	ldr.w	sl, [ip]
 801a186:	b2a3      	uxth	r3, r4
 801a188:	fa1f fa8a 	uxth.w	sl, sl
 801a18c:	fb0b a303 	mla	r3, fp, r3, sl
 801a190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a194:	f8dc 4000 	ldr.w	r4, [ip]
 801a198:	4443      	add	r3, r8
 801a19a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a19e:	fb0b 840a 	mla	r4, fp, sl, r8
 801a1a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a1a6:	46e2      	mov	sl, ip
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a1ae:	454f      	cmp	r7, r9
 801a1b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a1b4:	f84a 3b04 	str.w	r3, [sl], #4
 801a1b8:	d82b      	bhi.n	801a212 <__multiply+0x120>
 801a1ba:	f8cc 8004 	str.w	r8, [ip, #4]
 801a1be:	9b01      	ldr	r3, [sp, #4]
 801a1c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a1c4:	3204      	adds	r2, #4
 801a1c6:	f1ba 0f00 	cmp.w	sl, #0
 801a1ca:	d020      	beq.n	801a20e <__multiply+0x11c>
 801a1cc:	682b      	ldr	r3, [r5, #0]
 801a1ce:	4689      	mov	r9, r1
 801a1d0:	46a8      	mov	r8, r5
 801a1d2:	f04f 0b00 	mov.w	fp, #0
 801a1d6:	f8b9 c000 	ldrh.w	ip, [r9]
 801a1da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a1de:	fb0a 440c 	mla	r4, sl, ip, r4
 801a1e2:	445c      	add	r4, fp
 801a1e4:	46c4      	mov	ip, r8
 801a1e6:	b29b      	uxth	r3, r3
 801a1e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a1ec:	f84c 3b04 	str.w	r3, [ip], #4
 801a1f0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a1f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a1f8:	0c1b      	lsrs	r3, r3, #16
 801a1fa:	fb0a b303 	mla	r3, sl, r3, fp
 801a1fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a202:	454f      	cmp	r7, r9
 801a204:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a208:	d805      	bhi.n	801a216 <__multiply+0x124>
 801a20a:	f8c8 3004 	str.w	r3, [r8, #4]
 801a20e:	3504      	adds	r5, #4
 801a210:	e79b      	b.n	801a14a <__multiply+0x58>
 801a212:	46d4      	mov	ip, sl
 801a214:	e7b3      	b.n	801a17e <__multiply+0x8c>
 801a216:	46e0      	mov	r8, ip
 801a218:	e7dd      	b.n	801a1d6 <__multiply+0xe4>
 801a21a:	3e01      	subs	r6, #1
 801a21c:	e799      	b.n	801a152 <__multiply+0x60>
	...

0801a220 <__pow5mult>:
 801a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a224:	4615      	mov	r5, r2
 801a226:	f012 0203 	ands.w	r2, r2, #3
 801a22a:	4606      	mov	r6, r0
 801a22c:	460f      	mov	r7, r1
 801a22e:	d007      	beq.n	801a240 <__pow5mult+0x20>
 801a230:	3a01      	subs	r2, #1
 801a232:	4c21      	ldr	r4, [pc, #132]	; (801a2b8 <__pow5mult+0x98>)
 801a234:	2300      	movs	r3, #0
 801a236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a23a:	f7ff fe8a 	bl	8019f52 <__multadd>
 801a23e:	4607      	mov	r7, r0
 801a240:	10ad      	asrs	r5, r5, #2
 801a242:	d035      	beq.n	801a2b0 <__pow5mult+0x90>
 801a244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a246:	b93c      	cbnz	r4, 801a258 <__pow5mult+0x38>
 801a248:	2010      	movs	r0, #16
 801a24a:	f7fc fe21 	bl	8016e90 <malloc>
 801a24e:	6270      	str	r0, [r6, #36]	; 0x24
 801a250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a254:	6004      	str	r4, [r0, #0]
 801a256:	60c4      	str	r4, [r0, #12]
 801a258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a260:	b94c      	cbnz	r4, 801a276 <__pow5mult+0x56>
 801a262:	f240 2171 	movw	r1, #625	; 0x271
 801a266:	4630      	mov	r0, r6
 801a268:	f7ff ff3a 	bl	801a0e0 <__i2b>
 801a26c:	2300      	movs	r3, #0
 801a26e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a272:	4604      	mov	r4, r0
 801a274:	6003      	str	r3, [r0, #0]
 801a276:	f04f 0800 	mov.w	r8, #0
 801a27a:	07eb      	lsls	r3, r5, #31
 801a27c:	d50a      	bpl.n	801a294 <__pow5mult+0x74>
 801a27e:	4639      	mov	r1, r7
 801a280:	4622      	mov	r2, r4
 801a282:	4630      	mov	r0, r6
 801a284:	f7ff ff35 	bl	801a0f2 <__multiply>
 801a288:	4639      	mov	r1, r7
 801a28a:	4681      	mov	r9, r0
 801a28c:	4630      	mov	r0, r6
 801a28e:	f7ff fe49 	bl	8019f24 <_Bfree>
 801a292:	464f      	mov	r7, r9
 801a294:	106d      	asrs	r5, r5, #1
 801a296:	d00b      	beq.n	801a2b0 <__pow5mult+0x90>
 801a298:	6820      	ldr	r0, [r4, #0]
 801a29a:	b938      	cbnz	r0, 801a2ac <__pow5mult+0x8c>
 801a29c:	4622      	mov	r2, r4
 801a29e:	4621      	mov	r1, r4
 801a2a0:	4630      	mov	r0, r6
 801a2a2:	f7ff ff26 	bl	801a0f2 <__multiply>
 801a2a6:	6020      	str	r0, [r4, #0]
 801a2a8:	f8c0 8000 	str.w	r8, [r0]
 801a2ac:	4604      	mov	r4, r0
 801a2ae:	e7e4      	b.n	801a27a <__pow5mult+0x5a>
 801a2b0:	4638      	mov	r0, r7
 801a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2b6:	bf00      	nop
 801a2b8:	0801e5f0 	.word	0x0801e5f0

0801a2bc <__lshift>:
 801a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2c0:	460c      	mov	r4, r1
 801a2c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a2c6:	6923      	ldr	r3, [r4, #16]
 801a2c8:	6849      	ldr	r1, [r1, #4]
 801a2ca:	eb0a 0903 	add.w	r9, sl, r3
 801a2ce:	68a3      	ldr	r3, [r4, #8]
 801a2d0:	4607      	mov	r7, r0
 801a2d2:	4616      	mov	r6, r2
 801a2d4:	f109 0501 	add.w	r5, r9, #1
 801a2d8:	42ab      	cmp	r3, r5
 801a2da:	db32      	blt.n	801a342 <__lshift+0x86>
 801a2dc:	4638      	mov	r0, r7
 801a2de:	f7ff fded 	bl	8019ebc <_Balloc>
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	4680      	mov	r8, r0
 801a2e6:	f100 0114 	add.w	r1, r0, #20
 801a2ea:	461a      	mov	r2, r3
 801a2ec:	4553      	cmp	r3, sl
 801a2ee:	db2b      	blt.n	801a348 <__lshift+0x8c>
 801a2f0:	6920      	ldr	r0, [r4, #16]
 801a2f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a2f6:	f104 0314 	add.w	r3, r4, #20
 801a2fa:	f016 021f 	ands.w	r2, r6, #31
 801a2fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a302:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a306:	d025      	beq.n	801a354 <__lshift+0x98>
 801a308:	f1c2 0e20 	rsb	lr, r2, #32
 801a30c:	2000      	movs	r0, #0
 801a30e:	681e      	ldr	r6, [r3, #0]
 801a310:	468a      	mov	sl, r1
 801a312:	4096      	lsls	r6, r2
 801a314:	4330      	orrs	r0, r6
 801a316:	f84a 0b04 	str.w	r0, [sl], #4
 801a31a:	f853 0b04 	ldr.w	r0, [r3], #4
 801a31e:	459c      	cmp	ip, r3
 801a320:	fa20 f00e 	lsr.w	r0, r0, lr
 801a324:	d814      	bhi.n	801a350 <__lshift+0x94>
 801a326:	6048      	str	r0, [r1, #4]
 801a328:	b108      	cbz	r0, 801a32e <__lshift+0x72>
 801a32a:	f109 0502 	add.w	r5, r9, #2
 801a32e:	3d01      	subs	r5, #1
 801a330:	4638      	mov	r0, r7
 801a332:	f8c8 5010 	str.w	r5, [r8, #16]
 801a336:	4621      	mov	r1, r4
 801a338:	f7ff fdf4 	bl	8019f24 <_Bfree>
 801a33c:	4640      	mov	r0, r8
 801a33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a342:	3101      	adds	r1, #1
 801a344:	005b      	lsls	r3, r3, #1
 801a346:	e7c7      	b.n	801a2d8 <__lshift+0x1c>
 801a348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a34c:	3301      	adds	r3, #1
 801a34e:	e7cd      	b.n	801a2ec <__lshift+0x30>
 801a350:	4651      	mov	r1, sl
 801a352:	e7dc      	b.n	801a30e <__lshift+0x52>
 801a354:	3904      	subs	r1, #4
 801a356:	f853 2b04 	ldr.w	r2, [r3], #4
 801a35a:	f841 2f04 	str.w	r2, [r1, #4]!
 801a35e:	459c      	cmp	ip, r3
 801a360:	d8f9      	bhi.n	801a356 <__lshift+0x9a>
 801a362:	e7e4      	b.n	801a32e <__lshift+0x72>

0801a364 <__mcmp>:
 801a364:	6903      	ldr	r3, [r0, #16]
 801a366:	690a      	ldr	r2, [r1, #16]
 801a368:	1a9b      	subs	r3, r3, r2
 801a36a:	b530      	push	{r4, r5, lr}
 801a36c:	d10c      	bne.n	801a388 <__mcmp+0x24>
 801a36e:	0092      	lsls	r2, r2, #2
 801a370:	3014      	adds	r0, #20
 801a372:	3114      	adds	r1, #20
 801a374:	1884      	adds	r4, r0, r2
 801a376:	4411      	add	r1, r2
 801a378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a380:	4295      	cmp	r5, r2
 801a382:	d003      	beq.n	801a38c <__mcmp+0x28>
 801a384:	d305      	bcc.n	801a392 <__mcmp+0x2e>
 801a386:	2301      	movs	r3, #1
 801a388:	4618      	mov	r0, r3
 801a38a:	bd30      	pop	{r4, r5, pc}
 801a38c:	42a0      	cmp	r0, r4
 801a38e:	d3f3      	bcc.n	801a378 <__mcmp+0x14>
 801a390:	e7fa      	b.n	801a388 <__mcmp+0x24>
 801a392:	f04f 33ff 	mov.w	r3, #4294967295
 801a396:	e7f7      	b.n	801a388 <__mcmp+0x24>

0801a398 <__mdiff>:
 801a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a39c:	460d      	mov	r5, r1
 801a39e:	4607      	mov	r7, r0
 801a3a0:	4611      	mov	r1, r2
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	4614      	mov	r4, r2
 801a3a6:	f7ff ffdd 	bl	801a364 <__mcmp>
 801a3aa:	1e06      	subs	r6, r0, #0
 801a3ac:	d108      	bne.n	801a3c0 <__mdiff+0x28>
 801a3ae:	4631      	mov	r1, r6
 801a3b0:	4638      	mov	r0, r7
 801a3b2:	f7ff fd83 	bl	8019ebc <_Balloc>
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3c0:	bfa4      	itt	ge
 801a3c2:	4623      	movge	r3, r4
 801a3c4:	462c      	movge	r4, r5
 801a3c6:	4638      	mov	r0, r7
 801a3c8:	6861      	ldr	r1, [r4, #4]
 801a3ca:	bfa6      	itte	ge
 801a3cc:	461d      	movge	r5, r3
 801a3ce:	2600      	movge	r6, #0
 801a3d0:	2601      	movlt	r6, #1
 801a3d2:	f7ff fd73 	bl	8019ebc <_Balloc>
 801a3d6:	692b      	ldr	r3, [r5, #16]
 801a3d8:	60c6      	str	r6, [r0, #12]
 801a3da:	6926      	ldr	r6, [r4, #16]
 801a3dc:	f105 0914 	add.w	r9, r5, #20
 801a3e0:	f104 0214 	add.w	r2, r4, #20
 801a3e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a3e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a3ec:	f100 0514 	add.w	r5, r0, #20
 801a3f0:	f04f 0e00 	mov.w	lr, #0
 801a3f4:	f852 ab04 	ldr.w	sl, [r2], #4
 801a3f8:	f859 4b04 	ldr.w	r4, [r9], #4
 801a3fc:	fa1e f18a 	uxtah	r1, lr, sl
 801a400:	b2a3      	uxth	r3, r4
 801a402:	1ac9      	subs	r1, r1, r3
 801a404:	0c23      	lsrs	r3, r4, #16
 801a406:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a40a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a40e:	b289      	uxth	r1, r1
 801a410:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a414:	45c8      	cmp	r8, r9
 801a416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a41a:	4694      	mov	ip, r2
 801a41c:	f845 3b04 	str.w	r3, [r5], #4
 801a420:	d8e8      	bhi.n	801a3f4 <__mdiff+0x5c>
 801a422:	45bc      	cmp	ip, r7
 801a424:	d304      	bcc.n	801a430 <__mdiff+0x98>
 801a426:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a42a:	b183      	cbz	r3, 801a44e <__mdiff+0xb6>
 801a42c:	6106      	str	r6, [r0, #16]
 801a42e:	e7c5      	b.n	801a3bc <__mdiff+0x24>
 801a430:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a434:	fa1e f381 	uxtah	r3, lr, r1
 801a438:	141a      	asrs	r2, r3, #16
 801a43a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a43e:	b29b      	uxth	r3, r3
 801a440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a444:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a448:	f845 3b04 	str.w	r3, [r5], #4
 801a44c:	e7e9      	b.n	801a422 <__mdiff+0x8a>
 801a44e:	3e01      	subs	r6, #1
 801a450:	e7e9      	b.n	801a426 <__mdiff+0x8e>
	...

0801a454 <__ulp>:
 801a454:	4b12      	ldr	r3, [pc, #72]	; (801a4a0 <__ulp+0x4c>)
 801a456:	ee10 2a90 	vmov	r2, s1
 801a45a:	401a      	ands	r2, r3
 801a45c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a460:	2b00      	cmp	r3, #0
 801a462:	dd04      	ble.n	801a46e <__ulp+0x1a>
 801a464:	2000      	movs	r0, #0
 801a466:	4619      	mov	r1, r3
 801a468:	ec41 0b10 	vmov	d0, r0, r1
 801a46c:	4770      	bx	lr
 801a46e:	425b      	negs	r3, r3
 801a470:	151b      	asrs	r3, r3, #20
 801a472:	2b13      	cmp	r3, #19
 801a474:	f04f 0000 	mov.w	r0, #0
 801a478:	f04f 0100 	mov.w	r1, #0
 801a47c:	dc04      	bgt.n	801a488 <__ulp+0x34>
 801a47e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a482:	fa42 f103 	asr.w	r1, r2, r3
 801a486:	e7ef      	b.n	801a468 <__ulp+0x14>
 801a488:	3b14      	subs	r3, #20
 801a48a:	2b1e      	cmp	r3, #30
 801a48c:	f04f 0201 	mov.w	r2, #1
 801a490:	bfda      	itte	le
 801a492:	f1c3 031f 	rsble	r3, r3, #31
 801a496:	fa02 f303 	lslle.w	r3, r2, r3
 801a49a:	4613      	movgt	r3, r2
 801a49c:	4618      	mov	r0, r3
 801a49e:	e7e3      	b.n	801a468 <__ulp+0x14>
 801a4a0:	7ff00000 	.word	0x7ff00000

0801a4a4 <__b2d>:
 801a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4a6:	6905      	ldr	r5, [r0, #16]
 801a4a8:	f100 0714 	add.w	r7, r0, #20
 801a4ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a4b0:	1f2e      	subs	r6, r5, #4
 801a4b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	f7ff fdc4 	bl	801a044 <__hi0bits>
 801a4bc:	f1c0 0320 	rsb	r3, r0, #32
 801a4c0:	280a      	cmp	r0, #10
 801a4c2:	600b      	str	r3, [r1, #0]
 801a4c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a53c <__b2d+0x98>
 801a4c8:	dc14      	bgt.n	801a4f4 <__b2d+0x50>
 801a4ca:	f1c0 0e0b 	rsb	lr, r0, #11
 801a4ce:	fa24 f10e 	lsr.w	r1, r4, lr
 801a4d2:	42b7      	cmp	r7, r6
 801a4d4:	ea41 030c 	orr.w	r3, r1, ip
 801a4d8:	bf34      	ite	cc
 801a4da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a4de:	2100      	movcs	r1, #0
 801a4e0:	3015      	adds	r0, #21
 801a4e2:	fa04 f000 	lsl.w	r0, r4, r0
 801a4e6:	fa21 f10e 	lsr.w	r1, r1, lr
 801a4ea:	ea40 0201 	orr.w	r2, r0, r1
 801a4ee:	ec43 2b10 	vmov	d0, r2, r3
 801a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4f4:	42b7      	cmp	r7, r6
 801a4f6:	bf3a      	itte	cc
 801a4f8:	f1a5 0608 	subcc.w	r6, r5, #8
 801a4fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a500:	2100      	movcs	r1, #0
 801a502:	380b      	subs	r0, #11
 801a504:	d015      	beq.n	801a532 <__b2d+0x8e>
 801a506:	4084      	lsls	r4, r0
 801a508:	f1c0 0520 	rsb	r5, r0, #32
 801a50c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a510:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a514:	42be      	cmp	r6, r7
 801a516:	fa21 fc05 	lsr.w	ip, r1, r5
 801a51a:	ea44 030c 	orr.w	r3, r4, ip
 801a51e:	bf8c      	ite	hi
 801a520:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a524:	2400      	movls	r4, #0
 801a526:	fa01 f000 	lsl.w	r0, r1, r0
 801a52a:	40ec      	lsrs	r4, r5
 801a52c:	ea40 0204 	orr.w	r2, r0, r4
 801a530:	e7dd      	b.n	801a4ee <__b2d+0x4a>
 801a532:	ea44 030c 	orr.w	r3, r4, ip
 801a536:	460a      	mov	r2, r1
 801a538:	e7d9      	b.n	801a4ee <__b2d+0x4a>
 801a53a:	bf00      	nop
 801a53c:	3ff00000 	.word	0x3ff00000

0801a540 <__d2b>:
 801a540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a544:	460e      	mov	r6, r1
 801a546:	2101      	movs	r1, #1
 801a548:	ec59 8b10 	vmov	r8, r9, d0
 801a54c:	4615      	mov	r5, r2
 801a54e:	f7ff fcb5 	bl	8019ebc <_Balloc>
 801a552:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a556:	4607      	mov	r7, r0
 801a558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a55c:	bb34      	cbnz	r4, 801a5ac <__d2b+0x6c>
 801a55e:	9301      	str	r3, [sp, #4]
 801a560:	f1b8 0300 	subs.w	r3, r8, #0
 801a564:	d027      	beq.n	801a5b6 <__d2b+0x76>
 801a566:	a802      	add	r0, sp, #8
 801a568:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a56c:	f7ff fd89 	bl	801a082 <__lo0bits>
 801a570:	9900      	ldr	r1, [sp, #0]
 801a572:	b1f0      	cbz	r0, 801a5b2 <__d2b+0x72>
 801a574:	9a01      	ldr	r2, [sp, #4]
 801a576:	f1c0 0320 	rsb	r3, r0, #32
 801a57a:	fa02 f303 	lsl.w	r3, r2, r3
 801a57e:	430b      	orrs	r3, r1
 801a580:	40c2      	lsrs	r2, r0
 801a582:	617b      	str	r3, [r7, #20]
 801a584:	9201      	str	r2, [sp, #4]
 801a586:	9b01      	ldr	r3, [sp, #4]
 801a588:	61bb      	str	r3, [r7, #24]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	bf14      	ite	ne
 801a58e:	2102      	movne	r1, #2
 801a590:	2101      	moveq	r1, #1
 801a592:	6139      	str	r1, [r7, #16]
 801a594:	b1c4      	cbz	r4, 801a5c8 <__d2b+0x88>
 801a596:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a59a:	4404      	add	r4, r0
 801a59c:	6034      	str	r4, [r6, #0]
 801a59e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a5a2:	6028      	str	r0, [r5, #0]
 801a5a4:	4638      	mov	r0, r7
 801a5a6:	b003      	add	sp, #12
 801a5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a5b0:	e7d5      	b.n	801a55e <__d2b+0x1e>
 801a5b2:	6179      	str	r1, [r7, #20]
 801a5b4:	e7e7      	b.n	801a586 <__d2b+0x46>
 801a5b6:	a801      	add	r0, sp, #4
 801a5b8:	f7ff fd63 	bl	801a082 <__lo0bits>
 801a5bc:	9b01      	ldr	r3, [sp, #4]
 801a5be:	617b      	str	r3, [r7, #20]
 801a5c0:	2101      	movs	r1, #1
 801a5c2:	6139      	str	r1, [r7, #16]
 801a5c4:	3020      	adds	r0, #32
 801a5c6:	e7e5      	b.n	801a594 <__d2b+0x54>
 801a5c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a5cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a5d0:	6030      	str	r0, [r6, #0]
 801a5d2:	6918      	ldr	r0, [r3, #16]
 801a5d4:	f7ff fd36 	bl	801a044 <__hi0bits>
 801a5d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a5dc:	e7e1      	b.n	801a5a2 <__d2b+0x62>

0801a5de <__ratio>:
 801a5de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e2:	4688      	mov	r8, r1
 801a5e4:	4669      	mov	r1, sp
 801a5e6:	4681      	mov	r9, r0
 801a5e8:	f7ff ff5c 	bl	801a4a4 <__b2d>
 801a5ec:	a901      	add	r1, sp, #4
 801a5ee:	4640      	mov	r0, r8
 801a5f0:	ec57 6b10 	vmov	r6, r7, d0
 801a5f4:	f7ff ff56 	bl	801a4a4 <__b2d>
 801a5f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a5fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a600:	eba3 0c02 	sub.w	ip, r3, r2
 801a604:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a608:	1a9b      	subs	r3, r3, r2
 801a60a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a60e:	ec5b ab10 	vmov	sl, fp, d0
 801a612:	2b00      	cmp	r3, #0
 801a614:	bfce      	itee	gt
 801a616:	463a      	movgt	r2, r7
 801a618:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a61c:	465a      	movle	r2, fp
 801a61e:	4659      	mov	r1, fp
 801a620:	463d      	mov	r5, r7
 801a622:	bfd4      	ite	le
 801a624:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a628:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801a62c:	4630      	mov	r0, r6
 801a62e:	ee10 2a10 	vmov	r2, s0
 801a632:	460b      	mov	r3, r1
 801a634:	4629      	mov	r1, r5
 801a636:	f7e6 f919 	bl	800086c <__aeabi_ddiv>
 801a63a:	ec41 0b10 	vmov	d0, r0, r1
 801a63e:	b003      	add	sp, #12
 801a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a644 <__copybits>:
 801a644:	3901      	subs	r1, #1
 801a646:	b510      	push	{r4, lr}
 801a648:	1149      	asrs	r1, r1, #5
 801a64a:	6914      	ldr	r4, [r2, #16]
 801a64c:	3101      	adds	r1, #1
 801a64e:	f102 0314 	add.w	r3, r2, #20
 801a652:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a65a:	42a3      	cmp	r3, r4
 801a65c:	4602      	mov	r2, r0
 801a65e:	d303      	bcc.n	801a668 <__copybits+0x24>
 801a660:	2300      	movs	r3, #0
 801a662:	428a      	cmp	r2, r1
 801a664:	d305      	bcc.n	801a672 <__copybits+0x2e>
 801a666:	bd10      	pop	{r4, pc}
 801a668:	f853 2b04 	ldr.w	r2, [r3], #4
 801a66c:	f840 2b04 	str.w	r2, [r0], #4
 801a670:	e7f3      	b.n	801a65a <__copybits+0x16>
 801a672:	f842 3b04 	str.w	r3, [r2], #4
 801a676:	e7f4      	b.n	801a662 <__copybits+0x1e>

0801a678 <__any_on>:
 801a678:	f100 0214 	add.w	r2, r0, #20
 801a67c:	6900      	ldr	r0, [r0, #16]
 801a67e:	114b      	asrs	r3, r1, #5
 801a680:	4298      	cmp	r0, r3
 801a682:	b510      	push	{r4, lr}
 801a684:	db11      	blt.n	801a6aa <__any_on+0x32>
 801a686:	dd0a      	ble.n	801a69e <__any_on+0x26>
 801a688:	f011 011f 	ands.w	r1, r1, #31
 801a68c:	d007      	beq.n	801a69e <__any_on+0x26>
 801a68e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a692:	fa24 f001 	lsr.w	r0, r4, r1
 801a696:	fa00 f101 	lsl.w	r1, r0, r1
 801a69a:	428c      	cmp	r4, r1
 801a69c:	d10b      	bne.n	801a6b6 <__any_on+0x3e>
 801a69e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6a2:	4293      	cmp	r3, r2
 801a6a4:	d803      	bhi.n	801a6ae <__any_on+0x36>
 801a6a6:	2000      	movs	r0, #0
 801a6a8:	bd10      	pop	{r4, pc}
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	e7f7      	b.n	801a69e <__any_on+0x26>
 801a6ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6b2:	2900      	cmp	r1, #0
 801a6b4:	d0f5      	beq.n	801a6a2 <__any_on+0x2a>
 801a6b6:	2001      	movs	r0, #1
 801a6b8:	e7f6      	b.n	801a6a8 <__any_on+0x30>

0801a6ba <_calloc_r>:
 801a6ba:	b538      	push	{r3, r4, r5, lr}
 801a6bc:	fb02 f401 	mul.w	r4, r2, r1
 801a6c0:	4621      	mov	r1, r4
 801a6c2:	f7fc fc57 	bl	8016f74 <_malloc_r>
 801a6c6:	4605      	mov	r5, r0
 801a6c8:	b118      	cbz	r0, 801a6d2 <_calloc_r+0x18>
 801a6ca:	4622      	mov	r2, r4
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	f7fc fbfa 	bl	8016ec6 <memset>
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	bd38      	pop	{r3, r4, r5, pc}

0801a6d6 <__ssputs_r>:
 801a6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6da:	688e      	ldr	r6, [r1, #8]
 801a6dc:	429e      	cmp	r6, r3
 801a6de:	4682      	mov	sl, r0
 801a6e0:	460c      	mov	r4, r1
 801a6e2:	4690      	mov	r8, r2
 801a6e4:	4699      	mov	r9, r3
 801a6e6:	d837      	bhi.n	801a758 <__ssputs_r+0x82>
 801a6e8:	898a      	ldrh	r2, [r1, #12]
 801a6ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a6ee:	d031      	beq.n	801a754 <__ssputs_r+0x7e>
 801a6f0:	6825      	ldr	r5, [r4, #0]
 801a6f2:	6909      	ldr	r1, [r1, #16]
 801a6f4:	1a6f      	subs	r7, r5, r1
 801a6f6:	6965      	ldr	r5, [r4, #20]
 801a6f8:	2302      	movs	r3, #2
 801a6fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a6fe:	fb95 f5f3 	sdiv	r5, r5, r3
 801a702:	f109 0301 	add.w	r3, r9, #1
 801a706:	443b      	add	r3, r7
 801a708:	429d      	cmp	r5, r3
 801a70a:	bf38      	it	cc
 801a70c:	461d      	movcc	r5, r3
 801a70e:	0553      	lsls	r3, r2, #21
 801a710:	d530      	bpl.n	801a774 <__ssputs_r+0x9e>
 801a712:	4629      	mov	r1, r5
 801a714:	f7fc fc2e 	bl	8016f74 <_malloc_r>
 801a718:	4606      	mov	r6, r0
 801a71a:	b950      	cbnz	r0, 801a732 <__ssputs_r+0x5c>
 801a71c:	230c      	movs	r3, #12
 801a71e:	f8ca 3000 	str.w	r3, [sl]
 801a722:	89a3      	ldrh	r3, [r4, #12]
 801a724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a728:	81a3      	strh	r3, [r4, #12]
 801a72a:	f04f 30ff 	mov.w	r0, #4294967295
 801a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a732:	463a      	mov	r2, r7
 801a734:	6921      	ldr	r1, [r4, #16]
 801a736:	f7fc fbbb 	bl	8016eb0 <memcpy>
 801a73a:	89a3      	ldrh	r3, [r4, #12]
 801a73c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a744:	81a3      	strh	r3, [r4, #12]
 801a746:	6126      	str	r6, [r4, #16]
 801a748:	6165      	str	r5, [r4, #20]
 801a74a:	443e      	add	r6, r7
 801a74c:	1bed      	subs	r5, r5, r7
 801a74e:	6026      	str	r6, [r4, #0]
 801a750:	60a5      	str	r5, [r4, #8]
 801a752:	464e      	mov	r6, r9
 801a754:	454e      	cmp	r6, r9
 801a756:	d900      	bls.n	801a75a <__ssputs_r+0x84>
 801a758:	464e      	mov	r6, r9
 801a75a:	4632      	mov	r2, r6
 801a75c:	4641      	mov	r1, r8
 801a75e:	6820      	ldr	r0, [r4, #0]
 801a760:	f000 f919 	bl	801a996 <memmove>
 801a764:	68a3      	ldr	r3, [r4, #8]
 801a766:	1b9b      	subs	r3, r3, r6
 801a768:	60a3      	str	r3, [r4, #8]
 801a76a:	6823      	ldr	r3, [r4, #0]
 801a76c:	441e      	add	r6, r3
 801a76e:	6026      	str	r6, [r4, #0]
 801a770:	2000      	movs	r0, #0
 801a772:	e7dc      	b.n	801a72e <__ssputs_r+0x58>
 801a774:	462a      	mov	r2, r5
 801a776:	f000 f927 	bl	801a9c8 <_realloc_r>
 801a77a:	4606      	mov	r6, r0
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d1e2      	bne.n	801a746 <__ssputs_r+0x70>
 801a780:	6921      	ldr	r1, [r4, #16]
 801a782:	4650      	mov	r0, sl
 801a784:	f7fc fba8 	bl	8016ed8 <_free_r>
 801a788:	e7c8      	b.n	801a71c <__ssputs_r+0x46>
	...

0801a78c <_svfiprintf_r>:
 801a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a790:	461d      	mov	r5, r3
 801a792:	898b      	ldrh	r3, [r1, #12]
 801a794:	061f      	lsls	r7, r3, #24
 801a796:	b09d      	sub	sp, #116	; 0x74
 801a798:	4680      	mov	r8, r0
 801a79a:	460c      	mov	r4, r1
 801a79c:	4616      	mov	r6, r2
 801a79e:	d50f      	bpl.n	801a7c0 <_svfiprintf_r+0x34>
 801a7a0:	690b      	ldr	r3, [r1, #16]
 801a7a2:	b96b      	cbnz	r3, 801a7c0 <_svfiprintf_r+0x34>
 801a7a4:	2140      	movs	r1, #64	; 0x40
 801a7a6:	f7fc fbe5 	bl	8016f74 <_malloc_r>
 801a7aa:	6020      	str	r0, [r4, #0]
 801a7ac:	6120      	str	r0, [r4, #16]
 801a7ae:	b928      	cbnz	r0, 801a7bc <_svfiprintf_r+0x30>
 801a7b0:	230c      	movs	r3, #12
 801a7b2:	f8c8 3000 	str.w	r3, [r8]
 801a7b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ba:	e0c8      	b.n	801a94e <_svfiprintf_r+0x1c2>
 801a7bc:	2340      	movs	r3, #64	; 0x40
 801a7be:	6163      	str	r3, [r4, #20]
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	9309      	str	r3, [sp, #36]	; 0x24
 801a7c4:	2320      	movs	r3, #32
 801a7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7ca:	2330      	movs	r3, #48	; 0x30
 801a7cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7d0:	9503      	str	r5, [sp, #12]
 801a7d2:	f04f 0b01 	mov.w	fp, #1
 801a7d6:	4637      	mov	r7, r6
 801a7d8:	463d      	mov	r5, r7
 801a7da:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a7de:	b10b      	cbz	r3, 801a7e4 <_svfiprintf_r+0x58>
 801a7e0:	2b25      	cmp	r3, #37	; 0x25
 801a7e2:	d13e      	bne.n	801a862 <_svfiprintf_r+0xd6>
 801a7e4:	ebb7 0a06 	subs.w	sl, r7, r6
 801a7e8:	d00b      	beq.n	801a802 <_svfiprintf_r+0x76>
 801a7ea:	4653      	mov	r3, sl
 801a7ec:	4632      	mov	r2, r6
 801a7ee:	4621      	mov	r1, r4
 801a7f0:	4640      	mov	r0, r8
 801a7f2:	f7ff ff70 	bl	801a6d6 <__ssputs_r>
 801a7f6:	3001      	adds	r0, #1
 801a7f8:	f000 80a4 	beq.w	801a944 <_svfiprintf_r+0x1b8>
 801a7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7fe:	4453      	add	r3, sl
 801a800:	9309      	str	r3, [sp, #36]	; 0x24
 801a802:	783b      	ldrb	r3, [r7, #0]
 801a804:	2b00      	cmp	r3, #0
 801a806:	f000 809d 	beq.w	801a944 <_svfiprintf_r+0x1b8>
 801a80a:	2300      	movs	r3, #0
 801a80c:	f04f 32ff 	mov.w	r2, #4294967295
 801a810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a814:	9304      	str	r3, [sp, #16]
 801a816:	9307      	str	r3, [sp, #28]
 801a818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a81c:	931a      	str	r3, [sp, #104]	; 0x68
 801a81e:	462f      	mov	r7, r5
 801a820:	2205      	movs	r2, #5
 801a822:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a826:	4850      	ldr	r0, [pc, #320]	; (801a968 <_svfiprintf_r+0x1dc>)
 801a828:	f7e5 fcea 	bl	8000200 <memchr>
 801a82c:	9b04      	ldr	r3, [sp, #16]
 801a82e:	b9d0      	cbnz	r0, 801a866 <_svfiprintf_r+0xda>
 801a830:	06d9      	lsls	r1, r3, #27
 801a832:	bf44      	itt	mi
 801a834:	2220      	movmi	r2, #32
 801a836:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a83a:	071a      	lsls	r2, r3, #28
 801a83c:	bf44      	itt	mi
 801a83e:	222b      	movmi	r2, #43	; 0x2b
 801a840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a844:	782a      	ldrb	r2, [r5, #0]
 801a846:	2a2a      	cmp	r2, #42	; 0x2a
 801a848:	d015      	beq.n	801a876 <_svfiprintf_r+0xea>
 801a84a:	9a07      	ldr	r2, [sp, #28]
 801a84c:	462f      	mov	r7, r5
 801a84e:	2000      	movs	r0, #0
 801a850:	250a      	movs	r5, #10
 801a852:	4639      	mov	r1, r7
 801a854:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a858:	3b30      	subs	r3, #48	; 0x30
 801a85a:	2b09      	cmp	r3, #9
 801a85c:	d94d      	bls.n	801a8fa <_svfiprintf_r+0x16e>
 801a85e:	b1b8      	cbz	r0, 801a890 <_svfiprintf_r+0x104>
 801a860:	e00f      	b.n	801a882 <_svfiprintf_r+0xf6>
 801a862:	462f      	mov	r7, r5
 801a864:	e7b8      	b.n	801a7d8 <_svfiprintf_r+0x4c>
 801a866:	4a40      	ldr	r2, [pc, #256]	; (801a968 <_svfiprintf_r+0x1dc>)
 801a868:	1a80      	subs	r0, r0, r2
 801a86a:	fa0b f000 	lsl.w	r0, fp, r0
 801a86e:	4318      	orrs	r0, r3
 801a870:	9004      	str	r0, [sp, #16]
 801a872:	463d      	mov	r5, r7
 801a874:	e7d3      	b.n	801a81e <_svfiprintf_r+0x92>
 801a876:	9a03      	ldr	r2, [sp, #12]
 801a878:	1d11      	adds	r1, r2, #4
 801a87a:	6812      	ldr	r2, [r2, #0]
 801a87c:	9103      	str	r1, [sp, #12]
 801a87e:	2a00      	cmp	r2, #0
 801a880:	db01      	blt.n	801a886 <_svfiprintf_r+0xfa>
 801a882:	9207      	str	r2, [sp, #28]
 801a884:	e004      	b.n	801a890 <_svfiprintf_r+0x104>
 801a886:	4252      	negs	r2, r2
 801a888:	f043 0302 	orr.w	r3, r3, #2
 801a88c:	9207      	str	r2, [sp, #28]
 801a88e:	9304      	str	r3, [sp, #16]
 801a890:	783b      	ldrb	r3, [r7, #0]
 801a892:	2b2e      	cmp	r3, #46	; 0x2e
 801a894:	d10c      	bne.n	801a8b0 <_svfiprintf_r+0x124>
 801a896:	787b      	ldrb	r3, [r7, #1]
 801a898:	2b2a      	cmp	r3, #42	; 0x2a
 801a89a:	d133      	bne.n	801a904 <_svfiprintf_r+0x178>
 801a89c:	9b03      	ldr	r3, [sp, #12]
 801a89e:	1d1a      	adds	r2, r3, #4
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	9203      	str	r2, [sp, #12]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	bfb8      	it	lt
 801a8a8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8ac:	3702      	adds	r7, #2
 801a8ae:	9305      	str	r3, [sp, #20]
 801a8b0:	4d2e      	ldr	r5, [pc, #184]	; (801a96c <_svfiprintf_r+0x1e0>)
 801a8b2:	7839      	ldrb	r1, [r7, #0]
 801a8b4:	2203      	movs	r2, #3
 801a8b6:	4628      	mov	r0, r5
 801a8b8:	f7e5 fca2 	bl	8000200 <memchr>
 801a8bc:	b138      	cbz	r0, 801a8ce <_svfiprintf_r+0x142>
 801a8be:	2340      	movs	r3, #64	; 0x40
 801a8c0:	1b40      	subs	r0, r0, r5
 801a8c2:	fa03 f000 	lsl.w	r0, r3, r0
 801a8c6:	9b04      	ldr	r3, [sp, #16]
 801a8c8:	4303      	orrs	r3, r0
 801a8ca:	3701      	adds	r7, #1
 801a8cc:	9304      	str	r3, [sp, #16]
 801a8ce:	7839      	ldrb	r1, [r7, #0]
 801a8d0:	4827      	ldr	r0, [pc, #156]	; (801a970 <_svfiprintf_r+0x1e4>)
 801a8d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a8d6:	2206      	movs	r2, #6
 801a8d8:	1c7e      	adds	r6, r7, #1
 801a8da:	f7e5 fc91 	bl	8000200 <memchr>
 801a8de:	2800      	cmp	r0, #0
 801a8e0:	d038      	beq.n	801a954 <_svfiprintf_r+0x1c8>
 801a8e2:	4b24      	ldr	r3, [pc, #144]	; (801a974 <_svfiprintf_r+0x1e8>)
 801a8e4:	bb13      	cbnz	r3, 801a92c <_svfiprintf_r+0x1a0>
 801a8e6:	9b03      	ldr	r3, [sp, #12]
 801a8e8:	3307      	adds	r3, #7
 801a8ea:	f023 0307 	bic.w	r3, r3, #7
 801a8ee:	3308      	adds	r3, #8
 801a8f0:	9303      	str	r3, [sp, #12]
 801a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8f4:	444b      	add	r3, r9
 801a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f8:	e76d      	b.n	801a7d6 <_svfiprintf_r+0x4a>
 801a8fa:	fb05 3202 	mla	r2, r5, r2, r3
 801a8fe:	2001      	movs	r0, #1
 801a900:	460f      	mov	r7, r1
 801a902:	e7a6      	b.n	801a852 <_svfiprintf_r+0xc6>
 801a904:	2300      	movs	r3, #0
 801a906:	3701      	adds	r7, #1
 801a908:	9305      	str	r3, [sp, #20]
 801a90a:	4619      	mov	r1, r3
 801a90c:	250a      	movs	r5, #10
 801a90e:	4638      	mov	r0, r7
 801a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a914:	3a30      	subs	r2, #48	; 0x30
 801a916:	2a09      	cmp	r2, #9
 801a918:	d903      	bls.n	801a922 <_svfiprintf_r+0x196>
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d0c8      	beq.n	801a8b0 <_svfiprintf_r+0x124>
 801a91e:	9105      	str	r1, [sp, #20]
 801a920:	e7c6      	b.n	801a8b0 <_svfiprintf_r+0x124>
 801a922:	fb05 2101 	mla	r1, r5, r1, r2
 801a926:	2301      	movs	r3, #1
 801a928:	4607      	mov	r7, r0
 801a92a:	e7f0      	b.n	801a90e <_svfiprintf_r+0x182>
 801a92c:	ab03      	add	r3, sp, #12
 801a92e:	9300      	str	r3, [sp, #0]
 801a930:	4622      	mov	r2, r4
 801a932:	4b11      	ldr	r3, [pc, #68]	; (801a978 <_svfiprintf_r+0x1ec>)
 801a934:	a904      	add	r1, sp, #16
 801a936:	4640      	mov	r0, r8
 801a938:	f7fc fc0a 	bl	8017150 <_printf_float>
 801a93c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a940:	4681      	mov	r9, r0
 801a942:	d1d6      	bne.n	801a8f2 <_svfiprintf_r+0x166>
 801a944:	89a3      	ldrh	r3, [r4, #12]
 801a946:	065b      	lsls	r3, r3, #25
 801a948:	f53f af35 	bmi.w	801a7b6 <_svfiprintf_r+0x2a>
 801a94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a94e:	b01d      	add	sp, #116	; 0x74
 801a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a954:	ab03      	add	r3, sp, #12
 801a956:	9300      	str	r3, [sp, #0]
 801a958:	4622      	mov	r2, r4
 801a95a:	4b07      	ldr	r3, [pc, #28]	; (801a978 <_svfiprintf_r+0x1ec>)
 801a95c:	a904      	add	r1, sp, #16
 801a95e:	4640      	mov	r0, r8
 801a960:	f7fc feac 	bl	80176bc <_printf_i>
 801a964:	e7ea      	b.n	801a93c <_svfiprintf_r+0x1b0>
 801a966:	bf00      	nop
 801a968:	0801e5fc 	.word	0x0801e5fc
 801a96c:	0801e602 	.word	0x0801e602
 801a970:	0801e606 	.word	0x0801e606
 801a974:	08017151 	.word	0x08017151
 801a978:	0801a6d7 	.word	0x0801a6d7

0801a97c <__ascii_wctomb>:
 801a97c:	b149      	cbz	r1, 801a992 <__ascii_wctomb+0x16>
 801a97e:	2aff      	cmp	r2, #255	; 0xff
 801a980:	bf85      	ittet	hi
 801a982:	238a      	movhi	r3, #138	; 0x8a
 801a984:	6003      	strhi	r3, [r0, #0]
 801a986:	700a      	strbls	r2, [r1, #0]
 801a988:	f04f 30ff 	movhi.w	r0, #4294967295
 801a98c:	bf98      	it	ls
 801a98e:	2001      	movls	r0, #1
 801a990:	4770      	bx	lr
 801a992:	4608      	mov	r0, r1
 801a994:	4770      	bx	lr

0801a996 <memmove>:
 801a996:	4288      	cmp	r0, r1
 801a998:	b510      	push	{r4, lr}
 801a99a:	eb01 0302 	add.w	r3, r1, r2
 801a99e:	d807      	bhi.n	801a9b0 <memmove+0x1a>
 801a9a0:	1e42      	subs	r2, r0, #1
 801a9a2:	4299      	cmp	r1, r3
 801a9a4:	d00a      	beq.n	801a9bc <memmove+0x26>
 801a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a9aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a9ae:	e7f8      	b.n	801a9a2 <memmove+0xc>
 801a9b0:	4283      	cmp	r3, r0
 801a9b2:	d9f5      	bls.n	801a9a0 <memmove+0xa>
 801a9b4:	1881      	adds	r1, r0, r2
 801a9b6:	1ad2      	subs	r2, r2, r3
 801a9b8:	42d3      	cmn	r3, r2
 801a9ba:	d100      	bne.n	801a9be <memmove+0x28>
 801a9bc:	bd10      	pop	{r4, pc}
 801a9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a9c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a9c6:	e7f7      	b.n	801a9b8 <memmove+0x22>

0801a9c8 <_realloc_r>:
 801a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ca:	4607      	mov	r7, r0
 801a9cc:	4614      	mov	r4, r2
 801a9ce:	460e      	mov	r6, r1
 801a9d0:	b921      	cbnz	r1, 801a9dc <_realloc_r+0x14>
 801a9d2:	4611      	mov	r1, r2
 801a9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a9d8:	f7fc bacc 	b.w	8016f74 <_malloc_r>
 801a9dc:	b922      	cbnz	r2, 801a9e8 <_realloc_r+0x20>
 801a9de:	f7fc fa7b 	bl	8016ed8 <_free_r>
 801a9e2:	4625      	mov	r5, r4
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9e8:	f000 f814 	bl	801aa14 <_malloc_usable_size_r>
 801a9ec:	42a0      	cmp	r0, r4
 801a9ee:	d20f      	bcs.n	801aa10 <_realloc_r+0x48>
 801a9f0:	4621      	mov	r1, r4
 801a9f2:	4638      	mov	r0, r7
 801a9f4:	f7fc fabe 	bl	8016f74 <_malloc_r>
 801a9f8:	4605      	mov	r5, r0
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d0f2      	beq.n	801a9e4 <_realloc_r+0x1c>
 801a9fe:	4631      	mov	r1, r6
 801aa00:	4622      	mov	r2, r4
 801aa02:	f7fc fa55 	bl	8016eb0 <memcpy>
 801aa06:	4631      	mov	r1, r6
 801aa08:	4638      	mov	r0, r7
 801aa0a:	f7fc fa65 	bl	8016ed8 <_free_r>
 801aa0e:	e7e9      	b.n	801a9e4 <_realloc_r+0x1c>
 801aa10:	4635      	mov	r5, r6
 801aa12:	e7e7      	b.n	801a9e4 <_realloc_r+0x1c>

0801aa14 <_malloc_usable_size_r>:
 801aa14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa18:	1f18      	subs	r0, r3, #4
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	bfbc      	itt	lt
 801aa1e:	580b      	ldrlt	r3, [r1, r0]
 801aa20:	18c0      	addlt	r0, r0, r3
 801aa22:	4770      	bx	lr
 801aa24:	0000      	movs	r0, r0
	...

0801aa28 <cos>:
 801aa28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aa2a:	ec51 0b10 	vmov	r0, r1, d0
 801aa2e:	4a1e      	ldr	r2, [pc, #120]	; (801aaa8 <cos+0x80>)
 801aa30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa34:	4293      	cmp	r3, r2
 801aa36:	dc06      	bgt.n	801aa46 <cos+0x1e>
 801aa38:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801aaa0 <cos+0x78>
 801aa3c:	f001 feb8 	bl	801c7b0 <__kernel_cos>
 801aa40:	ec51 0b10 	vmov	r0, r1, d0
 801aa44:	e007      	b.n	801aa56 <cos+0x2e>
 801aa46:	4a19      	ldr	r2, [pc, #100]	; (801aaac <cos+0x84>)
 801aa48:	4293      	cmp	r3, r2
 801aa4a:	dd09      	ble.n	801aa60 <cos+0x38>
 801aa4c:	ee10 2a10 	vmov	r2, s0
 801aa50:	460b      	mov	r3, r1
 801aa52:	f7e5 fc29 	bl	80002a8 <__aeabi_dsub>
 801aa56:	ec41 0b10 	vmov	d0, r0, r1
 801aa5a:	b005      	add	sp, #20
 801aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa60:	4668      	mov	r0, sp
 801aa62:	f001 fbfd 	bl	801c260 <__ieee754_rem_pio2>
 801aa66:	f000 0003 	and.w	r0, r0, #3
 801aa6a:	2801      	cmp	r0, #1
 801aa6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aa70:	ed9d 0b00 	vldr	d0, [sp]
 801aa74:	d007      	beq.n	801aa86 <cos+0x5e>
 801aa76:	2802      	cmp	r0, #2
 801aa78:	d00e      	beq.n	801aa98 <cos+0x70>
 801aa7a:	2800      	cmp	r0, #0
 801aa7c:	d0de      	beq.n	801aa3c <cos+0x14>
 801aa7e:	2001      	movs	r0, #1
 801aa80:	f002 fa9e 	bl	801cfc0 <__kernel_sin>
 801aa84:	e7dc      	b.n	801aa40 <cos+0x18>
 801aa86:	f002 fa9b 	bl	801cfc0 <__kernel_sin>
 801aa8a:	ec53 2b10 	vmov	r2, r3, d0
 801aa8e:	ee10 0a10 	vmov	r0, s0
 801aa92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aa96:	e7de      	b.n	801aa56 <cos+0x2e>
 801aa98:	f001 fe8a 	bl	801c7b0 <__kernel_cos>
 801aa9c:	e7f5      	b.n	801aa8a <cos+0x62>
 801aa9e:	bf00      	nop
	...
 801aaa8:	3fe921fb 	.word	0x3fe921fb
 801aaac:	7fefffff 	.word	0x7fefffff

0801aab0 <sin>:
 801aab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aab2:	ec51 0b10 	vmov	r0, r1, d0
 801aab6:	4a20      	ldr	r2, [pc, #128]	; (801ab38 <sin+0x88>)
 801aab8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aabc:	4293      	cmp	r3, r2
 801aabe:	dc07      	bgt.n	801aad0 <sin+0x20>
 801aac0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801ab30 <sin+0x80>
 801aac4:	2000      	movs	r0, #0
 801aac6:	f002 fa7b 	bl	801cfc0 <__kernel_sin>
 801aaca:	ec51 0b10 	vmov	r0, r1, d0
 801aace:	e007      	b.n	801aae0 <sin+0x30>
 801aad0:	4a1a      	ldr	r2, [pc, #104]	; (801ab3c <sin+0x8c>)
 801aad2:	4293      	cmp	r3, r2
 801aad4:	dd09      	ble.n	801aaea <sin+0x3a>
 801aad6:	ee10 2a10 	vmov	r2, s0
 801aada:	460b      	mov	r3, r1
 801aadc:	f7e5 fbe4 	bl	80002a8 <__aeabi_dsub>
 801aae0:	ec41 0b10 	vmov	d0, r0, r1
 801aae4:	b005      	add	sp, #20
 801aae6:	f85d fb04 	ldr.w	pc, [sp], #4
 801aaea:	4668      	mov	r0, sp
 801aaec:	f001 fbb8 	bl	801c260 <__ieee754_rem_pio2>
 801aaf0:	f000 0003 	and.w	r0, r0, #3
 801aaf4:	2801      	cmp	r0, #1
 801aaf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aafa:	ed9d 0b00 	vldr	d0, [sp]
 801aafe:	d004      	beq.n	801ab0a <sin+0x5a>
 801ab00:	2802      	cmp	r0, #2
 801ab02:	d005      	beq.n	801ab10 <sin+0x60>
 801ab04:	b970      	cbnz	r0, 801ab24 <sin+0x74>
 801ab06:	2001      	movs	r0, #1
 801ab08:	e7dd      	b.n	801aac6 <sin+0x16>
 801ab0a:	f001 fe51 	bl	801c7b0 <__kernel_cos>
 801ab0e:	e7dc      	b.n	801aaca <sin+0x1a>
 801ab10:	2001      	movs	r0, #1
 801ab12:	f002 fa55 	bl	801cfc0 <__kernel_sin>
 801ab16:	ec53 2b10 	vmov	r2, r3, d0
 801ab1a:	ee10 0a10 	vmov	r0, s0
 801ab1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ab22:	e7dd      	b.n	801aae0 <sin+0x30>
 801ab24:	f001 fe44 	bl	801c7b0 <__kernel_cos>
 801ab28:	e7f5      	b.n	801ab16 <sin+0x66>
 801ab2a:	bf00      	nop
 801ab2c:	f3af 8000 	nop.w
	...
 801ab38:	3fe921fb 	.word	0x3fe921fb
 801ab3c:	7fefffff 	.word	0x7fefffff

0801ab40 <asin>:
 801ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab42:	ed2d 8b02 	vpush	{d8}
 801ab46:	4e26      	ldr	r6, [pc, #152]	; (801abe0 <asin+0xa0>)
 801ab48:	b08b      	sub	sp, #44	; 0x2c
 801ab4a:	ec55 4b10 	vmov	r4, r5, d0
 801ab4e:	f000 fa77 	bl	801b040 <__ieee754_asin>
 801ab52:	f996 3000 	ldrsb.w	r3, [r6]
 801ab56:	eeb0 8a40 	vmov.f32	s16, s0
 801ab5a:	eef0 8a60 	vmov.f32	s17, s1
 801ab5e:	3301      	adds	r3, #1
 801ab60:	d036      	beq.n	801abd0 <asin+0x90>
 801ab62:	4622      	mov	r2, r4
 801ab64:	462b      	mov	r3, r5
 801ab66:	4620      	mov	r0, r4
 801ab68:	4629      	mov	r1, r5
 801ab6a:	f7e5 ffef 	bl	8000b4c <__aeabi_dcmpun>
 801ab6e:	4607      	mov	r7, r0
 801ab70:	bb70      	cbnz	r0, 801abd0 <asin+0x90>
 801ab72:	ec45 4b10 	vmov	d0, r4, r5
 801ab76:	f002 fc7f 	bl	801d478 <fabs>
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	4b19      	ldr	r3, [pc, #100]	; (801abe4 <asin+0xa4>)
 801ab7e:	ec51 0b10 	vmov	r0, r1, d0
 801ab82:	f7e5 ffd9 	bl	8000b38 <__aeabi_dcmpgt>
 801ab86:	b318      	cbz	r0, 801abd0 <asin+0x90>
 801ab88:	2301      	movs	r3, #1
 801ab8a:	9300      	str	r3, [sp, #0]
 801ab8c:	4816      	ldr	r0, [pc, #88]	; (801abe8 <asin+0xa8>)
 801ab8e:	4b17      	ldr	r3, [pc, #92]	; (801abec <asin+0xac>)
 801ab90:	9301      	str	r3, [sp, #4]
 801ab92:	9708      	str	r7, [sp, #32]
 801ab94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801ab98:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ab9c:	f002 fd08 	bl	801d5b0 <nan>
 801aba0:	f996 3000 	ldrsb.w	r3, [r6]
 801aba4:	2b02      	cmp	r3, #2
 801aba6:	ed8d 0b06 	vstr	d0, [sp, #24]
 801abaa:	d104      	bne.n	801abb6 <asin+0x76>
 801abac:	f7fc f946 	bl	8016e3c <__errno>
 801abb0:	2321      	movs	r3, #33	; 0x21
 801abb2:	6003      	str	r3, [r0, #0]
 801abb4:	e004      	b.n	801abc0 <asin+0x80>
 801abb6:	4668      	mov	r0, sp
 801abb8:	f002 fcf6 	bl	801d5a8 <matherr>
 801abbc:	2800      	cmp	r0, #0
 801abbe:	d0f5      	beq.n	801abac <asin+0x6c>
 801abc0:	9b08      	ldr	r3, [sp, #32]
 801abc2:	b11b      	cbz	r3, 801abcc <asin+0x8c>
 801abc4:	f7fc f93a 	bl	8016e3c <__errno>
 801abc8:	9b08      	ldr	r3, [sp, #32]
 801abca:	6003      	str	r3, [r0, #0]
 801abcc:	ed9d 8b06 	vldr	d8, [sp, #24]
 801abd0:	eeb0 0a48 	vmov.f32	s0, s16
 801abd4:	eef0 0a68 	vmov.f32	s1, s17
 801abd8:	b00b      	add	sp, #44	; 0x2c
 801abda:	ecbd 8b02 	vpop	{d8}
 801abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abe0:	200003a4 	.word	0x200003a4
 801abe4:	3ff00000 	.word	0x3ff00000
 801abe8:	0801e601 	.word	0x0801e601
 801abec:	0801e70e 	.word	0x0801e70e

0801abf0 <atan2>:
 801abf0:	f000 bc36 	b.w	801b460 <__ieee754_atan2>

0801abf4 <fmod>:
 801abf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abf8:	ed2d 8b02 	vpush	{d8}
 801abfc:	b08b      	sub	sp, #44	; 0x2c
 801abfe:	ec55 4b10 	vmov	r4, r5, d0
 801ac02:	ec57 6b11 	vmov	r6, r7, d1
 801ac06:	f000 fd09 	bl	801b61c <__ieee754_fmod>
 801ac0a:	4b2a      	ldr	r3, [pc, #168]	; (801acb4 <fmod+0xc0>)
 801ac0c:	eeb0 8a40 	vmov.f32	s16, s0
 801ac10:	eef0 8a60 	vmov.f32	s17, s1
 801ac14:	f993 8000 	ldrsb.w	r8, [r3]
 801ac18:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ac1c:	d030      	beq.n	801ac80 <fmod+0x8c>
 801ac1e:	4632      	mov	r2, r6
 801ac20:	463b      	mov	r3, r7
 801ac22:	4630      	mov	r0, r6
 801ac24:	4639      	mov	r1, r7
 801ac26:	f7e5 ff91 	bl	8000b4c <__aeabi_dcmpun>
 801ac2a:	bb48      	cbnz	r0, 801ac80 <fmod+0x8c>
 801ac2c:	4622      	mov	r2, r4
 801ac2e:	462b      	mov	r3, r5
 801ac30:	4620      	mov	r0, r4
 801ac32:	4629      	mov	r1, r5
 801ac34:	f7e5 ff8a 	bl	8000b4c <__aeabi_dcmpun>
 801ac38:	4681      	mov	r9, r0
 801ac3a:	bb08      	cbnz	r0, 801ac80 <fmod+0x8c>
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	2300      	movs	r3, #0
 801ac40:	4630      	mov	r0, r6
 801ac42:	4639      	mov	r1, r7
 801ac44:	f7e5 ff50 	bl	8000ae8 <__aeabi_dcmpeq>
 801ac48:	b1d0      	cbz	r0, 801ac80 <fmod+0x8c>
 801ac4a:	2301      	movs	r3, #1
 801ac4c:	9300      	str	r3, [sp, #0]
 801ac4e:	4b1a      	ldr	r3, [pc, #104]	; (801acb8 <fmod+0xc4>)
 801ac50:	9301      	str	r3, [sp, #4]
 801ac52:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ac56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ac5a:	f8cd 9020 	str.w	r9, [sp, #32]
 801ac5e:	f1b8 0f00 	cmp.w	r8, #0
 801ac62:	d116      	bne.n	801ac92 <fmod+0x9e>
 801ac64:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ac68:	4668      	mov	r0, sp
 801ac6a:	f002 fc9d 	bl	801d5a8 <matherr>
 801ac6e:	b1d8      	cbz	r0, 801aca8 <fmod+0xb4>
 801ac70:	9b08      	ldr	r3, [sp, #32]
 801ac72:	b11b      	cbz	r3, 801ac7c <fmod+0x88>
 801ac74:	f7fc f8e2 	bl	8016e3c <__errno>
 801ac78:	9b08      	ldr	r3, [sp, #32]
 801ac7a:	6003      	str	r3, [r0, #0]
 801ac7c:	ed9d 8b06 	vldr	d8, [sp, #24]
 801ac80:	eeb0 0a48 	vmov.f32	s0, s16
 801ac84:	eef0 0a68 	vmov.f32	s1, s17
 801ac88:	b00b      	add	sp, #44	; 0x2c
 801ac8a:	ecbd 8b02 	vpop	{d8}
 801ac8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac92:	2200      	movs	r2, #0
 801ac94:	2300      	movs	r3, #0
 801ac96:	4610      	mov	r0, r2
 801ac98:	4619      	mov	r1, r3
 801ac9a:	f7e5 fde7 	bl	800086c <__aeabi_ddiv>
 801ac9e:	f1b8 0f02 	cmp.w	r8, #2
 801aca2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801aca6:	d1df      	bne.n	801ac68 <fmod+0x74>
 801aca8:	f7fc f8c8 	bl	8016e3c <__errno>
 801acac:	2321      	movs	r3, #33	; 0x21
 801acae:	6003      	str	r3, [r0, #0]
 801acb0:	e7de      	b.n	801ac70 <fmod+0x7c>
 801acb2:	bf00      	nop
 801acb4:	200003a4 	.word	0x200003a4
 801acb8:	0801e713 	.word	0x0801e713

0801acbc <pow>:
 801acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc0:	ed2d 8b04 	vpush	{d8-d9}
 801acc4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801af98 <pow+0x2dc>
 801acc8:	b08d      	sub	sp, #52	; 0x34
 801acca:	ec57 6b10 	vmov	r6, r7, d0
 801acce:	ec55 4b11 	vmov	r4, r5, d1
 801acd2:	f000 fdb5 	bl	801b840 <__ieee754_pow>
 801acd6:	f999 3000 	ldrsb.w	r3, [r9]
 801acda:	9300      	str	r3, [sp, #0]
 801acdc:	3301      	adds	r3, #1
 801acde:	eeb0 8a40 	vmov.f32	s16, s0
 801ace2:	eef0 8a60 	vmov.f32	s17, s1
 801ace6:	46c8      	mov	r8, r9
 801ace8:	d05f      	beq.n	801adaa <pow+0xee>
 801acea:	4622      	mov	r2, r4
 801acec:	462b      	mov	r3, r5
 801acee:	4620      	mov	r0, r4
 801acf0:	4629      	mov	r1, r5
 801acf2:	f7e5 ff2b 	bl	8000b4c <__aeabi_dcmpun>
 801acf6:	4683      	mov	fp, r0
 801acf8:	2800      	cmp	r0, #0
 801acfa:	d156      	bne.n	801adaa <pow+0xee>
 801acfc:	4632      	mov	r2, r6
 801acfe:	463b      	mov	r3, r7
 801ad00:	4630      	mov	r0, r6
 801ad02:	4639      	mov	r1, r7
 801ad04:	f7e5 ff22 	bl	8000b4c <__aeabi_dcmpun>
 801ad08:	9001      	str	r0, [sp, #4]
 801ad0a:	b1e8      	cbz	r0, 801ad48 <pow+0x8c>
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	2300      	movs	r3, #0
 801ad10:	4620      	mov	r0, r4
 801ad12:	4629      	mov	r1, r5
 801ad14:	f7e5 fee8 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	d046      	beq.n	801adaa <pow+0xee>
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	9302      	str	r3, [sp, #8]
 801ad20:	4b96      	ldr	r3, [pc, #600]	; (801af7c <pow+0x2c0>)
 801ad22:	9303      	str	r3, [sp, #12]
 801ad24:	4b96      	ldr	r3, [pc, #600]	; (801af80 <pow+0x2c4>)
 801ad26:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ad30:	9b00      	ldr	r3, [sp, #0]
 801ad32:	2b02      	cmp	r3, #2
 801ad34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ad38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ad3c:	d033      	beq.n	801ada6 <pow+0xea>
 801ad3e:	a802      	add	r0, sp, #8
 801ad40:	f002 fc32 	bl	801d5a8 <matherr>
 801ad44:	bb48      	cbnz	r0, 801ad9a <pow+0xde>
 801ad46:	e05d      	b.n	801ae04 <pow+0x148>
 801ad48:	f04f 0a00 	mov.w	sl, #0
 801ad4c:	f04f 0b00 	mov.w	fp, #0
 801ad50:	4652      	mov	r2, sl
 801ad52:	465b      	mov	r3, fp
 801ad54:	4630      	mov	r0, r6
 801ad56:	4639      	mov	r1, r7
 801ad58:	f7e5 fec6 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad5c:	ec4b ab19 	vmov	d9, sl, fp
 801ad60:	2800      	cmp	r0, #0
 801ad62:	d054      	beq.n	801ae0e <pow+0x152>
 801ad64:	4652      	mov	r2, sl
 801ad66:	465b      	mov	r3, fp
 801ad68:	4620      	mov	r0, r4
 801ad6a:	4629      	mov	r1, r5
 801ad6c:	f7e5 febc 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad70:	4680      	mov	r8, r0
 801ad72:	b318      	cbz	r0, 801adbc <pow+0x100>
 801ad74:	2301      	movs	r3, #1
 801ad76:	9302      	str	r3, [sp, #8]
 801ad78:	4b80      	ldr	r3, [pc, #512]	; (801af7c <pow+0x2c0>)
 801ad7a:	9303      	str	r3, [sp, #12]
 801ad7c:	9b01      	ldr	r3, [sp, #4]
 801ad7e:	930a      	str	r3, [sp, #40]	; 0x28
 801ad80:	9b00      	ldr	r3, [sp, #0]
 801ad82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ad86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ad8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d0d5      	beq.n	801ad3e <pow+0x82>
 801ad92:	4b7b      	ldr	r3, [pc, #492]	; (801af80 <pow+0x2c4>)
 801ad94:	2200      	movs	r2, #0
 801ad96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ad9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad9c:	b11b      	cbz	r3, 801ada6 <pow+0xea>
 801ad9e:	f7fc f84d 	bl	8016e3c <__errno>
 801ada2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ada4:	6003      	str	r3, [r0, #0]
 801ada6:	ed9d 8b08 	vldr	d8, [sp, #32]
 801adaa:	eeb0 0a48 	vmov.f32	s0, s16
 801adae:	eef0 0a68 	vmov.f32	s1, s17
 801adb2:	b00d      	add	sp, #52	; 0x34
 801adb4:	ecbd 8b04 	vpop	{d8-d9}
 801adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adbc:	ec45 4b10 	vmov	d0, r4, r5
 801adc0:	f002 fb63 	bl	801d48a <finite>
 801adc4:	2800      	cmp	r0, #0
 801adc6:	d0f0      	beq.n	801adaa <pow+0xee>
 801adc8:	4652      	mov	r2, sl
 801adca:	465b      	mov	r3, fp
 801adcc:	4620      	mov	r0, r4
 801adce:	4629      	mov	r1, r5
 801add0:	f7e5 fe94 	bl	8000afc <__aeabi_dcmplt>
 801add4:	2800      	cmp	r0, #0
 801add6:	d0e8      	beq.n	801adaa <pow+0xee>
 801add8:	2301      	movs	r3, #1
 801adda:	9302      	str	r3, [sp, #8]
 801addc:	4b67      	ldr	r3, [pc, #412]	; (801af7c <pow+0x2c0>)
 801adde:	9303      	str	r3, [sp, #12]
 801ade0:	f999 3000 	ldrsb.w	r3, [r9]
 801ade4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801ade8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801adec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801adf0:	b913      	cbnz	r3, 801adf8 <pow+0x13c>
 801adf2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801adf6:	e7a2      	b.n	801ad3e <pow+0x82>
 801adf8:	4962      	ldr	r1, [pc, #392]	; (801af84 <pow+0x2c8>)
 801adfa:	2000      	movs	r0, #0
 801adfc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ae00:	2b02      	cmp	r3, #2
 801ae02:	d19c      	bne.n	801ad3e <pow+0x82>
 801ae04:	f7fc f81a 	bl	8016e3c <__errno>
 801ae08:	2321      	movs	r3, #33	; 0x21
 801ae0a:	6003      	str	r3, [r0, #0]
 801ae0c:	e7c5      	b.n	801ad9a <pow+0xde>
 801ae0e:	eeb0 0a48 	vmov.f32	s0, s16
 801ae12:	eef0 0a68 	vmov.f32	s1, s17
 801ae16:	f002 fb38 	bl	801d48a <finite>
 801ae1a:	9000      	str	r0, [sp, #0]
 801ae1c:	2800      	cmp	r0, #0
 801ae1e:	f040 8081 	bne.w	801af24 <pow+0x268>
 801ae22:	ec47 6b10 	vmov	d0, r6, r7
 801ae26:	f002 fb30 	bl	801d48a <finite>
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	d07a      	beq.n	801af24 <pow+0x268>
 801ae2e:	ec45 4b10 	vmov	d0, r4, r5
 801ae32:	f002 fb2a 	bl	801d48a <finite>
 801ae36:	2800      	cmp	r0, #0
 801ae38:	d074      	beq.n	801af24 <pow+0x268>
 801ae3a:	ec53 2b18 	vmov	r2, r3, d8
 801ae3e:	ee18 0a10 	vmov	r0, s16
 801ae42:	4619      	mov	r1, r3
 801ae44:	f7e5 fe82 	bl	8000b4c <__aeabi_dcmpun>
 801ae48:	f999 9000 	ldrsb.w	r9, [r9]
 801ae4c:	4b4b      	ldr	r3, [pc, #300]	; (801af7c <pow+0x2c0>)
 801ae4e:	b1b0      	cbz	r0, 801ae7e <pow+0x1c2>
 801ae50:	2201      	movs	r2, #1
 801ae52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ae56:	9b00      	ldr	r3, [sp, #0]
 801ae58:	930a      	str	r3, [sp, #40]	; 0x28
 801ae5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ae5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ae62:	f1b9 0f00 	cmp.w	r9, #0
 801ae66:	d0c4      	beq.n	801adf2 <pow+0x136>
 801ae68:	4652      	mov	r2, sl
 801ae6a:	465b      	mov	r3, fp
 801ae6c:	4650      	mov	r0, sl
 801ae6e:	4659      	mov	r1, fp
 801ae70:	f7e5 fcfc 	bl	800086c <__aeabi_ddiv>
 801ae74:	f1b9 0f02 	cmp.w	r9, #2
 801ae78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ae7c:	e7c1      	b.n	801ae02 <pow+0x146>
 801ae7e:	2203      	movs	r2, #3
 801ae80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ae84:	900a      	str	r0, [sp, #40]	; 0x28
 801ae86:	4629      	mov	r1, r5
 801ae88:	4620      	mov	r0, r4
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	4b3e      	ldr	r3, [pc, #248]	; (801af88 <pow+0x2cc>)
 801ae8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ae92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ae96:	f7e5 fbbf 	bl	8000618 <__aeabi_dmul>
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	460d      	mov	r5, r1
 801ae9e:	f1b9 0f00 	cmp.w	r9, #0
 801aea2:	d124      	bne.n	801aeee <pow+0x232>
 801aea4:	4b39      	ldr	r3, [pc, #228]	; (801af8c <pow+0x2d0>)
 801aea6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801aeaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aeae:	4630      	mov	r0, r6
 801aeb0:	4652      	mov	r2, sl
 801aeb2:	465b      	mov	r3, fp
 801aeb4:	4639      	mov	r1, r7
 801aeb6:	f7e5 fe21 	bl	8000afc <__aeabi_dcmplt>
 801aeba:	2800      	cmp	r0, #0
 801aebc:	d056      	beq.n	801af6c <pow+0x2b0>
 801aebe:	ec45 4b10 	vmov	d0, r4, r5
 801aec2:	f002 fb7d 	bl	801d5c0 <rint>
 801aec6:	4622      	mov	r2, r4
 801aec8:	462b      	mov	r3, r5
 801aeca:	ec51 0b10 	vmov	r0, r1, d0
 801aece:	f7e5 fe0b 	bl	8000ae8 <__aeabi_dcmpeq>
 801aed2:	b920      	cbnz	r0, 801aede <pow+0x222>
 801aed4:	4b2e      	ldr	r3, [pc, #184]	; (801af90 <pow+0x2d4>)
 801aed6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801aeda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aede:	f998 3000 	ldrsb.w	r3, [r8]
 801aee2:	2b02      	cmp	r3, #2
 801aee4:	d142      	bne.n	801af6c <pow+0x2b0>
 801aee6:	f7fb ffa9 	bl	8016e3c <__errno>
 801aeea:	2322      	movs	r3, #34	; 0x22
 801aeec:	e78d      	b.n	801ae0a <pow+0x14e>
 801aeee:	4b29      	ldr	r3, [pc, #164]	; (801af94 <pow+0x2d8>)
 801aef0:	2200      	movs	r2, #0
 801aef2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aef6:	4630      	mov	r0, r6
 801aef8:	4652      	mov	r2, sl
 801aefa:	465b      	mov	r3, fp
 801aefc:	4639      	mov	r1, r7
 801aefe:	f7e5 fdfd 	bl	8000afc <__aeabi_dcmplt>
 801af02:	2800      	cmp	r0, #0
 801af04:	d0eb      	beq.n	801aede <pow+0x222>
 801af06:	ec45 4b10 	vmov	d0, r4, r5
 801af0a:	f002 fb59 	bl	801d5c0 <rint>
 801af0e:	4622      	mov	r2, r4
 801af10:	462b      	mov	r3, r5
 801af12:	ec51 0b10 	vmov	r0, r1, d0
 801af16:	f7e5 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 801af1a:	2800      	cmp	r0, #0
 801af1c:	d1df      	bne.n	801aede <pow+0x222>
 801af1e:	2200      	movs	r2, #0
 801af20:	4b18      	ldr	r3, [pc, #96]	; (801af84 <pow+0x2c8>)
 801af22:	e7da      	b.n	801aeda <pow+0x21e>
 801af24:	2200      	movs	r2, #0
 801af26:	2300      	movs	r3, #0
 801af28:	ec51 0b18 	vmov	r0, r1, d8
 801af2c:	f7e5 fddc 	bl	8000ae8 <__aeabi_dcmpeq>
 801af30:	2800      	cmp	r0, #0
 801af32:	f43f af3a 	beq.w	801adaa <pow+0xee>
 801af36:	ec47 6b10 	vmov	d0, r6, r7
 801af3a:	f002 faa6 	bl	801d48a <finite>
 801af3e:	2800      	cmp	r0, #0
 801af40:	f43f af33 	beq.w	801adaa <pow+0xee>
 801af44:	ec45 4b10 	vmov	d0, r4, r5
 801af48:	f002 fa9f 	bl	801d48a <finite>
 801af4c:	2800      	cmp	r0, #0
 801af4e:	f43f af2c 	beq.w	801adaa <pow+0xee>
 801af52:	2304      	movs	r3, #4
 801af54:	9302      	str	r3, [sp, #8]
 801af56:	4b09      	ldr	r3, [pc, #36]	; (801af7c <pow+0x2c0>)
 801af58:	9303      	str	r3, [sp, #12]
 801af5a:	2300      	movs	r3, #0
 801af5c:	930a      	str	r3, [sp, #40]	; 0x28
 801af5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af66:	ed8d 9b08 	vstr	d9, [sp, #32]
 801af6a:	e7b8      	b.n	801aede <pow+0x222>
 801af6c:	a802      	add	r0, sp, #8
 801af6e:	f002 fb1b 	bl	801d5a8 <matherr>
 801af72:	2800      	cmp	r0, #0
 801af74:	f47f af11 	bne.w	801ad9a <pow+0xde>
 801af78:	e7b5      	b.n	801aee6 <pow+0x22a>
 801af7a:	bf00      	nop
 801af7c:	0801e718 	.word	0x0801e718
 801af80:	3ff00000 	.word	0x3ff00000
 801af84:	fff00000 	.word	0xfff00000
 801af88:	3fe00000 	.word	0x3fe00000
 801af8c:	47efffff 	.word	0x47efffff
 801af90:	c7efffff 	.word	0xc7efffff
 801af94:	7ff00000 	.word	0x7ff00000
 801af98:	200003a4 	.word	0x200003a4

0801af9c <sqrtf>:
 801af9c:	b510      	push	{r4, lr}
 801af9e:	ed2d 8b02 	vpush	{d8}
 801afa2:	b08a      	sub	sp, #40	; 0x28
 801afa4:	eeb0 8a40 	vmov.f32	s16, s0
 801afa8:	f001 fbfc 	bl	801c7a4 <__ieee754_sqrtf>
 801afac:	4b21      	ldr	r3, [pc, #132]	; (801b034 <sqrtf+0x98>)
 801afae:	f993 4000 	ldrsb.w	r4, [r3]
 801afb2:	1c63      	adds	r3, r4, #1
 801afb4:	d02c      	beq.n	801b010 <sqrtf+0x74>
 801afb6:	eeb4 8a48 	vcmp.f32	s16, s16
 801afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afbe:	d627      	bvs.n	801b010 <sqrtf+0x74>
 801afc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc8:	d522      	bpl.n	801b010 <sqrtf+0x74>
 801afca:	2301      	movs	r3, #1
 801afcc:	9300      	str	r3, [sp, #0]
 801afce:	4b1a      	ldr	r3, [pc, #104]	; (801b038 <sqrtf+0x9c>)
 801afd0:	9301      	str	r3, [sp, #4]
 801afd2:	ee18 0a10 	vmov	r0, s16
 801afd6:	2300      	movs	r3, #0
 801afd8:	9308      	str	r3, [sp, #32]
 801afda:	f7e5 fac5 	bl	8000568 <__aeabi_f2d>
 801afde:	2200      	movs	r2, #0
 801afe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801afe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801afe8:	2300      	movs	r3, #0
 801afea:	b9ac      	cbnz	r4, 801b018 <sqrtf+0x7c>
 801afec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aff0:	4668      	mov	r0, sp
 801aff2:	f002 fad9 	bl	801d5a8 <matherr>
 801aff6:	b1b8      	cbz	r0, 801b028 <sqrtf+0x8c>
 801aff8:	9b08      	ldr	r3, [sp, #32]
 801affa:	b11b      	cbz	r3, 801b004 <sqrtf+0x68>
 801affc:	f7fb ff1e 	bl	8016e3c <__errno>
 801b000:	9b08      	ldr	r3, [sp, #32]
 801b002:	6003      	str	r3, [r0, #0]
 801b004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b008:	f7e5 fdfe 	bl	8000c08 <__aeabi_d2f>
 801b00c:	ee00 0a10 	vmov	s0, r0
 801b010:	b00a      	add	sp, #40	; 0x28
 801b012:	ecbd 8b02 	vpop	{d8}
 801b016:	bd10      	pop	{r4, pc}
 801b018:	4610      	mov	r0, r2
 801b01a:	4619      	mov	r1, r3
 801b01c:	f7e5 fc26 	bl	800086c <__aeabi_ddiv>
 801b020:	2c02      	cmp	r4, #2
 801b022:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b026:	d1e3      	bne.n	801aff0 <sqrtf+0x54>
 801b028:	f7fb ff08 	bl	8016e3c <__errno>
 801b02c:	2321      	movs	r3, #33	; 0x21
 801b02e:	6003      	str	r3, [r0, #0]
 801b030:	e7e2      	b.n	801aff8 <sqrtf+0x5c>
 801b032:	bf00      	nop
 801b034:	200003a4 	.word	0x200003a4
 801b038:	0801e71c 	.word	0x0801e71c
 801b03c:	00000000 	.word	0x00000000

0801b040 <__ieee754_asin>:
 801b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b044:	ec55 4b10 	vmov	r4, r5, d0
 801b048:	4bcb      	ldr	r3, [pc, #812]	; (801b378 <__ieee754_asin+0x338>)
 801b04a:	b087      	sub	sp, #28
 801b04c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801b050:	429f      	cmp	r7, r3
 801b052:	9501      	str	r5, [sp, #4]
 801b054:	dd31      	ble.n	801b0ba <__ieee754_asin+0x7a>
 801b056:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b05a:	ee10 3a10 	vmov	r3, s0
 801b05e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b062:	433b      	orrs	r3, r7
 801b064:	d117      	bne.n	801b096 <__ieee754_asin+0x56>
 801b066:	a3aa      	add	r3, pc, #680	; (adr r3, 801b310 <__ieee754_asin+0x2d0>)
 801b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06c:	ee10 0a10 	vmov	r0, s0
 801b070:	4629      	mov	r1, r5
 801b072:	f7e5 fad1 	bl	8000618 <__aeabi_dmul>
 801b076:	a3a8      	add	r3, pc, #672	; (adr r3, 801b318 <__ieee754_asin+0x2d8>)
 801b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b07c:	4606      	mov	r6, r0
 801b07e:	460f      	mov	r7, r1
 801b080:	4620      	mov	r0, r4
 801b082:	4629      	mov	r1, r5
 801b084:	f7e5 fac8 	bl	8000618 <__aeabi_dmul>
 801b088:	4602      	mov	r2, r0
 801b08a:	460b      	mov	r3, r1
 801b08c:	4630      	mov	r0, r6
 801b08e:	4639      	mov	r1, r7
 801b090:	f7e5 f90c 	bl	80002ac <__adddf3>
 801b094:	e00a      	b.n	801b0ac <__ieee754_asin+0x6c>
 801b096:	ee10 2a10 	vmov	r2, s0
 801b09a:	462b      	mov	r3, r5
 801b09c:	4620      	mov	r0, r4
 801b09e:	4629      	mov	r1, r5
 801b0a0:	f7e5 f902 	bl	80002a8 <__aeabi_dsub>
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	460b      	mov	r3, r1
 801b0a8:	f7e5 fbe0 	bl	800086c <__aeabi_ddiv>
 801b0ac:	4604      	mov	r4, r0
 801b0ae:	460d      	mov	r5, r1
 801b0b0:	ec45 4b10 	vmov	d0, r4, r5
 801b0b4:	b007      	add	sp, #28
 801b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ba:	4bb0      	ldr	r3, [pc, #704]	; (801b37c <__ieee754_asin+0x33c>)
 801b0bc:	429f      	cmp	r7, r3
 801b0be:	dc11      	bgt.n	801b0e4 <__ieee754_asin+0xa4>
 801b0c0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b0c4:	f280 80ae 	bge.w	801b224 <__ieee754_asin+0x1e4>
 801b0c8:	a395      	add	r3, pc, #596	; (adr r3, 801b320 <__ieee754_asin+0x2e0>)
 801b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ce:	ee10 0a10 	vmov	r0, s0
 801b0d2:	4629      	mov	r1, r5
 801b0d4:	f7e5 f8ea 	bl	80002ac <__adddf3>
 801b0d8:	2200      	movs	r2, #0
 801b0da:	4ba9      	ldr	r3, [pc, #676]	; (801b380 <__ieee754_asin+0x340>)
 801b0dc:	f7e5 fd2c 	bl	8000b38 <__aeabi_dcmpgt>
 801b0e0:	2800      	cmp	r0, #0
 801b0e2:	d1e5      	bne.n	801b0b0 <__ieee754_asin+0x70>
 801b0e4:	ec45 4b10 	vmov	d0, r4, r5
 801b0e8:	f002 f9c6 	bl	801d478 <fabs>
 801b0ec:	2000      	movs	r0, #0
 801b0ee:	ec53 2b10 	vmov	r2, r3, d0
 801b0f2:	49a3      	ldr	r1, [pc, #652]	; (801b380 <__ieee754_asin+0x340>)
 801b0f4:	f7e5 f8d8 	bl	80002a8 <__aeabi_dsub>
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	4ba2      	ldr	r3, [pc, #648]	; (801b384 <__ieee754_asin+0x344>)
 801b0fc:	f7e5 fa8c 	bl	8000618 <__aeabi_dmul>
 801b100:	a389      	add	r3, pc, #548	; (adr r3, 801b328 <__ieee754_asin+0x2e8>)
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	4604      	mov	r4, r0
 801b108:	460d      	mov	r5, r1
 801b10a:	f7e5 fa85 	bl	8000618 <__aeabi_dmul>
 801b10e:	a388      	add	r3, pc, #544	; (adr r3, 801b330 <__ieee754_asin+0x2f0>)
 801b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b114:	f7e5 f8ca 	bl	80002ac <__adddf3>
 801b118:	4622      	mov	r2, r4
 801b11a:	462b      	mov	r3, r5
 801b11c:	f7e5 fa7c 	bl	8000618 <__aeabi_dmul>
 801b120:	a385      	add	r3, pc, #532	; (adr r3, 801b338 <__ieee754_asin+0x2f8>)
 801b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b126:	f7e5 f8bf 	bl	80002a8 <__aeabi_dsub>
 801b12a:	4622      	mov	r2, r4
 801b12c:	462b      	mov	r3, r5
 801b12e:	f7e5 fa73 	bl	8000618 <__aeabi_dmul>
 801b132:	a383      	add	r3, pc, #524	; (adr r3, 801b340 <__ieee754_asin+0x300>)
 801b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b138:	f7e5 f8b8 	bl	80002ac <__adddf3>
 801b13c:	4622      	mov	r2, r4
 801b13e:	462b      	mov	r3, r5
 801b140:	f7e5 fa6a 	bl	8000618 <__aeabi_dmul>
 801b144:	a380      	add	r3, pc, #512	; (adr r3, 801b348 <__ieee754_asin+0x308>)
 801b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14a:	f7e5 f8ad 	bl	80002a8 <__aeabi_dsub>
 801b14e:	4622      	mov	r2, r4
 801b150:	462b      	mov	r3, r5
 801b152:	f7e5 fa61 	bl	8000618 <__aeabi_dmul>
 801b156:	a37e      	add	r3, pc, #504	; (adr r3, 801b350 <__ieee754_asin+0x310>)
 801b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15c:	f7e5 f8a6 	bl	80002ac <__adddf3>
 801b160:	4622      	mov	r2, r4
 801b162:	462b      	mov	r3, r5
 801b164:	f7e5 fa58 	bl	8000618 <__aeabi_dmul>
 801b168:	a37b      	add	r3, pc, #492	; (adr r3, 801b358 <__ieee754_asin+0x318>)
 801b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b16e:	4680      	mov	r8, r0
 801b170:	4689      	mov	r9, r1
 801b172:	4620      	mov	r0, r4
 801b174:	4629      	mov	r1, r5
 801b176:	f7e5 fa4f 	bl	8000618 <__aeabi_dmul>
 801b17a:	a379      	add	r3, pc, #484	; (adr r3, 801b360 <__ieee754_asin+0x320>)
 801b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b180:	f7e5 f892 	bl	80002a8 <__aeabi_dsub>
 801b184:	4622      	mov	r2, r4
 801b186:	462b      	mov	r3, r5
 801b188:	f7e5 fa46 	bl	8000618 <__aeabi_dmul>
 801b18c:	a376      	add	r3, pc, #472	; (adr r3, 801b368 <__ieee754_asin+0x328>)
 801b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b192:	f7e5 f88b 	bl	80002ac <__adddf3>
 801b196:	4622      	mov	r2, r4
 801b198:	462b      	mov	r3, r5
 801b19a:	f7e5 fa3d 	bl	8000618 <__aeabi_dmul>
 801b19e:	a374      	add	r3, pc, #464	; (adr r3, 801b370 <__ieee754_asin+0x330>)
 801b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a4:	f7e5 f880 	bl	80002a8 <__aeabi_dsub>
 801b1a8:	4622      	mov	r2, r4
 801b1aa:	462b      	mov	r3, r5
 801b1ac:	f7e5 fa34 	bl	8000618 <__aeabi_dmul>
 801b1b0:	4b73      	ldr	r3, [pc, #460]	; (801b380 <__ieee754_asin+0x340>)
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	f7e5 f87a 	bl	80002ac <__adddf3>
 801b1b8:	ec45 4b10 	vmov	d0, r4, r5
 801b1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b1c0:	f001 fa40 	bl	801c644 <__ieee754_sqrt>
 801b1c4:	4b70      	ldr	r3, [pc, #448]	; (801b388 <__ieee754_asin+0x348>)
 801b1c6:	429f      	cmp	r7, r3
 801b1c8:	ec5b ab10 	vmov	sl, fp, d0
 801b1cc:	f340 80de 	ble.w	801b38c <__ieee754_asin+0x34c>
 801b1d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b1d4:	4640      	mov	r0, r8
 801b1d6:	4649      	mov	r1, r9
 801b1d8:	f7e5 fb48 	bl	800086c <__aeabi_ddiv>
 801b1dc:	4652      	mov	r2, sl
 801b1de:	465b      	mov	r3, fp
 801b1e0:	f7e5 fa1a 	bl	8000618 <__aeabi_dmul>
 801b1e4:	4652      	mov	r2, sl
 801b1e6:	465b      	mov	r3, fp
 801b1e8:	f7e5 f860 	bl	80002ac <__adddf3>
 801b1ec:	4602      	mov	r2, r0
 801b1ee:	460b      	mov	r3, r1
 801b1f0:	f7e5 f85c 	bl	80002ac <__adddf3>
 801b1f4:	a348      	add	r3, pc, #288	; (adr r3, 801b318 <__ieee754_asin+0x2d8>)
 801b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1fa:	f7e5 f855 	bl	80002a8 <__aeabi_dsub>
 801b1fe:	4602      	mov	r2, r0
 801b200:	460b      	mov	r3, r1
 801b202:	a143      	add	r1, pc, #268	; (adr r1, 801b310 <__ieee754_asin+0x2d0>)
 801b204:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b208:	f7e5 f84e 	bl	80002a8 <__aeabi_dsub>
 801b20c:	9b01      	ldr	r3, [sp, #4]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	bfdc      	itt	le
 801b212:	4602      	movle	r2, r0
 801b214:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b218:	4604      	mov	r4, r0
 801b21a:	460d      	mov	r5, r1
 801b21c:	bfdc      	itt	le
 801b21e:	4614      	movle	r4, r2
 801b220:	461d      	movle	r5, r3
 801b222:	e745      	b.n	801b0b0 <__ieee754_asin+0x70>
 801b224:	ee10 2a10 	vmov	r2, s0
 801b228:	ee10 0a10 	vmov	r0, s0
 801b22c:	462b      	mov	r3, r5
 801b22e:	4629      	mov	r1, r5
 801b230:	f7e5 f9f2 	bl	8000618 <__aeabi_dmul>
 801b234:	a33c      	add	r3, pc, #240	; (adr r3, 801b328 <__ieee754_asin+0x2e8>)
 801b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b23a:	4606      	mov	r6, r0
 801b23c:	460f      	mov	r7, r1
 801b23e:	f7e5 f9eb 	bl	8000618 <__aeabi_dmul>
 801b242:	a33b      	add	r3, pc, #236	; (adr r3, 801b330 <__ieee754_asin+0x2f0>)
 801b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b248:	f7e5 f830 	bl	80002ac <__adddf3>
 801b24c:	4632      	mov	r2, r6
 801b24e:	463b      	mov	r3, r7
 801b250:	f7e5 f9e2 	bl	8000618 <__aeabi_dmul>
 801b254:	a338      	add	r3, pc, #224	; (adr r3, 801b338 <__ieee754_asin+0x2f8>)
 801b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b25a:	f7e5 f825 	bl	80002a8 <__aeabi_dsub>
 801b25e:	4632      	mov	r2, r6
 801b260:	463b      	mov	r3, r7
 801b262:	f7e5 f9d9 	bl	8000618 <__aeabi_dmul>
 801b266:	a336      	add	r3, pc, #216	; (adr r3, 801b340 <__ieee754_asin+0x300>)
 801b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b26c:	f7e5 f81e 	bl	80002ac <__adddf3>
 801b270:	4632      	mov	r2, r6
 801b272:	463b      	mov	r3, r7
 801b274:	f7e5 f9d0 	bl	8000618 <__aeabi_dmul>
 801b278:	a333      	add	r3, pc, #204	; (adr r3, 801b348 <__ieee754_asin+0x308>)
 801b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b27e:	f7e5 f813 	bl	80002a8 <__aeabi_dsub>
 801b282:	4632      	mov	r2, r6
 801b284:	463b      	mov	r3, r7
 801b286:	f7e5 f9c7 	bl	8000618 <__aeabi_dmul>
 801b28a:	a331      	add	r3, pc, #196	; (adr r3, 801b350 <__ieee754_asin+0x310>)
 801b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b290:	f7e5 f80c 	bl	80002ac <__adddf3>
 801b294:	4632      	mov	r2, r6
 801b296:	463b      	mov	r3, r7
 801b298:	f7e5 f9be 	bl	8000618 <__aeabi_dmul>
 801b29c:	a32e      	add	r3, pc, #184	; (adr r3, 801b358 <__ieee754_asin+0x318>)
 801b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a2:	4680      	mov	r8, r0
 801b2a4:	4689      	mov	r9, r1
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	4639      	mov	r1, r7
 801b2aa:	f7e5 f9b5 	bl	8000618 <__aeabi_dmul>
 801b2ae:	a32c      	add	r3, pc, #176	; (adr r3, 801b360 <__ieee754_asin+0x320>)
 801b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b4:	f7e4 fff8 	bl	80002a8 <__aeabi_dsub>
 801b2b8:	4632      	mov	r2, r6
 801b2ba:	463b      	mov	r3, r7
 801b2bc:	f7e5 f9ac 	bl	8000618 <__aeabi_dmul>
 801b2c0:	a329      	add	r3, pc, #164	; (adr r3, 801b368 <__ieee754_asin+0x328>)
 801b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c6:	f7e4 fff1 	bl	80002ac <__adddf3>
 801b2ca:	4632      	mov	r2, r6
 801b2cc:	463b      	mov	r3, r7
 801b2ce:	f7e5 f9a3 	bl	8000618 <__aeabi_dmul>
 801b2d2:	a327      	add	r3, pc, #156	; (adr r3, 801b370 <__ieee754_asin+0x330>)
 801b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d8:	f7e4 ffe6 	bl	80002a8 <__aeabi_dsub>
 801b2dc:	4632      	mov	r2, r6
 801b2de:	463b      	mov	r3, r7
 801b2e0:	f7e5 f99a 	bl	8000618 <__aeabi_dmul>
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	4b26      	ldr	r3, [pc, #152]	; (801b380 <__ieee754_asin+0x340>)
 801b2e8:	f7e4 ffe0 	bl	80002ac <__adddf3>
 801b2ec:	4602      	mov	r2, r0
 801b2ee:	460b      	mov	r3, r1
 801b2f0:	4640      	mov	r0, r8
 801b2f2:	4649      	mov	r1, r9
 801b2f4:	f7e5 faba 	bl	800086c <__aeabi_ddiv>
 801b2f8:	4622      	mov	r2, r4
 801b2fa:	462b      	mov	r3, r5
 801b2fc:	f7e5 f98c 	bl	8000618 <__aeabi_dmul>
 801b300:	4602      	mov	r2, r0
 801b302:	460b      	mov	r3, r1
 801b304:	4620      	mov	r0, r4
 801b306:	4629      	mov	r1, r5
 801b308:	e6c2      	b.n	801b090 <__ieee754_asin+0x50>
 801b30a:	bf00      	nop
 801b30c:	f3af 8000 	nop.w
 801b310:	54442d18 	.word	0x54442d18
 801b314:	3ff921fb 	.word	0x3ff921fb
 801b318:	33145c07 	.word	0x33145c07
 801b31c:	3c91a626 	.word	0x3c91a626
 801b320:	8800759c 	.word	0x8800759c
 801b324:	7e37e43c 	.word	0x7e37e43c
 801b328:	0dfdf709 	.word	0x0dfdf709
 801b32c:	3f023de1 	.word	0x3f023de1
 801b330:	7501b288 	.word	0x7501b288
 801b334:	3f49efe0 	.word	0x3f49efe0
 801b338:	b5688f3b 	.word	0xb5688f3b
 801b33c:	3fa48228 	.word	0x3fa48228
 801b340:	0e884455 	.word	0x0e884455
 801b344:	3fc9c155 	.word	0x3fc9c155
 801b348:	03eb6f7d 	.word	0x03eb6f7d
 801b34c:	3fd4d612 	.word	0x3fd4d612
 801b350:	55555555 	.word	0x55555555
 801b354:	3fc55555 	.word	0x3fc55555
 801b358:	b12e9282 	.word	0xb12e9282
 801b35c:	3fb3b8c5 	.word	0x3fb3b8c5
 801b360:	1b8d0159 	.word	0x1b8d0159
 801b364:	3fe6066c 	.word	0x3fe6066c
 801b368:	9c598ac8 	.word	0x9c598ac8
 801b36c:	40002ae5 	.word	0x40002ae5
 801b370:	1c8a2d4b 	.word	0x1c8a2d4b
 801b374:	40033a27 	.word	0x40033a27
 801b378:	3fefffff 	.word	0x3fefffff
 801b37c:	3fdfffff 	.word	0x3fdfffff
 801b380:	3ff00000 	.word	0x3ff00000
 801b384:	3fe00000 	.word	0x3fe00000
 801b388:	3fef3332 	.word	0x3fef3332
 801b38c:	ee10 2a10 	vmov	r2, s0
 801b390:	ee10 0a10 	vmov	r0, s0
 801b394:	465b      	mov	r3, fp
 801b396:	4659      	mov	r1, fp
 801b398:	f7e4 ff88 	bl	80002ac <__adddf3>
 801b39c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b3a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3a4:	4640      	mov	r0, r8
 801b3a6:	4649      	mov	r1, r9
 801b3a8:	f7e5 fa60 	bl	800086c <__aeabi_ddiv>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	460b      	mov	r3, r1
 801b3b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b3b4:	f7e5 f930 	bl	8000618 <__aeabi_dmul>
 801b3b8:	2600      	movs	r6, #0
 801b3ba:	4680      	mov	r8, r0
 801b3bc:	4689      	mov	r9, r1
 801b3be:	4632      	mov	r2, r6
 801b3c0:	465b      	mov	r3, fp
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	4659      	mov	r1, fp
 801b3c6:	f7e5 f927 	bl	8000618 <__aeabi_dmul>
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	4629      	mov	r1, r5
 801b3d2:	f7e4 ff69 	bl	80002a8 <__aeabi_dsub>
 801b3d6:	4632      	mov	r2, r6
 801b3d8:	4604      	mov	r4, r0
 801b3da:	460d      	mov	r5, r1
 801b3dc:	465b      	mov	r3, fp
 801b3de:	4650      	mov	r0, sl
 801b3e0:	4659      	mov	r1, fp
 801b3e2:	f7e4 ff63 	bl	80002ac <__adddf3>
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	460b      	mov	r3, r1
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	4629      	mov	r1, r5
 801b3ee:	f7e5 fa3d 	bl	800086c <__aeabi_ddiv>
 801b3f2:	4602      	mov	r2, r0
 801b3f4:	460b      	mov	r3, r1
 801b3f6:	f7e4 ff59 	bl	80002ac <__adddf3>
 801b3fa:	4602      	mov	r2, r0
 801b3fc:	460b      	mov	r3, r1
 801b3fe:	a114      	add	r1, pc, #80	; (adr r1, 801b450 <__ieee754_asin+0x410>)
 801b400:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b404:	f7e4 ff50 	bl	80002a8 <__aeabi_dsub>
 801b408:	4602      	mov	r2, r0
 801b40a:	460b      	mov	r3, r1
 801b40c:	4640      	mov	r0, r8
 801b40e:	4649      	mov	r1, r9
 801b410:	f7e4 ff4a 	bl	80002a8 <__aeabi_dsub>
 801b414:	465f      	mov	r7, fp
 801b416:	4604      	mov	r4, r0
 801b418:	460d      	mov	r5, r1
 801b41a:	4632      	mov	r2, r6
 801b41c:	465b      	mov	r3, fp
 801b41e:	4630      	mov	r0, r6
 801b420:	4639      	mov	r1, r7
 801b422:	f7e4 ff43 	bl	80002ac <__adddf3>
 801b426:	4602      	mov	r2, r0
 801b428:	460b      	mov	r3, r1
 801b42a:	a10b      	add	r1, pc, #44	; (adr r1, 801b458 <__ieee754_asin+0x418>)
 801b42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b430:	f7e4 ff3a 	bl	80002a8 <__aeabi_dsub>
 801b434:	4602      	mov	r2, r0
 801b436:	460b      	mov	r3, r1
 801b438:	4620      	mov	r0, r4
 801b43a:	4629      	mov	r1, r5
 801b43c:	f7e4 ff34 	bl	80002a8 <__aeabi_dsub>
 801b440:	4602      	mov	r2, r0
 801b442:	460b      	mov	r3, r1
 801b444:	a104      	add	r1, pc, #16	; (adr r1, 801b458 <__ieee754_asin+0x418>)
 801b446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b44a:	e6dd      	b.n	801b208 <__ieee754_asin+0x1c8>
 801b44c:	f3af 8000 	nop.w
 801b450:	33145c07 	.word	0x33145c07
 801b454:	3c91a626 	.word	0x3c91a626
 801b458:	54442d18 	.word	0x54442d18
 801b45c:	3fe921fb 	.word	0x3fe921fb

0801b460 <__ieee754_atan2>:
 801b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b464:	ec57 6b11 	vmov	r6, r7, d1
 801b468:	4273      	negs	r3, r6
 801b46a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b46e:	4333      	orrs	r3, r6
 801b470:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801b618 <__ieee754_atan2+0x1b8>
 801b474:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b478:	4573      	cmp	r3, lr
 801b47a:	ec51 0b10 	vmov	r0, r1, d0
 801b47e:	ee11 8a10 	vmov	r8, s2
 801b482:	d80a      	bhi.n	801b49a <__ieee754_atan2+0x3a>
 801b484:	4244      	negs	r4, r0
 801b486:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b48a:	4304      	orrs	r4, r0
 801b48c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b490:	4574      	cmp	r4, lr
 801b492:	468c      	mov	ip, r1
 801b494:	ee10 9a10 	vmov	r9, s0
 801b498:	d907      	bls.n	801b4aa <__ieee754_atan2+0x4a>
 801b49a:	4632      	mov	r2, r6
 801b49c:	463b      	mov	r3, r7
 801b49e:	f7e4 ff05 	bl	80002ac <__adddf3>
 801b4a2:	ec41 0b10 	vmov	d0, r0, r1
 801b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b4ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b4b2:	4334      	orrs	r4, r6
 801b4b4:	d103      	bne.n	801b4be <__ieee754_atan2+0x5e>
 801b4b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4ba:	f001 be3d 	b.w	801d138 <atan>
 801b4be:	17bc      	asrs	r4, r7, #30
 801b4c0:	f004 0402 	and.w	r4, r4, #2
 801b4c4:	ea53 0909 	orrs.w	r9, r3, r9
 801b4c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b4cc:	d107      	bne.n	801b4de <__ieee754_atan2+0x7e>
 801b4ce:	2c02      	cmp	r4, #2
 801b4d0:	d073      	beq.n	801b5ba <__ieee754_atan2+0x15a>
 801b4d2:	2c03      	cmp	r4, #3
 801b4d4:	d1e5      	bne.n	801b4a2 <__ieee754_atan2+0x42>
 801b4d6:	a13e      	add	r1, pc, #248	; (adr r1, 801b5d0 <__ieee754_atan2+0x170>)
 801b4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b4dc:	e7e1      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b4de:	ea52 0808 	orrs.w	r8, r2, r8
 801b4e2:	d106      	bne.n	801b4f2 <__ieee754_atan2+0x92>
 801b4e4:	f1bc 0f00 	cmp.w	ip, #0
 801b4e8:	da6b      	bge.n	801b5c2 <__ieee754_atan2+0x162>
 801b4ea:	a13b      	add	r1, pc, #236	; (adr r1, 801b5d8 <__ieee754_atan2+0x178>)
 801b4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b4f0:	e7d7      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b4f2:	4572      	cmp	r2, lr
 801b4f4:	d120      	bne.n	801b538 <__ieee754_atan2+0xd8>
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d111      	bne.n	801b51e <__ieee754_atan2+0xbe>
 801b4fa:	2c02      	cmp	r4, #2
 801b4fc:	d007      	beq.n	801b50e <__ieee754_atan2+0xae>
 801b4fe:	2c03      	cmp	r4, #3
 801b500:	d009      	beq.n	801b516 <__ieee754_atan2+0xb6>
 801b502:	2c01      	cmp	r4, #1
 801b504:	d155      	bne.n	801b5b2 <__ieee754_atan2+0x152>
 801b506:	a136      	add	r1, pc, #216	; (adr r1, 801b5e0 <__ieee754_atan2+0x180>)
 801b508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b50c:	e7c9      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b50e:	a136      	add	r1, pc, #216	; (adr r1, 801b5e8 <__ieee754_atan2+0x188>)
 801b510:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b514:	e7c5      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b516:	a136      	add	r1, pc, #216	; (adr r1, 801b5f0 <__ieee754_atan2+0x190>)
 801b518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b51c:	e7c1      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b51e:	2c02      	cmp	r4, #2
 801b520:	d04b      	beq.n	801b5ba <__ieee754_atan2+0x15a>
 801b522:	2c03      	cmp	r4, #3
 801b524:	d0d7      	beq.n	801b4d6 <__ieee754_atan2+0x76>
 801b526:	2c01      	cmp	r4, #1
 801b528:	f04f 0000 	mov.w	r0, #0
 801b52c:	d102      	bne.n	801b534 <__ieee754_atan2+0xd4>
 801b52e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b532:	e7b6      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b534:	2100      	movs	r1, #0
 801b536:	e7b4      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b538:	4573      	cmp	r3, lr
 801b53a:	d0d3      	beq.n	801b4e4 <__ieee754_atan2+0x84>
 801b53c:	1a9b      	subs	r3, r3, r2
 801b53e:	151b      	asrs	r3, r3, #20
 801b540:	2b3c      	cmp	r3, #60	; 0x3c
 801b542:	dc1e      	bgt.n	801b582 <__ieee754_atan2+0x122>
 801b544:	2f00      	cmp	r7, #0
 801b546:	da01      	bge.n	801b54c <__ieee754_atan2+0xec>
 801b548:	333c      	adds	r3, #60	; 0x3c
 801b54a:	db1e      	blt.n	801b58a <__ieee754_atan2+0x12a>
 801b54c:	4632      	mov	r2, r6
 801b54e:	463b      	mov	r3, r7
 801b550:	f7e5 f98c 	bl	800086c <__aeabi_ddiv>
 801b554:	ec41 0b10 	vmov	d0, r0, r1
 801b558:	f001 ff8e 	bl	801d478 <fabs>
 801b55c:	f001 fdec 	bl	801d138 <atan>
 801b560:	ec51 0b10 	vmov	r0, r1, d0
 801b564:	2c01      	cmp	r4, #1
 801b566:	d013      	beq.n	801b590 <__ieee754_atan2+0x130>
 801b568:	2c02      	cmp	r4, #2
 801b56a:	d015      	beq.n	801b598 <__ieee754_atan2+0x138>
 801b56c:	2c00      	cmp	r4, #0
 801b56e:	d098      	beq.n	801b4a2 <__ieee754_atan2+0x42>
 801b570:	a321      	add	r3, pc, #132	; (adr r3, 801b5f8 <__ieee754_atan2+0x198>)
 801b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b576:	f7e4 fe97 	bl	80002a8 <__aeabi_dsub>
 801b57a:	a321      	add	r3, pc, #132	; (adr r3, 801b600 <__ieee754_atan2+0x1a0>)
 801b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b580:	e014      	b.n	801b5ac <__ieee754_atan2+0x14c>
 801b582:	a121      	add	r1, pc, #132	; (adr r1, 801b608 <__ieee754_atan2+0x1a8>)
 801b584:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b588:	e7ec      	b.n	801b564 <__ieee754_atan2+0x104>
 801b58a:	2000      	movs	r0, #0
 801b58c:	2100      	movs	r1, #0
 801b58e:	e7e9      	b.n	801b564 <__ieee754_atan2+0x104>
 801b590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b594:	4619      	mov	r1, r3
 801b596:	e784      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b598:	a317      	add	r3, pc, #92	; (adr r3, 801b5f8 <__ieee754_atan2+0x198>)
 801b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59e:	f7e4 fe83 	bl	80002a8 <__aeabi_dsub>
 801b5a2:	4602      	mov	r2, r0
 801b5a4:	460b      	mov	r3, r1
 801b5a6:	a116      	add	r1, pc, #88	; (adr r1, 801b600 <__ieee754_atan2+0x1a0>)
 801b5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5ac:	f7e4 fe7c 	bl	80002a8 <__aeabi_dsub>
 801b5b0:	e777      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b5b2:	a117      	add	r1, pc, #92	; (adr r1, 801b610 <__ieee754_atan2+0x1b0>)
 801b5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5b8:	e773      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b5ba:	a111      	add	r1, pc, #68	; (adr r1, 801b600 <__ieee754_atan2+0x1a0>)
 801b5bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5c0:	e76f      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b5c2:	a111      	add	r1, pc, #68	; (adr r1, 801b608 <__ieee754_atan2+0x1a8>)
 801b5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5c8:	e76b      	b.n	801b4a2 <__ieee754_atan2+0x42>
 801b5ca:	bf00      	nop
 801b5cc:	f3af 8000 	nop.w
 801b5d0:	54442d18 	.word	0x54442d18
 801b5d4:	c00921fb 	.word	0xc00921fb
 801b5d8:	54442d18 	.word	0x54442d18
 801b5dc:	bff921fb 	.word	0xbff921fb
 801b5e0:	54442d18 	.word	0x54442d18
 801b5e4:	bfe921fb 	.word	0xbfe921fb
 801b5e8:	7f3321d2 	.word	0x7f3321d2
 801b5ec:	4002d97c 	.word	0x4002d97c
 801b5f0:	7f3321d2 	.word	0x7f3321d2
 801b5f4:	c002d97c 	.word	0xc002d97c
 801b5f8:	33145c07 	.word	0x33145c07
 801b5fc:	3ca1a626 	.word	0x3ca1a626
 801b600:	54442d18 	.word	0x54442d18
 801b604:	400921fb 	.word	0x400921fb
 801b608:	54442d18 	.word	0x54442d18
 801b60c:	3ff921fb 	.word	0x3ff921fb
 801b610:	54442d18 	.word	0x54442d18
 801b614:	3fe921fb 	.word	0x3fe921fb
 801b618:	7ff00000 	.word	0x7ff00000

0801b61c <__ieee754_fmod>:
 801b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b620:	ec53 2b11 	vmov	r2, r3, d1
 801b624:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801b628:	ea5e 0402 	orrs.w	r4, lr, r2
 801b62c:	ec51 0b10 	vmov	r0, r1, d0
 801b630:	461e      	mov	r6, r3
 801b632:	ee11 5a10 	vmov	r5, s2
 801b636:	4694      	mov	ip, r2
 801b638:	d00c      	beq.n	801b654 <__ieee754_fmod+0x38>
 801b63a:	4c7a      	ldr	r4, [pc, #488]	; (801b824 <__ieee754_fmod+0x208>)
 801b63c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b640:	45a0      	cmp	r8, r4
 801b642:	4689      	mov	r9, r1
 801b644:	dc06      	bgt.n	801b654 <__ieee754_fmod+0x38>
 801b646:	4254      	negs	r4, r2
 801b648:	4314      	orrs	r4, r2
 801b64a:	4f77      	ldr	r7, [pc, #476]	; (801b828 <__ieee754_fmod+0x20c>)
 801b64c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801b650:	42bc      	cmp	r4, r7
 801b652:	d909      	bls.n	801b668 <__ieee754_fmod+0x4c>
 801b654:	f7e4 ffe0 	bl	8000618 <__aeabi_dmul>
 801b658:	4602      	mov	r2, r0
 801b65a:	460b      	mov	r3, r1
 801b65c:	f7e5 f906 	bl	800086c <__aeabi_ddiv>
 801b660:	ec41 0b10 	vmov	d0, r0, r1
 801b664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b668:	45f0      	cmp	r8, lr
 801b66a:	ee10 2a10 	vmov	r2, s0
 801b66e:	4607      	mov	r7, r0
 801b670:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801b674:	dc0a      	bgt.n	801b68c <__ieee754_fmod+0x70>
 801b676:	dbf3      	blt.n	801b660 <__ieee754_fmod+0x44>
 801b678:	42a8      	cmp	r0, r5
 801b67a:	d3f1      	bcc.n	801b660 <__ieee754_fmod+0x44>
 801b67c:	d106      	bne.n	801b68c <__ieee754_fmod+0x70>
 801b67e:	496b      	ldr	r1, [pc, #428]	; (801b82c <__ieee754_fmod+0x210>)
 801b680:	0fe4      	lsrs	r4, r4, #31
 801b682:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b686:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b68a:	e7e9      	b.n	801b660 <__ieee754_fmod+0x44>
 801b68c:	4b68      	ldr	r3, [pc, #416]	; (801b830 <__ieee754_fmod+0x214>)
 801b68e:	4598      	cmp	r8, r3
 801b690:	dc49      	bgt.n	801b726 <__ieee754_fmod+0x10a>
 801b692:	f1b8 0f00 	cmp.w	r8, #0
 801b696:	d13d      	bne.n	801b714 <__ieee754_fmod+0xf8>
 801b698:	4866      	ldr	r0, [pc, #408]	; (801b834 <__ieee754_fmod+0x218>)
 801b69a:	4611      	mov	r1, r2
 801b69c:	2900      	cmp	r1, #0
 801b69e:	dc36      	bgt.n	801b70e <__ieee754_fmod+0xf2>
 801b6a0:	459e      	cmp	lr, r3
 801b6a2:	dc51      	bgt.n	801b748 <__ieee754_fmod+0x12c>
 801b6a4:	f1be 0f00 	cmp.w	lr, #0
 801b6a8:	d145      	bne.n	801b736 <__ieee754_fmod+0x11a>
 801b6aa:	4b62      	ldr	r3, [pc, #392]	; (801b834 <__ieee754_fmod+0x218>)
 801b6ac:	4629      	mov	r1, r5
 801b6ae:	2900      	cmp	r1, #0
 801b6b0:	dc3e      	bgt.n	801b730 <__ieee754_fmod+0x114>
 801b6b2:	4961      	ldr	r1, [pc, #388]	; (801b838 <__ieee754_fmod+0x21c>)
 801b6b4:	4288      	cmp	r0, r1
 801b6b6:	db4c      	blt.n	801b752 <__ieee754_fmod+0x136>
 801b6b8:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801b6bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b6c0:	4a5d      	ldr	r2, [pc, #372]	; (801b838 <__ieee754_fmod+0x21c>)
 801b6c2:	4293      	cmp	r3, r2
 801b6c4:	db59      	blt.n	801b77a <__ieee754_fmod+0x15e>
 801b6c6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b6ca:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b6ce:	1ac0      	subs	r0, r0, r3
 801b6d0:	1b8a      	subs	r2, r1, r6
 801b6d2:	eba7 050c 	sub.w	r5, r7, ip
 801b6d6:	2800      	cmp	r0, #0
 801b6d8:	d166      	bne.n	801b7a8 <__ieee754_fmod+0x18c>
 801b6da:	4567      	cmp	r7, ip
 801b6dc:	bf38      	it	cc
 801b6de:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b6e2:	2a00      	cmp	r2, #0
 801b6e4:	bfbc      	itt	lt
 801b6e6:	463d      	movlt	r5, r7
 801b6e8:	460a      	movlt	r2, r1
 801b6ea:	ea52 0105 	orrs.w	r1, r2, r5
 801b6ee:	d0c6      	beq.n	801b67e <__ieee754_fmod+0x62>
 801b6f0:	494f      	ldr	r1, [pc, #316]	; (801b830 <__ieee754_fmod+0x214>)
 801b6f2:	428a      	cmp	r2, r1
 801b6f4:	dd6d      	ble.n	801b7d2 <__ieee754_fmod+0x1b6>
 801b6f6:	4950      	ldr	r1, [pc, #320]	; (801b838 <__ieee754_fmod+0x21c>)
 801b6f8:	428b      	cmp	r3, r1
 801b6fa:	db70      	blt.n	801b7de <__ieee754_fmod+0x1c2>
 801b6fc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801b700:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801b704:	4314      	orrs	r4, r2
 801b706:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801b70a:	4628      	mov	r0, r5
 801b70c:	e7a8      	b.n	801b660 <__ieee754_fmod+0x44>
 801b70e:	3801      	subs	r0, #1
 801b710:	0049      	lsls	r1, r1, #1
 801b712:	e7c3      	b.n	801b69c <__ieee754_fmod+0x80>
 801b714:	4848      	ldr	r0, [pc, #288]	; (801b838 <__ieee754_fmod+0x21c>)
 801b716:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801b71a:	0049      	lsls	r1, r1, #1
 801b71c:	2900      	cmp	r1, #0
 801b71e:	f100 30ff 	add.w	r0, r0, #4294967295
 801b722:	dcfa      	bgt.n	801b71a <__ieee754_fmod+0xfe>
 801b724:	e7bc      	b.n	801b6a0 <__ieee754_fmod+0x84>
 801b726:	ea4f 5028 	mov.w	r0, r8, asr #20
 801b72a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b72e:	e7b7      	b.n	801b6a0 <__ieee754_fmod+0x84>
 801b730:	3b01      	subs	r3, #1
 801b732:	0049      	lsls	r1, r1, #1
 801b734:	e7bb      	b.n	801b6ae <__ieee754_fmod+0x92>
 801b736:	4b40      	ldr	r3, [pc, #256]	; (801b838 <__ieee754_fmod+0x21c>)
 801b738:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801b73c:	0049      	lsls	r1, r1, #1
 801b73e:	2900      	cmp	r1, #0
 801b740:	f103 33ff 	add.w	r3, r3, #4294967295
 801b744:	dcfa      	bgt.n	801b73c <__ieee754_fmod+0x120>
 801b746:	e7b4      	b.n	801b6b2 <__ieee754_fmod+0x96>
 801b748:	ea4f 532e 	mov.w	r3, lr, asr #20
 801b74c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b750:	e7af      	b.n	801b6b2 <__ieee754_fmod+0x96>
 801b752:	1a0f      	subs	r7, r1, r0
 801b754:	2f1f      	cmp	r7, #31
 801b756:	dc0a      	bgt.n	801b76e <__ieee754_fmod+0x152>
 801b758:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801b75c:	fa08 f807 	lsl.w	r8, r8, r7
 801b760:	fa22 f101 	lsr.w	r1, r2, r1
 801b764:	ea41 0108 	orr.w	r1, r1, r8
 801b768:	fa02 f707 	lsl.w	r7, r2, r7
 801b76c:	e7a8      	b.n	801b6c0 <__ieee754_fmod+0xa4>
 801b76e:	4933      	ldr	r1, [pc, #204]	; (801b83c <__ieee754_fmod+0x220>)
 801b770:	1a09      	subs	r1, r1, r0
 801b772:	fa02 f101 	lsl.w	r1, r2, r1
 801b776:	2700      	movs	r7, #0
 801b778:	e7a2      	b.n	801b6c0 <__ieee754_fmod+0xa4>
 801b77a:	eba2 0c03 	sub.w	ip, r2, r3
 801b77e:	f1bc 0f1f 	cmp.w	ip, #31
 801b782:	dc0a      	bgt.n	801b79a <__ieee754_fmod+0x17e>
 801b784:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801b788:	fa0e fe0c 	lsl.w	lr, lr, ip
 801b78c:	fa25 f606 	lsr.w	r6, r5, r6
 801b790:	ea46 060e 	orr.w	r6, r6, lr
 801b794:	fa05 fc0c 	lsl.w	ip, r5, ip
 801b798:	e799      	b.n	801b6ce <__ieee754_fmod+0xb2>
 801b79a:	4e28      	ldr	r6, [pc, #160]	; (801b83c <__ieee754_fmod+0x220>)
 801b79c:	1af6      	subs	r6, r6, r3
 801b79e:	fa05 f606 	lsl.w	r6, r5, r6
 801b7a2:	f04f 0c00 	mov.w	ip, #0
 801b7a6:	e792      	b.n	801b6ce <__ieee754_fmod+0xb2>
 801b7a8:	4567      	cmp	r7, ip
 801b7aa:	bf38      	it	cc
 801b7ac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b7b0:	2a00      	cmp	r2, #0
 801b7b2:	da05      	bge.n	801b7c0 <__ieee754_fmod+0x1a4>
 801b7b4:	0ffa      	lsrs	r2, r7, #31
 801b7b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b7ba:	007f      	lsls	r7, r7, #1
 801b7bc:	3801      	subs	r0, #1
 801b7be:	e787      	b.n	801b6d0 <__ieee754_fmod+0xb4>
 801b7c0:	ea52 0105 	orrs.w	r1, r2, r5
 801b7c4:	f43f af5b 	beq.w	801b67e <__ieee754_fmod+0x62>
 801b7c8:	0fe9      	lsrs	r1, r5, #31
 801b7ca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801b7ce:	006f      	lsls	r7, r5, #1
 801b7d0:	e7f4      	b.n	801b7bc <__ieee754_fmod+0x1a0>
 801b7d2:	0fe8      	lsrs	r0, r5, #31
 801b7d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b7d8:	006d      	lsls	r5, r5, #1
 801b7da:	3b01      	subs	r3, #1
 801b7dc:	e789      	b.n	801b6f2 <__ieee754_fmod+0xd6>
 801b7de:	1ac9      	subs	r1, r1, r3
 801b7e0:	2914      	cmp	r1, #20
 801b7e2:	dc0a      	bgt.n	801b7fa <__ieee754_fmod+0x1de>
 801b7e4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ec:	40cd      	lsrs	r5, r1
 801b7ee:	432b      	orrs	r3, r5
 801b7f0:	410a      	asrs	r2, r1
 801b7f2:	ea42 0104 	orr.w	r1, r2, r4
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	e732      	b.n	801b660 <__ieee754_fmod+0x44>
 801b7fa:	291f      	cmp	r1, #31
 801b7fc:	dc07      	bgt.n	801b80e <__ieee754_fmod+0x1f2>
 801b7fe:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b802:	40cd      	lsrs	r5, r1
 801b804:	fa02 f303 	lsl.w	r3, r2, r3
 801b808:	432b      	orrs	r3, r5
 801b80a:	4622      	mov	r2, r4
 801b80c:	e7f1      	b.n	801b7f2 <__ieee754_fmod+0x1d6>
 801b80e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801b812:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801b816:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801b81a:	33e2      	adds	r3, #226	; 0xe2
 801b81c:	fa42 f303 	asr.w	r3, r2, r3
 801b820:	e7f3      	b.n	801b80a <__ieee754_fmod+0x1ee>
 801b822:	bf00      	nop
 801b824:	7fefffff 	.word	0x7fefffff
 801b828:	7ff00000 	.word	0x7ff00000
 801b82c:	0801e728 	.word	0x0801e728
 801b830:	000fffff 	.word	0x000fffff
 801b834:	fffffbed 	.word	0xfffffbed
 801b838:	fffffc02 	.word	0xfffffc02
 801b83c:	fffffbe2 	.word	0xfffffbe2

0801b840 <__ieee754_pow>:
 801b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b844:	b091      	sub	sp, #68	; 0x44
 801b846:	ed8d 1b00 	vstr	d1, [sp]
 801b84a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b84e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b852:	ea58 0302 	orrs.w	r3, r8, r2
 801b856:	ec57 6b10 	vmov	r6, r7, d0
 801b85a:	f000 84be 	beq.w	801c1da <__ieee754_pow+0x99a>
 801b85e:	4b7a      	ldr	r3, [pc, #488]	; (801ba48 <__ieee754_pow+0x208>)
 801b860:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b864:	429c      	cmp	r4, r3
 801b866:	463d      	mov	r5, r7
 801b868:	ee10 aa10 	vmov	sl, s0
 801b86c:	dc09      	bgt.n	801b882 <__ieee754_pow+0x42>
 801b86e:	d103      	bne.n	801b878 <__ieee754_pow+0x38>
 801b870:	b93e      	cbnz	r6, 801b882 <__ieee754_pow+0x42>
 801b872:	45a0      	cmp	r8, r4
 801b874:	dc0d      	bgt.n	801b892 <__ieee754_pow+0x52>
 801b876:	e001      	b.n	801b87c <__ieee754_pow+0x3c>
 801b878:	4598      	cmp	r8, r3
 801b87a:	dc02      	bgt.n	801b882 <__ieee754_pow+0x42>
 801b87c:	4598      	cmp	r8, r3
 801b87e:	d10e      	bne.n	801b89e <__ieee754_pow+0x5e>
 801b880:	b16a      	cbz	r2, 801b89e <__ieee754_pow+0x5e>
 801b882:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b886:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b88a:	ea54 030a 	orrs.w	r3, r4, sl
 801b88e:	f000 84a4 	beq.w	801c1da <__ieee754_pow+0x99a>
 801b892:	486e      	ldr	r0, [pc, #440]	; (801ba4c <__ieee754_pow+0x20c>)
 801b894:	b011      	add	sp, #68	; 0x44
 801b896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b89a:	f001 be89 	b.w	801d5b0 <nan>
 801b89e:	2d00      	cmp	r5, #0
 801b8a0:	da53      	bge.n	801b94a <__ieee754_pow+0x10a>
 801b8a2:	4b6b      	ldr	r3, [pc, #428]	; (801ba50 <__ieee754_pow+0x210>)
 801b8a4:	4598      	cmp	r8, r3
 801b8a6:	dc4d      	bgt.n	801b944 <__ieee754_pow+0x104>
 801b8a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b8ac:	4598      	cmp	r8, r3
 801b8ae:	dd4c      	ble.n	801b94a <__ieee754_pow+0x10a>
 801b8b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b8b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b8b8:	2b14      	cmp	r3, #20
 801b8ba:	dd26      	ble.n	801b90a <__ieee754_pow+0xca>
 801b8bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b8c0:	fa22 f103 	lsr.w	r1, r2, r3
 801b8c4:	fa01 f303 	lsl.w	r3, r1, r3
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d13e      	bne.n	801b94a <__ieee754_pow+0x10a>
 801b8cc:	f001 0101 	and.w	r1, r1, #1
 801b8d0:	f1c1 0b02 	rsb	fp, r1, #2
 801b8d4:	2a00      	cmp	r2, #0
 801b8d6:	d15b      	bne.n	801b990 <__ieee754_pow+0x150>
 801b8d8:	4b5b      	ldr	r3, [pc, #364]	; (801ba48 <__ieee754_pow+0x208>)
 801b8da:	4598      	cmp	r8, r3
 801b8dc:	d124      	bne.n	801b928 <__ieee754_pow+0xe8>
 801b8de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b8e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b8e6:	ea53 030a 	orrs.w	r3, r3, sl
 801b8ea:	f000 8476 	beq.w	801c1da <__ieee754_pow+0x99a>
 801b8ee:	4b59      	ldr	r3, [pc, #356]	; (801ba54 <__ieee754_pow+0x214>)
 801b8f0:	429c      	cmp	r4, r3
 801b8f2:	dd2d      	ble.n	801b950 <__ieee754_pow+0x110>
 801b8f4:	f1b9 0f00 	cmp.w	r9, #0
 801b8f8:	f280 8473 	bge.w	801c1e2 <__ieee754_pow+0x9a2>
 801b8fc:	2000      	movs	r0, #0
 801b8fe:	2100      	movs	r1, #0
 801b900:	ec41 0b10 	vmov	d0, r0, r1
 801b904:	b011      	add	sp, #68	; 0x44
 801b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b90a:	2a00      	cmp	r2, #0
 801b90c:	d13e      	bne.n	801b98c <__ieee754_pow+0x14c>
 801b90e:	f1c3 0314 	rsb	r3, r3, #20
 801b912:	fa48 f103 	asr.w	r1, r8, r3
 801b916:	fa01 f303 	lsl.w	r3, r1, r3
 801b91a:	4543      	cmp	r3, r8
 801b91c:	f040 8469 	bne.w	801c1f2 <__ieee754_pow+0x9b2>
 801b920:	f001 0101 	and.w	r1, r1, #1
 801b924:	f1c1 0b02 	rsb	fp, r1, #2
 801b928:	4b4b      	ldr	r3, [pc, #300]	; (801ba58 <__ieee754_pow+0x218>)
 801b92a:	4598      	cmp	r8, r3
 801b92c:	d118      	bne.n	801b960 <__ieee754_pow+0x120>
 801b92e:	f1b9 0f00 	cmp.w	r9, #0
 801b932:	f280 845a 	bge.w	801c1ea <__ieee754_pow+0x9aa>
 801b936:	4948      	ldr	r1, [pc, #288]	; (801ba58 <__ieee754_pow+0x218>)
 801b938:	4632      	mov	r2, r6
 801b93a:	463b      	mov	r3, r7
 801b93c:	2000      	movs	r0, #0
 801b93e:	f7e4 ff95 	bl	800086c <__aeabi_ddiv>
 801b942:	e7dd      	b.n	801b900 <__ieee754_pow+0xc0>
 801b944:	f04f 0b02 	mov.w	fp, #2
 801b948:	e7c4      	b.n	801b8d4 <__ieee754_pow+0x94>
 801b94a:	f04f 0b00 	mov.w	fp, #0
 801b94e:	e7c1      	b.n	801b8d4 <__ieee754_pow+0x94>
 801b950:	f1b9 0f00 	cmp.w	r9, #0
 801b954:	dad2      	bge.n	801b8fc <__ieee754_pow+0xbc>
 801b956:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b95a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b95e:	e7cf      	b.n	801b900 <__ieee754_pow+0xc0>
 801b960:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b964:	d106      	bne.n	801b974 <__ieee754_pow+0x134>
 801b966:	4632      	mov	r2, r6
 801b968:	463b      	mov	r3, r7
 801b96a:	4610      	mov	r0, r2
 801b96c:	4619      	mov	r1, r3
 801b96e:	f7e4 fe53 	bl	8000618 <__aeabi_dmul>
 801b972:	e7c5      	b.n	801b900 <__ieee754_pow+0xc0>
 801b974:	4b39      	ldr	r3, [pc, #228]	; (801ba5c <__ieee754_pow+0x21c>)
 801b976:	4599      	cmp	r9, r3
 801b978:	d10a      	bne.n	801b990 <__ieee754_pow+0x150>
 801b97a:	2d00      	cmp	r5, #0
 801b97c:	db08      	blt.n	801b990 <__ieee754_pow+0x150>
 801b97e:	ec47 6b10 	vmov	d0, r6, r7
 801b982:	b011      	add	sp, #68	; 0x44
 801b984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b988:	f000 be5c 	b.w	801c644 <__ieee754_sqrt>
 801b98c:	f04f 0b00 	mov.w	fp, #0
 801b990:	ec47 6b10 	vmov	d0, r6, r7
 801b994:	f001 fd70 	bl	801d478 <fabs>
 801b998:	ec51 0b10 	vmov	r0, r1, d0
 801b99c:	f1ba 0f00 	cmp.w	sl, #0
 801b9a0:	d127      	bne.n	801b9f2 <__ieee754_pow+0x1b2>
 801b9a2:	b124      	cbz	r4, 801b9ae <__ieee754_pow+0x16e>
 801b9a4:	4b2c      	ldr	r3, [pc, #176]	; (801ba58 <__ieee754_pow+0x218>)
 801b9a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	d121      	bne.n	801b9f2 <__ieee754_pow+0x1b2>
 801b9ae:	f1b9 0f00 	cmp.w	r9, #0
 801b9b2:	da05      	bge.n	801b9c0 <__ieee754_pow+0x180>
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	460b      	mov	r3, r1
 801b9b8:	2000      	movs	r0, #0
 801b9ba:	4927      	ldr	r1, [pc, #156]	; (801ba58 <__ieee754_pow+0x218>)
 801b9bc:	f7e4 ff56 	bl	800086c <__aeabi_ddiv>
 801b9c0:	2d00      	cmp	r5, #0
 801b9c2:	da9d      	bge.n	801b900 <__ieee754_pow+0xc0>
 801b9c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b9c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b9cc:	ea54 030b 	orrs.w	r3, r4, fp
 801b9d0:	d108      	bne.n	801b9e4 <__ieee754_pow+0x1a4>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	460b      	mov	r3, r1
 801b9d6:	4610      	mov	r0, r2
 801b9d8:	4619      	mov	r1, r3
 801b9da:	f7e4 fc65 	bl	80002a8 <__aeabi_dsub>
 801b9de:	4602      	mov	r2, r0
 801b9e0:	460b      	mov	r3, r1
 801b9e2:	e7ac      	b.n	801b93e <__ieee754_pow+0xfe>
 801b9e4:	f1bb 0f01 	cmp.w	fp, #1
 801b9e8:	d18a      	bne.n	801b900 <__ieee754_pow+0xc0>
 801b9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b9ee:	4619      	mov	r1, r3
 801b9f0:	e786      	b.n	801b900 <__ieee754_pow+0xc0>
 801b9f2:	0fed      	lsrs	r5, r5, #31
 801b9f4:	1e6b      	subs	r3, r5, #1
 801b9f6:	930d      	str	r3, [sp, #52]	; 0x34
 801b9f8:	ea5b 0303 	orrs.w	r3, fp, r3
 801b9fc:	d102      	bne.n	801ba04 <__ieee754_pow+0x1c4>
 801b9fe:	4632      	mov	r2, r6
 801ba00:	463b      	mov	r3, r7
 801ba02:	e7e8      	b.n	801b9d6 <__ieee754_pow+0x196>
 801ba04:	4b16      	ldr	r3, [pc, #88]	; (801ba60 <__ieee754_pow+0x220>)
 801ba06:	4598      	cmp	r8, r3
 801ba08:	f340 80fe 	ble.w	801bc08 <__ieee754_pow+0x3c8>
 801ba0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ba10:	4598      	cmp	r8, r3
 801ba12:	dd0a      	ble.n	801ba2a <__ieee754_pow+0x1ea>
 801ba14:	4b0f      	ldr	r3, [pc, #60]	; (801ba54 <__ieee754_pow+0x214>)
 801ba16:	429c      	cmp	r4, r3
 801ba18:	dc0d      	bgt.n	801ba36 <__ieee754_pow+0x1f6>
 801ba1a:	f1b9 0f00 	cmp.w	r9, #0
 801ba1e:	f6bf af6d 	bge.w	801b8fc <__ieee754_pow+0xbc>
 801ba22:	a307      	add	r3, pc, #28	; (adr r3, 801ba40 <__ieee754_pow+0x200>)
 801ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba28:	e79f      	b.n	801b96a <__ieee754_pow+0x12a>
 801ba2a:	4b0e      	ldr	r3, [pc, #56]	; (801ba64 <__ieee754_pow+0x224>)
 801ba2c:	429c      	cmp	r4, r3
 801ba2e:	ddf4      	ble.n	801ba1a <__ieee754_pow+0x1da>
 801ba30:	4b09      	ldr	r3, [pc, #36]	; (801ba58 <__ieee754_pow+0x218>)
 801ba32:	429c      	cmp	r4, r3
 801ba34:	dd18      	ble.n	801ba68 <__ieee754_pow+0x228>
 801ba36:	f1b9 0f00 	cmp.w	r9, #0
 801ba3a:	dcf2      	bgt.n	801ba22 <__ieee754_pow+0x1e2>
 801ba3c:	e75e      	b.n	801b8fc <__ieee754_pow+0xbc>
 801ba3e:	bf00      	nop
 801ba40:	8800759c 	.word	0x8800759c
 801ba44:	7e37e43c 	.word	0x7e37e43c
 801ba48:	7ff00000 	.word	0x7ff00000
 801ba4c:	0801e601 	.word	0x0801e601
 801ba50:	433fffff 	.word	0x433fffff
 801ba54:	3fefffff 	.word	0x3fefffff
 801ba58:	3ff00000 	.word	0x3ff00000
 801ba5c:	3fe00000 	.word	0x3fe00000
 801ba60:	41e00000 	.word	0x41e00000
 801ba64:	3feffffe 	.word	0x3feffffe
 801ba68:	2200      	movs	r2, #0
 801ba6a:	4b63      	ldr	r3, [pc, #396]	; (801bbf8 <__ieee754_pow+0x3b8>)
 801ba6c:	f7e4 fc1c 	bl	80002a8 <__aeabi_dsub>
 801ba70:	a355      	add	r3, pc, #340	; (adr r3, 801bbc8 <__ieee754_pow+0x388>)
 801ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba76:	4604      	mov	r4, r0
 801ba78:	460d      	mov	r5, r1
 801ba7a:	f7e4 fdcd 	bl	8000618 <__aeabi_dmul>
 801ba7e:	a354      	add	r3, pc, #336	; (adr r3, 801bbd0 <__ieee754_pow+0x390>)
 801ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba84:	4606      	mov	r6, r0
 801ba86:	460f      	mov	r7, r1
 801ba88:	4620      	mov	r0, r4
 801ba8a:	4629      	mov	r1, r5
 801ba8c:	f7e4 fdc4 	bl	8000618 <__aeabi_dmul>
 801ba90:	2200      	movs	r2, #0
 801ba92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba96:	4b59      	ldr	r3, [pc, #356]	; (801bbfc <__ieee754_pow+0x3bc>)
 801ba98:	4620      	mov	r0, r4
 801ba9a:	4629      	mov	r1, r5
 801ba9c:	f7e4 fdbc 	bl	8000618 <__aeabi_dmul>
 801baa0:	4602      	mov	r2, r0
 801baa2:	460b      	mov	r3, r1
 801baa4:	a14c      	add	r1, pc, #304	; (adr r1, 801bbd8 <__ieee754_pow+0x398>)
 801baa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801baaa:	f7e4 fbfd 	bl	80002a8 <__aeabi_dsub>
 801baae:	4622      	mov	r2, r4
 801bab0:	462b      	mov	r3, r5
 801bab2:	f7e4 fdb1 	bl	8000618 <__aeabi_dmul>
 801bab6:	4602      	mov	r2, r0
 801bab8:	460b      	mov	r3, r1
 801baba:	2000      	movs	r0, #0
 801babc:	4950      	ldr	r1, [pc, #320]	; (801bc00 <__ieee754_pow+0x3c0>)
 801babe:	f7e4 fbf3 	bl	80002a8 <__aeabi_dsub>
 801bac2:	4622      	mov	r2, r4
 801bac4:	462b      	mov	r3, r5
 801bac6:	4680      	mov	r8, r0
 801bac8:	4689      	mov	r9, r1
 801baca:	4620      	mov	r0, r4
 801bacc:	4629      	mov	r1, r5
 801bace:	f7e4 fda3 	bl	8000618 <__aeabi_dmul>
 801bad2:	4602      	mov	r2, r0
 801bad4:	460b      	mov	r3, r1
 801bad6:	4640      	mov	r0, r8
 801bad8:	4649      	mov	r1, r9
 801bada:	f7e4 fd9d 	bl	8000618 <__aeabi_dmul>
 801bade:	a340      	add	r3, pc, #256	; (adr r3, 801bbe0 <__ieee754_pow+0x3a0>)
 801bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bae4:	f7e4 fd98 	bl	8000618 <__aeabi_dmul>
 801bae8:	4602      	mov	r2, r0
 801baea:	460b      	mov	r3, r1
 801baec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801baf0:	f7e4 fbda 	bl	80002a8 <__aeabi_dsub>
 801baf4:	4602      	mov	r2, r0
 801baf6:	460b      	mov	r3, r1
 801baf8:	4604      	mov	r4, r0
 801bafa:	460d      	mov	r5, r1
 801bafc:	4630      	mov	r0, r6
 801bafe:	4639      	mov	r1, r7
 801bb00:	f7e4 fbd4 	bl	80002ac <__adddf3>
 801bb04:	2000      	movs	r0, #0
 801bb06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb0a:	4632      	mov	r2, r6
 801bb0c:	463b      	mov	r3, r7
 801bb0e:	f7e4 fbcb 	bl	80002a8 <__aeabi_dsub>
 801bb12:	4602      	mov	r2, r0
 801bb14:	460b      	mov	r3, r1
 801bb16:	4620      	mov	r0, r4
 801bb18:	4629      	mov	r1, r5
 801bb1a:	f7e4 fbc5 	bl	80002a8 <__aeabi_dsub>
 801bb1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb20:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bb24:	4313      	orrs	r3, r2
 801bb26:	4606      	mov	r6, r0
 801bb28:	460f      	mov	r7, r1
 801bb2a:	f040 81eb 	bne.w	801bf04 <__ieee754_pow+0x6c4>
 801bb2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bbe8 <__ieee754_pow+0x3a8>
 801bb32:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bb36:	2400      	movs	r4, #0
 801bb38:	4622      	mov	r2, r4
 801bb3a:	462b      	mov	r3, r5
 801bb3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bb40:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb44:	f7e4 fbb0 	bl	80002a8 <__aeabi_dsub>
 801bb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb4c:	f7e4 fd64 	bl	8000618 <__aeabi_dmul>
 801bb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bb54:	4680      	mov	r8, r0
 801bb56:	4689      	mov	r9, r1
 801bb58:	4630      	mov	r0, r6
 801bb5a:	4639      	mov	r1, r7
 801bb5c:	f7e4 fd5c 	bl	8000618 <__aeabi_dmul>
 801bb60:	4602      	mov	r2, r0
 801bb62:	460b      	mov	r3, r1
 801bb64:	4640      	mov	r0, r8
 801bb66:	4649      	mov	r1, r9
 801bb68:	f7e4 fba0 	bl	80002ac <__adddf3>
 801bb6c:	4622      	mov	r2, r4
 801bb6e:	462b      	mov	r3, r5
 801bb70:	4680      	mov	r8, r0
 801bb72:	4689      	mov	r9, r1
 801bb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb78:	f7e4 fd4e 	bl	8000618 <__aeabi_dmul>
 801bb7c:	460b      	mov	r3, r1
 801bb7e:	4604      	mov	r4, r0
 801bb80:	460d      	mov	r5, r1
 801bb82:	4602      	mov	r2, r0
 801bb84:	4649      	mov	r1, r9
 801bb86:	4640      	mov	r0, r8
 801bb88:	e9cd 4500 	strd	r4, r5, [sp]
 801bb8c:	f7e4 fb8e 	bl	80002ac <__adddf3>
 801bb90:	4b1c      	ldr	r3, [pc, #112]	; (801bc04 <__ieee754_pow+0x3c4>)
 801bb92:	4299      	cmp	r1, r3
 801bb94:	4606      	mov	r6, r0
 801bb96:	460f      	mov	r7, r1
 801bb98:	468b      	mov	fp, r1
 801bb9a:	f340 82f7 	ble.w	801c18c <__ieee754_pow+0x94c>
 801bb9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801bba2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801bba6:	4303      	orrs	r3, r0
 801bba8:	f000 81ea 	beq.w	801bf80 <__ieee754_pow+0x740>
 801bbac:	a310      	add	r3, pc, #64	; (adr r3, 801bbf0 <__ieee754_pow+0x3b0>)
 801bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbb6:	f7e4 fd2f 	bl	8000618 <__aeabi_dmul>
 801bbba:	a30d      	add	r3, pc, #52	; (adr r3, 801bbf0 <__ieee754_pow+0x3b0>)
 801bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc0:	e6d5      	b.n	801b96e <__ieee754_pow+0x12e>
 801bbc2:	bf00      	nop
 801bbc4:	f3af 8000 	nop.w
 801bbc8:	60000000 	.word	0x60000000
 801bbcc:	3ff71547 	.word	0x3ff71547
 801bbd0:	f85ddf44 	.word	0xf85ddf44
 801bbd4:	3e54ae0b 	.word	0x3e54ae0b
 801bbd8:	55555555 	.word	0x55555555
 801bbdc:	3fd55555 	.word	0x3fd55555
 801bbe0:	652b82fe 	.word	0x652b82fe
 801bbe4:	3ff71547 	.word	0x3ff71547
 801bbe8:	00000000 	.word	0x00000000
 801bbec:	bff00000 	.word	0xbff00000
 801bbf0:	8800759c 	.word	0x8800759c
 801bbf4:	7e37e43c 	.word	0x7e37e43c
 801bbf8:	3ff00000 	.word	0x3ff00000
 801bbfc:	3fd00000 	.word	0x3fd00000
 801bc00:	3fe00000 	.word	0x3fe00000
 801bc04:	408fffff 	.word	0x408fffff
 801bc08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bc0c:	f04f 0200 	mov.w	r2, #0
 801bc10:	da05      	bge.n	801bc1e <__ieee754_pow+0x3de>
 801bc12:	4bd3      	ldr	r3, [pc, #844]	; (801bf60 <__ieee754_pow+0x720>)
 801bc14:	f7e4 fd00 	bl	8000618 <__aeabi_dmul>
 801bc18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801bc1c:	460c      	mov	r4, r1
 801bc1e:	1523      	asrs	r3, r4, #20
 801bc20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bc24:	4413      	add	r3, r2
 801bc26:	9309      	str	r3, [sp, #36]	; 0x24
 801bc28:	4bce      	ldr	r3, [pc, #824]	; (801bf64 <__ieee754_pow+0x724>)
 801bc2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801bc2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bc32:	429c      	cmp	r4, r3
 801bc34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bc38:	dd08      	ble.n	801bc4c <__ieee754_pow+0x40c>
 801bc3a:	4bcb      	ldr	r3, [pc, #812]	; (801bf68 <__ieee754_pow+0x728>)
 801bc3c:	429c      	cmp	r4, r3
 801bc3e:	f340 815e 	ble.w	801befe <__ieee754_pow+0x6be>
 801bc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc44:	3301      	adds	r3, #1
 801bc46:	9309      	str	r3, [sp, #36]	; 0x24
 801bc48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801bc4c:	f04f 0a00 	mov.w	sl, #0
 801bc50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bc54:	930c      	str	r3, [sp, #48]	; 0x30
 801bc56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc58:	4bc4      	ldr	r3, [pc, #784]	; (801bf6c <__ieee754_pow+0x72c>)
 801bc5a:	4413      	add	r3, r2
 801bc5c:	ed93 7b00 	vldr	d7, [r3]
 801bc60:	4629      	mov	r1, r5
 801bc62:	ec53 2b17 	vmov	r2, r3, d7
 801bc66:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bc6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bc6e:	f7e4 fb1b 	bl	80002a8 <__aeabi_dsub>
 801bc72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc76:	4606      	mov	r6, r0
 801bc78:	460f      	mov	r7, r1
 801bc7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bc7e:	f7e4 fb15 	bl	80002ac <__adddf3>
 801bc82:	4602      	mov	r2, r0
 801bc84:	460b      	mov	r3, r1
 801bc86:	2000      	movs	r0, #0
 801bc88:	49b9      	ldr	r1, [pc, #740]	; (801bf70 <__ieee754_pow+0x730>)
 801bc8a:	f7e4 fdef 	bl	800086c <__aeabi_ddiv>
 801bc8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bc92:	4602      	mov	r2, r0
 801bc94:	460b      	mov	r3, r1
 801bc96:	4630      	mov	r0, r6
 801bc98:	4639      	mov	r1, r7
 801bc9a:	f7e4 fcbd 	bl	8000618 <__aeabi_dmul>
 801bc9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bca2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bcaa:	2300      	movs	r3, #0
 801bcac:	9302      	str	r3, [sp, #8]
 801bcae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bcb2:	106d      	asrs	r5, r5, #1
 801bcb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bcb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bcbc:	2200      	movs	r2, #0
 801bcbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bcc2:	4640      	mov	r0, r8
 801bcc4:	4649      	mov	r1, r9
 801bcc6:	4614      	mov	r4, r2
 801bcc8:	461d      	mov	r5, r3
 801bcca:	f7e4 fca5 	bl	8000618 <__aeabi_dmul>
 801bcce:	4602      	mov	r2, r0
 801bcd0:	460b      	mov	r3, r1
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	4639      	mov	r1, r7
 801bcd6:	f7e4 fae7 	bl	80002a8 <__aeabi_dsub>
 801bcda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bcde:	4606      	mov	r6, r0
 801bce0:	460f      	mov	r7, r1
 801bce2:	4620      	mov	r0, r4
 801bce4:	4629      	mov	r1, r5
 801bce6:	f7e4 fadf 	bl	80002a8 <__aeabi_dsub>
 801bcea:	4602      	mov	r2, r0
 801bcec:	460b      	mov	r3, r1
 801bcee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bcf2:	f7e4 fad9 	bl	80002a8 <__aeabi_dsub>
 801bcf6:	4642      	mov	r2, r8
 801bcf8:	464b      	mov	r3, r9
 801bcfa:	f7e4 fc8d 	bl	8000618 <__aeabi_dmul>
 801bcfe:	4602      	mov	r2, r0
 801bd00:	460b      	mov	r3, r1
 801bd02:	4630      	mov	r0, r6
 801bd04:	4639      	mov	r1, r7
 801bd06:	f7e4 facf 	bl	80002a8 <__aeabi_dsub>
 801bd0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bd0e:	f7e4 fc83 	bl	8000618 <__aeabi_dmul>
 801bd12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bd1a:	4610      	mov	r0, r2
 801bd1c:	4619      	mov	r1, r3
 801bd1e:	f7e4 fc7b 	bl	8000618 <__aeabi_dmul>
 801bd22:	a37b      	add	r3, pc, #492	; (adr r3, 801bf10 <__ieee754_pow+0x6d0>)
 801bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd28:	4604      	mov	r4, r0
 801bd2a:	460d      	mov	r5, r1
 801bd2c:	f7e4 fc74 	bl	8000618 <__aeabi_dmul>
 801bd30:	a379      	add	r3, pc, #484	; (adr r3, 801bf18 <__ieee754_pow+0x6d8>)
 801bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd36:	f7e4 fab9 	bl	80002ac <__adddf3>
 801bd3a:	4622      	mov	r2, r4
 801bd3c:	462b      	mov	r3, r5
 801bd3e:	f7e4 fc6b 	bl	8000618 <__aeabi_dmul>
 801bd42:	a377      	add	r3, pc, #476	; (adr r3, 801bf20 <__ieee754_pow+0x6e0>)
 801bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd48:	f7e4 fab0 	bl	80002ac <__adddf3>
 801bd4c:	4622      	mov	r2, r4
 801bd4e:	462b      	mov	r3, r5
 801bd50:	f7e4 fc62 	bl	8000618 <__aeabi_dmul>
 801bd54:	a374      	add	r3, pc, #464	; (adr r3, 801bf28 <__ieee754_pow+0x6e8>)
 801bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd5a:	f7e4 faa7 	bl	80002ac <__adddf3>
 801bd5e:	4622      	mov	r2, r4
 801bd60:	462b      	mov	r3, r5
 801bd62:	f7e4 fc59 	bl	8000618 <__aeabi_dmul>
 801bd66:	a372      	add	r3, pc, #456	; (adr r3, 801bf30 <__ieee754_pow+0x6f0>)
 801bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd6c:	f7e4 fa9e 	bl	80002ac <__adddf3>
 801bd70:	4622      	mov	r2, r4
 801bd72:	462b      	mov	r3, r5
 801bd74:	f7e4 fc50 	bl	8000618 <__aeabi_dmul>
 801bd78:	a36f      	add	r3, pc, #444	; (adr r3, 801bf38 <__ieee754_pow+0x6f8>)
 801bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd7e:	f7e4 fa95 	bl	80002ac <__adddf3>
 801bd82:	4622      	mov	r2, r4
 801bd84:	4606      	mov	r6, r0
 801bd86:	460f      	mov	r7, r1
 801bd88:	462b      	mov	r3, r5
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	4629      	mov	r1, r5
 801bd8e:	f7e4 fc43 	bl	8000618 <__aeabi_dmul>
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	4630      	mov	r0, r6
 801bd98:	4639      	mov	r1, r7
 801bd9a:	f7e4 fc3d 	bl	8000618 <__aeabi_dmul>
 801bd9e:	4642      	mov	r2, r8
 801bda0:	4604      	mov	r4, r0
 801bda2:	460d      	mov	r5, r1
 801bda4:	464b      	mov	r3, r9
 801bda6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdaa:	f7e4 fa7f 	bl	80002ac <__adddf3>
 801bdae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bdb2:	f7e4 fc31 	bl	8000618 <__aeabi_dmul>
 801bdb6:	4622      	mov	r2, r4
 801bdb8:	462b      	mov	r3, r5
 801bdba:	f7e4 fa77 	bl	80002ac <__adddf3>
 801bdbe:	4642      	mov	r2, r8
 801bdc0:	4606      	mov	r6, r0
 801bdc2:	460f      	mov	r7, r1
 801bdc4:	464b      	mov	r3, r9
 801bdc6:	4640      	mov	r0, r8
 801bdc8:	4649      	mov	r1, r9
 801bdca:	f7e4 fc25 	bl	8000618 <__aeabi_dmul>
 801bdce:	2200      	movs	r2, #0
 801bdd0:	4b68      	ldr	r3, [pc, #416]	; (801bf74 <__ieee754_pow+0x734>)
 801bdd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bdd6:	f7e4 fa69 	bl	80002ac <__adddf3>
 801bdda:	4632      	mov	r2, r6
 801bddc:	463b      	mov	r3, r7
 801bdde:	f7e4 fa65 	bl	80002ac <__adddf3>
 801bde2:	9802      	ldr	r0, [sp, #8]
 801bde4:	460d      	mov	r5, r1
 801bde6:	4604      	mov	r4, r0
 801bde8:	4602      	mov	r2, r0
 801bdea:	460b      	mov	r3, r1
 801bdec:	4640      	mov	r0, r8
 801bdee:	4649      	mov	r1, r9
 801bdf0:	f7e4 fc12 	bl	8000618 <__aeabi_dmul>
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	4680      	mov	r8, r0
 801bdf8:	4689      	mov	r9, r1
 801bdfa:	4b5e      	ldr	r3, [pc, #376]	; (801bf74 <__ieee754_pow+0x734>)
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	4629      	mov	r1, r5
 801be00:	f7e4 fa52 	bl	80002a8 <__aeabi_dsub>
 801be04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be08:	f7e4 fa4e 	bl	80002a8 <__aeabi_dsub>
 801be0c:	4602      	mov	r2, r0
 801be0e:	460b      	mov	r3, r1
 801be10:	4630      	mov	r0, r6
 801be12:	4639      	mov	r1, r7
 801be14:	f7e4 fa48 	bl	80002a8 <__aeabi_dsub>
 801be18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be1c:	f7e4 fbfc 	bl	8000618 <__aeabi_dmul>
 801be20:	4622      	mov	r2, r4
 801be22:	4606      	mov	r6, r0
 801be24:	460f      	mov	r7, r1
 801be26:	462b      	mov	r3, r5
 801be28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be2c:	f7e4 fbf4 	bl	8000618 <__aeabi_dmul>
 801be30:	4602      	mov	r2, r0
 801be32:	460b      	mov	r3, r1
 801be34:	4630      	mov	r0, r6
 801be36:	4639      	mov	r1, r7
 801be38:	f7e4 fa38 	bl	80002ac <__adddf3>
 801be3c:	4606      	mov	r6, r0
 801be3e:	460f      	mov	r7, r1
 801be40:	4602      	mov	r2, r0
 801be42:	460b      	mov	r3, r1
 801be44:	4640      	mov	r0, r8
 801be46:	4649      	mov	r1, r9
 801be48:	f7e4 fa30 	bl	80002ac <__adddf3>
 801be4c:	9802      	ldr	r0, [sp, #8]
 801be4e:	a33c      	add	r3, pc, #240	; (adr r3, 801bf40 <__ieee754_pow+0x700>)
 801be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be54:	4604      	mov	r4, r0
 801be56:	460d      	mov	r5, r1
 801be58:	f7e4 fbde 	bl	8000618 <__aeabi_dmul>
 801be5c:	4642      	mov	r2, r8
 801be5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801be62:	464b      	mov	r3, r9
 801be64:	4620      	mov	r0, r4
 801be66:	4629      	mov	r1, r5
 801be68:	f7e4 fa1e 	bl	80002a8 <__aeabi_dsub>
 801be6c:	4602      	mov	r2, r0
 801be6e:	460b      	mov	r3, r1
 801be70:	4630      	mov	r0, r6
 801be72:	4639      	mov	r1, r7
 801be74:	f7e4 fa18 	bl	80002a8 <__aeabi_dsub>
 801be78:	a333      	add	r3, pc, #204	; (adr r3, 801bf48 <__ieee754_pow+0x708>)
 801be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be7e:	f7e4 fbcb 	bl	8000618 <__aeabi_dmul>
 801be82:	a333      	add	r3, pc, #204	; (adr r3, 801bf50 <__ieee754_pow+0x710>)
 801be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be88:	4606      	mov	r6, r0
 801be8a:	460f      	mov	r7, r1
 801be8c:	4620      	mov	r0, r4
 801be8e:	4629      	mov	r1, r5
 801be90:	f7e4 fbc2 	bl	8000618 <__aeabi_dmul>
 801be94:	4602      	mov	r2, r0
 801be96:	460b      	mov	r3, r1
 801be98:	4630      	mov	r0, r6
 801be9a:	4639      	mov	r1, r7
 801be9c:	f7e4 fa06 	bl	80002ac <__adddf3>
 801bea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bea2:	4b35      	ldr	r3, [pc, #212]	; (801bf78 <__ieee754_pow+0x738>)
 801bea4:	4413      	add	r3, r2
 801bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beaa:	f7e4 f9ff 	bl	80002ac <__adddf3>
 801beae:	4604      	mov	r4, r0
 801beb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801beb2:	460d      	mov	r5, r1
 801beb4:	f7e4 fb46 	bl	8000544 <__aeabi_i2d>
 801beb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801beba:	4b30      	ldr	r3, [pc, #192]	; (801bf7c <__ieee754_pow+0x73c>)
 801bebc:	4413      	add	r3, r2
 801bebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bec2:	4606      	mov	r6, r0
 801bec4:	460f      	mov	r7, r1
 801bec6:	4622      	mov	r2, r4
 801bec8:	462b      	mov	r3, r5
 801beca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bece:	f7e4 f9ed 	bl	80002ac <__adddf3>
 801bed2:	4642      	mov	r2, r8
 801bed4:	464b      	mov	r3, r9
 801bed6:	f7e4 f9e9 	bl	80002ac <__adddf3>
 801beda:	4632      	mov	r2, r6
 801bedc:	463b      	mov	r3, r7
 801bede:	f7e4 f9e5 	bl	80002ac <__adddf3>
 801bee2:	9802      	ldr	r0, [sp, #8]
 801bee4:	4632      	mov	r2, r6
 801bee6:	463b      	mov	r3, r7
 801bee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801beec:	f7e4 f9dc 	bl	80002a8 <__aeabi_dsub>
 801bef0:	4642      	mov	r2, r8
 801bef2:	464b      	mov	r3, r9
 801bef4:	f7e4 f9d8 	bl	80002a8 <__aeabi_dsub>
 801bef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801befc:	e607      	b.n	801bb0e <__ieee754_pow+0x2ce>
 801befe:	f04f 0a01 	mov.w	sl, #1
 801bf02:	e6a5      	b.n	801bc50 <__ieee754_pow+0x410>
 801bf04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bf58 <__ieee754_pow+0x718>
 801bf08:	e613      	b.n	801bb32 <__ieee754_pow+0x2f2>
 801bf0a:	bf00      	nop
 801bf0c:	f3af 8000 	nop.w
 801bf10:	4a454eef 	.word	0x4a454eef
 801bf14:	3fca7e28 	.word	0x3fca7e28
 801bf18:	93c9db65 	.word	0x93c9db65
 801bf1c:	3fcd864a 	.word	0x3fcd864a
 801bf20:	a91d4101 	.word	0xa91d4101
 801bf24:	3fd17460 	.word	0x3fd17460
 801bf28:	518f264d 	.word	0x518f264d
 801bf2c:	3fd55555 	.word	0x3fd55555
 801bf30:	db6fabff 	.word	0xdb6fabff
 801bf34:	3fdb6db6 	.word	0x3fdb6db6
 801bf38:	33333303 	.word	0x33333303
 801bf3c:	3fe33333 	.word	0x3fe33333
 801bf40:	e0000000 	.word	0xe0000000
 801bf44:	3feec709 	.word	0x3feec709
 801bf48:	dc3a03fd 	.word	0xdc3a03fd
 801bf4c:	3feec709 	.word	0x3feec709
 801bf50:	145b01f5 	.word	0x145b01f5
 801bf54:	be3e2fe0 	.word	0xbe3e2fe0
 801bf58:	00000000 	.word	0x00000000
 801bf5c:	3ff00000 	.word	0x3ff00000
 801bf60:	43400000 	.word	0x43400000
 801bf64:	0003988e 	.word	0x0003988e
 801bf68:	000bb679 	.word	0x000bb679
 801bf6c:	0801e738 	.word	0x0801e738
 801bf70:	3ff00000 	.word	0x3ff00000
 801bf74:	40080000 	.word	0x40080000
 801bf78:	0801e758 	.word	0x0801e758
 801bf7c:	0801e748 	.word	0x0801e748
 801bf80:	a3b4      	add	r3, pc, #720	; (adr r3, 801c254 <__ieee754_pow+0xa14>)
 801bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf86:	4640      	mov	r0, r8
 801bf88:	4649      	mov	r1, r9
 801bf8a:	f7e4 f98f 	bl	80002ac <__adddf3>
 801bf8e:	4622      	mov	r2, r4
 801bf90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf94:	462b      	mov	r3, r5
 801bf96:	4630      	mov	r0, r6
 801bf98:	4639      	mov	r1, r7
 801bf9a:	f7e4 f985 	bl	80002a8 <__aeabi_dsub>
 801bf9e:	4602      	mov	r2, r0
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bfa6:	f7e4 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	f47f adfe 	bne.w	801bbac <__ieee754_pow+0x36c>
 801bfb0:	4aa3      	ldr	r2, [pc, #652]	; (801c240 <__ieee754_pow+0xa00>)
 801bfb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bfb6:	4293      	cmp	r3, r2
 801bfb8:	f340 810a 	ble.w	801c1d0 <__ieee754_pow+0x990>
 801bfbc:	151b      	asrs	r3, r3, #20
 801bfbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bfc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bfc6:	fa4a f303 	asr.w	r3, sl, r3
 801bfca:	445b      	add	r3, fp
 801bfcc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bfd0:	4e9c      	ldr	r6, [pc, #624]	; (801c244 <__ieee754_pow+0xa04>)
 801bfd2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bfd6:	4116      	asrs	r6, r2
 801bfd8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bfdc:	2000      	movs	r0, #0
 801bfde:	ea23 0106 	bic.w	r1, r3, r6
 801bfe2:	f1c2 0214 	rsb	r2, r2, #20
 801bfe6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bfea:	fa4a fa02 	asr.w	sl, sl, r2
 801bfee:	f1bb 0f00 	cmp.w	fp, #0
 801bff2:	4602      	mov	r2, r0
 801bff4:	460b      	mov	r3, r1
 801bff6:	4620      	mov	r0, r4
 801bff8:	4629      	mov	r1, r5
 801bffa:	bfb8      	it	lt
 801bffc:	f1ca 0a00 	rsblt	sl, sl, #0
 801c000:	f7e4 f952 	bl	80002a8 <__aeabi_dsub>
 801c004:	e9cd 0100 	strd	r0, r1, [sp]
 801c008:	4642      	mov	r2, r8
 801c00a:	464b      	mov	r3, r9
 801c00c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c010:	f7e4 f94c 	bl	80002ac <__adddf3>
 801c014:	2000      	movs	r0, #0
 801c016:	a378      	add	r3, pc, #480	; (adr r3, 801c1f8 <__ieee754_pow+0x9b8>)
 801c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c01c:	4604      	mov	r4, r0
 801c01e:	460d      	mov	r5, r1
 801c020:	f7e4 fafa 	bl	8000618 <__aeabi_dmul>
 801c024:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c028:	4606      	mov	r6, r0
 801c02a:	460f      	mov	r7, r1
 801c02c:	4620      	mov	r0, r4
 801c02e:	4629      	mov	r1, r5
 801c030:	f7e4 f93a 	bl	80002a8 <__aeabi_dsub>
 801c034:	4602      	mov	r2, r0
 801c036:	460b      	mov	r3, r1
 801c038:	4640      	mov	r0, r8
 801c03a:	4649      	mov	r1, r9
 801c03c:	f7e4 f934 	bl	80002a8 <__aeabi_dsub>
 801c040:	a36f      	add	r3, pc, #444	; (adr r3, 801c200 <__ieee754_pow+0x9c0>)
 801c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c046:	f7e4 fae7 	bl	8000618 <__aeabi_dmul>
 801c04a:	a36f      	add	r3, pc, #444	; (adr r3, 801c208 <__ieee754_pow+0x9c8>)
 801c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c050:	4680      	mov	r8, r0
 801c052:	4689      	mov	r9, r1
 801c054:	4620      	mov	r0, r4
 801c056:	4629      	mov	r1, r5
 801c058:	f7e4 fade 	bl	8000618 <__aeabi_dmul>
 801c05c:	4602      	mov	r2, r0
 801c05e:	460b      	mov	r3, r1
 801c060:	4640      	mov	r0, r8
 801c062:	4649      	mov	r1, r9
 801c064:	f7e4 f922 	bl	80002ac <__adddf3>
 801c068:	4604      	mov	r4, r0
 801c06a:	460d      	mov	r5, r1
 801c06c:	4602      	mov	r2, r0
 801c06e:	460b      	mov	r3, r1
 801c070:	4630      	mov	r0, r6
 801c072:	4639      	mov	r1, r7
 801c074:	f7e4 f91a 	bl	80002ac <__adddf3>
 801c078:	4632      	mov	r2, r6
 801c07a:	463b      	mov	r3, r7
 801c07c:	4680      	mov	r8, r0
 801c07e:	4689      	mov	r9, r1
 801c080:	f7e4 f912 	bl	80002a8 <__aeabi_dsub>
 801c084:	4602      	mov	r2, r0
 801c086:	460b      	mov	r3, r1
 801c088:	4620      	mov	r0, r4
 801c08a:	4629      	mov	r1, r5
 801c08c:	f7e4 f90c 	bl	80002a8 <__aeabi_dsub>
 801c090:	4642      	mov	r2, r8
 801c092:	4606      	mov	r6, r0
 801c094:	460f      	mov	r7, r1
 801c096:	464b      	mov	r3, r9
 801c098:	4640      	mov	r0, r8
 801c09a:	4649      	mov	r1, r9
 801c09c:	f7e4 fabc 	bl	8000618 <__aeabi_dmul>
 801c0a0:	a35b      	add	r3, pc, #364	; (adr r3, 801c210 <__ieee754_pow+0x9d0>)
 801c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0a6:	4604      	mov	r4, r0
 801c0a8:	460d      	mov	r5, r1
 801c0aa:	f7e4 fab5 	bl	8000618 <__aeabi_dmul>
 801c0ae:	a35a      	add	r3, pc, #360	; (adr r3, 801c218 <__ieee754_pow+0x9d8>)
 801c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0b4:	f7e4 f8f8 	bl	80002a8 <__aeabi_dsub>
 801c0b8:	4622      	mov	r2, r4
 801c0ba:	462b      	mov	r3, r5
 801c0bc:	f7e4 faac 	bl	8000618 <__aeabi_dmul>
 801c0c0:	a357      	add	r3, pc, #348	; (adr r3, 801c220 <__ieee754_pow+0x9e0>)
 801c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c6:	f7e4 f8f1 	bl	80002ac <__adddf3>
 801c0ca:	4622      	mov	r2, r4
 801c0cc:	462b      	mov	r3, r5
 801c0ce:	f7e4 faa3 	bl	8000618 <__aeabi_dmul>
 801c0d2:	a355      	add	r3, pc, #340	; (adr r3, 801c228 <__ieee754_pow+0x9e8>)
 801c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d8:	f7e4 f8e6 	bl	80002a8 <__aeabi_dsub>
 801c0dc:	4622      	mov	r2, r4
 801c0de:	462b      	mov	r3, r5
 801c0e0:	f7e4 fa9a 	bl	8000618 <__aeabi_dmul>
 801c0e4:	a352      	add	r3, pc, #328	; (adr r3, 801c230 <__ieee754_pow+0x9f0>)
 801c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ea:	f7e4 f8df 	bl	80002ac <__adddf3>
 801c0ee:	4622      	mov	r2, r4
 801c0f0:	462b      	mov	r3, r5
 801c0f2:	f7e4 fa91 	bl	8000618 <__aeabi_dmul>
 801c0f6:	4602      	mov	r2, r0
 801c0f8:	460b      	mov	r3, r1
 801c0fa:	4640      	mov	r0, r8
 801c0fc:	4649      	mov	r1, r9
 801c0fe:	f7e4 f8d3 	bl	80002a8 <__aeabi_dsub>
 801c102:	4604      	mov	r4, r0
 801c104:	460d      	mov	r5, r1
 801c106:	4602      	mov	r2, r0
 801c108:	460b      	mov	r3, r1
 801c10a:	4640      	mov	r0, r8
 801c10c:	4649      	mov	r1, r9
 801c10e:	f7e4 fa83 	bl	8000618 <__aeabi_dmul>
 801c112:	2200      	movs	r2, #0
 801c114:	e9cd 0100 	strd	r0, r1, [sp]
 801c118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c11c:	4620      	mov	r0, r4
 801c11e:	4629      	mov	r1, r5
 801c120:	f7e4 f8c2 	bl	80002a8 <__aeabi_dsub>
 801c124:	4602      	mov	r2, r0
 801c126:	460b      	mov	r3, r1
 801c128:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c12c:	f7e4 fb9e 	bl	800086c <__aeabi_ddiv>
 801c130:	4632      	mov	r2, r6
 801c132:	4604      	mov	r4, r0
 801c134:	460d      	mov	r5, r1
 801c136:	463b      	mov	r3, r7
 801c138:	4640      	mov	r0, r8
 801c13a:	4649      	mov	r1, r9
 801c13c:	f7e4 fa6c 	bl	8000618 <__aeabi_dmul>
 801c140:	4632      	mov	r2, r6
 801c142:	463b      	mov	r3, r7
 801c144:	f7e4 f8b2 	bl	80002ac <__adddf3>
 801c148:	4602      	mov	r2, r0
 801c14a:	460b      	mov	r3, r1
 801c14c:	4620      	mov	r0, r4
 801c14e:	4629      	mov	r1, r5
 801c150:	f7e4 f8aa 	bl	80002a8 <__aeabi_dsub>
 801c154:	4642      	mov	r2, r8
 801c156:	464b      	mov	r3, r9
 801c158:	f7e4 f8a6 	bl	80002a8 <__aeabi_dsub>
 801c15c:	4602      	mov	r2, r0
 801c15e:	460b      	mov	r3, r1
 801c160:	2000      	movs	r0, #0
 801c162:	4939      	ldr	r1, [pc, #228]	; (801c248 <__ieee754_pow+0xa08>)
 801c164:	f7e4 f8a0 	bl	80002a8 <__aeabi_dsub>
 801c168:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c16c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c170:	4602      	mov	r2, r0
 801c172:	460b      	mov	r3, r1
 801c174:	da2f      	bge.n	801c1d6 <__ieee754_pow+0x996>
 801c176:	4650      	mov	r0, sl
 801c178:	ec43 2b10 	vmov	d0, r2, r3
 801c17c:	f001 faa4 	bl	801d6c8 <scalbn>
 801c180:	ec51 0b10 	vmov	r0, r1, d0
 801c184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c188:	f7ff bbf1 	b.w	801b96e <__ieee754_pow+0x12e>
 801c18c:	4b2f      	ldr	r3, [pc, #188]	; (801c24c <__ieee754_pow+0xa0c>)
 801c18e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c192:	429e      	cmp	r6, r3
 801c194:	f77f af0c 	ble.w	801bfb0 <__ieee754_pow+0x770>
 801c198:	4b2d      	ldr	r3, [pc, #180]	; (801c250 <__ieee754_pow+0xa10>)
 801c19a:	440b      	add	r3, r1
 801c19c:	4303      	orrs	r3, r0
 801c19e:	d00b      	beq.n	801c1b8 <__ieee754_pow+0x978>
 801c1a0:	a325      	add	r3, pc, #148	; (adr r3, 801c238 <__ieee754_pow+0x9f8>)
 801c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1aa:	f7e4 fa35 	bl	8000618 <__aeabi_dmul>
 801c1ae:	a322      	add	r3, pc, #136	; (adr r3, 801c238 <__ieee754_pow+0x9f8>)
 801c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b4:	f7ff bbdb 	b.w	801b96e <__ieee754_pow+0x12e>
 801c1b8:	4622      	mov	r2, r4
 801c1ba:	462b      	mov	r3, r5
 801c1bc:	f7e4 f874 	bl	80002a8 <__aeabi_dsub>
 801c1c0:	4642      	mov	r2, r8
 801c1c2:	464b      	mov	r3, r9
 801c1c4:	f7e4 fcae 	bl	8000b24 <__aeabi_dcmpge>
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	f43f aef1 	beq.w	801bfb0 <__ieee754_pow+0x770>
 801c1ce:	e7e7      	b.n	801c1a0 <__ieee754_pow+0x960>
 801c1d0:	f04f 0a00 	mov.w	sl, #0
 801c1d4:	e718      	b.n	801c008 <__ieee754_pow+0x7c8>
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	e7d4      	b.n	801c184 <__ieee754_pow+0x944>
 801c1da:	2000      	movs	r0, #0
 801c1dc:	491a      	ldr	r1, [pc, #104]	; (801c248 <__ieee754_pow+0xa08>)
 801c1de:	f7ff bb8f 	b.w	801b900 <__ieee754_pow+0xc0>
 801c1e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c1e6:	f7ff bb8b 	b.w	801b900 <__ieee754_pow+0xc0>
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	4639      	mov	r1, r7
 801c1ee:	f7ff bb87 	b.w	801b900 <__ieee754_pow+0xc0>
 801c1f2:	4693      	mov	fp, r2
 801c1f4:	f7ff bb98 	b.w	801b928 <__ieee754_pow+0xe8>
 801c1f8:	00000000 	.word	0x00000000
 801c1fc:	3fe62e43 	.word	0x3fe62e43
 801c200:	fefa39ef 	.word	0xfefa39ef
 801c204:	3fe62e42 	.word	0x3fe62e42
 801c208:	0ca86c39 	.word	0x0ca86c39
 801c20c:	be205c61 	.word	0xbe205c61
 801c210:	72bea4d0 	.word	0x72bea4d0
 801c214:	3e663769 	.word	0x3e663769
 801c218:	c5d26bf1 	.word	0xc5d26bf1
 801c21c:	3ebbbd41 	.word	0x3ebbbd41
 801c220:	af25de2c 	.word	0xaf25de2c
 801c224:	3f11566a 	.word	0x3f11566a
 801c228:	16bebd93 	.word	0x16bebd93
 801c22c:	3f66c16c 	.word	0x3f66c16c
 801c230:	5555553e 	.word	0x5555553e
 801c234:	3fc55555 	.word	0x3fc55555
 801c238:	c2f8f359 	.word	0xc2f8f359
 801c23c:	01a56e1f 	.word	0x01a56e1f
 801c240:	3fe00000 	.word	0x3fe00000
 801c244:	000fffff 	.word	0x000fffff
 801c248:	3ff00000 	.word	0x3ff00000
 801c24c:	4090cbff 	.word	0x4090cbff
 801c250:	3f6f3400 	.word	0x3f6f3400
 801c254:	652b82fe 	.word	0x652b82fe
 801c258:	3c971547 	.word	0x3c971547
 801c25c:	00000000 	.word	0x00000000

0801c260 <__ieee754_rem_pio2>:
 801c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c264:	ec57 6b10 	vmov	r6, r7, d0
 801c268:	4bc3      	ldr	r3, [pc, #780]	; (801c578 <__ieee754_rem_pio2+0x318>)
 801c26a:	b08d      	sub	sp, #52	; 0x34
 801c26c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801c270:	4598      	cmp	r8, r3
 801c272:	4604      	mov	r4, r0
 801c274:	9704      	str	r7, [sp, #16]
 801c276:	dc07      	bgt.n	801c288 <__ieee754_rem_pio2+0x28>
 801c278:	2200      	movs	r2, #0
 801c27a:	2300      	movs	r3, #0
 801c27c:	ed84 0b00 	vstr	d0, [r4]
 801c280:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c284:	2500      	movs	r5, #0
 801c286:	e027      	b.n	801c2d8 <__ieee754_rem_pio2+0x78>
 801c288:	4bbc      	ldr	r3, [pc, #752]	; (801c57c <__ieee754_rem_pio2+0x31c>)
 801c28a:	4598      	cmp	r8, r3
 801c28c:	dc75      	bgt.n	801c37a <__ieee754_rem_pio2+0x11a>
 801c28e:	9b04      	ldr	r3, [sp, #16]
 801c290:	4dbb      	ldr	r5, [pc, #748]	; (801c580 <__ieee754_rem_pio2+0x320>)
 801c292:	2b00      	cmp	r3, #0
 801c294:	ee10 0a10 	vmov	r0, s0
 801c298:	a3a9      	add	r3, pc, #676	; (adr r3, 801c540 <__ieee754_rem_pio2+0x2e0>)
 801c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c29e:	4639      	mov	r1, r7
 801c2a0:	dd36      	ble.n	801c310 <__ieee754_rem_pio2+0xb0>
 801c2a2:	f7e4 f801 	bl	80002a8 <__aeabi_dsub>
 801c2a6:	45a8      	cmp	r8, r5
 801c2a8:	4606      	mov	r6, r0
 801c2aa:	460f      	mov	r7, r1
 801c2ac:	d018      	beq.n	801c2e0 <__ieee754_rem_pio2+0x80>
 801c2ae:	a3a6      	add	r3, pc, #664	; (adr r3, 801c548 <__ieee754_rem_pio2+0x2e8>)
 801c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b4:	f7e3 fff8 	bl	80002a8 <__aeabi_dsub>
 801c2b8:	4602      	mov	r2, r0
 801c2ba:	460b      	mov	r3, r1
 801c2bc:	e9c4 2300 	strd	r2, r3, [r4]
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	4639      	mov	r1, r7
 801c2c4:	f7e3 fff0 	bl	80002a8 <__aeabi_dsub>
 801c2c8:	a39f      	add	r3, pc, #636	; (adr r3, 801c548 <__ieee754_rem_pio2+0x2e8>)
 801c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ce:	f7e3 ffeb 	bl	80002a8 <__aeabi_dsub>
 801c2d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c2d6:	2501      	movs	r5, #1
 801c2d8:	4628      	mov	r0, r5
 801c2da:	b00d      	add	sp, #52	; 0x34
 801c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2e0:	a39b      	add	r3, pc, #620	; (adr r3, 801c550 <__ieee754_rem_pio2+0x2f0>)
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	f7e3 ffdf 	bl	80002a8 <__aeabi_dsub>
 801c2ea:	a39b      	add	r3, pc, #620	; (adr r3, 801c558 <__ieee754_rem_pio2+0x2f8>)
 801c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f0:	4606      	mov	r6, r0
 801c2f2:	460f      	mov	r7, r1
 801c2f4:	f7e3 ffd8 	bl	80002a8 <__aeabi_dsub>
 801c2f8:	4602      	mov	r2, r0
 801c2fa:	460b      	mov	r3, r1
 801c2fc:	e9c4 2300 	strd	r2, r3, [r4]
 801c300:	4630      	mov	r0, r6
 801c302:	4639      	mov	r1, r7
 801c304:	f7e3 ffd0 	bl	80002a8 <__aeabi_dsub>
 801c308:	a393      	add	r3, pc, #588	; (adr r3, 801c558 <__ieee754_rem_pio2+0x2f8>)
 801c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30e:	e7de      	b.n	801c2ce <__ieee754_rem_pio2+0x6e>
 801c310:	f7e3 ffcc 	bl	80002ac <__adddf3>
 801c314:	45a8      	cmp	r8, r5
 801c316:	4606      	mov	r6, r0
 801c318:	460f      	mov	r7, r1
 801c31a:	d016      	beq.n	801c34a <__ieee754_rem_pio2+0xea>
 801c31c:	a38a      	add	r3, pc, #552	; (adr r3, 801c548 <__ieee754_rem_pio2+0x2e8>)
 801c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c322:	f7e3 ffc3 	bl	80002ac <__adddf3>
 801c326:	4602      	mov	r2, r0
 801c328:	460b      	mov	r3, r1
 801c32a:	e9c4 2300 	strd	r2, r3, [r4]
 801c32e:	4630      	mov	r0, r6
 801c330:	4639      	mov	r1, r7
 801c332:	f7e3 ffb9 	bl	80002a8 <__aeabi_dsub>
 801c336:	a384      	add	r3, pc, #528	; (adr r3, 801c548 <__ieee754_rem_pio2+0x2e8>)
 801c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33c:	f7e3 ffb6 	bl	80002ac <__adddf3>
 801c340:	f04f 35ff 	mov.w	r5, #4294967295
 801c344:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c348:	e7c6      	b.n	801c2d8 <__ieee754_rem_pio2+0x78>
 801c34a:	a381      	add	r3, pc, #516	; (adr r3, 801c550 <__ieee754_rem_pio2+0x2f0>)
 801c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c350:	f7e3 ffac 	bl	80002ac <__adddf3>
 801c354:	a380      	add	r3, pc, #512	; (adr r3, 801c558 <__ieee754_rem_pio2+0x2f8>)
 801c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c35a:	4606      	mov	r6, r0
 801c35c:	460f      	mov	r7, r1
 801c35e:	f7e3 ffa5 	bl	80002ac <__adddf3>
 801c362:	4602      	mov	r2, r0
 801c364:	460b      	mov	r3, r1
 801c366:	e9c4 2300 	strd	r2, r3, [r4]
 801c36a:	4630      	mov	r0, r6
 801c36c:	4639      	mov	r1, r7
 801c36e:	f7e3 ff9b 	bl	80002a8 <__aeabi_dsub>
 801c372:	a379      	add	r3, pc, #484	; (adr r3, 801c558 <__ieee754_rem_pio2+0x2f8>)
 801c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c378:	e7e0      	b.n	801c33c <__ieee754_rem_pio2+0xdc>
 801c37a:	4b82      	ldr	r3, [pc, #520]	; (801c584 <__ieee754_rem_pio2+0x324>)
 801c37c:	4598      	cmp	r8, r3
 801c37e:	f300 80d0 	bgt.w	801c522 <__ieee754_rem_pio2+0x2c2>
 801c382:	f001 f879 	bl	801d478 <fabs>
 801c386:	ec57 6b10 	vmov	r6, r7, d0
 801c38a:	ee10 0a10 	vmov	r0, s0
 801c38e:	a374      	add	r3, pc, #464	; (adr r3, 801c560 <__ieee754_rem_pio2+0x300>)
 801c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c394:	4639      	mov	r1, r7
 801c396:	f7e4 f93f 	bl	8000618 <__aeabi_dmul>
 801c39a:	2200      	movs	r2, #0
 801c39c:	4b7a      	ldr	r3, [pc, #488]	; (801c588 <__ieee754_rem_pio2+0x328>)
 801c39e:	f7e3 ff85 	bl	80002ac <__adddf3>
 801c3a2:	f7e4 fbe9 	bl	8000b78 <__aeabi_d2iz>
 801c3a6:	4605      	mov	r5, r0
 801c3a8:	f7e4 f8cc 	bl	8000544 <__aeabi_i2d>
 801c3ac:	a364      	add	r3, pc, #400	; (adr r3, 801c540 <__ieee754_rem_pio2+0x2e0>)
 801c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c3b6:	f7e4 f92f 	bl	8000618 <__aeabi_dmul>
 801c3ba:	4602      	mov	r2, r0
 801c3bc:	460b      	mov	r3, r1
 801c3be:	4630      	mov	r0, r6
 801c3c0:	4639      	mov	r1, r7
 801c3c2:	f7e3 ff71 	bl	80002a8 <__aeabi_dsub>
 801c3c6:	a360      	add	r3, pc, #384	; (adr r3, 801c548 <__ieee754_rem_pio2+0x2e8>)
 801c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3cc:	4682      	mov	sl, r0
 801c3ce:	468b      	mov	fp, r1
 801c3d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3d4:	f7e4 f920 	bl	8000618 <__aeabi_dmul>
 801c3d8:	2d1f      	cmp	r5, #31
 801c3da:	4606      	mov	r6, r0
 801c3dc:	460f      	mov	r7, r1
 801c3de:	dc0c      	bgt.n	801c3fa <__ieee754_rem_pio2+0x19a>
 801c3e0:	1e6a      	subs	r2, r5, #1
 801c3e2:	4b6a      	ldr	r3, [pc, #424]	; (801c58c <__ieee754_rem_pio2+0x32c>)
 801c3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3e8:	4543      	cmp	r3, r8
 801c3ea:	d006      	beq.n	801c3fa <__ieee754_rem_pio2+0x19a>
 801c3ec:	4632      	mov	r2, r6
 801c3ee:	463b      	mov	r3, r7
 801c3f0:	4650      	mov	r0, sl
 801c3f2:	4659      	mov	r1, fp
 801c3f4:	f7e3 ff58 	bl	80002a8 <__aeabi_dsub>
 801c3f8:	e00e      	b.n	801c418 <__ieee754_rem_pio2+0x1b8>
 801c3fa:	4632      	mov	r2, r6
 801c3fc:	463b      	mov	r3, r7
 801c3fe:	4650      	mov	r0, sl
 801c400:	4659      	mov	r1, fp
 801c402:	f7e3 ff51 	bl	80002a8 <__aeabi_dsub>
 801c406:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c40a:	9305      	str	r3, [sp, #20]
 801c40c:	9a05      	ldr	r2, [sp, #20]
 801c40e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	2b10      	cmp	r3, #16
 801c416:	dc02      	bgt.n	801c41e <__ieee754_rem_pio2+0x1be>
 801c418:	e9c4 0100 	strd	r0, r1, [r4]
 801c41c:	e039      	b.n	801c492 <__ieee754_rem_pio2+0x232>
 801c41e:	a34c      	add	r3, pc, #304	; (adr r3, 801c550 <__ieee754_rem_pio2+0x2f0>)
 801c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c428:	f7e4 f8f6 	bl	8000618 <__aeabi_dmul>
 801c42c:	4606      	mov	r6, r0
 801c42e:	460f      	mov	r7, r1
 801c430:	4602      	mov	r2, r0
 801c432:	460b      	mov	r3, r1
 801c434:	4650      	mov	r0, sl
 801c436:	4659      	mov	r1, fp
 801c438:	f7e3 ff36 	bl	80002a8 <__aeabi_dsub>
 801c43c:	4602      	mov	r2, r0
 801c43e:	460b      	mov	r3, r1
 801c440:	4680      	mov	r8, r0
 801c442:	4689      	mov	r9, r1
 801c444:	4650      	mov	r0, sl
 801c446:	4659      	mov	r1, fp
 801c448:	f7e3 ff2e 	bl	80002a8 <__aeabi_dsub>
 801c44c:	4632      	mov	r2, r6
 801c44e:	463b      	mov	r3, r7
 801c450:	f7e3 ff2a 	bl	80002a8 <__aeabi_dsub>
 801c454:	a340      	add	r3, pc, #256	; (adr r3, 801c558 <__ieee754_rem_pio2+0x2f8>)
 801c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45a:	4606      	mov	r6, r0
 801c45c:	460f      	mov	r7, r1
 801c45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c462:	f7e4 f8d9 	bl	8000618 <__aeabi_dmul>
 801c466:	4632      	mov	r2, r6
 801c468:	463b      	mov	r3, r7
 801c46a:	f7e3 ff1d 	bl	80002a8 <__aeabi_dsub>
 801c46e:	4602      	mov	r2, r0
 801c470:	460b      	mov	r3, r1
 801c472:	4606      	mov	r6, r0
 801c474:	460f      	mov	r7, r1
 801c476:	4640      	mov	r0, r8
 801c478:	4649      	mov	r1, r9
 801c47a:	f7e3 ff15 	bl	80002a8 <__aeabi_dsub>
 801c47e:	9a05      	ldr	r2, [sp, #20]
 801c480:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c484:	1ad3      	subs	r3, r2, r3
 801c486:	2b31      	cmp	r3, #49	; 0x31
 801c488:	dc20      	bgt.n	801c4cc <__ieee754_rem_pio2+0x26c>
 801c48a:	e9c4 0100 	strd	r0, r1, [r4]
 801c48e:	46c2      	mov	sl, r8
 801c490:	46cb      	mov	fp, r9
 801c492:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c496:	4650      	mov	r0, sl
 801c498:	4642      	mov	r2, r8
 801c49a:	464b      	mov	r3, r9
 801c49c:	4659      	mov	r1, fp
 801c49e:	f7e3 ff03 	bl	80002a8 <__aeabi_dsub>
 801c4a2:	463b      	mov	r3, r7
 801c4a4:	4632      	mov	r2, r6
 801c4a6:	f7e3 feff 	bl	80002a8 <__aeabi_dsub>
 801c4aa:	9b04      	ldr	r3, [sp, #16]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c4b2:	f6bf af11 	bge.w	801c2d8 <__ieee754_rem_pio2+0x78>
 801c4b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c4ba:	6063      	str	r3, [r4, #4]
 801c4bc:	f8c4 8000 	str.w	r8, [r4]
 801c4c0:	60a0      	str	r0, [r4, #8]
 801c4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c4c6:	60e3      	str	r3, [r4, #12]
 801c4c8:	426d      	negs	r5, r5
 801c4ca:	e705      	b.n	801c2d8 <__ieee754_rem_pio2+0x78>
 801c4cc:	a326      	add	r3, pc, #152	; (adr r3, 801c568 <__ieee754_rem_pio2+0x308>)
 801c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c4d6:	f7e4 f89f 	bl	8000618 <__aeabi_dmul>
 801c4da:	4606      	mov	r6, r0
 801c4dc:	460f      	mov	r7, r1
 801c4de:	4602      	mov	r2, r0
 801c4e0:	460b      	mov	r3, r1
 801c4e2:	4640      	mov	r0, r8
 801c4e4:	4649      	mov	r1, r9
 801c4e6:	f7e3 fedf 	bl	80002a8 <__aeabi_dsub>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	4682      	mov	sl, r0
 801c4f0:	468b      	mov	fp, r1
 801c4f2:	4640      	mov	r0, r8
 801c4f4:	4649      	mov	r1, r9
 801c4f6:	f7e3 fed7 	bl	80002a8 <__aeabi_dsub>
 801c4fa:	4632      	mov	r2, r6
 801c4fc:	463b      	mov	r3, r7
 801c4fe:	f7e3 fed3 	bl	80002a8 <__aeabi_dsub>
 801c502:	a31b      	add	r3, pc, #108	; (adr r3, 801c570 <__ieee754_rem_pio2+0x310>)
 801c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c508:	4606      	mov	r6, r0
 801c50a:	460f      	mov	r7, r1
 801c50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c510:	f7e4 f882 	bl	8000618 <__aeabi_dmul>
 801c514:	4632      	mov	r2, r6
 801c516:	463b      	mov	r3, r7
 801c518:	f7e3 fec6 	bl	80002a8 <__aeabi_dsub>
 801c51c:	4606      	mov	r6, r0
 801c51e:	460f      	mov	r7, r1
 801c520:	e764      	b.n	801c3ec <__ieee754_rem_pio2+0x18c>
 801c522:	4b1b      	ldr	r3, [pc, #108]	; (801c590 <__ieee754_rem_pio2+0x330>)
 801c524:	4598      	cmp	r8, r3
 801c526:	dd35      	ble.n	801c594 <__ieee754_rem_pio2+0x334>
 801c528:	ee10 2a10 	vmov	r2, s0
 801c52c:	463b      	mov	r3, r7
 801c52e:	4630      	mov	r0, r6
 801c530:	4639      	mov	r1, r7
 801c532:	f7e3 feb9 	bl	80002a8 <__aeabi_dsub>
 801c536:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c53a:	e9c4 0100 	strd	r0, r1, [r4]
 801c53e:	e6a1      	b.n	801c284 <__ieee754_rem_pio2+0x24>
 801c540:	54400000 	.word	0x54400000
 801c544:	3ff921fb 	.word	0x3ff921fb
 801c548:	1a626331 	.word	0x1a626331
 801c54c:	3dd0b461 	.word	0x3dd0b461
 801c550:	1a600000 	.word	0x1a600000
 801c554:	3dd0b461 	.word	0x3dd0b461
 801c558:	2e037073 	.word	0x2e037073
 801c55c:	3ba3198a 	.word	0x3ba3198a
 801c560:	6dc9c883 	.word	0x6dc9c883
 801c564:	3fe45f30 	.word	0x3fe45f30
 801c568:	2e000000 	.word	0x2e000000
 801c56c:	3ba3198a 	.word	0x3ba3198a
 801c570:	252049c1 	.word	0x252049c1
 801c574:	397b839a 	.word	0x397b839a
 801c578:	3fe921fb 	.word	0x3fe921fb
 801c57c:	4002d97b 	.word	0x4002d97b
 801c580:	3ff921fb 	.word	0x3ff921fb
 801c584:	413921fb 	.word	0x413921fb
 801c588:	3fe00000 	.word	0x3fe00000
 801c58c:	0801e768 	.word	0x0801e768
 801c590:	7fefffff 	.word	0x7fefffff
 801c594:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c598:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801c59c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	460f      	mov	r7, r1
 801c5a4:	f7e4 fae8 	bl	8000b78 <__aeabi_d2iz>
 801c5a8:	f7e3 ffcc 	bl	8000544 <__aeabi_i2d>
 801c5ac:	4602      	mov	r2, r0
 801c5ae:	460b      	mov	r3, r1
 801c5b0:	4630      	mov	r0, r6
 801c5b2:	4639      	mov	r1, r7
 801c5b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c5b8:	f7e3 fe76 	bl	80002a8 <__aeabi_dsub>
 801c5bc:	2200      	movs	r2, #0
 801c5be:	4b1f      	ldr	r3, [pc, #124]	; (801c63c <__ieee754_rem_pio2+0x3dc>)
 801c5c0:	f7e4 f82a 	bl	8000618 <__aeabi_dmul>
 801c5c4:	460f      	mov	r7, r1
 801c5c6:	4606      	mov	r6, r0
 801c5c8:	f7e4 fad6 	bl	8000b78 <__aeabi_d2iz>
 801c5cc:	f7e3 ffba 	bl	8000544 <__aeabi_i2d>
 801c5d0:	4602      	mov	r2, r0
 801c5d2:	460b      	mov	r3, r1
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	4639      	mov	r1, r7
 801c5d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c5dc:	f7e3 fe64 	bl	80002a8 <__aeabi_dsub>
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	4b16      	ldr	r3, [pc, #88]	; (801c63c <__ieee754_rem_pio2+0x3dc>)
 801c5e4:	f7e4 f818 	bl	8000618 <__aeabi_dmul>
 801c5e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c5ec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801c5f0:	f04f 0803 	mov.w	r8, #3
 801c5f4:	2600      	movs	r6, #0
 801c5f6:	2700      	movs	r7, #0
 801c5f8:	4632      	mov	r2, r6
 801c5fa:	463b      	mov	r3, r7
 801c5fc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c600:	f108 3aff 	add.w	sl, r8, #4294967295
 801c604:	f7e4 fa70 	bl	8000ae8 <__aeabi_dcmpeq>
 801c608:	b9b0      	cbnz	r0, 801c638 <__ieee754_rem_pio2+0x3d8>
 801c60a:	4b0d      	ldr	r3, [pc, #52]	; (801c640 <__ieee754_rem_pio2+0x3e0>)
 801c60c:	9301      	str	r3, [sp, #4]
 801c60e:	2302      	movs	r3, #2
 801c610:	9300      	str	r3, [sp, #0]
 801c612:	462a      	mov	r2, r5
 801c614:	4643      	mov	r3, r8
 801c616:	4621      	mov	r1, r4
 801c618:	a806      	add	r0, sp, #24
 801c61a:	f000 f991 	bl	801c940 <__kernel_rem_pio2>
 801c61e:	9b04      	ldr	r3, [sp, #16]
 801c620:	2b00      	cmp	r3, #0
 801c622:	4605      	mov	r5, r0
 801c624:	f6bf ae58 	bge.w	801c2d8 <__ieee754_rem_pio2+0x78>
 801c628:	6863      	ldr	r3, [r4, #4]
 801c62a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c62e:	6063      	str	r3, [r4, #4]
 801c630:	68e3      	ldr	r3, [r4, #12]
 801c632:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c636:	e746      	b.n	801c4c6 <__ieee754_rem_pio2+0x266>
 801c638:	46d0      	mov	r8, sl
 801c63a:	e7dd      	b.n	801c5f8 <__ieee754_rem_pio2+0x398>
 801c63c:	41700000 	.word	0x41700000
 801c640:	0801e7e8 	.word	0x0801e7e8

0801c644 <__ieee754_sqrt>:
 801c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c648:	4955      	ldr	r1, [pc, #340]	; (801c7a0 <__ieee754_sqrt+0x15c>)
 801c64a:	ec55 4b10 	vmov	r4, r5, d0
 801c64e:	43a9      	bics	r1, r5
 801c650:	462b      	mov	r3, r5
 801c652:	462a      	mov	r2, r5
 801c654:	d112      	bne.n	801c67c <__ieee754_sqrt+0x38>
 801c656:	ee10 2a10 	vmov	r2, s0
 801c65a:	ee10 0a10 	vmov	r0, s0
 801c65e:	4629      	mov	r1, r5
 801c660:	f7e3 ffda 	bl	8000618 <__aeabi_dmul>
 801c664:	4602      	mov	r2, r0
 801c666:	460b      	mov	r3, r1
 801c668:	4620      	mov	r0, r4
 801c66a:	4629      	mov	r1, r5
 801c66c:	f7e3 fe1e 	bl	80002ac <__adddf3>
 801c670:	4604      	mov	r4, r0
 801c672:	460d      	mov	r5, r1
 801c674:	ec45 4b10 	vmov	d0, r4, r5
 801c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c67c:	2d00      	cmp	r5, #0
 801c67e:	ee10 0a10 	vmov	r0, s0
 801c682:	4621      	mov	r1, r4
 801c684:	dc0f      	bgt.n	801c6a6 <__ieee754_sqrt+0x62>
 801c686:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c68a:	4330      	orrs	r0, r6
 801c68c:	d0f2      	beq.n	801c674 <__ieee754_sqrt+0x30>
 801c68e:	b155      	cbz	r5, 801c6a6 <__ieee754_sqrt+0x62>
 801c690:	ee10 2a10 	vmov	r2, s0
 801c694:	4620      	mov	r0, r4
 801c696:	4629      	mov	r1, r5
 801c698:	f7e3 fe06 	bl	80002a8 <__aeabi_dsub>
 801c69c:	4602      	mov	r2, r0
 801c69e:	460b      	mov	r3, r1
 801c6a0:	f7e4 f8e4 	bl	800086c <__aeabi_ddiv>
 801c6a4:	e7e4      	b.n	801c670 <__ieee754_sqrt+0x2c>
 801c6a6:	151b      	asrs	r3, r3, #20
 801c6a8:	d073      	beq.n	801c792 <__ieee754_sqrt+0x14e>
 801c6aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c6ae:	07dd      	lsls	r5, r3, #31
 801c6b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c6b4:	bf48      	it	mi
 801c6b6:	0fc8      	lsrmi	r0, r1, #31
 801c6b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c6bc:	bf44      	itt	mi
 801c6be:	0049      	lslmi	r1, r1, #1
 801c6c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c6c4:	2500      	movs	r5, #0
 801c6c6:	1058      	asrs	r0, r3, #1
 801c6c8:	0fcb      	lsrs	r3, r1, #31
 801c6ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c6ce:	0049      	lsls	r1, r1, #1
 801c6d0:	2316      	movs	r3, #22
 801c6d2:	462c      	mov	r4, r5
 801c6d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c6d8:	19a7      	adds	r7, r4, r6
 801c6da:	4297      	cmp	r7, r2
 801c6dc:	bfde      	ittt	le
 801c6de:	19bc      	addle	r4, r7, r6
 801c6e0:	1bd2      	suble	r2, r2, r7
 801c6e2:	19ad      	addle	r5, r5, r6
 801c6e4:	0fcf      	lsrs	r7, r1, #31
 801c6e6:	3b01      	subs	r3, #1
 801c6e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c6ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c6f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c6f4:	d1f0      	bne.n	801c6d8 <__ieee754_sqrt+0x94>
 801c6f6:	f04f 0c20 	mov.w	ip, #32
 801c6fa:	469e      	mov	lr, r3
 801c6fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c700:	42a2      	cmp	r2, r4
 801c702:	eb06 070e 	add.w	r7, r6, lr
 801c706:	dc02      	bgt.n	801c70e <__ieee754_sqrt+0xca>
 801c708:	d112      	bne.n	801c730 <__ieee754_sqrt+0xec>
 801c70a:	428f      	cmp	r7, r1
 801c70c:	d810      	bhi.n	801c730 <__ieee754_sqrt+0xec>
 801c70e:	2f00      	cmp	r7, #0
 801c710:	eb07 0e06 	add.w	lr, r7, r6
 801c714:	da42      	bge.n	801c79c <__ieee754_sqrt+0x158>
 801c716:	f1be 0f00 	cmp.w	lr, #0
 801c71a:	db3f      	blt.n	801c79c <__ieee754_sqrt+0x158>
 801c71c:	f104 0801 	add.w	r8, r4, #1
 801c720:	1b12      	subs	r2, r2, r4
 801c722:	428f      	cmp	r7, r1
 801c724:	bf88      	it	hi
 801c726:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c72a:	1bc9      	subs	r1, r1, r7
 801c72c:	4433      	add	r3, r6
 801c72e:	4644      	mov	r4, r8
 801c730:	0052      	lsls	r2, r2, #1
 801c732:	f1bc 0c01 	subs.w	ip, ip, #1
 801c736:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c73a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c73e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c742:	d1dd      	bne.n	801c700 <__ieee754_sqrt+0xbc>
 801c744:	430a      	orrs	r2, r1
 801c746:	d006      	beq.n	801c756 <__ieee754_sqrt+0x112>
 801c748:	1c5c      	adds	r4, r3, #1
 801c74a:	bf13      	iteet	ne
 801c74c:	3301      	addne	r3, #1
 801c74e:	3501      	addeq	r5, #1
 801c750:	4663      	moveq	r3, ip
 801c752:	f023 0301 	bicne.w	r3, r3, #1
 801c756:	106a      	asrs	r2, r5, #1
 801c758:	085b      	lsrs	r3, r3, #1
 801c75a:	07e9      	lsls	r1, r5, #31
 801c75c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c760:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c764:	bf48      	it	mi
 801c766:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c76a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c76e:	461c      	mov	r4, r3
 801c770:	e780      	b.n	801c674 <__ieee754_sqrt+0x30>
 801c772:	0aca      	lsrs	r2, r1, #11
 801c774:	3815      	subs	r0, #21
 801c776:	0549      	lsls	r1, r1, #21
 801c778:	2a00      	cmp	r2, #0
 801c77a:	d0fa      	beq.n	801c772 <__ieee754_sqrt+0x12e>
 801c77c:	02d6      	lsls	r6, r2, #11
 801c77e:	d50a      	bpl.n	801c796 <__ieee754_sqrt+0x152>
 801c780:	f1c3 0420 	rsb	r4, r3, #32
 801c784:	fa21 f404 	lsr.w	r4, r1, r4
 801c788:	1e5d      	subs	r5, r3, #1
 801c78a:	4099      	lsls	r1, r3
 801c78c:	4322      	orrs	r2, r4
 801c78e:	1b43      	subs	r3, r0, r5
 801c790:	e78b      	b.n	801c6aa <__ieee754_sqrt+0x66>
 801c792:	4618      	mov	r0, r3
 801c794:	e7f0      	b.n	801c778 <__ieee754_sqrt+0x134>
 801c796:	0052      	lsls	r2, r2, #1
 801c798:	3301      	adds	r3, #1
 801c79a:	e7ef      	b.n	801c77c <__ieee754_sqrt+0x138>
 801c79c:	46a0      	mov	r8, r4
 801c79e:	e7bf      	b.n	801c720 <__ieee754_sqrt+0xdc>
 801c7a0:	7ff00000 	.word	0x7ff00000

0801c7a4 <__ieee754_sqrtf>:
 801c7a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c7a8:	4770      	bx	lr
 801c7aa:	0000      	movs	r0, r0
 801c7ac:	0000      	movs	r0, r0
	...

0801c7b0 <__kernel_cos>:
 801c7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b4:	ec59 8b10 	vmov	r8, r9, d0
 801c7b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801c7bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801c7c0:	ed2d 8b02 	vpush	{d8}
 801c7c4:	eeb0 8a41 	vmov.f32	s16, s2
 801c7c8:	eef0 8a61 	vmov.f32	s17, s3
 801c7cc:	da07      	bge.n	801c7de <__kernel_cos+0x2e>
 801c7ce:	ee10 0a10 	vmov	r0, s0
 801c7d2:	4649      	mov	r1, r9
 801c7d4:	f7e4 f9d0 	bl	8000b78 <__aeabi_d2iz>
 801c7d8:	2800      	cmp	r0, #0
 801c7da:	f000 8089 	beq.w	801c8f0 <__kernel_cos+0x140>
 801c7de:	4642      	mov	r2, r8
 801c7e0:	464b      	mov	r3, r9
 801c7e2:	4640      	mov	r0, r8
 801c7e4:	4649      	mov	r1, r9
 801c7e6:	f7e3 ff17 	bl	8000618 <__aeabi_dmul>
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	4b4e      	ldr	r3, [pc, #312]	; (801c928 <__kernel_cos+0x178>)
 801c7ee:	4604      	mov	r4, r0
 801c7f0:	460d      	mov	r5, r1
 801c7f2:	f7e3 ff11 	bl	8000618 <__aeabi_dmul>
 801c7f6:	a340      	add	r3, pc, #256	; (adr r3, 801c8f8 <__kernel_cos+0x148>)
 801c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7fc:	4682      	mov	sl, r0
 801c7fe:	468b      	mov	fp, r1
 801c800:	4620      	mov	r0, r4
 801c802:	4629      	mov	r1, r5
 801c804:	f7e3 ff08 	bl	8000618 <__aeabi_dmul>
 801c808:	a33d      	add	r3, pc, #244	; (adr r3, 801c900 <__kernel_cos+0x150>)
 801c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80e:	f7e3 fd4d 	bl	80002ac <__adddf3>
 801c812:	4622      	mov	r2, r4
 801c814:	462b      	mov	r3, r5
 801c816:	f7e3 feff 	bl	8000618 <__aeabi_dmul>
 801c81a:	a33b      	add	r3, pc, #236	; (adr r3, 801c908 <__kernel_cos+0x158>)
 801c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c820:	f7e3 fd42 	bl	80002a8 <__aeabi_dsub>
 801c824:	4622      	mov	r2, r4
 801c826:	462b      	mov	r3, r5
 801c828:	f7e3 fef6 	bl	8000618 <__aeabi_dmul>
 801c82c:	a338      	add	r3, pc, #224	; (adr r3, 801c910 <__kernel_cos+0x160>)
 801c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c832:	f7e3 fd3b 	bl	80002ac <__adddf3>
 801c836:	4622      	mov	r2, r4
 801c838:	462b      	mov	r3, r5
 801c83a:	f7e3 feed 	bl	8000618 <__aeabi_dmul>
 801c83e:	a336      	add	r3, pc, #216	; (adr r3, 801c918 <__kernel_cos+0x168>)
 801c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c844:	f7e3 fd30 	bl	80002a8 <__aeabi_dsub>
 801c848:	4622      	mov	r2, r4
 801c84a:	462b      	mov	r3, r5
 801c84c:	f7e3 fee4 	bl	8000618 <__aeabi_dmul>
 801c850:	a333      	add	r3, pc, #204	; (adr r3, 801c920 <__kernel_cos+0x170>)
 801c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c856:	f7e3 fd29 	bl	80002ac <__adddf3>
 801c85a:	4622      	mov	r2, r4
 801c85c:	462b      	mov	r3, r5
 801c85e:	f7e3 fedb 	bl	8000618 <__aeabi_dmul>
 801c862:	4622      	mov	r2, r4
 801c864:	462b      	mov	r3, r5
 801c866:	f7e3 fed7 	bl	8000618 <__aeabi_dmul>
 801c86a:	ec53 2b18 	vmov	r2, r3, d8
 801c86e:	4604      	mov	r4, r0
 801c870:	460d      	mov	r5, r1
 801c872:	4640      	mov	r0, r8
 801c874:	4649      	mov	r1, r9
 801c876:	f7e3 fecf 	bl	8000618 <__aeabi_dmul>
 801c87a:	460b      	mov	r3, r1
 801c87c:	4602      	mov	r2, r0
 801c87e:	4629      	mov	r1, r5
 801c880:	4620      	mov	r0, r4
 801c882:	f7e3 fd11 	bl	80002a8 <__aeabi_dsub>
 801c886:	4b29      	ldr	r3, [pc, #164]	; (801c92c <__kernel_cos+0x17c>)
 801c888:	429e      	cmp	r6, r3
 801c88a:	4680      	mov	r8, r0
 801c88c:	4689      	mov	r9, r1
 801c88e:	dc11      	bgt.n	801c8b4 <__kernel_cos+0x104>
 801c890:	4602      	mov	r2, r0
 801c892:	460b      	mov	r3, r1
 801c894:	4650      	mov	r0, sl
 801c896:	4659      	mov	r1, fp
 801c898:	f7e3 fd06 	bl	80002a8 <__aeabi_dsub>
 801c89c:	460b      	mov	r3, r1
 801c89e:	4924      	ldr	r1, [pc, #144]	; (801c930 <__kernel_cos+0x180>)
 801c8a0:	4602      	mov	r2, r0
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	f7e3 fd00 	bl	80002a8 <__aeabi_dsub>
 801c8a8:	ecbd 8b02 	vpop	{d8}
 801c8ac:	ec41 0b10 	vmov	d0, r0, r1
 801c8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8b4:	4b1f      	ldr	r3, [pc, #124]	; (801c934 <__kernel_cos+0x184>)
 801c8b6:	491e      	ldr	r1, [pc, #120]	; (801c930 <__kernel_cos+0x180>)
 801c8b8:	429e      	cmp	r6, r3
 801c8ba:	bfcc      	ite	gt
 801c8bc:	4d1e      	ldrgt	r5, [pc, #120]	; (801c938 <__kernel_cos+0x188>)
 801c8be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801c8c2:	2400      	movs	r4, #0
 801c8c4:	4622      	mov	r2, r4
 801c8c6:	462b      	mov	r3, r5
 801c8c8:	2000      	movs	r0, #0
 801c8ca:	f7e3 fced 	bl	80002a8 <__aeabi_dsub>
 801c8ce:	4622      	mov	r2, r4
 801c8d0:	4606      	mov	r6, r0
 801c8d2:	460f      	mov	r7, r1
 801c8d4:	462b      	mov	r3, r5
 801c8d6:	4650      	mov	r0, sl
 801c8d8:	4659      	mov	r1, fp
 801c8da:	f7e3 fce5 	bl	80002a8 <__aeabi_dsub>
 801c8de:	4642      	mov	r2, r8
 801c8e0:	464b      	mov	r3, r9
 801c8e2:	f7e3 fce1 	bl	80002a8 <__aeabi_dsub>
 801c8e6:	4602      	mov	r2, r0
 801c8e8:	460b      	mov	r3, r1
 801c8ea:	4630      	mov	r0, r6
 801c8ec:	4639      	mov	r1, r7
 801c8ee:	e7d9      	b.n	801c8a4 <__kernel_cos+0xf4>
 801c8f0:	2000      	movs	r0, #0
 801c8f2:	490f      	ldr	r1, [pc, #60]	; (801c930 <__kernel_cos+0x180>)
 801c8f4:	e7d8      	b.n	801c8a8 <__kernel_cos+0xf8>
 801c8f6:	bf00      	nop
 801c8f8:	be8838d4 	.word	0xbe8838d4
 801c8fc:	bda8fae9 	.word	0xbda8fae9
 801c900:	bdb4b1c4 	.word	0xbdb4b1c4
 801c904:	3e21ee9e 	.word	0x3e21ee9e
 801c908:	809c52ad 	.word	0x809c52ad
 801c90c:	3e927e4f 	.word	0x3e927e4f
 801c910:	19cb1590 	.word	0x19cb1590
 801c914:	3efa01a0 	.word	0x3efa01a0
 801c918:	16c15177 	.word	0x16c15177
 801c91c:	3f56c16c 	.word	0x3f56c16c
 801c920:	5555554c 	.word	0x5555554c
 801c924:	3fa55555 	.word	0x3fa55555
 801c928:	3fe00000 	.word	0x3fe00000
 801c92c:	3fd33332 	.word	0x3fd33332
 801c930:	3ff00000 	.word	0x3ff00000
 801c934:	3fe90000 	.word	0x3fe90000
 801c938:	3fd20000 	.word	0x3fd20000
 801c93c:	00000000 	.word	0x00000000

0801c940 <__kernel_rem_pio2>:
 801c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c944:	ed2d 8b02 	vpush	{d8}
 801c948:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801c94c:	1ed4      	subs	r4, r2, #3
 801c94e:	9308      	str	r3, [sp, #32]
 801c950:	9101      	str	r1, [sp, #4]
 801c952:	4bc5      	ldr	r3, [pc, #788]	; (801cc68 <__kernel_rem_pio2+0x328>)
 801c954:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801c956:	9009      	str	r0, [sp, #36]	; 0x24
 801c958:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c95c:	9304      	str	r3, [sp, #16]
 801c95e:	9b08      	ldr	r3, [sp, #32]
 801c960:	3b01      	subs	r3, #1
 801c962:	9307      	str	r3, [sp, #28]
 801c964:	2318      	movs	r3, #24
 801c966:	fb94 f4f3 	sdiv	r4, r4, r3
 801c96a:	f06f 0317 	mvn.w	r3, #23
 801c96e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801c972:	fb04 3303 	mla	r3, r4, r3, r3
 801c976:	eb03 0a02 	add.w	sl, r3, r2
 801c97a:	9b04      	ldr	r3, [sp, #16]
 801c97c:	9a07      	ldr	r2, [sp, #28]
 801c97e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801cc58 <__kernel_rem_pio2+0x318>
 801c982:	eb03 0802 	add.w	r8, r3, r2
 801c986:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801c988:	1aa7      	subs	r7, r4, r2
 801c98a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c98e:	ae22      	add	r6, sp, #136	; 0x88
 801c990:	2500      	movs	r5, #0
 801c992:	4545      	cmp	r5, r8
 801c994:	dd13      	ble.n	801c9be <__kernel_rem_pio2+0x7e>
 801c996:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801cc58 <__kernel_rem_pio2+0x318>
 801c99a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801c99e:	2600      	movs	r6, #0
 801c9a0:	9b04      	ldr	r3, [sp, #16]
 801c9a2:	429e      	cmp	r6, r3
 801c9a4:	dc32      	bgt.n	801ca0c <__kernel_rem_pio2+0xcc>
 801c9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9a8:	9302      	str	r3, [sp, #8]
 801c9aa:	9b08      	ldr	r3, [sp, #32]
 801c9ac:	199d      	adds	r5, r3, r6
 801c9ae:	ab22      	add	r3, sp, #136	; 0x88
 801c9b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c9b4:	9306      	str	r3, [sp, #24]
 801c9b6:	ec59 8b18 	vmov	r8, r9, d8
 801c9ba:	2700      	movs	r7, #0
 801c9bc:	e01f      	b.n	801c9fe <__kernel_rem_pio2+0xbe>
 801c9be:	42ef      	cmn	r7, r5
 801c9c0:	d407      	bmi.n	801c9d2 <__kernel_rem_pio2+0x92>
 801c9c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c9c6:	f7e3 fdbd 	bl	8000544 <__aeabi_i2d>
 801c9ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c9ce:	3501      	adds	r5, #1
 801c9d0:	e7df      	b.n	801c992 <__kernel_rem_pio2+0x52>
 801c9d2:	ec51 0b18 	vmov	r0, r1, d8
 801c9d6:	e7f8      	b.n	801c9ca <__kernel_rem_pio2+0x8a>
 801c9d8:	9906      	ldr	r1, [sp, #24]
 801c9da:	9d02      	ldr	r5, [sp, #8]
 801c9dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801c9e0:	9106      	str	r1, [sp, #24]
 801c9e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801c9e6:	9502      	str	r5, [sp, #8]
 801c9e8:	f7e3 fe16 	bl	8000618 <__aeabi_dmul>
 801c9ec:	4602      	mov	r2, r0
 801c9ee:	460b      	mov	r3, r1
 801c9f0:	4640      	mov	r0, r8
 801c9f2:	4649      	mov	r1, r9
 801c9f4:	f7e3 fc5a 	bl	80002ac <__adddf3>
 801c9f8:	3701      	adds	r7, #1
 801c9fa:	4680      	mov	r8, r0
 801c9fc:	4689      	mov	r9, r1
 801c9fe:	9b07      	ldr	r3, [sp, #28]
 801ca00:	429f      	cmp	r7, r3
 801ca02:	dde9      	ble.n	801c9d8 <__kernel_rem_pio2+0x98>
 801ca04:	e8eb 8902 	strd	r8, r9, [fp], #8
 801ca08:	3601      	adds	r6, #1
 801ca0a:	e7c9      	b.n	801c9a0 <__kernel_rem_pio2+0x60>
 801ca0c:	9b04      	ldr	r3, [sp, #16]
 801ca0e:	aa0e      	add	r2, sp, #56	; 0x38
 801ca10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ca14:	930c      	str	r3, [sp, #48]	; 0x30
 801ca16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801ca18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ca1c:	9c04      	ldr	r4, [sp, #16]
 801ca1e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca20:	ab9a      	add	r3, sp, #616	; 0x268
 801ca22:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801ca26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ca2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca2e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801ca32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ca36:	ab9a      	add	r3, sp, #616	; 0x268
 801ca38:	445b      	add	r3, fp
 801ca3a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801ca3e:	2500      	movs	r5, #0
 801ca40:	1b63      	subs	r3, r4, r5
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	dc78      	bgt.n	801cb38 <__kernel_rem_pio2+0x1f8>
 801ca46:	4650      	mov	r0, sl
 801ca48:	ec49 8b10 	vmov	d0, r8, r9
 801ca4c:	f000 fe3c 	bl	801d6c8 <scalbn>
 801ca50:	ec57 6b10 	vmov	r6, r7, d0
 801ca54:	2200      	movs	r2, #0
 801ca56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ca5a:	ee10 0a10 	vmov	r0, s0
 801ca5e:	4639      	mov	r1, r7
 801ca60:	f7e3 fdda 	bl	8000618 <__aeabi_dmul>
 801ca64:	ec41 0b10 	vmov	d0, r0, r1
 801ca68:	f000 fd1a 	bl	801d4a0 <floor>
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	ec51 0b10 	vmov	r0, r1, d0
 801ca72:	4b7e      	ldr	r3, [pc, #504]	; (801cc6c <__kernel_rem_pio2+0x32c>)
 801ca74:	f7e3 fdd0 	bl	8000618 <__aeabi_dmul>
 801ca78:	4602      	mov	r2, r0
 801ca7a:	460b      	mov	r3, r1
 801ca7c:	4630      	mov	r0, r6
 801ca7e:	4639      	mov	r1, r7
 801ca80:	f7e3 fc12 	bl	80002a8 <__aeabi_dsub>
 801ca84:	460f      	mov	r7, r1
 801ca86:	4606      	mov	r6, r0
 801ca88:	f7e4 f876 	bl	8000b78 <__aeabi_d2iz>
 801ca8c:	9006      	str	r0, [sp, #24]
 801ca8e:	f7e3 fd59 	bl	8000544 <__aeabi_i2d>
 801ca92:	4602      	mov	r2, r0
 801ca94:	460b      	mov	r3, r1
 801ca96:	4630      	mov	r0, r6
 801ca98:	4639      	mov	r1, r7
 801ca9a:	f7e3 fc05 	bl	80002a8 <__aeabi_dsub>
 801ca9e:	f1ba 0f00 	cmp.w	sl, #0
 801caa2:	4606      	mov	r6, r0
 801caa4:	460f      	mov	r7, r1
 801caa6:	dd6c      	ble.n	801cb82 <__kernel_rem_pio2+0x242>
 801caa8:	1e62      	subs	r2, r4, #1
 801caaa:	ab0e      	add	r3, sp, #56	; 0x38
 801caac:	f1ca 0118 	rsb	r1, sl, #24
 801cab0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cab4:	9d06      	ldr	r5, [sp, #24]
 801cab6:	fa40 f301 	asr.w	r3, r0, r1
 801caba:	441d      	add	r5, r3
 801cabc:	408b      	lsls	r3, r1
 801cabe:	1ac0      	subs	r0, r0, r3
 801cac0:	ab0e      	add	r3, sp, #56	; 0x38
 801cac2:	9506      	str	r5, [sp, #24]
 801cac4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801cac8:	f1ca 0317 	rsb	r3, sl, #23
 801cacc:	fa40 f303 	asr.w	r3, r0, r3
 801cad0:	9302      	str	r3, [sp, #8]
 801cad2:	9b02      	ldr	r3, [sp, #8]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	dd62      	ble.n	801cb9e <__kernel_rem_pio2+0x25e>
 801cad8:	9b06      	ldr	r3, [sp, #24]
 801cada:	2200      	movs	r2, #0
 801cadc:	3301      	adds	r3, #1
 801cade:	9306      	str	r3, [sp, #24]
 801cae0:	4615      	mov	r5, r2
 801cae2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801cae6:	4294      	cmp	r4, r2
 801cae8:	f300 8095 	bgt.w	801cc16 <__kernel_rem_pio2+0x2d6>
 801caec:	f1ba 0f00 	cmp.w	sl, #0
 801caf0:	dd07      	ble.n	801cb02 <__kernel_rem_pio2+0x1c2>
 801caf2:	f1ba 0f01 	cmp.w	sl, #1
 801caf6:	f000 80a2 	beq.w	801cc3e <__kernel_rem_pio2+0x2fe>
 801cafa:	f1ba 0f02 	cmp.w	sl, #2
 801cafe:	f000 80c1 	beq.w	801cc84 <__kernel_rem_pio2+0x344>
 801cb02:	9b02      	ldr	r3, [sp, #8]
 801cb04:	2b02      	cmp	r3, #2
 801cb06:	d14a      	bne.n	801cb9e <__kernel_rem_pio2+0x25e>
 801cb08:	4632      	mov	r2, r6
 801cb0a:	463b      	mov	r3, r7
 801cb0c:	2000      	movs	r0, #0
 801cb0e:	4958      	ldr	r1, [pc, #352]	; (801cc70 <__kernel_rem_pio2+0x330>)
 801cb10:	f7e3 fbca 	bl	80002a8 <__aeabi_dsub>
 801cb14:	4606      	mov	r6, r0
 801cb16:	460f      	mov	r7, r1
 801cb18:	2d00      	cmp	r5, #0
 801cb1a:	d040      	beq.n	801cb9e <__kernel_rem_pio2+0x25e>
 801cb1c:	4650      	mov	r0, sl
 801cb1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801cc60 <__kernel_rem_pio2+0x320>
 801cb22:	f000 fdd1 	bl	801d6c8 <scalbn>
 801cb26:	4630      	mov	r0, r6
 801cb28:	4639      	mov	r1, r7
 801cb2a:	ec53 2b10 	vmov	r2, r3, d0
 801cb2e:	f7e3 fbbb 	bl	80002a8 <__aeabi_dsub>
 801cb32:	4606      	mov	r6, r0
 801cb34:	460f      	mov	r7, r1
 801cb36:	e032      	b.n	801cb9e <__kernel_rem_pio2+0x25e>
 801cb38:	2200      	movs	r2, #0
 801cb3a:	4b4e      	ldr	r3, [pc, #312]	; (801cc74 <__kernel_rem_pio2+0x334>)
 801cb3c:	4640      	mov	r0, r8
 801cb3e:	4649      	mov	r1, r9
 801cb40:	f7e3 fd6a 	bl	8000618 <__aeabi_dmul>
 801cb44:	f7e4 f818 	bl	8000b78 <__aeabi_d2iz>
 801cb48:	f7e3 fcfc 	bl	8000544 <__aeabi_i2d>
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	4b4a      	ldr	r3, [pc, #296]	; (801cc78 <__kernel_rem_pio2+0x338>)
 801cb50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb54:	f7e3 fd60 	bl	8000618 <__aeabi_dmul>
 801cb58:	4602      	mov	r2, r0
 801cb5a:	460b      	mov	r3, r1
 801cb5c:	4640      	mov	r0, r8
 801cb5e:	4649      	mov	r1, r9
 801cb60:	f7e3 fba2 	bl	80002a8 <__aeabi_dsub>
 801cb64:	f7e4 f808 	bl	8000b78 <__aeabi_d2iz>
 801cb68:	ab0e      	add	r3, sp, #56	; 0x38
 801cb6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801cb6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801cb72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cb76:	f7e3 fb99 	bl	80002ac <__adddf3>
 801cb7a:	3501      	adds	r5, #1
 801cb7c:	4680      	mov	r8, r0
 801cb7e:	4689      	mov	r9, r1
 801cb80:	e75e      	b.n	801ca40 <__kernel_rem_pio2+0x100>
 801cb82:	d105      	bne.n	801cb90 <__kernel_rem_pio2+0x250>
 801cb84:	1e63      	subs	r3, r4, #1
 801cb86:	aa0e      	add	r2, sp, #56	; 0x38
 801cb88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cb8c:	15c3      	asrs	r3, r0, #23
 801cb8e:	e79f      	b.n	801cad0 <__kernel_rem_pio2+0x190>
 801cb90:	2200      	movs	r2, #0
 801cb92:	4b3a      	ldr	r3, [pc, #232]	; (801cc7c <__kernel_rem_pio2+0x33c>)
 801cb94:	f7e3 ffc6 	bl	8000b24 <__aeabi_dcmpge>
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	d139      	bne.n	801cc10 <__kernel_rem_pio2+0x2d0>
 801cb9c:	9002      	str	r0, [sp, #8]
 801cb9e:	2200      	movs	r2, #0
 801cba0:	2300      	movs	r3, #0
 801cba2:	4630      	mov	r0, r6
 801cba4:	4639      	mov	r1, r7
 801cba6:	f7e3 ff9f 	bl	8000ae8 <__aeabi_dcmpeq>
 801cbaa:	2800      	cmp	r0, #0
 801cbac:	f000 80c7 	beq.w	801cd3e <__kernel_rem_pio2+0x3fe>
 801cbb0:	1e65      	subs	r5, r4, #1
 801cbb2:	462b      	mov	r3, r5
 801cbb4:	2200      	movs	r2, #0
 801cbb6:	9904      	ldr	r1, [sp, #16]
 801cbb8:	428b      	cmp	r3, r1
 801cbba:	da6a      	bge.n	801cc92 <__kernel_rem_pio2+0x352>
 801cbbc:	2a00      	cmp	r2, #0
 801cbbe:	f000 8088 	beq.w	801ccd2 <__kernel_rem_pio2+0x392>
 801cbc2:	ab0e      	add	r3, sp, #56	; 0x38
 801cbc4:	f1aa 0a18 	sub.w	sl, sl, #24
 801cbc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	f000 80b4 	beq.w	801cd3a <__kernel_rem_pio2+0x3fa>
 801cbd2:	4650      	mov	r0, sl
 801cbd4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801cc60 <__kernel_rem_pio2+0x320>
 801cbd8:	f000 fd76 	bl	801d6c8 <scalbn>
 801cbdc:	00ec      	lsls	r4, r5, #3
 801cbde:	ab72      	add	r3, sp, #456	; 0x1c8
 801cbe0:	191e      	adds	r6, r3, r4
 801cbe2:	ec59 8b10 	vmov	r8, r9, d0
 801cbe6:	f106 0a08 	add.w	sl, r6, #8
 801cbea:	462f      	mov	r7, r5
 801cbec:	2f00      	cmp	r7, #0
 801cbee:	f280 80df 	bge.w	801cdb0 <__kernel_rem_pio2+0x470>
 801cbf2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801cc58 <__kernel_rem_pio2+0x318>
 801cbf6:	f04f 0a00 	mov.w	sl, #0
 801cbfa:	eba5 030a 	sub.w	r3, r5, sl
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	f2c0 810a 	blt.w	801ce18 <__kernel_rem_pio2+0x4d8>
 801cc04:	f8df b078 	ldr.w	fp, [pc, #120]	; 801cc80 <__kernel_rem_pio2+0x340>
 801cc08:	ec59 8b18 	vmov	r8, r9, d8
 801cc0c:	2700      	movs	r7, #0
 801cc0e:	e0f5      	b.n	801cdfc <__kernel_rem_pio2+0x4bc>
 801cc10:	2302      	movs	r3, #2
 801cc12:	9302      	str	r3, [sp, #8]
 801cc14:	e760      	b.n	801cad8 <__kernel_rem_pio2+0x198>
 801cc16:	ab0e      	add	r3, sp, #56	; 0x38
 801cc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc1c:	b94d      	cbnz	r5, 801cc32 <__kernel_rem_pio2+0x2f2>
 801cc1e:	b12b      	cbz	r3, 801cc2c <__kernel_rem_pio2+0x2ec>
 801cc20:	a80e      	add	r0, sp, #56	; 0x38
 801cc22:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801cc26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	3201      	adds	r2, #1
 801cc2e:	461d      	mov	r5, r3
 801cc30:	e759      	b.n	801cae6 <__kernel_rem_pio2+0x1a6>
 801cc32:	a80e      	add	r0, sp, #56	; 0x38
 801cc34:	1acb      	subs	r3, r1, r3
 801cc36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801cc3a:	462b      	mov	r3, r5
 801cc3c:	e7f6      	b.n	801cc2c <__kernel_rem_pio2+0x2ec>
 801cc3e:	1e62      	subs	r2, r4, #1
 801cc40:	ab0e      	add	r3, sp, #56	; 0x38
 801cc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cc4a:	a90e      	add	r1, sp, #56	; 0x38
 801cc4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cc50:	e757      	b.n	801cb02 <__kernel_rem_pio2+0x1c2>
 801cc52:	bf00      	nop
 801cc54:	f3af 8000 	nop.w
	...
 801cc64:	3ff00000 	.word	0x3ff00000
 801cc68:	0801e930 	.word	0x0801e930
 801cc6c:	40200000 	.word	0x40200000
 801cc70:	3ff00000 	.word	0x3ff00000
 801cc74:	3e700000 	.word	0x3e700000
 801cc78:	41700000 	.word	0x41700000
 801cc7c:	3fe00000 	.word	0x3fe00000
 801cc80:	0801e8f0 	.word	0x0801e8f0
 801cc84:	1e62      	subs	r2, r4, #1
 801cc86:	ab0e      	add	r3, sp, #56	; 0x38
 801cc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cc90:	e7db      	b.n	801cc4a <__kernel_rem_pio2+0x30a>
 801cc92:	a90e      	add	r1, sp, #56	; 0x38
 801cc94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cc98:	3b01      	subs	r3, #1
 801cc9a:	430a      	orrs	r2, r1
 801cc9c:	e78b      	b.n	801cbb6 <__kernel_rem_pio2+0x276>
 801cc9e:	3301      	adds	r3, #1
 801cca0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801cca4:	2900      	cmp	r1, #0
 801cca6:	d0fa      	beq.n	801cc9e <__kernel_rem_pio2+0x35e>
 801cca8:	9a08      	ldr	r2, [sp, #32]
 801ccaa:	4422      	add	r2, r4
 801ccac:	00d2      	lsls	r2, r2, #3
 801ccae:	a922      	add	r1, sp, #136	; 0x88
 801ccb0:	18e3      	adds	r3, r4, r3
 801ccb2:	9206      	str	r2, [sp, #24]
 801ccb4:	440a      	add	r2, r1
 801ccb6:	9302      	str	r3, [sp, #8]
 801ccb8:	f10b 0108 	add.w	r1, fp, #8
 801ccbc:	f102 0308 	add.w	r3, r2, #8
 801ccc0:	1c66      	adds	r6, r4, #1
 801ccc2:	910a      	str	r1, [sp, #40]	; 0x28
 801ccc4:	2500      	movs	r5, #0
 801ccc6:	930d      	str	r3, [sp, #52]	; 0x34
 801ccc8:	9b02      	ldr	r3, [sp, #8]
 801ccca:	42b3      	cmp	r3, r6
 801cccc:	da04      	bge.n	801ccd8 <__kernel_rem_pio2+0x398>
 801ccce:	461c      	mov	r4, r3
 801ccd0:	e6a6      	b.n	801ca20 <__kernel_rem_pio2+0xe0>
 801ccd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	e7e3      	b.n	801cca0 <__kernel_rem_pio2+0x360>
 801ccd8:	9b06      	ldr	r3, [sp, #24]
 801ccda:	18ef      	adds	r7, r5, r3
 801ccdc:	ab22      	add	r3, sp, #136	; 0x88
 801ccde:	441f      	add	r7, r3
 801cce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cce2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801cce6:	f7e3 fc2d 	bl	8000544 <__aeabi_i2d>
 801ccea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccec:	461c      	mov	r4, r3
 801ccee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccf0:	e9c7 0100 	strd	r0, r1, [r7]
 801ccf4:	eb03 0b05 	add.w	fp, r3, r5
 801ccf8:	2700      	movs	r7, #0
 801ccfa:	f04f 0800 	mov.w	r8, #0
 801ccfe:	f04f 0900 	mov.w	r9, #0
 801cd02:	9b07      	ldr	r3, [sp, #28]
 801cd04:	429f      	cmp	r7, r3
 801cd06:	dd08      	ble.n	801cd1a <__kernel_rem_pio2+0x3da>
 801cd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd0a:	aa72      	add	r2, sp, #456	; 0x1c8
 801cd0c:	18eb      	adds	r3, r5, r3
 801cd0e:	4413      	add	r3, r2
 801cd10:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801cd14:	3601      	adds	r6, #1
 801cd16:	3508      	adds	r5, #8
 801cd18:	e7d6      	b.n	801ccc8 <__kernel_rem_pio2+0x388>
 801cd1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801cd1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801cd22:	f7e3 fc79 	bl	8000618 <__aeabi_dmul>
 801cd26:	4602      	mov	r2, r0
 801cd28:	460b      	mov	r3, r1
 801cd2a:	4640      	mov	r0, r8
 801cd2c:	4649      	mov	r1, r9
 801cd2e:	f7e3 fabd 	bl	80002ac <__adddf3>
 801cd32:	3701      	adds	r7, #1
 801cd34:	4680      	mov	r8, r0
 801cd36:	4689      	mov	r9, r1
 801cd38:	e7e3      	b.n	801cd02 <__kernel_rem_pio2+0x3c2>
 801cd3a:	3d01      	subs	r5, #1
 801cd3c:	e741      	b.n	801cbc2 <__kernel_rem_pio2+0x282>
 801cd3e:	f1ca 0000 	rsb	r0, sl, #0
 801cd42:	ec47 6b10 	vmov	d0, r6, r7
 801cd46:	f000 fcbf 	bl	801d6c8 <scalbn>
 801cd4a:	ec57 6b10 	vmov	r6, r7, d0
 801cd4e:	2200      	movs	r2, #0
 801cd50:	4b99      	ldr	r3, [pc, #612]	; (801cfb8 <__kernel_rem_pio2+0x678>)
 801cd52:	ee10 0a10 	vmov	r0, s0
 801cd56:	4639      	mov	r1, r7
 801cd58:	f7e3 fee4 	bl	8000b24 <__aeabi_dcmpge>
 801cd5c:	b1f8      	cbz	r0, 801cd9e <__kernel_rem_pio2+0x45e>
 801cd5e:	2200      	movs	r2, #0
 801cd60:	4b96      	ldr	r3, [pc, #600]	; (801cfbc <__kernel_rem_pio2+0x67c>)
 801cd62:	4630      	mov	r0, r6
 801cd64:	4639      	mov	r1, r7
 801cd66:	f7e3 fc57 	bl	8000618 <__aeabi_dmul>
 801cd6a:	f7e3 ff05 	bl	8000b78 <__aeabi_d2iz>
 801cd6e:	4680      	mov	r8, r0
 801cd70:	f7e3 fbe8 	bl	8000544 <__aeabi_i2d>
 801cd74:	2200      	movs	r2, #0
 801cd76:	4b90      	ldr	r3, [pc, #576]	; (801cfb8 <__kernel_rem_pio2+0x678>)
 801cd78:	f7e3 fc4e 	bl	8000618 <__aeabi_dmul>
 801cd7c:	460b      	mov	r3, r1
 801cd7e:	4602      	mov	r2, r0
 801cd80:	4639      	mov	r1, r7
 801cd82:	4630      	mov	r0, r6
 801cd84:	f7e3 fa90 	bl	80002a8 <__aeabi_dsub>
 801cd88:	f7e3 fef6 	bl	8000b78 <__aeabi_d2iz>
 801cd8c:	1c65      	adds	r5, r4, #1
 801cd8e:	ab0e      	add	r3, sp, #56	; 0x38
 801cd90:	f10a 0a18 	add.w	sl, sl, #24
 801cd94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cd98:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801cd9c:	e719      	b.n	801cbd2 <__kernel_rem_pio2+0x292>
 801cd9e:	4630      	mov	r0, r6
 801cda0:	4639      	mov	r1, r7
 801cda2:	f7e3 fee9 	bl	8000b78 <__aeabi_d2iz>
 801cda6:	ab0e      	add	r3, sp, #56	; 0x38
 801cda8:	4625      	mov	r5, r4
 801cdaa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cdae:	e710      	b.n	801cbd2 <__kernel_rem_pio2+0x292>
 801cdb0:	ab0e      	add	r3, sp, #56	; 0x38
 801cdb2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801cdb6:	f7e3 fbc5 	bl	8000544 <__aeabi_i2d>
 801cdba:	4642      	mov	r2, r8
 801cdbc:	464b      	mov	r3, r9
 801cdbe:	f7e3 fc2b 	bl	8000618 <__aeabi_dmul>
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801cdc8:	4b7c      	ldr	r3, [pc, #496]	; (801cfbc <__kernel_rem_pio2+0x67c>)
 801cdca:	4640      	mov	r0, r8
 801cdcc:	4649      	mov	r1, r9
 801cdce:	f7e3 fc23 	bl	8000618 <__aeabi_dmul>
 801cdd2:	3f01      	subs	r7, #1
 801cdd4:	4680      	mov	r8, r0
 801cdd6:	4689      	mov	r9, r1
 801cdd8:	e708      	b.n	801cbec <__kernel_rem_pio2+0x2ac>
 801cdda:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801cde6:	f7e3 fc17 	bl	8000618 <__aeabi_dmul>
 801cdea:	4602      	mov	r2, r0
 801cdec:	460b      	mov	r3, r1
 801cdee:	4640      	mov	r0, r8
 801cdf0:	4649      	mov	r1, r9
 801cdf2:	f7e3 fa5b 	bl	80002ac <__adddf3>
 801cdf6:	3701      	adds	r7, #1
 801cdf8:	4680      	mov	r8, r0
 801cdfa:	4689      	mov	r9, r1
 801cdfc:	9b04      	ldr	r3, [sp, #16]
 801cdfe:	429f      	cmp	r7, r3
 801ce00:	dc01      	bgt.n	801ce06 <__kernel_rem_pio2+0x4c6>
 801ce02:	45ba      	cmp	sl, r7
 801ce04:	dae9      	bge.n	801cdda <__kernel_rem_pio2+0x49a>
 801ce06:	ab4a      	add	r3, sp, #296	; 0x128
 801ce08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ce0c:	e9c3 8900 	strd	r8, r9, [r3]
 801ce10:	f10a 0a01 	add.w	sl, sl, #1
 801ce14:	3e08      	subs	r6, #8
 801ce16:	e6f0      	b.n	801cbfa <__kernel_rem_pio2+0x2ba>
 801ce18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ce1a:	2b03      	cmp	r3, #3
 801ce1c:	d85b      	bhi.n	801ced6 <__kernel_rem_pio2+0x596>
 801ce1e:	e8df f003 	tbb	[pc, r3]
 801ce22:	264a      	.short	0x264a
 801ce24:	0226      	.short	0x0226
 801ce26:	ab9a      	add	r3, sp, #616	; 0x268
 801ce28:	441c      	add	r4, r3
 801ce2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ce2e:	46a2      	mov	sl, r4
 801ce30:	46ab      	mov	fp, r5
 801ce32:	f1bb 0f00 	cmp.w	fp, #0
 801ce36:	dc6c      	bgt.n	801cf12 <__kernel_rem_pio2+0x5d2>
 801ce38:	46a2      	mov	sl, r4
 801ce3a:	46ab      	mov	fp, r5
 801ce3c:	f1bb 0f01 	cmp.w	fp, #1
 801ce40:	f300 8086 	bgt.w	801cf50 <__kernel_rem_pio2+0x610>
 801ce44:	2000      	movs	r0, #0
 801ce46:	2100      	movs	r1, #0
 801ce48:	2d01      	cmp	r5, #1
 801ce4a:	f300 80a0 	bgt.w	801cf8e <__kernel_rem_pio2+0x64e>
 801ce4e:	9b02      	ldr	r3, [sp, #8]
 801ce50:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801ce54:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	f040 809e 	bne.w	801cf9a <__kernel_rem_pio2+0x65a>
 801ce5e:	9b01      	ldr	r3, [sp, #4]
 801ce60:	e9c3 7800 	strd	r7, r8, [r3]
 801ce64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ce68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ce6c:	e033      	b.n	801ced6 <__kernel_rem_pio2+0x596>
 801ce6e:	3408      	adds	r4, #8
 801ce70:	ab4a      	add	r3, sp, #296	; 0x128
 801ce72:	441c      	add	r4, r3
 801ce74:	462e      	mov	r6, r5
 801ce76:	2000      	movs	r0, #0
 801ce78:	2100      	movs	r1, #0
 801ce7a:	2e00      	cmp	r6, #0
 801ce7c:	da3a      	bge.n	801cef4 <__kernel_rem_pio2+0x5b4>
 801ce7e:	9b02      	ldr	r3, [sp, #8]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d03d      	beq.n	801cf00 <__kernel_rem_pio2+0x5c0>
 801ce84:	4602      	mov	r2, r0
 801ce86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ce8a:	9c01      	ldr	r4, [sp, #4]
 801ce8c:	e9c4 2300 	strd	r2, r3, [r4]
 801ce90:	4602      	mov	r2, r0
 801ce92:	460b      	mov	r3, r1
 801ce94:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ce98:	f7e3 fa06 	bl	80002a8 <__aeabi_dsub>
 801ce9c:	ae4c      	add	r6, sp, #304	; 0x130
 801ce9e:	2401      	movs	r4, #1
 801cea0:	42a5      	cmp	r5, r4
 801cea2:	da30      	bge.n	801cf06 <__kernel_rem_pio2+0x5c6>
 801cea4:	9b02      	ldr	r3, [sp, #8]
 801cea6:	b113      	cbz	r3, 801ceae <__kernel_rem_pio2+0x56e>
 801cea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ceac:	4619      	mov	r1, r3
 801ceae:	9b01      	ldr	r3, [sp, #4]
 801ceb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ceb4:	e00f      	b.n	801ced6 <__kernel_rem_pio2+0x596>
 801ceb6:	ab9a      	add	r3, sp, #616	; 0x268
 801ceb8:	441c      	add	r4, r3
 801ceba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801cebe:	2000      	movs	r0, #0
 801cec0:	2100      	movs	r1, #0
 801cec2:	2d00      	cmp	r5, #0
 801cec4:	da10      	bge.n	801cee8 <__kernel_rem_pio2+0x5a8>
 801cec6:	9b02      	ldr	r3, [sp, #8]
 801cec8:	b113      	cbz	r3, 801ced0 <__kernel_rem_pio2+0x590>
 801ceca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cece:	4619      	mov	r1, r3
 801ced0:	9b01      	ldr	r3, [sp, #4]
 801ced2:	e9c3 0100 	strd	r0, r1, [r3]
 801ced6:	9b06      	ldr	r3, [sp, #24]
 801ced8:	f003 0007 	and.w	r0, r3, #7
 801cedc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801cee0:	ecbd 8b02 	vpop	{d8}
 801cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ceec:	f7e3 f9de 	bl	80002ac <__adddf3>
 801cef0:	3d01      	subs	r5, #1
 801cef2:	e7e6      	b.n	801cec2 <__kernel_rem_pio2+0x582>
 801cef4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cef8:	f7e3 f9d8 	bl	80002ac <__adddf3>
 801cefc:	3e01      	subs	r6, #1
 801cefe:	e7bc      	b.n	801ce7a <__kernel_rem_pio2+0x53a>
 801cf00:	4602      	mov	r2, r0
 801cf02:	460b      	mov	r3, r1
 801cf04:	e7c1      	b.n	801ce8a <__kernel_rem_pio2+0x54a>
 801cf06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801cf0a:	f7e3 f9cf 	bl	80002ac <__adddf3>
 801cf0e:	3401      	adds	r4, #1
 801cf10:	e7c6      	b.n	801cea0 <__kernel_rem_pio2+0x560>
 801cf12:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801cf16:	ed3a 7b02 	vldmdb	sl!, {d7}
 801cf1a:	4640      	mov	r0, r8
 801cf1c:	ec53 2b17 	vmov	r2, r3, d7
 801cf20:	4649      	mov	r1, r9
 801cf22:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cf26:	f7e3 f9c1 	bl	80002ac <__adddf3>
 801cf2a:	4602      	mov	r2, r0
 801cf2c:	460b      	mov	r3, r1
 801cf2e:	4606      	mov	r6, r0
 801cf30:	460f      	mov	r7, r1
 801cf32:	4640      	mov	r0, r8
 801cf34:	4649      	mov	r1, r9
 801cf36:	f7e3 f9b7 	bl	80002a8 <__aeabi_dsub>
 801cf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf3e:	f7e3 f9b5 	bl	80002ac <__adddf3>
 801cf42:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cf46:	e9ca 0100 	strd	r0, r1, [sl]
 801cf4a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801cf4e:	e770      	b.n	801ce32 <__kernel_rem_pio2+0x4f2>
 801cf50:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801cf54:	ed3a 7b02 	vldmdb	sl!, {d7}
 801cf58:	4630      	mov	r0, r6
 801cf5a:	ec53 2b17 	vmov	r2, r3, d7
 801cf5e:	4639      	mov	r1, r7
 801cf60:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cf64:	f7e3 f9a2 	bl	80002ac <__adddf3>
 801cf68:	4602      	mov	r2, r0
 801cf6a:	460b      	mov	r3, r1
 801cf6c:	4680      	mov	r8, r0
 801cf6e:	4689      	mov	r9, r1
 801cf70:	4630      	mov	r0, r6
 801cf72:	4639      	mov	r1, r7
 801cf74:	f7e3 f998 	bl	80002a8 <__aeabi_dsub>
 801cf78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf7c:	f7e3 f996 	bl	80002ac <__adddf3>
 801cf80:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cf84:	e9ca 0100 	strd	r0, r1, [sl]
 801cf88:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801cf8c:	e756      	b.n	801ce3c <__kernel_rem_pio2+0x4fc>
 801cf8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cf92:	f7e3 f98b 	bl	80002ac <__adddf3>
 801cf96:	3d01      	subs	r5, #1
 801cf98:	e756      	b.n	801ce48 <__kernel_rem_pio2+0x508>
 801cf9a:	9b01      	ldr	r3, [sp, #4]
 801cf9c:	9a01      	ldr	r2, [sp, #4]
 801cf9e:	601f      	str	r7, [r3, #0]
 801cfa0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801cfa4:	605c      	str	r4, [r3, #4]
 801cfa6:	609d      	str	r5, [r3, #8]
 801cfa8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801cfac:	60d3      	str	r3, [r2, #12]
 801cfae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cfb2:	6110      	str	r0, [r2, #16]
 801cfb4:	6153      	str	r3, [r2, #20]
 801cfb6:	e78e      	b.n	801ced6 <__kernel_rem_pio2+0x596>
 801cfb8:	41700000 	.word	0x41700000
 801cfbc:	3e700000 	.word	0x3e700000

0801cfc0 <__kernel_sin>:
 801cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc4:	ec55 4b10 	vmov	r4, r5, d0
 801cfc8:	b085      	sub	sp, #20
 801cfca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cfce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801cfd2:	ed8d 1b00 	vstr	d1, [sp]
 801cfd6:	9002      	str	r0, [sp, #8]
 801cfd8:	da06      	bge.n	801cfe8 <__kernel_sin+0x28>
 801cfda:	ee10 0a10 	vmov	r0, s0
 801cfde:	4629      	mov	r1, r5
 801cfe0:	f7e3 fdca 	bl	8000b78 <__aeabi_d2iz>
 801cfe4:	2800      	cmp	r0, #0
 801cfe6:	d051      	beq.n	801d08c <__kernel_sin+0xcc>
 801cfe8:	4622      	mov	r2, r4
 801cfea:	462b      	mov	r3, r5
 801cfec:	4620      	mov	r0, r4
 801cfee:	4629      	mov	r1, r5
 801cff0:	f7e3 fb12 	bl	8000618 <__aeabi_dmul>
 801cff4:	4682      	mov	sl, r0
 801cff6:	468b      	mov	fp, r1
 801cff8:	4602      	mov	r2, r0
 801cffa:	460b      	mov	r3, r1
 801cffc:	4620      	mov	r0, r4
 801cffe:	4629      	mov	r1, r5
 801d000:	f7e3 fb0a 	bl	8000618 <__aeabi_dmul>
 801d004:	a341      	add	r3, pc, #260	; (adr r3, 801d10c <__kernel_sin+0x14c>)
 801d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d00a:	4680      	mov	r8, r0
 801d00c:	4689      	mov	r9, r1
 801d00e:	4650      	mov	r0, sl
 801d010:	4659      	mov	r1, fp
 801d012:	f7e3 fb01 	bl	8000618 <__aeabi_dmul>
 801d016:	a33f      	add	r3, pc, #252	; (adr r3, 801d114 <__kernel_sin+0x154>)
 801d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d01c:	f7e3 f944 	bl	80002a8 <__aeabi_dsub>
 801d020:	4652      	mov	r2, sl
 801d022:	465b      	mov	r3, fp
 801d024:	f7e3 faf8 	bl	8000618 <__aeabi_dmul>
 801d028:	a33c      	add	r3, pc, #240	; (adr r3, 801d11c <__kernel_sin+0x15c>)
 801d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d02e:	f7e3 f93d 	bl	80002ac <__adddf3>
 801d032:	4652      	mov	r2, sl
 801d034:	465b      	mov	r3, fp
 801d036:	f7e3 faef 	bl	8000618 <__aeabi_dmul>
 801d03a:	a33a      	add	r3, pc, #232	; (adr r3, 801d124 <__kernel_sin+0x164>)
 801d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d040:	f7e3 f932 	bl	80002a8 <__aeabi_dsub>
 801d044:	4652      	mov	r2, sl
 801d046:	465b      	mov	r3, fp
 801d048:	f7e3 fae6 	bl	8000618 <__aeabi_dmul>
 801d04c:	a337      	add	r3, pc, #220	; (adr r3, 801d12c <__kernel_sin+0x16c>)
 801d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d052:	f7e3 f92b 	bl	80002ac <__adddf3>
 801d056:	9b02      	ldr	r3, [sp, #8]
 801d058:	4606      	mov	r6, r0
 801d05a:	460f      	mov	r7, r1
 801d05c:	b9db      	cbnz	r3, 801d096 <__kernel_sin+0xd6>
 801d05e:	4602      	mov	r2, r0
 801d060:	460b      	mov	r3, r1
 801d062:	4650      	mov	r0, sl
 801d064:	4659      	mov	r1, fp
 801d066:	f7e3 fad7 	bl	8000618 <__aeabi_dmul>
 801d06a:	a325      	add	r3, pc, #148	; (adr r3, 801d100 <__kernel_sin+0x140>)
 801d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d070:	f7e3 f91a 	bl	80002a8 <__aeabi_dsub>
 801d074:	4642      	mov	r2, r8
 801d076:	464b      	mov	r3, r9
 801d078:	f7e3 face 	bl	8000618 <__aeabi_dmul>
 801d07c:	4602      	mov	r2, r0
 801d07e:	460b      	mov	r3, r1
 801d080:	4620      	mov	r0, r4
 801d082:	4629      	mov	r1, r5
 801d084:	f7e3 f912 	bl	80002ac <__adddf3>
 801d088:	4604      	mov	r4, r0
 801d08a:	460d      	mov	r5, r1
 801d08c:	ec45 4b10 	vmov	d0, r4, r5
 801d090:	b005      	add	sp, #20
 801d092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d096:	2200      	movs	r2, #0
 801d098:	4b1b      	ldr	r3, [pc, #108]	; (801d108 <__kernel_sin+0x148>)
 801d09a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d09e:	f7e3 fabb 	bl	8000618 <__aeabi_dmul>
 801d0a2:	4632      	mov	r2, r6
 801d0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d0a8:	463b      	mov	r3, r7
 801d0aa:	4640      	mov	r0, r8
 801d0ac:	4649      	mov	r1, r9
 801d0ae:	f7e3 fab3 	bl	8000618 <__aeabi_dmul>
 801d0b2:	4602      	mov	r2, r0
 801d0b4:	460b      	mov	r3, r1
 801d0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d0ba:	f7e3 f8f5 	bl	80002a8 <__aeabi_dsub>
 801d0be:	4652      	mov	r2, sl
 801d0c0:	465b      	mov	r3, fp
 801d0c2:	f7e3 faa9 	bl	8000618 <__aeabi_dmul>
 801d0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0ca:	f7e3 f8ed 	bl	80002a8 <__aeabi_dsub>
 801d0ce:	a30c      	add	r3, pc, #48	; (adr r3, 801d100 <__kernel_sin+0x140>)
 801d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d4:	4606      	mov	r6, r0
 801d0d6:	460f      	mov	r7, r1
 801d0d8:	4640      	mov	r0, r8
 801d0da:	4649      	mov	r1, r9
 801d0dc:	f7e3 fa9c 	bl	8000618 <__aeabi_dmul>
 801d0e0:	4602      	mov	r2, r0
 801d0e2:	460b      	mov	r3, r1
 801d0e4:	4630      	mov	r0, r6
 801d0e6:	4639      	mov	r1, r7
 801d0e8:	f7e3 f8e0 	bl	80002ac <__adddf3>
 801d0ec:	4602      	mov	r2, r0
 801d0ee:	460b      	mov	r3, r1
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	4629      	mov	r1, r5
 801d0f4:	f7e3 f8d8 	bl	80002a8 <__aeabi_dsub>
 801d0f8:	e7c6      	b.n	801d088 <__kernel_sin+0xc8>
 801d0fa:	bf00      	nop
 801d0fc:	f3af 8000 	nop.w
 801d100:	55555549 	.word	0x55555549
 801d104:	3fc55555 	.word	0x3fc55555
 801d108:	3fe00000 	.word	0x3fe00000
 801d10c:	5acfd57c 	.word	0x5acfd57c
 801d110:	3de5d93a 	.word	0x3de5d93a
 801d114:	8a2b9ceb 	.word	0x8a2b9ceb
 801d118:	3e5ae5e6 	.word	0x3e5ae5e6
 801d11c:	57b1fe7d 	.word	0x57b1fe7d
 801d120:	3ec71de3 	.word	0x3ec71de3
 801d124:	19c161d5 	.word	0x19c161d5
 801d128:	3f2a01a0 	.word	0x3f2a01a0
 801d12c:	1110f8a6 	.word	0x1110f8a6
 801d130:	3f811111 	.word	0x3f811111
 801d134:	00000000 	.word	0x00000000

0801d138 <atan>:
 801d138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d13c:	ec55 4b10 	vmov	r4, r5, d0
 801d140:	4bc3      	ldr	r3, [pc, #780]	; (801d450 <atan+0x318>)
 801d142:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d146:	429e      	cmp	r6, r3
 801d148:	46ab      	mov	fp, r5
 801d14a:	dd18      	ble.n	801d17e <atan+0x46>
 801d14c:	4bc1      	ldr	r3, [pc, #772]	; (801d454 <atan+0x31c>)
 801d14e:	429e      	cmp	r6, r3
 801d150:	dc01      	bgt.n	801d156 <atan+0x1e>
 801d152:	d109      	bne.n	801d168 <atan+0x30>
 801d154:	b144      	cbz	r4, 801d168 <atan+0x30>
 801d156:	4622      	mov	r2, r4
 801d158:	462b      	mov	r3, r5
 801d15a:	4620      	mov	r0, r4
 801d15c:	4629      	mov	r1, r5
 801d15e:	f7e3 f8a5 	bl	80002ac <__adddf3>
 801d162:	4604      	mov	r4, r0
 801d164:	460d      	mov	r5, r1
 801d166:	e006      	b.n	801d176 <atan+0x3e>
 801d168:	f1bb 0f00 	cmp.w	fp, #0
 801d16c:	f340 8131 	ble.w	801d3d2 <atan+0x29a>
 801d170:	a59b      	add	r5, pc, #620	; (adr r5, 801d3e0 <atan+0x2a8>)
 801d172:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d176:	ec45 4b10 	vmov	d0, r4, r5
 801d17a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d17e:	4bb6      	ldr	r3, [pc, #728]	; (801d458 <atan+0x320>)
 801d180:	429e      	cmp	r6, r3
 801d182:	dc14      	bgt.n	801d1ae <atan+0x76>
 801d184:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d188:	429e      	cmp	r6, r3
 801d18a:	dc0d      	bgt.n	801d1a8 <atan+0x70>
 801d18c:	a396      	add	r3, pc, #600	; (adr r3, 801d3e8 <atan+0x2b0>)
 801d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d192:	ee10 0a10 	vmov	r0, s0
 801d196:	4629      	mov	r1, r5
 801d198:	f7e3 f888 	bl	80002ac <__adddf3>
 801d19c:	2200      	movs	r2, #0
 801d19e:	4baf      	ldr	r3, [pc, #700]	; (801d45c <atan+0x324>)
 801d1a0:	f7e3 fcca 	bl	8000b38 <__aeabi_dcmpgt>
 801d1a4:	2800      	cmp	r0, #0
 801d1a6:	d1e6      	bne.n	801d176 <atan+0x3e>
 801d1a8:	f04f 3aff 	mov.w	sl, #4294967295
 801d1ac:	e02b      	b.n	801d206 <atan+0xce>
 801d1ae:	f000 f963 	bl	801d478 <fabs>
 801d1b2:	4bab      	ldr	r3, [pc, #684]	; (801d460 <atan+0x328>)
 801d1b4:	429e      	cmp	r6, r3
 801d1b6:	ec55 4b10 	vmov	r4, r5, d0
 801d1ba:	f300 80bf 	bgt.w	801d33c <atan+0x204>
 801d1be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d1c2:	429e      	cmp	r6, r3
 801d1c4:	f300 80a0 	bgt.w	801d308 <atan+0x1d0>
 801d1c8:	ee10 2a10 	vmov	r2, s0
 801d1cc:	ee10 0a10 	vmov	r0, s0
 801d1d0:	462b      	mov	r3, r5
 801d1d2:	4629      	mov	r1, r5
 801d1d4:	f7e3 f86a 	bl	80002ac <__adddf3>
 801d1d8:	2200      	movs	r2, #0
 801d1da:	4ba0      	ldr	r3, [pc, #640]	; (801d45c <atan+0x324>)
 801d1dc:	f7e3 f864 	bl	80002a8 <__aeabi_dsub>
 801d1e0:	2200      	movs	r2, #0
 801d1e2:	4606      	mov	r6, r0
 801d1e4:	460f      	mov	r7, r1
 801d1e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	4629      	mov	r1, r5
 801d1ee:	f7e3 f85d 	bl	80002ac <__adddf3>
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	460b      	mov	r3, r1
 801d1f6:	4630      	mov	r0, r6
 801d1f8:	4639      	mov	r1, r7
 801d1fa:	f7e3 fb37 	bl	800086c <__aeabi_ddiv>
 801d1fe:	f04f 0a00 	mov.w	sl, #0
 801d202:	4604      	mov	r4, r0
 801d204:	460d      	mov	r5, r1
 801d206:	4622      	mov	r2, r4
 801d208:	462b      	mov	r3, r5
 801d20a:	4620      	mov	r0, r4
 801d20c:	4629      	mov	r1, r5
 801d20e:	f7e3 fa03 	bl	8000618 <__aeabi_dmul>
 801d212:	4602      	mov	r2, r0
 801d214:	460b      	mov	r3, r1
 801d216:	4680      	mov	r8, r0
 801d218:	4689      	mov	r9, r1
 801d21a:	f7e3 f9fd 	bl	8000618 <__aeabi_dmul>
 801d21e:	a374      	add	r3, pc, #464	; (adr r3, 801d3f0 <atan+0x2b8>)
 801d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d224:	4606      	mov	r6, r0
 801d226:	460f      	mov	r7, r1
 801d228:	f7e3 f9f6 	bl	8000618 <__aeabi_dmul>
 801d22c:	a372      	add	r3, pc, #456	; (adr r3, 801d3f8 <atan+0x2c0>)
 801d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d232:	f7e3 f83b 	bl	80002ac <__adddf3>
 801d236:	4632      	mov	r2, r6
 801d238:	463b      	mov	r3, r7
 801d23a:	f7e3 f9ed 	bl	8000618 <__aeabi_dmul>
 801d23e:	a370      	add	r3, pc, #448	; (adr r3, 801d400 <atan+0x2c8>)
 801d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d244:	f7e3 f832 	bl	80002ac <__adddf3>
 801d248:	4632      	mov	r2, r6
 801d24a:	463b      	mov	r3, r7
 801d24c:	f7e3 f9e4 	bl	8000618 <__aeabi_dmul>
 801d250:	a36d      	add	r3, pc, #436	; (adr r3, 801d408 <atan+0x2d0>)
 801d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d256:	f7e3 f829 	bl	80002ac <__adddf3>
 801d25a:	4632      	mov	r2, r6
 801d25c:	463b      	mov	r3, r7
 801d25e:	f7e3 f9db 	bl	8000618 <__aeabi_dmul>
 801d262:	a36b      	add	r3, pc, #428	; (adr r3, 801d410 <atan+0x2d8>)
 801d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d268:	f7e3 f820 	bl	80002ac <__adddf3>
 801d26c:	4632      	mov	r2, r6
 801d26e:	463b      	mov	r3, r7
 801d270:	f7e3 f9d2 	bl	8000618 <__aeabi_dmul>
 801d274:	a368      	add	r3, pc, #416	; (adr r3, 801d418 <atan+0x2e0>)
 801d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d27a:	f7e3 f817 	bl	80002ac <__adddf3>
 801d27e:	4642      	mov	r2, r8
 801d280:	464b      	mov	r3, r9
 801d282:	f7e3 f9c9 	bl	8000618 <__aeabi_dmul>
 801d286:	a366      	add	r3, pc, #408	; (adr r3, 801d420 <atan+0x2e8>)
 801d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d28c:	4680      	mov	r8, r0
 801d28e:	4689      	mov	r9, r1
 801d290:	4630      	mov	r0, r6
 801d292:	4639      	mov	r1, r7
 801d294:	f7e3 f9c0 	bl	8000618 <__aeabi_dmul>
 801d298:	a363      	add	r3, pc, #396	; (adr r3, 801d428 <atan+0x2f0>)
 801d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d29e:	f7e3 f803 	bl	80002a8 <__aeabi_dsub>
 801d2a2:	4632      	mov	r2, r6
 801d2a4:	463b      	mov	r3, r7
 801d2a6:	f7e3 f9b7 	bl	8000618 <__aeabi_dmul>
 801d2aa:	a361      	add	r3, pc, #388	; (adr r3, 801d430 <atan+0x2f8>)
 801d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b0:	f7e2 fffa 	bl	80002a8 <__aeabi_dsub>
 801d2b4:	4632      	mov	r2, r6
 801d2b6:	463b      	mov	r3, r7
 801d2b8:	f7e3 f9ae 	bl	8000618 <__aeabi_dmul>
 801d2bc:	a35e      	add	r3, pc, #376	; (adr r3, 801d438 <atan+0x300>)
 801d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2c2:	f7e2 fff1 	bl	80002a8 <__aeabi_dsub>
 801d2c6:	4632      	mov	r2, r6
 801d2c8:	463b      	mov	r3, r7
 801d2ca:	f7e3 f9a5 	bl	8000618 <__aeabi_dmul>
 801d2ce:	a35c      	add	r3, pc, #368	; (adr r3, 801d440 <atan+0x308>)
 801d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2d4:	f7e2 ffe8 	bl	80002a8 <__aeabi_dsub>
 801d2d8:	4632      	mov	r2, r6
 801d2da:	463b      	mov	r3, r7
 801d2dc:	f7e3 f99c 	bl	8000618 <__aeabi_dmul>
 801d2e0:	4602      	mov	r2, r0
 801d2e2:	460b      	mov	r3, r1
 801d2e4:	4640      	mov	r0, r8
 801d2e6:	4649      	mov	r1, r9
 801d2e8:	f7e2 ffe0 	bl	80002ac <__adddf3>
 801d2ec:	4622      	mov	r2, r4
 801d2ee:	462b      	mov	r3, r5
 801d2f0:	f7e3 f992 	bl	8000618 <__aeabi_dmul>
 801d2f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d2f8:	4602      	mov	r2, r0
 801d2fa:	460b      	mov	r3, r1
 801d2fc:	d14b      	bne.n	801d396 <atan+0x25e>
 801d2fe:	4620      	mov	r0, r4
 801d300:	4629      	mov	r1, r5
 801d302:	f7e2 ffd1 	bl	80002a8 <__aeabi_dsub>
 801d306:	e72c      	b.n	801d162 <atan+0x2a>
 801d308:	ee10 0a10 	vmov	r0, s0
 801d30c:	2200      	movs	r2, #0
 801d30e:	4b53      	ldr	r3, [pc, #332]	; (801d45c <atan+0x324>)
 801d310:	4629      	mov	r1, r5
 801d312:	f7e2 ffc9 	bl	80002a8 <__aeabi_dsub>
 801d316:	2200      	movs	r2, #0
 801d318:	4606      	mov	r6, r0
 801d31a:	460f      	mov	r7, r1
 801d31c:	4b4f      	ldr	r3, [pc, #316]	; (801d45c <atan+0x324>)
 801d31e:	4620      	mov	r0, r4
 801d320:	4629      	mov	r1, r5
 801d322:	f7e2 ffc3 	bl	80002ac <__adddf3>
 801d326:	4602      	mov	r2, r0
 801d328:	460b      	mov	r3, r1
 801d32a:	4630      	mov	r0, r6
 801d32c:	4639      	mov	r1, r7
 801d32e:	f7e3 fa9d 	bl	800086c <__aeabi_ddiv>
 801d332:	f04f 0a01 	mov.w	sl, #1
 801d336:	4604      	mov	r4, r0
 801d338:	460d      	mov	r5, r1
 801d33a:	e764      	b.n	801d206 <atan+0xce>
 801d33c:	4b49      	ldr	r3, [pc, #292]	; (801d464 <atan+0x32c>)
 801d33e:	429e      	cmp	r6, r3
 801d340:	dc1d      	bgt.n	801d37e <atan+0x246>
 801d342:	ee10 0a10 	vmov	r0, s0
 801d346:	2200      	movs	r2, #0
 801d348:	4b47      	ldr	r3, [pc, #284]	; (801d468 <atan+0x330>)
 801d34a:	4629      	mov	r1, r5
 801d34c:	f7e2 ffac 	bl	80002a8 <__aeabi_dsub>
 801d350:	2200      	movs	r2, #0
 801d352:	4606      	mov	r6, r0
 801d354:	460f      	mov	r7, r1
 801d356:	4b44      	ldr	r3, [pc, #272]	; (801d468 <atan+0x330>)
 801d358:	4620      	mov	r0, r4
 801d35a:	4629      	mov	r1, r5
 801d35c:	f7e3 f95c 	bl	8000618 <__aeabi_dmul>
 801d360:	2200      	movs	r2, #0
 801d362:	4b3e      	ldr	r3, [pc, #248]	; (801d45c <atan+0x324>)
 801d364:	f7e2 ffa2 	bl	80002ac <__adddf3>
 801d368:	4602      	mov	r2, r0
 801d36a:	460b      	mov	r3, r1
 801d36c:	4630      	mov	r0, r6
 801d36e:	4639      	mov	r1, r7
 801d370:	f7e3 fa7c 	bl	800086c <__aeabi_ddiv>
 801d374:	f04f 0a02 	mov.w	sl, #2
 801d378:	4604      	mov	r4, r0
 801d37a:	460d      	mov	r5, r1
 801d37c:	e743      	b.n	801d206 <atan+0xce>
 801d37e:	462b      	mov	r3, r5
 801d380:	ee10 2a10 	vmov	r2, s0
 801d384:	2000      	movs	r0, #0
 801d386:	4939      	ldr	r1, [pc, #228]	; (801d46c <atan+0x334>)
 801d388:	f7e3 fa70 	bl	800086c <__aeabi_ddiv>
 801d38c:	f04f 0a03 	mov.w	sl, #3
 801d390:	4604      	mov	r4, r0
 801d392:	460d      	mov	r5, r1
 801d394:	e737      	b.n	801d206 <atan+0xce>
 801d396:	4b36      	ldr	r3, [pc, #216]	; (801d470 <atan+0x338>)
 801d398:	4e36      	ldr	r6, [pc, #216]	; (801d474 <atan+0x33c>)
 801d39a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d39e:	4456      	add	r6, sl
 801d3a0:	449a      	add	sl, r3
 801d3a2:	e9da 2300 	ldrd	r2, r3, [sl]
 801d3a6:	f7e2 ff7f 	bl	80002a8 <__aeabi_dsub>
 801d3aa:	4622      	mov	r2, r4
 801d3ac:	462b      	mov	r3, r5
 801d3ae:	f7e2 ff7b 	bl	80002a8 <__aeabi_dsub>
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	460b      	mov	r3, r1
 801d3b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d3ba:	f7e2 ff75 	bl	80002a8 <__aeabi_dsub>
 801d3be:	f1bb 0f00 	cmp.w	fp, #0
 801d3c2:	4604      	mov	r4, r0
 801d3c4:	460d      	mov	r5, r1
 801d3c6:	f6bf aed6 	bge.w	801d176 <atan+0x3e>
 801d3ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d3ce:	461d      	mov	r5, r3
 801d3d0:	e6d1      	b.n	801d176 <atan+0x3e>
 801d3d2:	a51d      	add	r5, pc, #116	; (adr r5, 801d448 <atan+0x310>)
 801d3d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d3d8:	e6cd      	b.n	801d176 <atan+0x3e>
 801d3da:	bf00      	nop
 801d3dc:	f3af 8000 	nop.w
 801d3e0:	54442d18 	.word	0x54442d18
 801d3e4:	3ff921fb 	.word	0x3ff921fb
 801d3e8:	8800759c 	.word	0x8800759c
 801d3ec:	7e37e43c 	.word	0x7e37e43c
 801d3f0:	e322da11 	.word	0xe322da11
 801d3f4:	3f90ad3a 	.word	0x3f90ad3a
 801d3f8:	24760deb 	.word	0x24760deb
 801d3fc:	3fa97b4b 	.word	0x3fa97b4b
 801d400:	a0d03d51 	.word	0xa0d03d51
 801d404:	3fb10d66 	.word	0x3fb10d66
 801d408:	c54c206e 	.word	0xc54c206e
 801d40c:	3fb745cd 	.word	0x3fb745cd
 801d410:	920083ff 	.word	0x920083ff
 801d414:	3fc24924 	.word	0x3fc24924
 801d418:	5555550d 	.word	0x5555550d
 801d41c:	3fd55555 	.word	0x3fd55555
 801d420:	2c6a6c2f 	.word	0x2c6a6c2f
 801d424:	bfa2b444 	.word	0xbfa2b444
 801d428:	52defd9a 	.word	0x52defd9a
 801d42c:	3fadde2d 	.word	0x3fadde2d
 801d430:	af749a6d 	.word	0xaf749a6d
 801d434:	3fb3b0f2 	.word	0x3fb3b0f2
 801d438:	fe231671 	.word	0xfe231671
 801d43c:	3fbc71c6 	.word	0x3fbc71c6
 801d440:	9998ebc4 	.word	0x9998ebc4
 801d444:	3fc99999 	.word	0x3fc99999
 801d448:	54442d18 	.word	0x54442d18
 801d44c:	bff921fb 	.word	0xbff921fb
 801d450:	440fffff 	.word	0x440fffff
 801d454:	7ff00000 	.word	0x7ff00000
 801d458:	3fdbffff 	.word	0x3fdbffff
 801d45c:	3ff00000 	.word	0x3ff00000
 801d460:	3ff2ffff 	.word	0x3ff2ffff
 801d464:	40037fff 	.word	0x40037fff
 801d468:	3ff80000 	.word	0x3ff80000
 801d46c:	bff00000 	.word	0xbff00000
 801d470:	0801e960 	.word	0x0801e960
 801d474:	0801e940 	.word	0x0801e940

0801d478 <fabs>:
 801d478:	ec51 0b10 	vmov	r0, r1, d0
 801d47c:	ee10 2a10 	vmov	r2, s0
 801d480:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d484:	ec43 2b10 	vmov	d0, r2, r3
 801d488:	4770      	bx	lr

0801d48a <finite>:
 801d48a:	ee10 3a90 	vmov	r3, s1
 801d48e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d492:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d496:	0fc0      	lsrs	r0, r0, #31
 801d498:	4770      	bx	lr
 801d49a:	0000      	movs	r0, r0
 801d49c:	0000      	movs	r0, r0
	...

0801d4a0 <floor>:
 801d4a0:	ec51 0b10 	vmov	r0, r1, d0
 801d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d4ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801d4b0:	2e13      	cmp	r6, #19
 801d4b2:	460c      	mov	r4, r1
 801d4b4:	ee10 5a10 	vmov	r5, s0
 801d4b8:	4680      	mov	r8, r0
 801d4ba:	dc34      	bgt.n	801d526 <floor+0x86>
 801d4bc:	2e00      	cmp	r6, #0
 801d4be:	da16      	bge.n	801d4ee <floor+0x4e>
 801d4c0:	a335      	add	r3, pc, #212	; (adr r3, 801d598 <floor+0xf8>)
 801d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4c6:	f7e2 fef1 	bl	80002ac <__adddf3>
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	f7e3 fb33 	bl	8000b38 <__aeabi_dcmpgt>
 801d4d2:	b148      	cbz	r0, 801d4e8 <floor+0x48>
 801d4d4:	2c00      	cmp	r4, #0
 801d4d6:	da59      	bge.n	801d58c <floor+0xec>
 801d4d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d4dc:	4a30      	ldr	r2, [pc, #192]	; (801d5a0 <floor+0x100>)
 801d4de:	432b      	orrs	r3, r5
 801d4e0:	2500      	movs	r5, #0
 801d4e2:	42ab      	cmp	r3, r5
 801d4e4:	bf18      	it	ne
 801d4e6:	4614      	movne	r4, r2
 801d4e8:	4621      	mov	r1, r4
 801d4ea:	4628      	mov	r0, r5
 801d4ec:	e025      	b.n	801d53a <floor+0x9a>
 801d4ee:	4f2d      	ldr	r7, [pc, #180]	; (801d5a4 <floor+0x104>)
 801d4f0:	4137      	asrs	r7, r6
 801d4f2:	ea01 0307 	and.w	r3, r1, r7
 801d4f6:	4303      	orrs	r3, r0
 801d4f8:	d01f      	beq.n	801d53a <floor+0x9a>
 801d4fa:	a327      	add	r3, pc, #156	; (adr r3, 801d598 <floor+0xf8>)
 801d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d500:	f7e2 fed4 	bl	80002ac <__adddf3>
 801d504:	2200      	movs	r2, #0
 801d506:	2300      	movs	r3, #0
 801d508:	f7e3 fb16 	bl	8000b38 <__aeabi_dcmpgt>
 801d50c:	2800      	cmp	r0, #0
 801d50e:	d0eb      	beq.n	801d4e8 <floor+0x48>
 801d510:	2c00      	cmp	r4, #0
 801d512:	bfbe      	ittt	lt
 801d514:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d518:	fa43 f606 	asrlt.w	r6, r3, r6
 801d51c:	19a4      	addlt	r4, r4, r6
 801d51e:	ea24 0407 	bic.w	r4, r4, r7
 801d522:	2500      	movs	r5, #0
 801d524:	e7e0      	b.n	801d4e8 <floor+0x48>
 801d526:	2e33      	cmp	r6, #51	; 0x33
 801d528:	dd0b      	ble.n	801d542 <floor+0xa2>
 801d52a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d52e:	d104      	bne.n	801d53a <floor+0x9a>
 801d530:	ee10 2a10 	vmov	r2, s0
 801d534:	460b      	mov	r3, r1
 801d536:	f7e2 feb9 	bl	80002ac <__adddf3>
 801d53a:	ec41 0b10 	vmov	d0, r0, r1
 801d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d542:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801d546:	f04f 33ff 	mov.w	r3, #4294967295
 801d54a:	fa23 f707 	lsr.w	r7, r3, r7
 801d54e:	4207      	tst	r7, r0
 801d550:	d0f3      	beq.n	801d53a <floor+0x9a>
 801d552:	a311      	add	r3, pc, #68	; (adr r3, 801d598 <floor+0xf8>)
 801d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d558:	f7e2 fea8 	bl	80002ac <__adddf3>
 801d55c:	2200      	movs	r2, #0
 801d55e:	2300      	movs	r3, #0
 801d560:	f7e3 faea 	bl	8000b38 <__aeabi_dcmpgt>
 801d564:	2800      	cmp	r0, #0
 801d566:	d0bf      	beq.n	801d4e8 <floor+0x48>
 801d568:	2c00      	cmp	r4, #0
 801d56a:	da02      	bge.n	801d572 <floor+0xd2>
 801d56c:	2e14      	cmp	r6, #20
 801d56e:	d103      	bne.n	801d578 <floor+0xd8>
 801d570:	3401      	adds	r4, #1
 801d572:	ea25 0507 	bic.w	r5, r5, r7
 801d576:	e7b7      	b.n	801d4e8 <floor+0x48>
 801d578:	2301      	movs	r3, #1
 801d57a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d57e:	fa03 f606 	lsl.w	r6, r3, r6
 801d582:	4435      	add	r5, r6
 801d584:	4545      	cmp	r5, r8
 801d586:	bf38      	it	cc
 801d588:	18e4      	addcc	r4, r4, r3
 801d58a:	e7f2      	b.n	801d572 <floor+0xd2>
 801d58c:	2500      	movs	r5, #0
 801d58e:	462c      	mov	r4, r5
 801d590:	e7aa      	b.n	801d4e8 <floor+0x48>
 801d592:	bf00      	nop
 801d594:	f3af 8000 	nop.w
 801d598:	8800759c 	.word	0x8800759c
 801d59c:	7e37e43c 	.word	0x7e37e43c
 801d5a0:	bff00000 	.word	0xbff00000
 801d5a4:	000fffff 	.word	0x000fffff

0801d5a8 <matherr>:
 801d5a8:	2000      	movs	r0, #0
 801d5aa:	4770      	bx	lr
 801d5ac:	0000      	movs	r0, r0
	...

0801d5b0 <nan>:
 801d5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d5b8 <nan+0x8>
 801d5b4:	4770      	bx	lr
 801d5b6:	bf00      	nop
 801d5b8:	00000000 	.word	0x00000000
 801d5bc:	7ff80000 	.word	0x7ff80000

0801d5c0 <rint>:
 801d5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d5c2:	ec51 0b10 	vmov	r0, r1, d0
 801d5c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d5ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d5ce:	2e13      	cmp	r6, #19
 801d5d0:	460b      	mov	r3, r1
 801d5d2:	ee10 4a10 	vmov	r4, s0
 801d5d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d5da:	dc56      	bgt.n	801d68a <rint+0xca>
 801d5dc:	2e00      	cmp	r6, #0
 801d5de:	da2b      	bge.n	801d638 <rint+0x78>
 801d5e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d5e4:	4302      	orrs	r2, r0
 801d5e6:	d023      	beq.n	801d630 <rint+0x70>
 801d5e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d5ec:	4302      	orrs	r2, r0
 801d5ee:	4254      	negs	r4, r2
 801d5f0:	4314      	orrs	r4, r2
 801d5f2:	0c4b      	lsrs	r3, r1, #17
 801d5f4:	0b24      	lsrs	r4, r4, #12
 801d5f6:	045b      	lsls	r3, r3, #17
 801d5f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d5fc:	ea44 0103 	orr.w	r1, r4, r3
 801d600:	460b      	mov	r3, r1
 801d602:	492f      	ldr	r1, [pc, #188]	; (801d6c0 <rint+0x100>)
 801d604:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d608:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d60c:	4602      	mov	r2, r0
 801d60e:	4639      	mov	r1, r7
 801d610:	4630      	mov	r0, r6
 801d612:	f7e2 fe4b 	bl	80002ac <__adddf3>
 801d616:	e9cd 0100 	strd	r0, r1, [sp]
 801d61a:	463b      	mov	r3, r7
 801d61c:	4632      	mov	r2, r6
 801d61e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d622:	f7e2 fe41 	bl	80002a8 <__aeabi_dsub>
 801d626:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d62a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d62e:	4639      	mov	r1, r7
 801d630:	ec41 0b10 	vmov	d0, r0, r1
 801d634:	b003      	add	sp, #12
 801d636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d638:	4a22      	ldr	r2, [pc, #136]	; (801d6c4 <rint+0x104>)
 801d63a:	4132      	asrs	r2, r6
 801d63c:	ea01 0702 	and.w	r7, r1, r2
 801d640:	4307      	orrs	r7, r0
 801d642:	d0f5      	beq.n	801d630 <rint+0x70>
 801d644:	0852      	lsrs	r2, r2, #1
 801d646:	4011      	ands	r1, r2
 801d648:	430c      	orrs	r4, r1
 801d64a:	d00b      	beq.n	801d664 <rint+0xa4>
 801d64c:	ea23 0202 	bic.w	r2, r3, r2
 801d650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d654:	2e13      	cmp	r6, #19
 801d656:	fa43 f306 	asr.w	r3, r3, r6
 801d65a:	bf0c      	ite	eq
 801d65c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d660:	2400      	movne	r4, #0
 801d662:	4313      	orrs	r3, r2
 801d664:	4916      	ldr	r1, [pc, #88]	; (801d6c0 <rint+0x100>)
 801d666:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d66a:	4622      	mov	r2, r4
 801d66c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d670:	4620      	mov	r0, r4
 801d672:	4629      	mov	r1, r5
 801d674:	f7e2 fe1a 	bl	80002ac <__adddf3>
 801d678:	e9cd 0100 	strd	r0, r1, [sp]
 801d67c:	4622      	mov	r2, r4
 801d67e:	462b      	mov	r3, r5
 801d680:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d684:	f7e2 fe10 	bl	80002a8 <__aeabi_dsub>
 801d688:	e7d2      	b.n	801d630 <rint+0x70>
 801d68a:	2e33      	cmp	r6, #51	; 0x33
 801d68c:	dd07      	ble.n	801d69e <rint+0xde>
 801d68e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d692:	d1cd      	bne.n	801d630 <rint+0x70>
 801d694:	ee10 2a10 	vmov	r2, s0
 801d698:	f7e2 fe08 	bl	80002ac <__adddf3>
 801d69c:	e7c8      	b.n	801d630 <rint+0x70>
 801d69e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d6a2:	f04f 32ff 	mov.w	r2, #4294967295
 801d6a6:	40f2      	lsrs	r2, r6
 801d6a8:	4210      	tst	r0, r2
 801d6aa:	d0c1      	beq.n	801d630 <rint+0x70>
 801d6ac:	0852      	lsrs	r2, r2, #1
 801d6ae:	4210      	tst	r0, r2
 801d6b0:	bf1f      	itttt	ne
 801d6b2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d6b6:	ea20 0202 	bicne.w	r2, r0, r2
 801d6ba:	4134      	asrne	r4, r6
 801d6bc:	4314      	orrne	r4, r2
 801d6be:	e7d1      	b.n	801d664 <rint+0xa4>
 801d6c0:	0801e980 	.word	0x0801e980
 801d6c4:	000fffff 	.word	0x000fffff

0801d6c8 <scalbn>:
 801d6c8:	b570      	push	{r4, r5, r6, lr}
 801d6ca:	ec55 4b10 	vmov	r4, r5, d0
 801d6ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d6d2:	4606      	mov	r6, r0
 801d6d4:	462b      	mov	r3, r5
 801d6d6:	b9aa      	cbnz	r2, 801d704 <scalbn+0x3c>
 801d6d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d6dc:	4323      	orrs	r3, r4
 801d6de:	d03b      	beq.n	801d758 <scalbn+0x90>
 801d6e0:	4b31      	ldr	r3, [pc, #196]	; (801d7a8 <scalbn+0xe0>)
 801d6e2:	4629      	mov	r1, r5
 801d6e4:	2200      	movs	r2, #0
 801d6e6:	ee10 0a10 	vmov	r0, s0
 801d6ea:	f7e2 ff95 	bl	8000618 <__aeabi_dmul>
 801d6ee:	4b2f      	ldr	r3, [pc, #188]	; (801d7ac <scalbn+0xe4>)
 801d6f0:	429e      	cmp	r6, r3
 801d6f2:	4604      	mov	r4, r0
 801d6f4:	460d      	mov	r5, r1
 801d6f6:	da12      	bge.n	801d71e <scalbn+0x56>
 801d6f8:	a327      	add	r3, pc, #156	; (adr r3, 801d798 <scalbn+0xd0>)
 801d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6fe:	f7e2 ff8b 	bl	8000618 <__aeabi_dmul>
 801d702:	e009      	b.n	801d718 <scalbn+0x50>
 801d704:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d708:	428a      	cmp	r2, r1
 801d70a:	d10c      	bne.n	801d726 <scalbn+0x5e>
 801d70c:	ee10 2a10 	vmov	r2, s0
 801d710:	4620      	mov	r0, r4
 801d712:	4629      	mov	r1, r5
 801d714:	f7e2 fdca 	bl	80002ac <__adddf3>
 801d718:	4604      	mov	r4, r0
 801d71a:	460d      	mov	r5, r1
 801d71c:	e01c      	b.n	801d758 <scalbn+0x90>
 801d71e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d722:	460b      	mov	r3, r1
 801d724:	3a36      	subs	r2, #54	; 0x36
 801d726:	4432      	add	r2, r6
 801d728:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d72c:	428a      	cmp	r2, r1
 801d72e:	dd0b      	ble.n	801d748 <scalbn+0x80>
 801d730:	ec45 4b11 	vmov	d1, r4, r5
 801d734:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d7a0 <scalbn+0xd8>
 801d738:	f000 f83c 	bl	801d7b4 <copysign>
 801d73c:	a318      	add	r3, pc, #96	; (adr r3, 801d7a0 <scalbn+0xd8>)
 801d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d742:	ec51 0b10 	vmov	r0, r1, d0
 801d746:	e7da      	b.n	801d6fe <scalbn+0x36>
 801d748:	2a00      	cmp	r2, #0
 801d74a:	dd08      	ble.n	801d75e <scalbn+0x96>
 801d74c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d750:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d758:	ec45 4b10 	vmov	d0, r4, r5
 801d75c:	bd70      	pop	{r4, r5, r6, pc}
 801d75e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d762:	da0d      	bge.n	801d780 <scalbn+0xb8>
 801d764:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d768:	429e      	cmp	r6, r3
 801d76a:	ec45 4b11 	vmov	d1, r4, r5
 801d76e:	dce1      	bgt.n	801d734 <scalbn+0x6c>
 801d770:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d798 <scalbn+0xd0>
 801d774:	f000 f81e 	bl	801d7b4 <copysign>
 801d778:	a307      	add	r3, pc, #28	; (adr r3, 801d798 <scalbn+0xd0>)
 801d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d77e:	e7e0      	b.n	801d742 <scalbn+0x7a>
 801d780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d784:	3236      	adds	r2, #54	; 0x36
 801d786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d78a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d78e:	4620      	mov	r0, r4
 801d790:	4629      	mov	r1, r5
 801d792:	2200      	movs	r2, #0
 801d794:	4b06      	ldr	r3, [pc, #24]	; (801d7b0 <scalbn+0xe8>)
 801d796:	e7b2      	b.n	801d6fe <scalbn+0x36>
 801d798:	c2f8f359 	.word	0xc2f8f359
 801d79c:	01a56e1f 	.word	0x01a56e1f
 801d7a0:	8800759c 	.word	0x8800759c
 801d7a4:	7e37e43c 	.word	0x7e37e43c
 801d7a8:	43500000 	.word	0x43500000
 801d7ac:	ffff3cb0 	.word	0xffff3cb0
 801d7b0:	3c900000 	.word	0x3c900000

0801d7b4 <copysign>:
 801d7b4:	ec51 0b10 	vmov	r0, r1, d0
 801d7b8:	ee11 0a90 	vmov	r0, s3
 801d7bc:	ee10 2a10 	vmov	r2, s0
 801d7c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d7c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d7c8:	ea41 0300 	orr.w	r3, r1, r0
 801d7cc:	ec43 2b10 	vmov	d0, r2, r3
 801d7d0:	4770      	bx	lr
	...

0801d7d4 <_init>:
 801d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7d6:	bf00      	nop
 801d7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7da:	bc08      	pop	{r3}
 801d7dc:	469e      	mov	lr, r3
 801d7de:	4770      	bx	lr

0801d7e0 <_fini>:
 801d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7e2:	bf00      	nop
 801d7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7e6:	bc08      	pop	{r3}
 801d7e8:	469e      	mov	lr, r3
 801d7ea:	4770      	bx	lr
