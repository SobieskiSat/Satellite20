
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  0801b890  0801b890  0002b890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6a8  0801c6a8  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c6a8  0801c6a8  0002c6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6b0  0801c6b0  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6b0  0801c6b0  0002c6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6b4  0801c6b4  0002c6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801c6b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083c4  20000370  0801ca24  00030370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008734  0801ca24  00038734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004351f  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b0d  00000000  00000000  000738bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002820  00000000  00000000  0007b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024e8  00000000  00000000  0007dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d321  00000000  00000000  000800d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002aeea  00000000  00000000  000ad3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d73f6  00000000  00000000  000d82db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001af6d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b8c0  00000000  00000000  001af74c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001bb00c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b874 	.word	0x0801b874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801b874 	.word	0x0801b874

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	printBuffer[printLen + 2] = '\0';
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
 8001066:	edc7 0a00 	vstr	s1, [r7]
	TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <setMotors+0x88>)
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <setMotors+0x88>)
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <setMotors+0x88>)
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010a2:	edd7 7a00 	vldr	s15, [r7]
 80010a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <setMotors+0x88>)
 80010b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b4:	ee17 2a90 	vmov	r2, s15
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
	TIM5->CNT = 0;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <setMotors+0x88>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <setMotors+0x8c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2104      	movs	r1, #4
 80010ca:	4808      	ldr	r0, [pc, #32]	; (80010ec <setMotors+0x90>)
 80010cc:	f005 fe30 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2101      	movs	r1, #1
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <setMotors+0x90>)
 80010d6:	f005 fe2b 	bl	8006d30 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40000c00 	.word	0x40000c00
 80010e8:	40000800 	.word	0x40000800
 80010ec:	40020000 	.word	0x40020000

080010f0 <haltMotors>:

void haltMotors(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <haltMotors+0x24>)
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <haltMotors+0x24>)
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <haltMotors+0x24>)
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <haltMotors+0x24>)
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <haltMotors+0x28>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40000c00 	.word	0x40000c00
 8001118:	40000800 	.word	0x40000800

0800111c <enableMotors>:

void enableMotors(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	haltMotors();
 8001120:	f7ff ffe6 	bl	80010f0 <haltMotors>

	//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
	//setPwmFrequency(MAX_PWM_FREQ);

	motL_forward = true;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <enableMotors+0x5c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <enableMotors+0x60>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <enableMotors+0x5c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	2101      	movs	r1, #1
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <enableMotors+0x64>)
 800113a:	f005 fdf9 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <enableMotors+0x60>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	2104      	movs	r1, #4
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <enableMotors+0x64>)
 8001148:	f005 fdf2 	bl	8006d30 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 800114c:	f013 fd3e 	bl	8014bcc <Get_TIM5_Instance>
 8001150:	4603      	mov	r3, r0
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fd1d 	bl	800bb94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 800115a:	f013 fd37 	bl	8014bcc <Get_TIM5_Instance>
 800115e:	4603      	mov	r3, r0
 8001160:	210c      	movs	r1, #12
 8001162:	4618      	mov	r0, r3
 8001164:	f00a fd16 	bl	800bb94 <HAL_TIM_PWM_Start>

	haltMotors();
 8001168:	f7ff ffc2 	bl	80010f0 <haltMotors>
	println("[MOT] MOTORS ENABLED!!");
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <enableMotors+0x68>)
 800116e:	f7ff ff6b 	bl	8001048 <println>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	20000001 	.word	0x20000001
 8001180:	40020000 	.word	0x40020000
 8001184:	0801b890 	.word	0x0801b890

08001188 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800118e:	f011 fd3d 	bl	8012c0c <BSP_SD_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_init+0x14>
 8001198:	2303      	movs	r3, #3
 800119a:	e027      	b.n	80011ec <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800119c:	4815      	ldr	r0, [pc, #84]	; (80011f4 <SD_init+0x6c>)
 800119e:	f011 fd27 	bl	8012bf0 <FATFS_UnLinkDriver>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SD_init+0x24>
 80011a8:	2303      	movs	r3, #3
 80011aa:	e01f      	b.n	80011ec <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 80011ac:	4911      	ldr	r1, [pc, #68]	; (80011f4 <SD_init+0x6c>)
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <SD_init+0x70>)
 80011b0:	f011 fcd6 	bl	8012b60 <FATFS_LinkDriver>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SD_init+0x36>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e016      	b.n	80011ec <SD_init+0x64>

	f_mount(0, SDPath, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <SD_init+0x6c>)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f010 ff24 	bl	8012010 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	490a      	ldr	r1, [pc, #40]	; (80011f4 <SD_init+0x6c>)
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <SD_init+0x74>)
 80011ce:	f010 ff1f 	bl	8012010 <f_mount>
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	4905      	ldr	r1, [pc, #20]	; (80011f4 <SD_init+0x6c>)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f010 ff15 	bl	8012010 <f_mount>
		return mountStatus;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	e000      	b.n	80011ec <SD_init+0x64>
	}

	return FR_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20004b14 	.word	0x20004b14
 80011f8:	0801c338 	.word	0x0801c338
 80011fc:	20001828 	.word	0x20001828

08001200 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 8001208:	2208      	movs	r2, #8
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <SD_newFile+0x44>)
 800120e:	f010 ff45 	bl	801209c <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <SD_newFile+0x48>)
 8001218:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <SD_newFile+0x48>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <SD_newFile+0x4c>)
 8001226:	2000      	movs	r0, #0
 8001228:	f010 fef2 	bl	8012010 <f_mount>
		return stato;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SD_newFile+0x48>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	e004      	b.n	800123c <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <SD_newFile+0x44>)
 8001234:	f011 fb10 	bl	8012858 <f_close>
	return stato;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <SD_newFile+0x48>)
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200007f8 	.word	0x200007f8
 8001248:	200007f4 	.word	0x200007f4
 800124c:	20004b14 	.word	0x20004b14

08001250 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 800125a:	2232      	movs	r2, #50	; 0x32
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4815      	ldr	r0, [pc, #84]	; (80012b4 <SD_writeToFile+0x64>)
 8001260:	f010 ff1c 	bl	801209c <f_open>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <SD_writeToFile+0x68>)
 800126a:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <SD_writeToFile+0x68>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <SD_writeToFile+0x2a>
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <SD_writeToFile+0x68>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	e017      	b.n	80012aa <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7fe ffb2 	bl	80001e4 <strlen>
 8001280:	4602      	mov	r2, r0
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <SD_writeToFile+0x6c>)
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <SD_writeToFile+0x64>)
 8001288:	f011 f8d4 	bl	8012434 <f_write>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <SD_writeToFile+0x68>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <SD_writeToFile+0x68>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <SD_writeToFile+0x52>
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SD_writeToFile+0x68>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	e003      	b.n	80012aa <SD_writeToFile+0x5a>

	return f_close(&fileo);
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <SD_writeToFile+0x64>)
 80012a4:	f011 fad8 	bl	8012858 <f_close>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200007f8 	.word	0x200007f8
 80012b8:	200007f4 	.word	0x200007f4
 80012bc:	2000285c 	.word	0x2000285c

080012c0 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f011 faef 	bl	80128ac <f_mkdir>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 80012e4:	1cf9      	adds	r1, r7, #3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	2201      	movs	r2, #1
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f00a f83c 	bl	800b36a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80012f2:	bf00      	nop
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f00a fb0e 	bl	800b916 <HAL_SPI_GetState>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d1f9      	bne.n	80012f4 <SX1278_write+0x1c>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a18      	ldr	r0, [r3, #32]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	8a5b      	ldrh	r3, [r3, #18]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	f005 fd04 	bl	8006d30 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f7ff ffce 	bl	80012d8 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	78ba      	ldrb	r2, [r7, #2]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffc7 	bl	80012d8 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a18      	ldr	r0, [r3, #32]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	8a5b      	ldrh	r3, [r3, #18]
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	f005 fceb 	bl	8006d30 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	461a      	mov	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	72fb      	strb	r3, [r7, #11]
 8001372:	4613      	mov	r3, r2
 8001374:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d92d      	bls.n	80013d8 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a18      	ldr	r0, [r3, #32]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8a5b      	ldrh	r3, [r3, #18]
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	f005 fcd2 	bl	8006d30 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff ff9c 	bl	80012d8 <SX1278_write>
	for (i = 0; i < len; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]
 80013a4:	e00b      	b.n	80013be <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff ff90 	bl	80012d8 <SX1278_write>
	for (i = 0; i < len; i++)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3301      	adds	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
 80013be:	7dfa      	ldrb	r2, [r7, #23]
 80013c0:	7abb      	ldrb	r3, [r7, #10]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3ef      	bcc.n	80013a6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a18      	ldr	r0, [r3, #32]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8a5b      	ldrh	r3, [r3, #18]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f005 fcad 	bl	8006d30 <HAL_GPIO_WritePin>
 80013d6:	e000      	b.n	80013da <SX1278_command_burst+0x78>
	if (len <= 1) return;
 80013d8:	bf00      	nop
}
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 80013f0:	f107 020e 	add.w	r2, r7, #14
 80013f4:	f107 010f 	add.w	r1, r7, #15
 80013f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f00a f8e6 	bl	800b5d2 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001406:	bf00      	nop
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f00a fa84 	bl	800b916 <HAL_SPI_GetState>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d1f9      	bne.n	8001408 <SX1278_read+0x28>

	return rxByte;
 8001414:	7bbb      	ldrb	r3, [r7, #14]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a18      	ldr	r0, [r3, #32]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	8a5b      	ldrh	r3, [r3, #18]
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	f005 fc7b 	bl	8006d30 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff48 	bl	80012d8 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ffc7 	bl	80013e0 <SX1278_read>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a18      	ldr	r0, [r3, #32]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8a5b      	ldrh	r3, [r3, #18]
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f005 fc65 	bl	8006d30 <HAL_GPIO_WritePin>

	return recv;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
 8001480:	4613      	mov	r3, r2
 8001482:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d92b      	bls.n	80014e2 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a18      	ldr	r0, [r3, #32]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8a5b      	ldrh	r3, [r3, #18]
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f005 fc4b 	bl	8006d30 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	7afa      	ldrb	r2, [r7, #11]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff18 	bl	80012d8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
 80014ac:	e00c      	b.n	80014c8 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	18d4      	adds	r4, r2, r3
 80014b8:	4608      	mov	r0, r1
 80014ba:	f7ff ff91 	bl	80013e0 <SX1278_read>
 80014be:	4603      	mov	r3, r0
 80014c0:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	3301      	adds	r3, #1
 80014c6:	75fb      	strb	r3, [r7, #23]
 80014c8:	7dfa      	ldrb	r2, [r7, #23]
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3ee      	bcc.n	80014ae <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a18      	ldr	r0, [r3, #32]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8a5b      	ldrh	r3, [r3, #18]
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f005 fc28 	bl	8006d30 <HAL_GPIO_WritePin>
 80014e0:	e000      	b.n	80014e4 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80014e2:	bf00      	nop
}
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
	...

080014ec <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	inst->active = false;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
	SX1278_reset(inst);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa2c 	bl	800195a <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 8001502:	2142      	movs	r1, #66	; 0x42
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff8a 	bl	800141e <SX1278_read_address>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d001      	beq.n	8001518 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001514:	2300      	movs	r3, #0
 8001516:	e0d7      	b.n	80016c8 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f9fe 	bl	800191a <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800151e:	2288      	movs	r2, #136	; 0x88
 8001520:	2101      	movs	r1, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fef0 	bl	8001308 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f04f 0400 	mov.w	r4, #0
 8001530:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <SX1278_init+0x1e4>)
 8001532:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <SX1278_init+0x1e4>)
 8001538:	e9d3 1200 	ldrd	r1, r2, [r3]
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	f04f 0400 	mov.w	r4, #0
 8001544:	0394      	lsls	r4, r2, #14
 8001546:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 800154a:	038b      	lsls	r3, r1, #14
 800154c:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <SX1278_init+0x1e4>)
 800154e:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <SX1278_init+0x1e4>)
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <SX1278_init+0x1e8>)
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f7ff fbf3 	bl	8000d48 <__aeabi_uldivmod>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <SX1278_init+0x1e4>)
 8001568:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 800156c:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <SX1278_init+0x1ec>)
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <SX1278_init+0x1e4>)
 8001570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001574:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <SX1278_init+0x1ec>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	461a      	mov	r2, r3
 800157e:	2106      	movs	r1, #6
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fec1 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 8001586:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <SX1278_init+0x1ec>)
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	461a      	mov	r2, r3
 800158c:	2107      	movs	r1, #7
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff feba 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <SX1278_init+0x1ec>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	2108      	movs	r1, #8
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff feb3 	bl	8001308 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	461a      	mov	r2, r3
 80015a8:	2109      	movs	r1, #9
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff feac 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80015b0:	222b      	movs	r2, #43	; 0x2b
 80015b2:	210b      	movs	r1, #11
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fea7 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80015ba:	2223      	movs	r2, #35	; 0x23
 80015bc:	210c      	movs	r1, #12
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fea2 	bl	8001308 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80015c4:	2287      	movs	r2, #135	; 0x87
 80015c6:	214d      	movs	r1, #77	; 0x4d
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe9d 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80015ce:	2200      	movs	r2, #0
 80015d0:	2124      	movs	r1, #36	; 0x24
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe98 	bl	8001308 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	795b      	ldrb	r3, [r3, #5]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	d139      	bne.n	8001654 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	79db      	ldrb	r3, [r3, #7]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	799b      	ldrb	r3, [r3, #6]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	211d      	movs	r1, #29
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fe83 	bl	8001308 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	795b      	ldrb	r3, [r3, #5]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	b2da      	uxtb	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7a1b      	ldrb	r3, [r3, #8]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	211e      	movs	r1, #30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fe74 	bl	8001308 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 8001620:	2131      	movs	r1, #49	; 0x31
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fefb 	bl	800141e <SX1278_read_address>
 8001628:	4603      	mov	r3, r0
 800162a:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001634:	7bbb      	ldrb	r3, [r7, #14]
 8001636:	f043 0305 	orr.w	r3, r3, #5
 800163a:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	461a      	mov	r2, r3
 8001640:	2131      	movs	r1, #49	; 0x31
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe60 	bl	8001308 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001648:	220c      	movs	r2, #12
 800164a:	2137      	movs	r1, #55	; 0x37
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fe5b 	bl	8001308 <SX1278_command>
 8001652:	e01d      	b.n	8001690 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	79db      	ldrb	r3, [r3, #7]
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	b2da      	uxtb	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	799b      	ldrb	r3, [r3, #6]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	211d      	movs	r1, #29
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe4b 	bl	8001308 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	795b      	ldrb	r3, [r3, #5]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a1b      	ldrb	r3, [r3, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	211e      	movs	r1, #30
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe3c 	bl	8001308 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 8001690:	2264      	movs	r2, #100	; 0x64
 8001692:	211f      	movs	r1, #31
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fe37 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe32 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80016a4:	220c      	movs	r2, #12
 80016a6:	2121      	movs	r1, #33	; 0x21
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fe2d 	bl	8001308 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80016ae:	2201      	movs	r2, #1
 80016b0:	2141      	movs	r1, #65	; 0x41
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fe28 	bl	8001308 <SX1278_command>

	SX1278_standby(inst);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f93e 	bl	800193a <SX1278_standby>

	inst->active = true;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
	return true;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000390 	.word	0x20000390
 80016d4:	000f4240 	.word	0x000f4240
 80016d8:	20000398 	.word	0x20000398

080016dc <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d12b      	bne.n	800174a <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f8e1 	bl	80018c2 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	461a      	mov	r2, r3
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f824 	bl	8001754 <SX1278_tx_input>
		SX1278_tx_push(inst);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f843 	bl	8001798 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001724:	2301      	movs	r3, #1
 8001726:	e011      	b.n	800174c <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001728:	bf00      	nop
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8a1b      	ldrh	r3, [r3, #16]
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f005 fae3 	bl	8006d00 <HAL_GPIO_ReadPin>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f4      	beq.n	800172a <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f836 	bl	80017b2 <SX1278_tx_finish>
 8001746:	4603      	mov	r3, r0
 8001748:	e000      	b.n	800174c <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 800174a:	2300      	movs	r3, #0
	}
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SX1278_tx_input>:
}

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	461a      	mov	r2, r3
 8001766:	2122      	movs	r1, #34	; 0x22
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fdcd 	bl	8001308 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	2100      	movs	r1, #0
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fdf4 	bl	8001362 <SX1278_command_burst>

	sprintf(inst->lastPacket, (char*)txBuffer);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f203 133d 	addw	r3, r3, #317	; 0x13d
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	4618      	mov	r0, r3
 8001784:	f015 fc56 	bl	8017034 <siprintf>

	inst->txLen = length;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 80017a0:	228b      	movs	r2, #139	; 0x8b
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fdaf 	bl	8001308 <SX1278_command>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80017ba:	2112      	movs	r1, #18
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fe2e 	bl	800141e <SX1278_read_address>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bfcc      	ite	gt
 80017da:	2301      	movgt	r3, #1
 80017dc:	2300      	movle	r3, #0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f968 	bl	8001abc <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f8a4 	bl	800193a <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f921 	bl	8001a4c <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	333d      	adds	r3, #61	; 0x3d
 800180e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f014 fd08 	bl	801622a <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 800181a:	2110      	movs	r1, #16
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fdfe 	bl	800141e <SX1278_read_address>
 8001822:	4603      	mov	r3, r0
 8001824:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	461a      	mov	r2, r3
 800182a:	210d      	movs	r1, #13
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fd6b 	bl	8001308 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	795b      	ldrb	r3, [r3, #5]
 8001836:	2b06      	cmp	r3, #6
 8001838:	d104      	bne.n	8001844 <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e005      	b.n	8001850 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001844:	2113      	movs	r1, #19
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fde9 	bl	800141e <SX1278_read_address>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 023d 	add.w	r2, r3, #61	; 0x3d
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2100      	movs	r1, #0
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe08 	bl	8001470 <SX1278_read_burst>

	inst->newPacket = (!inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f927 	bl	8001ad6 <SX1278_getRSSI>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SX1278_clearLoRaIrq(inst);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f910 	bl	8001abc <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f84c 	bl	800193a <SX1278_standby>


	sprintf(inst->lastPacket, (char*)inst->rxBuffer);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f203 123d 	addw	r2, r3, #317	; 0x13d
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	333d      	adds	r3, #61	; 0x3d
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f015 fbc0 	bl	8017034 <siprintf>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8f6 	bl	8001abc <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 80018d0:	2241      	movs	r2, #65	; 0x41
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff fd17 	bl	8001308 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 80018da:	22f7      	movs	r2, #247	; 0xf7
 80018dc:	2111      	movs	r1, #17
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd12 	bl	8001308 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 80018e4:	210e      	movs	r1, #14
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fd99 	bl	800141e <SX1278_read_address>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	461a      	mov	r2, r3
 80018f4:	210d      	movs	r1, #13
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd06 	bl	8001308 <SX1278_command>

	inst->txLen = 0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	inst->txDone = false;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	731a      	strb	r2, [r3, #12]
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <SX1278_sleep>:
	inst->mode = RX;
	//println("[LoRa] Finished setting RX mode.");
}

void SX1278_sleep(SX1278* inst)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001922:	2208      	movs	r2, #8
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fcee 	bl	8001308 <SX1278_command>
	inst->mode = SLEEP;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	731a      	strb	r2, [r3, #12]
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001942:	2209      	movs	r2, #9
 8001944:	2101      	movs	r1, #1
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fcde 	bl	8001308 <SX1278_command>
	inst->mode = STANDBY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	731a      	strb	r2, [r3, #12]
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inst->txLen = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	inst->rxLen = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	inst->mode = SLEEP;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a18      	ldr	r0, [r3, #32]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	8a5b      	ldrh	r3, [r3, #18]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	f005 f9b9 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6998      	ldr	r0, [r3, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	89db      	ldrh	r3, [r3, #14]
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f005 f9b1 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f004 fb30 	bl	8006034 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6998      	ldr	r0, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	89db      	ldrh	r3, [r3, #14]
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	f005 f9a6 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019e4:	2064      	movs	r0, #100	; 0x64
 80019e6:	f004 fb25 	bl	8006034 <HAL_Delay>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01e      	beq.n	8001a42 <SX1278_dio0_IRQ+0x50>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7b1b      	ldrb	r3, [r3, #12]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d104      	bne.n	8001a20 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fecb 	bl	80017b2 <SX1278_tx_finish>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	e011      	b.n	8001a44 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7b1b      	ldrb	r3, [r3, #12]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d104      	bne.n	8001a32 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fee7 	bl	80017fc <SX1278_rx_get_packet>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	e008      	b.n	8001a44 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f842 	bl	8001abc <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff7e 	bl	800193a <SX1278_standby>
			return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001a42:	2300      	movs	r3, #0
	}
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001a54:	2112      	movs	r1, #18
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fce1 	bl	800141e <SX1278_read_address>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bfcc      	ite	gt
 8001a74:	2301      	movgt	r3, #1
 8001a76:	2300      	movle	r3, #0
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bfcc      	ite	gt
 8001a8e:	2301      	movgt	r3, #1
 8001a90:	2300      	movle	r3, #0
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bfcc      	ite	gt
 8001aa8:	2301      	movgt	r3, #1
 8001aaa:	2300      	movle	r3, #0
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	2112      	movs	r1, #18
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fc1d 	bl	8001308 <SX1278_command>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001ade:	211a      	movs	r1, #26
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fc9c 	bl	800141e <SX1278_read_address>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	3ba4      	subs	r3, #164	; 0xa4
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001af2:	b590      	push	{r4, r7, lr}
 8001af4:	b08b      	sub	sp, #44	; 0x2c
 8001af6:	af04      	add	r7, sp, #16
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	461a      	mov	r2, r3
 8001afe:	460b      	mov	r3, r1
 8001b00:	72fb      	strb	r3, [r7, #11]
 8001b02:	4613      	mov	r3, r2
 8001b04:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	889b      	ldrh	r3, [r3, #4]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	b29c      	uxth	r4, r3
 8001b16:	7abb      	ldrb	r3, [r7, #10]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	8af9      	ldrh	r1, [r7, #22]
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	9202      	str	r2, [sp, #8]
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	f005 fb56 	bl	80071dc <HAL_I2C_Mem_Read>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <read_data+0x48>
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <read_data+0x4a>
	else return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}

08001b44 <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
 8001b50:	4613      	mov	r3, r2
 8001b52:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	89f9      	ldrh	r1, [r7, #14]
 8001b66:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	1cbb      	adds	r3, r7, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	f005 fa37 	bl	8006fe8 <HAL_I2C_Mem_Write>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <write_register8+0x40>
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <write_register8+0x42>
	else return true;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b08a      	sub	sp, #40	; 0x28
 8001b92:	af04      	add	r7, sp, #16
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	460b      	mov	r3, r1
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	8af9      	ldrh	r1, [r7, #22]
 8001bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f005 fb0c 	bl	80071dc <HAL_I2C_Mem_Read>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10b      	bne.n	8001be2 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001bca:	7d7b      	ldrb	r3, [r7, #21]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	7d3b      	ldrb	r3, [r7, #20]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	801a      	strh	r2, [r3, #0]
		return true;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <read_register16+0x56>
	}
	else return false;
 8001be2:	2300      	movs	r3, #0

}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2188      	movs	r1, #136	; 0x88
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffc6 	bl	8001b8e <read_register16>
 8001c02:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d06f      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	330e      	adds	r3, #14
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	218a      	movs	r1, #138	; 0x8a
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffbc 	bl	8001b8e <read_register16>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d065      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	461a      	mov	r2, r3
 8001c22:	218c      	movs	r1, #140	; 0x8c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffb2 	bl	8001b8e <read_register16>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3312      	adds	r3, #18
 8001c34:	461a      	mov	r2, r3
 8001c36:	218e      	movs	r1, #142	; 0x8e
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffa8 	bl	8001b8e <read_register16>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d051      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3314      	adds	r3, #20
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2190      	movs	r1, #144	; 0x90
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff9e 	bl	8001b8e <read_register16>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d047      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3316      	adds	r3, #22
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2192      	movs	r1, #146	; 0x92
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff94 	bl	8001b8e <read_register16>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03d      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3318      	adds	r3, #24
 8001c70:	461a      	mov	r2, r3
 8001c72:	2194      	movs	r1, #148	; 0x94
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff8a 	bl	8001b8e <read_register16>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d033      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	331a      	adds	r3, #26
 8001c84:	461a      	mov	r2, r3
 8001c86:	2196      	movs	r1, #150	; 0x96
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff80 	bl	8001b8e <read_register16>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d029      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	331c      	adds	r3, #28
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2198      	movs	r1, #152	; 0x98
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff76 	bl	8001b8e <read_register16>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01f      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	331e      	adds	r3, #30
 8001cac:	461a      	mov	r2, r3
 8001cae:	219a      	movs	r1, #154	; 0x9a
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff6c 	bl	8001b8e <read_register16>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	219c      	movs	r1, #156	; 0x9c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff62 	bl	8001b8e <read_register16>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3322      	adds	r3, #34	; 0x22
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	219e      	movs	r1, #158	; 0x9e
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff58 	bl	8001b8e <read_register16>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <read_calibration_data+0xfc>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <read_calibration_data+0xfe>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	2b76      	cmp	r3, #118	; 0x76
 8001d10:	d005      	beq.n	8001d1e <bmp280_init+0x26>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	889b      	ldrh	r3, [r3, #4]
 8001d16:	2b77      	cmp	r3, #119	; 0x77
 8001d18:	d001      	beq.n	8001d1e <bmp280_init+0x26>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e073      	b.n	8001e06 <bmp280_init+0x10e>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	1d9a      	adds	r2, r3, #6
 8001d22:	2301      	movs	r3, #1
 8001d24:	21d0      	movs	r1, #208	; 0xd0
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fee3 	bl	8001af2 <read_data>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <bmp280_init+0x3e>
 8001d32:	2300      	movs	r3, #0
 8001d34:	e067      	b.n	8001e06 <bmp280_init+0x10e>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	799b      	ldrb	r3, [r3, #6]
 8001d3a:	2b58      	cmp	r3, #88	; 0x58
 8001d3c:	d001      	beq.n	8001d42 <bmp280_init+0x4a>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e061      	b.n	8001e06 <bmp280_init+0x10e>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001d42:	22b6      	movs	r2, #182	; 0xb6
 8001d44:	21e0      	movs	r1, #224	; 0xe0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fefc 	bl	8001b44 <write_register8>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <bmp280_init+0x5e>
 8001d52:	2300      	movs	r3, #0
 8001d54:	e057      	b.n	8001e06 <bmp280_init+0x10e>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001d56:	f107 020d 	add.w	r2, r7, #13
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	21f3      	movs	r1, #243	; 0xf3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fec7 	bl	8001af2 <read_data>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f5      	bne.n	8001d56 <bmp280_init+0x5e>
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <bmp280_init+0x5e>
	}

	if (!read_calibration_data(inst)) return false;
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff39 	bl	8001bec <read_calibration_data>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d100      	bne.n	8001d88 <bmp280_init+0x90>
 8001d86:	e001      	b.n	8001d8c <bmp280_init+0x94>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e03c      	b.n	8001e06 <bmp280_init+0x10e>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	461a      	mov	r2, r3
 8001da6:	21f5      	movs	r1, #245	; 0xf5
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fecb 	bl	8001b44 <write_register8>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <bmp280_init+0xc0>
 8001db4:	2300      	movs	r3, #0
 8001db6:	e026      	b.n	8001e06 <bmp280_init+0x10e>

	if (params->mode == BMP280_MODE_FORCED) {
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <bmp280_init+0xce>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	78db      	ldrb	r3, [r3, #3]
 8001dca:	015b      	lsls	r3, r3, #5
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	461a      	mov	r2, r3
 8001dea:	21f4      	movs	r1, #244	; 0xf4
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fea9 	bl	8001b44 <write_register8>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <bmp280_init+0x104>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e004      	b.n	8001e06 <bmp280_init+0x10e>

	inst->active = true;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return true;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	10da      	asrs	r2, r3, #3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	899b      	ldrh	r3, [r3, #12]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001e30:	12db      	asrs	r3, r3, #11
 8001e32:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	111b      	asrs	r3, r3, #4
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	8992      	ldrh	r2, [r2, #12]
 8001e3c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	1112      	asrs	r2, r2, #4
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	8989      	ldrh	r1, [r1, #12]
 8001e46:	1a52      	subs	r2, r2, r1
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001e58:	139b      	asrs	r3, r3, #14
 8001e5a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3380      	adds	r3, #128	; 0x80
 8001e72:	121b      	asrs	r3, r3, #8
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001e80:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001e84:	b08a      	sub	sp, #40	; 0x28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4619      	mov	r1, r3
 8001e92:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e96:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001e9a:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001e9e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	6a3a      	ldr	r2, [r7, #32]
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	441a      	add	r2, r3
 8001eb4:	6a39      	ldr	r1, [r7, #32]
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	fba1 3403 	umull	r3, r4, r1, r3
 8001ebc:	4422      	add	r2, r4
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001ec6:	b211      	sxth	r1, r2
 8001ec8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ecc:	fb01 f504 	mul.w	r5, r1, r4
 8001ed0:	fb03 f002 	mul.w	r0, r3, r2
 8001ed4:	4428      	add	r0, r5
 8001ed6:	fba3 3401 	umull	r3, r4, r3, r1
 8001eda:	1902      	adds	r2, r0, r4
 8001edc:	4614      	mov	r4, r2
 8001ede:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001ee2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ef2:	6a3a      	ldr	r2, [r7, #32]
 8001ef4:	fb04 f102 	mul.w	r1, r4, r2
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	fb03 f202 	mul.w	r2, r3, r2
 8001efe:	1888      	adds	r0, r1, r2
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	fba2 1203 	umull	r1, r2, r2, r3
 8001f06:	1883      	adds	r3, r0, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f04f 0500 	mov.w	r5, #0
 8001f0e:	f04f 0600 	mov.w	r6, #0
 8001f12:	0456      	lsls	r6, r2, #17
 8001f14:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001f18:	044d      	lsls	r5, r1, #17
 8001f1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f1e:	186b      	adds	r3, r5, r1
 8001f20:	eb46 0402 	adc.w	r4, r6, r2
 8001f24:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001f2e:	b219      	sxth	r1, r3
 8001f30:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001f34:	f04f 0500 	mov.w	r5, #0
 8001f38:	f04f 0600 	mov.w	r6, #0
 8001f3c:	00ce      	lsls	r6, r1, #3
 8001f3e:	2500      	movs	r5, #0
 8001f40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f44:	186b      	adds	r3, r5, r1
 8001f46:	eb46 0402 	adc.w	r4, r6, r2
 8001f4a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	fb02 f203 	mul.w	r2, r2, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	441a      	add	r2, r3
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	fba1 3403 	umull	r3, r4, r1, r3
 8001f68:	4422      	add	r2, r4
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001f72:	b211      	sxth	r1, r2
 8001f74:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001f78:	fb01 f504 	mul.w	r5, r1, r4
 8001f7c:	fb03 f002 	mul.w	r0, r3, r2
 8001f80:	4428      	add	r0, r5
 8001f82:	fba3 3401 	umull	r3, r4, r3, r1
 8001f86:	1902      	adds	r2, r0, r4
 8001f88:	4614      	mov	r4, r2
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	0a19      	lsrs	r1, r3, #8
 8001f94:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001f98:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001fa6:	6a38      	ldr	r0, [r7, #32]
 8001fa8:	fb04 f500 	mul.w	r5, r4, r0
 8001fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fae:	fb03 f000 	mul.w	r0, r3, r0
 8001fb2:	4428      	add	r0, r5
 8001fb4:	6a3d      	ldr	r5, [r7, #32]
 8001fb6:	fba5 5603 	umull	r5, r6, r5, r3
 8001fba:	1983      	adds	r3, r0, r6
 8001fbc:	461e      	mov	r6, r3
 8001fbe:	f04f 0b00 	mov.w	fp, #0
 8001fc2:	f04f 0c00 	mov.w	ip, #0
 8001fc6:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001fca:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001fce:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001fd2:	eb1b 0301 	adds.w	r3, fp, r1
 8001fd6:	eb4c 0402 	adc.w	r4, ip, r2
 8001fda:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001fde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001fe2:	1c19      	adds	r1, r3, #0
 8001fe4:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8a5b      	ldrh	r3, [r3, #18]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	fb03 f502 	mul.w	r5, r3, r2
 8001ff6:	fb01 f004 	mul.w	r0, r1, r4
 8001ffa:	4428      	add	r0, r5
 8001ffc:	fba1 3403 	umull	r3, r4, r1, r3
 8002000:	1902      	adds	r2, r0, r4
 8002002:	4614      	mov	r4, r2
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	1061      	asrs	r1, r4, #1
 800200e:	17e2      	asrs	r2, r4, #31
 8002010:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8002014:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002018:	4323      	orrs	r3, r4
 800201a:	d101      	bne.n	8002020 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 800201c:	2300      	movs	r3, #0
 800201e:	e0d4      	b.n	80021ca <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002026:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800202a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800203a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800203e:	4645      	mov	r5, r8
 8002040:	464e      	mov	r6, r9
 8002042:	1aed      	subs	r5, r5, r3
 8002044:	eb66 0604 	sbc.w	r6, r6, r4
 8002048:	46a8      	mov	r8, r5
 800204a:	46b1      	mov	r9, r6
 800204c:	eb18 0308 	adds.w	r3, r8, r8
 8002050:	eb49 0409 	adc.w	r4, r9, r9
 8002054:	4698      	mov	r8, r3
 8002056:	46a1      	mov	r9, r4
 8002058:	eb18 0805 	adds.w	r8, r8, r5
 800205c:	eb49 0906 	adc.w	r9, r9, r6
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800206c:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002070:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002074:	eb18 0801 	adds.w	r8, r8, r1
 8002078:	eb49 0902 	adc.w	r9, r9, r2
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002088:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800208c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002090:	4688      	mov	r8, r1
 8002092:	4691      	mov	r9, r2
 8002094:	eb18 0805 	adds.w	r8, r8, r5
 8002098:	eb49 0906 	adc.w	r9, r9, r6
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80020a8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80020ac:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80020b0:	4688      	mov	r8, r1
 80020b2:	4691      	mov	r9, r2
 80020b4:	eb18 0005 	adds.w	r0, r8, r5
 80020b8:	eb49 0106 	adc.w	r1, r9, r6
 80020bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020c0:	f7fe fdf2 	bl	8000ca8 <__aeabi_ldivmod>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80020d2:	b219      	sxth	r1, r3
 80020d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020d8:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f04f 0400 	mov.w	r4, #0
 80020e4:	0b6b      	lsrs	r3, r5, #13
 80020e6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80020ea:	1374      	asrs	r4, r6, #13
 80020ec:	fb03 f502 	mul.w	r5, r3, r2
 80020f0:	fb01 f004 	mul.w	r0, r1, r4
 80020f4:	4428      	add	r0, r5
 80020f6:	fba1 1203 	umull	r1, r2, r1, r3
 80020fa:	1883      	adds	r3, r0, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	f04f 0400 	mov.w	r4, #0
 800210a:	0b6b      	lsrs	r3, r5, #13
 800210c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002110:	1374      	asrs	r4, r6, #13
 8002112:	fb03 f502 	mul.w	r5, r3, r2
 8002116:	fb01 f004 	mul.w	r0, r1, r4
 800211a:	4428      	add	r0, r5
 800211c:	fba1 1203 	umull	r1, r2, r1, r3
 8002120:	1883      	adds	r3, r0, r2
 8002122:	461a      	mov	r2, r3
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f04f 0400 	mov.w	r4, #0
 800212c:	0e4b      	lsrs	r3, r1, #25
 800212e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002132:	1654      	asrs	r4, r2, #25
 8002134:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800213e:	b21b      	sxth	r3, r3
 8002140:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	fb04 f102 	mul.w	r1, r4, r2
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	fb03 f202 	mul.w	r2, r3, r2
 8002150:	1888      	adds	r0, r1, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	fba2 1203 	umull	r1, r2, r2, r3
 8002158:	1883      	adds	r3, r0, r2
 800215a:	461a      	mov	r2, r3
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f04f 0400 	mov.w	r4, #0
 8002164:	0ccb      	lsrs	r3, r1, #19
 8002166:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800216a:	14d4      	asrs	r4, r2, #19
 800216c:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8002170:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002174:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002178:	eb11 0803 	adds.w	r8, r1, r3
 800217c:	eb42 0904 	adc.w	r9, r2, r4
 8002180:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002184:	eb13 0508 	adds.w	r5, r3, r8
 8002188:	eb44 0609 	adc.w	r6, r4, r9
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	0a29      	lsrs	r1, r5, #8
 8002196:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800219a:	1232      	asrs	r2, r6, #8
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80021a2:	b21d      	sxth	r5, r3
 80021a4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80021a8:	f04f 0800 	mov.w	r8, #0
 80021ac:	f04f 0900 	mov.w	r9, #0
 80021b0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80021b4:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80021b8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80021bc:	eb18 0301 	adds.w	r3, r8, r1
 80021c0:	eb49 0402 	adc.w	r4, r9, r2
 80021c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 80021c8:	693b      	ldr	r3, [r7, #16]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080021d4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 80021e0:	2306      	movs	r3, #6
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f107 0214 	add.w	r2, r7, #20
 80021ec:	21f7      	movs	r1, #247	; 0xf7
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff fc7f 	bl	8001af2 <read_data>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <bmp280_read_fixed+0x2a>
 80021fa:	2300      	movs	r3, #0
 80021fc:	e027      	b.n	800224e <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80021fe:	7d3b      	ldrb	r3, [r7, #20]
 8002200:	031a      	lsls	r2, r3, #12
 8002202:	7d7b      	ldrb	r3, [r7, #21]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4313      	orrs	r3, r2
 8002208:	7dba      	ldrb	r2, [r7, #22]
 800220a:	0912      	lsrs	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4313      	orrs	r3, r2
 8002210:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	031a      	lsls	r2, r3, #12
 8002216:	7e3b      	ldrb	r3, [r7, #24]
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4313      	orrs	r3, r2
 800221c:	7e7a      	ldrb	r2, [r7, #25]
 800221e:	0912      	lsrs	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4313      	orrs	r3, r2
 8002224:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	461a      	mov	r2, r3
 800222c:	69f9      	ldr	r1, [r7, #28]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff fded 	bl	8001e0e <compensate_temperature>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	461a      	mov	r2, r3
 800223e:	6a39      	ldr	r1, [r7, #32]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fe1d 	bl	8001e80 <compensate_pressure>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]

	return true;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8002264:	f107 0210 	add.w	r2, r7, #16
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff ffb0 	bl	80021d4 <bmp280_read_fixed>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d021      	beq.n	80022be <bmp280_read_float+0x66>
	{
		*temperature = (float) fixed_temperature / 100;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002284:	eddf 6a10 	vldr	s13, [pc, #64]	; 80022c8 <bmp280_read_float+0x70>
 8002288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80022cc <bmp280_read_float+0x74>
 80022a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a00 	vstr	s15, [r3]

		inst->temperature = *temperature;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
		inst->pressure = *pressure;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <bmp280_read_float+0x68>
	}

	return false;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	42c80000 	.word	0x42c80000
 80022cc:	43800000 	.word	0x43800000

080022d0 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	// uneccessary, to change
	float te;
	float pre;
	return bmp280_read_float(inst, &te, &pre);
 80022d8:	f107 0208 	add.w	r2, r7, #8
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffb8 	bl	8002258 <bmp280_read_float>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <millis+0x1c>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	////println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 800231c:	f7ff ffea 	bl	80022f4 <millis>
 8002320:	60f8      	str	r0, [r7, #12]
	char c = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	72fb      	strb	r3, [r7, #11]
	uint8_t ca[1] = {0};
 8002326:	2300      	movs	r3, #0
 8002328:	723b      	strb	r3, [r7, #8]

	if (inst->paused) return c;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <GPS_read+0x24>
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	e07e      	b.n	8002436 <GPS_read+0x122>

	HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	72bb      	strb	r3, [r7, #10]
	status = HAL_UART_Receive(inst->uart, ca, 1, 50);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002342:	f107 0108 	add.w	r1, r7, #8
 8002346:	2332      	movs	r3, #50	; 0x32
 8002348:	2201      	movs	r2, #1
 800234a:	f00a fa19 	bl	800c780 <HAL_UART_Receive>
 800234e:	4603      	mov	r3, r0
 8002350:	72bb      	strb	r3, [r7, #10]
	//print("Status: ");
	//print_int(status);
	//println("");
	c = (char)ca[0];
 8002352:	7a3b      	ldrb	r3, [r7, #8]
 8002354:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002362:	b2db      	uxtb	r3, r3
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	b2c8      	uxtb	r0, r1
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 800236e:	4413      	add	r3, r2
 8002370:	7afa      	ldrb	r2, [r7, #11]
 8002372:	701a      	strb	r2, [r3, #0]
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b77      	cmp	r3, #119	; 0x77
 800237e:	d903      	bls.n	8002388 <GPS_read+0x74>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2277      	movs	r2, #119	; 0x77
 8002384:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d141      	bne.n	8002412 <GPS_read+0xfe>
	{
		inst->currentline[inst->lineidx] = 0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4413      	add	r3, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	33d8      	adds	r3, #216	; 0xd8
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10c      	bne.n	80023ca <GPS_read+0xb6>
		{
			inst->currentline = inst->line2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80023c8:	e00b      	b.n	80023e2 <GPS_read+0xce>
		}
		else
		{
			inst->currentline = inst->line1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		// Serial.//println("----");
		// Serial.//println((char* )lastline);
		// Serial.//println("----");
		inst->lineidx = 0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis(); // time we got the end of the string
 80023f2:	f7ff ff7f 	bl	80022f4 <millis>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <GPS_read+0x12c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0; // there are no characters yet
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <GPS_read+0x12c>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
		return c;			// wait until next character to set time
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	e011      	b.n	8002436 <GPS_read+0x122>
	}

	if (firstChar == 0) firstChar = tStart;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <GPS_read+0x12c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <GPS_read+0x10c>
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <GPS_read+0x12c>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6013      	str	r3, [r2, #0]

	//wait for finished transmission
	////println("[GPS] read() ... waiting");
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8002420:	bf00      	nop
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002428:	4618      	mov	r0, r3
 800242a:	f00a fa4f 	bl	800c8cc <HAL_UART_GetState>
 800242e:	4603      	mov	r3, r0
 8002430:	2b20      	cmp	r3, #32
 8002432:	d1f6      	bne.n	8002422 <GPS_read+0x10e>
	////println("[GPS] finished");
	return c;
 8002434:	7afb      	ldrb	r3, [r7, #11]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200003a0 	.word	0x200003a0

08002444 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2258      	movs	r2, #88	; 0x58
 800257e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2258      	movs	r2, #88	; 0x58
 8002586:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2258      	movs	r2, #88	; 0x58
 800258e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	2203      	movs	r2, #3
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f013 fe42 	bl	801622a <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3307      	adds	r3, #7
 80025aa:	2214      	movs	r2, #20
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f013 fe3b 	bl	801622a <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	331b      	adds	r3, #27
 80025b8:	2203      	movs	r2, #3
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f013 fe34 	bl	801622a <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	331e      	adds	r3, #30
 80025c6:	2214      	movs	r2, #20
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f013 fe2d 	bl	801622a <memset>

	memset(inst->txtTXT, 0x00, 63);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3388      	adds	r3, #136	; 0x88
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f013 fe26 	bl	801622a <memset>
	inst->txtTot = 0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <GPS_init+0x2a0>)
 80025fa:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a39      	ldr	r2, [pc, #228]	; (80026e8 <GPS_init+0x2a4>)
 8002602:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <GPS_init+0x2a8>)
 800260a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a37      	ldr	r2, [pc, #220]	; (80026f0 <GPS_init+0x2ac>)
 8002612:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a36      	ldr	r2, [pc, #216]	; (80026f4 <GPS_init+0x2b0>)
 800261a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <GPS_init+0x2b4>)
 8002622:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a34      	ldr	r2, [pc, #208]	; (80026fc <GPS_init+0x2b8>)
 800262a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a33      	ldr	r2, [pc, #204]	; (8002700 <GPS_init+0x2bc>)
 8002632:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a32      	ldr	r2, [pc, #200]	; (8002704 <GPS_init+0x2c0>)
 800263a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <GPS_init+0x2b0>)
 8002642:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <GPS_init+0x2b0>)
 800264a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 800264e:	492e      	ldr	r1, [pc, #184]	; (8002708 <GPS_init+0x2c4>)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f85f 	bl	8002714 <GPS_sendCommand>
	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8002656:	492d      	ldr	r1, [pc, #180]	; (800270c <GPS_init+0x2c8>)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f85b 	bl	8002714 <GPS_sendCommand>

	HAL_Delay(1000);
 800265e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002662:	f003 fce7 	bl	8006034 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_Q_RELEASE);
 8002666:	492a      	ldr	r1, [pc, #168]	; (8002710 <GPS_init+0x2cc>)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f853 	bl	8002714 <GPS_sendCommand>
	HAL_Delay(10);
 800266e:	200a      	movs	r0, #10
 8002670:	f003 fce0 	bl	8006034 <HAL_Delay>

	uint32_t timeout = millis();
 8002674:	f7ff fe3e 	bl	80022f4 <millis>
 8002678:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 800267a:	e025      	b.n	80026c8 <GPS_init+0x284>
	{
		GPS_read(inst);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fe49 	bl	8002314 <GPS_read>
		if (GPS_newNMEAreceived(inst))
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 ffb1 	bl	80035ea <GPS_newNMEAreceived>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01c      	beq.n	80026c8 <GPS_init+0x284>
		{
			// not exact, but works now
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 ffb9 	bl	8003606 <GPS_lastNMEA>
 8002694:	4603      	mov	r3, r0
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b24      	cmp	r3, #36	; 0x24
 800269a:	d115      	bne.n	80026c8 <GPS_init+0x284>
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 ffb2 	bl	8003606 <GPS_lastNMEA>
 80026a2:	4603      	mov	r3, r0
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b47      	cmp	r3, #71	; 0x47
 80026aa:	d10d      	bne.n	80026c8 <GPS_init+0x284>
			{
				inst->active = true;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

				GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 80026b4:	4914      	ldr	r1, [pc, #80]	; (8002708 <GPS_init+0x2c4>)
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f82c 	bl	8002714 <GPS_sendCommand>
				GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 80026bc:	4913      	ldr	r1, [pc, #76]	; (800270c <GPS_init+0x2c8>)
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f828 	bl	8002714 <GPS_sendCommand>
				return true;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e008      	b.n	80026da <GPS_init+0x296>
	while (millis() - timeout <= 1000)
 80026c8:	f7ff fe14 	bl	80022f4 <millis>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d9d1      	bls.n	800267c <GPS_init+0x238>
			}
		}
	}
	return false;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0801b93c 	.word	0x0801b93c
 80026e8:	0801b940 	.word	0x0801b940
 80026ec:	0801b944 	.word	0x0801b944
 80026f0:	0801b948 	.word	0x0801b948
 80026f4:	0801b94c 	.word	0x0801b94c
 80026f8:	0801b950 	.word	0x0801b950
 80026fc:	0801b954 	.word	0x0801b954
 8002700:	0801b958 	.word	0x0801b958
 8002704:	0801b95c 	.word	0x0801b95c
 8002708:	0801b960 	.word	0x0801b960
 800270c:	0801b994 	.word	0x0801b994
 8002710:	0801b9a4 	.word	0x0801b9a4

08002714 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f7fd fd5d 	bl	80001e4 <strlen>
 800272a:	4603      	mov	r3, r0
 800272c:	b29a      	uxth	r2, r3
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	4620      	mov	r0, r4
 8002736:	f009 ff8a 	bl	800c64e <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 800273a:	bf00      	nop
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002742:	4618      	mov	r0, r3
 8002744:	f00a f8c2 	bl	800c8cc <HAL_UART_GetState>
 8002748:	4603      	mov	r3, r0
 800274a:	2b20      	cmp	r3, #32
 800274c:	d1f6      	bne.n	800273c <GPS_sendCommand+0x28>
	//println("[GPS] finished");
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
	...

08002758 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb65 	bl	8002e34 <GPS_check>
 800276a:	4603      	mov	r3, r0
 800276c:	f083 0301 	eor.w	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <GPS_parse+0x22>
 8002776:	2300      	movs	r3, #0
 8002778:	e355      	b.n	8002e26 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	6978      	ldr	r0, [r7, #20]
 8002782:	f014 fc86 	bl	8017092 <strchr>
 8002786:	4603      	mov	r3, r0
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3307      	adds	r3, #7
 8002790:	49a5      	ldr	r1, [pc, #660]	; (8002a28 <GPS_parse+0x2d0>)
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fd1c 	bl	80001d0 <strcmp>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80e6 	bne.w	800296c <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fcc6 	bl	8003134 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f014 fc71 	bl	8017092 <strchr>
 80027b0:	4603      	mov	r3, r0
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 80027b6:	6979      	ldr	r1, [r7, #20]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fd09 	bl	80031d0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f014 fc66 	bl	8017092 <strchr>
 80027c6:	4603      	mov	r3, r0
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fdb4 	bl	800333c <GPS_parseLatDir>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <GPS_parse+0x8c>
 80027e0:	2300      	movs	r3, #0
 80027e2:	e320      	b.n	8002e26 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f014 fc53 	bl	8017092 <strchr>
 80027ec:	4603      	mov	r3, r0
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80027f2:	6979      	ldr	r1, [r7, #20]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fde1 	bl	80033bc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	6978      	ldr	r0, [r7, #20]
 80027fe:	f014 fc48 	bl	8017092 <strchr>
 8002802:	4603      	mov	r3, r0
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fe7e 	bl	800350c <GPS_parseLonDir>
 8002810:	4603      	mov	r3, r0
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <GPS_parse+0xc8>
 800281c:	2300      	movs	r3, #0
 800281e:	e302      	b.n	8002e26 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f014 fc35 	bl	8017092 <strchr>
 8002828:	4603      	mov	r3, r0
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc66 	bl	8003102 <GPS_isEmpty>
 8002836:	4603      	mov	r3, r0
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01b      	beq.n	800287a <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f013 fca4 	bl	8016190 <atoi>
 8002848:	4603      	mov	r3, r0
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <GPS_parse+0x11a>
			{
				inst->fix = true;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002870:	e003      	b.n	800287a <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f014 fc08 	bl	8017092 <strchr>
 8002882:	4603      	mov	r3, r0
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fc39 	bl	8003102 <GPS_isEmpty>
 8002890:	4603      	mov	r3, r0
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <GPS_parse+0x154>
 800289c:	6978      	ldr	r0, [r7, #20]
 800289e:	f013 fc77 	bl	8016190 <atoi>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f014 fbef 	bl	8017092 <strchr>
 80028b4:	4603      	mov	r3, r0
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fc20 	bl	8003102 <GPS_isEmpty>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <GPS_parse+0x18e>
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f013 fc5b 	bl	801618a <atof>
 80028d4:	ec54 3b10 	vmov	r3, r4, d0
 80028d8:	4618      	mov	r0, r3
 80028da:	4621      	mov	r1, r4
 80028dc:	f7fe f994 	bl	8000c08 <__aeabi_d2f>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	6978      	ldr	r0, [r7, #20]
 80028ea:	f014 fbd2 	bl	8017092 <strchr>
 80028ee:	4603      	mov	r3, r0
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fc03 	bl	8003102 <GPS_isEmpty>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <GPS_parse+0x1c8>
 8002908:	6978      	ldr	r0, [r7, #20]
 800290a:	f013 fc3e 	bl	801618a <atof>
 800290e:	ec54 3b10 	vmov	r3, r4, d0
 8002912:	4618      	mov	r0, r3
 8002914:	4621      	mov	r1, r4
 8002916:	f7fe f977 	bl	8000c08 <__aeabi_d2f>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f014 fbb5 	bl	8017092 <strchr>
 8002928:	4603      	mov	r3, r0
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f014 fbae 	bl	8017092 <strchr>
 8002936:	4603      	mov	r3, r0
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fbdf 	bl	8003102 <GPS_isEmpty>
 8002944:	4603      	mov	r3, r0
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8251 	beq.w	8002df4 <GPS_parse+0x69c>
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f013 fc19 	bl	801618a <atof>
 8002958:	ec54 3b10 	vmov	r3, r4, d0
 800295c:	4618      	mov	r0, r3
 800295e:	4621      	mov	r1, r4
 8002960:	f7fe f952 	bl	8000c08 <__aeabi_d2f>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
 800296a:	e243      	b.n	8002df4 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3307      	adds	r3, #7
 8002970:	492e      	ldr	r1, [pc, #184]	; (8002a2c <GPS_parse+0x2d4>)
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fc2c 	bl	80001d0 <strcmp>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80e3 	bne.w	8002b46 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002980:	6979      	ldr	r1, [r7, #20]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fbd6 	bl	8003134 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f014 fb81 	bl	8017092 <strchr>
 8002990:	4603      	mov	r3, r0
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fe00 	bl	800359e <GPS_parseFix>
 800299e:	4603      	mov	r3, r0
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <GPS_parse+0x256>
 80029aa:	2300      	movs	r3, #0
 80029ac:	e23b      	b.n	8002e26 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	6978      	ldr	r0, [r7, #20]
 80029b2:	f014 fb6e 	bl	8017092 <strchr>
 80029b6:	4603      	mov	r3, r0
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fc06 	bl	80031d0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f014 fb63 	bl	8017092 <strchr>
 80029cc:	4603      	mov	r3, r0
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 80029d2:	6979      	ldr	r1, [r7, #20]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fcb1 	bl	800333c <GPS_parseLatDir>
 80029da:	4603      	mov	r3, r0
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <GPS_parse+0x292>
 80029e6:	2300      	movs	r3, #0
 80029e8:	e21d      	b.n	8002e26 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f014 fb50 	bl	8017092 <strchr>
 80029f2:	4603      	mov	r3, r0
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 80029f8:	6979      	ldr	r1, [r7, #20]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fcde 	bl	80033bc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f014 fb45 	bl	8017092 <strchr>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fd7b 	bl	800350c <GPS_parseLonDir>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <GPS_parse+0x2d8>
 8002a22:	2300      	movs	r3, #0
 8002a24:	e1ff      	b.n	8002e26 <GPS_parse+0x6ce>
 8002a26:	bf00      	nop
 8002a28:	0801b950 	.word	0x0801b950
 8002a2c:	0801b95c 	.word	0x0801b95c

		// speed
		p = strchr(p, ',') + 1;
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f014 fb2d 	bl	8017092 <strchr>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb5e 	bl	8003102 <GPS_isEmpty>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <GPS_parse+0x312>
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f013 fb99 	bl	801618a <atof>
 8002a58:	ec54 3b10 	vmov	r3, r4, d0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f7fe f8d2 	bl	8000c08 <__aeabi_d2f>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f014 fb10 	bl	8017092 <strchr>
 8002a72:	4603      	mov	r3, r0
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002a78:	6979      	ldr	r1, [r7, #20]
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fb41 	bl	8003102 <GPS_isEmpty>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <GPS_parse+0x34c>
 8002a8c:	6978      	ldr	r0, [r7, #20]
 8002a8e:	f013 fb7c 	bl	801618a <atof>
 8002a92:	ec54 3b10 	vmov	r3, r4, d0
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f7fe f8b5 	bl	8000c08 <__aeabi_d2f>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f014 faf3 	bl	8017092 <strchr>
 8002aac:	4603      	mov	r3, r0
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002ab2:	6979      	ldr	r1, [r7, #20]
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fb24 	bl	8003102 <GPS_isEmpty>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8196 	beq.w	8002df4 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002ac8:	6978      	ldr	r0, [r7, #20]
 8002aca:	f013 fb5e 	bl	801618a <atof>
 8002ace:	ec54 3b10 	vmov	r3, r4, d0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	f7fe f897 	bl	8000c08 <__aeabi_d2f>
 8002ada:	ee07 0a90 	vmov	s15, r0
 8002ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae2:	ee17 3a90 	vmov	r3, s15
 8002ae6:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a8b      	ldr	r2, [pc, #556]	; (8002d18 <GPS_parse+0x5c0>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0b5b      	lsrs	r3, r3, #13
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <GPS_parse+0x5c0>)
 8002afe:	fba3 1302 	umull	r1, r3, r3, r2
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f242 7110 	movw	r1, #10000	; 0x2710
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	4a83      	ldr	r2, [pc, #524]	; (8002d1c <GPS_parse+0x5c4>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <GPS_parse+0x5c4>)
 8002b22:	fba3 1302 	umull	r1, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2164      	movs	r1, #100	; 0x64
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002b44:	e156      	b.n	8002df4 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3307      	adds	r3, #7
 8002b4a:	4975      	ldr	r1, [pc, #468]	; (8002d20 <GPS_parse+0x5c8>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fb3f 	bl	80001d0 <strcmp>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d153      	bne.n	8002c00 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002b58:	6979      	ldr	r1, [r7, #20]
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fb38 	bl	80031d0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f014 fa95 	bl	8017092 <strchr>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fbe3 	bl	800333c <GPS_parseLatDir>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f083 0301 	eor.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <GPS_parse+0x42e>
 8002b82:	2300      	movs	r3, #0
 8002b84:	e14f      	b.n	8002e26 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	6978      	ldr	r0, [r7, #20]
 8002b8a:	f014 fa82 	bl	8017092 <strchr>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fc10 	bl	80033bc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f014 fa77 	bl	8017092 <strchr>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fcad 	bl	800350c <GPS_parseLonDir>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <GPS_parse+0x46a>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e131      	b.n	8002e26 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f014 fa64 	bl	8017092 <strchr>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 faae 	bl	8003134 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f014 fa59 	bl	8017092 <strchr>
 8002be0:	4603      	mov	r3, r0
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fcd8 	bl	800359e <GPS_parseFix>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80fc 	beq.w	8002df4 <GPS_parse+0x69c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e112      	b.n	8002e26 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3307      	adds	r3, #7
 8002c04:	4947      	ldr	r1, [pc, #284]	; (8002d24 <GPS_parse+0x5cc>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fae2 	bl	80001d0 <strcmp>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 808a 	bne.w	8002d28 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f014 fa3b 	bl	8017092 <strchr>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa6c 	bl	8003102 <GPS_isEmpty>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <GPS_parse+0x4ee>
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f013 faaa 	bl	8016190 <atoi>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e009      	b.n	8002c60 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f014 fa1f 	bl	8017092 <strchr>
 8002c54:	4603      	mov	r3, r0
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0b      	cmp	r3, #11
 8002c64:	ddf2      	ble.n	8002c4c <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f014 fa12 	bl	8017092 <strchr>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002c74:	6979      	ldr	r1, [r7, #20]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa43 	bl	8003102 <GPS_isEmpty>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <GPS_parse+0x548>
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f013 fa7e 	bl	801618a <atof>
 8002c8e:	ec54 3b10 	vmov	r3, r4, d0
 8002c92:	4618      	mov	r0, r3
 8002c94:	4621      	mov	r1, r4
 8002c96:	f7fd ffb7 	bl	8000c08 <__aeabi_d2f>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f014 f9f5 	bl	8017092 <strchr>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	3301      	adds	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa26 	bl	8003102 <GPS_isEmpty>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <GPS_parse+0x582>
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f013 fa61 	bl	801618a <atof>
 8002cc8:	ec54 3b10 	vmov	r3, r4, d0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	4621      	mov	r1, r4
 8002cd0:	f7fd ff9a 	bl	8000c08 <__aeabi_d2f>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f014 f9d8 	bl	8017092 <strchr>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa09 	bl	8003102 <GPS_isEmpty>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f083 0301 	eor.w	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d07b      	beq.n	8002df4 <GPS_parse+0x69c>
 8002cfc:	6978      	ldr	r0, [r7, #20]
 8002cfe:	f013 fa44 	bl	801618a <atof>
 8002d02:	ec54 3b10 	vmov	r3, r4, d0
 8002d06:	4618      	mov	r0, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7fd ff7d 	bl	8000c08 <__aeabi_d2f>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d14:	e06e      	b.n	8002df4 <GPS_parse+0x69c>
 8002d16:	bf00      	nop
 8002d18:	d1b71759 	.word	0xd1b71759
 8002d1c:	51eb851f 	.word	0x51eb851f
 8002d20:	0801b954 	.word	0x0801b954
 8002d24:	0801b958 	.word	0x0801b958
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3307      	adds	r3, #7
 8002d2c:	4940      	ldr	r1, [pc, #256]	; (8002e30 <GPS_parse+0x6d8>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fa4e 	bl	80001d0 <strcmp>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d15a      	bne.n	8002df0 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 8002d3a:	6979      	ldr	r1, [r7, #20]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9e0 	bl	8003102 <GPS_isEmpty>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <GPS_parse+0x604>
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f013 fa1e 	bl	8016190 <atoi>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f014 f997 	bl	8017092 <strchr>
 8002d64:	4603      	mov	r3, r0
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8002d6a:	6979      	ldr	r1, [r7, #20]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9c8 	bl	8003102 <GPS_isEmpty>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <GPS_parse+0x634>
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f013 fa06 	bl	8016190 <atoi>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f014 f97f 	bl	8017092 <strchr>
 8002d94:	4603      	mov	r3, r0
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f9b0 	bl	8003102 <GPS_isEmpty>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f083 0301 	eor.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <GPS_parse+0x664>
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f013 f9ee 	bl	8016190 <atoi>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f014 f967 	bl	8017092 <strchr>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 8002dca:	6979      	ldr	r1, [r7, #20]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f998 	bl	8003102 <GPS_isEmpty>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <GPS_parse+0x69c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8002de4:	233d      	movs	r3, #61	; 0x3d
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f923 	bl	8003034 <GPS_parseStr>
 8002dee:	e001      	b.n	8002df4 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e018      	b.n	8002e26 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 021b 	add.w	r2, r3, #27
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f014 f953 	bl	80170ac <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 021e 	add.w	r2, r3, #30
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3307      	adds	r3, #7
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f014 f94a 	bl	80170ac <strcpy>
	inst->lastUpdate = millis();
 8002e18:	f7ff fa6c 	bl	80022f4 <millis>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	0801b9b0 	.word	0x0801b9b0

08002e34 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b24      	cmp	r3, #36	; 0x24
 8002e4a:	d001      	beq.n	8002e50 <GPS_check+0x1c>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e0ad      	b.n	8002fac <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 8002e5e:	e002      	b.n	8002e66 <GPS_check+0x32>
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f8      	bne.n	8002e60 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 8002e6e:	e002      	b.n	8002e76 <GPS_check+0x42>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7c:	d003      	beq.n	8002e86 <GPS_check+0x52>
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d8f4      	bhi.n	8002e70 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e8c:	d001      	beq.n	8002e92 <GPS_check+0x5e>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e08c      	b.n	8002fac <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	3301      	adds	r3, #1
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fbc4 	bl	8003628 <GPS_parseHex>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	3302      	adds	r3, #2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fbb9 	bl	8003628 <GPS_parseHex>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ebc:	4413      	add	r3, r2
 8002ebe:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e008      	b.n	8002ede <GPS_check+0xaa>
		{
			sum ^=* p1;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ed4:	4053      	eors	r3, r2
 8002ed6:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d3f2      	bcc.n	8002ecc <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 8002ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <GPS_check+0xbc>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e05d      	b.n	8002fac <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f06:	461a      	mov	r2, r3
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f852 	bl	8002fb4 <GPS_tokenOnList>
 8002f10:	6138      	str	r0, [r7, #16]
	if (src)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01f      	beq.n	8002f58 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	6939      	ldr	r1, [r7, #16]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f014 f8c4 	bl	80170ac <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f103 020a 	add.w	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f7fd f957 	bl	80001e4 <strlen>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002f44:	461a      	mov	r2, r3
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f833 	bl	8002fb4 <GPS_tokenOnList>
 8002f4e:	60f8      	str	r0, [r7, #12]
	if (snc)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <GPS_check+0x142>
 8002f56:	e001      	b.n	8002f5c <GPS_check+0x128>
	else return false;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e027      	b.n	8002fac <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3307      	adds	r3, #7
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f014 f8a2 	bl	80170ac <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e019      	b.n	8002faa <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6979      	ldr	r1, [r7, #20]
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f817 	bl	8002fb4 <GPS_tokenOnList>
 8002f86:	60f8      	str	r0, [r7, #12]
		if (snc)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3307      	adds	r3, #7
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f014 f889 	bl	80170ac <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f103 0214 	add.w	r2, r3, #20
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
			return false;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8002fc4:	e01e      	b.n	8003004 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	681c      	ldr	r4, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd f902 	bl	80001e4 <strlen>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f014 f868 	bl	80170bc <strncmp>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <GPS_tokenOnList+0x4a>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	e014      	b.n	8003028 <GPS_tokenOnList+0x74>
		i++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2202      	movs	r2, #2
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <GPS_tokenOnList+0x7c>)
 8003012:	4618      	mov	r0, r3
 8003014:	f014 f852 	bl	80170bc <strncmp>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <GPS_tokenOnList+0x72>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003024:	dbcf      	blt.n	8002fc6 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	0801b9b4 	.word	0x0801b9b4

08003034 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f014 f824 	bl	8017092 <strchr>
 800304a:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4293      	cmp	r3, r2
 800306a:	bfa8      	it	ge
 800306c:	4613      	movge	r3, r2
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	461a      	mov	r2, r3
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	68b8      	ldr	r0, [r7, #8]
 8003078:	f014 f832 	bl	80170e0 <strncpy>
		buff[len] = 0;
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4413      	add	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e037      	b.n	80030f8 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003088:	212a      	movs	r1, #42	; 0x2a
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f014 f801 	bl	8017092 <strchr>
 8003090:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bfa8      	it	ge
 80030ae:	4613      	movge	r3, r2
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	461a      	mov	r2, r3
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	68b8      	ldr	r0, [r7, #8]
 80030ba:	f014 f811 	bl	80170e0 <strncpy>
			buff[e - p] = 0;
 80030be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e013      	b.n	80030f8 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd f887 	bl	80001e4 <strlen>
 80030d6:	4603      	mov	r3, r0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3b01      	subs	r3, #1
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfa8      	it	ge
 80030e8:	4613      	movge	r3, r2
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	461a      	mov	r2, r3
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f013 fff4 	bl	80170e0 <strncpy>
		}
	}
	return buff;
 80030f8:	68bb      	ldr	r3, [r7, #8]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b2c      	cmp	r3, #44	; 0x2c
 8003112:	d008      	beq.n	8003126 <GPS_isEmpty+0x24>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b2a      	cmp	r3, #42	; 0x2a
 800311a:	d004      	beq.n	8003126 <GPS_isEmpty+0x24>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <GPS_isEmpty+0x24>
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <GPS_isEmpty+0x26>
	else return true;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	f013 f82a 	bl	8016198 <atol>
 8003144:	4603      	mov	r3, r0
 8003146:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <GPS_parseTime+0x94>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0b5b      	lsrs	r3, r3, #13
 8003152:	b2da      	uxtb	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <GPS_parseTime+0x94>)
 800315e:	fba3 1302 	umull	r1, r3, r3, r2
 8003162:	0b5b      	lsrs	r3, r3, #13
 8003164:	f242 7110 	movw	r1, #10000	; 0x2710
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <GPS_parseTime+0x98>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b2da      	uxtb	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <GPS_parseTime+0x98>)
 8003182:	fba3 1302 	umull	r1, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2164      	movs	r1, #100	; 0x64
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b2da      	uxtb	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003198:	212e      	movs	r1, #46	; 0x2e
 800319a:	6838      	ldr	r0, [r7, #0]
 800319c:	f013 ff79 	bl	8017092 <strchr>
 80031a0:	4603      	mov	r3, r0
 80031a2:	3301      	adds	r3, #1
 80031a4:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f012 fff2 	bl	8016190 <atoi>
 80031ac:	4603      	mov	r3, r0
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	d1b71759 	.word	0xd1b71759
 80031cc:	51eb851f 	.word	0x51eb851f

080031d0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff90 	bl	8003102 <GPS_isEmpty>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8092 	beq.w	8003314 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	2202      	movs	r2, #2
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f013 ff71 	bl	80170e0 <strncpy>
		p += 2;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3302      	adds	r3, #2
 8003202:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 8003204:	2300      	movs	r3, #0
 8003206:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f012 ffc3 	bl	8016198 <atol>
 8003212:	4602      	mov	r2, r0
 8003214:	4b44      	ldr	r3, [pc, #272]	; (8003328 <GPS_parseLat+0x158>)
 8003216:	fb03 f302 	mul.w	r3, r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	2202      	movs	r2, #2
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f013 ff5b 	bl	80170e0 <strncpy>
		p += 3;										// skip decimal point
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	3303      	adds	r3, #3
 800322e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	3302      	adds	r3, #2
 8003236:	2204      	movs	r2, #4
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f013 ff50 	bl	80170e0 <strncpy>
		degreebuff[6] = '\0';
 8003240:	2300      	movs	r3, #0
 8003242:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	4618      	mov	r0, r3
 800324a:	f012 ffa5 	bl	8016198 <atol>
 800324e:	4602      	mov	r2, r0
 8003250:	2332      	movs	r3, #50	; 0x32
 8003252:	fb03 f302 	mul.w	r3, r3, r2
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <GPS_parseLat+0x15c>)
 8003258:	fb82 1203 	smull	r1, r2, r2, r3
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	441a      	add	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4a30      	ldr	r2, [pc, #192]	; (8003330 <GPS_parseLat+0x160>)
 8003270:	fb82 1203 	smull	r1, r2, r2, r3
 8003274:	1352      	asrs	r2, r2, #13
 8003276:	17db      	asrs	r3, r3, #31
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f962 	bl	8000544 <__aeabi_i2d>
 8003280:	4604      	mov	r4, r0
 8003282:	460d      	mov	r5, r1
 8003284:	69b8      	ldr	r0, [r7, #24]
 8003286:	f7fd f95d 	bl	8000544 <__aeabi_i2d>
 800328a:	a325      	add	r3, pc, #148	; (adr r3, 8003320 <GPS_parseLat+0x150>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f9c2 	bl	8000618 <__aeabi_dmul>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4620      	mov	r0, r4
 800329a:	4629      	mov	r1, r5
 800329c:	f7fd f806 	bl	80002ac <__adddf3>
 80032a0:	4603      	mov	r3, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	4618      	mov	r0, r3
 80032a6:	4621      	mov	r1, r4
 80032a8:	f7fd fcae 	bl	8000c08 <__aeabi_d2f>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80032be:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003334 <GPS_parseLat+0x164>
 80032c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ca:	ee17 2a90 	vmov	r2, s15
 80032ce:	2364      	movs	r3, #100	; 0x64
 80032d0:	fb03 f302 	mul.w	r3, r3, r2
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032e0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003338 <GPS_parseLat+0x168>
 80032e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80032fa:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003334 <GPS_parseLat+0x164>
 80032fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003314:	bf00      	nop
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	f3af 8000 	nop.w
 8003320:	7110e454 	.word	0x7110e454
 8003324:	3ed92a73 	.word	0x3ed92a73
 8003328:	00989680 	.word	0x00989680
 800332c:	55555556 	.word	0x55555556
 8003330:	14f8b589 	.word	0x14f8b589
 8003334:	42c80000 	.word	0x42c80000
 8003338:	42700000 	.word	0x42700000

0800333c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b53      	cmp	r3, #83	; 0x53
 800334c:	d11c      	bne.n	8003388 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2253      	movs	r2, #83	; 0x53
 8003352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f904 	bl	8000568 <__aeabi_f2d>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	f7fd fc4e 	bl	8000c08 <__aeabi_d2f>
 800336c:	4603      	mov	r3, r0
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef1 7a67 	vneg.f32	s15, s15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	425a      	negs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
 8003386:	e013      	b.n	80033b0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b4e      	cmp	r3, #78	; 0x4e
 800338e:	d104      	bne.n	800339a <GPS_parseLatDir+0x5e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	224e      	movs	r2, #78	; 0x4e
 8003394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003398:	e00a      	b.n	80033b0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b2c      	cmp	r3, #44	; 0x2c
 80033a0:	d104      	bne.n	80033ac <GPS_parseLatDir+0x70>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80033aa:	e001      	b.n	80033b0 <GPS_parseLatDir+0x74>
	else return false;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <GPS_parseLatDir+0x76>
	
	return true;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}
	...

080033bc <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fe9a 	bl	8003102 <GPS_isEmpty>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8088 	beq.w	80034ec <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	2203      	movs	r2, #3
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f013 fe7b 	bl	80170e0 <strncpy>
		p += 3;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3303      	adds	r3, #3
 80033ee:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	4618      	mov	r0, r3
 80033fa:	f012 fecd 	bl	8016198 <atol>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <GPS_parseLon+0x138>)
 8003402:	fb03 f302 	mul.w	r3, r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	2202      	movs	r2, #2
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f013 fe65 	bl	80170e0 <strncpy>
		p += 3;										// skip decimal point
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	3303      	adds	r3, #3
 800341a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	3302      	adds	r3, #2
 8003422:	2204      	movs	r2, #4
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f013 fe5a 	bl	80170e0 <strncpy>
		degreebuff[6] = '\0';
 800342c:	2300      	movs	r3, #0
 800342e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4618      	mov	r0, r3
 8003436:	f012 feaf 	bl	8016198 <atol>
 800343a:	4602      	mov	r2, r0
 800343c:	2332      	movs	r3, #50	; 0x32
 800343e:	fb03 f302 	mul.w	r3, r3, r2
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <GPS_parseLon+0x13c>)
 8003444:	fb82 1203 	smull	r1, r2, r2, r3
 8003448:	17db      	asrs	r3, r3, #31
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4a28      	ldr	r2, [pc, #160]	; (80034fc <GPS_parseLon+0x140>)
 800345c:	fb82 1203 	smull	r1, r2, r2, r3
 8003460:	1352      	asrs	r2, r2, #13
 8003462:	17db      	asrs	r3, r3, #31
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003478:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003500 <GPS_parseLon+0x144>
 800347c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003496:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003504 <GPS_parseLon+0x148>
 800349a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800349e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a2:	ee17 2a90 	vmov	r2, s15
 80034a6:	2364      	movs	r3, #100	; 0x64
 80034a8:	fb03 f302 	mul.w	r3, r3, r2
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034b8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003508 <GPS_parseLon+0x14c>
 80034bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80034d2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003504 <GPS_parseLon+0x148>
 80034d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	00989680 	.word	0x00989680
 80034f8:	55555556 	.word	0x55555556
 80034fc:	14f8b589 	.word	0x14f8b589
 8003500:	36c9539c 	.word	0x36c9539c
 8003504:	42c80000 	.word	0x42c80000
 8003508:	42700000 	.word	0x42700000

0800350c <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fdf2 	bl	8003102 <GPS_isEmpty>
 800351e:	4603      	mov	r3, r0
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d034      	beq.n	8003594 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b57      	cmp	r3, #87	; 0x57
 8003530:	d11c      	bne.n	800356c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2257      	movs	r2, #87	; 0x57
 8003536:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd f812 	bl	8000568 <__aeabi_f2d>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4618      	mov	r0, r3
 800354a:	4621      	mov	r1, r4
 800354c:	f7fd fb5c 	bl	8000c08 <__aeabi_d2f>
 8003550:	4603      	mov	r3, r0
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef1 7a67 	vneg.f32	s15, s15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	425a      	negs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	649a      	str	r2, [r3, #72]	; 0x48
 800356a:	e013      	b.n	8003594 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b45      	cmp	r3, #69	; 0x45
 8003572:	d104      	bne.n	800357e <GPS_parseLonDir+0x72>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2245      	movs	r2, #69	; 0x45
 8003578:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800357c:	e00a      	b.n	8003594 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b2c      	cmp	r3, #44	; 0x2c
 8003584:	d104      	bne.n	8003590 <GPS_parseLonDir+0x84>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800358e:	e001      	b.n	8003594 <GPS_parseLonDir+0x88>
		else return false;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}

0800359e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b41      	cmp	r3, #65	; 0x41
 80035ae:	d10a      	bne.n	80035c6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80035c4:	e00a      	b.n	80035dc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b56      	cmp	r3, #86	; 0x56
 80035cc:	d104      	bne.n	80035d8 <GPS_parseFix+0x3a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80035d6:	e001      	b.n	80035dc <GPS_parseFix+0x3e>
	else return false;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <GPS_parseFix+0x40>
	return true;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b2f      	cmp	r3, #47	; 0x2f
 8003638:	d801      	bhi.n	800363e <GPS_parseHex+0x16>
 800363a:	2300      	movs	r3, #0
 800363c:	e013      	b.n	8003666 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	2b39      	cmp	r3, #57	; 0x39
 8003642:	d803      	bhi.n	800364c <GPS_parseHex+0x24>
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	3b30      	subs	r3, #48	; 0x30
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e00c      	b.n	8003666 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d801      	bhi.n	8003656 <GPS_parseHex+0x2e>
 8003652:	2300      	movs	r3, #0
 8003654:	e007      	b.n	8003666 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	2b46      	cmp	r3, #70	; 0x46
 800365a:	d803      	bhi.n	8003664 <GPS_parseHex+0x3c>
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	3b37      	subs	r3, #55	; 0x37
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e000      	b.n	8003666 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af04      	add	r7, sp, #16
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
 800367c:	460b      	mov	r3, r1
 800367e:	71bb      	strb	r3, [r7, #6]
 8003680:	4613      	mov	r3, r2
 8003682:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 1);
 8003684:	f011 fa7a 	bl	8014b7c <Get_I2C1_Instance>
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	b299      	uxth	r1, r3
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	b29a      	uxth	r2, r3
 8003690:	2301      	movs	r3, #1
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	2301      	movs	r3, #1
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	1d7b      	adds	r3, r7, #5
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2301      	movs	r3, #1
 800369e:	f003 fca3 	bl	8006fe8 <HAL_I2C_Mem_Write>
	//while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
	/*print("Write:");
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af04      	add	r7, sp, #16
 80036b0:	4603      	mov	r3, r0
 80036b2:	460a      	mov	r2, r1
 80036b4:	71fb      	strb	r3, [r7, #7]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 1);
 80036ba:	f011 fa5f 	bl	8014b7c <Get_I2C1_Instance>
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	b299      	uxth	r1, r3
 80036c2:	79bb      	ldrb	r3, [r7, #6]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	2301      	movs	r3, #1
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2301      	movs	r3, #1
 80036d6:	f003 fd81 	bl	80071dc <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 80036da:	7b3b      	ldrb	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b08d      	sub	sp, #52	; 0x34
 80036e8:	af04      	add	r7, sp, #16
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
 80036f0:	460b      	mov	r3, r1
 80036f2:	71bb      	strb	r3, [r7, #6]
 80036f4:	4613      	mov	r3, r2
 80036f6:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 1);
 80036f8:	f011 fa40 	bl	8014b7c <Get_I2C1_Instance>
 80036fc:	4604      	mov	r4, r0
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	b299      	uxth	r1, r3
 8003702:	79bb      	ldrb	r3, [r7, #6]
 8003704:	b298      	uxth	r0, r3
 8003706:	797b      	ldrb	r3, [r7, #5]
 8003708:	b29b      	uxth	r3, r3
 800370a:	2201      	movs	r2, #1
 800370c:	9202      	str	r2, [sp, #8]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	4602      	mov	r2, r0
 800371a:	4620      	mov	r0, r4
 800371c:	f003 fd5e 	bl	80071dc <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e00b      	b.n	8003742 <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f107 010c 	add.w	r1, r7, #12
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	797b      	ldrb	r3, [r7, #5]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbef      	blt.n	800372a <MPU_readBytes+0x46>
	}
} 
 800374a:	bf00      	nop
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
	...

08003754 <MPU_getMres>:
 
void MPU_getMres()
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
	switch (MMscale)
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <MPU_getMres+0x2c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <MPU_getMres+0x12>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d004      	beq.n	800376e <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 8003764:	e007      	b.n	8003776 <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <MPU_getMres+0x30>)
 8003768:	4a07      	ldr	r2, [pc, #28]	; (8003788 <MPU_getMres+0x34>)
 800376a:	601a      	str	r2, [r3, #0]
			break;
 800376c:	e003      	b.n	8003776 <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <MPU_getMres+0x30>)
 8003770:	4a06      	ldr	r2, [pc, #24]	; (800378c <MPU_getMres+0x38>)
 8003772:	601a      	str	r2, [r3, #0]
			break;
 8003774:	bf00      	nop
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20002d68 	.word	0x20002d68
 8003784:	20002dd0 	.word	0x20002dd0
 8003788:	40bfebff 	.word	0x40bfebff
 800378c:	3fbfebff 	.word	0x3fbfebff

08003790 <MPU_getGres>:
void MPU_getGres()
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
	switch (GGscale)
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <MPU_getGres+0x50>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d81b      	bhi.n	80037d4 <MPU_getGres+0x44>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <MPU_getGres+0x14>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bd 	.word	0x080037bd
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037cd 	.word	0x080037cd
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <MPU_getGres+0x54>)
 80037b6:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <MPU_getGres+0x58>)
 80037b8:	601a      	str	r2, [r3, #0]
			break;
 80037ba:	e00b      	b.n	80037d4 <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <MPU_getGres+0x54>)
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <MPU_getGres+0x5c>)
 80037c0:	601a      	str	r2, [r3, #0]
			break;
 80037c2:	e007      	b.n	80037d4 <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <MPU_getGres+0x54>)
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <MPU_getGres+0x60>)
 80037c8:	601a      	str	r2, [r3, #0]
			break;
 80037ca:	e003      	b.n	80037d4 <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <MPU_getGres+0x54>)
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <MPU_getGres+0x64>)
 80037d0:	601a      	str	r2, [r3, #0]
			break;
 80037d2:	bf00      	nop
	}
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20002cdf 	.word	0x20002cdf
 80037e4:	20002d9c 	.word	0x20002d9c
 80037e8:	3bfa0000 	.word	0x3bfa0000
 80037ec:	3c7a0000 	.word	0x3c7a0000
 80037f0:	3cfa0000 	.word	0x3cfa0000
 80037f4:	3d7a0000 	.word	0x3d7a0000

080037f8 <MPU_getAres>:
void MPU_getAres()
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	switch (AAscale)
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <MPU_getAres+0x58>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d81f      	bhi.n	8003844 <MPU_getAres+0x4c>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <MPU_getAres+0x14>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	0800381d 	.word	0x0800381d
 8003810:	08003827 	.word	0x08003827
 8003814:	08003831 	.word	0x08003831
 8003818:	0800383b 	.word	0x0800383b
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <MPU_getAres+0x5c>)
 800381e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003822:	601a      	str	r2, [r3, #0]
			break;
 8003824:	e00e      	b.n	8003844 <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <MPU_getAres+0x5c>)
 8003828:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800382c:	601a      	str	r2, [r3, #0]
			break;
 800382e:	e009      	b.n	8003844 <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <MPU_getAres+0x5c>)
 8003832:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003836:	601a      	str	r2, [r3, #0]
			break;
 8003838:	e004      	b.n	8003844 <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <MPU_getAres+0x5c>)
 800383c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003840:	601a      	str	r2, [r3, #0]
			break;
 8003842:	bf00      	nop
	}
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20002d18 	.word	0x20002d18
 8003854:	20002d5c 	.word	0x20002d5c

08003858 <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	2206      	movs	r2, #6
 8003866:	213b      	movs	r1, #59	; 0x3b
 8003868:	20d2      	movs	r0, #210	; 0xd2
 800386a:	f7ff ff3b 	bl	80036e4 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 800386e:	7a3b      	ldrb	r3, [r7, #8]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	b21a      	sxth	r2, r3
 8003874:	7a7b      	ldrb	r3, [r7, #9]
 8003876:	b21b      	sxth	r3, r3
 8003878:	4313      	orrs	r3, r2
 800387a:	b21a      	sxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003880:	7abb      	ldrb	r3, [r7, #10]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b219      	sxth	r1, r3
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	b21a      	sxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3302      	adds	r3, #2
 800388e:	430a      	orrs	r2, r1
 8003890:	b212      	sxth	r2, r2
 8003892:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003894:	7b3b      	ldrb	r3, [r7, #12]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	b219      	sxth	r1, r3
 800389a:	7b7b      	ldrb	r3, [r7, #13]
 800389c:	b21a      	sxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	430a      	orrs	r2, r1
 80038a4:	b212      	sxth	r2, r2
 80038a6:	801a      	strh	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80038b8:	f107 0308 	add.w	r3, r7, #8
 80038bc:	2206      	movs	r2, #6
 80038be:	2143      	movs	r1, #67	; 0x43
 80038c0:	20d2      	movs	r0, #210	; 0xd2
 80038c2:	f7ff ff0f 	bl	80036e4 <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 80038c6:	7a3b      	ldrb	r3, [r7, #8]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	b21a      	sxth	r2, r3
 80038cc:	7a7b      	ldrb	r3, [r7, #9]
 80038ce:	b21b      	sxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b21a      	sxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 80038d8:	7abb      	ldrb	r3, [r7, #10]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	b219      	sxth	r1, r3
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3302      	adds	r3, #2
 80038e6:	430a      	orrs	r2, r1
 80038e8:	b212      	sxth	r2, r2
 80038ea:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 80038ec:	7b3b      	ldrb	r3, [r7, #12]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	b219      	sxth	r1, r3
 80038f2:	7b7b      	ldrb	r3, [r7, #13]
 80038f4:	b21a      	sxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	430a      	orrs	r2, r1
 80038fc:	b212      	sxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8003910:	2102      	movs	r1, #2
 8003912:	2018      	movs	r0, #24
 8003914:	f7ff fec9 	bl	80036aa <MPU_readByte>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02a      	beq.n	8003978 <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	2207      	movs	r2, #7
 8003928:	2103      	movs	r1, #3
 800392a:	2018      	movs	r0, #24
 800392c:	f7ff feda 	bl	80036e4 <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8003930:	7bbb      	ldrb	r3, [r7, #14]
 8003932:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11c      	bne.n	8003978 <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 800393e:	7a7b      	ldrb	r3, [r7, #9]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	b21a      	sxth	r2, r3
 8003944:	7a3b      	ldrb	r3, [r7, #8]
 8003946:	b21b      	sxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	b21a      	sxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b219      	sxth	r1, r3
 8003956:	7abb      	ldrb	r3, [r7, #10]
 8003958:	b21a      	sxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3302      	adds	r3, #2
 800395e:	430a      	orrs	r2, r1
 8003960:	b212      	sxth	r2, r2
 8003962:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 8003964:	7b7b      	ldrb	r3, [r7, #13]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b219      	sxth	r1, r3
 800396a:	7b3b      	ldrb	r3, [r7, #12]
 800396c:	b21a      	sxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	430a      	orrs	r2, r1
 8003974:	b212      	sxth	r2, r2
 8003976:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <MPU_present>:
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
}

bool MPU_present()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	71fb      	strb	r3, [r7, #7]
	do
	{
		MPU_reset();
 800398a:	f000 f977 	bl	8003c7c <MPU_reset>
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 800398e:	2175      	movs	r1, #117	; 0x75
 8003990:	20d2      	movs	r0, #210	; 0xd2
 8003992:	f7ff fe8a 	bl	80036aa <MPU_readByte>
 8003996:	4603      	mov	r3, r0
 8003998:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 800399a:	79bb      	ldrb	r3, [r7, #6]
 800399c:	2b71      	cmp	r3, #113	; 0x71
 800399e:	d101      	bne.n	80039a4 <MPU_present+0x24>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e00a      	b.n	80039ba <MPU_present+0x3a>
		else
		{
			attempts++;
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	3301      	adds	r3, #1
 80039a8:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80039aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ae:	f002 fb41 	bl	8006034 <HAL_Delay>
		}
	} while (attempts <= 5);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d9e8      	bls.n	800398a <MPU_present+0xa>
	return false;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <MPU_init>:
void MPU_init()
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
	AAscale = AFS_2G;
 80039ca:	4b64      	ldr	r3, [pc, #400]	; (8003b5c <MPU_init+0x198>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 80039d0:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <MPU_init+0x19c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <MPU_init+0x1a0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 80039dc:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <MPU_init+0x1a4>)
 80039de:	2206      	movs	r2, #6
 80039e0:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 80039e2:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <MPU_init+0x1a8>)
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 80039ea:	4b60      	ldr	r3, [pc, #384]	; (8003b6c <MPU_init+0x1a8>)
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 80039f2:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <MPU_init+0x1a8>)
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <MPU_init+0x1ac>)
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <MPU_init+0x1ac>)
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8003a0a:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <MPU_init+0x1ac>)
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8003a12:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <MPU_init+0x1b0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
	count = 0;
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <MPU_init+0x1b4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8003a1e:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <MPU_init+0x1b8>)
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <MPU_init+0x1bc>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8003a2c:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <MPU_init+0x1c0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
	Now = 0;
 8003a32:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <MPU_init+0x1c4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8003a38:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <MPU_init+0x1c8>)
 8003a3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a3e:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8003a40:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <MPU_init+0x1c8>)
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <MPU_init+0x1c8>)
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8003a50:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <MPU_init+0x1c8>)
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8003a58:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <MPU_init+0x1cc>)
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <MPU_init+0x1cc>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8003a68:	4b49      	ldr	r3, [pc, #292]	; (8003b90 <MPU_init+0x1cc>)
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8003a70:	2200      	movs	r2, #0
 8003a72:	216b      	movs	r1, #107	; 0x6b
 8003a74:	20d2      	movs	r0, #210	; 0xd2
 8003a76:	f7ff fdfc 	bl	8003672 <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 8003a7a:	2064      	movs	r0, #100	; 0x64
 8003a7c:	f002 fada 	bl	8006034 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003a80:	2201      	movs	r2, #1
 8003a82:	216b      	movs	r1, #107	; 0x6b
 8003a84:	20d2      	movs	r0, #210	; 0xd2
 8003a86:	f7ff fdf4 	bl	8003672 <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	HAL_Delay(100);
 8003a8a:	2064      	movs	r0, #100	; 0x64
 8003a8c:	f002 fad2 	bl	8006034 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003a90:	2203      	movs	r2, #3
 8003a92:	211a      	movs	r1, #26
 8003a94:	20d2      	movs	r0, #210	; 0xd2
 8003a96:	f7ff fdec 	bl	8003672 <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	HAL_Delay(100);
 8003a9a:	2064      	movs	r0, #100	; 0x64
 8003a9c:	f002 faca 	bl	8006034 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	2119      	movs	r1, #25
 8003aa4:	20d2      	movs	r0, #210	; 0xd2
 8003aa6:	f7ff fde4 	bl	8003672 <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8003aaa:	211b      	movs	r1, #27
 8003aac:	20d2      	movs	r0, #210	; 0xd2
 8003aae:	f7ff fdfc 	bl	80036aa <MPU_readByte>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x03; // Clear Fchoice bits [1:0]
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f023 0303 	bic.w	r3, r3, #3
 8003abc:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f023 0318 	bic.w	r3, r3, #24
 8003ac4:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <MPU_init+0x19c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	b25a      	sxtb	r2, r3
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	461a      	mov	r2, r3
 8003adc:	211b      	movs	r1, #27
 8003ade:	20d2      	movs	r0, #210	; 0xd2
 8003ae0:	f7ff fdc7 	bl	8003672 <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8003ae4:	211c      	movs	r1, #28
 8003ae6:	20d2      	movs	r0, #210	; 0xd2
 8003ae8:	f7ff fddf 	bl	80036aa <MPU_readByte>
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	f023 0318 	bic.w	r3, r3, #24
 8003af6:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <MPU_init+0x198>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	b25a      	sxtb	r2, r3
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	211c      	movs	r1, #28
 8003b10:	20d2      	movs	r0, #210	; 0xd2
 8003b12:	f7ff fdae 	bl	8003672 <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8003b16:	211d      	movs	r1, #29
 8003b18:	20d2      	movs	r0, #210	; 0xd2
 8003b1a:	f7ff fdc6 	bl	80036aa <MPU_readByte>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	f023 030f 	bic.w	r3, r3, #15
 8003b28:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	f043 0303 	orr.w	r3, r3, #3
 8003b30:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	461a      	mov	r2, r3
 8003b36:	211d      	movs	r1, #29
 8003b38:	20d2      	movs	r0, #210	; 0xd2
 8003b3a:	f7ff fd9a 	bl	8003672 <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8003b3e:	2222      	movs	r2, #34	; 0x22
 8003b40:	2137      	movs	r1, #55	; 0x37
 8003b42:	20d2      	movs	r0, #210	; 0xd2
 8003b44:	f7ff fd95 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2138      	movs	r1, #56	; 0x38
 8003b4c:	20d2      	movs	r0, #210	; 0xd2
 8003b4e:	f7ff fd90 	bl	8003672 <MPU_writeByte>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20002d18 	.word	0x20002d18
 8003b60:	20002cdf 	.word	0x20002cdf
 8003b64:	20002d68 	.word	0x20002d68
 8003b68:	20002d40 	.word	0x20002d40
 8003b6c:	20002df8 	.word	0x20002df8
 8003b70:	20002d44 	.word	0x20002d44
 8003b74:	20002d90 	.word	0x20002d90
 8003b78:	20002d88 	.word	0x20002d88
 8003b7c:	20002dcc 	.word	0x20002dcc
 8003b80:	20002d24 	.word	0x20002d24
 8003b84:	20002dd4 	.word	0x20002dd4
 8003b88:	20002d54 	.word	0x20002d54
 8003b8c:	20002de4 	.word	0x20002de4
 8003b90:	20002d34 	.word	0x20002d34

08003b94 <AK8963_init>:
void AK8963_init(float * destination)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	210a      	movs	r1, #10
 8003ba0:	2018      	movs	r0, #24
 8003ba2:	f7ff fd66 	bl	8003672 <MPU_writeByte>
	HAL_Delay(10);
 8003ba6:	200a      	movs	r0, #10
 8003ba8:	f002 fa44 	bl	8006034 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003bac:	220f      	movs	r2, #15
 8003bae:	210a      	movs	r1, #10
 8003bb0:	2018      	movs	r0, #24
 8003bb2:	f7ff fd5e 	bl	8003672 <MPU_writeByte>
	HAL_Delay(10);
 8003bb6:	200a      	movs	r0, #10
 8003bb8:	f002 fa3c 	bl	8006034 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8003bbc:	f107 030c 	add.w	r3, r7, #12
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	2018      	movs	r0, #24
 8003bc6:	f7ff fd8d 	bl	80036e4 <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8003bca:	7b3b      	ldrb	r3, [r7, #12]
 8003bcc:	3b80      	subs	r3, #128	; 0x80
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c70 <AK8963_init+0xdc>
 8003bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
 8003bee:	3b80      	subs	r3, #128	; 0x80
 8003bf0:	ee07 3a90 	vmov	s15, r3
 8003bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003c70 <AK8963_init+0xdc>
 8003bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8003c10:	7bbb      	ldrb	r3, [r7, #14]
 8003c12:	3b80      	subs	r3, #128	; 0x80
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003c70 <AK8963_init+0xdc>
 8003c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3308      	adds	r3, #8
 8003c28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c30:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003c34:	2200      	movs	r2, #0
 8003c36:	210a      	movs	r1, #10
 8003c38:	2018      	movs	r0, #24
 8003c3a:	f7ff fd1a 	bl	8003672 <MPU_writeByte>
	HAL_Delay(10);
 8003c3e:	200a      	movs	r0, #10
 8003c40:	f002 f9f8 	bl	8006034 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <AK8963_init+0xe0>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	b25a      	sxtb	r2, r3
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <AK8963_init+0xe4>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b25b      	sxtb	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	210a      	movs	r1, #10
 8003c5c:	2018      	movs	r0, #24
 8003c5e:	f7ff fd08 	bl	8003672 <MPU_writeByte>
	HAL_Delay(10);
 8003c62:	200a      	movs	r0, #10
 8003c64:	f002 f9e6 	bl	8006034 <HAL_Delay>
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	43800000 	.word	0x43800000
 8003c74:	20002d68 	.word	0x20002d68
 8003c78:	20002d40 	.word	0x20002d40

08003c7c <MPU_reset>:

void MPU_reset()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	// reset device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	216b      	movs	r1, #107	; 0x6b
 8003c84:	20d2      	movs	r0, #210	; 0xd2
 8003c86:	f7ff fcf4 	bl	8003672 <MPU_writeByte>
	HAL_Delay(100);
 8003c8a:	2064      	movs	r0, #100	; 0x64
 8003c8c:	f002 f9d2 	bl	8006034 <HAL_Delay>
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <MPU_calibrate>:

void MPU_calibrate(float* dest1, float* dest2)
{  
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b098      	sub	sp, #96	; 0x60
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cae:	2300      	movs	r3, #0
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	216b      	movs	r1, #107	; 0x6b
 8003cba:	20d2      	movs	r0, #210	; 0xd2
 8003cbc:	f7ff fcd9 	bl	8003672 <MPU_writeByte>
	HAL_Delay(100);  
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	f002 f9b7 	bl	8006034 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	216b      	movs	r1, #107	; 0x6b
 8003cca:	20d2      	movs	r0, #210	; 0xd2
 8003ccc:	f7ff fcd1 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	216c      	movs	r1, #108	; 0x6c
 8003cd4:	20d2      	movs	r0, #210	; 0xd2
 8003cd6:	f7ff fccc 	bl	8003672 <MPU_writeByte>
	HAL_Delay(200);
 8003cda:	20c8      	movs	r0, #200	; 0xc8
 8003cdc:	f002 f9aa 	bl	8006034 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2138      	movs	r1, #56	; 0x38
 8003ce4:	20d2      	movs	r0, #210	; 0xd2
 8003ce6:	f7ff fcc4 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8003cea:	2200      	movs	r2, #0
 8003cec:	2123      	movs	r1, #35	; 0x23
 8003cee:	20d2      	movs	r0, #210	; 0xd2
 8003cf0:	f7ff fcbf 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	216b      	movs	r1, #107	; 0x6b
 8003cf8:	20d2      	movs	r0, #210	; 0xd2
 8003cfa:	f7ff fcba 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2124      	movs	r1, #36	; 0x24
 8003d02:	20d2      	movs	r0, #210	; 0xd2
 8003d04:	f7ff fcb5 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003d08:	2200      	movs	r2, #0
 8003d0a:	216a      	movs	r1, #106	; 0x6a
 8003d0c:	20d2      	movs	r0, #210	; 0xd2
 8003d0e:	f7ff fcb0 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8003d12:	220c      	movs	r2, #12
 8003d14:	216a      	movs	r1, #106	; 0x6a
 8003d16:	20d2      	movs	r0, #210	; 0xd2
 8003d18:	f7ff fcab 	bl	8003672 <MPU_writeByte>
	HAL_Delay(15);
 8003d1c:	200f      	movs	r0, #15
 8003d1e:	f002 f989 	bl	8006034 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003d22:	2201      	movs	r2, #1
 8003d24:	211a      	movs	r1, #26
 8003d26:	20d2      	movs	r0, #210	; 0xd2
 8003d28:	f7ff fca3 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2119      	movs	r1, #25
 8003d30:	20d2      	movs	r0, #210	; 0xd2
 8003d32:	f7ff fc9e 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003d36:	2200      	movs	r2, #0
 8003d38:	211b      	movs	r1, #27
 8003d3a:	20d2      	movs	r0, #210	; 0xd2
 8003d3c:	f7ff fc99 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8003d40:	2200      	movs	r2, #0
 8003d42:	211c      	movs	r1, #28
 8003d44:	20d2      	movs	r0, #210	; 0xd2
 8003d46:	f7ff fc94 	bl	8003672 <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003d4a:	2383      	movs	r3, #131	; 0x83
 8003d4c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8003d50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d54:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 8003d58:	2240      	movs	r2, #64	; 0x40
 8003d5a:	216a      	movs	r1, #106	; 0x6a
 8003d5c:	20d2      	movs	r0, #210	; 0xd2
 8003d5e:	f7ff fc88 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8003d62:	2278      	movs	r2, #120	; 0x78
 8003d64:	2123      	movs	r1, #35	; 0x23
 8003d66:	20d2      	movs	r0, #210	; 0xd2
 8003d68:	f7ff fc83 	bl	8003672 <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8003d6c:	2028      	movs	r0, #40	; 0x28
 8003d6e:	f002 f961 	bl	8006034 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8003d72:	2200      	movs	r2, #0
 8003d74:	2123      	movs	r1, #35	; 0x23
 8003d76:	20d2      	movs	r0, #210	; 0xd2
 8003d78:	f7ff fc7b 	bl	8003672 <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8003d7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d80:	2202      	movs	r2, #2
 8003d82:	2172      	movs	r1, #114	; 0x72
 8003d84:	20d2      	movs	r0, #210	; 0xd2
 8003d86:	f7ff fcad 	bl	80036e4 <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8003d8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	b21a      	sxth	r2, r3
 8003d92:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003da0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003da4:	4ab0      	ldr	r2, [pc, #704]	; (8004068 <MPU_calibrate+0x3d4>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003db6:	e071      	b.n	8003e9c <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003db8:	2300      	movs	r3, #0
 8003dba:	82bb      	strh	r3, [r7, #20]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	82fb      	strh	r3, [r7, #22]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	833b      	strh	r3, [r7, #24]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	81bb      	strh	r3, [r7, #12]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	81fb      	strh	r3, [r7, #14]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8003dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	2174      	movs	r1, #116	; 0x74
 8003dd8:	20d2      	movs	r0, #210	; 0xd2
 8003dda:	f7ff fc83 	bl	80036e4 <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8003dde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003dea:	b21b      	sxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8003df2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	b21a      	sxth	r2, r3
 8003dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 8003e06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003e12:	b21b      	sxth	r3, r3
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8003e1a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	b21a      	sxth	r2, r3
 8003e22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8003e2e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b21b      	sxth	r3, r3
 8003e40:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8003e42:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	b21a      	sxth	r2, r3
 8003e4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e66:	4413      	add	r3, r2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003e70:	4413      	add	r3, r2
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e84:	4413      	add	r3, r2
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 8003e92:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e9c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003ea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d387      	bcc.n	8003db8 <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8003ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003eba:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 8003ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8003ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ece:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 8003ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 8003ee4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ee6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dd05      	ble.n	8003f02 <MPU_calibrate+0x26e>
 8003ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
 8003f00:	e004      	b.n	8003f0c <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8003f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f04:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003f08:	4413      	add	r3, r2
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	425b      	negs	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da00      	bge.n	8003f16 <MPU_calibrate+0x282>
 8003f14:	3303      	adds	r3, #3
 8003f16:	109b      	asrs	r3, r3, #2
 8003f18:	121b      	asrs	r3, r3, #8
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	425b      	negs	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da00      	bge.n	8003f2a <MPU_calibrate+0x296>
 8003f28:	3303      	adds	r3, #3
 8003f2a:	109b      	asrs	r3, r3, #2
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	425b      	negs	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da00      	bge.n	8003f3c <MPU_calibrate+0x2a8>
 8003f3a:	3303      	adds	r3, #3
 8003f3c:	109b      	asrs	r3, r3, #2
 8003f3e:	121b      	asrs	r3, r3, #8
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8003f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f48:	425b      	negs	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da00      	bge.n	8003f50 <MPU_calibrate+0x2bc>
 8003f4e:	3303      	adds	r3, #3
 8003f50:	109b      	asrs	r3, r3, #2
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5a:	425b      	negs	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da00      	bge.n	8003f62 <MPU_calibrate+0x2ce>
 8003f60:	3303      	adds	r3, #3
 8003f62:	109b      	asrs	r3, r3, #2
 8003f64:	121b      	asrs	r3, r3, #8
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	425b      	negs	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da00      	bge.n	8003f76 <MPU_calibrate+0x2e2>
 8003f74:	3303      	adds	r3, #3
 8003f76:	109b      	asrs	r3, r3, #2
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fa8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fbc:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fde:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	2300      	movs	r3, #0
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8003fee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	2177      	movs	r1, #119	; 0x77
 8003ff6:	20d2      	movs	r0, #210	; 0xd2
 8003ff8:	f7ff fb74 	bl	80036e4 <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8003ffc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	b21b      	sxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800400a:	4313      	orrs	r3, r2
 800400c:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800400e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004012:	2202      	movs	r2, #2
 8004014:	217a      	movs	r1, #122	; 0x7a
 8004016:	20d2      	movs	r0, #210	; 0xd2
 8004018:	f7ff fb64 	bl	80036e4 <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800401c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	b21b      	sxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800402a:	4313      	orrs	r3, r2
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800402e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004032:	2202      	movs	r2, #2
 8004034:	217d      	movs	r1, #125	; 0x7d
 8004036:	20d2      	movs	r0, #210	; 0xd2
 8004038:	f7ff fb54 	bl	80036e4 <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800403c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	b21b      	sxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800404a:	4313      	orrs	r3, r2
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800404e:	2301      	movs	r3, #1
 8004050:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8004052:	2300      	movs	r3, #0
 8004054:	773b      	strb	r3, [r7, #28]
 8004056:	2300      	movs	r3, #0
 8004058:	777b      	strb	r3, [r7, #29]
 800405a:	2300      	movs	r3, #0
 800405c:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 800405e:	2300      	movs	r3, #0
 8004060:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004064:	e01c      	b.n	80040a0 <MPU_calibrate+0x40c>
 8004066:	bf00      	nop
 8004068:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800406c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004076:	4413      	add	r3, r2
 8004078:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800407c:	461a      	mov	r2, r3
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <MPU_calibrate+0x402>
 8004086:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800408a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800408e:	4413      	add	r3, r2
 8004090:	2201      	movs	r2, #1
 8004092:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 8004096:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800409a:	3301      	adds	r3, #1
 800409c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80040a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d9e1      	bls.n	800406c <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	da00      	bge.n	80040b2 <MPU_calibrate+0x41e>
 80040b0:	3307      	adds	r3, #7
 80040b2:	10db      	asrs	r3, r3, #3
 80040b4:	425b      	negs	r3, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da00      	bge.n	80040c4 <MPU_calibrate+0x430>
 80040c2:	3307      	adds	r3, #7
 80040c4:	10db      	asrs	r3, r3, #3
 80040c6:	425b      	negs	r3, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80040cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da00      	bge.n	80040d6 <MPU_calibrate+0x442>
 80040d4:	3307      	adds	r3, #7
 80040d6:	10db      	asrs	r3, r3, #3
 80040d8:	425b      	negs	r3, r3
 80040da:	4413      	add	r3, r2
 80040dc:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	121b      	asrs	r3, r3, #8
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80040f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040f4:	7f3b      	ldrb	r3, [r7, #28]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	121b      	asrs	r3, r3, #8
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004110:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004114:	7f7b      	ldrb	r3, [r7, #29]
 8004116:	4313      	orrs	r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	121b      	asrs	r3, r3, #8
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004130:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004134:	7fbb      	ldrb	r3, [r7, #30]
 8004136:	4313      	orrs	r3, r2
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004148:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004168:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3304      	adds	r3, #4
 8004178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417c:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800418a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419e:	edc3 7a00 	vstr	s15, [r3]
}
 80041a2:	bf00      	nop
 80041a4:	3760      	adds	r7, #96	; 0x60
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 80041b0:	b5b0      	push	{r4, r5, r7, lr}
 80041b2:	b09e      	sub	sp, #120	; 0x78
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80041b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80041c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80041f8:	2200      	movs	r2, #0
 80041fa:	2119      	movs	r1, #25
 80041fc:	20d2      	movs	r0, #210	; 0xd2
 80041fe:	f7ff fa38 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8004202:	2202      	movs	r2, #2
 8004204:	211a      	movs	r1, #26
 8004206:	20d2      	movs	r0, #210	; 0xd2
 8004208:	f7ff fa33 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 800420c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	211b      	movs	r1, #27
 8004218:	20d2      	movs	r0, #210	; 0xd2
 800421a:	f7ff fa2a 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800421e:	2202      	movs	r2, #2
 8004220:	211d      	movs	r1, #29
 8004222:	20d2      	movs	r0, #210	; 0xd2
 8004224:	f7ff fa25 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 8004228:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	211c      	movs	r1, #28
 8004234:	20d2      	movs	r0, #210	; 0xd2
 8004236:	f7ff fa1c 	bl	8003672 <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 800423a:	2300      	movs	r3, #0
 800423c:	677b      	str	r3, [r7, #116]	; 0x74
 800423e:	e058      	b.n	80042f2 <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8004240:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004244:	2206      	movs	r2, #6
 8004246:	213b      	movs	r1, #59	; 0x3b
 8004248:	20d2      	movs	r0, #210	; 0xd2
 800424a:	f7ff fa4b 	bl	80036e4 <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004250:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004254:	0212      	lsls	r2, r2, #8
 8004256:	b211      	sxth	r1, r2
 8004258:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800425c:	b212      	sxth	r2, r2
 800425e:	430a      	orrs	r2, r1
 8004260:	b212      	sxth	r2, r2
 8004262:	4413      	add	r3, r2
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8004266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004268:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800426c:	0212      	lsls	r2, r2, #8
 800426e:	b211      	sxth	r1, r2
 8004270:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004274:	b212      	sxth	r2, r2
 8004276:	430a      	orrs	r2, r1
 8004278:	b212      	sxth	r2, r2
 800427a:	4413      	add	r3, r2
 800427c:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004280:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004284:	0212      	lsls	r2, r2, #8
 8004286:	b211      	sxth	r1, r2
 8004288:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800428c:	b212      	sxth	r2, r2
 800428e:	430a      	orrs	r2, r1
 8004290:	b212      	sxth	r2, r2
 8004292:	4413      	add	r3, r2
 8004294:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8004296:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800429a:	2206      	movs	r2, #6
 800429c:	2143      	movs	r1, #67	; 0x43
 800429e:	20d2      	movs	r0, #210	; 0xd2
 80042a0:	f7ff fa20 	bl	80036e4 <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80042a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80042aa:	0212      	lsls	r2, r2, #8
 80042ac:	b211      	sxth	r1, r2
 80042ae:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80042b2:	b212      	sxth	r2, r2
 80042b4:	430a      	orrs	r2, r1
 80042b6:	b212      	sxth	r2, r2
 80042b8:	4413      	add	r3, r2
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	b211      	sxth	r1, r2
 80042c6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80042ca:	b212      	sxth	r2, r2
 80042cc:	430a      	orrs	r2, r1
 80042ce:	b212      	sxth	r2, r2
 80042d0:	4413      	add	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80042d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80042da:	0212      	lsls	r2, r2, #8
 80042dc:	b211      	sxth	r1, r2
 80042de:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80042e2:	b212      	sxth	r2, r2
 80042e4:	430a      	orrs	r2, r1
 80042e6:	b212      	sxth	r2, r2
 80042e8:	4413      	add	r3, r2
 80042ea:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 80042ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ee:	3301      	adds	r3, #1
 80042f0:	677b      	str	r3, [r7, #116]	; 0x74
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	2bc7      	cmp	r3, #199	; 0xc7
 80042f6:	dda3      	ble.n	8004240 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	673b      	str	r3, [r7, #112]	; 0x70
 80042fc:	e02a      	b.n	8004354 <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80042fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004306:	4413      	add	r3, r2
 8004308:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800430c:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <MPU_SelfTest+0x288>)
 800430e:	fb82 1203 	smull	r1, r2, r2, r3
 8004312:	1192      	asrs	r2, r2, #6
 8004314:	17db      	asrs	r3, r3, #31
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004320:	440b      	add	r3, r1
 8004322:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 8004326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800432e:	4413      	add	r3, r2
 8004330:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004334:	4a40      	ldr	r2, [pc, #256]	; (8004438 <MPU_SelfTest+0x288>)
 8004336:	fb82 1203 	smull	r1, r2, r2, r3
 800433a:	1192      	asrs	r2, r2, #6
 800433c:	17db      	asrs	r3, r3, #31
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004348:	440b      	add	r3, r1
 800434a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 800434e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004350:	3301      	adds	r3, #1
 8004352:	673b      	str	r3, [r7, #112]	; 0x70
 8004354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004356:	2b02      	cmp	r3, #2
 8004358:	ddd1      	ble.n	80042fe <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800435a:	22e0      	movs	r2, #224	; 0xe0
 800435c:	211c      	movs	r1, #28
 800435e:	20d2      	movs	r0, #210	; 0xd2
 8004360:	f7ff f987 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004364:	22e0      	movs	r2, #224	; 0xe0
 8004366:	211b      	movs	r1, #27
 8004368:	20d2      	movs	r0, #210	; 0xd2
 800436a:	f7ff f982 	bl	8003672 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800436e:	2019      	movs	r0, #25
 8004370:	f001 fe60 	bl	8006034 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 8004374:	2300      	movs	r3, #0
 8004376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004378:	e058      	b.n	800442c <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 800437a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800437e:	2206      	movs	r2, #6
 8004380:	213b      	movs	r1, #59	; 0x3b
 8004382:	20d2      	movs	r0, #210	; 0xd2
 8004384:	f7ff f9ae 	bl	80036e4 <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800438e:	0212      	lsls	r2, r2, #8
 8004390:	b211      	sxth	r1, r2
 8004392:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004396:	b212      	sxth	r2, r2
 8004398:	430a      	orrs	r2, r1
 800439a:	b212      	sxth	r2, r2
 800439c:	4413      	add	r3, r2
 800439e:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80043a6:	0212      	lsls	r2, r2, #8
 80043a8:	b211      	sxth	r1, r2
 80043aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80043ae:	b212      	sxth	r2, r2
 80043b0:	430a      	orrs	r2, r1
 80043b2:	b212      	sxth	r2, r2
 80043b4:	4413      	add	r3, r2
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80043be:	0212      	lsls	r2, r2, #8
 80043c0:	b211      	sxth	r1, r2
 80043c2:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80043c6:	b212      	sxth	r2, r2
 80043c8:	430a      	orrs	r2, r1
 80043ca:	b212      	sxth	r2, r2
 80043cc:	4413      	add	r3, r2
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 80043d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043d4:	2206      	movs	r2, #6
 80043d6:	2143      	movs	r1, #67	; 0x43
 80043d8:	20d2      	movs	r0, #210	; 0xd2
 80043da:	f7ff f983 	bl	80036e4 <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80043e4:	0212      	lsls	r2, r2, #8
 80043e6:	b211      	sxth	r1, r2
 80043e8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80043ec:	b212      	sxth	r2, r2
 80043ee:	430a      	orrs	r2, r1
 80043f0:	b212      	sxth	r2, r2
 80043f2:	4413      	add	r3, r2
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80043fc:	0212      	lsls	r2, r2, #8
 80043fe:	b211      	sxth	r1, r2
 8004400:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004404:	b212      	sxth	r2, r2
 8004406:	430a      	orrs	r2, r1
 8004408:	b212      	sxth	r2, r2
 800440a:	4413      	add	r3, r2
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004414:	0212      	lsls	r2, r2, #8
 8004416:	b211      	sxth	r1, r2
 8004418:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800441c:	b212      	sxth	r2, r2
 800441e:	430a      	orrs	r2, r1
 8004420:	b212      	sxth	r2, r2
 8004422:	4413      	add	r3, r2
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8004426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004428:	3301      	adds	r3, #1
 800442a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	2bc7      	cmp	r3, #199	; 0xc7
 8004430:	dda3      	ble.n	800437a <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8004432:	2300      	movs	r3, #0
 8004434:	66bb      	str	r3, [r7, #104]	; 0x68
 8004436:	e02c      	b.n	8004492 <MPU_SelfTest+0x2e2>
 8004438:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 800443c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004444:	4413      	add	r3, r2
 8004446:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800444a:	4add      	ldr	r2, [pc, #884]	; (80047c0 <MPU_SelfTest+0x610>)
 800444c:	fb82 1203 	smull	r1, r2, r2, r3
 8004450:	1192      	asrs	r2, r2, #6
 8004452:	17db      	asrs	r3, r3, #31
 8004454:	1ad2      	subs	r2, r2, r3
 8004456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800445e:	440b      	add	r3, r1
 8004460:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 8004464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800446c:	4413      	add	r3, r2
 800446e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004472:	4ad3      	ldr	r2, [pc, #844]	; (80047c0 <MPU_SelfTest+0x610>)
 8004474:	fb82 1203 	smull	r1, r2, r2, r3
 8004478:	1192      	asrs	r2, r2, #6
 800447a:	17db      	asrs	r3, r3, #31
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004486:	440b      	add	r3, r1
 8004488:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 800448c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448e:	3301      	adds	r3, #1
 8004490:	66bb      	str	r3, [r7, #104]	; 0x68
 8004492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004494:	2b02      	cmp	r3, #2
 8004496:	ddd1      	ble.n	800443c <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8004498:	2200      	movs	r2, #0
 800449a:	211c      	movs	r1, #28
 800449c:	20d2      	movs	r0, #210	; 0xd2
 800449e:	f7ff f8e8 	bl	8003672 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 80044a2:	2200      	movs	r2, #0
 80044a4:	211b      	movs	r1, #27
 80044a6:	20d2      	movs	r0, #210	; 0xd2
 80044a8:	f7ff f8e3 	bl	8003672 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80044ac:	2019      	movs	r0, #25
 80044ae:	f001 fdc1 	bl	8006034 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80044b2:	210d      	movs	r1, #13
 80044b4:	20d2      	movs	r0, #210	; 0xd2
 80044b6:	f7ff f8f8 	bl	80036aa <MPU_readByte>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 80044c0:	210e      	movs	r1, #14
 80044c2:	20d2      	movs	r0, #210	; 0xd2
 80044c4:	f7ff f8f1 	bl	80036aa <MPU_readByte>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 80044ce:	210f      	movs	r1, #15
 80044d0:	20d2      	movs	r0, #210	; 0xd2
 80044d2:	f7ff f8ea 	bl	80036aa <MPU_readByte>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 80044dc:	2100      	movs	r1, #0
 80044de:	20d2      	movs	r0, #210	; 0xd2
 80044e0:	f7ff f8e3 	bl	80036aa <MPU_readByte>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 80044ea:	2101      	movs	r1, #1
 80044ec:	20d2      	movs	r0, #210	; 0xd2
 80044ee:	f7ff f8dc 	bl	80036aa <MPU_readByte>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 80044f8:	2102      	movs	r1, #2
 80044fa:	20d2      	movs	r0, #210	; 0xd2
 80044fc:	f7ff f8d5 	bl	80036aa <MPU_readByte>
 8004500:	4603      	mov	r3, r0
 8004502:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8004506:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800450a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451a:	ee17 0a90 	vmov	r0, s15
 800451e:	f7fc f823 	bl	8000568 <__aeabi_f2d>
 8004522:	4604      	mov	r4, r0
 8004524:	460d      	mov	r5, r1
 8004526:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	ee17 0a90 	vmov	r0, s15
 8004536:	f7fc f817 	bl	8000568 <__aeabi_f2d>
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	4ba1      	ldr	r3, [pc, #644]	; (80047c4 <MPU_SelfTest+0x614>)
 8004540:	f7fb feb2 	bl	80002a8 <__aeabi_dsub>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	ec43 2b17 	vmov	d7, r2, r3
 800454c:	eeb0 1a47 	vmov.f32	s2, s14
 8004550:	eef0 1a67 	vmov.f32	s3, s15
 8004554:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80047b8 <MPU_SelfTest+0x608>
 8004558:	f015 fc52 	bl	8019e00 <pow>
 800455c:	ec53 2b10 	vmov	r2, r3, d0
 8004560:	4620      	mov	r0, r4
 8004562:	4629      	mov	r1, r5
 8004564:	f7fc f858 	bl	8000618 <__aeabi_dmul>
 8004568:	4603      	mov	r3, r0
 800456a:	460c      	mov	r4, r1
 800456c:	4618      	mov	r0, r3
 800456e:	4621      	mov	r1, r4
 8004570:	f7fc fb4a 	bl	8000c08 <__aeabi_d2f>
 8004574:	4603      	mov	r3, r0
 8004576:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8004578:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800457c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	ee17 0a90 	vmov	r0, s15
 8004590:	f7fb ffea 	bl	8000568 <__aeabi_f2d>
 8004594:	4604      	mov	r4, r0
 8004596:	460d      	mov	r5, r1
 8004598:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a4:	ee17 0a90 	vmov	r0, s15
 80045a8:	f7fb ffde 	bl	8000568 <__aeabi_f2d>
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	4b84      	ldr	r3, [pc, #528]	; (80047c4 <MPU_SelfTest+0x614>)
 80045b2:	f7fb fe79 	bl	80002a8 <__aeabi_dsub>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	ec43 2b17 	vmov	d7, r2, r3
 80045be:	eeb0 1a47 	vmov.f32	s2, s14
 80045c2:	eef0 1a67 	vmov.f32	s3, s15
 80045c6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80047b8 <MPU_SelfTest+0x608>
 80045ca:	f015 fc19 	bl	8019e00 <pow>
 80045ce:	ec53 2b10 	vmov	r2, r3, d0
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	f7fc f81f 	bl	8000618 <__aeabi_dmul>
 80045da:	4603      	mov	r3, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	4618      	mov	r0, r3
 80045e0:	4621      	mov	r1, r4
 80045e2:	f7fc fb11 	bl	8000c08 <__aeabi_d2f>
 80045e6:	4603      	mov	r3, r0
 80045e8:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 80045ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80045ee:	f640 223c 	movw	r2, #2620	; 0xa3c
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fe:	ee17 0a90 	vmov	r0, s15
 8004602:	f7fb ffb1 	bl	8000568 <__aeabi_f2d>
 8004606:	4604      	mov	r4, r0
 8004608:	460d      	mov	r5, r1
 800460a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	ee17 0a90 	vmov	r0, s15
 800461a:	f7fb ffa5 	bl	8000568 <__aeabi_f2d>
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <MPU_SelfTest+0x614>)
 8004624:	f7fb fe40 	bl	80002a8 <__aeabi_dsub>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	ec43 2b17 	vmov	d7, r2, r3
 8004630:	eeb0 1a47 	vmov.f32	s2, s14
 8004634:	eef0 1a67 	vmov.f32	s3, s15
 8004638:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80047b8 <MPU_SelfTest+0x608>
 800463c:	f015 fbe0 	bl	8019e00 <pow>
 8004640:	ec53 2b10 	vmov	r2, r3, d0
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb ffe6 	bl	8000618 <__aeabi_dmul>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	4618      	mov	r0, r3
 8004652:	4621      	mov	r1, r4
 8004654:	f7fc fad8 	bl	8000c08 <__aeabi_d2f>
 8004658:	4603      	mov	r3, r0
 800465a:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800465c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004660:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004670:	ee17 0a90 	vmov	r0, s15
 8004674:	f7fb ff78 	bl	8000568 <__aeabi_f2d>
 8004678:	4604      	mov	r4, r0
 800467a:	460d      	mov	r5, r1
 800467c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	ee17 0a90 	vmov	r0, s15
 800468c:	f7fb ff6c 	bl	8000568 <__aeabi_f2d>
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <MPU_SelfTest+0x614>)
 8004696:	f7fb fe07 	bl	80002a8 <__aeabi_dsub>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	ec43 2b17 	vmov	d7, r2, r3
 80046a2:	eeb0 1a47 	vmov.f32	s2, s14
 80046a6:	eef0 1a67 	vmov.f32	s3, s15
 80046aa:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80047b8 <MPU_SelfTest+0x608>
 80046ae:	f015 fba7 	bl	8019e00 <pow>
 80046b2:	ec53 2b10 	vmov	r2, r3, d0
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7fb ffad 	bl	8000618 <__aeabi_dmul>
 80046be:	4603      	mov	r3, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	4618      	mov	r0, r3
 80046c4:	4621      	mov	r1, r4
 80046c6:	f7fc fa9f 	bl	8000c08 <__aeabi_d2f>
 80046ca:	4603      	mov	r3, r0
 80046cc:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 80046ce:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80046d2:	f640 223c 	movw	r2, #2620	; 0xa3c
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e2:	ee17 0a90 	vmov	r0, s15
 80046e6:	f7fb ff3f 	bl	8000568 <__aeabi_f2d>
 80046ea:	4604      	mov	r4, r0
 80046ec:	460d      	mov	r5, r1
 80046ee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	ee17 0a90 	vmov	r0, s15
 80046fe:	f7fb ff33 	bl	8000568 <__aeabi_f2d>
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <MPU_SelfTest+0x614>)
 8004708:	f7fb fdce 	bl	80002a8 <__aeabi_dsub>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	ec43 2b17 	vmov	d7, r2, r3
 8004714:	eeb0 1a47 	vmov.f32	s2, s14
 8004718:	eef0 1a67 	vmov.f32	s3, s15
 800471c:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80047b8 <MPU_SelfTest+0x608>
 8004720:	f015 fb6e 	bl	8019e00 <pow>
 8004724:	ec53 2b10 	vmov	r2, r3, d0
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb ff74 	bl	8000618 <__aeabi_dmul>
 8004730:	4603      	mov	r3, r0
 8004732:	460c      	mov	r4, r1
 8004734:	4618      	mov	r0, r3
 8004736:	4621      	mov	r1, r4
 8004738:	f7fc fa66 	bl	8000c08 <__aeabi_d2f>
 800473c:	4603      	mov	r3, r0
 800473e:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8004740:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004744:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004754:	ee17 0a90 	vmov	r0, s15
 8004758:	f7fb ff06 	bl	8000568 <__aeabi_f2d>
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476c:	ee17 0a90 	vmov	r0, s15
 8004770:	f7fb fefa 	bl	8000568 <__aeabi_f2d>
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <MPU_SelfTest+0x614>)
 800477a:	f7fb fd95 	bl	80002a8 <__aeabi_dsub>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	ec43 2b17 	vmov	d7, r2, r3
 8004786:	eeb0 1a47 	vmov.f32	s2, s14
 800478a:	eef0 1a67 	vmov.f32	s3, s15
 800478e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80047b8 <MPU_SelfTest+0x608>
 8004792:	f015 fb35 	bl	8019e00 <pow>
 8004796:	ec53 2b10 	vmov	r2, r3, d0
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb ff3b 	bl	8000618 <__aeabi_dmul>
 80047a2:	4603      	mov	r3, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	4618      	mov	r0, r3
 80047a8:	4621      	mov	r1, r4
 80047aa:	f7fc fa2d 	bl	8000c08 <__aeabi_d2f>
 80047ae:	4603      	mov	r3, r0
 80047b0:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	667b      	str	r3, [r7, #100]	; 0x64
 80047b6:	e096      	b.n	80048e6 <MPU_SelfTest+0x736>
 80047b8:	c28f5c29 	.word	0xc28f5c29
 80047bc:	3ff028f5 	.word	0x3ff028f5
 80047c0:	51eb851f 	.word	0x51eb851f
 80047c4:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 80047c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80047d0:	4413      	add	r3, r2
 80047d2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80047d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80047de:	440b      	add	r3, r1
 80047e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ee:	ee17 0a90 	vmov	r0, s15
 80047f2:	f7fb feb9 	bl	8000568 <__aeabi_f2d>
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <MPU_SelfTest+0x748>)
 80047fc:	f7fb ff0c 	bl	8000618 <__aeabi_dmul>
 8004800:	4603      	mov	r3, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4625      	mov	r5, r4
 8004806:	461c      	mov	r4, r3
 8004808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004810:	4413      	add	r3, r2
 8004812:	3b6c      	subs	r3, #108	; 0x6c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fb fea6 	bl	8000568 <__aeabi_f2d>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f7fc f822 	bl	800086c <__aeabi_ddiv>
 8004828:	4603      	mov	r3, r0
 800482a:	460c      	mov	r4, r1
 800482c:	4618      	mov	r0, r3
 800482e:	4621      	mov	r1, r4
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <MPU_SelfTest+0x748>)
 8004836:	f7fb fd37 	bl	80002a8 <__aeabi_dsub>
 800483a:	4603      	mov	r3, r0
 800483c:	460c      	mov	r4, r1
 800483e:	4618      	mov	r0, r3
 8004840:	4621      	mov	r1, r4
 8004842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	18d4      	adds	r4, r2, r3
 800484a:	f7fc f9dd 	bl	8000c08 <__aeabi_d2f>
 800484e:	4603      	mov	r3, r0
 8004850:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800485a:	4413      	add	r3, r2
 800485c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004868:	440b      	add	r3, r1
 800486a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004878:	ee17 0a90 	vmov	r0, s15
 800487c:	f7fb fe74 	bl	8000568 <__aeabi_f2d>
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <MPU_SelfTest+0x748>)
 8004886:	f7fb fec7 	bl	8000618 <__aeabi_dmul>
 800488a:	4603      	mov	r3, r0
 800488c:	460c      	mov	r4, r1
 800488e:	4625      	mov	r5, r4
 8004890:	461c      	mov	r4, r3
 8004892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004894:	3303      	adds	r3, #3
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800489c:	4413      	add	r3, r2
 800489e:	3b6c      	subs	r3, #108	; 0x6c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb fe60 	bl	8000568 <__aeabi_f2d>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb ffdc 	bl	800086c <__aeabi_ddiv>
 80048b4:	4603      	mov	r3, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	4618      	mov	r0, r3
 80048ba:	4621      	mov	r1, r4
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <MPU_SelfTest+0x748>)
 80048c2:	f7fb fcf1 	bl	80002a8 <__aeabi_dsub>
 80048c6:	4603      	mov	r3, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	4618      	mov	r0, r3
 80048cc:	4621      	mov	r1, r4
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	3303      	adds	r3, #3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	18d4      	adds	r4, r2, r3
 80048d8:	f7fc f996 	bl	8000c08 <__aeabi_d2f>
 80048dc:	4603      	mov	r3, r0
 80048de:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 80048e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e2:	3301      	adds	r3, #1
 80048e4:	667b      	str	r3, [r7, #100]	; 0x64
 80048e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f77f af6d 	ble.w	80047c8 <MPU_SelfTest+0x618>
	}
}
 80048ee:	bf00      	nop
 80048f0:	3778      	adds	r7, #120	; 0x78
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40590000 	.word	0x40590000

080048fc <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08e      	sub	sp, #56	; 0x38
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004908:	2300      	movs	r3, #0
 800490a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800490c:	2300      	movs	r3, #0
 800490e:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	2300      	movs	r3, #0
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 800491c:	4a67      	ldr	r2, [pc, #412]	; (8004abc <MPU_calibrateMag+0x1c0>)
 800491e:	f107 031c 	add.w	r3, r7, #28
 8004922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004926:	6018      	str	r0, [r3, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	8019      	strh	r1, [r3, #0]
 800492c:	4a64      	ldr	r2, [pc, #400]	; (8004ac0 <MPU_calibrateMag+0x1c4>)
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004936:	6018      	str	r0, [r3, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	8019      	strh	r1, [r3, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	81bb      	strh	r3, [r7, #12]
 8004940:	2300      	movs	r3, #0
 8004942:	81fb      	strh	r3, [r7, #14]
 8004944:	2300      	movs	r3, #0
 8004946:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8004948:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800494c:	f001 fb72 	bl	8006034 <HAL_Delay>

	sample_count = 64;
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8004954:	2300      	movs	r3, #0
 8004956:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004958:	e051      	b.n	80049fe <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe ffd2 	bl	8003908 <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 8004964:	2300      	movs	r3, #0
 8004966:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004968:	e040      	b.n	80049ec <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800496a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004972:	4413      	add	r3, r2
 8004974:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004978:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004980:	440b      	add	r3, r1
 8004982:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004986:	429a      	cmp	r2, r3
 8004988:	dd0e      	ble.n	80049a8 <MPU_calibrateMag+0xac>
 800498a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800498c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004994:	440b      	add	r3, r1
 8004996:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 800499a:	0053      	lsls	r3, r2, #1
 800499c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049a0:	4413      	add	r3, r2
 80049a2:	460a      	mov	r2, r1
 80049a4:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80049a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049b0:	4413      	add	r3, r2
 80049b2:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 80049b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80049be:	440b      	add	r3, r1
 80049c0:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	da0e      	bge.n	80049e6 <MPU_calibrateMag+0xea>
 80049c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80049d2:	440b      	add	r3, r1
 80049d4:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 80049d8:	0053      	lsls	r3, r2, #1
 80049da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049de:	4413      	add	r3, r2
 80049e0:	460a      	mov	r2, r1
 80049e2:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 80049e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049e8:	3301      	adds	r3, #1
 80049ea:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d9bb      	bls.n	800496a <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80049f2:	2087      	movs	r0, #135	; 0x87
 80049f4:	f001 fb1e 	bl	8006034 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 80049f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049fa:	3301      	adds	r3, #1
 80049fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3a9      	bcc.n	800495a <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8004a06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	0fda      	lsrs	r2, r3, #31
 8004a14:	4413      	add	r3, r2
 8004a16:	105b      	asrs	r3, r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8004a1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a24:	4413      	add	r3, r2
 8004a26:	0fda      	lsrs	r2, r3, #31
 8004a28:	4413      	add	r3, r2
 8004a2a:	105b      	asrs	r3, r3, #1
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8004a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a38:	4413      	add	r3, r2
 8004a3a:	0fda      	lsrs	r2, r3, #31
 8004a3c:	4413      	add	r3, r2
 8004a3e:	105b      	asrs	r3, r3, #1
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <MPU_calibrateMag+0x1c8>)
 8004a4e:	edd3 7a00 	vldr	s15, [r3]
 8004a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <MPU_calibrateMag+0x1cc>)
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <MPU_calibrateMag+0x1c8>)
 8004a72:	edd3 7a00 	vldr	s15, [r3]
 8004a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <MPU_calibrateMag+0x1cc>)
 8004a7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <MPU_calibrateMag+0x1c8>)
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <MPU_calibrateMag+0x1cc>)
 8004aa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc3 7a00 	vstr	s15, [r3]
}
 8004ab2:	bf00      	nop
 8004ab4:	3738      	adds	r7, #56	; 0x38
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	0801bafc 	.word	0x0801bafc
 8004ac0:	0801bb04 	.word	0x0801bb04
 8004ac4:	20002dd0 	.word	0x20002dd0
 8004ac8:	20002df8 	.word	0x20002df8

08004acc <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b0b2      	sub	sp, #200	; 0xc8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004ad6:	edc7 0a08 	vstr	s1, [r7, #32]
 8004ada:	ed87 1a07 	vstr	s2, [r7, #28]
 8004ade:	edc7 1a06 	vstr	s3, [r7, #24]
 8004ae2:	ed87 2a05 	vstr	s4, [r7, #20]
 8004ae6:	edc7 2a04 	vstr	s5, [r7, #16]
 8004aea:	ed87 3a03 	vstr	s6, [r7, #12]
 8004aee:	edc7 3a02 	vstr	s7, [r7, #8]
 8004af2:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8004af6:	4b7a      	ldr	r3, [pc, #488]	; (8004ce0 <MadgwickQuaternionUpdate+0x214>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004afe:	4b78      	ldr	r3, [pc, #480]	; (8004ce0 <MadgwickQuaternionUpdate+0x214>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b06:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <MadgwickQuaternionUpdate+0x214>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b0e:	4b74      	ldr	r3, [pc, #464]	; (8004ce0 <MadgwickQuaternionUpdate+0x214>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8004b16:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004b1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8004b22:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004b26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b2a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 8004b2e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004b32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b36:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 8004b3a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004b3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b42:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8004b46:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004b4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b4e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8004b5a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004b5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004b62:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8004b6e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004b72:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8004b7e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004b82:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8004b8e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004b92:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8004b9e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004ba2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8004bae:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004bb2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8004bbe:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004bc2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8004bce:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004bd2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8004bde:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004be2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8004bee:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004bf2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 8004bfe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004c02:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8004c0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c1a:	edd7 6a08 	vldr	s13, [r7, #32]
 8004c1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3e:	f015 fa4f 	bl	801a0e0 <sqrtf>
 8004c42:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004c46:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c52:	f000 85cc 	beq.w	80057ee <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c62:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8004c66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c6a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8004c76:	ed97 7a08 	vldr	s14, [r7, #32]
 8004c7a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8004c86:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8004c96:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca2:	edd7 6a02 	vldr	s13, [r7, #8]
 8004ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb2:	edd7 6a01 	vldr	s13, [r7, #4]
 8004cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc6:	f015 fa0b 	bl	801a0e0 <sqrtf>
 8004cca:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004cce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	f000 858a 	beq.w	80057f2 <MadgwickQuaternionUpdate+0xd26>
 8004cde:	e001      	b.n	8004ce4 <MadgwickQuaternionUpdate+0x218>
 8004ce0:	20002de4 	.word	0x20002de4
	norm = 1.0f/norm;
 8004ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8004cf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cf8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d00:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8004d04:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d10:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8004d14:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d20:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8004d24:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d34:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8004d38:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d40:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d48:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 8004d4c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004d50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8004d60:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004d64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d68:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d70:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8004d74:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d78:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d80:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8004d84:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d90:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8004d94:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004da0:	edd7 6a03 	vldr	s13, [r7, #12]
 8004da4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004db0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8004db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004db8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004dbc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dc8:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8004dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004dd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004de0:	edd7 6a03 	vldr	s13, [r7, #12]
 8004de4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004df0:	edd7 6a03 	vldr	s13, [r7, #12]
 8004df4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e00:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8004e04:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004e08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e10:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e20:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8004e24:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e30:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004e34:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e40:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e44:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e50:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e54:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e60:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8004e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e6c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e78:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e7c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e88:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 8004e8c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004e90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e98:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004e9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eac:	f015 f918 	bl	801a0e0 <sqrtf>
 8004eb0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8004eb4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004eb8:	eeb1 7a67 	vneg.f32	s14, s15
 8004ebc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ec4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8004ec8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ed4:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ed8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ee4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004ee8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ef4:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ef8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f04:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8004f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f10:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f1c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004f20:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f2c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004f30:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8004f40:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004f44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f48:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 8004f4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004f50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004f58:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004f5c:	eeb1 7a67 	vneg.f32	s14, s15
 8004f60:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004f64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f68:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004f6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f7c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f84:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004f8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f94:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fa0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8004fa4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004fa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004fb0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004fb4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004fb8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004fbc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004fc0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004fc4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004fc8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004fcc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004fd0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004fd4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004fd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004fdc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fe4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ff0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004ff4:	eef1 6a67 	vneg.f32	s13, s15
 8004ff8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005000:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005004:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005008:	ee66 7a27 	vmul.f32	s15, s12, s15
 800500c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005010:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005014:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005018:	ee36 6a67 	vsub.f32	s12, s12, s15
 800501c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005020:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005024:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005028:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800502c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005030:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005034:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005038:	ee36 6a27 	vadd.f32	s12, s12, s15
 800503c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005040:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800504c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005050:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005058:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800505c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005060:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005064:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005068:	ee26 6a27 	vmul.f32	s12, s12, s15
 800506c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005070:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005074:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005078:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800507c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005080:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005084:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005088:	ee36 6a27 	vadd.f32	s12, s12, s15
 800508c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005090:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80050a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80050a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80050a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80050ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050b8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80050bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050c0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80050c8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80050d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80050d8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80050dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050e4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80050e8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80050ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80050f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80050fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005100:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005104:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005108:	ee36 6a67 	vsub.f32	s12, s12, s15
 800510c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005110:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800511c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005120:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005128:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800512c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005130:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005134:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005138:	ee36 6a67 	vsub.f32	s12, s12, s15
 800513c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005140:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005144:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005148:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800514c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005150:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005154:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005158:	ee36 6a27 	vadd.f32	s12, s12, s15
 800515c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005160:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800516c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005170:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005178:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800517c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005180:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005184:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005188:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800518c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005190:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005194:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005198:	ee26 6a27 	vmul.f32	s12, s12, s15
 800519c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80051a0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80051a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80051a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80051ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80051b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80051b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80051b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80051bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051c4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80051c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80051cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051d0:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 80051d4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80051d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80051dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051e0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80051e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80051e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80051ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80051f4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80051f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80051fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005200:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005204:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005208:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800520c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005210:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005214:	edd7 7a01 	vldr	s15, [r7, #4]
 8005218:	ee76 7a67 	vsub.f32	s15, s12, s15
 800521c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005224:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005228:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800522c:	eeb1 7a67 	vneg.f32	s14, s15
 8005230:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005234:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005238:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800523c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005240:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005244:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800524c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005250:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005254:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005258:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800525c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005260:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005264:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800526c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005270:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005274:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005278:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800527c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005280:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005284:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005288:	ee36 6a67 	vsub.f32	s12, s12, s15
 800528c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005290:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005294:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005298:	edd7 7a07 	vldr	s15, [r7, #28]
 800529c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80052a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80052ac:	eef1 6a67 	vneg.f32	s13, s15
 80052b0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80052b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052b8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80052bc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80052c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80052c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80052c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80052cc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80052d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80052d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80052d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80052dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80052e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80052e4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80052e8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80052ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80052f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80052f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80052f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80052fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005300:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800530c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005310:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005318:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800531c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005320:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005324:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005328:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800532c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005330:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005334:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005338:	ee26 6a27 	vmul.f32	s12, s12, s15
 800533c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005340:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005344:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005348:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800534c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005350:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005354:	edd7 7a02 	vldr	s15, [r7, #8]
 8005358:	ee76 7a67 	vsub.f32	s15, s12, s15
 800535c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005364:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005368:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800536c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005370:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8005374:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800537c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005380:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8005384:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005388:	ee36 6a27 	vadd.f32	s12, s12, s15
 800538c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005390:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005394:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005398:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800539c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80053a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80053b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80053b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80053bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80053c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80053cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053e0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80053e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053e8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80053f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80053fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005400:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800540c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005410:	eef1 6a67 	vneg.f32	s13, s15
 8005414:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005418:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800541c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005420:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005424:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005428:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800542c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005430:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005434:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005438:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800543c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005440:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005444:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005448:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800544c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005450:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005454:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005458:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800545c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005460:	edd7 7a03 	vldr	s15, [r7, #12]
 8005464:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005470:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005474:	eef1 6a67 	vneg.f32	s13, s15
 8005478:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800547c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005480:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005484:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005488:	ee66 7a27 	vmul.f32	s15, s12, s15
 800548c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005490:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005494:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005498:	ee36 6a67 	vsub.f32	s12, s12, s15
 800549c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80054a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80054a4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80054a8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80054ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80054b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80054b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80054b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80054c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80054c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054cc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80054d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80054d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054d8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80054dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80054e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80054ec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80054f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80054f8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80054fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005500:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005504:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005508:	ee36 6a27 	vadd.f32	s12, s12, s15
 800550c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005510:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8005520:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005524:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800552c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005530:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800553c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005540:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800554c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005550:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555c:	eeb0 0a67 	vmov.f32	s0, s15
 8005560:	f014 fdbe 	bl	801a0e0 <sqrtf>
 8005564:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005574:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8005578:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800557c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005584:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8005588:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800558c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8005598:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800559c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 80055a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80055ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80055b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 80055b8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80055bc:	eeb1 7a67 	vneg.f32	s14, s15
 80055c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80055c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80055cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80055d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055d8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80055dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055f0:	4b82      	ldr	r3, [pc, #520]	; (80057fc <MadgwickQuaternionUpdate+0xd30>)
 80055f2:	edd3 6a00 	vldr	s13, [r3]
 80055f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005602:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8005606:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800560a:	edd7 7a06 	vldr	s15, [r7, #24]
 800560e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005612:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005616:	edd7 7a04 	vldr	s15, [r7, #16]
 800561a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005622:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005626:	edd7 7a05 	vldr	s15, [r7, #20]
 800562a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005632:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005636:	ee27 7a87 	vmul.f32	s14, s15, s14
 800563a:	4b70      	ldr	r3, [pc, #448]	; (80057fc <MadgwickQuaternionUpdate+0xd30>)
 800563c:	edd3 6a00 	vldr	s13, [r3]
 8005640:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800564c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8005650:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005654:	edd7 7a05 	vldr	s15, [r7, #20]
 8005658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800565c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005660:	edd7 7a04 	vldr	s15, [r7, #16]
 8005664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800566c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005670:	edd7 7a06 	vldr	s15, [r7, #24]
 8005674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005684:	4b5d      	ldr	r3, [pc, #372]	; (80057fc <MadgwickQuaternionUpdate+0xd30>)
 8005686:	edd3 6a00 	vldr	s13, [r3]
 800568a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005696:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800569a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800569e:	edd7 7a04 	vldr	s15, [r7, #16]
 80056a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056a6:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80056aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80056ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056b6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80056ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80056be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80056ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056ce:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <MadgwickQuaternionUpdate+0xd30>)
 80056d0:	edd3 6a00 	vldr	s13, [r3]
 80056d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80056d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 80056e4:	4b46      	ldr	r3, [pc, #280]	; (8005800 <MadgwickQuaternionUpdate+0xd34>)
 80056e6:	ed93 7a00 	vldr	s14, [r3]
 80056ea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80056f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056fa:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 80056fe:	4b40      	ldr	r3, [pc, #256]	; (8005800 <MadgwickQuaternionUpdate+0xd34>)
 8005700:	ed93 7a00 	vldr	s14, [r3]
 8005704:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005714:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 8005718:	4b39      	ldr	r3, [pc, #228]	; (8005800 <MadgwickQuaternionUpdate+0xd34>)
 800571a:	ed93 7a00 	vldr	s14, [r3]
 800571e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800572a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800572e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 8005732:	4b33      	ldr	r3, [pc, #204]	; (8005800 <MadgwickQuaternionUpdate+0xd34>)
 8005734:	ed93 7a00 	vldr	s14, [r3]
 8005738:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800573c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005740:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005748:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800574c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005750:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005758:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800575c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005768:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800576c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005778:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800577c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005788:	eeb0 0a67 	vmov.f32	s0, s15
 800578c:	f014 fca8 	bl	801a0e0 <sqrtf>
 8005790:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005798:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800579c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 80057a4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80057a8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <MadgwickQuaternionUpdate+0xd38>)
 80057b2:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 80057b6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80057ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <MadgwickQuaternionUpdate+0xd38>)
 80057c4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 80057c8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80057cc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <MadgwickQuaternionUpdate+0xd38>)
 80057d6:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 80057da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80057de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <MadgwickQuaternionUpdate+0xd38>)
 80057e8:	edc3 7a03 	vstr	s15, [r3, #12]
 80057ec:	e002      	b.n	80057f4 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80057f2:	bf00      	nop

}
 80057f4:	37c8      	adds	r7, #200	; 0xc8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20002d98 	.word	0x20002d98
 8005800:	20002dcc 	.word	0x20002dcc
 8005804:	20002de4 	.word	0x20002de4

08005808 <millis>:
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
 800580c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	4a04      	ldr	r2, [pc, #16]	; (8005824 <millis+0x1c>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	10624dd3 	.word	0x10624dd3

08005828 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08c      	sub	sp, #48	; 0x30
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8005830:	f107 031c 	add.w	r3, r7, #28
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8005850:	f00f f9b2 	bl	8014bb8 <Get_RTC_Instance>
 8005854:	f107 031c 	add.w	r3, r7, #28
 8005858:	2200      	movs	r2, #0
 800585a:	4619      	mov	r1, r3
 800585c:	f004 f923 	bl	8009aa6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8005860:	f00f f9aa 	bl	8014bb8 <Get_RTC_Instance>
 8005864:	f107 0318 	add.w	r3, r7, #24
 8005868:	2200      	movs	r2, #0
 800586a:	4619      	mov	r1, r3
 800586c:	f004 f979 	bl	8009b62 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8005870:	7efb      	ldrb	r3, [r7, #27]
 8005872:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8005874:	7e7b      	ldrb	r3, [r7, #25]
 8005876:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8005878:	7ebb      	ldrb	r3, [r7, #26]
 800587a:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 800587c:	7e3b      	ldrb	r3, [r7, #24]
 800587e:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8005880:	7f3b      	ldrb	r3, [r7, #28]
 8005882:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8005884:	7f7b      	ldrb	r3, [r7, #29]
 8005886:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8005888:	7fbb      	ldrb	r3, [r7, #30]
 800588a:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 800588c:	f7ff ffbc 	bl	8005808 <millis>
 8005890:	4602      	mov	r2, r0
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <getTime+0x9c>)
 8005894:	fba3 1302 	umull	r1, r3, r3, r2
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	cb03      	ldmia	r3!, {r0, r1}
 80058b2:	6010      	str	r0, [r2, #0]
 80058b4:	6051      	str	r1, [r2, #4]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	8113      	strh	r3, [r2, #8]
}
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	10624dd3 	.word	0x10624dd3

080058c8 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ffa9 	bl	8005828 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 80058d6:	7a3b      	ldrb	r3, [r7, #8]
 80058d8:	4619      	mov	r1, r3
 80058da:	7a7b      	ldrb	r3, [r7, #9]
 80058dc:	4618      	mov	r0, r3
 80058de:	79bb      	ldrb	r3, [r7, #6]
 80058e0:	797a      	ldrb	r2, [r7, #5]
 80058e2:	9201      	str	r2, [sp, #4]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4603      	mov	r3, r0
 80058e8:	460a      	mov	r2, r1
 80058ea:	4955      	ldr	r1, [pc, #340]	; (8005a40 <log_new+0x178>)
 80058ec:	4855      	ldr	r0, [pc, #340]	; (8005a44 <log_new+0x17c>)
 80058ee:	f011 fba1 	bl	8017034 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 80058f2:	4954      	ldr	r1, [pc, #336]	; (8005a44 <log_new+0x17c>)
 80058f4:	4854      	ldr	r0, [pc, #336]	; (8005a48 <log_new+0x180>)
 80058f6:	f011 fb9d 	bl	8017034 <siprintf>

	SD_init();
 80058fa:	f7fb fc45 	bl	8001188 <SD_init>
	SD_newDirectory((char*)directoryName);
 80058fe:	4851      	ldr	r0, [pc, #324]	; (8005a44 <log_new+0x17c>)
 8005900:	f7fb fcde 	bl	80012c0 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8005904:	484f      	ldr	r0, [pc, #316]	; (8005a44 <log_new+0x17c>)
 8005906:	f7fa fc6d 	bl	80001e4 <strlen>
 800590a:	4603      	mov	r3, r0
 800590c:	461a      	mov	r2, r3
 800590e:	4b4d      	ldr	r3, [pc, #308]	; (8005a44 <log_new+0x17c>)
 8005910:	4413      	add	r3, r2
 8005912:	494e      	ldr	r1, [pc, #312]	; (8005a4c <log_new+0x184>)
 8005914:	461a      	mov	r2, r3
 8005916:	460b      	mov	r3, r1
 8005918:	cb03      	ldmia	r3!, {r0, r1}
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	6051      	str	r1, [r2, #4]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	7213      	strb	r3, [r2, #8]
 8005922:	4b48      	ldr	r3, [pc, #288]	; (8005a44 <log_new+0x17c>)
 8005924:	4618      	mov	r0, r3
 8005926:	f7fb fc6b 	bl	8001200 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800592a:	4947      	ldr	r1, [pc, #284]	; (8005a48 <log_new+0x180>)
 800592c:	4845      	ldr	r0, [pc, #276]	; (8005a44 <log_new+0x17c>)
 800592e:	f011 fb81 	bl	8017034 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8005932:	4844      	ldr	r0, [pc, #272]	; (8005a44 <log_new+0x17c>)
 8005934:	f7fa fc56 	bl	80001e4 <strlen>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <log_new+0x17c>)
 800593e:	4413      	add	r3, r2
 8005940:	4943      	ldr	r1, [pc, #268]	; (8005a50 <log_new+0x188>)
 8005942:	461a      	mov	r2, r3
 8005944:	460b      	mov	r3, r1
 8005946:	cb03      	ldmia	r3!, {r0, r1}
 8005948:	6010      	str	r0, [r2, #0]
 800594a:	6051      	str	r1, [r2, #4]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	7213      	strb	r3, [r2, #8]
 8005950:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <log_new+0x17c>)
 8005952:	4618      	mov	r0, r3
 8005954:	f7fb fc54 	bl	8001200 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005958:	493b      	ldr	r1, [pc, #236]	; (8005a48 <log_new+0x180>)
 800595a:	483a      	ldr	r0, [pc, #232]	; (8005a44 <log_new+0x17c>)
 800595c:	f011 fb6a 	bl	8017034 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8005960:	4838      	ldr	r0, [pc, #224]	; (8005a44 <log_new+0x17c>)
 8005962:	f7fa fc3f 	bl	80001e4 <strlen>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <log_new+0x17c>)
 800596c:	4413      	add	r3, r2
 800596e:	4939      	ldr	r1, [pc, #228]	; (8005a54 <log_new+0x18c>)
 8005970:	461a      	mov	r2, r3
 8005972:	460b      	mov	r3, r1
 8005974:	cb03      	ldmia	r3!, {r0, r1}
 8005976:	6010      	str	r0, [r2, #0]
 8005978:	6051      	str	r1, [r2, #4]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	7213      	strb	r3, [r2, #8]
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <log_new+0x17c>)
 8005980:	4618      	mov	r0, r3
 8005982:	f7fb fc3d 	bl	8001200 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005986:	4930      	ldr	r1, [pc, #192]	; (8005a48 <log_new+0x180>)
 8005988:	482e      	ldr	r0, [pc, #184]	; (8005a44 <log_new+0x17c>)
 800598a:	f011 fb53 	bl	8017034 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 800598e:	482d      	ldr	r0, [pc, #180]	; (8005a44 <log_new+0x17c>)
 8005990:	f7fa fc28 	bl	80001e4 <strlen>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <log_new+0x17c>)
 800599a:	4413      	add	r3, r2
 800599c:	492e      	ldr	r1, [pc, #184]	; (8005a58 <log_new+0x190>)
 800599e:	461a      	mov	r2, r3
 80059a0:	460b      	mov	r3, r1
 80059a2:	cb03      	ldmia	r3!, {r0, r1}
 80059a4:	6010      	str	r0, [r2, #0]
 80059a6:	6051      	str	r1, [r2, #4]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	7213      	strb	r3, [r2, #8]
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <log_new+0x17c>)
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fc26 	bl	8001200 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80059b4:	4924      	ldr	r1, [pc, #144]	; (8005a48 <log_new+0x180>)
 80059b6:	4823      	ldr	r0, [pc, #140]	; (8005a44 <log_new+0x17c>)
 80059b8:	f011 fb3c 	bl	8017034 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 80059bc:	4821      	ldr	r0, [pc, #132]	; (8005a44 <log_new+0x17c>)
 80059be:	f7fa fc11 	bl	80001e4 <strlen>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <log_new+0x17c>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4924      	ldr	r1, [pc, #144]	; (8005a5c <log_new+0x194>)
 80059cc:	461a      	mov	r2, r3
 80059ce:	460b      	mov	r3, r1
 80059d0:	cb03      	ldmia	r3!, {r0, r1}
 80059d2:	6010      	str	r0, [r2, #0]
 80059d4:	6051      	str	r1, [r2, #4]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	7213      	strb	r3, [r2, #8]
 80059da:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <log_new+0x17c>)
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fb fc0f 	bl	8001200 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80059e2:	4919      	ldr	r1, [pc, #100]	; (8005a48 <log_new+0x180>)
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <log_new+0x17c>)
 80059e6:	f011 fb25 	bl	8017034 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 80059ea:	4816      	ldr	r0, [pc, #88]	; (8005a44 <log_new+0x17c>)
 80059ec:	f7fa fbfa 	bl	80001e4 <strlen>
 80059f0:	4603      	mov	r3, r0
 80059f2:	461a      	mov	r2, r3
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <log_new+0x17c>)
 80059f6:	4413      	add	r3, r2
 80059f8:	4919      	ldr	r1, [pc, #100]	; (8005a60 <log_new+0x198>)
 80059fa:	461a      	mov	r2, r3
 80059fc:	460b      	mov	r3, r1
 80059fe:	cb03      	ldmia	r3!, {r0, r1}
 8005a00:	6010      	str	r0, [r2, #0]
 8005a02:	6051      	str	r1, [r2, #4]
 8005a04:	8819      	ldrh	r1, [r3, #0]
 8005a06:	789b      	ldrb	r3, [r3, #2]
 8005a08:	8111      	strh	r1, [r2, #8]
 8005a0a:	7293      	strb	r3, [r2, #10]
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <log_new+0x17c>)
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fb fbf6 	bl	8001200 <SD_newFile>

	logBufferIndex = 0;
 8005a14:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <log_new+0x19c>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <log_new+0x1a0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <log_new+0x1a4>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <log_new+0x1a8>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <log_new+0x1ac>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <log_new+0x1b0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	801a      	strh	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	0801bb0c 	.word	0x0801bb0c
 8005a44:	200046c0 	.word	0x200046c0
 8005a48:	2000321c 	.word	0x2000321c
 8005a4c:	0801bb20 	.word	0x0801bb20
 8005a50:	0801bb2c 	.word	0x0801bb2c
 8005a54:	0801bb38 	.word	0x0801bb38
 8005a58:	0801bb44 	.word	0x0801bb44
 8005a5c:	0801bb50 	.word	0x0801bb50
 8005a60:	0801bb5c 	.word	0x0801bb5c
 8005a64:	200046e2 	.word	0x200046e2
 8005a68:	200046e0 	.word	0x200046e0
 8005a6c:	20003ebc 	.word	0x20003ebc
 8005a70:	200046e4 	.word	0x200046e4
 8005a74:	20003ab8 	.word	0x20003ab8
 8005a78:	20003a90 	.word	0x20003a90

08005a7c <log_save>:

void log_save()
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
	//SD_init();

	if (logBufferIndex > 0)
 8005a80:	4b7c      	ldr	r3, [pc, #496]	; (8005c74 <log_save+0x1f8>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8005a88:	487b      	ldr	r0, [pc, #492]	; (8005c78 <log_save+0x1fc>)
 8005a8a:	f7fa fbab 	bl	80001e4 <strlen>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <log_save+0x1fc>)
 8005a94:	4413      	add	r3, r2
 8005a96:	4979      	ldr	r1, [pc, #484]	; (8005c7c <log_save+0x200>)
 8005a98:	461a      	mov	r2, r3
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	cb03      	ldmia	r3!, {r0, r1}
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	6051      	str	r1, [r2, #4]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	7213      	strb	r3, [r2, #8]
 8005aa6:	4b74      	ldr	r3, [pc, #464]	; (8005c78 <log_save+0x1fc>)
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4875      	ldr	r0, [pc, #468]	; (8005c80 <log_save+0x204>)
 8005aac:	f011 fac2 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005ab0:	4974      	ldr	r1, [pc, #464]	; (8005c84 <log_save+0x208>)
 8005ab2:	4871      	ldr	r0, [pc, #452]	; (8005c78 <log_save+0x1fc>)
 8005ab4:	f011 fabe 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8005ab8:	4973      	ldr	r1, [pc, #460]	; (8005c88 <log_save+0x20c>)
 8005aba:	4871      	ldr	r0, [pc, #452]	; (8005c80 <log_save+0x204>)
 8005abc:	f7fb fbc8 	bl	8001250 <SD_writeToFile>
	}
	if (bmpBufferIndex > 0)
 8005ac0:	4b72      	ldr	r3, [pc, #456]	; (8005c8c <log_save+0x210>)
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8005ac8:	486b      	ldr	r0, [pc, #428]	; (8005c78 <log_save+0x1fc>)
 8005aca:	f7fa fb8b 	bl	80001e4 <strlen>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b69      	ldr	r3, [pc, #420]	; (8005c78 <log_save+0x1fc>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	496e      	ldr	r1, [pc, #440]	; (8005c90 <log_save+0x214>)
 8005ad8:	461a      	mov	r2, r3
 8005ada:	460b      	mov	r3, r1
 8005adc:	cb03      	ldmia	r3!, {r0, r1}
 8005ade:	6010      	str	r0, [r2, #0]
 8005ae0:	6051      	str	r1, [r2, #4]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	7213      	strb	r3, [r2, #8]
 8005ae6:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <log_save+0x1fc>)
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4865      	ldr	r0, [pc, #404]	; (8005c80 <log_save+0x204>)
 8005aec:	f011 faa2 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005af0:	4964      	ldr	r1, [pc, #400]	; (8005c84 <log_save+0x208>)
 8005af2:	4861      	ldr	r0, [pc, #388]	; (8005c78 <log_save+0x1fc>)
 8005af4:	f011 fa9e 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 8005af8:	4966      	ldr	r1, [pc, #408]	; (8005c94 <log_save+0x218>)
 8005afa:	4861      	ldr	r0, [pc, #388]	; (8005c80 <log_save+0x204>)
 8005afc:	f7fb fba8 	bl	8001250 <SD_writeToFile>
	}
	if (gpsBufferIndex > 0)
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <log_save+0x21c>)
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 8005b08:	485b      	ldr	r0, [pc, #364]	; (8005c78 <log_save+0x1fc>)
 8005b0a:	f7fa fb6b 	bl	80001e4 <strlen>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <log_save+0x1fc>)
 8005b14:	4413      	add	r3, r2
 8005b16:	4961      	ldr	r1, [pc, #388]	; (8005c9c <log_save+0x220>)
 8005b18:	461a      	mov	r2, r3
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	cb03      	ldmia	r3!, {r0, r1}
 8005b1e:	6010      	str	r0, [r2, #0]
 8005b20:	6051      	str	r1, [r2, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	7213      	strb	r3, [r2, #8]
 8005b26:	4b54      	ldr	r3, [pc, #336]	; (8005c78 <log_save+0x1fc>)
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4855      	ldr	r0, [pc, #340]	; (8005c80 <log_save+0x204>)
 8005b2c:	f011 fa82 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005b30:	4954      	ldr	r1, [pc, #336]	; (8005c84 <log_save+0x208>)
 8005b32:	4851      	ldr	r0, [pc, #324]	; (8005c78 <log_save+0x1fc>)
 8005b34:	f011 fa7e 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 8005b38:	4959      	ldr	r1, [pc, #356]	; (8005ca0 <log_save+0x224>)
 8005b3a:	4851      	ldr	r0, [pc, #324]	; (8005c80 <log_save+0x204>)
 8005b3c:	f7fb fb88 	bl	8001250 <SD_writeToFile>
	}
	if (imuBufferIndex > 0)
 8005b40:	4b58      	ldr	r3, [pc, #352]	; (8005ca4 <log_save+0x228>)
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8005b48:	484b      	ldr	r0, [pc, #300]	; (8005c78 <log_save+0x1fc>)
 8005b4a:	f7fa fb4b 	bl	80001e4 <strlen>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	4b49      	ldr	r3, [pc, #292]	; (8005c78 <log_save+0x1fc>)
 8005b54:	4413      	add	r3, r2
 8005b56:	4954      	ldr	r1, [pc, #336]	; (8005ca8 <log_save+0x22c>)
 8005b58:	461a      	mov	r2, r3
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	cb03      	ldmia	r3!, {r0, r1}
 8005b5e:	6010      	str	r0, [r2, #0]
 8005b60:	6051      	str	r1, [r2, #4]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	7213      	strb	r3, [r2, #8]
 8005b66:	4b44      	ldr	r3, [pc, #272]	; (8005c78 <log_save+0x1fc>)
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4845      	ldr	r0, [pc, #276]	; (8005c80 <log_save+0x204>)
 8005b6c:	f011 fa62 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005b70:	4944      	ldr	r1, [pc, #272]	; (8005c84 <log_save+0x208>)
 8005b72:	4841      	ldr	r0, [pc, #260]	; (8005c78 <log_save+0x1fc>)
 8005b74:	f011 fa5e 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8005b78:	494c      	ldr	r1, [pc, #304]	; (8005cac <log_save+0x230>)
 8005b7a:	4841      	ldr	r0, [pc, #260]	; (8005c80 <log_save+0x204>)
 8005b7c:	f7fb fb68 	bl	8001250 <SD_writeToFile>
	}
	if (motBufferIndex > 0)
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <log_save+0x234>)
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01b      	beq.n	8005bc0 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8005b88:	483b      	ldr	r0, [pc, #236]	; (8005c78 <log_save+0x1fc>)
 8005b8a:	f7fa fb2b 	bl	80001e4 <strlen>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <log_save+0x1fc>)
 8005b94:	4413      	add	r3, r2
 8005b96:	4947      	ldr	r1, [pc, #284]	; (8005cb4 <log_save+0x238>)
 8005b98:	461a      	mov	r2, r3
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	cb03      	ldmia	r3!, {r0, r1}
 8005b9e:	6010      	str	r0, [r2, #0]
 8005ba0:	6051      	str	r1, [r2, #4]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	7213      	strb	r3, [r2, #8]
 8005ba6:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <log_save+0x1fc>)
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4835      	ldr	r0, [pc, #212]	; (8005c80 <log_save+0x204>)
 8005bac:	f011 fa42 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005bb0:	4934      	ldr	r1, [pc, #208]	; (8005c84 <log_save+0x208>)
 8005bb2:	4831      	ldr	r0, [pc, #196]	; (8005c78 <log_save+0x1fc>)
 8005bb4:	f011 fa3e 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <log_save+0x23c>)
 8005bba:	4831      	ldr	r0, [pc, #196]	; (8005c80 <log_save+0x204>)
 8005bbc:	f7fb fb48 	bl	8001250 <SD_writeToFile>
	}
	if (radioBufferIndex > 0)
 8005bc0:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <log_save+0x240>)
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01d      	beq.n	8005c04 <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8005bc8:	482b      	ldr	r0, [pc, #172]	; (8005c78 <log_save+0x1fc>)
 8005bca:	f7fa fb0b 	bl	80001e4 <strlen>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <log_save+0x1fc>)
 8005bd4:	4413      	add	r3, r2
 8005bd6:	493a      	ldr	r1, [pc, #232]	; (8005cc0 <log_save+0x244>)
 8005bd8:	461a      	mov	r2, r3
 8005bda:	460b      	mov	r3, r1
 8005bdc:	cb03      	ldmia	r3!, {r0, r1}
 8005bde:	6010      	str	r0, [r2, #0]
 8005be0:	6051      	str	r1, [r2, #4]
 8005be2:	8819      	ldrh	r1, [r3, #0]
 8005be4:	789b      	ldrb	r3, [r3, #2]
 8005be6:	8111      	strh	r1, [r2, #8]
 8005be8:	7293      	strb	r3, [r2, #10]
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <log_save+0x1fc>)
 8005bec:	4619      	mov	r1, r3
 8005bee:	4824      	ldr	r0, [pc, #144]	; (8005c80 <log_save+0x204>)
 8005bf0:	f011 fa20 	bl	8017034 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005bf4:	4923      	ldr	r1, [pc, #140]	; (8005c84 <log_save+0x208>)
 8005bf6:	4820      	ldr	r0, [pc, #128]	; (8005c78 <log_save+0x1fc>)
 8005bf8:	f011 fa1c 	bl	8017034 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 8005bfc:	4931      	ldr	r1, [pc, #196]	; (8005cc4 <log_save+0x248>)
 8005bfe:	4820      	ldr	r0, [pc, #128]	; (8005c80 <log_save+0x204>)
 8005c00:	f7fb fb26 	bl	8001250 <SD_writeToFile>
	}


	logBufferIndex = 0;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <log_save+0x1f8>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <log_save+0x210>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005c10:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <log_save+0x21c>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <log_save+0x228>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005c1c:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <log_save+0x234>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <log_save+0x240>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 8005c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4816      	ldr	r0, [pc, #88]	; (8005c88 <log_save+0x20c>)
 8005c30:	f010 fafb 	bl	801622a <memset>
	memset(bmpBuffer, 0x00, 1024);
 8005c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4816      	ldr	r0, [pc, #88]	; (8005c94 <log_save+0x218>)
 8005c3c:	f010 faf5 	bl	801622a <memset>
	memset(gpsBuffer, 0x00, 1024);
 8005c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c44:	2100      	movs	r1, #0
 8005c46:	4816      	ldr	r0, [pc, #88]	; (8005ca0 <log_save+0x224>)
 8005c48:	f010 faef 	bl	801622a <memset>
	memset(imuBuffer, 0x00, 1024);
 8005c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c50:	2100      	movs	r1, #0
 8005c52:	4816      	ldr	r0, [pc, #88]	; (8005cac <log_save+0x230>)
 8005c54:	f010 fae9 	bl	801622a <memset>
	memset(motBuffer, 0x00, 1024);
 8005c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4816      	ldr	r0, [pc, #88]	; (8005cb8 <log_save+0x23c>)
 8005c60:	f010 fae3 	bl	801622a <memset>
	memset(radioBuffer, 0x00, 1024);
 8005c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4816      	ldr	r0, [pc, #88]	; (8005cc4 <log_save+0x248>)
 8005c6c:	f010 fadd 	bl	801622a <memset>
}
 8005c70:	bf00      	nop
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200046e2 	.word	0x200046e2
 8005c78:	200046c0 	.word	0x200046c0
 8005c7c:	0801bb20 	.word	0x0801bb20
 8005c80:	2000363c 	.word	0x2000363c
 8005c84:	2000321c 	.word	0x2000321c
 8005c88:	200042c0 	.word	0x200042c0
 8005c8c:	200046e0 	.word	0x200046e0
 8005c90:	0801bb2c 	.word	0x0801bb2c
 8005c94:	200046ec 	.word	0x200046ec
 8005c98:	20003ebc 	.word	0x20003ebc
 8005c9c:	0801bb38 	.word	0x0801bb38
 8005ca0:	2000323c 	.word	0x2000323c
 8005ca4:	200046e4 	.word	0x200046e4
 8005ca8:	0801bb44 	.word	0x0801bb44
 8005cac:	20003abc 	.word	0x20003abc
 8005cb0:	20003ab8 	.word	0x20003ab8
 8005cb4:	0801bb50 	.word	0x0801bb50
 8005cb8:	20003690 	.word	0x20003690
 8005cbc:	20003a90 	.word	0x20003a90
 8005cc0:	0801bb5c 	.word	0x0801bb5c
 8005cc4:	20002e1c 	.word	0x20002e1c

08005cc8 <log_bmp>:
		logBufferIndex = strlen(logBuffer);
	}
}

void log_bmp(BMP280* bmp)
{
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 1024)
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <log_bmp+0x80>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d232      	bcs.n	8005d40 <log_bmp+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005cda:	f7ff fd95 	bl	8005808 <millis>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	491a      	ldr	r1, [pc, #104]	; (8005d4c <log_bmp+0x84>)
 8005ce4:	481a      	ldr	r0, [pc, #104]	; (8005d50 <log_bmp+0x88>)
 8005ce6:	f011 f9a5 	bl	8017034 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa fc3a 	bl	8000568 <__aeabi_f2d>
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fa fc33 	bl	8000568 <__aeabi_f2d>
 8005d02:	4603      	mov	r3, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	e9cd 3400 	strd	r3, r4, [sp]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4633      	mov	r3, r6
 8005d0e:	4911      	ldr	r1, [pc, #68]	; (8005d54 <log_bmp+0x8c>)
 8005d10:	4811      	ldr	r0, [pc, #68]	; (8005d58 <log_bmp+0x90>)
 8005d12:	f011 f98f 	bl	8017034 <siprintf>
		strcat(tempBuffer, timestamp);
 8005d16:	490e      	ldr	r1, [pc, #56]	; (8005d50 <log_bmp+0x88>)
 8005d18:	480f      	ldr	r0, [pc, #60]	; (8005d58 <log_bmp+0x90>)
 8005d1a:	f011 f9ab 	bl	8017074 <strcat>
		strcat(bmpBuffer, tempBuffer);
 8005d1e:	490e      	ldr	r1, [pc, #56]	; (8005d58 <log_bmp+0x90>)
 8005d20:	480e      	ldr	r0, [pc, #56]	; (8005d5c <log_bmp+0x94>)
 8005d22:	f011 f9a7 	bl	8017074 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8005d26:	480d      	ldr	r0, [pc, #52]	; (8005d5c <log_bmp+0x94>)
 8005d28:	f7fa fa5c 	bl	80001e4 <strlen>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <log_bmp+0x80>)
 8005d32:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4807      	ldr	r0, [pc, #28]	; (8005d58 <log_bmp+0x90>)
 8005d3c:	f010 fa75 	bl	801622a <memset>
	}
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d48:	200046e0 	.word	0x200046e0
 8005d4c:	0801bb68 	.word	0x0801bb68
 8005d50:	20003a98 	.word	0x20003a98
 8005d54:	0801bb70 	.word	0x0801bb70
 8005d58:	20003ec0 	.word	0x20003ec0
 8005d5c:	200046ec 	.word	0x200046ec

08005d60 <log_gps>:
void log_gps(GPS* gps)
{
 8005d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	6078      	str	r0, [r7, #4]
	if (gpsBufferIndex < 1024)
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <log_gps+0x80>)
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d70:	d232      	bcs.n	8005dd8 <log_gps+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005d72:	f7ff fd49 	bl	8005808 <millis>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	491a      	ldr	r1, [pc, #104]	; (8005de4 <log_gps+0x84>)
 8005d7c:	481a      	ldr	r0, [pc, #104]	; (8005de8 <log_gps+0x88>)
 8005d7e:	f011 f959 	bl	8017034 <siprintf>
		sprintf(tempBuffer, "%.07f %.07f", gps->latitudeDegrees, gps->longitudeDegrees);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fbee 	bl	8000568 <__aeabi_f2d>
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	460e      	mov	r6, r1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fa fbe7 	bl	8000568 <__aeabi_f2d>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	e9cd 3400 	strd	r3, r4, [sp]
 8005da2:	462a      	mov	r2, r5
 8005da4:	4633      	mov	r3, r6
 8005da6:	4911      	ldr	r1, [pc, #68]	; (8005dec <log_gps+0x8c>)
 8005da8:	4811      	ldr	r0, [pc, #68]	; (8005df0 <log_gps+0x90>)
 8005daa:	f011 f943 	bl	8017034 <siprintf>
		strcat(tempBuffer, timestamp);
 8005dae:	490e      	ldr	r1, [pc, #56]	; (8005de8 <log_gps+0x88>)
 8005db0:	480f      	ldr	r0, [pc, #60]	; (8005df0 <log_gps+0x90>)
 8005db2:	f011 f95f 	bl	8017074 <strcat>
		strcat(gpsBuffer, tempBuffer);
 8005db6:	490e      	ldr	r1, [pc, #56]	; (8005df0 <log_gps+0x90>)
 8005db8:	480e      	ldr	r0, [pc, #56]	; (8005df4 <log_gps+0x94>)
 8005dba:	f011 f95b 	bl	8017074 <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 8005dbe:	480d      	ldr	r0, [pc, #52]	; (8005df4 <log_gps+0x94>)
 8005dc0:	f7fa fa10 	bl	80001e4 <strlen>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <log_gps+0x80>)
 8005dca:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4807      	ldr	r0, [pc, #28]	; (8005df0 <log_gps+0x90>)
 8005dd4:	f010 fa29 	bl	801622a <memset>
	}
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de0:	20003ebc 	.word	0x20003ebc
 8005de4:	0801bb68 	.word	0x0801bb68
 8005de8:	20003a98 	.word	0x20003a98
 8005dec:	0801bb7c 	.word	0x0801bb7c
 8005df0:	20003ec0 	.word	0x20003ec0
 8005df4:	2000323c 	.word	0x2000323c

08005df8 <log_imu>:
void log_imu(float* eulers)
{
 8005df8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af04      	add	r7, sp, #16
 8005e00:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 1024)
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <log_imu+0x9c>)
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d23d      	bcs.n	8005e88 <log_imu+0x90>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005e0c:	f7ff fcfc 	bl	8005808 <millis>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	4920      	ldr	r1, [pc, #128]	; (8005e98 <log_imu+0xa0>)
 8005e16:	4821      	ldr	r0, [pc, #132]	; (8005e9c <log_imu+0xa4>)
 8005e18:	f011 f90c 	bl	8017034 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", eulers[0], eulers[1], eulers[2]);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fa fba1 	bl	8000568 <__aeabi_f2d>
 8005e26:	4680      	mov	r8, r0
 8005e28:	4689      	mov	r9, r1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa fb99 	bl	8000568 <__aeabi_f2d>
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa fb91 	bl	8000568 <__aeabi_f2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e4e:	e9cd 4500 	strd	r4, r5, [sp]
 8005e52:	4642      	mov	r2, r8
 8005e54:	464b      	mov	r3, r9
 8005e56:	4912      	ldr	r1, [pc, #72]	; (8005ea0 <log_imu+0xa8>)
 8005e58:	4812      	ldr	r0, [pc, #72]	; (8005ea4 <log_imu+0xac>)
 8005e5a:	f011 f8eb 	bl	8017034 <siprintf>
		strcat(tempBuffer, timestamp);
 8005e5e:	490f      	ldr	r1, [pc, #60]	; (8005e9c <log_imu+0xa4>)
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <log_imu+0xac>)
 8005e62:	f011 f907 	bl	8017074 <strcat>
		strcat(imuBuffer, tempBuffer);
 8005e66:	490f      	ldr	r1, [pc, #60]	; (8005ea4 <log_imu+0xac>)
 8005e68:	480f      	ldr	r0, [pc, #60]	; (8005ea8 <log_imu+0xb0>)
 8005e6a:	f011 f903 	bl	8017074 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8005e6e:	480e      	ldr	r0, [pc, #56]	; (8005ea8 <log_imu+0xb0>)
 8005e70:	f7fa f9b8 	bl	80001e4 <strlen>
 8005e74:	4603      	mov	r3, r0
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <log_imu+0x9c>)
 8005e7a:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e80:	2100      	movs	r1, #0
 8005e82:	4808      	ldr	r0, [pc, #32]	; (8005ea4 <log_imu+0xac>)
 8005e84:	f010 f9d1 	bl	801622a <memset>
	}
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e92:	bf00      	nop
 8005e94:	200046e4 	.word	0x200046e4
 8005e98:	0801bb68 	.word	0x0801bb68
 8005e9c:	20003a98 	.word	0x20003a98
 8005ea0:	0801bb88 	.word	0x0801bb88
 8005ea4:	20003ec0 	.word	0x20003ec0
 8005ea8:	20003abc 	.word	0x20003abc

08005eac <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 1024)
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <log_radio+0x88>)
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d234      	bcs.n	8005f2c <log_radio+0x80>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8005ec2:	f7ff fca1 	bl	8005808 <millis>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	491b      	ldr	r1, [pc, #108]	; (8005f38 <log_radio+0x8c>)
 8005ecc:	481b      	ldr	r0, [pc, #108]	; (8005f3c <log_radio+0x90>)
 8005ece:	f011 f8b1 	bl	8017034 <siprintf>

		if (transmit)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <log_radio+0x3a>
		{
			sprintf(tempBuffer, "TX\t[");
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <log_radio+0x94>)
 8005eda:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <log_radio+0x98>)
 8005edc:	6810      	ldr	r0, [r2, #0]
 8005ede:	6018      	str	r0, [r3, #0]
 8005ee0:	7912      	ldrb	r2, [r2, #4]
 8005ee2:	711a      	strb	r2, [r3, #4]
 8005ee4:	e006      	b.n	8005ef4 <log_radio+0x48>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	461a      	mov	r2, r3
 8005eec:	4916      	ldr	r1, [pc, #88]	; (8005f48 <log_radio+0x9c>)
 8005eee:	4814      	ldr	r0, [pc, #80]	; (8005f40 <log_radio+0x94>)
 8005ef0:	f011 f8a0 	bl	8017034 <siprintf>
		}
		strcat(tempBuffer, radio->lastPacket);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f203 133d 	addw	r3, r3, #317	; 0x13d
 8005efa:	4619      	mov	r1, r3
 8005efc:	4810      	ldr	r0, [pc, #64]	; (8005f40 <log_radio+0x94>)
 8005efe:	f011 f8b9 	bl	8017074 <strcat>

		strcat(tempBuffer, timestamp);
 8005f02:	490e      	ldr	r1, [pc, #56]	; (8005f3c <log_radio+0x90>)
 8005f04:	480e      	ldr	r0, [pc, #56]	; (8005f40 <log_radio+0x94>)
 8005f06:	f011 f8b5 	bl	8017074 <strcat>
		strcat(radioBuffer, tempBuffer);
 8005f0a:	490d      	ldr	r1, [pc, #52]	; (8005f40 <log_radio+0x94>)
 8005f0c:	480f      	ldr	r0, [pc, #60]	; (8005f4c <log_radio+0xa0>)
 8005f0e:	f011 f8b1 	bl	8017074 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 8005f12:	480e      	ldr	r0, [pc, #56]	; (8005f4c <log_radio+0xa0>)
 8005f14:	f7fa f966 	bl	80001e4 <strlen>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <log_radio+0x88>)
 8005f1e:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f24:	2100      	movs	r1, #0
 8005f26:	4806      	ldr	r0, [pc, #24]	; (8005f40 <log_radio+0x94>)
 8005f28:	f010 f97f 	bl	801622a <memset>
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20003a90 	.word	0x20003a90
 8005f38:	0801bba8 	.word	0x0801bba8
 8005f3c:	20003a98 	.word	0x20003a98
 8005f40:	20003ec0 	.word	0x20003ec0
 8005f44:	0801bbb4 	.word	0x0801bbb4
 8005f48:	0801bbbc 	.word	0x0801bbbc
 8005f4c:	20002e1c 	.word	0x20002e1c

08005f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <HAL_Init+0x40>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <HAL_Init+0x40>)
 8005f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_Init+0x40>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <HAL_Init+0x40>)
 8005f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <HAL_Init+0x40>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_Init+0x40>)
 8005f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f78:	2003      	movs	r0, #3
 8005f7a:	f000 f94d 	bl	8006218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f000 f808 	bl	8005f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f84:	f00f f858 	bl	8015038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023c00 	.word	0x40023c00

08005f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <HAL_InitTick+0x54>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_InitTick+0x58>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f965 	bl	8006282 <HAL_SYSTICK_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e00e      	b.n	8005fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b0f      	cmp	r3, #15
 8005fc6:	d80a      	bhi.n	8005fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	f000 f92d 	bl	800622e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fd4:	4a06      	ldr	r2, [pc, #24]	; (8005ff0 <HAL_InitTick+0x5c>)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000134 	.word	0x20000134
 8005fec:	20000008 	.word	0x20000008
 8005ff0:	20000004 	.word	0x20000004

08005ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_IncTick+0x20>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_IncTick+0x24>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4413      	add	r3, r2
 8006004:	4a04      	ldr	r2, [pc, #16]	; (8006018 <HAL_IncTick+0x24>)
 8006006:	6013      	str	r3, [r2, #0]
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000008 	.word	0x20000008
 8006018:	20004b0c 	.word	0x20004b0c

0800601c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  return uwTick;
 8006020:	4b03      	ldr	r3, [pc, #12]	; (8006030 <HAL_GetTick+0x14>)
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20004b0c 	.word	0x20004b0c

08006034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800603c:	f7ff ffee 	bl	800601c <HAL_GetTick>
 8006040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d005      	beq.n	800605a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_Delay+0x40>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800605a:	bf00      	nop
 800605c:	f7ff ffde 	bl	800601c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d8f7      	bhi.n	800605c <HAL_Delay+0x28>
  {
  }
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000008 	.word	0x20000008

08006078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060aa:	4a04      	ldr	r2, [pc, #16]	; (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	60d3      	str	r3, [r2, #12]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <__NVIC_GetPriorityGrouping+0x18>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 0307 	and.w	r3, r3, #7
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db0b      	blt.n	8006106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 021f 	and.w	r2, r3, #31
 80060f4:	4907      	ldr	r1, [pc, #28]	; (8006114 <__NVIC_EnableIRQ+0x38>)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2001      	movs	r0, #1
 80060fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	e000e100 	.word	0xe000e100

08006118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006128:	2b00      	cmp	r3, #0
 800612a:	db0a      	blt.n	8006142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	490c      	ldr	r1, [pc, #48]	; (8006164 <__NVIC_SetPriority+0x4c>)
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	0112      	lsls	r2, r2, #4
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	440b      	add	r3, r1
 800613c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006140:	e00a      	b.n	8006158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <__NVIC_SetPriority+0x50>)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	3b04      	subs	r3, #4
 8006150:	0112      	lsls	r2, r2, #4
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	440b      	add	r3, r1
 8006156:	761a      	strb	r2, [r3, #24]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	e000e100 	.word	0xe000e100
 8006168:	e000ed00 	.word	0xe000ed00

0800616c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f1c3 0307 	rsb	r3, r3, #7
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf28      	it	cs
 800618a:	2304      	movcs	r3, #4
 800618c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3304      	adds	r3, #4
 8006192:	2b06      	cmp	r3, #6
 8006194:	d902      	bls.n	800619c <NVIC_EncodePriority+0x30>
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3b03      	subs	r3, #3
 800619a:	e000      	b.n	800619e <NVIC_EncodePriority+0x32>
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43da      	mvns	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	401a      	ands	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061b4:	f04f 31ff 	mov.w	r1, #4294967295
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	43d9      	mvns	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c4:	4313      	orrs	r3, r2
         );
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3724      	adds	r7, #36	; 0x24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3b01      	subs	r3, #1
 80061e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061e4:	d301      	bcc.n	80061ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061e6:	2301      	movs	r3, #1
 80061e8:	e00f      	b.n	800620a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ea:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <SysTick_Config+0x40>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061f2:	210f      	movs	r1, #15
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	f7ff ff8e 	bl	8006118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <SysTick_Config+0x40>)
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <SysTick_Config+0x40>)
 8006204:	2207      	movs	r2, #7
 8006206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	e000e010 	.word	0xe000e010

08006218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff29 	bl	8006078 <__NVIC_SetPriorityGrouping>
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006240:	f7ff ff3e 	bl	80060c0 <__NVIC_GetPriorityGrouping>
 8006244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f7ff ff8e 	bl	800616c <NVIC_EncodePriority>
 8006250:	4602      	mov	r2, r0
 8006252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff5d 	bl	8006118 <__NVIC_SetPriority>
}
 800625e:	bf00      	nop
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	4603      	mov	r3, r0
 800626e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff ff31 	bl	80060dc <__NVIC_EnableIRQ>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ffa2 	bl	80061d4 <SysTick_Config>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062a8:	f7ff feb8 	bl	800601c <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e099      	b.n	80063ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062d8:	e00f      	b.n	80062fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062da:	f7ff fe9f 	bl	800601c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	d908      	bls.n	80062fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2203      	movs	r2, #3
 80062f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e078      	b.n	80063ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e8      	bne.n	80062da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <HAL_DMA_Init+0x158>)
 8006314:	4013      	ands	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800633e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b04      	cmp	r3, #4
 8006352:	d107      	bne.n	8006364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4313      	orrs	r3, r2
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2b04      	cmp	r3, #4
 800638c:	d117      	bne.n	80063be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa99 	bl	80068d8 <DMA_CheckFifoParam>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2240      	movs	r2, #64	; 0x40
 80063b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063ba:	2301      	movs	r3, #1
 80063bc:	e016      	b.n	80063ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa50 	bl	800686c <DMA_CalcBaseAndBitshift>
 80063cc:	4603      	mov	r3, r0
 80063ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d4:	223f      	movs	r2, #63	; 0x3f
 80063d6:	409a      	lsls	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	f010803f 	.word	0xf010803f

080063f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_DMA_Start_IT+0x26>
 800641a:	2302      	movs	r3, #2
 800641c:	e048      	b.n	80064b0 <HAL_DMA_Start_IT+0xb8>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b01      	cmp	r3, #1
 8006430:	d137      	bne.n	80064a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f9e2 	bl	8006810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006450:	223f      	movs	r2, #63	; 0x3f
 8006452:	409a      	lsls	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0216 	orr.w	r2, r2, #22
 8006466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006476:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e005      	b.n	80064ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
 80064ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d004      	beq.n	80064d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e00c      	b.n	80064f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2205      	movs	r2, #5
 80064da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006508:	4b92      	ldr	r3, [pc, #584]	; (8006754 <HAL_DMA_IRQHandler+0x258>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a92      	ldr	r2, [pc, #584]	; (8006758 <HAL_DMA_IRQHandler+0x25c>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	0a9b      	lsrs	r3, r3, #10
 8006514:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	2208      	movs	r2, #8
 8006528:	409a      	lsls	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01a      	beq.n	8006568 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d013      	beq.n	8006568 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0204 	bic.w	r2, r2, #4
 800654e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	2208      	movs	r2, #8
 8006556:	409a      	lsls	r2, r3
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006560:	f043 0201 	orr.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	2201      	movs	r2, #1
 800658c:	409a      	lsls	r2, r3
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0202 	orr.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a2:	2204      	movs	r2, #4
 80065a4:	409a      	lsls	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d012      	beq.n	80065d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	2204      	movs	r2, #4
 80065c2:	409a      	lsls	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	f043 0204 	orr.w	r2, r3, #4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d8:	2210      	movs	r2, #16
 80065da:	409a      	lsls	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d043      	beq.n	800666c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03c      	beq.n	800666c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	2210      	movs	r2, #16
 80065f8:	409a      	lsls	r2, r3
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d018      	beq.n	800663e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d024      	beq.n	800666c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
 800662a:	e01f      	b.n	800666c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01b      	beq.n	800666c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
 800663c:	e016      	b.n	800666c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d107      	bne.n	800665c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0208 	bic.w	r2, r2, #8
 800665a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	2220      	movs	r2, #32
 8006672:	409a      	lsls	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 808e 	beq.w	800679a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8086 	beq.w	800679a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006692:	2220      	movs	r2, #32
 8006694:	409a      	lsls	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d136      	bne.n	8006714 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0216 	bic.w	r2, r2, #22
 80066b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_DMA_IRQHandler+0x1da>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0208 	bic.w	r2, r2, #8
 80066e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	223f      	movs	r2, #63	; 0x3f
 80066ec:	409a      	lsls	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d07d      	beq.n	8006806 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
        }
        return;
 8006712:	e078      	b.n	8006806 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01c      	beq.n	800675c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006734:	2b00      	cmp	r3, #0
 8006736:	d030      	beq.n	800679a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
 8006740:	e02b      	b.n	800679a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d027      	beq.n	800679a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
 8006752:	e022      	b.n	800679a <HAL_DMA_IRQHandler+0x29e>
 8006754:	20000134 	.word	0x20000134
 8006758:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10f      	bne.n	800678a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0210 	bic.w	r2, r2, #16
 8006778:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d032      	beq.n	8006808 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d022      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2205      	movs	r2, #5
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d307      	bcc.n	80067e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f2      	bne.n	80067c6 <HAL_DMA_IRQHandler+0x2ca>
 80067e0:	e000      	b.n	80067e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80067e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
 8006804:	e000      	b.n	8006808 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006806:	bf00      	nop
    }
  }
}
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop

08006810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800682c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d108      	bne.n	8006850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800684e:	e007      	b.n	8006860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3b10      	subs	r3, #16
 800687c:	4a14      	ldr	r2, [pc, #80]	; (80068d0 <DMA_CalcBaseAndBitshift+0x64>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d909      	bls.n	80068ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	659a      	str	r2, [r3, #88]	; 0x58
 80068ac:	e007      	b.n	80068be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	aaaaaaab 	.word	0xaaaaaaab
 80068d4:	0801c2b0 	.word	0x0801c2b0

080068d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11f      	bne.n	8006932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d855      	bhi.n	80069a4 <DMA_CheckFifoParam+0xcc>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <DMA_CheckFifoParam+0x28>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006923 	.word	0x08006923
 8006908:	08006911 	.word	0x08006911
 800690c:	080069a5 	.word	0x080069a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d045      	beq.n	80069a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006920:	e042      	b.n	80069a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800692a:	d13f      	bne.n	80069ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006930:	e03c      	b.n	80069ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693a:	d121      	bne.n	8006980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d836      	bhi.n	80069b0 <DMA_CheckFifoParam+0xd8>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <DMA_CheckFifoParam+0x70>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	0800695f 	.word	0x0800695f
 8006950:	08006959 	.word	0x08006959
 8006954:	08006971 	.word	0x08006971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e02f      	b.n	80069be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d024      	beq.n	80069b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696e:	e021      	b.n	80069b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006978:	d11e      	bne.n	80069b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800697e:	e01b      	b.n	80069b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <DMA_CheckFifoParam+0xb4>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d003      	beq.n	8006992 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800698a:	e018      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e015      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
      break;
 80069a2:	e00b      	b.n	80069bc <DMA_CheckFifoParam+0xe4>
      break;
 80069a4:	bf00      	nop
 80069a6:	e00a      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069a8:	bf00      	nop
 80069aa:	e008      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069ac:	bf00      	nop
 80069ae:	e006      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;   
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069bc:	bf00      	nop
    }
  } 
  
  return status; 
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b089      	sub	sp, #36	; 0x24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	e16b      	b.n	8006cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069e8:	2201      	movs	r2, #1
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	f040 815a 	bne.w	8006cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d003      	beq.n	8006a16 <HAL_GPIO_Init+0x4a>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b12      	cmp	r3, #18
 8006a14:	d123      	bne.n	8006a5e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	08da      	lsrs	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3208      	adds	r2, #8
 8006a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	220f      	movs	r2, #15
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	08da      	lsrs	r2, r3, #3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3208      	adds	r2, #8
 8006a58:	69b9      	ldr	r1, [r7, #24]
 8006a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	2203      	movs	r2, #3
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4013      	ands	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 0203 	and.w	r2, r3, #3
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00b      	beq.n	8006ab2 <HAL_GPIO_Init+0xe6>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d007      	beq.n	8006ab2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006aa6:	2b11      	cmp	r3, #17
 8006aa8:	d003      	beq.n	8006ab2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b12      	cmp	r3, #18
 8006ab0:	d130      	bne.n	8006b14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	2203      	movs	r2, #3
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ae8:	2201      	movs	r2, #1
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	f003 0201 	and.w	r2, r3, #1
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	2203      	movs	r2, #3
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80b4 	beq.w	8006cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	4b5f      	ldr	r3, [pc, #380]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	4a5e      	ldr	r2, [pc, #376]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b60:	6453      	str	r3, [r2, #68]	; 0x44
 8006b62:	4b5c      	ldr	r3, [pc, #368]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b6e:	4a5a      	ldr	r2, [pc, #360]	; (8006cd8 <HAL_GPIO_Init+0x30c>)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	089b      	lsrs	r3, r3, #2
 8006b74:	3302      	adds	r3, #2
 8006b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	220f      	movs	r2, #15
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a51      	ldr	r2, [pc, #324]	; (8006cdc <HAL_GPIO_Init+0x310>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02b      	beq.n	8006bf2 <HAL_GPIO_Init+0x226>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a50      	ldr	r2, [pc, #320]	; (8006ce0 <HAL_GPIO_Init+0x314>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d025      	beq.n	8006bee <HAL_GPIO_Init+0x222>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4f      	ldr	r2, [pc, #316]	; (8006ce4 <HAL_GPIO_Init+0x318>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01f      	beq.n	8006bea <HAL_GPIO_Init+0x21e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4e      	ldr	r2, [pc, #312]	; (8006ce8 <HAL_GPIO_Init+0x31c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d019      	beq.n	8006be6 <HAL_GPIO_Init+0x21a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a4d      	ldr	r2, [pc, #308]	; (8006cec <HAL_GPIO_Init+0x320>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_GPIO_Init+0x216>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a4c      	ldr	r2, [pc, #304]	; (8006cf0 <HAL_GPIO_Init+0x324>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00d      	beq.n	8006bde <HAL_GPIO_Init+0x212>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a4b      	ldr	r2, [pc, #300]	; (8006cf4 <HAL_GPIO_Init+0x328>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <HAL_GPIO_Init+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a4a      	ldr	r2, [pc, #296]	; (8006cf8 <HAL_GPIO_Init+0x32c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_GPIO_Init+0x20a>
 8006bd2:	2307      	movs	r3, #7
 8006bd4:	e00e      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	e00c      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bda:	2306      	movs	r3, #6
 8006bdc:	e00a      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bde:	2305      	movs	r3, #5
 8006be0:	e008      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006be2:	2304      	movs	r3, #4
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006be6:	2303      	movs	r3, #3
 8006be8:	e004      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e002      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	f002 0203 	and.w	r2, r2, #3
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	4093      	lsls	r3, r2
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c04:	4934      	ldr	r1, [pc, #208]	; (8006cd8 <HAL_GPIO_Init+0x30c>)
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c12:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c36:	4a31      	ldr	r2, [pc, #196]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c66:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	f67f ae90 	bls.w	80069e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3724      	adds	r7, #36	; 0x24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	40020000 	.word	0x40020000
 8006ce0:	40020400 	.word	0x40020400
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	40020c00 	.word	0x40020c00
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40021400 	.word	0x40021400
 8006cf4:	40021800 	.word	0x40021800
 8006cf8:	40021c00 	.word	0x40021c00
 8006cfc:	40013c00 	.word	0x40013c00

08006d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	887b      	ldrh	r3, [r7, #2]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e001      	b.n	8006d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	807b      	strh	r3, [r7, #2]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d40:	787b      	ldrb	r3, [r7, #1]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d46:	887a      	ldrh	r2, [r7, #2]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d4c:	e003      	b.n	8006d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d4e:	887b      	ldrh	r3, [r7, #2]
 8006d50:	041a      	lsls	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	619a      	str	r2, [r3, #24]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	887b      	ldrh	r3, [r7, #2]
 8006d74:	401a      	ands	r2, r3
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d104      	bne.n	8006d86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d7c:	887b      	ldrh	r3, [r7, #2]
 8006d7e:	041a      	lsls	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006d84:	e002      	b.n	8006d8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006d86:	887a      	ldrh	r2, [r7, #2]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	619a      	str	r2, [r3, #24]
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e10f      	b.n	8006fca <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f00e f962 	bl	8015088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ddc:	f002 fcc8 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 8006de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4a7b      	ldr	r2, [pc, #492]	; (8006fd4 <HAL_I2C_Init+0x23c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d807      	bhi.n	8006dfc <HAL_I2C_Init+0x64>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a7a      	ldr	r2, [pc, #488]	; (8006fd8 <HAL_I2C_Init+0x240>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	bf94      	ite	ls
 8006df4:	2301      	movls	r3, #1
 8006df6:	2300      	movhi	r3, #0
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e006      	b.n	8006e0a <HAL_I2C_Init+0x72>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a77      	ldr	r2, [pc, #476]	; (8006fdc <HAL_I2C_Init+0x244>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bf94      	ite	ls
 8006e04:	2301      	movls	r3, #1
 8006e06:	2300      	movhi	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0db      	b.n	8006fca <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a72      	ldr	r2, [pc, #456]	; (8006fe0 <HAL_I2C_Init+0x248>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	0c9b      	lsrs	r3, r3, #18
 8006e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a64      	ldr	r2, [pc, #400]	; (8006fd4 <HAL_I2C_Init+0x23c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d802      	bhi.n	8006e4c <HAL_I2C_Init+0xb4>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	e009      	b.n	8006e60 <HAL_I2C_Init+0xc8>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	4a63      	ldr	r2, [pc, #396]	; (8006fe4 <HAL_I2C_Init+0x24c>)
 8006e58:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5c:	099b      	lsrs	r3, r3, #6
 8006e5e:	3301      	adds	r3, #1
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4956      	ldr	r1, [pc, #344]	; (8006fd4 <HAL_I2C_Init+0x23c>)
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	d80d      	bhi.n	8006e9c <HAL_I2C_Init+0x104>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	1e59      	subs	r1, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	bf38      	it	cc
 8006e98:	2304      	movcc	r3, #4
 8006e9a:	e04f      	b.n	8006f3c <HAL_I2C_Init+0x1a4>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d111      	bne.n	8006ec8 <HAL_I2C_Init+0x130>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1e58      	subs	r0, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6859      	ldr	r1, [r3, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	440b      	add	r3, r1
 8006eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e012      	b.n	8006eee <HAL_I2C_Init+0x156>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1e58      	subs	r0, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	0099      	lsls	r1, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_I2C_Init+0x15e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e022      	b.n	8006f3c <HAL_I2C_Init+0x1a4>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <HAL_I2C_Init+0x184>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1e58      	subs	r0, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	440b      	add	r3, r1
 8006f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f10:	3301      	adds	r3, #1
 8006f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1a:	e00f      	b.n	8006f3c <HAL_I2C_Init+0x1a4>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1e58      	subs	r0, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	0099      	lsls	r1, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f32:	3301      	adds	r3, #1
 8006f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	6809      	ldr	r1, [r1, #0]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6911      	ldr	r1, [r2, #16]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	68d2      	ldr	r2, [r2, #12]
 8006f76:	4311      	orrs	r1, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	000186a0 	.word	0x000186a0
 8006fd8:	001e847f 	.word	0x001e847f
 8006fdc:	003d08ff 	.word	0x003d08ff
 8006fe0:	431bde83 	.word	0x431bde83
 8006fe4:	10624dd3 	.word	0x10624dd3

08006fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	817b      	strh	r3, [r7, #10]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	813b      	strh	r3, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007002:	f7ff f80b 	bl	800601c <HAL_GetTick>
 8007006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b20      	cmp	r3, #32
 8007012:	f040 80d9 	bne.w	80071c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2319      	movs	r3, #25
 800701c:	2201      	movs	r2, #1
 800701e:	496d      	ldr	r1, [pc, #436]	; (80071d4 <HAL_I2C_Mem_Write+0x1ec>)
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fc5b 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800702c:	2302      	movs	r3, #2
 800702e:	e0cc      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_I2C_Mem_Write+0x56>
 800703a:	2302      	movs	r3, #2
 800703c:	e0c5      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	d007      	beq.n	8007064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2221      	movs	r2, #33	; 0x21
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a3a      	ldr	r2, [r7, #32]
 800708e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a4d      	ldr	r2, [pc, #308]	; (80071d8 <HAL_I2C_Mem_Write+0x1f0>)
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070a6:	88f8      	ldrh	r0, [r7, #6]
 80070a8:	893a      	ldrh	r2, [r7, #8]
 80070aa:	8979      	ldrh	r1, [r7, #10]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	4603      	mov	r3, r0
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fab6 	bl	8007628 <I2C_RequestMemoryWrite>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d052      	beq.n	8007168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e081      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fcdc 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00d      	beq.n	80070f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d107      	bne.n	80070ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e06b      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b04      	cmp	r3, #4
 800712e:	d11b      	bne.n	8007168 <HAL_I2C_Mem_Write+0x180>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d017      	beq.n	8007168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1aa      	bne.n	80070c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fcc8 	bl	8007b0a <I2C_WaitOnBTFFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	2b04      	cmp	r3, #4
 8007186:	d107      	bne.n	8007198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e016      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	00100002 	.word	0x00100002
 80071d8:	ffff0000 	.word	0xffff0000

080071dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	; 0x30
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	817b      	strh	r3, [r7, #10]
 80071ee:	460b      	mov	r3, r1
 80071f0:	813b      	strh	r3, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071f6:	f7fe ff11 	bl	800601c <HAL_GetTick>
 80071fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b20      	cmp	r3, #32
 8007206:	f040 8208 	bne.w	800761a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2319      	movs	r3, #25
 8007210:	2201      	movs	r2, #1
 8007212:	497b      	ldr	r1, [pc, #492]	; (8007400 <HAL_I2C_Mem_Read+0x224>)
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fb61 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
 8007222:	e1fb      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_I2C_Mem_Read+0x56>
 800722e:	2302      	movs	r3, #2
 8007230:	e1f4      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d007      	beq.n	8007258 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2222      	movs	r2, #34	; 0x22
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2240      	movs	r2, #64	; 0x40
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a5b      	ldr	r2, [pc, #364]	; (8007404 <HAL_I2C_Mem_Read+0x228>)
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800729a:	88f8      	ldrh	r0, [r7, #6]
 800729c:	893a      	ldrh	r2, [r7, #8]
 800729e:	8979      	ldrh	r1, [r7, #10]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4603      	mov	r3, r0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fa46 	bl	800773c <I2C_RequestMemoryRead>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e1b0      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c2:	2300      	movs	r3, #0
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	623b      	str	r3, [r7, #32]
 80072d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e184      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d11b      	bne.n	800732a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007302:	2300      	movs	r3, #0
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e164      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	2b02      	cmp	r3, #2
 8007330:	d11b      	bne.n	800736a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007340:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007352:	2300      	movs	r3, #0
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	e144      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007380:	e138      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007386:	2b03      	cmp	r3, #3
 8007388:	f200 80f1 	bhi.w	800756e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	2b01      	cmp	r3, #1
 8007392:	d123      	bne.n	80073dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fbf7 	bl	8007b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e139      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073da:	e10b      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d14e      	bne.n	8007482 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	2200      	movs	r2, #0
 80073ec:	4906      	ldr	r1, [pc, #24]	; (8007408 <HAL_I2C_Mem_Read+0x22c>)
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fa74 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e10e      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
 80073fe:	bf00      	nop
 8007400:	00100002 	.word	0x00100002
 8007404:	ffff0000 	.word	0xffff0000
 8007408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007480:	e0b8      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	2200      	movs	r2, #0
 800748a:	4966      	ldr	r1, [pc, #408]	; (8007624 <HAL_I2C_Mem_Read+0x448>)
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fa25 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0bf      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2200      	movs	r2, #0
 80074e6:	494f      	ldr	r1, [pc, #316]	; (8007624 <HAL_I2C_Mem_Read+0x448>)
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f9f7 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e091      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800756c:	e042      	b.n	80075f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fb0a 	bl	8007b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e04c      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d118      	bne.n	80075f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f47f aec2 	bne.w	8007382 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3728      	adds	r7, #40	; 0x28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	00010004 	.word	0x00010004

08007628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	461a      	mov	r2, r3
 8007636:	4603      	mov	r3, r0
 8007638:	817b      	strh	r3, [r7, #10]
 800763a:	460b      	mov	r3, r1
 800763c:	813b      	strh	r3, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	2200      	movs	r2, #0
 800765a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f93c 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e05f      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800766e:	897b      	ldrh	r3, [r7, #10]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800767c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	492d      	ldr	r1, [pc, #180]	; (8007738 <I2C_RequestMemoryWrite+0x110>)
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f980 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e04c      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	6a39      	ldr	r1, [r7, #32]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f9ea 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d107      	bne.n	80076d2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e02b      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d105      	bne.n	80076e8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	611a      	str	r2, [r3, #16]
 80076e6:	e021      	b.n	800772c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f9c4 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	2b04      	cmp	r3, #4
 800770c:	d107      	bne.n	800771e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800771c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e005      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007722:	893b      	ldrh	r3, [r7, #8]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	00010002 	.word	0x00010002

0800773c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	4603      	mov	r3, r0
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	460b      	mov	r3, r1
 8007750:	813b      	strh	r3, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007764:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	2200      	movs	r2, #0
 800777e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f8aa 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e09e      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007792:	897b      	ldrh	r3, [r7, #10]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	494c      	ldr	r1, [pc, #304]	; (80078d8 <I2C_RequestMemoryRead+0x19c>)
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f8ee 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e08b      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	6a39      	ldr	r1, [r7, #32]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f958 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d107      	bne.n	80077f6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e06a      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d105      	bne.n	800780c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007800:	893b      	ldrh	r3, [r7, #8]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	611a      	str	r2, [r3, #16]
 800780a:	e021      	b.n	8007850 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800780c:	893b      	ldrh	r3, [r7, #8]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	6a39      	ldr	r1, [r7, #32]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f932 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00d      	beq.n	8007846 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	2b04      	cmp	r3, #4
 8007830:	d107      	bne.n	8007842 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e044      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007846:	893b      	ldrh	r3, [r7, #8]
 8007848:	b2da      	uxtb	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007852:	6a39      	ldr	r1, [r7, #32]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 f917 	bl	8007a88 <I2C_WaitOnTXEFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00d      	beq.n	800787c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	2b04      	cmp	r3, #4
 8007866:	d107      	bne.n	8007878 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e029      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800788a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2200      	movs	r2, #0
 8007894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f81f 	bl	80078dc <I2C_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e013      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078a8:	897b      	ldrh	r3, [r7, #10]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	4906      	ldr	r1, [pc, #24]	; (80078d8 <I2C_RequestMemoryRead+0x19c>)
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f863 	bl	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	00010002 	.word	0x00010002

080078dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ec:	e025      	b.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d021      	beq.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fe fb91 	bl	800601c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d116      	bne.n	800793a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e023      	b.n	8007982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10d      	bne.n	8007960 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	43da      	mvns	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4013      	ands	r3, r2
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf0c      	ite	eq
 8007956:	2301      	moveq	r3, #1
 8007958:	2300      	movne	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	e00c      	b.n	800797a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	43da      	mvns	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0b6      	beq.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007998:	e051      	b.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a8:	d123      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e046      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d021      	beq.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079fa:	f7fe fb0f 	bl	800601c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d116      	bne.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e020      	b.n	8007a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d10c      	bne.n	8007a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	43da      	mvns	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bf14      	ite	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	2300      	moveq	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	e00b      	b.n	8007a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	43da      	mvns	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf14      	ite	ne
 8007a74:	2301      	movne	r3, #1
 8007a76:	2300      	moveq	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d18d      	bne.n	800799a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a94:	e02d      	b.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8ce 	bl	8007c38 <I2C_IsAcknowledgeFailed>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e02d      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d021      	beq.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fe fab5 	bl	800601c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e007      	b.n	8007b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d1ca      	bne.n	8007a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b16:	e02d      	b.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f88d 	bl	8007c38 <I2C_IsAcknowledgeFailed>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e02d      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d021      	beq.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b30:	f7fe fa74 	bl	800601c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e007      	b.n	8007b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d1ca      	bne.n	8007b18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b98:	e042      	b.n	8007c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d119      	bne.n	8007bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0210 	mvn.w	r2, #16
 8007bb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e029      	b.n	8007c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bdc:	f7fe fa1e 	bl	800601c <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d302      	bcc.n	8007bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d116      	bne.n	8007c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	f043 0220 	orr.w	r2, r3, #32
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e007      	b.n	8007c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d1b5      	bne.n	8007b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4e:	d11b      	bne.n	8007c88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f043 0204 	orr.w	r2, r3, #4
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c98:	b08f      	sub	sp, #60	; 0x3c
 8007c9a:	af0a      	add	r7, sp, #40	; 0x28
 8007c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e10f      	b.n	8007ec8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f00d fe2a 	bl	801591c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2203      	movs	r2, #3
 8007ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f005 fed7 	bl	800da9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	603b      	str	r3, [r7, #0]
 8007cf2:	687e      	ldr	r6, [r7, #4]
 8007cf4:	466d      	mov	r5, sp
 8007cf6:	f106 0410 	add.w	r4, r6, #16
 8007cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d0a:	1d33      	adds	r3, r6, #4
 8007d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f005 fdae 	bl	800d870 <USB_CoreInit>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0d0      	b.n	8007ec8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f005 fec5 	bl	800dabc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	e04a      	b.n	8007dce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d38:	7bfa      	ldrb	r2, [r7, #15]
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	333d      	adds	r3, #61	; 0x3d
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d4c:	7bfa      	ldrb	r2, [r7, #15]
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	1a9b      	subs	r3, r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	333c      	adds	r3, #60	; 0x3c
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	b298      	uxth	r0, r3
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3342      	adds	r3, #66	; 0x42
 8007d74:	4602      	mov	r2, r0
 8007d76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d78:	7bfa      	ldrb	r2, [r7, #15]
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	333f      	adds	r3, #63	; 0x3f
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d8c:	7bfa      	ldrb	r2, [r7, #15]
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	3344      	adds	r3, #68	; 0x44
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	3348      	adds	r3, #72	; 0x48
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3350      	adds	r3, #80	; 0x50
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	7bfa      	ldrb	r2, [r7, #15]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d3af      	bcc.n	8007d38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e044      	b.n	8007e68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007dde:	7bfa      	ldrb	r2, [r7, #15]
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007df4:	7bfa      	ldrb	r2, [r7, #15]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007e06:	7bfa      	ldrb	r2, [r7, #15]
 8007e08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e4c:	7bfa      	ldrb	r2, [r7, #15]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	3301      	adds	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	7bfa      	ldrb	r2, [r7, #15]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d3b5      	bcc.n	8007dde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	687e      	ldr	r6, [r7, #4]
 8007e7a:	466d      	mov	r5, sp
 8007e7c:	f106 0410 	add.w	r4, r6, #16
 8007e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e90:	1d33      	adds	r3, r6, #4
 8007e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e94:	6838      	ldr	r0, [r7, #0]
 8007e96:	f005 fe3b 	bl	800db10 <USB_DevInit>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e00d      	b.n	8007ec8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f006 fe30 	bl	800eb26 <USB_DevDisconnect>

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_PCD_Start+0x1c>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e020      	b.n	8007f2e <HAL_PCD_Start+0x5e>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d109      	bne.n	8007f10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d005      	beq.n	8007f10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f006 fdee 	bl	800eaf6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f005 fdaa 	bl	800da78 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f36:	b590      	push	{r4, r7, lr}
 8007f38:	b08d      	sub	sp, #52	; 0x34
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f006 fe95 	bl	800ec7c <USB_GetMode>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 838e 	bne.w	8008676 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f006 fdf9 	bl	800eb56 <USB_ReadInterrupts>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8384 	beq.w	8008674 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f006 fdf0 	bl	800eb56 <USB_ReadInterrupts>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d107      	bne.n	8007f90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695a      	ldr	r2, [r3, #20]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f002 0202 	and.w	r2, r2, #2
 8007f8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f006 fdde 	bl	800eb56 <USB_ReadInterrupts>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fa4:	d17b      	bne.n	800809e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f006 fde4 	bl	800eb7c <USB_ReadDevAllOutEpInterrupt>
 8007fb4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007fb6:	e06f      	b.n	8008098 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d064      	beq.n	800808c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f006 fe09 	bl	800ebe4 <USB_ReadDevOutEPInterrupt>
 8007fd2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	461a      	mov	r2, r3
 8007fec:	2301      	movs	r3, #1
 8007fee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fe0e 	bl	8008c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00c      	beq.n	800801c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ff0d 	bl	8008e24 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	461a      	mov	r2, r3
 8008018:	2308      	movs	r3, #8
 800801a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	461a      	mov	r2, r3
 8008034:	2310      	movs	r3, #16
 8008036:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d015      	beq.n	800806e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d108      	bne.n	800805c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008054:	461a      	mov	r2, r3
 8008056:	2101      	movs	r1, #1
 8008058:	f006 fe54 	bl	800ed04 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	461a      	mov	r2, r3
 800806a:	2320      	movs	r3, #32
 800806c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008084:	461a      	mov	r2, r3
 8008086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800808a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	3301      	adds	r3, #1
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d18c      	bne.n	8007fb8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f006 fd57 	bl	800eb56 <USB_ReadInterrupts>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080b2:	f040 80c4 	bne.w	800823e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f006 fd78 	bl	800ebb0 <USB_ReadDevAllInEpInterrupt>
 80080c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80080c6:	e0b6      	b.n	8008236 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80ab 	beq.w	800822a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	4611      	mov	r1, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f006 fd9e 	bl	800ec20 <USB_ReadDevInEPInterrupt>
 80080e4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d05b      	beq.n	80081a8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	2201      	movs	r2, #1
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	43db      	mvns	r3, r3
 800810a:	69f9      	ldr	r1, [r7, #28]
 800810c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008110:	4013      	ands	r3, r2
 8008112:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	461a      	mov	r2, r3
 8008122:	2301      	movs	r3, #1
 8008124:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d11b      	bne.n	8008166 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	3348      	adds	r3, #72	; 0x48
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4403      	add	r3, r0
 800814e:	3344      	adds	r3, #68	; 0x44
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4419      	add	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008158:	4613      	mov	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4403      	add	r3, r0
 8008162:	3348      	adds	r3, #72	; 0x48
 8008164:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f00d fc56 	bl	8015a1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d116      	bne.n	80081a8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d113      	bne.n	80081a8 <HAL_PCD_IRQHandler+0x272>
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3350      	adds	r3, #80	; 0x50
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d108      	bne.n	80081a8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80081a0:	461a      	mov	r2, r3
 80081a2:	2101      	movs	r1, #1
 80081a4:	f006 fdae 	bl	800ed04 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081be:	461a      	mov	r2, r3
 80081c0:	2308      	movs	r3, #8
 80081c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	461a      	mov	r2, r3
 80081dc:	2310      	movs	r3, #16
 80081de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	461a      	mov	r2, r3
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	461a      	mov	r2, r3
 8008214:	2302      	movs	r3, #2
 8008216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc67 	bl	8008af8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	3301      	adds	r3, #1
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af45 	bne.w	80080c8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f006 fc87 	bl	800eb56 <USB_ReadInterrupts>
 8008248:	4603      	mov	r3, r0
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008252:	d122      	bne.n	800829a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800826e:	2b01      	cmp	r3, #1
 8008270:	d108      	bne.n	8008284 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fe89 	bl	8008f94 <HAL_PCDEx_LPM_Callback>
 8008282:	e002      	b.n	800828a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f00d fc41 	bl	8015b0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f006 fc59 	bl	800eb56 <USB_ReadInterrupts>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ae:	d112      	bne.n	80082d6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d102      	bne.n	80082c6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f00d fbfd 	bl	8015ac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80082d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f006 fc3b 	bl	800eb56 <USB_ReadInterrupts>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ea:	f040 80a7 	bne.w	800843c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2110      	movs	r1, #16
 8008308:	4618      	mov	r0, r3
 800830a:	f005 fd73 	bl	800ddf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008312:	e036      	b.n	8008382 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008320:	461a      	mov	r2, r3
 8008322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008326:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008346:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	461a      	mov	r2, r3
 8008356:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800835a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800837a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	3301      	adds	r3, #1
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008388:	429a      	cmp	r2, r3
 800838a:	d3c3      	bcc.n	8008314 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800839a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800839e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d016      	beq.n	80083d6 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083b8:	f043 030b 	orr.w	r3, r3, #11
 80083bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ce:	f043 030b 	orr.w	r3, r3, #11
 80083d2:	6453      	str	r3, [r2, #68]	; 0x44
 80083d4:	e015      	b.n	8008402 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80083ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083fc:	f043 030b 	orr.w	r3, r3, #11
 8008400:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008410:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008414:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008426:	461a      	mov	r2, r3
 8008428:	f006 fc6c 	bl	800ed04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695a      	ldr	r2, [r3, #20]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800843a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4618      	mov	r0, r3
 8008442:	f006 fb88 	bl	800eb56 <USB_ReadInterrupts>
 8008446:	4603      	mov	r3, r0
 8008448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800844c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008450:	d124      	bne.n	800849c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f006 fc1e 	bl	800ec98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f005 fd28 	bl	800deb6 <USB_GetDevSpeed>
 8008466:	4603      	mov	r3, r0
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681c      	ldr	r4, [r3, #0]
 8008472:	f001 f971 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 8008476:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800847c:	b2db      	uxtb	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	4620      	mov	r0, r4
 8008482:	f005 fa57 	bl	800d934 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f00d faf1 	bl	8015a6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695a      	ldr	r2, [r3, #20]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800849a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f006 fb58 	bl	800eb56 <USB_ReadInterrupts>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f003 0310 	and.w	r3, r3, #16
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d161      	bne.n	8008574 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0210 	bic.w	r2, r2, #16
 80084be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f003 020f 	and.w	r2, r3, #15
 80084cc:	4613      	mov	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	3304      	adds	r3, #4
 80084de:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	0c5b      	lsrs	r3, r3, #17
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d124      	bne.n	8008536 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d035      	beq.n	8008564 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008506:	b29b      	uxth	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	6a38      	ldr	r0, [r7, #32]
 800850c:	f006 f9d0 	bl	800e8b0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	091b      	lsrs	r3, r3, #4
 8008518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800851c:	441a      	add	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	091b      	lsrs	r3, r3, #4
 800852a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	619a      	str	r2, [r3, #24]
 8008534:	e016      	b.n	8008564 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	0c5b      	lsrs	r3, r3, #17
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	2b06      	cmp	r3, #6
 8008540:	d110      	bne.n	8008564 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008548:	2208      	movs	r2, #8
 800854a:	4619      	mov	r1, r3
 800854c:	6a38      	ldr	r0, [r7, #32]
 800854e:	f006 f9af 	bl	800e8b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	091b      	lsrs	r3, r3, #4
 800855a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0210 	orr.w	r2, r2, #16
 8008572:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4618      	mov	r0, r3
 800857a:	f006 faec 	bl	800eb56 <USB_ReadInterrupts>
 800857e:	4603      	mov	r3, r0
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d10a      	bne.n	800859e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f00d fa62 	bl	8015a52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	695a      	ldr	r2, [r3, #20]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f002 0208 	and.w	r2, r2, #8
 800859c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f006 fad7 	bl	800eb56 <USB_ReadInterrupts>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b2:	d10f      	bne.n	80085d4 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f00d fac4 	bl	8015b4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695a      	ldr	r2, [r3, #20]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80085d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f006 fabc 	bl	800eb56 <USB_ReadInterrupts>
 80085de:	4603      	mov	r3, r0
 80085e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e8:	d10f      	bne.n	800860a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f00d fa97 	bl	8015b28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695a      	ldr	r2, [r3, #20]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f006 faa1 	bl	800eb56 <USB_ReadInterrupts>
 8008614:	4603      	mov	r3, r0
 8008616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861e:	d10a      	bne.n	8008636 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f00d faa5 	bl	8015b70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f006 fa8b 	bl	800eb56 <USB_ReadInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b04      	cmp	r3, #4
 8008648:	d115      	bne.n	8008676 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f00d fa95 	bl	8015b8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6859      	ldr	r1, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	e000      	b.n	8008676 <HAL_PCD_IRQHandler+0x740>
      return;
 8008674:	bf00      	nop
    }
  }
}
 8008676:	3734      	adds	r7, #52	; 0x34
 8008678:	46bd      	mov	sp, r7
 800867a:	bd90      	pop	{r4, r7, pc}

0800867c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_PCD_SetAddress+0x1a>
 8008692:	2302      	movs	r3, #2
 8008694:	e013      	b.n	80086be <HAL_PCD_SetAddress+0x42>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f006 f9fb 	bl	800eaaa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	461a      	mov	r2, r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	70fb      	strb	r3, [r7, #3]
 80086d8:	460b      	mov	r3, r1
 80086da:	803b      	strh	r3, [r7, #0]
 80086dc:	4613      	mov	r3, r2
 80086de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0f      	bge.n	800870c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	3338      	adds	r3, #56	; 0x38
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	3304      	adds	r3, #4
 8008702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	705a      	strb	r2, [r3, #1]
 800870a:	e00f      	b.n	800872c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	f003 020f 	and.w	r2, r3, #15
 8008712:	4613      	mov	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	3304      	adds	r3, #4
 8008724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	b2da      	uxtb	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008738:	883a      	ldrh	r2, [r7, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	78ba      	ldrb	r2, [r7, #2]
 8008742:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008756:	78bb      	ldrb	r3, [r7, #2]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d102      	bne.n	8008762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_PCD_EP_Open+0xaa>
 800876c:	2302      	movs	r3, #2
 800876e:	e00e      	b.n	800878e <HAL_PCD_EP_Open+0xc8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68f9      	ldr	r1, [r7, #12]
 800877e:	4618      	mov	r0, r3
 8008780:	f005 fbbe 	bl	800df00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800878c:	7afb      	ldrb	r3, [r7, #11]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da0f      	bge.n	80087ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	f003 020f 	and.w	r2, r3, #15
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	3338      	adds	r3, #56	; 0x38
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	3304      	adds	r3, #4
 80087c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	705a      	strb	r2, [r3, #1]
 80087c8:	e00f      	b.n	80087ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	f003 020f 	and.w	r2, r3, #15
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	1a9b      	subs	r3, r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_PCD_EP_Close+0x6e>
 8008800:	2302      	movs	r3, #2
 8008802:	e00e      	b.n	8008822 <HAL_PCD_EP_Close+0x8c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	4618      	mov	r0, r3
 8008814:	f005 fbfc 	bl	800e010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
 8008836:	460b      	mov	r3, r1
 8008838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2200      	movs	r2, #0
 8008864:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2200      	movs	r2, #0
 800886a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	f003 030f 	and.w	r3, r3, #15
 8008872:	b2da      	uxtb	r2, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d102      	bne.n	8008886 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	6979      	ldr	r1, [r7, #20]
 800889e:	f005 fe7f 	bl	800e5a0 <USB_EP0StartXfer>
 80088a2:	e008      	b.n	80088b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	461a      	mov	r2, r3
 80088b0:	6979      	ldr	r1, [r7, #20]
 80088b2:	f005 fc31 	bl	800e118 <USB_EPStartXfer>
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	f003 020f 	and.w	r2, r3, #15
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80088e2:	681b      	ldr	r3, [r3, #0]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	460b      	mov	r3, r1
 80088fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	f003 020f 	and.w	r2, r3, #15
 8008906:	4613      	mov	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	3338      	adds	r3, #56	; 0x38
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	3304      	adds	r3, #4
 8008916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2201      	movs	r2, #1
 800892e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	b2da      	uxtb	r2, r3
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d102      	bne.n	800894a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	6979      	ldr	r1, [r7, #20]
 8008962:	f005 fe1d 	bl	800e5a0 <USB_EP0StartXfer>
 8008966:	e008      	b.n	800897a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	461a      	mov	r2, r3
 8008974:	6979      	ldr	r1, [r7, #20]
 8008976:	f005 fbcf 	bl	800e118 <USB_EPStartXfer>
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	f003 020f 	and.w	r2, r3, #15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d901      	bls.n	80089a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e050      	b.n	8008a44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da0f      	bge.n	80089ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	f003 020f 	and.w	r2, r3, #15
 80089b0:	4613      	mov	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	3338      	adds	r3, #56	; 0x38
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	4413      	add	r3, r2
 80089be:	3304      	adds	r3, #4
 80089c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	705a      	strb	r2, [r3, #1]
 80089c8:	e00d      	b.n	80089e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4613      	mov	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	4413      	add	r3, r2
 80089dc:	3304      	adds	r3, #4
 80089de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_PCD_EP_SetStall+0x82>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e01e      	b.n	8008a44 <HAL_PCD_EP_SetStall+0xc0>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f005 ff74 	bl	800e902 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	b2d9      	uxtb	r1, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a34:	461a      	mov	r2, r3
 8008a36:	f006 f965 	bl	800ed04 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	f003 020f 	and.w	r2, r3, #15
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d901      	bls.n	8008a6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e042      	b.n	8008af0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	da0f      	bge.n	8008a92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	4613      	mov	r3, r2
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	3338      	adds	r3, #56	; 0x38
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	3304      	adds	r3, #4
 8008a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	705a      	strb	r2, [r3, #1]
 8008a90:	e00f      	b.n	8008ab2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	f003 020f 	and.w	r2, r3, #15
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_PCD_EP_ClrStall+0x86>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e00e      	b.n	8008af0 <HAL_PCD_EP_ClrStall+0xa4>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f005 ff7c 	bl	800e9de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08a      	sub	sp, #40	; 0x28
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	3338      	adds	r3, #56	; 0x38
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	699a      	ldr	r2, [r3, #24]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d901      	bls.n	8008b30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e06c      	b.n	8008c0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	695a      	ldr	r2, [r3, #20]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d902      	bls.n	8008b4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3303      	adds	r3, #3
 8008b50:	089b      	lsrs	r3, r3, #2
 8008b52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b54:	e02b      	b.n	8008bae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	695a      	ldr	r2, [r3, #20]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d902      	bls.n	8008b72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	3303      	adds	r3, #3
 8008b76:	089b      	lsrs	r3, r3, #2
 8008b78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68d9      	ldr	r1, [r3, #12]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	4603      	mov	r3, r0
 8008b90:	6978      	ldr	r0, [r7, #20]
 8008b92:	f005 fe58 	bl	800e846 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699a      	ldr	r2, [r3, #24]
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	441a      	add	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d809      	bhi.n	8008bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	699a      	ldr	r2, [r3, #24]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d203      	bcs.n	8008bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1be      	bne.n	8008b56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d811      	bhi.n	8008c08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	2201      	movs	r2, #1
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	43db      	mvns	r3, r3
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c04:	4013      	ands	r3, r2
 8008c06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	333c      	adds	r3, #60	; 0x3c
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	f040 80b3 	bne.w	8008db2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d028      	beq.n	8008ca8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a70      	ldr	r2, [pc, #448]	; (8008e1c <PCD_EP_OutXfrComplete_int+0x208>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d90e      	bls.n	8008c7c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d009      	beq.n	8008c7c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c74:	461a      	mov	r2, r3
 8008c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f00c fea1 	bl	80159c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	2101      	movs	r1, #1
 8008c90:	f006 f838 	bl	800ed04 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	6093      	str	r3, [r2, #8]
 8008ca6:	e0b3      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	6093      	str	r3, [r2, #8]
 8008cc4:	e0a4      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 809f 	bne.w	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4a51      	ldr	r2, [pc, #324]	; (8008e1c <PCD_EP_OutXfrComplete_int+0x208>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d90f      	bls.n	8008cfa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cf6:	6093      	str	r3, [r2, #8]
 8008cf8:	e08a      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d0c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	0159      	lsls	r1, r3, #5
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	440b      	add	r3, r1
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008d20:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	4613      	mov	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4403      	add	r3, r0
 8008d30:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008d34:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d48:	6819      	ldr	r1, [r3, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4403      	add	r3, r0
 8008d58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4419      	add	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4403      	add	r3, r0
 8008d6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d72:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f00c fe34 	bl	80159e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d144      	bne.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d138      	bne.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008da8:	461a      	mov	r2, r3
 8008daa:	2101      	movs	r1, #1
 8008dac:	f005 ffaa 	bl	800ed04 <USB_EP0_OutStart>
 8008db0:	e02e      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a1a      	ldr	r2, [pc, #104]	; (8008e20 <PCD_EP_OutXfrComplete_int+0x20c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d124      	bne.n	8008e04 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	6093      	str	r3, [r2, #8]
 8008dd8:	e01a      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df0:	461a      	mov	r2, r3
 8008df2:	2320      	movs	r3, #32
 8008df4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f00c fdf3 	bl	80159e8 <HAL_PCD_DataOutStageCallback>
 8008e02:	e005      	b.n	8008e10 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f00c fdec 	bl	80159e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	4f54300a 	.word	0x4f54300a
 8008e20:	4f54310a 	.word	0x4f54310a

08008e24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	333c      	adds	r3, #60	; 0x3c
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d113      	bne.n	8008e82 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <PCD_EP_OutSetupPacket_int+0xb8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d922      	bls.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01d      	beq.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7e:	6093      	str	r3, [r2, #8]
 8008e80:	e012      	b.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d10e      	bne.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f00c fd8b 	bl	80159c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <PCD_EP_OutSetupPacket_int+0xb8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d90c      	bls.n	8008ed0 <PCD_EP_OutSetupPacket_int+0xac>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d108      	bne.n	8008ed0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2101      	movs	r1, #1
 8008ecc:	f005 ff1a 	bl	800ed04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	4f54300a 	.word	0x4f54300a
 8008ee0:	4f54310a 	.word	0x4f54310a

08008ee4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d107      	bne.n	8008f12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f02:	883b      	ldrh	r3, [r7, #0]
 8008f04:	0419      	lsls	r1, r3, #16
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8008f10:	e028      	b.n	8008f64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	0c1b      	lsrs	r3, r3, #16
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
 8008f24:	e00d      	b.n	8008f42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	3340      	adds	r3, #64	; 0x40
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	0c1b      	lsrs	r3, r3, #16
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
 8008f42:	7bfa      	ldrb	r2, [r7, #15]
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3ec      	bcc.n	8008f26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008f4c:	883b      	ldrh	r3, [r7, #0]
 8008f4e:	0418      	lsls	r0, r3, #16
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	4302      	orrs	r2, r0
 8008f5c:	3340      	adds	r3, #64	; 0x40
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	887a      	ldrh	r2, [r7, #2]
 8008f84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e22d      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d075      	beq.n	80090b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fca:	4ba3      	ldr	r3, [pc, #652]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f003 030c 	and.w	r3, r3, #12
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d00c      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fd6:	4ba0      	ldr	r3, [pc, #640]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d112      	bne.n	8009008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fe2:	4b9d      	ldr	r3, [pc, #628]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fee:	d10b      	bne.n	8009008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ff0:	4b99      	ldr	r3, [pc, #612]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d05b      	beq.n	80090b4 <HAL_RCC_OscConfig+0x108>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d157      	bne.n	80090b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e208      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009010:	d106      	bne.n	8009020 <HAL_RCC_OscConfig+0x74>
 8009012:	4b91      	ldr	r3, [pc, #580]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a90      	ldr	r2, [pc, #576]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	e01d      	b.n	800905c <HAL_RCC_OscConfig+0xb0>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009028:	d10c      	bne.n	8009044 <HAL_RCC_OscConfig+0x98>
 800902a:	4b8b      	ldr	r3, [pc, #556]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a8a      	ldr	r2, [pc, #552]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	4b88      	ldr	r3, [pc, #544]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a87      	ldr	r2, [pc, #540]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800903c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e00b      	b.n	800905c <HAL_RCC_OscConfig+0xb0>
 8009044:	4b84      	ldr	r3, [pc, #528]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a83      	ldr	r2, [pc, #524]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800904a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	4b81      	ldr	r3, [pc, #516]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a80      	ldr	r2, [pc, #512]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800905a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d013      	beq.n	800908c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009064:	f7fc ffda 	bl	800601c <HAL_GetTick>
 8009068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800906c:	f7fc ffd6 	bl	800601c <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b64      	cmp	r3, #100	; 0x64
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e1cd      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800907e:	4b76      	ldr	r3, [pc, #472]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCC_OscConfig+0xc0>
 800908a:	e014      	b.n	80090b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800908c:	f7fc ffc6 	bl	800601c <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009092:	e008      	b.n	80090a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009094:	f7fc ffc2 	bl	800601c <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b64      	cmp	r3, #100	; 0x64
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e1b9      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090a6:	4b6c      	ldr	r3, [pc, #432]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f0      	bne.n	8009094 <HAL_RCC_OscConfig+0xe8>
 80090b2:	e000      	b.n	80090b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d063      	beq.n	800918a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090c2:	4b65      	ldr	r3, [pc, #404]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f003 030c 	and.w	r3, r3, #12
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ce:	4b62      	ldr	r3, [pc, #392]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	d11c      	bne.n	8009114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090da:	4b5f      	ldr	r3, [pc, #380]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d116      	bne.n	8009114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090e6:	4b5c      	ldr	r3, [pc, #368]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_RCC_OscConfig+0x152>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d001      	beq.n	80090fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e18d      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090fe:	4b56      	ldr	r3, [pc, #344]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	4952      	ldr	r1, [pc, #328]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800910e:	4313      	orrs	r3, r2
 8009110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009112:	e03a      	b.n	800918a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d020      	beq.n	800915e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800911c:	4b4f      	ldr	r3, [pc, #316]	; (800925c <HAL_RCC_OscConfig+0x2b0>)
 800911e:	2201      	movs	r2, #1
 8009120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009122:	f7fc ff7b 	bl	800601c <HAL_GetTick>
 8009126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009128:	e008      	b.n	800913c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800912a:	f7fc ff77 	bl	800601c <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e16e      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800913c:	4b46      	ldr	r3, [pc, #280]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009148:	4b43      	ldr	r3, [pc, #268]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	4940      	ldr	r1, [pc, #256]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009158:	4313      	orrs	r3, r2
 800915a:	600b      	str	r3, [r1, #0]
 800915c:	e015      	b.n	800918a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800915e:	4b3f      	ldr	r3, [pc, #252]	; (800925c <HAL_RCC_OscConfig+0x2b0>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fc ff5a 	bl	800601c <HAL_GetTick>
 8009168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916a:	e008      	b.n	800917e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800916c:	f7fc ff56 	bl	800601c <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d901      	bls.n	800917e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e14d      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800917e:	4b36      	ldr	r3, [pc, #216]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1f0      	bne.n	800916c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d030      	beq.n	80091f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d016      	beq.n	80091cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800919e:	4b30      	ldr	r3, [pc, #192]	; (8009260 <HAL_RCC_OscConfig+0x2b4>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a4:	f7fc ff3a 	bl	800601c <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ac:	f7fc ff36 	bl	800601c <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e12d      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80091c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f0      	beq.n	80091ac <HAL_RCC_OscConfig+0x200>
 80091ca:	e015      	b.n	80091f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091cc:	4b24      	ldr	r3, [pc, #144]	; (8009260 <HAL_RCC_OscConfig+0x2b4>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091d2:	f7fc ff23 	bl	800601c <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d8:	e008      	b.n	80091ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091da:	f7fc ff1f 	bl	800601c <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e116      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 80091ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1f0      	bne.n	80091da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80a0 	beq.w	8009346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10f      	bne.n	8009236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 800921c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921e:	4a0e      	ldr	r2, [pc, #56]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009224:	6413      	str	r3, [r2, #64]	; 0x40
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <HAL_RCC_OscConfig+0x2ac>)
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009232:	2301      	movs	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <HAL_RCC_OscConfig+0x2b8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923e:	2b00      	cmp	r3, #0
 8009240:	d121      	bne.n	8009286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009242:	4b08      	ldr	r3, [pc, #32]	; (8009264 <HAL_RCC_OscConfig+0x2b8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a07      	ldr	r2, [pc, #28]	; (8009264 <HAL_RCC_OscConfig+0x2b8>)
 8009248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800924c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800924e:	f7fc fee5 	bl	800601c <HAL_GetTick>
 8009252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009254:	e011      	b.n	800927a <HAL_RCC_OscConfig+0x2ce>
 8009256:	bf00      	nop
 8009258:	40023800 	.word	0x40023800
 800925c:	42470000 	.word	0x42470000
 8009260:	42470e80 	.word	0x42470e80
 8009264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009268:	f7fc fed8 	bl	800601c <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d901      	bls.n	800927a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e0cf      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927a:	4b6a      	ldr	r3, [pc, #424]	; (8009424 <HAL_RCC_OscConfig+0x478>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0f0      	beq.n	8009268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d106      	bne.n	800929c <HAL_RCC_OscConfig+0x2f0>
 800928e:	4b66      	ldr	r3, [pc, #408]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	4a65      	ldr	r2, [pc, #404]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009294:	f043 0301 	orr.w	r3, r3, #1
 8009298:	6713      	str	r3, [r2, #112]	; 0x70
 800929a:	e01c      	b.n	80092d6 <HAL_RCC_OscConfig+0x32a>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	d10c      	bne.n	80092be <HAL_RCC_OscConfig+0x312>
 80092a4:	4b60      	ldr	r3, [pc, #384]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a5f      	ldr	r2, [pc, #380]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092aa:	f043 0304 	orr.w	r3, r3, #4
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
 80092b0:	4b5d      	ldr	r3, [pc, #372]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b4:	4a5c      	ldr	r2, [pc, #368]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092b6:	f043 0301 	orr.w	r3, r3, #1
 80092ba:	6713      	str	r3, [r2, #112]	; 0x70
 80092bc:	e00b      	b.n	80092d6 <HAL_RCC_OscConfig+0x32a>
 80092be:	4b5a      	ldr	r3, [pc, #360]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	4a59      	ldr	r2, [pc, #356]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	6713      	str	r3, [r2, #112]	; 0x70
 80092ca:	4b57      	ldr	r3, [pc, #348]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	4a56      	ldr	r2, [pc, #344]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092d0:	f023 0304 	bic.w	r3, r3, #4
 80092d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d015      	beq.n	800930a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092de:	f7fc fe9d 	bl	800601c <HAL_GetTick>
 80092e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092e4:	e00a      	b.n	80092fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092e6:	f7fc fe99 	bl	800601c <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d901      	bls.n	80092fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e08e      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092fc:	4b4a      	ldr	r3, [pc, #296]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80092fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0ee      	beq.n	80092e6 <HAL_RCC_OscConfig+0x33a>
 8009308:	e014      	b.n	8009334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800930a:	f7fc fe87 	bl	800601c <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009310:	e00a      	b.n	8009328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009312:	f7fc fe83 	bl	800601c <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009320:	4293      	cmp	r3, r2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e078      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009328:	4b3f      	ldr	r3, [pc, #252]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1ee      	bne.n	8009312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d105      	bne.n	8009346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800933a:	4b3b      	ldr	r3, [pc, #236]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	4a3a      	ldr	r2, [pc, #232]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d064      	beq.n	8009418 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800934e:	4b36      	ldr	r3, [pc, #216]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 030c 	and.w	r3, r3, #12
 8009356:	2b08      	cmp	r3, #8
 8009358:	d05c      	beq.n	8009414 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d141      	bne.n	80093e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009362:	4b32      	ldr	r3, [pc, #200]	; (800942c <HAL_RCC_OscConfig+0x480>)
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009368:	f7fc fe58 	bl	800601c <HAL_GetTick>
 800936c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800936e:	e008      	b.n	8009382 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009370:	f7fc fe54 	bl	800601c <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	2b02      	cmp	r3, #2
 800937c:	d901      	bls.n	8009382 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e04b      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009382:	4b29      	ldr	r3, [pc, #164]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1f0      	bne.n	8009370 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	019b      	lsls	r3, r3, #6
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	3b01      	subs	r3, #1
 80093a8:	041b      	lsls	r3, r3, #16
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	061b      	lsls	r3, r3, #24
 80093b2:	491d      	ldr	r1, [pc, #116]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093b8:	4b1c      	ldr	r3, [pc, #112]	; (800942c <HAL_RCC_OscConfig+0x480>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093be:	f7fc fe2d 	bl	800601c <HAL_GetTick>
 80093c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093c4:	e008      	b.n	80093d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093c6:	f7fc fe29 	bl	800601c <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e020      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093d8:	4b13      	ldr	r3, [pc, #76]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0f0      	beq.n	80093c6 <HAL_RCC_OscConfig+0x41a>
 80093e4:	e018      	b.n	8009418 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <HAL_RCC_OscConfig+0x480>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ec:	f7fc fe16 	bl	800601c <HAL_GetTick>
 80093f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093f2:	e008      	b.n	8009406 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093f4:	f7fc fe12 	bl	800601c <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e009      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <HAL_RCC_OscConfig+0x47c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f0      	bne.n	80093f4 <HAL_RCC_OscConfig+0x448>
 8009412:	e001      	b.n	8009418 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e000      	b.n	800941a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	40007000 	.word	0x40007000
 8009428:	40023800 	.word	0x40023800
 800942c:	42470060 	.word	0x42470060

08009430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e0ca      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009444:	4b67      	ldr	r3, [pc, #412]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 030f 	and.w	r3, r3, #15
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d90c      	bls.n	800946c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009452:	4b64      	ldr	r3, [pc, #400]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800945a:	4b62      	ldr	r3, [pc, #392]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d001      	beq.n	800946c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e0b6      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d020      	beq.n	80094ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009484:	4b58      	ldr	r3, [pc, #352]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4a57      	ldr	r2, [pc, #348]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 800948a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800948e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800949c:	4b52      	ldr	r3, [pc, #328]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	4a51      	ldr	r2, [pc, #324]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80094a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a8:	4b4f      	ldr	r3, [pc, #316]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	494c      	ldr	r1, [pc, #304]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d044      	beq.n	8009550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d107      	bne.n	80094de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ce:	4b46      	ldr	r3, [pc, #280]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d119      	bne.n	800950e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e07d      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d003      	beq.n	80094ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d107      	bne.n	80094fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094ee:	4b3e      	ldr	r3, [pc, #248]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d109      	bne.n	800950e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e06d      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094fe:	4b3a      	ldr	r3, [pc, #232]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e065      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800950e:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f023 0203 	bic.w	r2, r3, #3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4933      	ldr	r1, [pc, #204]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 800951c:	4313      	orrs	r3, r2
 800951e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009520:	f7fc fd7c 	bl	800601c <HAL_GetTick>
 8009524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009526:	e00a      	b.n	800953e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009528:	f7fc fd78 	bl	800601c <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	f241 3288 	movw	r2, #5000	; 0x1388
 8009536:	4293      	cmp	r3, r2
 8009538:	d901      	bls.n	800953e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e04d      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800953e:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 020c 	and.w	r2, r3, #12
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	429a      	cmp	r2, r3
 800954e:	d1eb      	bne.n	8009528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009550:	4b24      	ldr	r3, [pc, #144]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d20c      	bcs.n	8009578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800955e:	4b21      	ldr	r3, [pc, #132]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009566:	4b1f      	ldr	r3, [pc, #124]	; (80095e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d001      	beq.n	8009578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e030      	b.n	80095da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d008      	beq.n	8009596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009584:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	4915      	ldr	r1, [pc, #84]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009592:	4313      	orrs	r3, r2
 8009594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095a2:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	490d      	ldr	r1, [pc, #52]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095b6:	f000 f81d 	bl	80095f4 <HAL_RCC_GetSysClockFreq>
 80095ba:	4601      	mov	r1, r0
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <HAL_RCC_ClockConfig+0x1b8>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	091b      	lsrs	r3, r3, #4
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	4a09      	ldr	r2, [pc, #36]	; (80095ec <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	5cd3      	ldrb	r3, [r2, r3]
 80095ca:	fa21 f303 	lsr.w	r3, r1, r3
 80095ce:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <HAL_RCC_ClockConfig+0x1c0>)
 80095d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80095d2:	2000      	movs	r0, #0
 80095d4:	f7fc fcde 	bl	8005f94 <HAL_InitTick>

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40023c00 	.word	0x40023c00
 80095e8:	40023800 	.word	0x40023800
 80095ec:	0801c34c 	.word	0x0801c34c
 80095f0:	20000134 	.word	0x20000134

080095f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	2300      	movs	r3, #0
 8009604:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800960a:	4b50      	ldr	r3, [pc, #320]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 030c 	and.w	r3, r3, #12
 8009612:	2b04      	cmp	r3, #4
 8009614:	d007      	beq.n	8009626 <HAL_RCC_GetSysClockFreq+0x32>
 8009616:	2b08      	cmp	r3, #8
 8009618:	d008      	beq.n	800962c <HAL_RCC_GetSysClockFreq+0x38>
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 808d 	bne.w	800973a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009620:	4b4b      	ldr	r3, [pc, #300]	; (8009750 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009622:	60bb      	str	r3, [r7, #8]
       break;
 8009624:	e08c      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009626:	4b4b      	ldr	r3, [pc, #300]	; (8009754 <HAL_RCC_GetSysClockFreq+0x160>)
 8009628:	60bb      	str	r3, [r7, #8]
      break;
 800962a:	e089      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800962c:	4b47      	ldr	r3, [pc, #284]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009634:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009636:	4b45      	ldr	r3, [pc, #276]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d023      	beq.n	800968a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009642:	4b42      	ldr	r3, [pc, #264]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	099b      	lsrs	r3, r3, #6
 8009648:	f04f 0400 	mov.w	r4, #0
 800964c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	ea03 0501 	and.w	r5, r3, r1
 8009658:	ea04 0602 	and.w	r6, r4, r2
 800965c:	4a3d      	ldr	r2, [pc, #244]	; (8009754 <HAL_RCC_GetSysClockFreq+0x160>)
 800965e:	fb02 f106 	mul.w	r1, r2, r6
 8009662:	2200      	movs	r2, #0
 8009664:	fb02 f205 	mul.w	r2, r2, r5
 8009668:	440a      	add	r2, r1
 800966a:	493a      	ldr	r1, [pc, #232]	; (8009754 <HAL_RCC_GetSysClockFreq+0x160>)
 800966c:	fba5 0101 	umull	r0, r1, r5, r1
 8009670:	1853      	adds	r3, r2, r1
 8009672:	4619      	mov	r1, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f04f 0400 	mov.w	r4, #0
 800967a:	461a      	mov	r2, r3
 800967c:	4623      	mov	r3, r4
 800967e:	f7f7 fb63 	bl	8000d48 <__aeabi_uldivmod>
 8009682:	4603      	mov	r3, r0
 8009684:	460c      	mov	r4, r1
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	e049      	b.n	800971e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800968a:	4b30      	ldr	r3, [pc, #192]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	099b      	lsrs	r3, r3, #6
 8009690:	f04f 0400 	mov.w	r4, #0
 8009694:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	ea03 0501 	and.w	r5, r3, r1
 80096a0:	ea04 0602 	and.w	r6, r4, r2
 80096a4:	4629      	mov	r1, r5
 80096a6:	4632      	mov	r2, r6
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	0154      	lsls	r4, r2, #5
 80096b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80096b6:	014b      	lsls	r3, r1, #5
 80096b8:	4619      	mov	r1, r3
 80096ba:	4622      	mov	r2, r4
 80096bc:	1b49      	subs	r1, r1, r5
 80096be:	eb62 0206 	sbc.w	r2, r2, r6
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	f04f 0400 	mov.w	r4, #0
 80096ca:	0194      	lsls	r4, r2, #6
 80096cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80096d0:	018b      	lsls	r3, r1, #6
 80096d2:	1a5b      	subs	r3, r3, r1
 80096d4:	eb64 0402 	sbc.w	r4, r4, r2
 80096d8:	f04f 0100 	mov.w	r1, #0
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	00e2      	lsls	r2, r4, #3
 80096e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80096e6:	00d9      	lsls	r1, r3, #3
 80096e8:	460b      	mov	r3, r1
 80096ea:	4614      	mov	r4, r2
 80096ec:	195b      	adds	r3, r3, r5
 80096ee:	eb44 0406 	adc.w	r4, r4, r6
 80096f2:	f04f 0100 	mov.w	r1, #0
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	02a2      	lsls	r2, r4, #10
 80096fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009700:	0299      	lsls	r1, r3, #10
 8009702:	460b      	mov	r3, r1
 8009704:	4614      	mov	r4, r2
 8009706:	4618      	mov	r0, r3
 8009708:	4621      	mov	r1, r4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f04f 0400 	mov.w	r4, #0
 8009710:	461a      	mov	r2, r3
 8009712:	4623      	mov	r3, r4
 8009714:	f7f7 fb18 	bl	8000d48 <__aeabi_uldivmod>
 8009718:	4603      	mov	r3, r0
 800971a:	460c      	mov	r4, r1
 800971c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800971e:	4b0b      	ldr	r3, [pc, #44]	; (800974c <HAL_RCC_GetSysClockFreq+0x158>)
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	f003 0303 	and.w	r3, r3, #3
 8009728:	3301      	adds	r3, #1
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	fbb2 f3f3 	udiv	r3, r2, r3
 8009736:	60bb      	str	r3, [r7, #8]
      break;
 8009738:	e002      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <HAL_RCC_GetSysClockFreq+0x15c>)
 800973c:	60bb      	str	r3, [r7, #8]
      break;
 800973e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009740:	68bb      	ldr	r3, [r7, #8]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974a:	bf00      	nop
 800974c:	40023800 	.word	0x40023800
 8009750:	00f42400 	.word	0x00f42400
 8009754:	00b71b00 	.word	0x00b71b00

08009758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800975c:	4b03      	ldr	r3, [pc, #12]	; (800976c <HAL_RCC_GetHCLKFreq+0x14>)
 800975e:	681b      	ldr	r3, [r3, #0]
}
 8009760:	4618      	mov	r0, r3
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000134 	.word	0x20000134

08009770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009774:	f7ff fff0 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 8009778:	4601      	mov	r1, r0
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	0a9b      	lsrs	r3, r3, #10
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	4a03      	ldr	r2, [pc, #12]	; (8009794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009786:	5cd3      	ldrb	r3, [r2, r3]
 8009788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800978c:	4618      	mov	r0, r3
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40023800 	.word	0x40023800
 8009794:	0801c35c 	.word	0x0801c35c

08009798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800979c:	f7ff ffdc 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 80097a0:	4601      	mov	r1, r0
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	0b5b      	lsrs	r3, r3, #13
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	4a03      	ldr	r2, [pc, #12]	; (80097bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097ae:	5cd3      	ldrb	r3, [r2, r3]
 80097b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	40023800 	.word	0x40023800
 80097bc:	0801c35c 	.word	0x0801c35c

080097c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d105      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d035      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80097e8:	4b62      	ldr	r3, [pc, #392]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097ee:	f7fc fc15 	bl	800601c <HAL_GetTick>
 80097f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097f4:	e008      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097f6:	f7fc fc11 	bl	800601c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d901      	bls.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e0b0      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009808:	4b5b      	ldr	r3, [pc, #364]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1f0      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	019a      	lsls	r2, r3, #6
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	071b      	lsls	r3, r3, #28
 8009820:	4955      	ldr	r1, [pc, #340]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009822:	4313      	orrs	r3, r2
 8009824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009828:	4b52      	ldr	r3, [pc, #328]	; (8009974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800982a:	2201      	movs	r2, #1
 800982c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800982e:	f7fc fbf5 	bl	800601c <HAL_GetTick>
 8009832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009834:	e008      	b.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009836:	f7fc fbf1 	bl	800601c <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d901      	bls.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e090      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009848:	4b4b      	ldr	r3, [pc, #300]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0f0      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8083 	beq.w	8009968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	4b44      	ldr	r3, [pc, #272]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	4a43      	ldr	r2, [pc, #268]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800986c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009870:	6413      	str	r3, [r2, #64]	; 0x40
 8009872:	4b41      	ldr	r3, [pc, #260]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800987e:	4b3f      	ldr	r3, [pc, #252]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a3e      	ldr	r2, [pc, #248]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009888:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800988a:	f7fc fbc7 	bl	800601c <HAL_GetTick>
 800988e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009890:	e008      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009892:	f7fc fbc3 	bl	800601c <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d901      	bls.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e062      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80098a4:	4b35      	ldr	r3, [pc, #212]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0f0      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80098b0:	4b31      	ldr	r3, [pc, #196]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d02f      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d028      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098ce:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098d8:	4b29      	ldr	r3, [pc, #164]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098de:	4b28      	ldr	r3, [pc, #160]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80098e4:	4a24      	ldr	r2, [pc, #144]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80098ea:	4b23      	ldr	r3, [pc, #140]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d114      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80098f6:	f7fc fb91 	bl	800601c <HAL_GetTick>
 80098fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098fc:	e00a      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098fe:	f7fc fb8d 	bl	800601c <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	f241 3288 	movw	r2, #5000	; 0x1388
 800990c:	4293      	cmp	r3, r2
 800990e:	d901      	bls.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e02a      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009914:	4b18      	ldr	r3, [pc, #96]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0ee      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800992c:	d10d      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800992e:	4b12      	ldr	r3, [pc, #72]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800993e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009942:	490d      	ldr	r1, [pc, #52]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009944:	4313      	orrs	r3, r2
 8009946:	608b      	str	r3, [r1, #8]
 8009948:	e005      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800994a:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009950:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009954:	6093      	str	r3, [r2, #8]
 8009956:	4b08      	ldr	r3, [pc, #32]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009962:	4905      	ldr	r1, [pc, #20]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009964:	4313      	orrs	r3, r2
 8009966:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	42470068 	.word	0x42470068
 8009978:	40023800 	.word	0x40023800
 800997c:	40007000 	.word	0x40007000
 8009980:	42470e40 	.word	0x42470e40

08009984 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e083      	b.n	8009a9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7f5b      	ldrb	r3, [r3, #29]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f00b fbb6 	bl	8015118 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	22ca      	movs	r2, #202	; 0xca
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2253      	movs	r2, #83	; 0x53
 80099c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f944 	bl	8009c50 <RTC_EnterInitMode>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	22ff      	movs	r2, #255	; 0xff
 80099d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2204      	movs	r2, #4
 80099da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e05e      	b.n	8009a9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6899      	ldr	r1, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68d2      	ldr	r2, [r2, #12]
 8009a1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6919      	ldr	r1, [r3, #16]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	041a      	lsls	r2, r3, #16
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10e      	bne.n	8009a6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f8d6 	bl	8009c00 <HAL_RTC_WaitForSynchro>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d008      	beq.n	8009a6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	22ff      	movs	r2, #255	; 0xff
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2204      	movs	r2, #4
 8009a66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e018      	b.n	8009a9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
  }
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b086      	sub	sp, #24
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009adc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d11a      	bne.n	8009b58 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f8be 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f8b5 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	789b      	ldrb	r3, [r3, #2]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f8ac 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b086      	sub	sp, #24
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	0a1b      	lsrs	r3, r3, #8
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f003 031f 	and.w	r3, r3, #31
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	0b5b      	lsrs	r3, r3, #13
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d11a      	bne.n	8009bf6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	78db      	ldrb	r3, [r3, #3]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f86f 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	461a      	mov	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f866 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	461a      	mov	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	789b      	ldrb	r3, [r3, #2]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f85d 	bl	8009ca8 <RTC_Bcd2ToByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c1c:	f7fc f9fe 	bl	800601c <HAL_GetTick>
 8009c20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009c22:	e009      	b.n	8009c38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009c24:	f7fc f9fa 	bl	800601c <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c32:	d901      	bls.n	8009c38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e007      	b.n	8009c48 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0ee      	beq.n	8009c24 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d119      	bne.n	8009c9e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c74:	f7fc f9d2 	bl	800601c <HAL_GetTick>
 8009c78:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009c7a:	e009      	b.n	8009c90 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009c7c:	f7fc f9ce 	bl	800601c <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c8a:	d901      	bls.n	8009c90 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e007      	b.n	8009ca0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0ee      	beq.n	8009c7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	091b      	lsrs	r3, r3, #4
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	b2db      	uxtb	r3, r3
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e01d      	b.n	8009d32 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f00b fa1b 	bl	8015144 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2203      	movs	r2, #3
 8009d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f810 	bl	8009d3c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d3c:	b5b0      	push	{r4, r5, r7, lr}
 8009d3e:	b08e      	sub	sp, #56	; 0x38
 8009d40:	af04      	add	r7, sp, #16
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009d54:	2300      	movs	r3, #0
 8009d56:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009d5c:	2376      	movs	r3, #118	; 0x76
 8009d5e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681d      	ldr	r5, [r3, #0]
 8009d64:	466c      	mov	r4, sp
 8009d66:	f107 0318 	add.w	r3, r7, #24
 8009d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f003 f819 	bl	800cdb0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8009d7e:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <HAL_SD_InitCard+0xb4>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f003 f85a 	bl	800ce42 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009d8e:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <HAL_SD_InitCard+0xb4>)
 8009d90:	2201      	movs	r2, #1
 8009d92:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8009d94:	2002      	movs	r0, #2
 8009d96:	f7fc f94d 	bl	8006034 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fffe 	bl	800ad9c <SD_PowerON>
 8009da0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e013      	b.n	8009de8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 ff22 	bl	800ac0a <SD_InitCard>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3728      	adds	r7, #40	; 0x28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bdb0      	pop	{r4, r5, r7, pc}
 8009df0:	422580a0 	.word	0x422580a0

08009df4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08c      	sub	sp, #48	; 0x30
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d107      	bne.n	8009e1c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e0ad      	b.n	8009f78 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	f040 80a6 	bne.w	8009f76 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	441a      	add	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d907      	bls.n	8009e4e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e094      	b.n	8009f78 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2203      	movs	r2, #3
 8009e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	6812      	ldr	r2, [r2, #0]
 8009e68:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009e6c:	f043 0302 	orr.w	r3, r3, #2
 8009e70:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e76:	4a42      	ldr	r2, [pc, #264]	; (8009f80 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009e78:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7e:	4a41      	ldr	r2, [pc, #260]	; (8009f84 <HAL_SD_ReadBlocks_DMA+0x190>)
 8009e80:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	2200      	movs	r2, #0
 8009e88:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3380      	adds	r3, #128	; 0x80
 8009e94:	4619      	mov	r1, r3
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	025b      	lsls	r3, r3, #9
 8009e9c:	089b      	lsrs	r3, r3, #2
 8009e9e:	f7fc faab 	bl	80063f8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009ea2:	4b39      	ldr	r3, [pc, #228]	; (8009f88 <HAL_SD_ReadBlocks_DMA+0x194>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d002      	beq.n	8009eb6 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	025b      	lsls	r3, r3, #9
 8009eb4:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	025b      	lsls	r3, r3, #9
 8009ec0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009ec2:	2390      	movs	r3, #144	; 0x90
 8009ec4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f107 0214 	add.w	r2, r7, #20
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f003 f818 	bl	800cf12 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eea:	4618      	mov	r0, r3
 8009eec:	f003 f83d 	bl	800cf6a <SDMMC_CmdBlockLength>
 8009ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d010      	beq.n	8009f1a <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e02e      	b.n	8009f78 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d90a      	bls.n	8009f36 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2282      	movs	r2, #130	; 0x82
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f003 f864 	bl	800cffa <SDMMC_CmdReadMultiBlock>
 8009f32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009f34:	e009      	b.n	8009f4a <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2281      	movs	r2, #129	; 0x81
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f003 f835 	bl	800cfb2 <SDMMC_CmdReadSingleBlock>
 8009f48:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d010      	beq.n	8009f72 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	431a      	orrs	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e002      	b.n	8009f78 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e000      	b.n	8009f78 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8009f76:	2302      	movs	r3, #2
  }
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3730      	adds	r7, #48	; 0x30
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	0800aa1b 	.word	0x0800aa1b
 8009f84:	0800aa89 	.word	0x0800aa89
 8009f88:	4225858c 	.word	0x4225858c

08009f8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e0ad      	b.n	800a110 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	f040 80a6 	bne.w	800a10e <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	441a      	add	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d907      	bls.n	8009fe6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e094      	b.n	800a110 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2203      	movs	r2, #3
 8009fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a004:	f043 0302 	orr.w	r3, r3, #2
 800a008:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	4a42      	ldr	r2, [pc, #264]	; (800a118 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	4a41      	ldr	r2, [pc, #260]	; (800a11c <HAL_SD_WriteBlocks_DMA+0x190>)
 800a018:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	2200      	movs	r2, #0
 800a020:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a026:	2b01      	cmp	r3, #1
 800a028:	d002      	beq.n	800a030 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	025b      	lsls	r3, r3, #9
 800a02e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 ff96 	bl	800cf6a <SDMMC_CmdBlockLength>
 800a03e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d010      	beq.n	800a068 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a04e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	431a      	orrs	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e053      	b.n	800a110 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d90a      	bls.n	800a084 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	22a0      	movs	r2, #160	; 0xa0
 800a072:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f003 f805 	bl	800d08a <SDMMC_CmdWriteMultiBlock>
 800a080:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a082:	e009      	b.n	800a098 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2290      	movs	r2, #144	; 0x90
 800a088:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	f002 ffd6 	bl	800d042 <SDMMC_CmdWriteSingleBlock>
 800a096:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d010      	beq.n	800a0c0 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e027      	b.n	800a110 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a0c0:	4b17      	ldr	r3, [pc, #92]	; (800a120 <HAL_SD_WriteBlocks_DMA+0x194>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3380      	adds	r3, #128	; 0x80
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	025b      	lsls	r3, r3, #9
 800a0d8:	089b      	lsrs	r3, r3, #2
 800a0da:	f7fc f98d 	bl	80063f8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	025b      	lsls	r3, r3, #9
 800a0e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0ea:	2390      	movs	r3, #144	; 0x90
 800a0ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f107 0214 	add.w	r2, r7, #20
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f002 ff04 	bl	800cf12 <SDIO_ConfigData>
    
    return HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	e000      	b.n	800a110 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a10e:	2302      	movs	r3, #2
  }
}
 800a110:	4618      	mov	r0, r3
 800a112:	3730      	adds	r7, #48	; 0x30
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	0800a9f1 	.word	0x0800a9f1
 800a11c:	0800aa89 	.word	0x0800aa89
 800a120:	4225858c 	.word	0x4225858c

0800a124 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 808d 	beq.w	800a25a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a148:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a158:	f023 0302 	bic.w	r3, r3, #2
 800a15c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	f003 0308 	and.w	r3, r3, #8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d03a      	beq.n	800a1e0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <HAL_SD_IRQHandler+0x5e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	f003 0320 	and.w	r3, r3, #32
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4618      	mov	r0, r3
 800a188:	f002 ffa4 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800a18c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d008      	beq.n	800a1a6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f925 	bl	800a3f0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <HAL_SD_IRQHandler+0xac>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f008 fda7 	bl	8012d24 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800a1d6:	e103      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f008 fd99 	bl	8012d10 <HAL_SD_TxCpltCallback>
}
 800a1de:	e0ff      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80f9 	beq.w	800a3e0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d011      	beq.n	800a21e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f002 ff68 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800a204:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d008      	beq.n	800a21e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f8e9 	bl	800a3f0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 80da 	bne.w	800a3e0 <HAL_SD_IRQHandler+0x2bc>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	f040 80d3 	bne.w	800a3e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0208 	bic.w	r2, r2, #8
 800a248:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f008 fd5c 	bl	8012d10 <HAL_SD_TxCpltCallback>
}
 800a258:	e0c2      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 ffef 	bl	800b256 <SD_Write_IT>
}
 800a278:	e0b2      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d008      	beq.n	800a29a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 ffb7 	bl	800b206 <SD_Read_IT>
}
 800a298:	e0a2      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a0:	f240 233a 	movw	r3, #570	; 0x23a
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 809a 	beq.w	800a3e0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	f043 0202 	orr.w	r2, r3, #2
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	f043 0208 	orr.w	r2, r3, #8
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d005      	beq.n	800a2fa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	f043 0220 	orr.w	r2, r3, #32
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a300:	f003 0310 	and.w	r3, r3, #16
 800a304:	2b00      	cmp	r3, #0
 800a306:	d005      	beq.n	800a314 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	f043 0210 	orr.w	r2, r3, #16
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	f043 0208 	orr.w	r2, r3, #8
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a346:	f023 0302 	bic.w	r3, r3, #2
 800a34a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b00      	cmp	r3, #0
 800a356:	d036      	beq.n	800a3c6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d011      	beq.n	800a384 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	4a20      	ldr	r2, [pc, #128]	; (800a3e8 <HAL_SD_IRQHandler+0x2c4>)
 800a366:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fc f8a3 	bl	80064b8 <HAL_DMA_Abort_IT>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d033      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fbc8 	bl	800ab12 <SD_DMATxAbort>
}
 800a382:	e02d      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d011      	beq.n	800a3b0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a390:	4a16      	ldr	r2, [pc, #88]	; (800a3ec <HAL_SD_IRQHandler+0x2c8>)
 800a392:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fc f88d 	bl	80064b8 <HAL_DMA_Abort_IT>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01d      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 fbf0 	bl	800ab8e <SD_DMARxAbort>
}
 800a3ae:	e017      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f008 fc9c 	bl	8012cfc <HAL_SD_AbortCallback>
}
 800a3c4:	e00c      	b.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f808 	bl	800a3f0 <HAL_SD_ErrorCallback>
}
 800a3e0:	bf00      	nop
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	0800ab13 	.word	0x0800ab13
 800a3ec:	0800ab8f 	.word	0x0800ab8f

0800a3f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a416:	0e1b      	lsrs	r3, r3, #24
 800a418:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	099b      	lsrs	r3, r3, #6
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	b2da      	uxtb	r2, r3
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f003 030f 	and.w	r3, r3, #15
 800a434:	b2da      	uxtb	r2, r3
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	b2da      	uxtb	r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44c:	0c1b      	lsrs	r3, r3, #16
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	b2da      	uxtb	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45e:	0a1b      	lsrs	r3, r3, #8
 800a460:	b2db      	uxtb	r3, r3
 800a462:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a470:	b2db      	uxtb	r3, r3
 800a472:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	b2da      	uxtb	r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a480:	0e1b      	lsrs	r3, r3, #24
 800a482:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	b29b      	uxth	r3, r3
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a494:	0c1b      	lsrs	r3, r3, #16
 800a496:	b2db      	uxtb	r3, r3
 800a498:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	88db      	ldrh	r3, [r3, #6]
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	091b      	lsrs	r3, r3, #4
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	09db      	lsrs	r3, r3, #7
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	099b      	lsrs	r3, r3, #6
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	095b      	lsrs	r3, r3, #5
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	091b      	lsrs	r3, r3, #4
 800a500:	b2db      	uxtb	r3, r3
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	b2da      	uxtb	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2200      	movs	r2, #0
 800a510:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a516:	2b00      	cmp	r3, #0
 800a518:	f040 8087 	bne.w	800a62a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	029b      	lsls	r3, r3, #10
 800a520:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	691a      	ldr	r2, [r3, #16]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	431a      	orrs	r2, r3
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a542:	0e1b      	lsrs	r3, r3, #24
 800a544:	b2db      	uxtb	r3, r3
 800a546:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	099b      	lsrs	r3, r3, #6
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	431a      	orrs	r2, r3
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	08db      	lsrs	r3, r3, #3
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	b2da      	uxtb	r2, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	b2da      	uxtb	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57c:	0c1b      	lsrs	r3, r3, #16
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0307 	and.w	r3, r3, #7
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	089b      	lsrs	r3, r3, #2
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f003 0306 	and.w	r3, r3, #6
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	7e1b      	ldrb	r3, [r3, #24]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	09db      	lsrs	r3, r3, #7
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	7e1b      	ldrb	r3, [r3, #24]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	3302      	adds	r3, #2
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a5f4:	fb02 f203 	mul.w	r2, r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	7a1b      	ldrb	r3, [r3, #8]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	461a      	mov	r2, r3
 800a604:	2301      	movs	r3, #1
 800a606:	fa03 f202 	lsl.w	r2, r3, r2
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a616:	0a52      	lsrs	r2, r2, #9
 800a618:	fb02 f203 	mul.w	r2, r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a626:	661a      	str	r2, [r3, #96]	; 0x60
 800a628:	e04d      	b.n	800a6c6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d138      	bne.n	800a6a4 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a636:	b2db      	uxtb	r3, r3
 800a638:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	041b      	lsls	r3, r3, #16
 800a63e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64a:	0e1b      	lsrs	r3, r3, #24
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	691a      	ldr	r2, [r3, #16]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	021b      	lsls	r3, r3, #8
 800a658:	431a      	orrs	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a662:	0c1b      	lsrs	r3, r3, #16
 800a664:	b2db      	uxtb	r3, r3
 800a666:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	691a      	ldr	r2, [r3, #16]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	431a      	orrs	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	3301      	adds	r3, #1
 800a684:	029a      	lsls	r2, r3, #10
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	; 0x54
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a698:	659a      	str	r2, [r3, #88]	; 0x58
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	661a      	str	r2, [r3, #96]	; 0x60
 800a6a2:	e010      	b.n	800a6c6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a6ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e0c1      	b.n	800a84a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	099b      	lsrs	r3, r3, #6
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	7e9b      	ldrb	r3, [r3, #26]
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	09db      	lsrs	r3, r3, #7
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	b2db      	uxtb	r3, r3
 800a702:	4313      	orrs	r3, r2
 800a704:	b2da      	uxtb	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a712:	b2da      	uxtb	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71c:	0e1b      	lsrs	r3, r3, #24
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	09db      	lsrs	r3, r3, #7
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 030c 	and.w	r3, r3, #12
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a768:	0c1b      	lsrs	r3, r3, #16
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	7fdb      	ldrb	r3, [r3, #31]
 800a772:	b2da      	uxtb	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	4313      	orrs	r3, r2
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b6:	0a1b      	lsrs	r3, r3, #8
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	09db      	lsrs	r3, r3, #7
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	099b      	lsrs	r3, r3, #6
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	095b      	lsrs	r3, r3, #5
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	091b      	lsrs	r3, r3, #4
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	089b      	lsrs	r3, r3, #2
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	085b      	lsrs	r3, r3, #1
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a8ae:	b5b0      	push	{r4, r5, r7, lr}
 800a8b0:	b08e      	sub	sp, #56	; 0x38
 800a8b2:	af04      	add	r7, sp, #16
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2203      	movs	r2, #3
 800a8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d02e      	beq.n	800a92a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d2:	d106      	bne.n	800a8e2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
 800a8e0:	e029      	b.n	800a936 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8e8:	d10a      	bne.n	800a900 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fb28 	bl	800af40 <SD_WideBus_Enable>
 800a8f0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8fe:	e01a      	b.n	800a936 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb67 	bl	800afda <SD_WideBus_Disable>
 800a90c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	431a      	orrs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	639a      	str	r2, [r3, #56]	; 0x38
 800a91a:	e00c      	b.n	800a936 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	639a      	str	r2, [r3, #56]	; 0x38
 800a928:	e005      	b.n	800a936 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e024      	b.n	800a99e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681d      	ldr	r5, [r3, #0]
 800a97a:	466c      	mov	r4, sp
 800a97c:	f107 0318 	add.w	r3, r7, #24
 800a980:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a98e:	4628      	mov	r0, r5
 800a990:	f002 fa0e 	bl	800cdb0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3728      	adds	r7, #40	; 0x28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bdb0      	pop	{r4, r5, r7, pc}

0800a9a6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800a9ae:	2304      	movs	r3, #4
 800a9b0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa93 	bl	800aeec <SD_SendStatus>
 800a9c6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d005      	beq.n	800a9da <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	0a5b      	lsrs	r3, r3, #9
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fc:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	2b82      	cmp	r3, #130	; 0x82
 800aa32:	d111      	bne.n	800aa58 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f002 fb4b 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800aa3e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fccc 	bl	800a3f0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0208 	bic.w	r2, r2, #8
 800aa66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f008 f952 	bl	8012d24 <HAL_SD_RxCpltCallback>
#endif
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d004      	beq.n	800aaaa <SD_DMAError+0x22>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d12c      	bne.n	800ab04 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aac2:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff ff68 	bl	800a9a6 <HAL_SD_GetCardState>
 800aad6:	4603      	mov	r3, r0
 800aad8:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	2b06      	cmp	r3, #6
 800aade:	d002      	beq.n	800aae6 <SD_DMAError+0x5e>
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	d10a      	bne.n	800aafc <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f002 faf2 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff fc73 	bl	800a3f0 <HAL_SD_ErrorCallback>
#endif
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d127      	bne.n	800ab86 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff ff35 	bl	800a9a6 <HAL_SD_GetCardState>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab4e:	7afb      	ldrb	r3, [r7, #11]
 800ab50:	2b06      	cmp	r3, #6
 800ab52:	d002      	beq.n	800ab5a <SD_DMATxAbort+0x48>
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d115      	bne.n	800ab86 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 fab8 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800ab64:	4602      	mov	r2, r0
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f008 f8bf 	bl	8012cfc <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ab7e:	e002      	b.n	800ab86 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fc35 	bl	800a3f0 <HAL_SD_ErrorCallback>
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d127      	bne.n	800ac02 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff fef7 	bl	800a9a6 <HAL_SD_GetCardState>
 800abb8:	4603      	mov	r3, r0
 800abba:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	2b06      	cmp	r3, #6
 800abce:	d002      	beq.n	800abd6 <SD_DMARxAbort+0x48>
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d115      	bne.n	800ac02 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f002 fa7a 	bl	800d0d4 <SDMMC_CmdStopTransfer>
 800abe0:	4602      	mov	r2, r0
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	431a      	orrs	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f008 f881 	bl	8012cfc <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800abfa:	e002      	b.n	800ac02 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7ff fbf7 	bl	800a3f0 <HAL_SD_ErrorCallback>
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac0a:	b5b0      	push	{r4, r5, r7, lr}
 800ac0c:	b094      	sub	sp, #80	; 0x50
 800ac0e:	af04      	add	r7, sp, #16
 800ac10:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800ac16:	2301      	movs	r3, #1
 800ac18:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f002 f91d 	bl	800ce5e <SDIO_GetPowerState>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d102      	bne.n	800ac30 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac2e:	e0b1      	b.n	800ad94 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d02f      	beq.n	800ac98 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fb63 	bl	800d308 <SDMMC_CmdSendCID>
 800ac42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <SD_InitCard+0x44>
    {
      return errorstate;
 800ac4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4c:	e0a2      	b.n	800ad94 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f002 f947 	bl	800cee8 <SDIO_GetResponse>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2104      	movs	r1, #4
 800ac66:	4618      	mov	r0, r3
 800ac68:	f002 f93e 	bl	800cee8 <SDIO_GetResponse>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2108      	movs	r1, #8
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 f935 	bl	800cee8 <SDIO_GetResponse>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	210c      	movs	r1, #12
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f002 f92c 	bl	800cee8 <SDIO_GetResponse>
 800ac90:	4602      	mov	r2, r0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9c:	2b03      	cmp	r3, #3
 800ac9e:	d00d      	beq.n	800acbc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f107 020e 	add.w	r2, r7, #14
 800aca8:	4611      	mov	r1, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	f002 fb6d 	bl	800d38a <SDMMC_CmdSetRelAdd>
 800acb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <SD_InitCard+0xb2>
    {
      return errorstate;
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	e06b      	b.n	800ad94 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d036      	beq.n	800ad32 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acc4:	89fb      	ldrh	r3, [r7, #14]
 800acc6:	461a      	mov	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd4:	041b      	lsls	r3, r3, #16
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f002 fb35 	bl	800d348 <SDMMC_CmdSendCSD>
 800acde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <SD_InitCard+0xe0>
    {
      return errorstate;
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	e054      	b.n	800ad94 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2100      	movs	r1, #0
 800acf0:	4618      	mov	r0, r3
 800acf2:	f002 f8f9 	bl	800cee8 <SDIO_GetResponse>
 800acf6:	4602      	mov	r2, r0
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2104      	movs	r1, #4
 800ad02:	4618      	mov	r0, r3
 800ad04:	f002 f8f0 	bl	800cee8 <SDIO_GetResponse>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2108      	movs	r1, #8
 800ad14:	4618      	mov	r0, r3
 800ad16:	f002 f8e7 	bl	800cee8 <SDIO_GetResponse>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	210c      	movs	r1, #12
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 f8de 	bl	800cee8 <SDIO_GetResponse>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2104      	movs	r1, #4
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f002 f8d5 	bl	800cee8 <SDIO_GetResponse>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	0d1a      	lsrs	r2, r3, #20
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800ad46:	f107 0310 	add.w	r3, r7, #16
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fb59 	bl	800a404 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6819      	ldr	r1, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad5a:	041b      	lsls	r3, r3, #16
 800ad5c:	f04f 0400 	mov.w	r4, #0
 800ad60:	461a      	mov	r2, r3
 800ad62:	4623      	mov	r3, r4
 800ad64:	4608      	mov	r0, r1
 800ad66:	f002 f9d9 	bl	800d11c <SDMMC_CmdSelDesel>
 800ad6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <SD_InitCard+0x16c>
  {
    return errorstate;
 800ad72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad74:	e00e      	b.n	800ad94 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681d      	ldr	r5, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	466c      	mov	r4, sp
 800ad7e:	f103 0210 	add.w	r2, r3, #16
 800ad82:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad88:	3304      	adds	r3, #4
 800ad8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f002 f80f 	bl	800cdb0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3740      	adds	r7, #64	; 0x40
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bdb0      	pop	{r4, r5, r7, pc}

0800ad9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	2300      	movs	r3, #0
 800adae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4618      	mov	r0, r3
 800adba:	f002 f9d4 	bl	800d166 <SDMMC_CmdGoIdleState>
 800adbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <SD_PowerON+0x2e>
  {
    return errorstate;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	e08c      	b.n	800aee4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4618      	mov	r0, r3
 800add0:	f002 f9e9 	bl	800d1a6 <SDMMC_CmdOperCond>
 800add4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d03d      	beq.n	800ae58 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800ade2:	e032      	b.n	800ae4a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	60ba      	str	r2, [r7, #8]
 800adea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adee:	4293      	cmp	r3, r2
 800adf0:	d102      	bne.n	800adf8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800adf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adf6:	e075      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2100      	movs	r1, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f002 f9f2 	bl	800d1e8 <SDMMC_CmdAppCommand>
 800ae04:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae10:	e068      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2100      	movs	r1, #0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 fa09 	bl	800d230 <SDMMC_CmdAppOperCommand>
 800ae1e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae2a:	e05b      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f002 f858 	bl	800cee8 <SDIO_GetResponse>
 800ae38:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	0fdb      	lsrs	r3, r3, #31
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <SD_PowerON+0xaa>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <SD_PowerON+0xac>
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0c9      	beq.n	800ade4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	645a      	str	r2, [r3, #68]	; 0x44
 800ae56:	e044      	b.n	800aee2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800ae5e:	e031      	b.n	800aec4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	60ba      	str	r2, [r7, #8]
 800ae66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d102      	bne.n	800ae74 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ae6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae72:	e037      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f002 f9b4 	bl	800d1e8 <SDMMC_CmdAppCommand>
 800ae80:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <SD_PowerON+0xf0>
      {
        return errorstate;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	e02b      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ae94:	4618      	mov	r0, r3
 800ae96:	f002 f9cb 	bl	800d230 <SDMMC_CmdAppOperCommand>
 800ae9a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <SD_PowerON+0x10a>
      {
        return errorstate;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	e01e      	b.n	800aee4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f002 f81b 	bl	800cee8 <SDIO_GetResponse>
 800aeb2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	0fdb      	lsrs	r3, r3, #31
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <SD_PowerON+0x124>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e000      	b.n	800aec2 <SD_PowerON+0x126>
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0ca      	beq.n	800ae60 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	645a      	str	r2, [r3, #68]	; 0x44
 800aeda:	e002      	b.n	800aee2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800af00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af04:	e018      	b.n	800af38 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0e:	041b      	lsls	r3, r3, #16
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f002 fa5c 	bl	800d3d0 <SDMMC_CmdSendStatus>
 800af18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <SD_SendStatus+0x38>
  {
    return errorstate;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	e009      	b.n	800af38 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 ffdc 	bl	800cee8 <SDIO_GetResponse>
 800af30:	4602      	mov	r2, r0
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	2300      	movs	r3, #0
 800af4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2100      	movs	r1, #0
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 ffc4 	bl	800cee8 <SDIO_GetResponse>
 800af60:	4603      	mov	r3, r0
 800af62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af6a:	d102      	bne.n	800af72 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af70:	e02f      	b.n	800afd2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af72:	f107 030c 	add.w	r3, r7, #12
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f87b 	bl	800b074 <SD_FindSCR>
 800af7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	e023      	b.n	800afd2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01c      	beq.n	800afce <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9c:	041b      	lsls	r3, r3, #16
 800af9e:	4619      	mov	r1, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	f002 f921 	bl	800d1e8 <SDMMC_CmdAppCommand>
 800afa6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	e00f      	b.n	800afd2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2102      	movs	r1, #2
 800afb8:	4618      	mov	r0, r3
 800afba:	f002 f95e 	bl	800d27a <SDMMC_CmdBusWidth>
 800afbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	e003      	b.n	800afd2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800afca:	2300      	movs	r3, #0
 800afcc:	e001      	b.n	800afd2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	2300      	movs	r3, #0
 800afe8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2100      	movs	r1, #0
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 ff77 	bl	800cee8 <SDIO_GetResponse>
 800affa:	4603      	mov	r3, r0
 800affc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b004:	d102      	bne.n	800b00c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b00a:	e02f      	b.n	800b06c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f82e 	bl	800b074 <SD_FindSCR>
 800b018:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	e023      	b.n	800b06c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d01c      	beq.n	800b068 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b036:	041b      	lsls	r3, r3, #16
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f002 f8d4 	bl	800d1e8 <SDMMC_CmdAppCommand>
 800b040:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	e00f      	b.n	800b06c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f002 f911 	bl	800d27a <SDMMC_CmdBusWidth>
 800b058:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	e003      	b.n	800b06c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b064:	2300      	movs	r3, #0
 800b066:	e001      	b.n	800b06c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b068:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b08f      	sub	sp, #60	; 0x3c
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b082:	f7fa ffcb 	bl	800601c <HAL_GetTick>
 800b086:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b08c:	2300      	movs	r3, #0
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	2300      	movs	r3, #0
 800b092:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2108      	movs	r1, #8
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 ff65 	bl	800cf6a <SDMMC_CmdBlockLength>
 800b0a0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <SD_FindSCR+0x38>
  {
    return errorstate;
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	e0a8      	b.n	800b1fe <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0b4:	041b      	lsls	r3, r3, #16
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f002 f895 	bl	800d1e8 <SDMMC_CmdAppCommand>
 800b0be:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <SD_FindSCR+0x56>
  {
    return errorstate;
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	e099      	b.n	800b1fe <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ce:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800b0d0:	2308      	movs	r3, #8
 800b0d2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b0d4:	2330      	movs	r3, #48	; 0x30
 800b0d6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b0d8:	2302      	movs	r3, #2
 800b0da:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f107 0214 	add.w	r2, r7, #20
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 ff0f 	bl	800cf12 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 f8e2 	bl	800d2c2 <SDMMC_CmdSendSCR>
 800b0fe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	d022      	beq.n	800b14c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	e079      	b.n	800b1fe <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00e      	beq.n	800b136 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	f107 020c 	add.w	r2, r7, #12
 800b124:	18d4      	adds	r4, r2, r3
 800b126:	4608      	mov	r0, r1
 800b128:	f001 fe6d 	bl	800ce06 <SDIO_ReadFIFO>
 800b12c:	4603      	mov	r3, r0
 800b12e:	6023      	str	r3, [r4, #0]
      index++;
 800b130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b132:	3301      	adds	r3, #1
 800b134:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b136:	f7fa ff71 	bl	800601c <HAL_GetTick>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d102      	bne.n	800b14c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b146:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b14a:	e058      	b.n	800b1fe <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b152:	f240 432a 	movw	r3, #1066	; 0x42a
 800b156:	4013      	ands	r3, r2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0d6      	beq.n	800b10a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b162:	f003 0308 	and.w	r3, r3, #8
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2208      	movs	r2, #8
 800b170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b172:	2308      	movs	r3, #8
 800b174:	e043      	b.n	800b1fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2202      	movs	r2, #2
 800b18a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b18c:	2302      	movs	r3, #2
 800b18e:	e036      	b.n	800b1fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	e029      	b.n	800b1fe <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	061a      	lsls	r2, r3, #24
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1c0:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	0a1b      	lsrs	r3, r3, #8
 800b1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b1ca:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b1d6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b1d8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	061a      	lsls	r2, r3, #24
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1e6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b1f0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	0e1b      	lsrs	r3, r3, #24
 800b1f6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	373c      	adds	r7, #60	; 0x3c
 800b202:	46bd      	mov	sp, r7
 800b204:	bd90      	pop	{r4, r7, pc}

0800b206 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b216:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e00d      	b.n	800b23a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6819      	ldr	r1, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	18d4      	adds	r4, r2, r3
 800b22a:	4608      	mov	r0, r1
 800b22c:	f001 fdeb 	bl	800ce06 <SDIO_ReadFIFO>
 800b230:	4603      	mov	r3, r0
 800b232:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3301      	adds	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b07      	cmp	r3, #7
 800b23e:	d9ee      	bls.n	800b21e <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b244:	f103 0220 	add.w	r2, r3, #32
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	bd90      	pop	{r4, r7, pc}

0800b256 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e00b      	b.n	800b286 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	4619      	mov	r1, r3
 800b27c:	f001 fdd0 	bl	800ce20 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b07      	cmp	r3, #7
 800b28a:	d9f0      	bls.n	800b26e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	f103 0220 	add.w	r2, r3, #32
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b082      	sub	sp, #8
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e056      	b.n	800b362 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d106      	bne.n	800b2d4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f00a f838 	bl	8015344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b310:	431a      	orrs	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	ea42 0103 	orr.w	r1, r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	0c1b      	lsrs	r3, r3, #16
 800b332:	f003 0104 	and.w	r1, r3, #4
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69da      	ldr	r2, [r3, #28]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b088      	sub	sp, #32
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	603b      	str	r3, [r7, #0]
 800b376:	4613      	mov	r3, r2
 800b378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_SPI_Transmit+0x22>
 800b388:	2302      	movs	r3, #2
 800b38a:	e11e      	b.n	800b5ca <HAL_SPI_Transmit+0x260>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b394:	f7fa fe42 	bl	800601c <HAL_GetTick>
 800b398:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b39a:	88fb      	ldrh	r3, [r7, #6]
 800b39c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d002      	beq.n	800b3b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3ae:	e103      	b.n	800b5b8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <HAL_SPI_Transmit+0x52>
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b3c0:	e0fa      	b.n	800b5b8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2203      	movs	r2, #3
 800b3c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	88fa      	ldrh	r2, [r7, #6]
 800b3da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	88fa      	ldrh	r2, [r7, #6]
 800b3e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b408:	d107      	bne.n	800b41a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d007      	beq.n	800b438 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b440:	d14b      	bne.n	800b4da <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <HAL_SPI_Transmit+0xe6>
 800b44a:	8afb      	ldrh	r3, [r7, #22]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d13e      	bne.n	800b4ce <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	881a      	ldrh	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	1c9a      	adds	r2, r3, #2
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b474:	e02b      	b.n	800b4ce <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f003 0302 	and.w	r3, r3, #2
 800b480:	2b02      	cmp	r3, #2
 800b482:	d112      	bne.n	800b4aa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	881a      	ldrh	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	1c9a      	adds	r2, r3, #2
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800b4a8:	e011      	b.n	800b4ce <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4aa:	f7fa fdb7 	bl	800601c <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d803      	bhi.n	800b4c2 <HAL_SPI_Transmit+0x158>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c0:	d102      	bne.n	800b4c8 <HAL_SPI_Transmit+0x15e>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4cc:	e074      	b.n	800b5b8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1ce      	bne.n	800b476 <HAL_SPI_Transmit+0x10c>
 800b4d8:	e04c      	b.n	800b574 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SPI_Transmit+0x17e>
 800b4e2:	8afb      	ldrh	r3, [r7, #22]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d140      	bne.n	800b56a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	7812      	ldrb	r2, [r2, #0]
 800b4f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b50e:	e02c      	b.n	800b56a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d113      	bne.n	800b546 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	3b01      	subs	r3, #1
 800b53e:	b29a      	uxth	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	86da      	strh	r2, [r3, #54]	; 0x36
 800b544:	e011      	b.n	800b56a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b546:	f7fa fd69 	bl	800601c <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d803      	bhi.n	800b55e <HAL_SPI_Transmit+0x1f4>
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d102      	bne.n	800b564 <HAL_SPI_Transmit+0x1fa>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b568:	e026      	b.n	800b5b8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b56e:	b29b      	uxth	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1cd      	bne.n	800b510 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fa45 	bl	800ba08 <SPI_EndRxTxTransaction>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2220      	movs	r2, #32
 800b588:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b592:	2300      	movs	r3, #0
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	e000      	b.n	800b5b8 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b5b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b08c      	sub	sp, #48	; 0x30
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d101      	bne.n	800b5f8 <HAL_SPI_TransmitReceive+0x26>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	e18a      	b.n	800b90e <HAL_SPI_TransmitReceive+0x33c>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b600:	f7fa fd0c 	bl	800601c <HAL_GetTick>
 800b604:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b60c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b616:	887b      	ldrh	r3, [r7, #2]
 800b618:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b61a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d00f      	beq.n	800b642 <HAL_SPI_TransmitReceive+0x70>
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b628:	d107      	bne.n	800b63a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <HAL_SPI_TransmitReceive+0x68>
 800b632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b636:	2b04      	cmp	r3, #4
 800b638:	d003      	beq.n	800b642 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b63a:	2302      	movs	r3, #2
 800b63c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b640:	e15b      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d005      	beq.n	800b654 <HAL_SPI_TransmitReceive+0x82>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_SPI_TransmitReceive+0x82>
 800b64e:	887b      	ldrh	r3, [r7, #2]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d103      	bne.n	800b65c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b65a:	e14e      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b04      	cmp	r3, #4
 800b666:	d003      	beq.n	800b670 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2205      	movs	r2, #5
 800b66c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	887a      	ldrh	r2, [r7, #2]
 800b680:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	887a      	ldrh	r2, [r7, #2]
 800b686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	887a      	ldrh	r2, [r7, #2]
 800b692:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	887a      	ldrh	r2, [r7, #2]
 800b698:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b0:	2b40      	cmp	r3, #64	; 0x40
 800b6b2:	d007      	beq.n	800b6c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6cc:	d178      	bne.n	800b7c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <HAL_SPI_TransmitReceive+0x10a>
 800b6d6:	8b7b      	ldrh	r3, [r7, #26]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d166      	bne.n	800b7aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e0:	881a      	ldrh	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ec:	1c9a      	adds	r2, r3, #2
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b700:	e053      	b.n	800b7aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d11b      	bne.n	800b748 <HAL_SPI_TransmitReceive+0x176>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b714:	b29b      	uxth	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d016      	beq.n	800b748 <HAL_SPI_TransmitReceive+0x176>
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d113      	bne.n	800b748 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	881a      	ldrh	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	1c9a      	adds	r2, r3, #2
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	b29a      	uxth	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b01      	cmp	r3, #1
 800b754:	d119      	bne.n	800b78a <HAL_SPI_TransmitReceive+0x1b8>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d014      	beq.n	800b78a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76a:	b292      	uxth	r2, r2
 800b76c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b772:	1c9a      	adds	r2, r3, #2
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	3b01      	subs	r3, #1
 800b780:	b29a      	uxth	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b786:	2301      	movs	r3, #1
 800b788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b78a:	f7fa fc47 	bl	800601c <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b796:	429a      	cmp	r2, r3
 800b798:	d807      	bhi.n	800b7aa <HAL_SPI_TransmitReceive+0x1d8>
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d003      	beq.n	800b7aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b7a8:	e0a7      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1a6      	bne.n	800b702 <HAL_SPI_TransmitReceive+0x130>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1a1      	bne.n	800b702 <HAL_SPI_TransmitReceive+0x130>
 800b7be:	e07c      	b.n	800b8ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <HAL_SPI_TransmitReceive+0x1fc>
 800b7c8:	8b7b      	ldrh	r3, [r7, #26]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d16b      	bne.n	800b8a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	7812      	ldrb	r2, [r2, #0]
 800b7da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7f4:	e057      	b.n	800b8a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	f003 0302 	and.w	r3, r3, #2
 800b800:	2b02      	cmp	r3, #2
 800b802:	d11c      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x26c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d017      	beq.n	800b83e <HAL_SPI_TransmitReceive+0x26c>
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	2b01      	cmp	r3, #1
 800b812:	d114      	bne.n	800b83e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	330c      	adds	r3, #12
 800b81e:	7812      	ldrb	r2, [r2, #0]
 800b820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d119      	bne.n	800b880 <HAL_SPI_TransmitReceive+0x2ae>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b850:	b29b      	uxth	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d014      	beq.n	800b880 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b860:	b2d2      	uxtb	r2, r2
 800b862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b872:	b29b      	uxth	r3, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b87c:	2301      	movs	r3, #1
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b880:	f7fa fbcc 	bl	800601c <HAL_GetTick>
 800b884:	4602      	mov	r2, r0
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d803      	bhi.n	800b898 <HAL_SPI_TransmitReceive+0x2c6>
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b896:	d102      	bne.n	800b89e <HAL_SPI_TransmitReceive+0x2cc>
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d103      	bne.n	800b8a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b8a4:	e029      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1a2      	bne.n	800b7f6 <HAL_SPI_TransmitReceive+0x224>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d19d      	bne.n	800b7f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 f8a2 	bl	800ba08 <SPI_EndRxTxTransaction>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d006      	beq.n	800b8d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b8d6:	e010      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10b      	bne.n	800b8f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	e000      	b.n	800b8fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b8f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b90a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3730      	adds	r7, #48	; 0x30
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b924:	b2db      	uxtb	r3, r3
}
 800b926:	4618      	mov	r0, r3
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b942:	e04c      	b.n	800b9de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d048      	beq.n	800b9de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b94c:	f7fa fb66 	bl	800601c <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d902      	bls.n	800b962 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d13d      	bne.n	800b9de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b97a:	d111      	bne.n	800b9a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b984:	d004      	beq.n	800b990 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b98e:	d107      	bne.n	800b9a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b99e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a8:	d10f      	bne.n	800b9ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e00f      	b.n	800b9fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689a      	ldr	r2, [r3, #8]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	bf0c      	ite	eq
 800b9ee:	2301      	moveq	r3, #1
 800b9f0:	2300      	movne	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d1a3      	bne.n	800b944 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af02      	add	r7, sp, #8
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba14:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <SPI_EndRxTxTransaction+0x7c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a1b      	ldr	r2, [pc, #108]	; (800ba88 <SPI_EndRxTxTransaction+0x80>)
 800ba1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1e:	0d5b      	lsrs	r3, r3, #21
 800ba20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba24:	fb02 f303 	mul.w	r3, r2, r3
 800ba28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba32:	d112      	bne.n	800ba5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2180      	movs	r1, #128	; 0x80
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff ff77 	bl	800b932 <SPI_WaitFlagStateUntilTimeout>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d016      	beq.n	800ba78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4e:	f043 0220 	orr.w	r2, r3, #32
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e00f      	b.n	800ba7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00a      	beq.n	800ba76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba70:	2b80      	cmp	r3, #128	; 0x80
 800ba72:	d0f2      	beq.n	800ba5a <SPI_EndRxTxTransaction+0x52>
 800ba74:	e000      	b.n	800ba78 <SPI_EndRxTxTransaction+0x70>
        break;
 800ba76:	bf00      	nop
  }

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20000134 	.word	0x20000134
 800ba88:	165e9f81 	.word	0x165e9f81

0800ba8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e01d      	b.n	800bada <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f009 fc8e 	bl	80153d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2202      	movs	r2, #2
 800babc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f000 fa1e 	bl	800bf0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b085      	sub	sp, #20
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2202      	movs	r2, #2
 800baee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f003 0307 	and.w	r3, r3, #7
 800bafc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b06      	cmp	r3, #6
 800bb02:	d007      	beq.n	800bb14 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0201 	orr.w	r2, r2, #1
 800bb12:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e01d      	b.n	800bb78 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f815 	bl	800bb80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2202      	movs	r2, #2
 800bb5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f000 f9cf 	bl	800bf0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2201      	movs	r2, #1
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 fc9a 	bl	800c4e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <HAL_TIM_PWM_Start+0x74>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d004      	beq.n	800bbc0 <HAL_TIM_PWM_Start+0x2c>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a14      	ldr	r2, [pc, #80]	; (800bc0c <HAL_TIM_PWM_Start+0x78>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d101      	bne.n	800bbc4 <HAL_TIM_PWM_Start+0x30>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e000      	b.n	800bbc6 <HAL_TIM_PWM_Start+0x32>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f003 0307 	and.w	r3, r3, #7
 800bbe4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b06      	cmp	r3, #6
 800bbea:	d007      	beq.n	800bbfc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f042 0201 	orr.w	r2, r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	40010000 	.word	0x40010000
 800bc0c:	40010400 	.word	0x40010400

0800bc10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d101      	bne.n	800bc2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bc26:	2302      	movs	r3, #2
 800bc28:	e0b4      	b.n	800bd94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2202      	movs	r2, #2
 800bc36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b0c      	cmp	r3, #12
 800bc3e:	f200 809f 	bhi.w	800bd80 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc7d 	.word	0x0800bc7d
 800bc4c:	0800bd81 	.word	0x0800bd81
 800bc50:	0800bd81 	.word	0x0800bd81
 800bc54:	0800bd81 	.word	0x0800bd81
 800bc58:	0800bcbd 	.word	0x0800bcbd
 800bc5c:	0800bd81 	.word	0x0800bd81
 800bc60:	0800bd81 	.word	0x0800bd81
 800bc64:	0800bd81 	.word	0x0800bd81
 800bc68:	0800bcff 	.word	0x0800bcff
 800bc6c:	0800bd81 	.word	0x0800bd81
 800bc70:	0800bd81 	.word	0x0800bd81
 800bc74:	0800bd81 	.word	0x0800bd81
 800bc78:	0800bd3f 	.word	0x0800bd3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f9e2 	bl	800c04c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	699a      	ldr	r2, [r3, #24]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f042 0208 	orr.w	r2, r2, #8
 800bc96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	699a      	ldr	r2, [r3, #24]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f022 0204 	bic.w	r2, r2, #4
 800bca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6999      	ldr	r1, [r3, #24]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	619a      	str	r2, [r3, #24]
      break;
 800bcba:	e062      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 fa32 	bl	800c12c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699a      	ldr	r2, [r3, #24]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6999      	ldr	r1, [r3, #24]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	021a      	lsls	r2, r3, #8
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	619a      	str	r2, [r3, #24]
      break;
 800bcfc:	e041      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fa87 	bl	800c218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69da      	ldr	r2, [r3, #28]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f042 0208 	orr.w	r2, r2, #8
 800bd18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	69da      	ldr	r2, [r3, #28]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0204 	bic.w	r2, r2, #4
 800bd28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69d9      	ldr	r1, [r3, #28]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	691a      	ldr	r2, [r3, #16]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	61da      	str	r2, [r3, #28]
      break;
 800bd3c:	e021      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fadb 	bl	800c300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69da      	ldr	r2, [r3, #28]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69da      	ldr	r2, [r3, #28]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69d9      	ldr	r1, [r3, #28]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	021a      	lsls	r2, r3, #8
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	61da      	str	r2, [r3, #28]
      break;
 800bd7e:	e000      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bd80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <HAL_TIM_ConfigClockSource+0x18>
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	e0a6      	b.n	800bf02 <HAL_TIM_ConfigClockSource+0x166>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bdd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b40      	cmp	r3, #64	; 0x40
 800bdea:	d067      	beq.n	800bebc <HAL_TIM_ConfigClockSource+0x120>
 800bdec:	2b40      	cmp	r3, #64	; 0x40
 800bdee:	d80b      	bhi.n	800be08 <HAL_TIM_ConfigClockSource+0x6c>
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d073      	beq.n	800bedc <HAL_TIM_ConfigClockSource+0x140>
 800bdf4:	2b10      	cmp	r3, #16
 800bdf6:	d802      	bhi.n	800bdfe <HAL_TIM_ConfigClockSource+0x62>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d06f      	beq.n	800bedc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bdfc:	e078      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d06c      	beq.n	800bedc <HAL_TIM_ConfigClockSource+0x140>
 800be02:	2b30      	cmp	r3, #48	; 0x30
 800be04:	d06a      	beq.n	800bedc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800be06:	e073      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be08:	2b70      	cmp	r3, #112	; 0x70
 800be0a:	d00d      	beq.n	800be28 <HAL_TIM_ConfigClockSource+0x8c>
 800be0c:	2b70      	cmp	r3, #112	; 0x70
 800be0e:	d804      	bhi.n	800be1a <HAL_TIM_ConfigClockSource+0x7e>
 800be10:	2b50      	cmp	r3, #80	; 0x50
 800be12:	d033      	beq.n	800be7c <HAL_TIM_ConfigClockSource+0xe0>
 800be14:	2b60      	cmp	r3, #96	; 0x60
 800be16:	d041      	beq.n	800be9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800be18:	e06a      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1e:	d066      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x152>
 800be20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be24:	d017      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800be26:	e063      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6818      	ldr	r0, [r3, #0]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	6899      	ldr	r1, [r3, #8]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f000 fb32 	bl	800c4a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	609a      	str	r2, [r3, #8]
      break;
 800be54:	e04c      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6818      	ldr	r0, [r3, #0]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	6899      	ldr	r1, [r3, #8]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f000 fb1b 	bl	800c4a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	689a      	ldr	r2, [r3, #8]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be78:	609a      	str	r2, [r3, #8]
      break;
 800be7a:	e039      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	6859      	ldr	r1, [r3, #4]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	461a      	mov	r2, r3
 800be8a:	f000 fa8f 	bl	800c3ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2150      	movs	r1, #80	; 0x50
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fae8 	bl	800c46a <TIM_ITRx_SetConfig>
      break;
 800be9a:	e029      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	6859      	ldr	r1, [r3, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	461a      	mov	r2, r3
 800beaa:	f000 faae 	bl	800c40a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2160      	movs	r1, #96	; 0x60
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 fad8 	bl	800c46a <TIM_ITRx_SetConfig>
      break;
 800beba:	e019      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	6859      	ldr	r1, [r3, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	461a      	mov	r2, r3
 800beca:	f000 fa6f 	bl	800c3ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2140      	movs	r1, #64	; 0x40
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fac8 	bl	800c46a <TIM_ITRx_SetConfig>
      break;
 800beda:	e009      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f000 fabf 	bl	800c46a <TIM_ITRx_SetConfig>
      break;
 800beec:	e000      	b.n	800bef0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800beee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a40      	ldr	r2, [pc, #256]	; (800c020 <TIM_Base_SetConfig+0x114>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d013      	beq.n	800bf4c <TIM_Base_SetConfig+0x40>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf2a:	d00f      	beq.n	800bf4c <TIM_Base_SetConfig+0x40>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a3d      	ldr	r2, [pc, #244]	; (800c024 <TIM_Base_SetConfig+0x118>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d00b      	beq.n	800bf4c <TIM_Base_SetConfig+0x40>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a3c      	ldr	r2, [pc, #240]	; (800c028 <TIM_Base_SetConfig+0x11c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d007      	beq.n	800bf4c <TIM_Base_SetConfig+0x40>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a3b      	ldr	r2, [pc, #236]	; (800c02c <TIM_Base_SetConfig+0x120>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d003      	beq.n	800bf4c <TIM_Base_SetConfig+0x40>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a3a      	ldr	r2, [pc, #232]	; (800c030 <TIM_Base_SetConfig+0x124>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d108      	bne.n	800bf5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a2f      	ldr	r2, [pc, #188]	; (800c020 <TIM_Base_SetConfig+0x114>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d02b      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf6c:	d027      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a2c      	ldr	r2, [pc, #176]	; (800c024 <TIM_Base_SetConfig+0x118>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d023      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a2b      	ldr	r2, [pc, #172]	; (800c028 <TIM_Base_SetConfig+0x11c>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d01f      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a2a      	ldr	r2, [pc, #168]	; (800c02c <TIM_Base_SetConfig+0x120>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d01b      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a29      	ldr	r2, [pc, #164]	; (800c030 <TIM_Base_SetConfig+0x124>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d017      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a28      	ldr	r2, [pc, #160]	; (800c034 <TIM_Base_SetConfig+0x128>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d013      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a27      	ldr	r2, [pc, #156]	; (800c038 <TIM_Base_SetConfig+0x12c>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d00f      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a26      	ldr	r2, [pc, #152]	; (800c03c <TIM_Base_SetConfig+0x130>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d00b      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a25      	ldr	r2, [pc, #148]	; (800c040 <TIM_Base_SetConfig+0x134>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d007      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a24      	ldr	r2, [pc, #144]	; (800c044 <TIM_Base_SetConfig+0x138>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d003      	beq.n	800bfbe <TIM_Base_SetConfig+0xb2>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a23      	ldr	r2, [pc, #140]	; (800c048 <TIM_Base_SetConfig+0x13c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d108      	bne.n	800bfd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a0a      	ldr	r2, [pc, #40]	; (800c020 <TIM_Base_SetConfig+0x114>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d003      	beq.n	800c004 <TIM_Base_SetConfig+0xf8>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a0c      	ldr	r2, [pc, #48]	; (800c030 <TIM_Base_SetConfig+0x124>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d103      	bne.n	800c00c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	691a      	ldr	r2, [r3, #16]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	615a      	str	r2, [r3, #20]
}
 800c012:	bf00      	nop
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	40010000 	.word	0x40010000
 800c024:	40000400 	.word	0x40000400
 800c028:	40000800 	.word	0x40000800
 800c02c:	40000c00 	.word	0x40000c00
 800c030:	40010400 	.word	0x40010400
 800c034:	40014000 	.word	0x40014000
 800c038:	40014400 	.word	0x40014400
 800c03c:	40014800 	.word	0x40014800
 800c040:	40001800 	.word	0x40001800
 800c044:	40001c00 	.word	0x40001c00
 800c048:	40002000 	.word	0x40002000

0800c04c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	f023 0201 	bic.w	r2, r3, #1
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f023 0302 	bic.w	r3, r3, #2
 800c094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a20      	ldr	r2, [pc, #128]	; (800c124 <TIM_OC1_SetConfig+0xd8>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d003      	beq.n	800c0b0 <TIM_OC1_SetConfig+0x64>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a1f      	ldr	r2, [pc, #124]	; (800c128 <TIM_OC1_SetConfig+0xdc>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d10c      	bne.n	800c0ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f023 0308 	bic.w	r3, r3, #8
 800c0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f023 0304 	bic.w	r3, r3, #4
 800c0c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a15      	ldr	r2, [pc, #84]	; (800c124 <TIM_OC1_SetConfig+0xd8>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d003      	beq.n	800c0da <TIM_OC1_SetConfig+0x8e>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a14      	ldr	r2, [pc, #80]	; (800c128 <TIM_OC1_SetConfig+0xdc>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d111      	bne.n	800c0fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	621a      	str	r2, [r3, #32]
}
 800c118:	bf00      	nop
 800c11a:	371c      	adds	r7, #28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	40010000 	.word	0x40010000
 800c128:	40010400 	.word	0x40010400

0800c12c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	f023 0210 	bic.w	r2, r3, #16
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f023 0320 	bic.w	r3, r3, #32
 800c176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	011b      	lsls	r3, r3, #4
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	4313      	orrs	r3, r2
 800c182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a22      	ldr	r2, [pc, #136]	; (800c210 <TIM_OC2_SetConfig+0xe4>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d003      	beq.n	800c194 <TIM_OC2_SetConfig+0x68>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a21      	ldr	r2, [pc, #132]	; (800c214 <TIM_OC2_SetConfig+0xe8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d10d      	bne.n	800c1b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a17      	ldr	r2, [pc, #92]	; (800c210 <TIM_OC2_SetConfig+0xe4>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d003      	beq.n	800c1c0 <TIM_OC2_SetConfig+0x94>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a16      	ldr	r2, [pc, #88]	; (800c214 <TIM_OC2_SetConfig+0xe8>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d113      	bne.n	800c1e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	621a      	str	r2, [r3, #32]
}
 800c202:	bf00      	nop
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	40010000 	.word	0x40010000
 800c214:	40010400 	.word	0x40010400

0800c218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0303 	bic.w	r3, r3, #3
 800c24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a21      	ldr	r2, [pc, #132]	; (800c2f8 <TIM_OC3_SetConfig+0xe0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d003      	beq.n	800c27e <TIM_OC3_SetConfig+0x66>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a20      	ldr	r2, [pc, #128]	; (800c2fc <TIM_OC3_SetConfig+0xe4>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d10d      	bne.n	800c29a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	021b      	lsls	r3, r3, #8
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	4313      	orrs	r3, r2
 800c290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a16      	ldr	r2, [pc, #88]	; (800c2f8 <TIM_OC3_SetConfig+0xe0>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d003      	beq.n	800c2aa <TIM_OC3_SetConfig+0x92>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a15      	ldr	r2, [pc, #84]	; (800c2fc <TIM_OC3_SetConfig+0xe4>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d113      	bne.n	800c2d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	621a      	str	r2, [r3, #32]
}
 800c2ec:	bf00      	nop
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	40010000 	.word	0x40010000
 800c2fc:	40010400 	.word	0x40010400

0800c300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c300:	b480      	push	{r7}
 800c302:	b087      	sub	sp, #28
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	021b      	lsls	r3, r3, #8
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	4313      	orrs	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c34a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	031b      	lsls	r3, r3, #12
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	4313      	orrs	r3, r2
 800c356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a12      	ldr	r2, [pc, #72]	; (800c3a4 <TIM_OC4_SetConfig+0xa4>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d003      	beq.n	800c368 <TIM_OC4_SetConfig+0x68>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a11      	ldr	r2, [pc, #68]	; (800c3a8 <TIM_OC4_SetConfig+0xa8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d109      	bne.n	800c37c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c36e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	019b      	lsls	r3, r3, #6
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4313      	orrs	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40010400 	.word	0x40010400

0800c3ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a1b      	ldr	r3, [r3, #32]
 800c3bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	f023 0201 	bic.w	r2, r3, #1
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f023 030a 	bic.w	r3, r3, #10
 800c3e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	621a      	str	r2, [r3, #32]
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b087      	sub	sp, #28
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	f023 0210 	bic.w	r2, r3, #16
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	031b      	lsls	r3, r3, #12
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c446:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	011b      	lsls	r3, r3, #4
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	4313      	orrs	r3, r2
 800c450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	621a      	str	r2, [r3, #32]
}
 800c45e:	bf00      	nop
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b085      	sub	sp, #20
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	f043 0307 	orr.w	r3, r3, #7
 800c48c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	609a      	str	r2, [r3, #8]
}
 800c494:	bf00      	nop
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
 800c4ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	021a      	lsls	r2, r3, #8
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	609a      	str	r2, [r3, #8]
}
 800c4d4:	bf00      	nop
 800c4d6:	371c      	adds	r7, #28
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f003 031f 	and.w	r3, r3, #31
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6a1a      	ldr	r2, [r3, #32]
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	43db      	mvns	r3, r3
 800c502:	401a      	ands	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6a1a      	ldr	r2, [r3, #32]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	f003 031f 	and.w	r3, r3, #31
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	fa01 f303 	lsl.w	r3, r1, r3
 800c518:	431a      	orrs	r2, r3
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	621a      	str	r2, [r3, #32]
}
 800c51e:	bf00      	nop
 800c520:	371c      	adds	r7, #28
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b085      	sub	sp, #20
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c53e:	2302      	movs	r3, #2
 800c540:	e032      	b.n	800c5a8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2202      	movs	r2, #2
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c57a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	4313      	orrs	r3, r2
 800c584:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e03f      	b.n	800c646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f008 ffa8 	bl	8015530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2224      	movs	r2, #36	; 0x24
 800c5e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f9cf 	bl	800c99c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c60c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c61c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c62c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2220      	movs	r2, #32
 800c640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b088      	sub	sp, #32
 800c652:	af02      	add	r7, sp, #8
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	603b      	str	r3, [r7, #0]
 800c65a:	4613      	mov	r3, r2
 800c65c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b20      	cmp	r3, #32
 800c66c:	f040 8083 	bne.w	800c776 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <HAL_UART_Transmit+0x2e>
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e07b      	b.n	800c778 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_UART_Transmit+0x40>
 800c68a:	2302      	movs	r3, #2
 800c68c:	e074      	b.n	800c778 <HAL_UART_Transmit+0x12a>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2221      	movs	r2, #33	; 0x21
 800c6a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c6a4:	f7f9 fcba 	bl	800601c <HAL_GetTick>
 800c6a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	88fa      	ldrh	r2, [r7, #6]
 800c6ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	88fa      	ldrh	r2, [r7, #6]
 800c6b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c6b6:	e042      	b.n	800c73e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ce:	d122      	bne.n	800c716 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	2180      	movs	r1, #128	; 0x80
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f000 f914 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e046      	b.n	800c778 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d103      	bne.n	800c70e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	3302      	adds	r3, #2
 800c70a:	60bb      	str	r3, [r7, #8]
 800c70c:	e017      	b.n	800c73e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	3301      	adds	r3, #1
 800c712:	60bb      	str	r3, [r7, #8]
 800c714:	e013      	b.n	800c73e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2200      	movs	r2, #0
 800c71e:	2180      	movs	r1, #128	; 0x80
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f000 f8f1 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e023      	b.n	800c778 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	60ba      	str	r2, [r7, #8]
 800c736:	781a      	ldrb	r2, [r3, #0]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c742:	b29b      	uxth	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1b7      	bne.n	800c6b8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2200      	movs	r2, #0
 800c750:	2140      	movs	r1, #64	; 0x40
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f000 f8d8 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e00a      	b.n	800c778 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2220      	movs	r2, #32
 800c766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	e000      	b.n	800c778 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c776:	2302      	movs	r3, #2
  }
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af02      	add	r7, sp, #8
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	4613      	mov	r3, r2
 800c78e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c790:	2300      	movs	r3, #0
 800c792:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b20      	cmp	r3, #32
 800c79e:	f040 8090 	bne.w	800c8c2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <HAL_UART_Receive+0x2e>
 800c7a8:	88fb      	ldrh	r3, [r7, #6]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e088      	b.n	800c8c4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d101      	bne.n	800c7c0 <HAL_UART_Receive+0x40>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e081      	b.n	800c8c4 <HAL_UART_Receive+0x144>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2222      	movs	r2, #34	; 0x22
 800c7d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c7d6:	f7f9 fc21 	bl	800601c <HAL_GetTick>
 800c7da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	88fa      	ldrh	r2, [r7, #6]
 800c7e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	88fa      	ldrh	r2, [r7, #6]
 800c7e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c7e8:	e05c      	b.n	800c8a4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c800:	d12b      	bne.n	800c85a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2200      	movs	r2, #0
 800c80a:	2120      	movs	r1, #32
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 f87b 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e053      	b.n	800c8c4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c834:	b29a      	uxth	r2, r3
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	3302      	adds	r3, #2
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	e030      	b.n	800c8a4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	3301      	adds	r3, #1
 800c856:	60bb      	str	r3, [r7, #8]
 800c858:	e024      	b.n	800c8a4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2200      	movs	r2, #0
 800c862:	2120      	movs	r1, #32
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f84f 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e027      	b.n	800c8c4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d108      	bne.n	800c88e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6859      	ldr	r1, [r3, #4]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	1c5a      	adds	r2, r3, #1
 800c886:	60ba      	str	r2, [r7, #8]
 800c888:	b2ca      	uxtb	r2, r1
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	e00a      	b.n	800c8a4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	b2da      	uxtb	r2, r3
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	1c59      	adds	r1, r3, #1
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d19d      	bne.n	800c7ea <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e000      	b.n	800c8c4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c8c2:	2302      	movs	r3, #2
  }
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	b2db      	uxtb	r3, r3
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	4613      	mov	r3, r2
 800c916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c918:	e02c      	b.n	800c974 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c920:	d028      	beq.n	800c974 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <UART_WaitOnFlagUntilTimeout+0x30>
 800c928:	f7f9 fb78 	bl	800601c <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	429a      	cmp	r2, r3
 800c936:	d21d      	bcs.n	800c974 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c946:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695a      	ldr	r2, [r3, #20]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f022 0201 	bic.w	r2, r2, #1
 800c956:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2220      	movs	r2, #32
 800c95c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2220      	movs	r2, #32
 800c964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c970:	2303      	movs	r3, #3
 800c972:	e00f      	b.n	800c994 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	4013      	ands	r3, r2
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	bf0c      	ite	eq
 800c984:	2301      	moveq	r3, #1
 800c986:	2300      	movne	r3, #0
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	461a      	mov	r2, r3
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d0c3      	beq.n	800c91a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c99c:	b5b0      	push	{r4, r5, r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	689a      	ldr	r2, [r3, #8]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	695b      	ldr	r3, [r3, #20]
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	69db      	ldr	r3, [r3, #28]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c9dc:	f023 030c 	bic.w	r3, r3, #12
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	6812      	ldr	r2, [r2, #0]
 800c9e4:	68f9      	ldr	r1, [r7, #12]
 800c9e6:	430b      	orrs	r3, r1
 800c9e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	699a      	ldr	r2, [r3, #24]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca08:	f040 80e4 	bne.w	800cbd4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4aab      	ldr	r2, [pc, #684]	; (800ccc0 <UART_SetConfig+0x324>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d004      	beq.n	800ca20 <UART_SetConfig+0x84>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4aaa      	ldr	r2, [pc, #680]	; (800ccc4 <UART_SetConfig+0x328>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d16c      	bne.n	800cafa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ca20:	f7fc feba 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800ca24:	4602      	mov	r2, r0
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009a      	lsls	r2, r3, #2
 800ca2e:	441a      	add	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3a:	4aa3      	ldr	r2, [pc, #652]	; (800ccc8 <UART_SetConfig+0x32c>)
 800ca3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca40:	095b      	lsrs	r3, r3, #5
 800ca42:	011c      	lsls	r4, r3, #4
 800ca44:	f7fc fea8 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009a      	lsls	r2, r3, #2
 800ca52:	441a      	add	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	fbb2 f5f3 	udiv	r5, r2, r3
 800ca5e:	f7fc fe9b 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800ca62:	4602      	mov	r2, r0
 800ca64:	4613      	mov	r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	009a      	lsls	r2, r3, #2
 800ca6c:	441a      	add	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca78:	4a93      	ldr	r2, [pc, #588]	; (800ccc8 <UART_SetConfig+0x32c>)
 800ca7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7e:	095b      	lsrs	r3, r3, #5
 800ca80:	2264      	movs	r2, #100	; 0x64
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
 800ca86:	1aeb      	subs	r3, r5, r3
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	3332      	adds	r3, #50	; 0x32
 800ca8c:	4a8e      	ldr	r2, [pc, #568]	; (800ccc8 <UART_SetConfig+0x32c>)
 800ca8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca92:	095b      	lsrs	r3, r3, #5
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca9a:	441c      	add	r4, r3
 800ca9c:	f7fc fe7c 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800caa0:	4602      	mov	r2, r0
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009a      	lsls	r2, r3, #2
 800caaa:	441a      	add	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	fbb2 f5f3 	udiv	r5, r2, r3
 800cab6:	f7fc fe6f 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800caba:	4602      	mov	r2, r0
 800cabc:	4613      	mov	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	009a      	lsls	r2, r3, #2
 800cac4:	441a      	add	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad0:	4a7d      	ldr	r2, [pc, #500]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	095b      	lsrs	r3, r3, #5
 800cad8:	2264      	movs	r2, #100	; 0x64
 800cada:	fb02 f303 	mul.w	r3, r2, r3
 800cade:	1aeb      	subs	r3, r5, r3
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	3332      	adds	r3, #50	; 0x32
 800cae4:	4a78      	ldr	r2, [pc, #480]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cae6:	fba2 2303 	umull	r2, r3, r2, r3
 800caea:	095b      	lsrs	r3, r3, #5
 800caec:	f003 0207 	and.w	r2, r3, #7
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4422      	add	r2, r4
 800caf6:	609a      	str	r2, [r3, #8]
 800caf8:	e154      	b.n	800cda4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800cafa:	f7fc fe39 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cafe:	4602      	mov	r2, r0
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009a      	lsls	r2, r3, #2
 800cb08:	441a      	add	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb14:	4a6c      	ldr	r2, [pc, #432]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cb16:	fba2 2303 	umull	r2, r3, r2, r3
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	011c      	lsls	r4, r3, #4
 800cb1e:	f7fc fe27 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cb22:	4602      	mov	r2, r0
 800cb24:	4613      	mov	r3, r2
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	009a      	lsls	r2, r3, #2
 800cb2c:	441a      	add	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	fbb2 f5f3 	udiv	r5, r2, r3
 800cb38:	f7fc fe1a 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009a      	lsls	r2, r3, #2
 800cb46:	441a      	add	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb52:	4a5d      	ldr	r2, [pc, #372]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cb54:	fba2 2303 	umull	r2, r3, r2, r3
 800cb58:	095b      	lsrs	r3, r3, #5
 800cb5a:	2264      	movs	r2, #100	; 0x64
 800cb5c:	fb02 f303 	mul.w	r3, r2, r3
 800cb60:	1aeb      	subs	r3, r5, r3
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	3332      	adds	r3, #50	; 0x32
 800cb66:	4a58      	ldr	r2, [pc, #352]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cb68:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6c:	095b      	lsrs	r3, r3, #5
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb74:	441c      	add	r4, r3
 800cb76:	f7fc fdfb 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	009a      	lsls	r2, r3, #2
 800cb84:	441a      	add	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	fbb2 f5f3 	udiv	r5, r2, r3
 800cb90:	f7fc fdee 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cb94:	4602      	mov	r2, r0
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	009a      	lsls	r2, r3, #2
 800cb9e:	441a      	add	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbaa:	4a47      	ldr	r2, [pc, #284]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cbac:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb0:	095b      	lsrs	r3, r3, #5
 800cbb2:	2264      	movs	r2, #100	; 0x64
 800cbb4:	fb02 f303 	mul.w	r3, r2, r3
 800cbb8:	1aeb      	subs	r3, r5, r3
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	3332      	adds	r3, #50	; 0x32
 800cbbe:	4a42      	ldr	r2, [pc, #264]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cbc0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc4:	095b      	lsrs	r3, r3, #5
 800cbc6:	f003 0207 	and.w	r2, r3, #7
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4422      	add	r2, r4
 800cbd0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800cbd2:	e0e7      	b.n	800cda4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a39      	ldr	r2, [pc, #228]	; (800ccc0 <UART_SetConfig+0x324>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d004      	beq.n	800cbe8 <UART_SetConfig+0x24c>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a38      	ldr	r2, [pc, #224]	; (800ccc4 <UART_SetConfig+0x328>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d171      	bne.n	800cccc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800cbe8:	f7fc fdd6 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800cbec:	4602      	mov	r2, r0
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	009a      	lsls	r2, r3, #2
 800cbf6:	441a      	add	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc02:	4a31      	ldr	r2, [pc, #196]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cc04:	fba2 2303 	umull	r2, r3, r2, r3
 800cc08:	095b      	lsrs	r3, r3, #5
 800cc0a:	011c      	lsls	r4, r3, #4
 800cc0c:	f7fc fdc4 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800cc10:	4602      	mov	r2, r0
 800cc12:	4613      	mov	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4413      	add	r3, r2
 800cc18:	009a      	lsls	r2, r3, #2
 800cc1a:	441a      	add	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	fbb2 f5f3 	udiv	r5, r2, r3
 800cc26:	f7fc fdb7 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009a      	lsls	r2, r3, #2
 800cc34:	441a      	add	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc40:	4a21      	ldr	r2, [pc, #132]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	2264      	movs	r2, #100	; 0x64
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	1aeb      	subs	r3, r5, r3
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	3332      	adds	r3, #50	; 0x32
 800cc54:	4a1c      	ldr	r2, [pc, #112]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cc56:	fba2 2303 	umull	r2, r3, r2, r3
 800cc5a:	095b      	lsrs	r3, r3, #5
 800cc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc60:	441c      	add	r4, r3
 800cc62:	f7fc fd99 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800cc66:	4602      	mov	r2, r0
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009a      	lsls	r2, r3, #2
 800cc70:	441a      	add	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	fbb2 f5f3 	udiv	r5, r2, r3
 800cc7c:	f7fc fd8c 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800cc80:	4602      	mov	r2, r0
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	009a      	lsls	r2, r3, #2
 800cc8a:	441a      	add	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc96:	4a0c      	ldr	r2, [pc, #48]	; (800ccc8 <UART_SetConfig+0x32c>)
 800cc98:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9c:	095b      	lsrs	r3, r3, #5
 800cc9e:	2264      	movs	r2, #100	; 0x64
 800cca0:	fb02 f303 	mul.w	r3, r2, r3
 800cca4:	1aeb      	subs	r3, r5, r3
 800cca6:	011b      	lsls	r3, r3, #4
 800cca8:	3332      	adds	r3, #50	; 0x32
 800ccaa:	4a07      	ldr	r2, [pc, #28]	; (800ccc8 <UART_SetConfig+0x32c>)
 800ccac:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb0:	095b      	lsrs	r3, r3, #5
 800ccb2:	f003 020f 	and.w	r2, r3, #15
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4422      	add	r2, r4
 800ccbc:	609a      	str	r2, [r3, #8]
 800ccbe:	e071      	b.n	800cda4 <UART_SetConfig+0x408>
 800ccc0:	40011000 	.word	0x40011000
 800ccc4:	40011400 	.word	0x40011400
 800ccc8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800cccc:	f7fc fd50 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	009a      	lsls	r2, r3, #2
 800ccda:	441a      	add	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce6:	4a31      	ldr	r2, [pc, #196]	; (800cdac <UART_SetConfig+0x410>)
 800cce8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccec:	095b      	lsrs	r3, r3, #5
 800ccee:	011c      	lsls	r4, r3, #4
 800ccf0:	f7fc fd3e 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	009a      	lsls	r2, r3, #2
 800ccfe:	441a      	add	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	fbb2 f5f3 	udiv	r5, r2, r3
 800cd0a:	f7fc fd31 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	4613      	mov	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	009a      	lsls	r2, r3, #2
 800cd18:	441a      	add	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd24:	4a21      	ldr	r2, [pc, #132]	; (800cdac <UART_SetConfig+0x410>)
 800cd26:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	2264      	movs	r2, #100	; 0x64
 800cd2e:	fb02 f303 	mul.w	r3, r2, r3
 800cd32:	1aeb      	subs	r3, r5, r3
 800cd34:	011b      	lsls	r3, r3, #4
 800cd36:	3332      	adds	r3, #50	; 0x32
 800cd38:	4a1c      	ldr	r2, [pc, #112]	; (800cdac <UART_SetConfig+0x410>)
 800cd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd3e:	095b      	lsrs	r3, r3, #5
 800cd40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd44:	441c      	add	r4, r3
 800cd46:	f7fc fd13 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009a      	lsls	r2, r3, #2
 800cd54:	441a      	add	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	fbb2 f5f3 	udiv	r5, r2, r3
 800cd60:	f7fc fd06 	bl	8009770 <HAL_RCC_GetPCLK1Freq>
 800cd64:	4602      	mov	r2, r0
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009a      	lsls	r2, r3, #2
 800cd6e:	441a      	add	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd7a:	4a0c      	ldr	r2, [pc, #48]	; (800cdac <UART_SetConfig+0x410>)
 800cd7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd80:	095b      	lsrs	r3, r3, #5
 800cd82:	2264      	movs	r2, #100	; 0x64
 800cd84:	fb02 f303 	mul.w	r3, r2, r3
 800cd88:	1aeb      	subs	r3, r5, r3
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	3332      	adds	r3, #50	; 0x32
 800cd8e:	4a07      	ldr	r2, [pc, #28]	; (800cdac <UART_SetConfig+0x410>)
 800cd90:	fba2 2303 	umull	r2, r3, r2, r3
 800cd94:	095b      	lsrs	r3, r3, #5
 800cd96:	f003 020f 	and.w	r2, r3, #15
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4422      	add	r2, r4
 800cda0:	609a      	str	r2, [r3, #8]
}
 800cda2:	e7ff      	b.n	800cda4 <UART_SetConfig+0x408>
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bdb0      	pop	{r4, r5, r7, pc}
 800cdac:	51eb851f 	.word	0x51eb851f

0800cdb0 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	b480      	push	{r7}
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	f107 001c 	add.w	r0, r7, #28
 800cdbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cdc6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cdca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cdce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cdd2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cdd6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cdda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cdea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	431a      	orrs	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	b004      	add	sp, #16
 800ce04:	4770      	bx	lr

0800ce06 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ce42:	b480      	push	{r7}
 800ce44:	b083      	sub	sp, #12
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2203      	movs	r2, #3
 800ce4e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ce5e:	b480      	push	{r7}
 800ce60:	b083      	sub	sp, #12
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 0303 	and.w	r3, r3, #3
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b085      	sub	sp, #20
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce98:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce9e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cea4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ceb4:	f023 030f 	bic.w	r3, r3, #15
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	431a      	orrs	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	b2db      	uxtb	r3, r3
}
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3314      	adds	r3, #20
 800cefa:	461a      	mov	r2, r3
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	4413      	add	r3, r2
 800cf00:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
}  
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b085      	sub	sp, #20
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cf3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cf44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	431a      	orrs	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0

}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf7c:	2310      	movs	r3, #16
 800cf7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf80:	2340      	movs	r3, #64	; 0x40
 800cf82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf8c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf8e:	f107 0308 	add.w	r3, r7, #8
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff ff70 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cf9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf9e:	2110      	movs	r1, #16
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fa63 	bl	800d46c <SDMMC_GetCmdResp1>
 800cfa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3720      	adds	r7, #32
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b088      	sub	sp, #32
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cfc4:	2311      	movs	r3, #17
 800cfc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfc8:	2340      	movs	r3, #64	; 0x40
 800cfca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfd4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff ff4c 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cfe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe6:	2111      	movs	r1, #17
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa3f 	bl	800d46c <SDMMC_GetCmdResp1>
 800cfee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cff0:	69fb      	ldr	r3, [r7, #28]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3720      	adds	r7, #32
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b088      	sub	sp, #32
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d004:	2300      	movs	r3, #0
 800d006:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d00c:	2312      	movs	r3, #18
 800d00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d010:	2340      	movs	r3, #64	; 0x40
 800d012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d01c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d01e:	f107 0308 	add.w	r3, r7, #8
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff ff28 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02e:	2112      	movs	r1, #18
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fa1b 	bl	800d46c <SDMMC_GetCmdResp1>
 800d036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d038:	69fb      	ldr	r3, [r7, #28]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b088      	sub	sp, #32
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d054:	2318      	movs	r3, #24
 800d056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d05c:	2300      	movs	r3, #0
 800d05e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d064:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d066:	f107 0308 	add.w	r3, r7, #8
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff ff04 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d072:	f241 3288 	movw	r2, #5000	; 0x1388
 800d076:	2118      	movs	r1, #24
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f9f7 	bl	800d46c <SDMMC_GetCmdResp1>
 800d07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d080:	69fb      	ldr	r3, [r7, #28]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b088      	sub	sp, #32
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d094:	2300      	movs	r3, #0
 800d096:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d09c:	2319      	movs	r3, #25
 800d09e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0a0:	2340      	movs	r3, #64	; 0x40
 800d0a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ae:	f107 0308 	add.w	r3, r7, #8
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7ff fee0 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0be:	2119      	movs	r1, #25
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f9d3 	bl	800d46c <SDMMC_GetCmdResp1>
 800d0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3720      	adds	r7, #32
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b088      	sub	sp, #32
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d0e4:	230c      	movs	r3, #12
 800d0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0e8:	2340      	movs	r3, #64	; 0x40
 800d0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0f4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff febc 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800d102:	4a05      	ldr	r2, [pc, #20]	; (800d118 <SDMMC_CmdStopTransfer+0x44>)
 800d104:	210c      	movs	r1, #12
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9b0 	bl	800d46c <SDMMC_GetCmdResp1>
 800d10c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d10e:	69fb      	ldr	r3, [r7, #28]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	05f5e100 	.word	0x05f5e100

0800d11c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08a      	sub	sp, #40	; 0x28
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d128:	2300      	movs	r3, #0
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d130:	2307      	movs	r3, #7
 800d132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d138:	2300      	movs	r3, #0
 800d13a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d140:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d142:	f107 0310 	add.w	r3, r7, #16
 800d146:	4619      	mov	r1, r3
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff fe96 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d152:	2107      	movs	r1, #7
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 f989 	bl	800d46c <SDMMC_GetCmdResp1>
 800d15a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3728      	adds	r7, #40	; 0x28
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b088      	sub	sp, #32
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d16e:	2300      	movs	r3, #0
 800d170:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800d172:	2300      	movs	r3, #0
 800d174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d176:	2300      	movs	r3, #0
 800d178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d17a:	2300      	movs	r3, #0
 800d17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d17e:	2300      	movs	r3, #0
 800d180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d186:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d188:	f107 0308 	add.w	r3, r7, #8
 800d18c:	4619      	mov	r1, r3
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff fe73 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f93f 	bl	800d418 <SDMMC_GetCmdError>
 800d19a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d19c:	69fb      	ldr	r3, [r7, #28]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3720      	adds	r7, #32
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b088      	sub	sp, #32
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d1b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d1b8:	2308      	movs	r3, #8
 800d1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1bc:	2340      	movs	r3, #64	; 0x40
 800d1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1ca:	f107 0308 	add.w	r3, r7, #8
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fe52 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fb10 	bl	800d7fc <SDMMC_GetCmdResp7>
 800d1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1de:	69fb      	ldr	r3, [r7, #28]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3720      	adds	r7, #32
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d1fa:	2337      	movs	r3, #55	; 0x37
 800d1fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1fe:	2340      	movs	r3, #64	; 0x40
 800d200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d20c:	f107 0308 	add.w	r3, r7, #8
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7ff fe31 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d218:	f241 3288 	movw	r2, #5000	; 0x1388
 800d21c:	2137      	movs	r1, #55	; 0x37
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f924 	bl	800d46c <SDMMC_GetCmdResp1>
 800d224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d226:	69fb      	ldr	r3, [r7, #28]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d24a:	2329      	movs	r3, #41	; 0x29
 800d24c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d24e:	2340      	movs	r3, #64	; 0x40
 800d250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d252:	2300      	movs	r3, #0
 800d254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d25c:	f107 0308 	add.w	r3, r7, #8
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff fe09 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fa25 	bl	800d6b8 <SDMMC_GetCmdResp3>
 800d26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d270:	69fb      	ldr	r3, [r7, #28]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b088      	sub	sp, #32
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d284:	2300      	movs	r3, #0
 800d286:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d28c:	2306      	movs	r3, #6
 800d28e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d290:	2340      	movs	r3, #64	; 0x40
 800d292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d294:	2300      	movs	r3, #0
 800d296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d29c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d29e:	f107 0308 	add.w	r3, r7, #8
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff fde8 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2ae:	2106      	movs	r1, #6
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f8db 	bl	800d46c <SDMMC_GetCmdResp1>
 800d2b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3720      	adds	r7, #32
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b088      	sub	sp, #32
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d2d2:	2333      	movs	r3, #51	; 0x33
 800d2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2d6:	2340      	movs	r3, #64	; 0x40
 800d2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2e2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fdc5 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f4:	2133      	movs	r1, #51	; 0x33
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f8b8 	bl	800d46c <SDMMC_GetCmdResp1>
 800d2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2fe:	69fb      	ldr	r3, [r7, #28]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d310:	2300      	movs	r3, #0
 800d312:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d318:	2302      	movs	r3, #2
 800d31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d31c:	23c0      	movs	r3, #192	; 0xc0
 800d31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d320:	2300      	movs	r3, #0
 800d322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d328:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d32a:	f107 0308 	add.w	r3, r7, #8
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fda2 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f97e 	bl	800d638 <SDMMC_GetCmdResp2>
 800d33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d33e:	69fb      	ldr	r3, [r7, #28]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3720      	adds	r7, #32
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d352:	2300      	movs	r3, #0
 800d354:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d35a:	2309      	movs	r3, #9
 800d35c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d35e:	23c0      	movs	r3, #192	; 0xc0
 800d360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d36c:	f107 0308 	add.w	r3, r7, #8
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7ff fd81 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f95d 	bl	800d638 <SDMMC_GetCmdResp2>
 800d37e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d380:	69fb      	ldr	r3, [r7, #28]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3720      	adds	r7, #32
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b088      	sub	sp, #32
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d398:	2300      	movs	r3, #0
 800d39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d39c:	2303      	movs	r3, #3
 800d39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3a0:	2340      	movs	r3, #64	; 0x40
 800d3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3ae:	f107 0308 	add.w	r3, r7, #8
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff fd60 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	2103      	movs	r1, #3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f9ae 	bl	800d720 <SDMMC_GetCmdResp6>
 800d3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d3e2:	230d      	movs	r3, #13
 800d3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3e6:	2340      	movs	r3, #64	; 0x40
 800d3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fd3d 	bl	800ce7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d400:	f241 3288 	movw	r2, #5000	; 0x1388
 800d404:	210d      	movs	r1, #13
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f830 	bl	800d46c <SDMMC_GetCmdResp1>
 800d40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40e:	69fb      	ldr	r3, [r7, #28]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3720      	adds	r7, #32
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d418:	b490      	push	{r4, r7}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d420:	4b10      	ldr	r3, [pc, #64]	; (800d464 <SDMMC_GetCmdError+0x4c>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a10      	ldr	r2, [pc, #64]	; (800d468 <SDMMC_GetCmdError+0x50>)
 800d426:	fba2 2303 	umull	r2, r3, r2, r3
 800d42a:	0a5b      	lsrs	r3, r3, #9
 800d42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d430:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d434:	4623      	mov	r3, r4
 800d436:	1e5c      	subs	r4, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d43c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d440:	e00a      	b.n	800d458 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0f2      	beq.n	800d434 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d454:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bc90      	pop	{r4, r7}
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	20000134 	.word	0x20000134
 800d468:	10624dd3 	.word	0x10624dd3

0800d46c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	460b      	mov	r3, r1
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d47a:	4b6c      	ldr	r3, [pc, #432]	; (800d62c <SDMMC_GetCmdResp1+0x1c0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a6c      	ldr	r2, [pc, #432]	; (800d630 <SDMMC_GetCmdResp1+0x1c4>)
 800d480:	fba2 2303 	umull	r2, r3, r2, r3
 800d484:	0a5b      	lsrs	r3, r3, #9
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d48c:	4623      	mov	r3, r4
 800d48e:	1e5c      	subs	r4, r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d498:	e0c3      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0f2      	beq.n	800d48c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d004      	beq.n	800d4bc <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2204      	movs	r2, #4
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4b8:	2304      	movs	r3, #4
 800d4ba:	e0b2      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e0a7      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f7ff fcfb 	bl	800cece <SDIO_GetCommandResponse>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	461a      	mov	r2, r3
 800d4dc:	7afb      	ldrb	r3, [r7, #11]
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d001      	beq.n	800d4e6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e09d      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7ff fcf9 	bl	800cee8 <SDIO_GetResponse>
 800d4f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4b4e      	ldr	r3, [pc, #312]	; (800d634 <SDMMC_GetCmdResp1+0x1c8>)
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d101      	bne.n	800d506 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
 800d504:	e08d      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	da02      	bge.n	800d512 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d50c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d510:	e087      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	e080      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d526:	2b00      	cmp	r3, #0
 800d528:	d001      	beq.n	800d52e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d52a:	2380      	movs	r3, #128	; 0x80
 800d52c:	e079      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d53c:	e071      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d54c:	e069      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d55c:	e061      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d56c:	e059      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d57c:	e051      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d58c:	e049      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d59c:	e041      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800d5a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ac:	e039      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d5b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5bc:	e031      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d5c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d5cc:	e029      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d002      	beq.n	800d5de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d5d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d5dc:	e021      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d5e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d5ec:	e019      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d5f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d5fc:	e011      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d60c:	e009      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f003 0308 	and.w	r3, r3, #8
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d618:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d61c:	e001      	b.n	800d622 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d61e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d622:	4618      	mov	r0, r3
 800d624:	371c      	adds	r7, #28
 800d626:	46bd      	mov	sp, r7
 800d628:	bd90      	pop	{r4, r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20000134 	.word	0x20000134
 800d630:	10624dd3 	.word	0x10624dd3
 800d634:	fdffe008 	.word	0xfdffe008

0800d638 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d638:	b490      	push	{r4, r7}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d640:	4b1b      	ldr	r3, [pc, #108]	; (800d6b0 <SDMMC_GetCmdResp2+0x78>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a1b      	ldr	r2, [pc, #108]	; (800d6b4 <SDMMC_GetCmdResp2+0x7c>)
 800d646:	fba2 2303 	umull	r2, r3, r2, r3
 800d64a:	0a5b      	lsrs	r3, r3, #9
 800d64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d650:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d654:	4623      	mov	r3, r4
 800d656:	1e5c      	subs	r4, r3, #1
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d65c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d660:	e020      	b.n	800d6a4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d666:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0f2      	beq.n	800d654 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d672:	f003 0304 	and.w	r3, r3, #4
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2204      	movs	r2, #4
 800d67e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d680:	2304      	movs	r3, #4
 800d682:	e00f      	b.n	800d6a4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2201      	movs	r2, #1
 800d694:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d696:	2301      	movs	r3, #1
 800d698:	e004      	b.n	800d6a4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d6a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bc90      	pop	{r4, r7}
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000134 	.word	0x20000134
 800d6b4:	10624dd3 	.word	0x10624dd3

0800d6b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d6b8:	b490      	push	{r4, r7}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6c0:	4b15      	ldr	r3, [pc, #84]	; (800d718 <SDMMC_GetCmdResp3+0x60>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a15      	ldr	r2, [pc, #84]	; (800d71c <SDMMC_GetCmdResp3+0x64>)
 800d6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ca:	0a5b      	lsrs	r3, r3, #9
 800d6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	1e5c      	subs	r4, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d102      	bne.n	800d6e2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6e0:	e015      	b.n	800d70e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0f2      	beq.n	800d6d4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	f003 0304 	and.w	r3, r3, #4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d700:	2304      	movs	r3, #4
 800d702:	e004      	b.n	800d70e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d70a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bc90      	pop	{r4, r7}
 800d716:	4770      	bx	lr
 800d718:	20000134 	.word	0x20000134
 800d71c:	10624dd3 	.word	0x10624dd3

0800d720 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d720:	b590      	push	{r4, r7, lr}
 800d722:	b087      	sub	sp, #28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	460b      	mov	r3, r1
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d72e:	4b31      	ldr	r3, [pc, #196]	; (800d7f4 <SDMMC_GetCmdResp6+0xd4>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a31      	ldr	r2, [pc, #196]	; (800d7f8 <SDMMC_GetCmdResp6+0xd8>)
 800d734:	fba2 2303 	umull	r2, r3, r2, r3
 800d738:	0a5b      	lsrs	r3, r3, #9
 800d73a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d73e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d742:	4623      	mov	r3, r4
 800d744:	1e5c      	subs	r4, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d74a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d74e:	e04c      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d754:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0f2      	beq.n	800d742 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	2b00      	cmp	r3, #0
 800d766:	d004      	beq.n	800d772 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2204      	movs	r2, #4
 800d76c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d76e:	2304      	movs	r3, #4
 800d770:	e03b      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d004      	beq.n	800d788 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2201      	movs	r2, #1
 800d782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d784:	2301      	movs	r3, #1
 800d786:	e030      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fba0 	bl	800cece <SDIO_GetCommandResponse>
 800d78e:	4603      	mov	r3, r0
 800d790:	461a      	mov	r2, r3
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	4293      	cmp	r3, r2
 800d796:	d001      	beq.n	800d79c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d798:	2301      	movs	r3, #1
 800d79a:	e026      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7ff fb9e 	bl	800cee8 <SDIO_GetResponse>
 800d7ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d106      	bne.n	800d7c6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	0c1b      	lsrs	r3, r3, #16
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e011      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7d4:	e009      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7e4:	e001      	b.n	800d7ea <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d7e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd90      	pop	{r4, r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20000134 	.word	0x20000134
 800d7f8:	10624dd3 	.word	0x10624dd3

0800d7fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d7fc:	b490      	push	{r4, r7}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d804:	4b18      	ldr	r3, [pc, #96]	; (800d868 <SDMMC_GetCmdResp7+0x6c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a18      	ldr	r2, [pc, #96]	; (800d86c <SDMMC_GetCmdResp7+0x70>)
 800d80a:	fba2 2303 	umull	r2, r3, r2, r3
 800d80e:	0a5b      	lsrs	r3, r3, #9
 800d810:	f241 3288 	movw	r2, #5000	; 0x1388
 800d814:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d818:	4623      	mov	r3, r4
 800d81a:	1e5c      	subs	r4, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d824:	e01a      	b.n	800d85c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d0f2      	beq.n	800d818 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d836:	f003 0304 	and.w	r3, r3, #4
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d004      	beq.n	800d848 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2240      	movs	r2, #64	; 0x40
 800d842:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d844:	2304      	movs	r3, #4
 800d846:	e009      	b.n	800d85c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2240      	movs	r2, #64	; 0x40
 800d858:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d85a:	2300      	movs	r3, #0
  
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bc90      	pop	{r4, r7}
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	20000134 	.word	0x20000134
 800d86c:	10624dd3 	.word	0x10624dd3

0800d870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d870:	b084      	sub	sp, #16
 800d872:	b580      	push	{r7, lr}
 800d874:	b084      	sub	sp, #16
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	f107 001c 	add.w	r0, r7, #28
 800d87e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	2b01      	cmp	r3, #1
 800d886:	d122      	bne.n	800d8ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d105      	bne.n	800d8c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f001 fa7c 	bl	800edc0 <USB_CoreReset>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	e01a      	b.n	800d904 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 fa70 	bl	800edc0 <USB_CoreReset>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d106      	bne.n	800d8f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	639a      	str	r2, [r3, #56]	; 0x38
 800d8f6:	e005      	b.n	800d904 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	2b01      	cmp	r3, #1
 800d908:	d10b      	bne.n	800d922 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f043 0206 	orr.w	r2, r3, #6
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f043 0220 	orr.w	r2, r3, #32
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d92e:	b004      	add	sp, #16
 800d930:	4770      	bx	lr
	...

0800d934 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	4613      	mov	r3, r2
 800d940:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d165      	bne.n	800da14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	4a41      	ldr	r2, [pc, #260]	; (800da50 <USB_SetTurnaroundTime+0x11c>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d906      	bls.n	800d95e <USB_SetTurnaroundTime+0x2a>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	4a40      	ldr	r2, [pc, #256]	; (800da54 <USB_SetTurnaroundTime+0x120>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d802      	bhi.n	800d95e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d958:	230f      	movs	r3, #15
 800d95a:	617b      	str	r3, [r7, #20]
 800d95c:	e062      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	4a3c      	ldr	r2, [pc, #240]	; (800da54 <USB_SetTurnaroundTime+0x120>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d906      	bls.n	800d974 <USB_SetTurnaroundTime+0x40>
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	4a3b      	ldr	r2, [pc, #236]	; (800da58 <USB_SetTurnaroundTime+0x124>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d802      	bhi.n	800d974 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d96e:	230e      	movs	r3, #14
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	e057      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4a38      	ldr	r2, [pc, #224]	; (800da58 <USB_SetTurnaroundTime+0x124>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d906      	bls.n	800d98a <USB_SetTurnaroundTime+0x56>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	4a37      	ldr	r2, [pc, #220]	; (800da5c <USB_SetTurnaroundTime+0x128>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d802      	bhi.n	800d98a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d984:	230d      	movs	r3, #13
 800d986:	617b      	str	r3, [r7, #20]
 800d988:	e04c      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	4a33      	ldr	r2, [pc, #204]	; (800da5c <USB_SetTurnaroundTime+0x128>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d906      	bls.n	800d9a0 <USB_SetTurnaroundTime+0x6c>
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	4a32      	ldr	r2, [pc, #200]	; (800da60 <USB_SetTurnaroundTime+0x12c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d802      	bhi.n	800d9a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d99a:	230c      	movs	r3, #12
 800d99c:	617b      	str	r3, [r7, #20]
 800d99e:	e041      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4a2f      	ldr	r2, [pc, #188]	; (800da60 <USB_SetTurnaroundTime+0x12c>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d906      	bls.n	800d9b6 <USB_SetTurnaroundTime+0x82>
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	4a2e      	ldr	r2, [pc, #184]	; (800da64 <USB_SetTurnaroundTime+0x130>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d802      	bhi.n	800d9b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d9b0:	230b      	movs	r3, #11
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	e036      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	4a2a      	ldr	r2, [pc, #168]	; (800da64 <USB_SetTurnaroundTime+0x130>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d906      	bls.n	800d9cc <USB_SetTurnaroundTime+0x98>
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	4a29      	ldr	r2, [pc, #164]	; (800da68 <USB_SetTurnaroundTime+0x134>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d802      	bhi.n	800d9cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d9c6:	230a      	movs	r3, #10
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e02b      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4a26      	ldr	r2, [pc, #152]	; (800da68 <USB_SetTurnaroundTime+0x134>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d906      	bls.n	800d9e2 <USB_SetTurnaroundTime+0xae>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	4a25      	ldr	r2, [pc, #148]	; (800da6c <USB_SetTurnaroundTime+0x138>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d802      	bhi.n	800d9e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d9dc:	2309      	movs	r3, #9
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	e020      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	4a21      	ldr	r2, [pc, #132]	; (800da6c <USB_SetTurnaroundTime+0x138>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d906      	bls.n	800d9f8 <USB_SetTurnaroundTime+0xc4>
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	4a20      	ldr	r2, [pc, #128]	; (800da70 <USB_SetTurnaroundTime+0x13c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d802      	bhi.n	800d9f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d9f2:	2308      	movs	r3, #8
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	e015      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	4a1d      	ldr	r2, [pc, #116]	; (800da70 <USB_SetTurnaroundTime+0x13c>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d906      	bls.n	800da0e <USB_SetTurnaroundTime+0xda>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	4a1c      	ldr	r2, [pc, #112]	; (800da74 <USB_SetTurnaroundTime+0x140>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d802      	bhi.n	800da0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800da08:	2307      	movs	r3, #7
 800da0a:	617b      	str	r3, [r7, #20]
 800da0c:	e00a      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800da0e:	2306      	movs	r3, #6
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	e007      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800da14:	79fb      	ldrb	r3, [r7, #7]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800da1a:	2309      	movs	r3, #9
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	e001      	b.n	800da24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800da20:	2309      	movs	r3, #9
 800da22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	68da      	ldr	r2, [r3, #12]
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	029b      	lsls	r3, r3, #10
 800da38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800da3c:	431a      	orrs	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	371c      	adds	r7, #28
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	00d8acbf 	.word	0x00d8acbf
 800da54:	00e4e1bf 	.word	0x00e4e1bf
 800da58:	00f423ff 	.word	0x00f423ff
 800da5c:	0106737f 	.word	0x0106737f
 800da60:	011a499f 	.word	0x011a499f
 800da64:	01312cff 	.word	0x01312cff
 800da68:	014ca43f 	.word	0x014ca43f
 800da6c:	016e35ff 	.word	0x016e35ff
 800da70:	01a6ab1f 	.word	0x01a6ab1f
 800da74:	01e847ff 	.word	0x01e847ff

0800da78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	f043 0201 	orr.w	r2, r3, #1
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	f023 0201 	bic.w	r2, r3, #1
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d106      	bne.n	800dae8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	60da      	str	r2, [r3, #12]
 800dae6:	e00b      	b.n	800db00 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	60da      	str	r2, [r3, #12]
 800dafa:	e001      	b.n	800db00 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e003      	b.n	800db08 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800db00:	2032      	movs	r0, #50	; 0x32
 800db02:	f7f8 fa97 	bl	8006034 <HAL_Delay>

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db10:	b084      	sub	sp, #16
 800db12:	b580      	push	{r7, lr}
 800db14:	b086      	sub	sp, #24
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db2a:	2300      	movs	r3, #0
 800db2c:	613b      	str	r3, [r7, #16]
 800db2e:	e009      	b.n	800db44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	3340      	adds	r3, #64	; 0x40
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	3301      	adds	r3, #1
 800db42:	613b      	str	r3, [r7, #16]
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	2b0e      	cmp	r3, #14
 800db48:	d9f2      	bls.n	800db30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d112      	bne.n	800db76 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	639a      	str	r2, [r3, #56]	; 0x38
 800db74:	e00b      	b.n	800db8e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db94:	461a      	mov	r2, r3
 800db96:	2300      	movs	r3, #0
 800db98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba0:	4619      	mov	r1, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba8:	461a      	mov	r2, r3
 800dbaa:	680b      	ldr	r3, [r1, #0]
 800dbac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d10c      	bne.n	800dbce <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d104      	bne.n	800dbc4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbba:	2100      	movs	r1, #0
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f961 	bl	800de84 <USB_SetDevSpeed>
 800dbc2:	e008      	b.n	800dbd6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f95c 	bl	800de84 <USB_SetDevSpeed>
 800dbcc:	e003      	b.n	800dbd6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbce:	2103      	movs	r1, #3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f957 	bl	800de84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbd6:	2110      	movs	r1, #16
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f90b 	bl	800ddf4 <USB_FlushTxFifo>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f929 	bl	800de40 <USB_FlushRxFifo>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfe:	461a      	mov	r2, r3
 800dc00:	2300      	movs	r3, #0
 800dc02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc16:	461a      	mov	r2, r3
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	613b      	str	r3, [r7, #16]
 800dc20:	e043      	b.n	800dcaa <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	015a      	lsls	r2, r3, #5
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	4413      	add	r3, r2
 800dc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc38:	d118      	bne.n	800dc6c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	e013      	b.n	800dc7e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	015a      	lsls	r2, r3, #5
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc62:	461a      	mov	r2, r3
 800dc64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc68:	6013      	str	r3, [r2, #0]
 800dc6a:	e008      	b.n	800dc7e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	015a      	lsls	r2, r3, #5
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	4413      	add	r3, r2
 800dc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc78:	461a      	mov	r2, r3
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	015a      	lsls	r2, r3, #5
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	4413      	add	r3, r2
 800dc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	015a      	lsls	r2, r3, #5
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	3301      	adds	r3, #1
 800dca8:	613b      	str	r3, [r7, #16]
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d3b7      	bcc.n	800dc22 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	613b      	str	r3, [r7, #16]
 800dcb6:	e043      	b.n	800dd40 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	015a      	lsls	r2, r3, #5
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcce:	d118      	bne.n	800dd02 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10a      	bne.n	800dcec <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	015a      	lsls	r2, r3, #5
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	4413      	add	r3, r2
 800dcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce2:	461a      	mov	r2, r3
 800dce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	e013      	b.n	800dd14 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	015a      	lsls	r2, r3, #5
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	e008      	b.n	800dd14 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	015a      	lsls	r2, r3, #5
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	4413      	add	r3, r2
 800dd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd0e:	461a      	mov	r2, r3
 800dd10:	2300      	movs	r3, #0
 800dd12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	461a      	mov	r2, r3
 800dd22:	2300      	movs	r3, #0
 800dd24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd32:	461a      	mov	r2, r3
 800dd34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	613b      	str	r3, [r7, #16]
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	693a      	ldr	r2, [r7, #16]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d3b7      	bcc.n	800dcb8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd5a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d111      	bne.n	800dd86 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd68:	461a      	mov	r2, r3
 800dd6a:	4b20      	ldr	r3, [pc, #128]	; (800ddec <USB_DevInit+0x2dc>)
 800dd6c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd80:	f043 0303 	orr.w	r3, r3, #3
 800dd84:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d105      	bne.n	800dda6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	f043 0210 	orr.w	r2, r3, #16
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	699a      	ldr	r2, [r3, #24]
 800ddaa:	4b11      	ldr	r3, [pc, #68]	; (800ddf0 <USB_DevInit+0x2e0>)
 800ddac:	4313      	orrs	r3, r2
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d005      	beq.n	800ddc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	f043 0208 	orr.w	r2, r3, #8
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d107      	bne.n	800ddda <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddd2:	f043 0304 	orr.w	r3, r3, #4
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dde6:	b004      	add	sp, #16
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	00800100 	.word	0x00800100
 800ddf0:	803c3800 	.word	0x803c3800

0800ddf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	019b      	lsls	r3, r3, #6
 800de06:	f043 0220 	orr.w	r2, r3, #32
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3301      	adds	r3, #1
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4a09      	ldr	r2, [pc, #36]	; (800de3c <USB_FlushTxFifo+0x48>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d901      	bls.n	800de20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800de1c:	2303      	movs	r3, #3
 800de1e:	e006      	b.n	800de2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	f003 0320 	and.w	r3, r3, #32
 800de28:	2b20      	cmp	r3, #32
 800de2a:	d0f0      	beq.n	800de0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	00030d40 	.word	0x00030d40

0800de40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2210      	movs	r2, #16
 800de50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3301      	adds	r3, #1
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4a09      	ldr	r2, [pc, #36]	; (800de80 <USB_FlushRxFifo+0x40>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d901      	bls.n	800de64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e006      	b.n	800de72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d0f0      	beq.n	800de52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	00030d40 	.word	0x00030d40

0800de84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	68f9      	ldr	r1, [r7, #12]
 800dea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dea4:	4313      	orrs	r3, r2
 800dea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800deb6:	b480      	push	{r7}
 800deb8:	b087      	sub	sp, #28
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	f003 0306 	and.w	r3, r3, #6
 800dece:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d102      	bne.n	800dedc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ded6:	2300      	movs	r3, #0
 800ded8:	75fb      	strb	r3, [r7, #23]
 800deda:	e00a      	b.n	800def2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d002      	beq.n	800dee8 <USB_GetDevSpeed+0x32>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b06      	cmp	r3, #6
 800dee6:	d102      	bne.n	800deee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dee8:	2302      	movs	r3, #2
 800deea:	75fb      	strb	r3, [r7, #23]
 800deec:	e001      	b.n	800def2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800deee:	230f      	movs	r3, #15
 800def0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800def2:	7dfb      	ldrb	r3, [r7, #23]
}
 800def4:	4618      	mov	r0, r3
 800def6:	371c      	adds	r7, #28
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df00:	b480      	push	{r7}
 800df02:	b085      	sub	sp, #20
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	785b      	ldrb	r3, [r3, #1]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d13a      	bne.n	800df92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df22:	69da      	ldr	r2, [r3, #28]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	f003 030f 	and.w	r3, r3, #15
 800df2c:	2101      	movs	r1, #1
 800df2e:	fa01 f303 	lsl.w	r3, r1, r3
 800df32:	b29b      	uxth	r3, r3
 800df34:	68f9      	ldr	r1, [r7, #12]
 800df36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df3a:	4313      	orrs	r3, r2
 800df3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	015a      	lsls	r2, r3, #5
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	4413      	add	r3, r2
 800df46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df50:	2b00      	cmp	r3, #0
 800df52:	d155      	bne.n	800e000 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	78db      	ldrb	r3, [r3, #3]
 800df6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	059b      	lsls	r3, r3, #22
 800df76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df78:	4313      	orrs	r3, r2
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	0151      	lsls	r1, r2, #5
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	440a      	add	r2, r1
 800df82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	e036      	b.n	800e000 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df98:	69da      	ldr	r2, [r3, #28]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	f003 030f 	and.w	r3, r3, #15
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa8:	041b      	lsls	r3, r3, #16
 800dfaa:	68f9      	ldr	r1, [r7, #12]
 800dfac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d11a      	bne.n	800e000 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	015a      	lsls	r2, r3, #5
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	78db      	ldrb	r3, [r3, #3]
 800dfe4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfe6:	430b      	orrs	r3, r1
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	0151      	lsls	r1, r2, #5
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	440a      	add	r2, r1
 800dff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dffe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3714      	adds	r7, #20
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
	...

0800e010 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	785b      	ldrb	r3, [r3, #1]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d135      	bne.n	800e098 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	f003 030f 	and.w	r3, r3, #15
 800e03c:	2101      	movs	r1, #1
 800e03e:	fa01 f303 	lsl.w	r3, r1, r3
 800e042:	b29b      	uxth	r3, r3
 800e044:	43db      	mvns	r3, r3
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e04c:	4013      	ands	r3, r2
 800e04e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e056:	69da      	ldr	r2, [r3, #28]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	2101      	movs	r1, #1
 800e062:	fa01 f303 	lsl.w	r3, r1, r3
 800e066:	b29b      	uxth	r3, r3
 800e068:	43db      	mvns	r3, r3
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e070:	4013      	ands	r3, r2
 800e072:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	015a      	lsls	r2, r3, #5
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	0159      	lsls	r1, r3, #5
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	440b      	add	r3, r1
 800e08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e08e:	4619      	mov	r1, r3
 800e090:	4b1f      	ldr	r3, [pc, #124]	; (800e110 <USB_DeactivateEndpoint+0x100>)
 800e092:	4013      	ands	r3, r2
 800e094:	600b      	str	r3, [r1, #0]
 800e096:	e034      	b.n	800e102 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	f003 030f 	and.w	r3, r3, #15
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ae:	041b      	lsls	r3, r3, #16
 800e0b0:	43db      	mvns	r3, r3
 800e0b2:	68f9      	ldr	r1, [r7, #12]
 800e0b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c2:	69da      	ldr	r2, [r3, #28]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f003 030f 	and.w	r3, r3, #15
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e0d2:	041b      	lsls	r3, r3, #16
 800e0d4:	43db      	mvns	r3, r3
 800e0d6:	68f9      	ldr	r1, [r7, #12]
 800e0d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0dc:	4013      	ands	r3, r2
 800e0de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	0159      	lsls	r1, r3, #5
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	440b      	add	r3, r1
 800e0f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4b05      	ldr	r3, [pc, #20]	; (800e114 <USB_DeactivateEndpoint+0x104>)
 800e0fe:	4013      	ands	r3, r2
 800e100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	ec337800 	.word	0xec337800
 800e114:	eff37800 	.word	0xeff37800

0800e118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08a      	sub	sp, #40	; 0x28
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	4613      	mov	r3, r2
 800e124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	785b      	ldrb	r3, [r3, #1]
 800e134:	2b01      	cmp	r3, #1
 800e136:	f040 815c 	bne.w	800e3f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d132      	bne.n	800e1a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	69ba      	ldr	r2, [r7, #24]
 800e152:	0151      	lsls	r1, r2, #5
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	440a      	add	r2, r1
 800e158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e15c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	015a      	lsls	r2, r3, #5
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	4413      	add	r3, r2
 800e16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	69ba      	ldr	r2, [r7, #24]
 800e176:	0151      	lsls	r1, r2, #5
 800e178:	69fa      	ldr	r2, [r7, #28]
 800e17a:	440a      	add	r2, r1
 800e17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	69ba      	ldr	r2, [r7, #24]
 800e196:	0151      	lsls	r1, r2, #5
 800e198:	69fa      	ldr	r2, [r7, #28]
 800e19a:	440a      	add	r2, r1
 800e19c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1a0:	0cdb      	lsrs	r3, r3, #19
 800e1a2:	04db      	lsls	r3, r3, #19
 800e1a4:	6113      	str	r3, [r2, #16]
 800e1a6:	e074      	b.n	800e292 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	015a      	lsls	r2, r3, #5
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	0151      	lsls	r1, r2, #5
 800e1ba:	69fa      	ldr	r2, [r7, #28]
 800e1bc:	440a      	add	r2, r1
 800e1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1c2:	0cdb      	lsrs	r3, r3, #19
 800e1c4:	04db      	lsls	r3, r3, #19
 800e1c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	015a      	lsls	r2, r3, #5
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	0151      	lsls	r1, r2, #5
 800e1da:	69fa      	ldr	r2, [r7, #28]
 800e1dc:	440a      	add	r2, r1
 800e1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	015a      	lsls	r2, r3, #5
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f8:	691a      	ldr	r2, [r3, #16]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6959      	ldr	r1, [r3, #20]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	440b      	add	r3, r1
 800e204:	1e59      	subs	r1, r3, #1
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e20e:	04d9      	lsls	r1, r3, #19
 800e210:	4b9d      	ldr	r3, [pc, #628]	; (800e488 <USB_EPStartXfer+0x370>)
 800e212:	400b      	ands	r3, r1
 800e214:	69b9      	ldr	r1, [r7, #24]
 800e216:	0148      	lsls	r0, r1, #5
 800e218:	69f9      	ldr	r1, [r7, #28]
 800e21a:	4401      	add	r1, r0
 800e21c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e220:	4313      	orrs	r3, r2
 800e222:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e230:	691a      	ldr	r2, [r3, #16]
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	695b      	ldr	r3, [r3, #20]
 800e236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e23a:	69b9      	ldr	r1, [r7, #24]
 800e23c:	0148      	lsls	r0, r1, #5
 800e23e:	69f9      	ldr	r1, [r7, #28]
 800e240:	4401      	add	r1, r0
 800e242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e246:	4313      	orrs	r3, r2
 800e248:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	78db      	ldrb	r3, [r3, #3]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d11f      	bne.n	800e292 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	015a      	lsls	r2, r3, #5
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	4413      	add	r3, r2
 800e25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	69ba      	ldr	r2, [r7, #24]
 800e262:	0151      	lsls	r1, r2, #5
 800e264:	69fa      	ldr	r2, [r7, #28]
 800e266:	440a      	add	r2, r1
 800e268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e26c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e270:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	015a      	lsls	r2, r3, #5
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	4413      	add	r3, r2
 800e27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	0151      	lsls	r1, r2, #5
 800e284:	69fa      	ldr	r2, [r7, #28]
 800e286:	440a      	add	r2, r1
 800e288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e28c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e290:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d14b      	bne.n	800e330 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d009      	beq.n	800e2b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	015a      	lsls	r2, r3, #5
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	78db      	ldrb	r3, [r3, #3]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d128      	bne.n	800e30e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d110      	bne.n	800e2ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	69ba      	ldr	r2, [r7, #24]
 800e2dc:	0151      	lsls	r1, r2, #5
 800e2de:	69fa      	ldr	r2, [r7, #28]
 800e2e0:	440a      	add	r2, r1
 800e2e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2ea:	6013      	str	r3, [r2, #0]
 800e2ec:	e00f      	b.n	800e30e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	015a      	lsls	r2, r3, #5
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	0151      	lsls	r1, r2, #5
 800e300:	69fa      	ldr	r2, [r7, #28]
 800e302:	440a      	add	r2, r1
 800e304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e30c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	69ba      	ldr	r2, [r7, #24]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	69fa      	ldr	r2, [r7, #28]
 800e322:	440a      	add	r2, r1
 800e324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	e12f      	b.n	800e590 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	015a      	lsls	r2, r3, #5
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	4413      	add	r3, r2
 800e338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	69ba      	ldr	r2, [r7, #24]
 800e340:	0151      	lsls	r1, r2, #5
 800e342:	69fa      	ldr	r2, [r7, #28]
 800e344:	440a      	add	r2, r1
 800e346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e34a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e34e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	78db      	ldrb	r3, [r3, #3]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d015      	beq.n	800e384 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 8117 	beq.w	800e590 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	f003 030f 	and.w	r3, r3, #15
 800e372:	2101      	movs	r1, #1
 800e374:	fa01 f303 	lsl.w	r3, r1, r3
 800e378:	69f9      	ldr	r1, [r7, #28]
 800e37a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e37e:	4313      	orrs	r3, r2
 800e380:	634b      	str	r3, [r1, #52]	; 0x34
 800e382:	e105      	b.n	800e590 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e390:	2b00      	cmp	r3, #0
 800e392:	d110      	bne.n	800e3b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	69ba      	ldr	r2, [r7, #24]
 800e3a4:	0151      	lsls	r1, r2, #5
 800e3a6:	69fa      	ldr	r2, [r7, #28]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	e00f      	b.n	800e3d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	0151      	lsls	r1, r2, #5
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	440a      	add	r2, r1
 800e3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	68d9      	ldr	r1, [r3, #12]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	b298      	uxth	r0, r3
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 fa2b 	bl	800e846 <USB_WritePacket>
 800e3f0:	e0ce      	b.n	800e590 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	015a      	lsls	r2, r3, #5
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	69ba      	ldr	r2, [r7, #24]
 800e402:	0151      	lsls	r1, r2, #5
 800e404:	69fa      	ldr	r2, [r7, #28]
 800e406:	440a      	add	r2, r1
 800e408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e40c:	0cdb      	lsrs	r3, r3, #19
 800e40e:	04db      	lsls	r3, r3, #19
 800e410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	015a      	lsls	r2, r3, #5
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	4413      	add	r3, r2
 800e41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	69ba      	ldr	r2, [r7, #24]
 800e422:	0151      	lsls	r1, r2, #5
 800e424:	69fa      	ldr	r2, [r7, #28]
 800e426:	440a      	add	r2, r1
 800e428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e42c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e434:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	695b      	ldr	r3, [r3, #20]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d126      	bne.n	800e48c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	015a      	lsls	r2, r3, #5
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	4413      	add	r3, r2
 800e446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44a:	691a      	ldr	r2, [r3, #16]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e454:	69b9      	ldr	r1, [r7, #24]
 800e456:	0148      	lsls	r0, r1, #5
 800e458:	69f9      	ldr	r1, [r7, #28]
 800e45a:	4401      	add	r1, r0
 800e45c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e460:	4313      	orrs	r3, r2
 800e462:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	69ba      	ldr	r2, [r7, #24]
 800e474:	0151      	lsls	r1, r2, #5
 800e476:	69fa      	ldr	r2, [r7, #28]
 800e478:	440a      	add	r2, r1
 800e47a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e47e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e482:	6113      	str	r3, [r2, #16]
 800e484:	e036      	b.n	800e4f4 <USB_EPStartXfer+0x3dc>
 800e486:	bf00      	nop
 800e488:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	695a      	ldr	r2, [r3, #20]
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	4413      	add	r3, r2
 800e496:	1e5a      	subs	r2, r3, #1
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	8afb      	ldrh	r3, [r7, #22]
 800e4b2:	04d9      	lsls	r1, r3, #19
 800e4b4:	4b39      	ldr	r3, [pc, #228]	; (800e59c <USB_EPStartXfer+0x484>)
 800e4b6:	400b      	ands	r3, r1
 800e4b8:	69b9      	ldr	r1, [r7, #24]
 800e4ba:	0148      	lsls	r0, r1, #5
 800e4bc:	69f9      	ldr	r1, [r7, #28]
 800e4be:	4401      	add	r1, r0
 800e4c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	015a      	lsls	r2, r3, #5
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d4:	691a      	ldr	r2, [r3, #16]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	8af9      	ldrh	r1, [r7, #22]
 800e4dc:	fb01 f303 	mul.w	r3, r1, r3
 800e4e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4e4:	69b9      	ldr	r1, [r7, #24]
 800e4e6:	0148      	lsls	r0, r1, #5
 800e4e8:	69f9      	ldr	r1, [r7, #28]
 800e4ea:	4401      	add	r1, r0
 800e4ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4f4:	79fb      	ldrb	r3, [r7, #7]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d10d      	bne.n	800e516 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d009      	beq.n	800e516 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	68d9      	ldr	r1, [r3, #12]
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	015a      	lsls	r2, r3, #5
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	4413      	add	r3, r2
 800e50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e512:	460a      	mov	r2, r1
 800e514:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	78db      	ldrb	r3, [r3, #3]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d128      	bne.n	800e570 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d110      	bne.n	800e550 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	015a      	lsls	r2, r3, #5
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	4413      	add	r3, r2
 800e536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	0151      	lsls	r1, r2, #5
 800e540:	69fa      	ldr	r2, [r7, #28]
 800e542:	440a      	add	r2, r1
 800e544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	e00f      	b.n	800e570 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	0151      	lsls	r1, r2, #5
 800e562:	69fa      	ldr	r2, [r7, #28]
 800e564:	440a      	add	r2, r1
 800e566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e56e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	4413      	add	r3, r2
 800e578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	0151      	lsls	r1, r2, #5
 800e582:	69fa      	ldr	r2, [r7, #28]
 800e584:	440a      	add	r2, r1
 800e586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e58a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e58e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3720      	adds	r7, #32
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	1ff80000 	.word	0x1ff80000

0800e5a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b087      	sub	sp, #28
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	785b      	ldrb	r3, [r3, #1]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	f040 80cd 	bne.w	800e75c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d132      	bne.n	800e630 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	015a      	lsls	r2, r3, #5
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	0151      	lsls	r1, r2, #5
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	440a      	add	r2, r1
 800e5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e5e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e5ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	0151      	lsls	r1, r2, #5
 800e600:	697a      	ldr	r2, [r7, #20]
 800e602:	440a      	add	r2, r1
 800e604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e60c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	4413      	add	r3, r2
 800e616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	693a      	ldr	r2, [r7, #16]
 800e61e:	0151      	lsls	r1, r2, #5
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	440a      	add	r2, r1
 800e624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e628:	0cdb      	lsrs	r3, r3, #19
 800e62a:	04db      	lsls	r3, r3, #19
 800e62c:	6113      	str	r3, [r2, #16]
 800e62e:	e04e      	b.n	800e6ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	693a      	ldr	r2, [r7, #16]
 800e640:	0151      	lsls	r1, r2, #5
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	440a      	add	r2, r1
 800e646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e64a:	0cdb      	lsrs	r3, r3, #19
 800e64c:	04db      	lsls	r3, r3, #19
 800e64e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e65c:	691b      	ldr	r3, [r3, #16]
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	0151      	lsls	r1, r2, #5
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	440a      	add	r2, r1
 800e666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e66a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e66e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e672:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	695a      	ldr	r2, [r3, #20]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d903      	bls.n	800e688 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	015a      	lsls	r2, r3, #5
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	4413      	add	r3, r2
 800e690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	0151      	lsls	r1, r2, #5
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	440a      	add	r2, r1
 800e69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e6a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	015a      	lsls	r2, r3, #5
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b4:	691a      	ldr	r2, [r3, #16]
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6be:	6939      	ldr	r1, [r7, #16]
 800e6c0:	0148      	lsls	r0, r1, #5
 800e6c2:	6979      	ldr	r1, [r7, #20]
 800e6c4:	4401      	add	r1, r0
 800e6c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d11e      	bne.n	800e712 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d009      	beq.n	800e6f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	015a      	lsls	r2, r3, #5
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	0151      	lsls	r1, r2, #5
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	440a      	add	r2, r1
 800e706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e70a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	e092      	b.n	800e838 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	0151      	lsls	r1, r2, #5
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	440a      	add	r2, r1
 800e728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e72c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e730:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d07e      	beq.n	800e838 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 030f 	and.w	r3, r3, #15
 800e74a:	2101      	movs	r1, #1
 800e74c:	fa01 f303 	lsl.w	r3, r1, r3
 800e750:	6979      	ldr	r1, [r7, #20]
 800e752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e756:	4313      	orrs	r3, r2
 800e758:	634b      	str	r3, [r1, #52]	; 0x34
 800e75a:	e06d      	b.n	800e838 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	015a      	lsls	r2, r3, #5
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	4413      	add	r3, r2
 800e764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	0151      	lsls	r1, r2, #5
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	440a      	add	r2, r1
 800e772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e776:	0cdb      	lsrs	r3, r3, #19
 800e778:	04db      	lsls	r3, r3, #19
 800e77a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	0151      	lsls	r1, r2, #5
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	440a      	add	r2, r1
 800e792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e79a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e79e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d003      	beq.n	800e7b0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	689a      	ldr	r2, [r3, #8]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	015a      	lsls	r2, r3, #5
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	693a      	ldr	r2, [r7, #16]
 800e7c0:	0151      	lsls	r1, r2, #5
 800e7c2:	697a      	ldr	r2, [r7, #20]
 800e7c4:	440a      	add	r2, r1
 800e7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e7ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	015a      	lsls	r2, r3, #5
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7dc:	691a      	ldr	r2, [r3, #16]
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7e6:	6939      	ldr	r1, [r7, #16]
 800e7e8:	0148      	lsls	r0, r1, #5
 800e7ea:	6979      	ldr	r1, [r7, #20]
 800e7ec:	4401      	add	r1, r0
 800e7ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e7f6:	79fb      	ldrb	r3, [r7, #7]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d10d      	bne.n	800e818 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d009      	beq.n	800e818 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	68d9      	ldr	r1, [r3, #12]
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e814:	460a      	mov	r2, r1
 800e816:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	015a      	lsls	r2, r3, #5
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	4413      	add	r3, r2
 800e820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	0151      	lsls	r1, r2, #5
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	440a      	add	r2, r1
 800e82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e846:	b480      	push	{r7}
 800e848:	b089      	sub	sp, #36	; 0x24
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	60f8      	str	r0, [r7, #12]
 800e84e:	60b9      	str	r1, [r7, #8]
 800e850:	4611      	mov	r1, r2
 800e852:	461a      	mov	r2, r3
 800e854:	460b      	mov	r3, r1
 800e856:	71fb      	strb	r3, [r7, #7]
 800e858:	4613      	mov	r3, r2
 800e85a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d11a      	bne.n	800e8a2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e86c:	88bb      	ldrh	r3, [r7, #4]
 800e86e:	3303      	adds	r3, #3
 800e870:	089b      	lsrs	r3, r3, #2
 800e872:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e874:	2300      	movs	r3, #0
 800e876:	61bb      	str	r3, [r7, #24]
 800e878:	e00f      	b.n	800e89a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	031a      	lsls	r2, r3, #12
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	4413      	add	r3, r2
 800e882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e886:	461a      	mov	r2, r3
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	3304      	adds	r3, #4
 800e892:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	3301      	adds	r3, #1
 800e898:	61bb      	str	r3, [r7, #24]
 800e89a:	69ba      	ldr	r2, [r7, #24]
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d3eb      	bcc.n	800e87a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3724      	adds	r7, #36	; 0x24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b089      	sub	sp, #36	; 0x24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	3303      	adds	r3, #3
 800e8ca:	089b      	lsrs	r3, r3, #2
 800e8cc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61bb      	str	r3, [r7, #24]
 800e8d2:	e00b      	b.n	800e8ec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	601a      	str	r2, [r3, #0]
    pDest++;
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	61bb      	str	r3, [r7, #24]
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d3ef      	bcc.n	800e8d4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e8f4:	69fb      	ldr	r3, [r7, #28]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3724      	adds	r7, #36	; 0x24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e902:	b480      	push	{r7}
 800e904:	b085      	sub	sp, #20
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	785b      	ldrb	r3, [r3, #1]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d12c      	bne.n	800e978 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	db12      	blt.n	800e956 <USB_EPSetStall+0x54>
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00f      	beq.n	800e956 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	015a      	lsls	r2, r3, #5
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68ba      	ldr	r2, [r7, #8]
 800e946:	0151      	lsls	r1, r2, #5
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	440a      	add	r2, r1
 800e94c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e954:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	015a      	lsls	r2, r3, #5
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	4413      	add	r3, r2
 800e95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	0151      	lsls	r1, r2, #5
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	440a      	add	r2, r1
 800e96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e974:	6013      	str	r3, [r2, #0]
 800e976:	e02b      	b.n	800e9d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	015a      	lsls	r2, r3, #5
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4413      	add	r3, r2
 800e980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	db12      	blt.n	800e9b0 <USB_EPSetStall+0xae>
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00f      	beq.n	800e9b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e9ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	0151      	lsls	r1, r2, #5
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	440a      	add	r2, r1
 800e9c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e9ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	785b      	ldrb	r3, [r3, #1]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d128      	bne.n	800ea4c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	015a      	lsls	r2, r3, #5
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	4413      	add	r3, r2
 800ea02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	0151      	lsls	r1, r2, #5
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	440a      	add	r2, r1
 800ea10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	78db      	ldrb	r3, [r3, #3]
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d003      	beq.n	800ea2a <USB_EPClearStall+0x4c>
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	78db      	ldrb	r3, [r3, #3]
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d138      	bne.n	800ea9c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	015a      	lsls	r2, r3, #5
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	4413      	add	r3, r2
 800ea32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	0151      	lsls	r1, r2, #5
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	440a      	add	r2, r1
 800ea40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	e027      	b.n	800ea9c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	015a      	lsls	r2, r3, #5
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4413      	add	r3, r2
 800ea54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	0151      	lsls	r1, r2, #5
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	440a      	add	r2, r1
 800ea62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	78db      	ldrb	r3, [r3, #3]
 800ea70:	2b03      	cmp	r3, #3
 800ea72:	d003      	beq.n	800ea7c <USB_EPClearStall+0x9e>
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	78db      	ldrb	r3, [r3, #3]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d10f      	bne.n	800ea9c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	0151      	lsls	r1, r2, #5
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	440a      	add	r2, r1
 800ea92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea9a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b085      	sub	sp, #20
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	460b      	mov	r3, r1
 800eab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eac8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eacc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eade:	68f9      	ldr	r1, [r7, #12]
 800eae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eae4:	4313      	orrs	r3, r2
 800eae6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb10:	f023 0302 	bic.w	r3, r3, #2
 800eb14:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800eb16:	2003      	movs	r0, #3
 800eb18:	f7f7 fa8c 	bl	8006034 <HAL_Delay>

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb40:	f043 0302 	orr.w	r3, r3, #2
 800eb44:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800eb46:	2003      	movs	r0, #3
 800eb48:	f7f7 fa74 	bl	8006034 <HAL_Delay>

  return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eb56:	b480      	push	{r7}
 800eb58:	b085      	sub	sp, #20
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb98:	69db      	ldr	r3, [r3, #28]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	4013      	ands	r3, r2
 800eb9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	0c1b      	lsrs	r3, r3, #16
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	b29b      	uxth	r3, r3
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	460b      	mov	r3, r1
 800ebee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ebf4:	78fb      	ldrb	r3, [r7, #3]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	4013      	ands	r3, r2
 800ec10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec12:	68bb      	ldr	r3, [r7, #8]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3714      	adds	r7, #20
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec44:	78fb      	ldrb	r3, [r7, #3]
 800ec46:	f003 030f 	and.w	r3, r3, #15
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec50:	01db      	lsls	r3, r3, #7
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec5a:	78fb      	ldrb	r3, [r7, #3]
 800ec5c:	015a      	lsls	r2, r3, #5
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	4413      	add	r3, r2
 800ec62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec6e:	68bb      	ldr	r3, [r7, #8]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	371c      	adds	r7, #28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	695b      	ldr	r3, [r3, #20]
 800ec88:	f003 0301 	and.w	r3, r3, #1
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ecb6:	f023 0307 	bic.w	r3, r3, #7
 800ecba:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	f003 0306 	and.w	r3, r3, #6
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d109      	bne.n	800ece0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecda:	f043 0303 	orr.w	r3, r3, #3
 800ecde:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
	...

0800ed04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	333c      	adds	r3, #60	; 0x3c
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	4a26      	ldr	r2, [pc, #152]	; (800edbc <USB_EP0_OutStart+0xb8>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d90a      	bls.n	800ed3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed38:	d101      	bne.n	800ed3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e037      	b.n	800edae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed44:	461a      	mov	r2, r3
 800ed46:	2300      	movs	r3, #0
 800ed48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed50:	691b      	ldr	r3, [r3, #16]
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed64:	691b      	ldr	r3, [r3, #16]
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed6c:	f043 0318 	orr.w	r3, r3, #24
 800ed70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ed84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed86:	7afb      	ldrb	r3, [r7, #11]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d10f      	bne.n	800edac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed92:	461a      	mov	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eda6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800edaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	371c      	adds	r7, #28
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	4f54300a 	.word	0x4f54300a

0800edc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800edc8:	2300      	movs	r3, #0
 800edca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	3301      	adds	r3, #1
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	4a13      	ldr	r2, [pc, #76]	; (800ee24 <USB_CoreReset+0x64>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d901      	bls.n	800edde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800edda:	2303      	movs	r3, #3
 800eddc:	e01b      	b.n	800ee16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	daf2      	bge.n	800edcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ede6:	2300      	movs	r3, #0
 800ede8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	f043 0201 	orr.w	r2, r3, #1
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	3301      	adds	r3, #1
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	4a09      	ldr	r2, [pc, #36]	; (800ee24 <USB_CoreReset+0x64>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d901      	bls.n	800ee08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e006      	b.n	800ee16 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d0f0      	beq.n	800edf6 <USB_CoreReset+0x36>

  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	00030d40 	.word	0x00030d40

0800ee28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7c1b      	ldrb	r3, [r3, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d115      	bne.n	800ee6c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee44:	2202      	movs	r2, #2
 800ee46:	2181      	movs	r1, #129	; 0x81
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f006 ff14 	bl	8015c76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2201      	movs	r2, #1
 800ee52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ee54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee58:	2202      	movs	r2, #2
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f006 ff0a 	bl	8015c76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800ee6a:	e012      	b.n	800ee92 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee6c:	2340      	movs	r3, #64	; 0x40
 800ee6e:	2202      	movs	r2, #2
 800ee70:	2181      	movs	r1, #129	; 0x81
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f006 feff 	bl	8015c76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ee7e:	2340      	movs	r3, #64	; 0x40
 800ee80:	2202      	movs	r2, #2
 800ee82:	2101      	movs	r1, #1
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f006 fef6 	bl	8015c76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ee92:	2308      	movs	r3, #8
 800ee94:	2203      	movs	r2, #3
 800ee96:	2182      	movs	r1, #130	; 0x82
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f006 feec 	bl	8015c76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800eea4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800eea8:	f007 f9a4 	bl	80161f4 <malloc>
 800eeac:	4603      	mov	r3, r0
 800eeae:	461a      	mov	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d102      	bne.n	800eec6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800eec0:	2301      	movs	r3, #1
 800eec2:	73fb      	strb	r3, [r7, #15]
 800eec4:	e026      	b.n	800ef14 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eecc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	7c1b      	ldrb	r3, [r3, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d109      	bne.n	800ef04 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eefa:	2101      	movs	r1, #1
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f006 ffab 	bl	8015e58 <USBD_LL_PrepareReceive>
 800ef02:	e007      	b.n	800ef14 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef0a:	2340      	movs	r3, #64	; 0x40
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f006 ffa2 	bl	8015e58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	460b      	mov	r3, r1
 800ef28:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef2e:	2181      	movs	r1, #129	; 0x81
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f006 fec6 	bl	8015cc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef3c:	2101      	movs	r1, #1
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f006 febf 	bl	8015cc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ef4c:	2182      	movs	r1, #130	; 0x82
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f006 feb7 	bl	8015cc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00e      	beq.n	800ef82 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ef74:	4618      	mov	r0, r3
 800ef76:	f007 f945 	bl	8016204 <free>
    pdev->pClassData = NULL;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ef9c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800efa2:	2300      	movs	r3, #0
 800efa4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800efa6:	2300      	movs	r3, #0
 800efa8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d039      	beq.n	800f02a <USBD_CDC_Setup+0x9e>
 800efb6:	2b20      	cmp	r3, #32
 800efb8:	d17c      	bne.n	800f0b4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	88db      	ldrh	r3, [r3, #6]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d029      	beq.n	800f016 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b25b      	sxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	da11      	bge.n	800eff0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800efd8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	88d2      	ldrh	r2, [r2, #6]
 800efde:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800efe0:	6939      	ldr	r1, [r7, #16]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	88db      	ldrh	r3, [r3, #6]
 800efe6:	461a      	mov	r2, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f001 f99b 	bl	8010324 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800efee:	e068      	b.n	800f0c2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	785a      	ldrb	r2, [r3, #1]
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	88db      	ldrh	r3, [r3, #6]
 800effe:	b2da      	uxtb	r2, r3
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f006:	6939      	ldr	r1, [r7, #16]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	88db      	ldrh	r3, [r3, #6]
 800f00c:	461a      	mov	r2, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f001 f9b6 	bl	8010380 <USBD_CtlPrepareRx>
    break;
 800f014:	e055      	b.n	800f0c2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	683a      	ldr	r2, [r7, #0]
 800f020:	7850      	ldrb	r0, [r2, #1]
 800f022:	2200      	movs	r2, #0
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	4798      	blx	r3
    break;
 800f028:	e04b      	b.n	800f0c2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	785b      	ldrb	r3, [r3, #1]
 800f02e:	2b0a      	cmp	r3, #10
 800f030:	d017      	beq.n	800f062 <USBD_CDC_Setup+0xd6>
 800f032:	2b0b      	cmp	r3, #11
 800f034:	d029      	beq.n	800f08a <USBD_CDC_Setup+0xfe>
 800f036:	2b00      	cmp	r3, #0
 800f038:	d133      	bne.n	800f0a2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f040:	2b03      	cmp	r3, #3
 800f042:	d107      	bne.n	800f054 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800f044:	f107 030c 	add.w	r3, r7, #12
 800f048:	2202      	movs	r2, #2
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f001 f969 	bl	8010324 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f052:	e02e      	b.n	800f0b2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f001 f8f9 	bl	801024e <USBD_CtlError>
			  ret = USBD_FAIL;
 800f05c:	2302      	movs	r3, #2
 800f05e:	75fb      	strb	r3, [r7, #23]
      break;
 800f060:	e027      	b.n	800f0b2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f068:	2b03      	cmp	r3, #3
 800f06a:	d107      	bne.n	800f07c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800f06c:	f107 030f 	add.w	r3, r7, #15
 800f070:	2201      	movs	r2, #1
 800f072:	4619      	mov	r1, r3
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f001 f955 	bl	8010324 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f07a:	e01a      	b.n	800f0b2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f001 f8e5 	bl	801024e <USBD_CtlError>
			  ret = USBD_FAIL;
 800f084:	2302      	movs	r3, #2
 800f086:	75fb      	strb	r3, [r7, #23]
      break;
 800f088:	e013      	b.n	800f0b2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f090:	2b03      	cmp	r3, #3
 800f092:	d00d      	beq.n	800f0b0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f001 f8d9 	bl	801024e <USBD_CtlError>
			  ret = USBD_FAIL;
 800f09c:	2302      	movs	r3, #2
 800f09e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f0a0:	e006      	b.n	800f0b0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f001 f8d2 	bl	801024e <USBD_CtlError>
      ret = USBD_FAIL;
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f0ae:	e000      	b.n	800f0b2 <USBD_CDC_Setup+0x126>
      break;
 800f0b0:	bf00      	nop
    }
    break;
 800f0b2:	e006      	b.n	800f0c2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f001 f8c9 	bl	801024e <USBD_CtlError>
    ret = USBD_FAIL;
 800f0bc:	2302      	movs	r3, #2
 800f0be:	75fb      	strb	r3, [r7, #23]
    break;
 800f0c0:	bf00      	nop
  }

  return ret;
 800f0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f0e6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d03a      	beq.n	800f168 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f0f2:	78fa      	ldrb	r2, [r7, #3]
 800f0f4:	6879      	ldr	r1, [r7, #4]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	4413      	add	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	440b      	add	r3, r1
 800f100:	331c      	adds	r3, #28
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d029      	beq.n	800f15c <USBD_CDC_DataIn+0x90>
 800f108:	78fa      	ldrb	r2, [r7, #3]
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	4613      	mov	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4413      	add	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	440b      	add	r3, r1
 800f116:	331c      	adds	r3, #28
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	78f9      	ldrb	r1, [r7, #3]
 800f11c:	68b8      	ldr	r0, [r7, #8]
 800f11e:	460b      	mov	r3, r1
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	1a5b      	subs	r3, r3, r1
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4403      	add	r3, r0
 800f128:	3344      	adds	r3, #68	; 0x44
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f130:	fb03 f301 	mul.w	r3, r3, r1
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d110      	bne.n	800f15c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f13a:	78fa      	ldrb	r2, [r7, #3]
 800f13c:	6879      	ldr	r1, [r7, #4]
 800f13e:	4613      	mov	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4413      	add	r3, r2
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	440b      	add	r3, r1
 800f148:	331c      	adds	r3, #28
 800f14a:	2200      	movs	r2, #0
 800f14c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800f14e:	78f9      	ldrb	r1, [r7, #3]
 800f150:	2300      	movs	r3, #0
 800f152:	2200      	movs	r2, #0
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f006 fe5c 	bl	8015e12 <USBD_LL_Transmit>
 800f15a:	e003      	b.n	800f164 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	e000      	b.n	800f16a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f168:	2302      	movs	r3, #2
  }
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	460b      	mov	r3, r1
 800f17c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f184:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f186:	78fb      	ldrb	r3, [r7, #3]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f006 fe87 	bl	8015e9e <USBD_LL_GetRxDataSize>
 800f190:	4602      	mov	r2, r0
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00d      	beq.n	800f1be <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	4798      	blx	r3

    return USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e000      	b.n	800f1c0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f1be:	2302      	movs	r3, #2
  }
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f1d6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d015      	beq.n	800f20e <USBD_CDC_EP0_RxReady+0x46>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f1e8:	2bff      	cmp	r3, #255	; 0xff
 800f1ea:	d010      	beq.n	800f20e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f1fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f202:	b292      	uxth	r2, r2
 800f204:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	22ff      	movs	r2, #255	; 0xff
 800f20a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2243      	movs	r2, #67	; 0x43
 800f224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f226:	4b03      	ldr	r3, [pc, #12]	; (800f234 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f228:	4618      	mov	r0, r3
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	20000094 	.word	0x20000094

0800f238 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2243      	movs	r2, #67	; 0x43
 800f244:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f246:	4b03      	ldr	r3, [pc, #12]	; (800f254 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f248:	4618      	mov	r0, r3
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr
 800f254:	20000050 	.word	0x20000050

0800f258 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2243      	movs	r2, #67	; 0x43
 800f264:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f266:	4b03      	ldr	r3, [pc, #12]	; (800f274 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	200000d8 	.word	0x200000d8

0800f278 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	220a      	movs	r2, #10
 800f284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f286:	4b03      	ldr	r3, [pc, #12]	; (800f294 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr
 800f294:	2000000c 	.word	0x2000000c

0800f298 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d005      	beq.n	800f2b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b087      	sub	sp, #28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	60b9      	str	r1, [r7, #8]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2da:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f2e4:	88fa      	ldrh	r2, [r7, #6]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	371c      	adds	r7, #28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800f2fa:	b480      	push	{r7}
 800f2fc:	b085      	sub	sp, #20
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f30a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b084      	sub	sp, #16
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f330:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d017      	beq.n	800f36c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	7c1b      	ldrb	r3, [r3, #16]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d109      	bne.n	800f358 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f34a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f34e:	2101      	movs	r1, #1
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f006 fd81 	bl	8015e58 <USBD_LL_PrepareReceive>
 800f356:	e007      	b.n	800f368 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f35e:	2340      	movs	r3, #64	; 0x40
 800f360:	2101      	movs	r1, #1
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f006 fd78 	bl	8015e58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f368:	2300      	movs	r3, #0
 800f36a:	e000      	b.n	800f36e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f36c:	2302      	movs	r3, #2
  }
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	4613      	mov	r3, r2
 800f382:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f38a:	2302      	movs	r3, #2
 800f38c:	e01a      	b.n	800f3c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f394:	2b00      	cmp	r3, #0
 800f396:	d003      	beq.n	800f3a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2200      	movs	r2, #0
 800f39c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	79fa      	ldrb	r2, [r7, #7]
 800f3ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f006 fbf3 	bl	8015ba8 <USBD_LL_Init>

  return USBD_OK;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d006      	beq.n	800f3ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]
 800f3ec:	e001      	b.n	800f3f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3714      	adds	r7, #20
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f006 fc19 	bl	8015c40 <USBD_LL_Start>

  return USBD_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	460b      	mov	r3, r1
 800f438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f43a:	2302      	movs	r3, #2
 800f43c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00c      	beq.n	800f462 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	78fa      	ldrb	r2, [r7, #3]
 800f452:	4611      	mov	r1, r2
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	4798      	blx	r3
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f45e:	2300      	movs	r3, #0
 800f460:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f462:	7bfb      	ldrb	r3, [r7, #15]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	78fa      	ldrb	r2, [r7, #3]
 800f482:	4611      	mov	r1, r2
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	4798      	blx	r3
  return USBD_OK;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b082      	sub	sp, #8
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
 800f49a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fe95 	bl	80101d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f4c6:	f003 031f 	and.w	r3, r3, #31
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d00c      	beq.n	800f4e8 <USBD_LL_SetupStage+0x56>
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d302      	bcc.n	800f4d8 <USBD_LL_SetupStage+0x46>
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d010      	beq.n	800f4f8 <USBD_LL_SetupStage+0x66>
 800f4d6:	e017      	b.n	800f508 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 fa05 	bl	800f8f0 <USBD_StdDevReq>
    break;
 800f4e6:	e01a      	b.n	800f51e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fa67 	bl	800f9c4 <USBD_StdItfReq>
    break;
 800f4f6:	e012      	b.n	800f51e <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 faa5 	bl	800fa50 <USBD_StdEPReq>
    break;
 800f506:	e00a      	b.n	800f51e <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f50e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f512:	b2db      	uxtb	r3, r3
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f006 fbf2 	bl	8015d00 <USBD_LL_StallEP>
    break;
 800f51c:	bf00      	nop
  }

  return USBD_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	460b      	mov	r3, r1
 800f532:	607a      	str	r2, [r7, #4]
 800f534:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800f536:	7afb      	ldrb	r3, [r7, #11]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d14b      	bne.n	800f5d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f542:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f54a:	2b03      	cmp	r3, #3
 800f54c:	d134      	bne.n	800f5b8 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	68da      	ldr	r2, [r3, #12]
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	429a      	cmp	r2, r3
 800f558:	d919      	bls.n	800f58e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	1ad2      	subs	r2, r2, r3
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	68da      	ldr	r2, [r3, #12]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f570:	429a      	cmp	r2, r3
 800f572:	d203      	bcs.n	800f57c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800f578:	b29b      	uxth	r3, r3
 800f57a:	e002      	b.n	800f582 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f580:	b29b      	uxth	r3, r3
 800f582:	461a      	mov	r2, r3
 800f584:	6879      	ldr	r1, [r7, #4]
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f000 ff18 	bl	80103bc <USBD_CtlContinueRx>
 800f58c:	e038      	b.n	800f600 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f5a0:	2b03      	cmp	r3, #3
 800f5a2:	d105      	bne.n	800f5b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f000 ff15 	bl	80103e0 <USBD_CtlSendStatus>
 800f5b6:	e023      	b.n	800f600 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f5be:	2b05      	cmp	r3, #5
 800f5c0:	d11e      	bne.n	800f600 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f006 fb97 	bl	8015d00 <USBD_LL_StallEP>
 800f5d2:	e015      	b.n	800f600 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00d      	beq.n	800f5fc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d108      	bne.n	800f5fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	7afa      	ldrb	r2, [r7, #11]
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	4798      	blx	r3
 800f5fa:	e001      	b.n	800f600 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	e000      	b.n	800f602 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3718      	adds	r7, #24
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b086      	sub	sp, #24
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	460b      	mov	r3, r1
 800f614:	607a      	str	r2, [r7, #4]
 800f616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f618:	7afb      	ldrb	r3, [r7, #11]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d17f      	bne.n	800f71e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3314      	adds	r3, #20
 800f622:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d15c      	bne.n	800f6e8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	68da      	ldr	r2, [r3, #12]
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	691b      	ldr	r3, [r3, #16]
 800f636:	429a      	cmp	r2, r3
 800f638:	d915      	bls.n	800f666 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	68da      	ldr	r2, [r3, #12]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	691b      	ldr	r3, [r3, #16]
 800f642:	1ad2      	subs	r2, r2, r3
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	461a      	mov	r2, r3
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f000 fe82 	bl	801035c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f658:	2300      	movs	r3, #0
 800f65a:	2200      	movs	r2, #0
 800f65c:	2100      	movs	r1, #0
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f006 fbfa 	bl	8015e58 <USBD_LL_PrepareReceive>
 800f664:	e04e      	b.n	800f704 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	6912      	ldr	r2, [r2, #16]
 800f66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f672:	fb02 f201 	mul.w	r2, r2, r1
 800f676:	1a9b      	subs	r3, r3, r2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d11c      	bne.n	800f6b6 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	689a      	ldr	r2, [r3, #8]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f684:	429a      	cmp	r2, r3
 800f686:	d316      	bcc.n	800f6b6 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	689a      	ldr	r2, [r3, #8]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800f692:	429a      	cmp	r2, r3
 800f694:	d20f      	bcs.n	800f6b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f696:	2200      	movs	r2, #0
 800f698:	2100      	movs	r1, #0
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f000 fe5e 	bl	801035c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f006 fbd2 	bl	8015e58 <USBD_LL_PrepareReceive>
 800f6b4:	e026      	b.n	800f704 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00a      	beq.n	800f6d8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f6c8:	2b03      	cmp	r3, #3
 800f6ca:	d105      	bne.n	800f6d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f6d8:	2180      	movs	r1, #128	; 0x80
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f006 fb10 	bl	8015d00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 fe90 	bl	8010406 <USBD_CtlReceiveStatus>
 800f6e6:	e00d      	b.n	800f704 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f6ee:	2b04      	cmp	r3, #4
 800f6f0:	d004      	beq.n	800f6fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d103      	bne.n	800f704 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f6fc:	2180      	movs	r1, #128	; 0x80
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f006 fafe 	bl	8015d00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d11d      	bne.n	800f74a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f7ff fe82 	bl	800f418 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800f71c:	e015      	b.n	800f74a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00d      	beq.n	800f746 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800f730:	2b03      	cmp	r3, #3
 800f732:	d108      	bne.n	800f746 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	7afa      	ldrb	r2, [r7, #11]
 800f73e:	4611      	mov	r1, r2
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	4798      	blx	r3
 800f744:	e001      	b.n	800f74a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f746:	2302      	movs	r3, #2
 800f748:	e000      	b.n	800f74c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f75c:	2340      	movs	r3, #64	; 0x40
 800f75e:	2200      	movs	r2, #0
 800f760:	2100      	movs	r1, #0
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f006 fa87 	bl	8015c76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2240      	movs	r2, #64	; 0x40
 800f774:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f778:	2340      	movs	r3, #64	; 0x40
 800f77a:	2200      	movs	r2, #0
 800f77c:	2180      	movs	r1, #128	; 0x80
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f006 fa79 	bl	8015c76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2201      	movs	r2, #1
 800f788:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2240      	movs	r2, #64	; 0x40
 800f78e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d009      	beq.n	800f7cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	6852      	ldr	r2, [r2, #4]
 800f7c4:	b2d2      	uxtb	r2, r2
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	4798      	blx	r3
  }

  return USBD_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b083      	sub	sp, #12
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	460b      	mov	r3, r1
 800f7e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	78fa      	ldrb	r2, [r7, #3]
 800f7e6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800f7e8:	2300      	movs	r3, #0
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800f7f6:	b480      	push	{r7}
 800f7f8:	b083      	sub	sp, #12
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2204      	movs	r2, #4
 800f80e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f850:	2b03      	cmp	r3, #3
 800f852:	d10b      	bne.n	800f86c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f85a:	69db      	ldr	r3, [r3, #28]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d005      	beq.n	800f86c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f866:	69db      	ldr	r3, [r3, #28]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f876:	b480      	push	{r7}
 800f878:	b083      	sub	sp, #12
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800f8aa:	b480      	push	{r7}
 800f8ac:	b083      	sub	sp, #12
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	6852      	ldr	r2, [r2, #4]
 800f8dc:	b2d2      	uxtb	r2, r2
 800f8de:	4611      	mov	r1, r2
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	4798      	blx	r3

  return USBD_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f906:	2b20      	cmp	r3, #32
 800f908:	d004      	beq.n	800f914 <USBD_StdDevReq+0x24>
 800f90a:	2b40      	cmp	r3, #64	; 0x40
 800f90c:	d002      	beq.n	800f914 <USBD_StdDevReq+0x24>
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d008      	beq.n	800f924 <USBD_StdDevReq+0x34>
 800f912:	e04c      	b.n	800f9ae <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	6839      	ldr	r1, [r7, #0]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	4798      	blx	r3
    break;
 800f922:	e049      	b.n	800f9b8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	785b      	ldrb	r3, [r3, #1]
 800f928:	2b09      	cmp	r3, #9
 800f92a:	d83a      	bhi.n	800f9a2 <USBD_StdDevReq+0xb2>
 800f92c:	a201      	add	r2, pc, #4	; (adr r2, 800f934 <USBD_StdDevReq+0x44>)
 800f92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f932:	bf00      	nop
 800f934:	0800f985 	.word	0x0800f985
 800f938:	0800f999 	.word	0x0800f999
 800f93c:	0800f9a3 	.word	0x0800f9a3
 800f940:	0800f98f 	.word	0x0800f98f
 800f944:	0800f9a3 	.word	0x0800f9a3
 800f948:	0800f967 	.word	0x0800f967
 800f94c:	0800f95d 	.word	0x0800f95d
 800f950:	0800f9a3 	.word	0x0800f9a3
 800f954:	0800f97b 	.word	0x0800f97b
 800f958:	0800f971 	.word	0x0800f971
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 f9d2 	bl	800fd08 <USBD_GetDescriptor>
      break;
 800f964:	e022      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800f966:	6839      	ldr	r1, [r7, #0]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 fac7 	bl	800fefc <USBD_SetAddress>
      break;
 800f96e:	e01d      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 fb04 	bl	800ff80 <USBD_SetConfig>
      break;
 800f978:	e018      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fb8d 	bl	801009c <USBD_GetConfig>
      break;
 800f982:	e013      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fbbc 	bl	8010104 <USBD_GetStatus>
      break;
 800f98c:	e00e      	b.n	800f9ac <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 fbea 	bl	801016a <USBD_SetFeature>
      break;
 800f996:	e009      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800f998:	6839      	ldr	r1, [r7, #0]
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fbf9 	bl	8010192 <USBD_ClrFeature>
      break;
 800f9a0:	e004      	b.n	800f9ac <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800f9a2:	6839      	ldr	r1, [r7, #0]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fc52 	bl	801024e <USBD_CtlError>
      break;
 800f9aa:	bf00      	nop
    }
    break;
 800f9ac:	e004      	b.n	800f9b8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fc4c 	bl	801024e <USBD_CtlError>
    break;
 800f9b6:	bf00      	nop
  }

  return ret;
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop

0800f9c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9da:	2b20      	cmp	r3, #32
 800f9dc:	d003      	beq.n	800f9e6 <USBD_StdItfReq+0x22>
 800f9de:	2b40      	cmp	r3, #64	; 0x40
 800f9e0:	d001      	beq.n	800f9e6 <USBD_StdItfReq+0x22>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d12a      	bne.n	800fa3c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	2b02      	cmp	r3, #2
 800f9f0:	d81d      	bhi.n	800fa2e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	889b      	ldrh	r3, [r3, #4]
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d813      	bhi.n	800fa24 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	4798      	blx	r3
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	88db      	ldrh	r3, [r3, #6]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d110      	bne.n	800fa38 <USBD_StdItfReq+0x74>
 800fa16:	7bfb      	ldrb	r3, [r7, #15]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10d      	bne.n	800fa38 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 fcdf 	bl	80103e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fa22:	e009      	b.n	800fa38 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fc11 	bl	801024e <USBD_CtlError>
      break;
 800fa2c:	e004      	b.n	800fa38 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fa2e:	6839      	ldr	r1, [r7, #0]
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 fc0c 	bl	801024e <USBD_CtlError>
      break;
 800fa36:	e000      	b.n	800fa3a <USBD_StdItfReq+0x76>
      break;
 800fa38:	bf00      	nop
    }
    break;
 800fa3a:	e004      	b.n	800fa46 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 fc05 	bl	801024e <USBD_CtlError>
    break;
 800fa44:	bf00      	nop
  }

  return USBD_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	889b      	ldrh	r3, [r3, #4]
 800fa62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa6c:	2b20      	cmp	r3, #32
 800fa6e:	d004      	beq.n	800fa7a <USBD_StdEPReq+0x2a>
 800fa70:	2b40      	cmp	r3, #64	; 0x40
 800fa72:	d002      	beq.n	800fa7a <USBD_StdEPReq+0x2a>
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d008      	beq.n	800fa8a <USBD_StdEPReq+0x3a>
 800fa78:	e13b      	b.n	800fcf2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	4798      	blx	r3
    break;
 800fa88:	e138      	b.n	800fcfc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	d10a      	bne.n	800faac <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	4798      	blx	r3
 800faa4:	4603      	mov	r3, r0
 800faa6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	e128      	b.n	800fcfe <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	785b      	ldrb	r3, [r3, #1]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d03e      	beq.n	800fb32 <USBD_StdEPReq+0xe2>
 800fab4:	2b03      	cmp	r3, #3
 800fab6:	d002      	beq.n	800fabe <USBD_StdEPReq+0x6e>
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d070      	beq.n	800fb9e <USBD_StdEPReq+0x14e>
 800fabc:	e113      	b.n	800fce6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d002      	beq.n	800face <USBD_StdEPReq+0x7e>
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d015      	beq.n	800faf8 <USBD_StdEPReq+0xa8>
 800facc:	e02b      	b.n	800fb26 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800face:	7bbb      	ldrb	r3, [r7, #14]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00c      	beq.n	800faee <USBD_StdEPReq+0x9e>
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	2b80      	cmp	r3, #128	; 0x80
 800fad8:	d009      	beq.n	800faee <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f006 f90e 	bl	8015d00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800fae4:	2180      	movs	r1, #128	; 0x80
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f006 f90a 	bl	8015d00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800faec:	e020      	b.n	800fb30 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fbac 	bl	801024e <USBD_CtlError>
        break;
 800faf6:	e01b      	b.n	800fb30 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	885b      	ldrh	r3, [r3, #2]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10e      	bne.n	800fb1e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fb00:	7bbb      	ldrb	r3, [r7, #14]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00b      	beq.n	800fb1e <USBD_StdEPReq+0xce>
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	2b80      	cmp	r3, #128	; 0x80
 800fb0a:	d008      	beq.n	800fb1e <USBD_StdEPReq+0xce>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	88db      	ldrh	r3, [r3, #6]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d104      	bne.n	800fb1e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800fb14:	7bbb      	ldrb	r3, [r7, #14]
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f006 f8f1 	bl	8015d00 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 fc5e 	bl	80103e0 <USBD_CtlSendStatus>

        break;
 800fb24:	e004      	b.n	800fb30 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 fb90 	bl	801024e <USBD_CtlError>
        break;
 800fb2e:	bf00      	nop
      }
      break;
 800fb30:	e0de      	b.n	800fcf0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d002      	beq.n	800fb42 <USBD_StdEPReq+0xf2>
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d015      	beq.n	800fb6c <USBD_StdEPReq+0x11c>
 800fb40:	e026      	b.n	800fb90 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb42:	7bbb      	ldrb	r3, [r7, #14]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00c      	beq.n	800fb62 <USBD_StdEPReq+0x112>
 800fb48:	7bbb      	ldrb	r3, [r7, #14]
 800fb4a:	2b80      	cmp	r3, #128	; 0x80
 800fb4c:	d009      	beq.n	800fb62 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f006 f8d4 	bl	8015d00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800fb58:	2180      	movs	r1, #128	; 0x80
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f006 f8d0 	bl	8015d00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fb60:	e01c      	b.n	800fb9c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fb72 	bl	801024e <USBD_CtlError>
        break;
 800fb6a:	e017      	b.n	800fb9c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	885b      	ldrh	r3, [r3, #2]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d112      	bne.n	800fb9a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fb74:	7bbb      	ldrb	r3, [r7, #14]
 800fb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d004      	beq.n	800fb88 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb7e:	7bbb      	ldrb	r3, [r7, #14]
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f006 f8db 	bl	8015d3e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 fc29 	bl	80103e0 <USBD_CtlSendStatus>
        }
        break;
 800fb8e:	e004      	b.n	800fb9a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fb5b 	bl	801024e <USBD_CtlError>
        break;
 800fb98:	e000      	b.n	800fb9c <USBD_StdEPReq+0x14c>
        break;
 800fb9a:	bf00      	nop
      }
      break;
 800fb9c:	e0a8      	b.n	800fcf0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d002      	beq.n	800fbae <USBD_StdEPReq+0x15e>
 800fba8:	2b03      	cmp	r3, #3
 800fbaa:	d031      	beq.n	800fc10 <USBD_StdEPReq+0x1c0>
 800fbac:	e095      	b.n	800fcda <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbae:	7bbb      	ldrb	r3, [r7, #14]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d007      	beq.n	800fbc4 <USBD_StdEPReq+0x174>
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	2b80      	cmp	r3, #128	; 0x80
 800fbb8:	d004      	beq.n	800fbc4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fb46 	bl	801024e <USBD_CtlError>
          break;
 800fbc2:	e08f      	b.n	800fce4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fbc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	da0b      	bge.n	800fbe4 <USBD_StdEPReq+0x194>
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
 800fbce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4413      	add	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	3310      	adds	r3, #16
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	4413      	add	r3, r2
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	e00a      	b.n	800fbfa <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800fbe4:	7bbb      	ldrb	r3, [r7, #14]
 800fbe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fbea:	4613      	mov	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2202      	movs	r2, #2
 800fc06:	4619      	mov	r1, r3
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fb8b 	bl	8010324 <USBD_CtlSendData>
          break;
 800fc0e:	e069      	b.n	800fce4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800fc10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	da11      	bge.n	800fc3c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc18:	7bbb      	ldrb	r3, [r7, #14]
 800fc1a:	f003 020f 	and.w	r2, r3, #15
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	4613      	mov	r3, r2
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4413      	add	r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	440b      	add	r3, r1
 800fc2a:	3318      	adds	r3, #24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d117      	bne.n	800fc62 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 fb0a 	bl	801024e <USBD_CtlError>
            break;
 800fc3a:	e053      	b.n	800fce4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc3c:	7bbb      	ldrb	r3, [r7, #14]
 800fc3e:	f003 020f 	and.w	r2, r3, #15
 800fc42:	6879      	ldr	r1, [r7, #4]
 800fc44:	4613      	mov	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	440b      	add	r3, r1
 800fc4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d104      	bne.n	800fc62 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 faf7 	bl	801024e <USBD_CtlError>
            break;
 800fc60:	e040      	b.n	800fce4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fc62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	da0b      	bge.n	800fc82 <USBD_StdEPReq+0x232>
 800fc6a:	7bbb      	ldrb	r3, [r7, #14]
 800fc6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc70:	4613      	mov	r3, r2
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	4413      	add	r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	3310      	adds	r3, #16
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3304      	adds	r3, #4
 800fc80:	e00a      	b.n	800fc98 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800fc82:	7bbb      	ldrb	r3, [r7, #14]
 800fc84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800fc88:	4613      	mov	r3, r2
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	4413      	add	r3, r2
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	4413      	add	r3, r2
 800fc98:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc9a:	7bbb      	ldrb	r3, [r7, #14]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <USBD_StdEPReq+0x256>
 800fca0:	7bbb      	ldrb	r3, [r7, #14]
 800fca2:	2b80      	cmp	r3, #128	; 0x80
 800fca4:	d103      	bne.n	800fcae <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	601a      	str	r2, [r3, #0]
 800fcac:	e00e      	b.n	800fccc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800fcae:	7bbb      	ldrb	r3, [r7, #14]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f006 f862 	bl	8015d7c <USBD_LL_IsStallEP>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	e002      	b.n	800fccc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2202      	movs	r2, #2
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fb26 	bl	8010324 <USBD_CtlSendData>
          break;
 800fcd8:	e004      	b.n	800fce4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 fab6 	bl	801024e <USBD_CtlError>
        break;
 800fce2:	bf00      	nop
      }
      break;
 800fce4:	e004      	b.n	800fcf0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fab0 	bl	801024e <USBD_CtlError>
      break;
 800fcee:	bf00      	nop
    }
    break;
 800fcf0:	e004      	b.n	800fcfc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 faaa 	bl	801024e <USBD_CtlError>
    break;
 800fcfa:	bf00      	nop
  }

  return ret;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
	...

0800fd08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	885b      	ldrh	r3, [r3, #2]
 800fd16:	0a1b      	lsrs	r3, r3, #8
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	2b06      	cmp	r3, #6
 800fd1e:	f200 80c9 	bhi.w	800feb4 <USBD_GetDescriptor+0x1ac>
 800fd22:	a201      	add	r2, pc, #4	; (adr r2, 800fd28 <USBD_GetDescriptor+0x20>)
 800fd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd28:	0800fd45 	.word	0x0800fd45
 800fd2c:	0800fd5d 	.word	0x0800fd5d
 800fd30:	0800fd9d 	.word	0x0800fd9d
 800fd34:	0800feb5 	.word	0x0800feb5
 800fd38:	0800feb5 	.word	0x0800feb5
 800fd3c:	0800fe61 	.word	0x0800fe61
 800fd40:	0800fe87 	.word	0x0800fe87
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	7c12      	ldrb	r2, [r2, #16]
 800fd50:	f107 010a 	add.w	r1, r7, #10
 800fd54:	4610      	mov	r0, r2
 800fd56:	4798      	blx	r3
 800fd58:	60f8      	str	r0, [r7, #12]
    break;
 800fd5a:	e0b0      	b.n	800febe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	7c1b      	ldrb	r3, [r3, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10d      	bne.n	800fd80 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd6c:	f107 020a 	add.w	r2, r7, #10
 800fd70:	4610      	mov	r0, r2
 800fd72:	4798      	blx	r3
 800fd74:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	2202      	movs	r2, #2
 800fd7c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fd7e:	e09e      	b.n	800febe <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd88:	f107 020a 	add.w	r2, r7, #10
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	4798      	blx	r3
 800fd90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3301      	adds	r3, #1
 800fd96:	2202      	movs	r2, #2
 800fd98:	701a      	strb	r2, [r3, #0]
    break;
 800fd9a:	e090      	b.n	800febe <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	885b      	ldrh	r3, [r3, #2]
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b05      	cmp	r3, #5
 800fda4:	d856      	bhi.n	800fe54 <USBD_GetDescriptor+0x14c>
 800fda6:	a201      	add	r2, pc, #4	; (adr r2, 800fdac <USBD_GetDescriptor+0xa4>)
 800fda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdac:	0800fdc5 	.word	0x0800fdc5
 800fdb0:	0800fddd 	.word	0x0800fddd
 800fdb4:	0800fdf5 	.word	0x0800fdf5
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	0800fe25 	.word	0x0800fe25
 800fdc0:	0800fe3d 	.word	0x0800fe3d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	7c12      	ldrb	r2, [r2, #16]
 800fdd0:	f107 010a 	add.w	r1, r7, #10
 800fdd4:	4610      	mov	r0, r2
 800fdd6:	4798      	blx	r3
 800fdd8:	60f8      	str	r0, [r7, #12]
      break;
 800fdda:	e040      	b.n	800fe5e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	7c12      	ldrb	r2, [r2, #16]
 800fde8:	f107 010a 	add.w	r1, r7, #10
 800fdec:	4610      	mov	r0, r2
 800fdee:	4798      	blx	r3
 800fdf0:	60f8      	str	r0, [r7, #12]
      break;
 800fdf2:	e034      	b.n	800fe5e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	7c12      	ldrb	r2, [r2, #16]
 800fe00:	f107 010a 	add.w	r1, r7, #10
 800fe04:	4610      	mov	r0, r2
 800fe06:	4798      	blx	r3
 800fe08:	60f8      	str	r0, [r7, #12]
      break;
 800fe0a:	e028      	b.n	800fe5e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	7c12      	ldrb	r2, [r2, #16]
 800fe18:	f107 010a 	add.w	r1, r7, #10
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	4798      	blx	r3
 800fe20:	60f8      	str	r0, [r7, #12]
      break;
 800fe22:	e01c      	b.n	800fe5e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	7c12      	ldrb	r2, [r2, #16]
 800fe30:	f107 010a 	add.w	r1, r7, #10
 800fe34:	4610      	mov	r0, r2
 800fe36:	4798      	blx	r3
 800fe38:	60f8      	str	r0, [r7, #12]
      break;
 800fe3a:	e010      	b.n	800fe5e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe42:	699b      	ldr	r3, [r3, #24]
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	7c12      	ldrb	r2, [r2, #16]
 800fe48:	f107 010a 	add.w	r1, r7, #10
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	4798      	blx	r3
 800fe50:	60f8      	str	r0, [r7, #12]
      break;
 800fe52:	e004      	b.n	800fe5e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 f9f9 	bl	801024e <USBD_CtlError>
      return;
 800fe5c:	e04b      	b.n	800fef6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800fe5e:	e02e      	b.n	800febe <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7c1b      	ldrb	r3, [r3, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d109      	bne.n	800fe7c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe70:	f107 020a 	add.w	r2, r7, #10
 800fe74:	4610      	mov	r0, r2
 800fe76:	4798      	blx	r3
 800fe78:	60f8      	str	r0, [r7, #12]
      break;
 800fe7a:	e020      	b.n	800febe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f9e5 	bl	801024e <USBD_CtlError>
      return;
 800fe84:	e037      	b.n	800fef6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7c1b      	ldrb	r3, [r3, #16]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d10d      	bne.n	800feaa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe96:	f107 020a 	add.w	r2, r7, #10
 800fe9a:	4610      	mov	r0, r2
 800fe9c:	4798      	blx	r3
 800fe9e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	3301      	adds	r3, #1
 800fea4:	2207      	movs	r2, #7
 800fea6:	701a      	strb	r2, [r3, #0]
      break;
 800fea8:	e009      	b.n	800febe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f9ce 	bl	801024e <USBD_CtlError>
      return;
 800feb2:	e020      	b.n	800fef6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f9c9 	bl	801024e <USBD_CtlError>
    return;
 800febc:	e01b      	b.n	800fef6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800febe:	897b      	ldrh	r3, [r7, #10]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d011      	beq.n	800fee8 <USBD_GetDescriptor+0x1e0>
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	88db      	ldrh	r3, [r3, #6]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00d      	beq.n	800fee8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	88da      	ldrh	r2, [r3, #6]
 800fed0:	897b      	ldrh	r3, [r7, #10]
 800fed2:	4293      	cmp	r3, r2
 800fed4:	bf28      	it	cs
 800fed6:	4613      	movcs	r3, r2
 800fed8:	b29b      	uxth	r3, r3
 800feda:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800fedc:	897b      	ldrh	r3, [r7, #10]
 800fede:	461a      	mov	r2, r3
 800fee0:	68f9      	ldr	r1, [r7, #12]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fa1e 	bl	8010324 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	88db      	ldrh	r3, [r3, #6]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d102      	bne.n	800fef6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fa75 	bl	80103e0 <USBD_CtlSendStatus>
  }
}
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	889b      	ldrh	r3, [r3, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d130      	bne.n	800ff70 <USBD_SetAddress+0x74>
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	88db      	ldrh	r3, [r3, #6]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d12c      	bne.n	800ff70 <USBD_SetAddress+0x74>
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	885b      	ldrh	r3, [r3, #2]
 800ff1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ff1c:	d828      	bhi.n	800ff70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	885b      	ldrh	r3, [r3, #2]
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ff30:	2b03      	cmp	r3, #3
 800ff32:	d104      	bne.n	800ff3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f989 	bl	801024e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff3c:	e01c      	b.n	800ff78 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7bfa      	ldrb	r2, [r7, #15]
 800ff42:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ff46:	7bfb      	ldrb	r3, [r7, #15]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f005 ff42 	bl	8015dd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fa45 	bl	80103e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2202      	movs	r2, #2
 800ff60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff64:	e008      	b.n	800ff78 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff6e:	e003      	b.n	800ff78 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f96b 	bl	801024e <USBD_CtlError>
  }
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	885b      	ldrh	r3, [r3, #2]
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	4b41      	ldr	r3, [pc, #260]	; (8010098 <USBD_SetConfig+0x118>)
 800ff92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff94:	4b40      	ldr	r3, [pc, #256]	; (8010098 <USBD_SetConfig+0x118>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d904      	bls.n	800ffa6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ff9c:	6839      	ldr	r1, [r7, #0]
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f955 	bl	801024e <USBD_CtlError>
 800ffa4:	e075      	b.n	8010092 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d002      	beq.n	800ffb6 <USBD_SetConfig+0x36>
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	d023      	beq.n	800fffc <USBD_SetConfig+0x7c>
 800ffb4:	e062      	b.n	801007c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ffb6:	4b38      	ldr	r3, [pc, #224]	; (8010098 <USBD_SetConfig+0x118>)
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d01a      	beq.n	800fff4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ffbe:	4b36      	ldr	r3, [pc, #216]	; (8010098 <USBD_SetConfig+0x118>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2203      	movs	r2, #3
 800ffcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ffd0:	4b31      	ldr	r3, [pc, #196]	; (8010098 <USBD_SetConfig+0x118>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff fa29 	bl	800f42e <USBD_SetClassConfig>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d104      	bne.n	800ffec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ffe2:	6839      	ldr	r1, [r7, #0]
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 f932 	bl	801024e <USBD_CtlError>
          return;
 800ffea:	e052      	b.n	8010092 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 f9f7 	bl	80103e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800fff2:	e04e      	b.n	8010092 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f9f3 	bl	80103e0 <USBD_CtlSendStatus>
      break;
 800fffa:	e04a      	b.n	8010092 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fffc:	4b26      	ldr	r3, [pc, #152]	; (8010098 <USBD_SetConfig+0x118>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d112      	bne.n	801002a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2202      	movs	r2, #2
 8010008:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 801000c:	4b22      	ldr	r3, [pc, #136]	; (8010098 <USBD_SetConfig+0x118>)
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	461a      	mov	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8010016:	4b20      	ldr	r3, [pc, #128]	; (8010098 <USBD_SetConfig+0x118>)
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	4619      	mov	r1, r3
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f7ff fa25 	bl	800f46c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f9dc 	bl	80103e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010028:	e033      	b.n	8010092 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801002a:	4b1b      	ldr	r3, [pc, #108]	; (8010098 <USBD_SetConfig+0x118>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	429a      	cmp	r2, r3
 8010036:	d01d      	beq.n	8010074 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	b2db      	uxtb	r3, r3
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff fa13 	bl	800f46c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010046:	4b14      	ldr	r3, [pc, #80]	; (8010098 <USBD_SetConfig+0x118>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010050:	4b11      	ldr	r3, [pc, #68]	; (8010098 <USBD_SetConfig+0x118>)
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff f9e9 	bl	800f42e <USBD_SetClassConfig>
 801005c:	4603      	mov	r3, r0
 801005e:	2b02      	cmp	r3, #2
 8010060:	d104      	bne.n	801006c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8010062:	6839      	ldr	r1, [r7, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 f8f2 	bl	801024e <USBD_CtlError>
          return;
 801006a:	e012      	b.n	8010092 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 f9b7 	bl	80103e0 <USBD_CtlSendStatus>
      break;
 8010072:	e00e      	b.n	8010092 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f9b3 	bl	80103e0 <USBD_CtlSendStatus>
      break;
 801007a:	e00a      	b.n	8010092 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 801007c:	6839      	ldr	r1, [r7, #0]
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 f8e5 	bl	801024e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010084:	4b04      	ldr	r3, [pc, #16]	; (8010098 <USBD_SetConfig+0x118>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	4619      	mov	r1, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f7ff f9ee 	bl	800f46c <USBD_ClrClassConfig>
      break;
 8010090:	bf00      	nop
    }
  }
}
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	200003a4 	.word	0x200003a4

0801009c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	88db      	ldrh	r3, [r3, #6]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d004      	beq.n	80100b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f8cc 	bl	801024e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80100b6:	e021      	b.n	80100fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80100be:	2b01      	cmp	r3, #1
 80100c0:	db17      	blt.n	80100f2 <USBD_GetConfig+0x56>
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	dd02      	ble.n	80100cc <USBD_GetConfig+0x30>
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d00b      	beq.n	80100e2 <USBD_GetConfig+0x46>
 80100ca:	e012      	b.n	80100f2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	3308      	adds	r3, #8
 80100d6:	2201      	movs	r2, #1
 80100d8:	4619      	mov	r1, r3
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f000 f922 	bl	8010324 <USBD_CtlSendData>
      break;
 80100e0:	e00c      	b.n	80100fc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3304      	adds	r3, #4
 80100e6:	2201      	movs	r2, #1
 80100e8:	4619      	mov	r1, r3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f91a 	bl	8010324 <USBD_CtlSendData>
      break;
 80100f0:	e004      	b.n	80100fc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80100f2:	6839      	ldr	r1, [r7, #0]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f8aa 	bl	801024e <USBD_CtlError>
      break;
 80100fa:	bf00      	nop
}
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010114:	3b01      	subs	r3, #1
 8010116:	2b02      	cmp	r3, #2
 8010118:	d81e      	bhi.n	8010158 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	88db      	ldrh	r3, [r3, #6]
 801011e:	2b02      	cmp	r3, #2
 8010120:	d004      	beq.n	801012c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f000 f892 	bl	801024e <USBD_CtlError>
      break;
 801012a:	e01a      	b.n	8010162 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010138:	2b00      	cmp	r3, #0
 801013a:	d005      	beq.n	8010148 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	f043 0202 	orr.w	r2, r3, #2
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	330c      	adds	r3, #12
 801014c:	2202      	movs	r2, #2
 801014e:	4619      	mov	r1, r3
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 f8e7 	bl	8010324 <USBD_CtlSendData>
    break;
 8010156:	e004      	b.n	8010162 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010158:	6839      	ldr	r1, [r7, #0]
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 f877 	bl	801024e <USBD_CtlError>
    break;
 8010160:	bf00      	nop
  }
}
 8010162:	bf00      	nop
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b082      	sub	sp, #8
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	885b      	ldrh	r3, [r3, #2]
 8010178:	2b01      	cmp	r3, #1
 801017a:	d106      	bne.n	801018a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2201      	movs	r2, #1
 8010180:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f92b 	bl	80103e0 <USBD_CtlSendStatus>
  }

}
 801018a:	bf00      	nop
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80101a2:	3b01      	subs	r3, #1
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	d80b      	bhi.n	80101c0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	885b      	ldrh	r3, [r3, #2]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d10c      	bne.n	80101ca <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f911 	bl	80103e0 <USBD_CtlSendStatus>
    }
    break;
 80101be:	e004      	b.n	80101ca <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f843 	bl	801024e <USBD_CtlError>
    break;
 80101c8:	e000      	b.n	80101cc <USBD_ClrFeature+0x3a>
    break;
 80101ca:	bf00      	nop
  }
}
 80101cc:	bf00      	nop
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	781a      	ldrb	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	785a      	ldrb	r2, [r3, #1]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	3302      	adds	r3, #2
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	3303      	adds	r3, #3
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	021b      	lsls	r3, r3, #8
 8010200:	b29b      	uxth	r3, r3
 8010202:	4413      	add	r3, r2
 8010204:	b29a      	uxth	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	3304      	adds	r3, #4
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	b29a      	uxth	r2, r3
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	3305      	adds	r3, #5
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	b29b      	uxth	r3, r3
 801021a:	021b      	lsls	r3, r3, #8
 801021c:	b29b      	uxth	r3, r3
 801021e:	4413      	add	r3, r2
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	3306      	adds	r3, #6
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b29a      	uxth	r2, r3
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	3307      	adds	r3, #7
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	b29b      	uxth	r3, r3
 8010236:	021b      	lsls	r3, r3, #8
 8010238:	b29b      	uxth	r3, r3
 801023a:	4413      	add	r3, r2
 801023c:	b29a      	uxth	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	80da      	strh	r2, [r3, #6]

}
 8010242:	bf00      	nop
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010258:	2180      	movs	r1, #128	; 0x80
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f005 fd50 	bl	8015d00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8010260:	2100      	movs	r1, #0
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f005 fd4c 	bl	8015d00 <USBD_LL_StallEP>
}
 8010268:	bf00      	nop
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801027c:	2300      	movs	r3, #0
 801027e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d032      	beq.n	80102ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f000 f834 	bl	80102f4 <USBD_GetLen>
 801028c:	4603      	mov	r3, r0
 801028e:	3301      	adds	r3, #1
 8010290:	b29b      	uxth	r3, r3
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	75fa      	strb	r2, [r7, #23]
 80102a0:	461a      	mov	r2, r3
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	4413      	add	r3, r2
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	7812      	ldrb	r2, [r2, #0]
 80102aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	75fa      	strb	r2, [r7, #23]
 80102b2:	461a      	mov	r2, r3
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	4413      	add	r3, r2
 80102b8:	2203      	movs	r2, #3
 80102ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80102bc:	e012      	b.n	80102e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	1c5a      	adds	r2, r3, #1
 80102c2:	60fa      	str	r2, [r7, #12]
 80102c4:	7dfa      	ldrb	r2, [r7, #23]
 80102c6:	1c51      	adds	r1, r2, #1
 80102c8:	75f9      	strb	r1, [r7, #23]
 80102ca:	4611      	mov	r1, r2
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	440a      	add	r2, r1
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
 80102d6:	1c5a      	adds	r2, r3, #1
 80102d8:	75fa      	strb	r2, [r7, #23]
 80102da:	461a      	mov	r2, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	4413      	add	r3, r2
 80102e0:	2200      	movs	r2, #0
 80102e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e8      	bne.n	80102be <USBD_GetString+0x4e>
    }
  }
}
 80102ec:	bf00      	nop
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80102fc:	2300      	movs	r3, #0
 80102fe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010300:	e005      	b.n	801030e <USBD_GetLen+0x1a>
    {
        len++;
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	3301      	adds	r3, #1
 8010306:	73fb      	strb	r3, [r7, #15]
        buf++;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3301      	adds	r3, #1
 801030c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1f5      	bne.n	8010302 <USBD_GetLen+0xe>
    }

    return len;
 8010316:	7bfb      	ldrb	r3, [r7, #15]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	4613      	mov	r3, r2
 8010330:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2202      	movs	r2, #2
 8010336:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 801033a:	88fa      	ldrh	r2, [r7, #6]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010340:	88fa      	ldrh	r2, [r7, #6]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010346:	88fb      	ldrh	r3, [r7, #6]
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	2100      	movs	r1, #0
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f005 fd60 	bl	8015e12 <USBD_LL_Transmit>

  return USBD_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	4613      	mov	r3, r2
 8010368:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 801036a:	88fb      	ldrh	r3, [r7, #6]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	2100      	movs	r1, #0
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f005 fd4e 	bl	8015e12 <USBD_LL_Transmit>

  return USBD_OK;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	4613      	mov	r3, r2
 801038c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2203      	movs	r2, #3
 8010392:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010396:	88fa      	ldrh	r2, [r7, #6]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 801039e:	88fa      	ldrh	r2, [r7, #6]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80103a6:	88fb      	ldrh	r3, [r7, #6]
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	2100      	movs	r1, #0
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f005 fd53 	bl	8015e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	4613      	mov	r3, r2
 80103c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103ca:	88fb      	ldrh	r3, [r7, #6]
 80103cc:	68ba      	ldr	r2, [r7, #8]
 80103ce:	2100      	movs	r1, #0
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f005 fd41 	bl	8015e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103d6:	2300      	movs	r3, #0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2204      	movs	r2, #4
 80103ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103f0:	2300      	movs	r3, #0
 80103f2:	2200      	movs	r2, #0
 80103f4:	2100      	movs	r1, #0
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f005 fd0b 	bl	8015e12 <USBD_LL_Transmit>

  return USBD_OK;
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b082      	sub	sp, #8
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2205      	movs	r2, #5
 8010412:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010416:	2300      	movs	r3, #0
 8010418:	2200      	movs	r2, #0
 801041a:	2100      	movs	r1, #0
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f005 fd1b 	bl	8015e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	4603      	mov	r3, r0
 8010434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010436:	79fb      	ldrb	r3, [r7, #7]
 8010438:	4a08      	ldr	r2, [pc, #32]	; (801045c <disk_status+0x30>)
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	79fa      	ldrb	r2, [r7, #7]
 8010444:	4905      	ldr	r1, [pc, #20]	; (801045c <disk_status+0x30>)
 8010446:	440a      	add	r2, r1
 8010448:	7a12      	ldrb	r2, [r2, #8]
 801044a:	4610      	mov	r0, r2
 801044c:	4798      	blx	r3
 801044e:	4603      	mov	r3, r0
 8010450:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010452:	7bfb      	ldrb	r3, [r7, #15]
}
 8010454:	4618      	mov	r0, r3
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	200003d0 	.word	0x200003d0

08010460 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801046e:	79fb      	ldrb	r3, [r7, #7]
 8010470:	4a0d      	ldr	r2, [pc, #52]	; (80104a8 <disk_initialize+0x48>)
 8010472:	5cd3      	ldrb	r3, [r2, r3]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d111      	bne.n	801049c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	4a0b      	ldr	r2, [pc, #44]	; (80104a8 <disk_initialize+0x48>)
 801047c:	2101      	movs	r1, #1
 801047e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010480:	79fb      	ldrb	r3, [r7, #7]
 8010482:	4a09      	ldr	r2, [pc, #36]	; (80104a8 <disk_initialize+0x48>)
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4413      	add	r3, r2
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	79fa      	ldrb	r2, [r7, #7]
 801048e:	4906      	ldr	r1, [pc, #24]	; (80104a8 <disk_initialize+0x48>)
 8010490:	440a      	add	r2, r1
 8010492:	7a12      	ldrb	r2, [r2, #8]
 8010494:	4610      	mov	r0, r2
 8010496:	4798      	blx	r3
 8010498:	4603      	mov	r3, r0
 801049a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801049c:	7bfb      	ldrb	r3, [r7, #15]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	200003d0 	.word	0x200003d0

080104ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60b9      	str	r1, [r7, #8]
 80104b4:	607a      	str	r2, [r7, #4]
 80104b6:	603b      	str	r3, [r7, #0]
 80104b8:	4603      	mov	r3, r0
 80104ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	4a0a      	ldr	r2, [pc, #40]	; (80104e8 <disk_read+0x3c>)
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	4413      	add	r3, r2
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	689c      	ldr	r4, [r3, #8]
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
 80104ca:	4a07      	ldr	r2, [pc, #28]	; (80104e8 <disk_read+0x3c>)
 80104cc:	4413      	add	r3, r2
 80104ce:	7a18      	ldrb	r0, [r3, #8]
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	68b9      	ldr	r1, [r7, #8]
 80104d6:	47a0      	blx	r4
 80104d8:	4603      	mov	r3, r0
 80104da:	75fb      	strb	r3, [r7, #23]
  return res;
 80104dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	371c      	adds	r7, #28
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd90      	pop	{r4, r7, pc}
 80104e6:	bf00      	nop
 80104e8:	200003d0 	.word	0x200003d0

080104ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80104ec:	b590      	push	{r4, r7, lr}
 80104ee:	b087      	sub	sp, #28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
 80104f6:	603b      	str	r3, [r7, #0]
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	4a0a      	ldr	r2, [pc, #40]	; (8010528 <disk_write+0x3c>)
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4413      	add	r3, r2
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	68dc      	ldr	r4, [r3, #12]
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	4a07      	ldr	r2, [pc, #28]	; (8010528 <disk_write+0x3c>)
 801050c:	4413      	add	r3, r2
 801050e:	7a18      	ldrb	r0, [r3, #8]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	68b9      	ldr	r1, [r7, #8]
 8010516:	47a0      	blx	r4
 8010518:	4603      	mov	r3, r0
 801051a:	75fb      	strb	r3, [r7, #23]
  return res;
 801051c:	7dfb      	ldrb	r3, [r7, #23]
}
 801051e:	4618      	mov	r0, r3
 8010520:	371c      	adds	r7, #28
 8010522:	46bd      	mov	sp, r7
 8010524:	bd90      	pop	{r4, r7, pc}
 8010526:	bf00      	nop
 8010528:	200003d0 	.word	0x200003d0

0801052c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	4603      	mov	r3, r0
 8010534:	603a      	str	r2, [r7, #0]
 8010536:	71fb      	strb	r3, [r7, #7]
 8010538:	460b      	mov	r3, r1
 801053a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	4a09      	ldr	r2, [pc, #36]	; (8010564 <disk_ioctl+0x38>)
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	4413      	add	r3, r2
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	691b      	ldr	r3, [r3, #16]
 8010548:	79fa      	ldrb	r2, [r7, #7]
 801054a:	4906      	ldr	r1, [pc, #24]	; (8010564 <disk_ioctl+0x38>)
 801054c:	440a      	add	r2, r1
 801054e:	7a10      	ldrb	r0, [r2, #8]
 8010550:	79b9      	ldrb	r1, [r7, #6]
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	4798      	blx	r3
 8010556:	4603      	mov	r3, r0
 8010558:	73fb      	strb	r3, [r7, #15]
  return res;
 801055a:	7bfb      	ldrb	r3, [r7, #15]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	200003d0 	.word	0x200003d0

08010568 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	3301      	adds	r3, #1
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010578:	89fb      	ldrh	r3, [r7, #14]
 801057a:	021b      	lsls	r3, r3, #8
 801057c:	b21a      	sxth	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	b21b      	sxth	r3, r3
 8010584:	4313      	orrs	r3, r2
 8010586:	b21b      	sxth	r3, r3
 8010588:	81fb      	strh	r3, [r7, #14]
	return rv;
 801058a:	89fb      	ldrh	r3, [r7, #14]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3714      	adds	r7, #20
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3303      	adds	r3, #3
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	021b      	lsls	r3, r3, #8
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	3202      	adds	r2, #2
 80105b0:	7812      	ldrb	r2, [r2, #0]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	3201      	adds	r2, #1
 80105be:	7812      	ldrb	r2, [r2, #0]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	021b      	lsls	r3, r3, #8
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	7812      	ldrb	r2, [r2, #0]
 80105cc:	4313      	orrs	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80105d0:	68fb      	ldr	r3, [r7, #12]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80105de:	b480      	push	{r7}
 80105e0:	b083      	sub	sp, #12
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	460b      	mov	r3, r1
 80105e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	1c5a      	adds	r2, r3, #1
 80105ee:	607a      	str	r2, [r7, #4]
 80105f0:	887a      	ldrh	r2, [r7, #2]
 80105f2:	b2d2      	uxtb	r2, r2
 80105f4:	701a      	strb	r2, [r3, #0]
 80105f6:	887b      	ldrh	r3, [r7, #2]
 80105f8:	0a1b      	lsrs	r3, r3, #8
 80105fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	607a      	str	r2, [r7, #4]
 8010602:	887a      	ldrh	r2, [r7, #2]
 8010604:	b2d2      	uxtb	r2, r2
 8010606:	701a      	strb	r2, [r3, #0]
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	607a      	str	r2, [r7, #4]
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	b2d2      	uxtb	r2, r2
 8010628:	701a      	strb	r2, [r3, #0]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	0a1b      	lsrs	r3, r3, #8
 801062e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	607a      	str	r2, [r7, #4]
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	b2d2      	uxtb	r2, r2
 801063a:	701a      	strb	r2, [r3, #0]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	0a1b      	lsrs	r3, r3, #8
 8010640:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	b2d2      	uxtb	r2, r2
 801064c:	701a      	strb	r2, [r3, #0]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	0a1b      	lsrs	r3, r3, #8
 8010652:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	1c5a      	adds	r2, r3, #1
 8010658:	607a      	str	r2, [r7, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	b2d2      	uxtb	r2, r2
 801065e:	701a      	strb	r2, [r3, #0]
}
 8010660:	bf00      	nop
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801066c:	b480      	push	{r7}
 801066e:	b087      	sub	sp, #28
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00d      	beq.n	80106a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010686:	693a      	ldr	r2, [r7, #16]
 8010688:	1c53      	adds	r3, r2, #1
 801068a:	613b      	str	r3, [r7, #16]
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	1c59      	adds	r1, r3, #1
 8010690:	6179      	str	r1, [r7, #20]
 8010692:	7812      	ldrb	r2, [r2, #0]
 8010694:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3b01      	subs	r3, #1
 801069a:	607b      	str	r3, [r7, #4]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1f1      	bne.n	8010686 <mem_cpy+0x1a>
	}
}
 80106a2:	bf00      	nop
 80106a4:	371c      	adds	r7, #28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr

080106ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80106ae:	b480      	push	{r7}
 80106b0:	b087      	sub	sp, #28
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	60f8      	str	r0, [r7, #12]
 80106b6:	60b9      	str	r1, [r7, #8]
 80106b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	1c5a      	adds	r2, r3, #1
 80106c2:	617a      	str	r2, [r7, #20]
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	b2d2      	uxtb	r2, r2
 80106c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	607b      	str	r3, [r7, #4]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1f3      	bne.n	80106be <mem_set+0x10>
}
 80106d6:	bf00      	nop
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80106e2:	b480      	push	{r7}
 80106e4:	b089      	sub	sp, #36	; 0x24
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	61fb      	str	r3, [r7, #28]
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	61fa      	str	r2, [r7, #28]
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	4619      	mov	r1, r3
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	1c5a      	adds	r2, r3, #1
 8010708:	61ba      	str	r2, [r7, #24]
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	1acb      	subs	r3, r1, r3
 801070e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3b01      	subs	r3, #1
 8010714:	607b      	str	r3, [r7, #4]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <mem_cmp+0x40>
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d0eb      	beq.n	80106fa <mem_cmp+0x18>

	return r;
 8010722:	697b      	ldr	r3, [r7, #20]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3724      	adds	r7, #36	; 0x24
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801073a:	e002      	b.n	8010742 <chk_chr+0x12>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	607b      	str	r3, [r7, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d005      	beq.n	8010756 <chk_chr+0x26>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	461a      	mov	r2, r3
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	4293      	cmp	r3, r2
 8010754:	d1f2      	bne.n	801073c <chk_chr+0xc>
	return *str;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	781b      	ldrb	r3, [r3, #0]
}
 801075a:	4618      	mov	r0, r3
 801075c:	370c      	adds	r7, #12
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010772:	2300      	movs	r3, #0
 8010774:	60bb      	str	r3, [r7, #8]
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	e029      	b.n	80107d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801077c:	4a27      	ldr	r2, [pc, #156]	; (801081c <chk_lock+0xb4>)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	011b      	lsls	r3, r3, #4
 8010782:	4413      	add	r3, r2
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01d      	beq.n	80107c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801078a:	4a24      	ldr	r2, [pc, #144]	; (801081c <chk_lock+0xb4>)
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	011b      	lsls	r3, r3, #4
 8010790:	4413      	add	r3, r2
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d116      	bne.n	80107ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801079c:	4a1f      	ldr	r2, [pc, #124]	; (801081c <chk_lock+0xb4>)
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	011b      	lsls	r3, r3, #4
 80107a2:	4413      	add	r3, r2
 80107a4:	3304      	adds	r3, #4
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d10c      	bne.n	80107ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80107b0:	4a1a      	ldr	r2, [pc, #104]	; (801081c <chk_lock+0xb4>)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	011b      	lsls	r3, r3, #4
 80107b6:	4413      	add	r3, r2
 80107b8:	3308      	adds	r3, #8
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d102      	bne.n	80107ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80107c4:	e007      	b.n	80107d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80107c6:	2301      	movs	r3, #1
 80107c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	3301      	adds	r3, #1
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d9d2      	bls.n	801077c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2b02      	cmp	r3, #2
 80107da:	d109      	bne.n	80107f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d102      	bne.n	80107e8 <chk_lock+0x80>
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	2b02      	cmp	r3, #2
 80107e6:	d101      	bne.n	80107ec <chk_lock+0x84>
 80107e8:	2300      	movs	r3, #0
 80107ea:	e010      	b.n	801080e <chk_lock+0xa6>
 80107ec:	2312      	movs	r3, #18
 80107ee:	e00e      	b.n	801080e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d108      	bne.n	8010808 <chk_lock+0xa0>
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <chk_lock+0xb4>)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	4413      	add	r3, r2
 80107fe:	330c      	adds	r3, #12
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010806:	d101      	bne.n	801080c <chk_lock+0xa4>
 8010808:	2310      	movs	r3, #16
 801080a:	e000      	b.n	801080e <chk_lock+0xa6>
 801080c:	2300      	movs	r3, #0
}
 801080e:	4618      	mov	r0, r3
 8010810:	3714      	adds	r7, #20
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	200003b0 	.word	0x200003b0

08010820 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010826:	2300      	movs	r3, #0
 8010828:	607b      	str	r3, [r7, #4]
 801082a:	e002      	b.n	8010832 <enq_lock+0x12>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3301      	adds	r3, #1
 8010830:	607b      	str	r3, [r7, #4]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d806      	bhi.n	8010846 <enq_lock+0x26>
 8010838:	4a09      	ldr	r2, [pc, #36]	; (8010860 <enq_lock+0x40>)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	011b      	lsls	r3, r3, #4
 801083e:	4413      	add	r3, r2
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1f2      	bne.n	801082c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b02      	cmp	r3, #2
 801084a:	bf14      	ite	ne
 801084c:	2301      	movne	r3, #1
 801084e:	2300      	moveq	r3, #0
 8010850:	b2db      	uxtb	r3, r3
}
 8010852:	4618      	mov	r0, r3
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	200003b0 	.word	0x200003b0

08010864 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	e01f      	b.n	80108b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010874:	4a41      	ldr	r2, [pc, #260]	; (801097c <inc_lock+0x118>)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	011b      	lsls	r3, r3, #4
 801087a:	4413      	add	r3, r2
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	429a      	cmp	r2, r3
 8010884:	d113      	bne.n	80108ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010886:	4a3d      	ldr	r2, [pc, #244]	; (801097c <inc_lock+0x118>)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	011b      	lsls	r3, r3, #4
 801088c:	4413      	add	r3, r2
 801088e:	3304      	adds	r3, #4
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010896:	429a      	cmp	r2, r3
 8010898:	d109      	bne.n	80108ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801089a:	4a38      	ldr	r2, [pc, #224]	; (801097c <inc_lock+0x118>)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	011b      	lsls	r3, r3, #4
 80108a0:	4413      	add	r3, r2
 80108a2:	3308      	adds	r3, #8
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d006      	beq.n	80108bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	3301      	adds	r3, #1
 80108b2:	60fb      	str	r3, [r7, #12]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d9dc      	bls.n	8010874 <inc_lock+0x10>
 80108ba:	e000      	b.n	80108be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80108bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d132      	bne.n	801092a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60fb      	str	r3, [r7, #12]
 80108c8:	e002      	b.n	80108d0 <inc_lock+0x6c>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	3301      	adds	r3, #1
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d806      	bhi.n	80108e4 <inc_lock+0x80>
 80108d6:	4a29      	ldr	r2, [pc, #164]	; (801097c <inc_lock+0x118>)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	011b      	lsls	r3, r3, #4
 80108dc:	4413      	add	r3, r2
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1f2      	bne.n	80108ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d101      	bne.n	80108ee <inc_lock+0x8a>
 80108ea:	2300      	movs	r3, #0
 80108ec:	e040      	b.n	8010970 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	4922      	ldr	r1, [pc, #136]	; (801097c <inc_lock+0x118>)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	011b      	lsls	r3, r3, #4
 80108f8:	440b      	add	r3, r1
 80108fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	689a      	ldr	r2, [r3, #8]
 8010900:	491e      	ldr	r1, [pc, #120]	; (801097c <inc_lock+0x118>)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	440b      	add	r3, r1
 8010908:	3304      	adds	r3, #4
 801090a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	695a      	ldr	r2, [r3, #20]
 8010910:	491a      	ldr	r1, [pc, #104]	; (801097c <inc_lock+0x118>)
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	011b      	lsls	r3, r3, #4
 8010916:	440b      	add	r3, r1
 8010918:	3308      	adds	r3, #8
 801091a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801091c:	4a17      	ldr	r2, [pc, #92]	; (801097c <inc_lock+0x118>)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	011b      	lsls	r3, r3, #4
 8010922:	4413      	add	r3, r2
 8010924:	330c      	adds	r3, #12
 8010926:	2200      	movs	r2, #0
 8010928:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <inc_lock+0xe0>
 8010930:	4a12      	ldr	r2, [pc, #72]	; (801097c <inc_lock+0x118>)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	011b      	lsls	r3, r3, #4
 8010936:	4413      	add	r3, r2
 8010938:	330c      	adds	r3, #12
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <inc_lock+0xe0>
 8010940:	2300      	movs	r3, #0
 8010942:	e015      	b.n	8010970 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d108      	bne.n	801095c <inc_lock+0xf8>
 801094a:	4a0c      	ldr	r2, [pc, #48]	; (801097c <inc_lock+0x118>)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	011b      	lsls	r3, r3, #4
 8010950:	4413      	add	r3, r2
 8010952:	330c      	adds	r3, #12
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	3301      	adds	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	e001      	b.n	8010960 <inc_lock+0xfc>
 801095c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010960:	4906      	ldr	r1, [pc, #24]	; (801097c <inc_lock+0x118>)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	011b      	lsls	r3, r3, #4
 8010966:	440b      	add	r3, r1
 8010968:	330c      	adds	r3, #12
 801096a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	3301      	adds	r3, #1
}
 8010970:	4618      	mov	r0, r3
 8010972:	3714      	adds	r7, #20
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	200003b0 	.word	0x200003b0

08010980 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3b01      	subs	r3, #1
 801098c:	607b      	str	r3, [r7, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d825      	bhi.n	80109e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010994:	4a17      	ldr	r2, [pc, #92]	; (80109f4 <dec_lock+0x74>)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	4413      	add	r3, r2
 801099c:	330c      	adds	r3, #12
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80109a2:	89fb      	ldrh	r3, [r7, #14]
 80109a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109a8:	d101      	bne.n	80109ae <dec_lock+0x2e>
 80109aa:	2300      	movs	r3, #0
 80109ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80109ae:	89fb      	ldrh	r3, [r7, #14]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d002      	beq.n	80109ba <dec_lock+0x3a>
 80109b4:	89fb      	ldrh	r3, [r7, #14]
 80109b6:	3b01      	subs	r3, #1
 80109b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80109ba:	4a0e      	ldr	r2, [pc, #56]	; (80109f4 <dec_lock+0x74>)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	011b      	lsls	r3, r3, #4
 80109c0:	4413      	add	r3, r2
 80109c2:	330c      	adds	r3, #12
 80109c4:	89fa      	ldrh	r2, [r7, #14]
 80109c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80109c8:	89fb      	ldrh	r3, [r7, #14]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d105      	bne.n	80109da <dec_lock+0x5a>
 80109ce:	4a09      	ldr	r2, [pc, #36]	; (80109f4 <dec_lock+0x74>)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	011b      	lsls	r3, r3, #4
 80109d4:	4413      	add	r3, r2
 80109d6:	2200      	movs	r2, #0
 80109d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	737b      	strb	r3, [r7, #13]
 80109de:	e001      	b.n	80109e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80109e0:	2302      	movs	r3, #2
 80109e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80109e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	200003b0 	.word	0x200003b0

080109f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010a00:	2300      	movs	r3, #0
 8010a02:	60fb      	str	r3, [r7, #12]
 8010a04:	e010      	b.n	8010a28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010a06:	4a0d      	ldr	r2, [pc, #52]	; (8010a3c <clear_lock+0x44>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	011b      	lsls	r3, r3, #4
 8010a0c:	4413      	add	r3, r2
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d105      	bne.n	8010a22 <clear_lock+0x2a>
 8010a16:	4a09      	ldr	r2, [pc, #36]	; (8010a3c <clear_lock+0x44>)
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	011b      	lsls	r3, r3, #4
 8010a1c:	4413      	add	r3, r2
 8010a1e:	2200      	movs	r2, #0
 8010a20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3301      	adds	r3, #1
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d9eb      	bls.n	8010a06 <clear_lock+0xe>
	}
}
 8010a2e:	bf00      	nop
 8010a30:	3714      	adds	r7, #20
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	200003b0 	.word	0x200003b0

08010a40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	78db      	ldrb	r3, [r3, #3]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d034      	beq.n	8010abe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	7858      	ldrb	r0, [r3, #1]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a64:	2301      	movs	r3, #1
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	f7ff fd40 	bl	80104ec <disk_write>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a72:	2301      	movs	r3, #1
 8010a74:	73fb      	strb	r3, [r7, #15]
 8010a76:	e022      	b.n	8010abe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	1ad2      	subs	r2, r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	69db      	ldr	r3, [r3, #28]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d217      	bcs.n	8010abe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	789b      	ldrb	r3, [r3, #2]
 8010a92:	613b      	str	r3, [r7, #16]
 8010a94:	e010      	b.n	8010ab8 <sync_window+0x78>
					wsect += fs->fsize;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	69db      	ldr	r3, [r3, #28]
 8010a9a:	697a      	ldr	r2, [r7, #20]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	7858      	ldrb	r0, [r3, #1]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010aaa:	2301      	movs	r3, #1
 8010aac:	697a      	ldr	r2, [r7, #20]
 8010aae:	f7ff fd1d 	bl	80104ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	613b      	str	r3, [r7, #16]
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d8eb      	bhi.n	8010a96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3718      	adds	r7, #24
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d01b      	beq.n	8010b18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7ff ffad 	bl	8010a40 <sync_window>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d113      	bne.n	8010b18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	7858      	ldrb	r0, [r3, #1]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010afa:	2301      	movs	r3, #1
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	f7ff fcd5 	bl	80104ac <disk_read>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d004      	beq.n	8010b12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010b08:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010b0e:	2301      	movs	r3, #1
 8010b10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
	...

08010b24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff ff87 	bl	8010a40 <sync_window>
 8010b32:	4603      	mov	r3, r0
 8010b34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d159      	bne.n	8010bf0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d149      	bne.n	8010bd8 <sync_fs+0xb4>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	791b      	ldrb	r3, [r3, #4]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d145      	bne.n	8010bd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	899b      	ldrh	r3, [r3, #12]
 8010b56:	461a      	mov	r2, r3
 8010b58:	2100      	movs	r1, #0
 8010b5a:	f7ff fda8 	bl	80106ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	3334      	adds	r3, #52	; 0x34
 8010b62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7ff fd37 	bl	80105de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	3334      	adds	r3, #52	; 0x34
 8010b74:	4921      	ldr	r1, [pc, #132]	; (8010bfc <sync_fs+0xd8>)
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7ff fd4c 	bl	8010614 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3334      	adds	r3, #52	; 0x34
 8010b80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b84:	491e      	ldr	r1, [pc, #120]	; (8010c00 <sync_fs+0xdc>)
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7ff fd44 	bl	8010614 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3334      	adds	r3, #52	; 0x34
 8010b90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7ff fd3a 	bl	8010614 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3334      	adds	r3, #52	; 0x34
 8010ba4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	691b      	ldr	r3, [r3, #16]
 8010bac:	4619      	mov	r1, r3
 8010bae:	4610      	mov	r0, r2
 8010bb0:	f7ff fd30 	bl	8010614 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a1b      	ldr	r3, [r3, #32]
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	7858      	ldrb	r0, [r3, #1]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bcc:	2301      	movs	r3, #1
 8010bce:	f7ff fc8d 	bl	80104ec <disk_write>
			fs->fsi_flag = 0;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	785b      	ldrb	r3, [r3, #1]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2100      	movs	r1, #0
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff fca3 	bl	801052c <disk_ioctl>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <sync_fs+0xcc>
 8010bec:	2301      	movs	r3, #1
 8010bee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	41615252 	.word	0x41615252
 8010c00:	61417272 	.word	0x61417272

08010c04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	3b02      	subs	r3, #2
 8010c12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	3b02      	subs	r3, #2
 8010c1a:	683a      	ldr	r2, [r7, #0]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d301      	bcc.n	8010c24 <clust2sect+0x20>
 8010c20:	2300      	movs	r3, #0
 8010c22:	e008      	b.n	8010c36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	895b      	ldrh	r3, [r3, #10]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	fb03 f202 	mul.w	r2, r3, r2
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c34:	4413      	add	r3, r2
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b086      	sub	sp, #24
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d904      	bls.n	8010c62 <get_fat+0x20>
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	699b      	ldr	r3, [r3, #24]
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d302      	bcc.n	8010c68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010c62:	2301      	movs	r3, #1
 8010c64:	617b      	str	r3, [r7, #20]
 8010c66:	e0b7      	b.n	8010dd8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c68:	f04f 33ff 	mov.w	r3, #4294967295
 8010c6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d05a      	beq.n	8010d2c <get_fat+0xea>
 8010c76:	2b03      	cmp	r3, #3
 8010c78:	d07d      	beq.n	8010d76 <get_fat+0x134>
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	f040 80a2 	bne.w	8010dc4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	60fb      	str	r3, [r7, #12]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	085b      	lsrs	r3, r3, #1
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	899b      	ldrh	r3, [r3, #12]
 8010c96:	4619      	mov	r1, r3
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c9e:	4413      	add	r3, r2
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6938      	ldr	r0, [r7, #16]
 8010ca4:	f7ff ff10 	bl	8010ac8 <move_window>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f040 808d 	bne.w	8010dca <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	1c5a      	adds	r2, r3, #1
 8010cb4:	60fa      	str	r2, [r7, #12]
 8010cb6:	693a      	ldr	r2, [r7, #16]
 8010cb8:	8992      	ldrh	r2, [r2, #12]
 8010cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cbe:	fb02 f201 	mul.w	r2, r2, r1
 8010cc2:	1a9b      	subs	r3, r3, r2
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ccc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	899b      	ldrh	r3, [r3, #12]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cde:	4413      	add	r3, r2
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	6938      	ldr	r0, [r7, #16]
 8010ce4:	f7ff fef0 	bl	8010ac8 <move_window>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d16f      	bne.n	8010dce <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	899b      	ldrh	r3, [r3, #12]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cfa:	fb02 f201 	mul.w	r2, r2, r1
 8010cfe:	1a9b      	subs	r3, r3, r2
 8010d00:	693a      	ldr	r2, [r7, #16]
 8010d02:	4413      	add	r3, r2
 8010d04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d08:	021b      	lsls	r3, r3, #8
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	f003 0301 	and.w	r3, r3, #1
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d002      	beq.n	8010d22 <get_fat+0xe0>
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	091b      	lsrs	r3, r3, #4
 8010d20:	e002      	b.n	8010d28 <get_fat+0xe6>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d28:	617b      	str	r3, [r7, #20]
			break;
 8010d2a:	e055      	b.n	8010dd8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	899b      	ldrh	r3, [r3, #12]
 8010d34:	085b      	lsrs	r3, r3, #1
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4619      	mov	r1, r3
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d40:	4413      	add	r3, r2
 8010d42:	4619      	mov	r1, r3
 8010d44:	6938      	ldr	r0, [r7, #16]
 8010d46:	f7ff febf 	bl	8010ac8 <move_window>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d140      	bne.n	8010dd2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	693a      	ldr	r2, [r7, #16]
 8010d5c:	8992      	ldrh	r2, [r2, #12]
 8010d5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d62:	fb02 f200 	mul.w	r2, r2, r0
 8010d66:	1a9b      	subs	r3, r3, r2
 8010d68:	440b      	add	r3, r1
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff fbfc 	bl	8010568 <ld_word>
 8010d70:	4603      	mov	r3, r0
 8010d72:	617b      	str	r3, [r7, #20]
			break;
 8010d74:	e030      	b.n	8010dd8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	899b      	ldrh	r3, [r3, #12]
 8010d7e:	089b      	lsrs	r3, r3, #2
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4619      	mov	r1, r3
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	6938      	ldr	r0, [r7, #16]
 8010d90:	f7ff fe9a 	bl	8010ac8 <move_window>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d11d      	bne.n	8010dd6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	693a      	ldr	r2, [r7, #16]
 8010da6:	8992      	ldrh	r2, [r2, #12]
 8010da8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dac:	fb02 f200 	mul.w	r2, r2, r0
 8010db0:	1a9b      	subs	r3, r3, r2
 8010db2:	440b      	add	r3, r1
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fbef 	bl	8010598 <ld_dword>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010dc0:	617b      	str	r3, [r7, #20]
			break;
 8010dc2:	e009      	b.n	8010dd8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	617b      	str	r3, [r7, #20]
 8010dc8:	e006      	b.n	8010dd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dca:	bf00      	nop
 8010dcc:	e004      	b.n	8010dd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010dce:	bf00      	nop
 8010dd0:	e002      	b.n	8010dd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010dd2:	bf00      	nop
 8010dd4:	e000      	b.n	8010dd8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010dd6:	bf00      	nop
		}
	}

	return val;
 8010dd8:	697b      	ldr	r3, [r7, #20]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3718      	adds	r7, #24
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010de2:	b590      	push	{r4, r7, lr}
 8010de4:	b089      	sub	sp, #36	; 0x24
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	60b9      	str	r1, [r7, #8]
 8010dec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010dee:	2302      	movs	r3, #2
 8010df0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	f240 8106 	bls.w	8011006 <put_fat+0x224>
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	68ba      	ldr	r2, [r7, #8]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	f080 8100 	bcs.w	8011006 <put_fat+0x224>
		switch (fs->fs_type) {
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	f000 8088 	beq.w	8010f20 <put_fat+0x13e>
 8010e10:	2b03      	cmp	r3, #3
 8010e12:	f000 80b0 	beq.w	8010f76 <put_fat+0x194>
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	f040 80f5 	bne.w	8011006 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	61bb      	str	r3, [r7, #24]
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	085b      	lsrs	r3, r3, #1
 8010e24:	69ba      	ldr	r2, [r7, #24]
 8010e26:	4413      	add	r3, r2
 8010e28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	899b      	ldrh	r3, [r3, #12]
 8010e32:	4619      	mov	r1, r3
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e3a:	4413      	add	r3, r2
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f7ff fe42 	bl	8010ac8 <move_window>
 8010e44:	4603      	mov	r3, r0
 8010e46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e48:	7ffb      	ldrb	r3, [r7, #31]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f040 80d4 	bne.w	8010ff8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	1c5a      	adds	r2, r3, #1
 8010e5a:	61ba      	str	r2, [r7, #24]
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	8992      	ldrh	r2, [r2, #12]
 8010e60:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e64:	fb02 f200 	mul.w	r2, r2, r0
 8010e68:	1a9b      	subs	r3, r3, r2
 8010e6a:	440b      	add	r3, r1
 8010e6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	f003 0301 	and.w	r3, r3, #1
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00d      	beq.n	8010e94 <put_fat+0xb2>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	b25b      	sxtb	r3, r3
 8010e7e:	f003 030f 	and.w	r3, r3, #15
 8010e82:	b25a      	sxtb	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	011b      	lsls	r3, r3, #4
 8010e8a:	b25b      	sxtb	r3, r3
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	b25b      	sxtb	r3, r3
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	e001      	b.n	8010e98 <put_fat+0xb6>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	697a      	ldr	r2, [r7, #20]
 8010e9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	4619      	mov	r1, r3
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8010eb2:	4413      	add	r3, r2
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f7ff fe06 	bl	8010ac8 <move_window>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ec0:	7ffb      	ldrb	r3, [r7, #31]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f040 809a 	bne.w	8010ffc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	899b      	ldrh	r3, [r3, #12]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010eda:	fb02 f200 	mul.w	r2, r2, r0
 8010ede:	1a9b      	subs	r3, r3, r2
 8010ee0:	440b      	add	r3, r1
 8010ee2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	f003 0301 	and.w	r3, r3, #1
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d003      	beq.n	8010ef6 <put_fat+0x114>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	091b      	lsrs	r3, r3, #4
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	e00e      	b.n	8010f14 <put_fat+0x132>
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	b25b      	sxtb	r3, r3
 8010efc:	f023 030f 	bic.w	r3, r3, #15
 8010f00:	b25a      	sxtb	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	0a1b      	lsrs	r3, r3, #8
 8010f06:	b25b      	sxtb	r3, r3
 8010f08:	f003 030f 	and.w	r3, r3, #15
 8010f0c:	b25b      	sxtb	r3, r3
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	b25b      	sxtb	r3, r3
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	697a      	ldr	r2, [r7, #20]
 8010f16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	70da      	strb	r2, [r3, #3]
			break;
 8010f1e:	e072      	b.n	8011006 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	899b      	ldrh	r3, [r3, #12]
 8010f28:	085b      	lsrs	r3, r3, #1
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f34:	4413      	add	r3, r2
 8010f36:	4619      	mov	r1, r3
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f7ff fdc5 	bl	8010ac8 <move_window>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f42:	7ffb      	ldrb	r3, [r7, #31]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d15b      	bne.n	8011000 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	005b      	lsls	r3, r3, #1
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	8992      	ldrh	r2, [r2, #12]
 8010f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f5a:	fb02 f200 	mul.w	r2, r2, r0
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	440b      	add	r3, r1
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	b292      	uxth	r2, r2
 8010f66:	4611      	mov	r1, r2
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fb38 	bl	80105de <st_word>
			fs->wflag = 1;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2201      	movs	r2, #1
 8010f72:	70da      	strb	r2, [r3, #3]
			break;
 8010f74:	e047      	b.n	8011006 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	899b      	ldrh	r3, [r3, #12]
 8010f7e:	089b      	lsrs	r3, r3, #2
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	4619      	mov	r1, r3
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f8a:	4413      	add	r3, r2
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7ff fd9a 	bl	8010ac8 <move_window>
 8010f94:	4603      	mov	r3, r0
 8010f96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f98:	7ffb      	ldrb	r3, [r7, #31]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d132      	bne.n	8011004 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	8992      	ldrh	r2, [r2, #12]
 8010fb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fb6:	fb02 f200 	mul.w	r2, r2, r0
 8010fba:	1a9b      	subs	r3, r3, r2
 8010fbc:	440b      	add	r3, r1
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7ff faea 	bl	8010598 <ld_dword>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010fca:	4323      	orrs	r3, r4
 8010fcc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	8992      	ldrh	r2, [r2, #12]
 8010fdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fe0:	fb02 f200 	mul.w	r2, r2, r0
 8010fe4:	1a9b      	subs	r3, r3, r2
 8010fe6:	440b      	add	r3, r1
 8010fe8:	6879      	ldr	r1, [r7, #4]
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff fb12 	bl	8010614 <st_dword>
			fs->wflag = 1;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	70da      	strb	r2, [r3, #3]
			break;
 8010ff6:	e006      	b.n	8011006 <put_fat+0x224>
			if (res != FR_OK) break;
 8010ff8:	bf00      	nop
 8010ffa:	e004      	b.n	8011006 <put_fat+0x224>
			if (res != FR_OK) break;
 8010ffc:	bf00      	nop
 8010ffe:	e002      	b.n	8011006 <put_fat+0x224>
			if (res != FR_OK) break;
 8011000:	bf00      	nop
 8011002:	e000      	b.n	8011006 <put_fat+0x224>
			if (res != FR_OK) break;
 8011004:	bf00      	nop
		}
	}
	return res;
 8011006:	7ffb      	ldrb	r3, [r7, #31]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3724      	adds	r7, #36	; 0x24
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}

08011010 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b088      	sub	sp, #32
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d904      	bls.n	8011036 <remove_chain+0x26>
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	429a      	cmp	r2, r3
 8011034:	d301      	bcc.n	801103a <remove_chain+0x2a>
 8011036:	2302      	movs	r3, #2
 8011038:	e04b      	b.n	80110d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00c      	beq.n	801105a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011040:	f04f 32ff 	mov.w	r2, #4294967295
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	69b8      	ldr	r0, [r7, #24]
 8011048:	f7ff fecb 	bl	8010de2 <put_fat>
 801104c:	4603      	mov	r3, r0
 801104e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011050:	7ffb      	ldrb	r3, [r7, #31]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d001      	beq.n	801105a <remove_chain+0x4a>
 8011056:	7ffb      	ldrb	r3, [r7, #31]
 8011058:	e03b      	b.n	80110d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801105a:	68b9      	ldr	r1, [r7, #8]
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f7ff fdf0 	bl	8010c42 <get_fat>
 8011062:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d031      	beq.n	80110ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d101      	bne.n	8011074 <remove_chain+0x64>
 8011070:	2302      	movs	r3, #2
 8011072:	e02e      	b.n	80110d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801107a:	d101      	bne.n	8011080 <remove_chain+0x70>
 801107c:	2301      	movs	r3, #1
 801107e:	e028      	b.n	80110d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011080:	2200      	movs	r2, #0
 8011082:	68b9      	ldr	r1, [r7, #8]
 8011084:	69b8      	ldr	r0, [r7, #24]
 8011086:	f7ff feac 	bl	8010de2 <put_fat>
 801108a:	4603      	mov	r3, r0
 801108c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801108e:	7ffb      	ldrb	r3, [r7, #31]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d001      	beq.n	8011098 <remove_chain+0x88>
 8011094:	7ffb      	ldrb	r3, [r7, #31]
 8011096:	e01c      	b.n	80110d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	695a      	ldr	r2, [r3, #20]
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	3b02      	subs	r3, #2
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d20b      	bcs.n	80110be <remove_chain+0xae>
			fs->free_clst++;
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	791b      	ldrb	r3, [r3, #4]
 80110b4:	f043 0301 	orr.w	r3, r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	699b      	ldr	r3, [r3, #24]
 80110c6:	68ba      	ldr	r2, [r7, #8]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d3c6      	bcc.n	801105a <remove_chain+0x4a>
 80110cc:	e000      	b.n	80110d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80110ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3720      	adds	r7, #32
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b088      	sub	sp, #32
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
 80110e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10d      	bne.n	801110c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d004      	beq.n	8011106 <create_chain+0x2c>
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	699b      	ldr	r3, [r3, #24]
 8011100:	69ba      	ldr	r2, [r7, #24]
 8011102:	429a      	cmp	r2, r3
 8011104:	d31b      	bcc.n	801113e <create_chain+0x64>
 8011106:	2301      	movs	r3, #1
 8011108:	61bb      	str	r3, [r7, #24]
 801110a:	e018      	b.n	801113e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801110c:	6839      	ldr	r1, [r7, #0]
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f7ff fd97 	bl	8010c42 <get_fat>
 8011114:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2b01      	cmp	r3, #1
 801111a:	d801      	bhi.n	8011120 <create_chain+0x46>
 801111c:	2301      	movs	r3, #1
 801111e:	e070      	b.n	8011202 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011126:	d101      	bne.n	801112c <create_chain+0x52>
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	e06a      	b.n	8011202 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	429a      	cmp	r2, r3
 8011134:	d201      	bcs.n	801113a <create_chain+0x60>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	e063      	b.n	8011202 <create_chain+0x128>
		scl = clst;
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	3301      	adds	r3, #1
 8011146:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	69fa      	ldr	r2, [r7, #28]
 801114e:	429a      	cmp	r2, r3
 8011150:	d307      	bcc.n	8011162 <create_chain+0x88>
				ncl = 2;
 8011152:	2302      	movs	r3, #2
 8011154:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011156:	69fa      	ldr	r2, [r7, #28]
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	429a      	cmp	r2, r3
 801115c:	d901      	bls.n	8011162 <create_chain+0x88>
 801115e:	2300      	movs	r3, #0
 8011160:	e04f      	b.n	8011202 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011162:	69f9      	ldr	r1, [r7, #28]
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff fd6c 	bl	8010c42 <get_fat>
 801116a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00e      	beq.n	8011190 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d003      	beq.n	8011180 <create_chain+0xa6>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117e:	d101      	bne.n	8011184 <create_chain+0xaa>
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	e03e      	b.n	8011202 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011184:	69fa      	ldr	r2, [r7, #28]
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	429a      	cmp	r2, r3
 801118a:	d1da      	bne.n	8011142 <create_chain+0x68>
 801118c:	2300      	movs	r3, #0
 801118e:	e038      	b.n	8011202 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011190:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011192:	f04f 32ff 	mov.w	r2, #4294967295
 8011196:	69f9      	ldr	r1, [r7, #28]
 8011198:	6938      	ldr	r0, [r7, #16]
 801119a:	f7ff fe22 	bl	8010de2 <put_fat>
 801119e:	4603      	mov	r3, r0
 80111a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80111a2:	7dfb      	ldrb	r3, [r7, #23]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d109      	bne.n	80111bc <create_chain+0xe2>
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d006      	beq.n	80111bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80111ae:	69fa      	ldr	r2, [r7, #28]
 80111b0:	6839      	ldr	r1, [r7, #0]
 80111b2:	6938      	ldr	r0, [r7, #16]
 80111b4:	f7ff fe15 	bl	8010de2 <put_fat>
 80111b8:	4603      	mov	r3, r0
 80111ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80111bc:	7dfb      	ldrb	r3, [r7, #23]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d116      	bne.n	80111f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	69fa      	ldr	r2, [r7, #28]
 80111c6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	695a      	ldr	r2, [r3, #20]
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	3b02      	subs	r3, #2
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d804      	bhi.n	80111e0 <create_chain+0x106>
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	695b      	ldr	r3, [r3, #20]
 80111da:	1e5a      	subs	r2, r3, #1
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	791b      	ldrb	r3, [r3, #4]
 80111e4:	f043 0301 	orr.w	r3, r3, #1
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	711a      	strb	r2, [r3, #4]
 80111ee:	e007      	b.n	8011200 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80111f0:	7dfb      	ldrb	r3, [r7, #23]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d102      	bne.n	80111fc <create_chain+0x122>
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295
 80111fa:	e000      	b.n	80111fe <create_chain+0x124>
 80111fc:	2301      	movs	r3, #1
 80111fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011200:	69fb      	ldr	r3, [r7, #28]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3720      	adds	r7, #32
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801120a:	b480      	push	{r7}
 801120c:	b087      	sub	sp, #28
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121e:	3304      	adds	r3, #4
 8011220:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	899b      	ldrh	r3, [r3, #12]
 8011226:	461a      	mov	r2, r3
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	fbb3 f3f2 	udiv	r3, r3, r2
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	8952      	ldrh	r2, [r2, #10]
 8011232:	fbb3 f3f2 	udiv	r3, r3, r2
 8011236:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	1d1a      	adds	r2, r3, #4
 801123c:	613a      	str	r2, [r7, #16]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d101      	bne.n	801124c <clmt_clust+0x42>
 8011248:	2300      	movs	r3, #0
 801124a:	e010      	b.n	801126e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	429a      	cmp	r2, r3
 8011252:	d307      	bcc.n	8011264 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	617b      	str	r3, [r7, #20]
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	3304      	adds	r3, #4
 8011260:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011262:	e7e9      	b.n	8011238 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011264:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	4413      	add	r3, r2
}
 801126e:	4618      	mov	r0, r3
 8011270:	371c      	adds	r7, #28
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr

0801127a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b086      	sub	sp, #24
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011290:	d204      	bcs.n	801129c <dir_sdi+0x22>
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	f003 031f 	and.w	r3, r3, #31
 8011298:	2b00      	cmp	r3, #0
 801129a:	d001      	beq.n	80112a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 801129c:	2302      	movs	r3, #2
 801129e:	e071      	b.n	8011384 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	689b      	ldr	r3, [r3, #8]
 80112aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <dir_sdi+0x46>
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d902      	bls.n	80112c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d10c      	bne.n	80112e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	095b      	lsrs	r3, r3, #5
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	8912      	ldrh	r2, [r2, #8]
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d301      	bcc.n	80112d6 <dir_sdi+0x5c>
 80112d2:	2302      	movs	r3, #2
 80112d4:	e056      	b.n	8011384 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	61da      	str	r2, [r3, #28]
 80112de:	e02d      	b.n	801133c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	895b      	ldrh	r3, [r3, #10]
 80112e4:	461a      	mov	r2, r3
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	899b      	ldrh	r3, [r3, #12]
 80112ea:	fb03 f302 	mul.w	r3, r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112f0:	e019      	b.n	8011326 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6979      	ldr	r1, [r7, #20]
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7ff fca3 	bl	8010c42 <get_fat>
 80112fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011304:	d101      	bne.n	801130a <dir_sdi+0x90>
 8011306:	2301      	movs	r3, #1
 8011308:	e03c      	b.n	8011384 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d904      	bls.n	801131a <dir_sdi+0xa0>
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	697a      	ldr	r2, [r7, #20]
 8011316:	429a      	cmp	r2, r3
 8011318:	d301      	bcc.n	801131e <dir_sdi+0xa4>
 801131a:	2302      	movs	r3, #2
 801131c:	e032      	b.n	8011384 <dir_sdi+0x10a>
			ofs -= csz;
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	429a      	cmp	r2, r3
 801132c:	d2e1      	bcs.n	80112f2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801132e:	6979      	ldr	r1, [r7, #20]
 8011330:	6938      	ldr	r0, [r7, #16]
 8011332:	f7ff fc67 	bl	8010c04 <clust2sect>
 8011336:	4602      	mov	r2, r0
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	697a      	ldr	r2, [r7, #20]
 8011340:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	69db      	ldr	r3, [r3, #28]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <dir_sdi+0xd4>
 801134a:	2302      	movs	r3, #2
 801134c:	e01a      	b.n	8011384 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	69da      	ldr	r2, [r3, #28]
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	899b      	ldrh	r3, [r3, #12]
 8011356:	4619      	mov	r1, r3
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	fbb3 f3f1 	udiv	r3, r3, r1
 801135e:	441a      	add	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	899b      	ldrh	r3, [r3, #12]
 801136e:	461a      	mov	r2, r3
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	fbb3 f0f2 	udiv	r0, r3, r2
 8011376:	fb02 f200 	mul.w	r2, r2, r0
 801137a:	1a9b      	subs	r3, r3, r2
 801137c:	18ca      	adds	r2, r1, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011382:	2300      	movs	r3, #0
}
 8011384:	4618      	mov	r0, r3
 8011386:	3718      	adds	r7, #24
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b086      	sub	sp, #24
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	695b      	ldr	r3, [r3, #20]
 80113a0:	3320      	adds	r3, #32
 80113a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	69db      	ldr	r3, [r3, #28]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d003      	beq.n	80113b4 <dir_next+0x28>
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80113b2:	d301      	bcc.n	80113b8 <dir_next+0x2c>
 80113b4:	2304      	movs	r3, #4
 80113b6:	e0bb      	b.n	8011530 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	899b      	ldrh	r3, [r3, #12]
 80113bc:	461a      	mov	r2, r3
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80113c4:	fb02 f201 	mul.w	r2, r2, r1
 80113c8:	1a9b      	subs	r3, r3, r2
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f040 809d 	bne.w	801150a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	69db      	ldr	r3, [r3, #28]
 80113d4:	1c5a      	adds	r2, r3, #1
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	699b      	ldr	r3, [r3, #24]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10b      	bne.n	80113fa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	095b      	lsrs	r3, r3, #5
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	8912      	ldrh	r2, [r2, #8]
 80113ea:	4293      	cmp	r3, r2
 80113ec:	f0c0 808d 	bcc.w	801150a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	61da      	str	r2, [r3, #28]
 80113f6:	2304      	movs	r3, #4
 80113f8:	e09a      	b.n	8011530 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	899b      	ldrh	r3, [r3, #12]
 80113fe:	461a      	mov	r2, r3
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	fbb3 f3f2 	udiv	r3, r3, r2
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	8952      	ldrh	r2, [r2, #10]
 801140a:	3a01      	subs	r2, #1
 801140c:	4013      	ands	r3, r2
 801140e:	2b00      	cmp	r3, #0
 8011410:	d17b      	bne.n	801150a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	f7ff fc11 	bl	8010c42 <get_fat>
 8011420:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b01      	cmp	r3, #1
 8011426:	d801      	bhi.n	801142c <dir_next+0xa0>
 8011428:	2302      	movs	r3, #2
 801142a:	e081      	b.n	8011530 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011432:	d101      	bne.n	8011438 <dir_next+0xac>
 8011434:	2301      	movs	r3, #1
 8011436:	e07b      	b.n	8011530 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	699b      	ldr	r3, [r3, #24]
 801143c:	697a      	ldr	r2, [r7, #20]
 801143e:	429a      	cmp	r2, r3
 8011440:	d359      	bcc.n	80114f6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d104      	bne.n	8011452 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	61da      	str	r2, [r3, #28]
 801144e:	2304      	movs	r3, #4
 8011450:	e06e      	b.n	8011530 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	699b      	ldr	r3, [r3, #24]
 8011458:	4619      	mov	r1, r3
 801145a:	4610      	mov	r0, r2
 801145c:	f7ff fe3d 	bl	80110da <create_chain>
 8011460:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d101      	bne.n	801146c <dir_next+0xe0>
 8011468:	2307      	movs	r3, #7
 801146a:	e061      	b.n	8011530 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d101      	bne.n	8011476 <dir_next+0xea>
 8011472:	2302      	movs	r3, #2
 8011474:	e05c      	b.n	8011530 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147c:	d101      	bne.n	8011482 <dir_next+0xf6>
 801147e:	2301      	movs	r3, #1
 8011480:	e056      	b.n	8011530 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ff fadc 	bl	8010a40 <sync_window>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d001      	beq.n	8011492 <dir_next+0x106>
 801148e:	2301      	movs	r3, #1
 8011490:	e04e      	b.n	8011530 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	899b      	ldrh	r3, [r3, #12]
 801149c:	461a      	mov	r2, r3
 801149e:	2100      	movs	r1, #0
 80114a0:	f7ff f905 	bl	80106ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114a4:	2300      	movs	r3, #0
 80114a6:	613b      	str	r3, [r7, #16]
 80114a8:	6979      	ldr	r1, [r7, #20]
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f7ff fbaa 	bl	8010c04 <clust2sect>
 80114b0:	4602      	mov	r2, r0
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	631a      	str	r2, [r3, #48]	; 0x30
 80114b6:	e012      	b.n	80114de <dir_next+0x152>
						fs->wflag = 1;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2201      	movs	r2, #1
 80114bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f7ff fabe 	bl	8010a40 <sync_window>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <dir_next+0x142>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e030      	b.n	8011530 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	3301      	adds	r3, #1
 80114d2:	613b      	str	r3, [r7, #16]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	631a      	str	r2, [r3, #48]	; 0x30
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	895b      	ldrh	r3, [r3, #10]
 80114e2:	461a      	mov	r2, r3
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d3e6      	bcc.n	80114b8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	1ad2      	subs	r2, r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	697a      	ldr	r2, [r7, #20]
 80114fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80114fc:	6979      	ldr	r1, [r7, #20]
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	f7ff fb80 	bl	8010c04 <clust2sect>
 8011504:	4602      	mov	r2, r0
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	899b      	ldrh	r3, [r3, #12]
 801151a:	461a      	mov	r2, r3
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011522:	fb02 f200 	mul.w	r2, r2, r0
 8011526:	1a9b      	subs	r3, r3, r2
 8011528:	18ca      	adds	r2, r1, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801152e:	2300      	movs	r3, #0
}
 8011530:	4618      	mov	r0, r3
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011548:	2100      	movs	r1, #0
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff fe95 	bl	801127a <dir_sdi>
 8011550:	4603      	mov	r3, r0
 8011552:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011554:	7dfb      	ldrb	r3, [r7, #23]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d12b      	bne.n	80115b2 <dir_alloc+0x7a>
		n = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	69db      	ldr	r3, [r3, #28]
 8011562:	4619      	mov	r1, r3
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f7ff faaf 	bl	8010ac8 <move_window>
 801156a:	4603      	mov	r3, r0
 801156c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d11d      	bne.n	80115b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a1b      	ldr	r3, [r3, #32]
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	2be5      	cmp	r3, #229	; 0xe5
 801157c:	d004      	beq.n	8011588 <dir_alloc+0x50>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a1b      	ldr	r3, [r3, #32]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d107      	bne.n	8011598 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	3301      	adds	r3, #1
 801158c:	613b      	str	r3, [r7, #16]
 801158e:	693a      	ldr	r2, [r7, #16]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d102      	bne.n	801159c <dir_alloc+0x64>
 8011596:	e00c      	b.n	80115b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011598:	2300      	movs	r3, #0
 801159a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801159c:	2101      	movs	r1, #1
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff fef4 	bl	801138c <dir_next>
 80115a4:	4603      	mov	r3, r0
 80115a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80115a8:	7dfb      	ldrb	r3, [r7, #23]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d0d7      	beq.n	801155e <dir_alloc+0x26>
 80115ae:	e000      	b.n	80115b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80115b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115b2:	7dfb      	ldrb	r3, [r7, #23]
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	d101      	bne.n	80115bc <dir_alloc+0x84>
 80115b8:	2307      	movs	r3, #7
 80115ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80115bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3718      	adds	r7, #24
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b084      	sub	sp, #16
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	331a      	adds	r3, #26
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7fe ffc7 	bl	8010568 <ld_word>
 80115da:	4603      	mov	r3, r0
 80115dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	2b03      	cmp	r3, #3
 80115e4:	d109      	bne.n	80115fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	3314      	adds	r3, #20
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fe ffbc 	bl	8010568 <ld_word>
 80115f0:	4603      	mov	r3, r0
 80115f2:	041b      	lsls	r3, r3, #16
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	4313      	orrs	r3, r2
 80115f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80115fa:	68fb      	ldr	r3, [r7, #12]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	331a      	adds	r3, #26
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	b292      	uxth	r2, r2
 8011618:	4611      	mov	r1, r2
 801161a:	4618      	mov	r0, r3
 801161c:	f7fe ffdf 	bl	80105de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	2b03      	cmp	r3, #3
 8011626:	d109      	bne.n	801163c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	f103 0214 	add.w	r2, r3, #20
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	0c1b      	lsrs	r3, r3, #16
 8011632:	b29b      	uxth	r3, r3
 8011634:	4619      	mov	r1, r3
 8011636:	4610      	mov	r0, r2
 8011638:	f7fe ffd1 	bl	80105de <st_word>
	}
}
 801163c:	bf00      	nop
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b086      	sub	sp, #24
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011652:	2100      	movs	r1, #0
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f7ff fe10 	bl	801127a <dir_sdi>
 801165a:	4603      	mov	r3, r0
 801165c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801165e:	7dfb      	ldrb	r3, [r7, #23]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <dir_find+0x24>
 8011664:	7dfb      	ldrb	r3, [r7, #23]
 8011666:	e03e      	b.n	80116e6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	69db      	ldr	r3, [r3, #28]
 801166c:	4619      	mov	r1, r3
 801166e:	6938      	ldr	r0, [r7, #16]
 8011670:	f7ff fa2a 	bl	8010ac8 <move_window>
 8011674:	4603      	mov	r3, r0
 8011676:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011678:	7dfb      	ldrb	r3, [r7, #23]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d12f      	bne.n	80116de <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6a1b      	ldr	r3, [r3, #32]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011686:	7bfb      	ldrb	r3, [r7, #15]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <dir_find+0x4e>
 801168c:	2304      	movs	r3, #4
 801168e:	75fb      	strb	r3, [r7, #23]
 8011690:	e028      	b.n	80116e4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	330b      	adds	r3, #11
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6a1b      	ldr	r3, [r3, #32]
 80116a8:	330b      	adds	r3, #11
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	f003 0308 	and.w	r3, r3, #8
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10a      	bne.n	80116ca <dir_find+0x86>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6a18      	ldr	r0, [r3, #32]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	3324      	adds	r3, #36	; 0x24
 80116bc:	220b      	movs	r2, #11
 80116be:	4619      	mov	r1, r3
 80116c0:	f7ff f80f 	bl	80106e2 <mem_cmp>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00b      	beq.n	80116e2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80116ca:	2100      	movs	r1, #0
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7ff fe5d 	bl	801138c <dir_next>
 80116d2:	4603      	mov	r3, r0
 80116d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80116d6:	7dfb      	ldrb	r3, [r7, #23]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d0c5      	beq.n	8011668 <dir_find+0x24>
 80116dc:	e002      	b.n	80116e4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80116de:	bf00      	nop
 80116e0:	e000      	b.n	80116e4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80116e2:	bf00      	nop

	return res;
 80116e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3718      	adds	r7, #24
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b084      	sub	sp, #16
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80116fc:	2101      	movs	r1, #1
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7ff ff1a 	bl	8011538 <dir_alloc>
 8011704:	4603      	mov	r3, r0
 8011706:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011708:	7bfb      	ldrb	r3, [r7, #15]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d11c      	bne.n	8011748 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	4619      	mov	r1, r3
 8011714:	68b8      	ldr	r0, [r7, #8]
 8011716:	f7ff f9d7 	bl	8010ac8 <move_window>
 801171a:	4603      	mov	r3, r0
 801171c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801171e:	7bfb      	ldrb	r3, [r7, #15]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d111      	bne.n	8011748 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6a1b      	ldr	r3, [r3, #32]
 8011728:	2220      	movs	r2, #32
 801172a:	2100      	movs	r1, #0
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe ffbe 	bl	80106ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a18      	ldr	r0, [r3, #32]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	3324      	adds	r3, #36	; 0x24
 801173a:	220b      	movs	r2, #11
 801173c:	4619      	mov	r1, r3
 801173e:	f7fe ff95 	bl	801066c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	2201      	movs	r2, #1
 8011746:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b088      	sub	sp, #32
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	60fb      	str	r3, [r7, #12]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	3324      	adds	r3, #36	; 0x24
 8011768:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801176a:	220b      	movs	r2, #11
 801176c:	2120      	movs	r1, #32
 801176e:	68b8      	ldr	r0, [r7, #8]
 8011770:	f7fe ff9d 	bl	80106ae <mem_set>
	si = i = 0; ni = 8;
 8011774:	2300      	movs	r3, #0
 8011776:	613b      	str	r3, [r7, #16]
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	617b      	str	r3, [r7, #20]
 801177c:	2308      	movs	r3, #8
 801177e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	1c5a      	adds	r2, r3, #1
 8011784:	617a      	str	r2, [r7, #20]
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	4413      	add	r3, r2
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801178e:	7ffb      	ldrb	r3, [r7, #31]
 8011790:	2b20      	cmp	r3, #32
 8011792:	d94e      	bls.n	8011832 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011794:	7ffb      	ldrb	r3, [r7, #31]
 8011796:	2b2f      	cmp	r3, #47	; 0x2f
 8011798:	d006      	beq.n	80117a8 <create_name+0x54>
 801179a:	7ffb      	ldrb	r3, [r7, #31]
 801179c:	2b5c      	cmp	r3, #92	; 0x5c
 801179e:	d110      	bne.n	80117c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80117a0:	e002      	b.n	80117a8 <create_name+0x54>
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	3301      	adds	r3, #1
 80117a6:	617b      	str	r3, [r7, #20]
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	4413      	add	r3, r2
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b2f      	cmp	r3, #47	; 0x2f
 80117b2:	d0f6      	beq.n	80117a2 <create_name+0x4e>
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	4413      	add	r3, r2
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	2b5c      	cmp	r3, #92	; 0x5c
 80117be:	d0f0      	beq.n	80117a2 <create_name+0x4e>
			break;
 80117c0:	e038      	b.n	8011834 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80117c2:	7ffb      	ldrb	r3, [r7, #31]
 80117c4:	2b2e      	cmp	r3, #46	; 0x2e
 80117c6:	d003      	beq.n	80117d0 <create_name+0x7c>
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d30c      	bcc.n	80117ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	2b0b      	cmp	r3, #11
 80117d4:	d002      	beq.n	80117dc <create_name+0x88>
 80117d6:	7ffb      	ldrb	r3, [r7, #31]
 80117d8:	2b2e      	cmp	r3, #46	; 0x2e
 80117da:	d001      	beq.n	80117e0 <create_name+0x8c>
 80117dc:	2306      	movs	r3, #6
 80117de:	e044      	b.n	801186a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80117e0:	2308      	movs	r3, #8
 80117e2:	613b      	str	r3, [r7, #16]
 80117e4:	230b      	movs	r3, #11
 80117e6:	61bb      	str	r3, [r7, #24]
			continue;
 80117e8:	e022      	b.n	8011830 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80117ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	da04      	bge.n	80117fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80117f2:	7ffb      	ldrb	r3, [r7, #31]
 80117f4:	3b80      	subs	r3, #128	; 0x80
 80117f6:	4a1f      	ldr	r2, [pc, #124]	; (8011874 <create_name+0x120>)
 80117f8:	5cd3      	ldrb	r3, [r2, r3]
 80117fa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80117fc:	7ffb      	ldrb	r3, [r7, #31]
 80117fe:	4619      	mov	r1, r3
 8011800:	481d      	ldr	r0, [pc, #116]	; (8011878 <create_name+0x124>)
 8011802:	f7fe ff95 	bl	8010730 <chk_chr>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d001      	beq.n	8011810 <create_name+0xbc>
 801180c:	2306      	movs	r3, #6
 801180e:	e02c      	b.n	801186a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011810:	7ffb      	ldrb	r3, [r7, #31]
 8011812:	2b60      	cmp	r3, #96	; 0x60
 8011814:	d905      	bls.n	8011822 <create_name+0xce>
 8011816:	7ffb      	ldrb	r3, [r7, #31]
 8011818:	2b7a      	cmp	r3, #122	; 0x7a
 801181a:	d802      	bhi.n	8011822 <create_name+0xce>
 801181c:	7ffb      	ldrb	r3, [r7, #31]
 801181e:	3b20      	subs	r3, #32
 8011820:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	1c5a      	adds	r2, r3, #1
 8011826:	613a      	str	r2, [r7, #16]
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	4413      	add	r3, r2
 801182c:	7ffa      	ldrb	r2, [r7, #31]
 801182e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011830:	e7a6      	b.n	8011780 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011832:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	441a      	add	r2, r3
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <create_name+0xf4>
 8011844:	2306      	movs	r3, #6
 8011846:	e010      	b.n	801186a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	2be5      	cmp	r3, #229	; 0xe5
 801184e:	d102      	bne.n	8011856 <create_name+0x102>
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	2205      	movs	r2, #5
 8011854:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011856:	7ffb      	ldrb	r3, [r7, #31]
 8011858:	2b20      	cmp	r3, #32
 801185a:	d801      	bhi.n	8011860 <create_name+0x10c>
 801185c:	2204      	movs	r2, #4
 801185e:	e000      	b.n	8011862 <create_name+0x10e>
 8011860:	2200      	movs	r2, #0
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	330b      	adds	r3, #11
 8011866:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011868:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801186a:	4618      	mov	r0, r3
 801186c:	3720      	adds	r7, #32
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	0801c2b8 	.word	0x0801c2b8
 8011878:	0801bbc4 	.word	0x0801bbc4

0801187c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b086      	sub	sp, #24
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011890:	e002      	b.n	8011898 <follow_path+0x1c>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	3301      	adds	r3, #1
 8011896:	603b      	str	r3, [r7, #0]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	2b2f      	cmp	r3, #47	; 0x2f
 801189e:	d0f8      	beq.n	8011892 <follow_path+0x16>
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b5c      	cmp	r3, #92	; 0x5c
 80118a6:	d0f4      	beq.n	8011892 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	2200      	movs	r2, #0
 80118ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	2b1f      	cmp	r3, #31
 80118b4:	d80a      	bhi.n	80118cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2280      	movs	r2, #128	; 0x80
 80118ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80118be:	2100      	movs	r1, #0
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7ff fcda 	bl	801127a <dir_sdi>
 80118c6:	4603      	mov	r3, r0
 80118c8:	75fb      	strb	r3, [r7, #23]
 80118ca:	e048      	b.n	801195e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80118cc:	463b      	mov	r3, r7
 80118ce:	4619      	mov	r1, r3
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7ff ff3f 	bl	8011754 <create_name>
 80118d6:	4603      	mov	r3, r0
 80118d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d139      	bne.n	8011954 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7ff feaf 	bl	8011644 <dir_find>
 80118e6:	4603      	mov	r3, r0
 80118e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80118f2:	7dfb      	ldrb	r3, [r7, #23]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00a      	beq.n	801190e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
 80118fa:	2b04      	cmp	r3, #4
 80118fc:	d12c      	bne.n	8011958 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80118fe:	7afb      	ldrb	r3, [r7, #11]
 8011900:	f003 0304 	and.w	r3, r3, #4
 8011904:	2b00      	cmp	r3, #0
 8011906:	d127      	bne.n	8011958 <follow_path+0xdc>
 8011908:	2305      	movs	r3, #5
 801190a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801190c:	e024      	b.n	8011958 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801190e:	7afb      	ldrb	r3, [r7, #11]
 8011910:	f003 0304 	and.w	r3, r3, #4
 8011914:	2b00      	cmp	r3, #0
 8011916:	d121      	bne.n	801195c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	799b      	ldrb	r3, [r3, #6]
 801191c:	f003 0310 	and.w	r3, r3, #16
 8011920:	2b00      	cmp	r3, #0
 8011922:	d102      	bne.n	801192a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011924:	2305      	movs	r3, #5
 8011926:	75fb      	strb	r3, [r7, #23]
 8011928:	e019      	b.n	801195e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	695b      	ldr	r3, [r3, #20]
 8011934:	68fa      	ldr	r2, [r7, #12]
 8011936:	8992      	ldrh	r2, [r2, #12]
 8011938:	fbb3 f0f2 	udiv	r0, r3, r2
 801193c:	fb02 f200 	mul.w	r2, r2, r0
 8011940:	1a9b      	subs	r3, r3, r2
 8011942:	440b      	add	r3, r1
 8011944:	4619      	mov	r1, r3
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f7ff fe3d 	bl	80115c6 <ld_clust>
 801194c:	4602      	mov	r2, r0
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011952:	e7bb      	b.n	80118cc <follow_path+0x50>
			if (res != FR_OK) break;
 8011954:	bf00      	nop
 8011956:	e002      	b.n	801195e <follow_path+0xe2>
				break;
 8011958:	bf00      	nop
 801195a:	e000      	b.n	801195e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801195c:	bf00      	nop
			}
		}
	}

	return res;
 801195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011960:	4618      	mov	r0, r3
 8011962:	3718      	adds	r7, #24
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011968:	b480      	push	{r7}
 801196a:	b087      	sub	sp, #28
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011970:	f04f 33ff 	mov.w	r3, #4294967295
 8011974:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d031      	beq.n	80119e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	617b      	str	r3, [r7, #20]
 8011984:	e002      	b.n	801198c <get_ldnumber+0x24>
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	3301      	adds	r3, #1
 801198a:	617b      	str	r3, [r7, #20]
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	2b20      	cmp	r3, #32
 8011992:	d903      	bls.n	801199c <get_ldnumber+0x34>
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b3a      	cmp	r3, #58	; 0x3a
 801199a:	d1f4      	bne.n	8011986 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	2b3a      	cmp	r3, #58	; 0x3a
 80119a2:	d11c      	bne.n	80119de <get_ldnumber+0x76>
			tp = *path;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	60fa      	str	r2, [r7, #12]
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	3b30      	subs	r3, #48	; 0x30
 80119b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b09      	cmp	r3, #9
 80119ba:	d80e      	bhi.n	80119da <get_ldnumber+0x72>
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d10a      	bne.n	80119da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d107      	bne.n	80119da <get_ldnumber+0x72>
					vol = (int)i;
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	3301      	adds	r3, #1
 80119d2:	617b      	str	r3, [r7, #20]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	697a      	ldr	r2, [r7, #20]
 80119d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	e002      	b.n	80119e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80119de:	2300      	movs	r3, #0
 80119e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80119e2:	693b      	ldr	r3, [r7, #16]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	371c      	adds	r7, #28
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	70da      	strb	r2, [r3, #3]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f04f 32ff 	mov.w	r2, #4294967295
 8011a06:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7ff f85c 	bl	8010ac8 <move_window>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d001      	beq.n	8011a1a <check_fs+0x2a>
 8011a16:	2304      	movs	r3, #4
 8011a18:	e038      	b.n	8011a8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	3334      	adds	r3, #52	; 0x34
 8011a1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fe fda0 	bl	8010568 <ld_word>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d001      	beq.n	8011a38 <check_fs+0x48>
 8011a34:	2303      	movs	r3, #3
 8011a36:	e029      	b.n	8011a8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a3e:	2be9      	cmp	r3, #233	; 0xe9
 8011a40:	d009      	beq.n	8011a56 <check_fs+0x66>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a48:	2beb      	cmp	r3, #235	; 0xeb
 8011a4a:	d11e      	bne.n	8011a8a <check_fs+0x9a>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011a52:	2b90      	cmp	r3, #144	; 0x90
 8011a54:	d119      	bne.n	8011a8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	3334      	adds	r3, #52	; 0x34
 8011a5a:	3336      	adds	r3, #54	; 0x36
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe fd9b 	bl	8010598 <ld_dword>
 8011a62:	4603      	mov	r3, r0
 8011a64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011a68:	4a0a      	ldr	r2, [pc, #40]	; (8011a94 <check_fs+0xa4>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d101      	bne.n	8011a72 <check_fs+0x82>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e00c      	b.n	8011a8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	3334      	adds	r3, #52	; 0x34
 8011a76:	3352      	adds	r3, #82	; 0x52
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7fe fd8d 	bl	8010598 <ld_dword>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <check_fs+0xa8>)
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d101      	bne.n	8011a8a <check_fs+0x9a>
 8011a86:	2300      	movs	r3, #0
 8011a88:	e000      	b.n	8011a8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011a8a:	2302      	movs	r3, #2
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	00544146 	.word	0x00544146
 8011a98:	33544146 	.word	0x33544146

08011a9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b096      	sub	sp, #88	; 0x58
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	2200      	movs	r2, #0
 8011aae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f7ff ff59 	bl	8011968 <get_ldnumber>
 8011ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	da01      	bge.n	8011ac2 <find_volume+0x26>
 8011abe:	230b      	movs	r3, #11
 8011ac0:	e265      	b.n	8011f8e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011ac2:	4ab0      	ldr	r2, [pc, #704]	; (8011d84 <find_volume+0x2e8>)
 8011ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011aca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d101      	bne.n	8011ad6 <find_volume+0x3a>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	e25b      	b.n	8011f8e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ada:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011adc:	79fb      	ldrb	r3, [r7, #7]
 8011ade:	f023 0301 	bic.w	r3, r3, #1
 8011ae2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d01a      	beq.n	8011b22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	785b      	ldrb	r3, [r3, #1]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fe fc9b 	bl	801042c <disk_status>
 8011af6:	4603      	mov	r3, r0
 8011af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b00:	f003 0301 	and.w	r3, r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10c      	bne.n	8011b22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011b08:	79fb      	ldrb	r3, [r7, #7]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d007      	beq.n	8011b1e <find_volume+0x82>
 8011b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b12:	f003 0304 	and.w	r3, r3, #4
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d001      	beq.n	8011b1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011b1a:	230a      	movs	r3, #10
 8011b1c:	e237      	b.n	8011f8e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e235      	b.n	8011f8e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b2a:	b2da      	uxtb	r2, r3
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe fc93 	bl	8010460 <disk_initialize>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b44:	f003 0301 	and.w	r3, r3, #1
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011b4c:	2303      	movs	r3, #3
 8011b4e:	e21e      	b.n	8011f8e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011b50:	79fb      	ldrb	r3, [r7, #7]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d007      	beq.n	8011b66 <find_volume+0xca>
 8011b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b5a:	f003 0304 	and.w	r3, r3, #4
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d001      	beq.n	8011b66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011b62:	230a      	movs	r3, #10
 8011b64:	e213      	b.n	8011f8e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b68:	7858      	ldrb	r0, [r3, #1]
 8011b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6c:	330c      	adds	r3, #12
 8011b6e:	461a      	mov	r2, r3
 8011b70:	2102      	movs	r1, #2
 8011b72:	f7fe fcdb 	bl	801052c <disk_ioctl>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <find_volume+0xe4>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e206      	b.n	8011f8e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	899b      	ldrh	r3, [r3, #12]
 8011b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b88:	d80d      	bhi.n	8011ba6 <find_volume+0x10a>
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8c:	899b      	ldrh	r3, [r3, #12]
 8011b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b92:	d308      	bcc.n	8011ba6 <find_volume+0x10a>
 8011b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b96:	899b      	ldrh	r3, [r3, #12]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	4013      	ands	r3, r2
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <find_volume+0x10e>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e1f1      	b.n	8011f8e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011baa:	2300      	movs	r3, #0
 8011bac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011bb2:	f7ff ff1d 	bl	80119f0 <check_fs>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d14b      	bne.n	8011c5c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8011bc8:	e01f      	b.n	8011c0a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011bd8:	4413      	add	r3, r2
 8011bda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bde:	3304      	adds	r3, #4
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d006      	beq.n	8011bf4 <find_volume+0x158>
 8011be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be8:	3308      	adds	r3, #8
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fe fcd4 	bl	8010598 <ld_dword>
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	e000      	b.n	8011bf6 <find_volume+0x15a>
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011bfe:	440b      	add	r3, r1
 8011c00:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c06:	3301      	adds	r3, #1
 8011c08:	643b      	str	r3, [r7, #64]	; 0x40
 8011c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	d9dc      	bls.n	8011bca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011c10:	2300      	movs	r3, #0
 8011c12:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d002      	beq.n	8011c20 <find_volume+0x184>
 8011c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011c28:	4413      	add	r3, r2
 8011c2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011c2e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d005      	beq.n	8011c42 <find_volume+0x1a6>
 8011c36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c3a:	f7ff fed9 	bl	80119f0 <check_fs>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	e000      	b.n	8011c44 <find_volume+0x1a8>
 8011c42:	2303      	movs	r3, #3
 8011c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d905      	bls.n	8011c5c <find_volume+0x1c0>
 8011c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c52:	3301      	adds	r3, #1
 8011c54:	643b      	str	r3, [r7, #64]	; 0x40
 8011c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c58:	2b03      	cmp	r3, #3
 8011c5a:	d9e1      	bls.n	8011c20 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c60:	2b04      	cmp	r3, #4
 8011c62:	d101      	bne.n	8011c68 <find_volume+0x1cc>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e192      	b.n	8011f8e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d901      	bls.n	8011c74 <find_volume+0x1d8>
 8011c70:	230d      	movs	r3, #13
 8011c72:	e18c      	b.n	8011f8e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c76:	3334      	adds	r3, #52	; 0x34
 8011c78:	330b      	adds	r3, #11
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fe fc74 	bl	8010568 <ld_word>
 8011c80:	4603      	mov	r3, r0
 8011c82:	461a      	mov	r2, r3
 8011c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c86:	899b      	ldrh	r3, [r3, #12]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d001      	beq.n	8011c90 <find_volume+0x1f4>
 8011c8c:	230d      	movs	r3, #13
 8011c8e:	e17e      	b.n	8011f8e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c92:	3334      	adds	r3, #52	; 0x34
 8011c94:	3316      	adds	r3, #22
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fe fc66 	bl	8010568 <ld_word>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d106      	bne.n	8011cb4 <find_volume+0x218>
 8011ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca8:	3334      	adds	r3, #52	; 0x34
 8011caa:	3324      	adds	r3, #36	; 0x24
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe fc73 	bl	8010598 <ld_dword>
 8011cb2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cb8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	789b      	ldrb	r3, [r3, #2]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d005      	beq.n	8011cd8 <find_volume+0x23c>
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cce:	789b      	ldrb	r3, [r3, #2]
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d001      	beq.n	8011cd8 <find_volume+0x23c>
 8011cd4:	230d      	movs	r3, #13
 8011cd6:	e15a      	b.n	8011f8e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cda:	789b      	ldrb	r3, [r3, #2]
 8011cdc:	461a      	mov	r2, r3
 8011cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ce0:	fb02 f303 	mul.w	r3, r2, r3
 8011ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	895b      	ldrh	r3, [r3, #10]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d008      	beq.n	8011d0c <find_volume+0x270>
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	895b      	ldrh	r3, [r3, #10]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	895b      	ldrh	r3, [r3, #10]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	4013      	ands	r3, r2
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d001      	beq.n	8011d10 <find_volume+0x274>
 8011d0c:	230d      	movs	r3, #13
 8011d0e:	e13e      	b.n	8011f8e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d12:	3334      	adds	r3, #52	; 0x34
 8011d14:	3311      	adds	r3, #17
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fe fc26 	bl	8010568 <ld_word>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	461a      	mov	r2, r3
 8011d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d26:	891b      	ldrh	r3, [r3, #8]
 8011d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d2a:	8992      	ldrh	r2, [r2, #12]
 8011d2c:	0952      	lsrs	r2, r2, #5
 8011d2e:	b292      	uxth	r2, r2
 8011d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d34:	fb02 f201 	mul.w	r2, r2, r1
 8011d38:	1a9b      	subs	r3, r3, r2
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <find_volume+0x2a8>
 8011d40:	230d      	movs	r3, #13
 8011d42:	e124      	b.n	8011f8e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d46:	3334      	adds	r3, #52	; 0x34
 8011d48:	3313      	adds	r3, #19
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe fc0c 	bl	8010568 <ld_word>
 8011d50:	4603      	mov	r3, r0
 8011d52:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <find_volume+0x2cc>
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5c:	3334      	adds	r3, #52	; 0x34
 8011d5e:	3320      	adds	r3, #32
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fe fc19 	bl	8010598 <ld_dword>
 8011d66:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	3334      	adds	r3, #52	; 0x34
 8011d6c:	330e      	adds	r3, #14
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fe fbfa 	bl	8010568 <ld_word>
 8011d74:	4603      	mov	r3, r0
 8011d76:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d104      	bne.n	8011d88 <find_volume+0x2ec>
 8011d7e:	230d      	movs	r3, #13
 8011d80:	e105      	b.n	8011f8e <find_volume+0x4f2>
 8011d82:	bf00      	nop
 8011d84:	200003a8 	.word	0x200003a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011d88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d8c:	4413      	add	r3, r2
 8011d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d90:	8911      	ldrh	r1, [r2, #8]
 8011d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d94:	8992      	ldrh	r2, [r2, #12]
 8011d96:	0952      	lsrs	r2, r2, #5
 8011d98:	b292      	uxth	r2, r2
 8011d9a:	fbb1 f2f2 	udiv	r2, r1, r2
 8011d9e:	b292      	uxth	r2, r2
 8011da0:	4413      	add	r3, r2
 8011da2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d201      	bcs.n	8011db0 <find_volume+0x314>
 8011dac:	230d      	movs	r3, #13
 8011dae:	e0ee      	b.n	8011f8e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011db8:	8952      	ldrh	r2, [r2, #10]
 8011dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8011dbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <find_volume+0x32e>
 8011dc6:	230d      	movs	r3, #13
 8011dc8:	e0e1      	b.n	8011f8e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8011dca:	2303      	movs	r3, #3
 8011dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d802      	bhi.n	8011de0 <find_volume+0x344>
 8011dda:	2302      	movs	r3, #2
 8011ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d802      	bhi.n	8011df0 <find_volume+0x354>
 8011dea:	2301      	movs	r3, #1
 8011dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df2:	1c9a      	adds	r2, r3, #2
 8011df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011dfc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011dfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e02:	441a      	add	r2, r3
 8011e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e06:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011e08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0c:	441a      	add	r2, r3
 8011e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e10:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e16:	2b03      	cmp	r3, #3
 8011e18:	d11e      	bne.n	8011e58 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	3334      	adds	r3, #52	; 0x34
 8011e1e:	332a      	adds	r3, #42	; 0x2a
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fe fba1 	bl	8010568 <ld_word>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <find_volume+0x394>
 8011e2c:	230d      	movs	r3, #13
 8011e2e:	e0ae      	b.n	8011f8e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	891b      	ldrh	r3, [r3, #8]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d001      	beq.n	8011e3c <find_volume+0x3a0>
 8011e38:	230d      	movs	r3, #13
 8011e3a:	e0a8      	b.n	8011f8e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3e:	3334      	adds	r3, #52	; 0x34
 8011e40:	332c      	adds	r3, #44	; 0x2c
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fe fba8 	bl	8010598 <ld_dword>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	647b      	str	r3, [r7, #68]	; 0x44
 8011e56:	e01f      	b.n	8011e98 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	891b      	ldrh	r3, [r3, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <find_volume+0x3c8>
 8011e60:	230d      	movs	r3, #13
 8011e62:	e094      	b.n	8011f8e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e6a:	441a      	add	r2, r3
 8011e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d103      	bne.n	8011e80 <find_volume+0x3e4>
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	699b      	ldr	r3, [r3, #24]
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	e00a      	b.n	8011e96 <find_volume+0x3fa>
 8011e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e82:	699a      	ldr	r2, [r3, #24]
 8011e84:	4613      	mov	r3, r2
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	4413      	add	r3, r2
 8011e8a:	085a      	lsrs	r2, r3, #1
 8011e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8e:	699b      	ldr	r3, [r3, #24]
 8011e90:	f003 0301 	and.w	r3, r3, #1
 8011e94:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011e96:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9a:	69da      	ldr	r2, [r3, #28]
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ea4:	440b      	add	r3, r1
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011eaa:	8989      	ldrh	r1, [r1, #12]
 8011eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d201      	bcs.n	8011eb8 <find_volume+0x41c>
 8011eb4:	230d      	movs	r3, #13
 8011eb6:	e06a      	b.n	8011f8e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eba:	f04f 32ff 	mov.w	r2, #4294967295
 8011ebe:	615a      	str	r2, [r3, #20]
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	695a      	ldr	r2, [r3, #20]
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	2280      	movs	r2, #128	; 0x80
 8011ecc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d149      	bne.n	8011f6a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed8:	3334      	adds	r3, #52	; 0x34
 8011eda:	3330      	adds	r3, #48	; 0x30
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fe fb43 	bl	8010568 <ld_word>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d140      	bne.n	8011f6a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eea:	3301      	adds	r3, #1
 8011eec:	4619      	mov	r1, r3
 8011eee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ef0:	f7fe fdea 	bl	8010ac8 <move_window>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d137      	bne.n	8011f6a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efc:	2200      	movs	r2, #0
 8011efe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f02:	3334      	adds	r3, #52	; 0x34
 8011f04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fe fb2d 	bl	8010568 <ld_word>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	461a      	mov	r2, r3
 8011f12:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d127      	bne.n	8011f6a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1c:	3334      	adds	r3, #52	; 0x34
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fb3a 	bl	8010598 <ld_dword>
 8011f24:	4602      	mov	r2, r0
 8011f26:	4b1c      	ldr	r3, [pc, #112]	; (8011f98 <find_volume+0x4fc>)
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d11e      	bne.n	8011f6a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	3334      	adds	r3, #52	; 0x34
 8011f30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fb2f 	bl	8010598 <ld_dword>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	4b17      	ldr	r3, [pc, #92]	; (8011f9c <find_volume+0x500>)
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d113      	bne.n	8011f6a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f44:	3334      	adds	r3, #52	; 0x34
 8011f46:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fe fb24 	bl	8010598 <ld_dword>
 8011f50:	4602      	mov	r2, r0
 8011f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f54:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	3334      	adds	r3, #52	; 0x34
 8011f5a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fe fb1a 	bl	8010598 <ld_dword>
 8011f64:	4602      	mov	r2, r0
 8011f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f68:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011f70:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011f72:	4b0b      	ldr	r3, [pc, #44]	; (8011fa0 <find_volume+0x504>)
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	3301      	adds	r3, #1
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	4b09      	ldr	r3, [pc, #36]	; (8011fa0 <find_volume+0x504>)
 8011f7c:	801a      	strh	r2, [r3, #0]
 8011f7e:	4b08      	ldr	r3, [pc, #32]	; (8011fa0 <find_volume+0x504>)
 8011f80:	881a      	ldrh	r2, [r3, #0]
 8011f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f84:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011f86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f88:	f7fe fd36 	bl	80109f8 <clear_lock>
#endif
	return FR_OK;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3758      	adds	r7, #88	; 0x58
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	41615252 	.word	0x41615252
 8011f9c:	61417272 	.word	0x61417272
 8011fa0:	200003ac 	.word	0x200003ac

08011fa4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011fae:	2309      	movs	r3, #9
 8011fb0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d01c      	beq.n	8011ff2 <validate+0x4e>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d018      	beq.n	8011ff2 <validate+0x4e>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d013      	beq.n	8011ff2 <validate+0x4e>
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	889a      	ldrh	r2, [r3, #4]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	88db      	ldrh	r3, [r3, #6]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d10c      	bne.n	8011ff2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	785b      	ldrb	r3, [r3, #1]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fe fa24 	bl	801042c <disk_status>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	f003 0301 	and.w	r3, r3, #1
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d101      	bne.n	8011ff2 <validate+0x4e>
			res = FR_OK;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011ff2:	7bfb      	ldrb	r3, [r7, #15]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d102      	bne.n	8011ffe <validate+0x5a>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	e000      	b.n	8012000 <validate+0x5c>
 8011ffe:	2300      	movs	r3, #0
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	6013      	str	r3, [r2, #0]
	return res;
 8012004:	7bfb      	ldrb	r3, [r7, #15]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
	...

08012010 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b088      	sub	sp, #32
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	4613      	mov	r3, r2
 801201c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012022:	f107 0310 	add.w	r3, r7, #16
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fc9e 	bl	8011968 <get_ldnumber>
 801202c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	2b00      	cmp	r3, #0
 8012032:	da01      	bge.n	8012038 <f_mount+0x28>
 8012034:	230b      	movs	r3, #11
 8012036:	e02b      	b.n	8012090 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012038:	4a17      	ldr	r2, [pc, #92]	; (8012098 <f_mount+0x88>)
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012040:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d005      	beq.n	8012054 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012048:	69b8      	ldr	r0, [r7, #24]
 801204a:	f7fe fcd5 	bl	80109f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	2200      	movs	r2, #0
 8012052:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d002      	beq.n	8012060 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2200      	movs	r2, #0
 801205e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	490d      	ldr	r1, [pc, #52]	; (8012098 <f_mount+0x88>)
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d002      	beq.n	8012076 <f_mount+0x66>
 8012070:	79fb      	ldrb	r3, [r7, #7]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d001      	beq.n	801207a <f_mount+0x6a>
 8012076:	2300      	movs	r3, #0
 8012078:	e00a      	b.n	8012090 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801207a:	f107 010c 	add.w	r1, r7, #12
 801207e:	f107 0308 	add.w	r3, r7, #8
 8012082:	2200      	movs	r2, #0
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff fd09 	bl	8011a9c <find_volume>
 801208a:	4603      	mov	r3, r0
 801208c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3720      	adds	r7, #32
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	200003a8 	.word	0x200003a8

0801209c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b098      	sub	sp, #96	; 0x60
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	4613      	mov	r3, r2
 80120a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d101      	bne.n	80120b4 <f_open+0x18>
 80120b0:	2309      	movs	r3, #9
 80120b2:	e1bb      	b.n	801242c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80120b4:	79fb      	ldrb	r3, [r7, #7]
 80120b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80120bc:	79fa      	ldrb	r2, [r7, #7]
 80120be:	f107 0110 	add.w	r1, r7, #16
 80120c2:	f107 0308 	add.w	r3, r7, #8
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7ff fce8 	bl	8011a9c <find_volume>
 80120cc:	4603      	mov	r3, r0
 80120ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80120d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	f040 819f 	bne.w	801241a <f_open+0x37e>
		dj.obj.fs = fs;
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	f107 0314 	add.w	r3, r7, #20
 80120e6:	4611      	mov	r1, r2
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7ff fbc7 	bl	801187c <follow_path>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80120f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d11a      	bne.n	8012132 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80120fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012100:	b25b      	sxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	da03      	bge.n	801210e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012106:	2306      	movs	r3, #6
 8012108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801210c:	e011      	b.n	8012132 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801210e:	79fb      	ldrb	r3, [r7, #7]
 8012110:	f023 0301 	bic.w	r3, r3, #1
 8012114:	2b00      	cmp	r3, #0
 8012116:	bf14      	ite	ne
 8012118:	2301      	movne	r3, #1
 801211a:	2300      	moveq	r3, #0
 801211c:	b2db      	uxtb	r3, r3
 801211e:	461a      	mov	r2, r3
 8012120:	f107 0314 	add.w	r3, r7, #20
 8012124:	4611      	mov	r1, r2
 8012126:	4618      	mov	r0, r3
 8012128:	f7fe fb1e 	bl	8010768 <chk_lock>
 801212c:	4603      	mov	r3, r0
 801212e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012132:	79fb      	ldrb	r3, [r7, #7]
 8012134:	f003 031c 	and.w	r3, r3, #28
 8012138:	2b00      	cmp	r3, #0
 801213a:	d07f      	beq.n	801223c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801213c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012140:	2b00      	cmp	r3, #0
 8012142:	d017      	beq.n	8012174 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012148:	2b04      	cmp	r3, #4
 801214a:	d10e      	bne.n	801216a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801214c:	f7fe fb68 	bl	8010820 <enq_lock>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d006      	beq.n	8012164 <f_open+0xc8>
 8012156:	f107 0314 	add.w	r3, r7, #20
 801215a:	4618      	mov	r0, r3
 801215c:	f7ff fac7 	bl	80116ee <dir_register>
 8012160:	4603      	mov	r3, r0
 8012162:	e000      	b.n	8012166 <f_open+0xca>
 8012164:	2312      	movs	r3, #18
 8012166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801216a:	79fb      	ldrb	r3, [r7, #7]
 801216c:	f043 0308 	orr.w	r3, r3, #8
 8012170:	71fb      	strb	r3, [r7, #7]
 8012172:	e010      	b.n	8012196 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012174:	7ebb      	ldrb	r3, [r7, #26]
 8012176:	f003 0311 	and.w	r3, r3, #17
 801217a:	2b00      	cmp	r3, #0
 801217c:	d003      	beq.n	8012186 <f_open+0xea>
					res = FR_DENIED;
 801217e:	2307      	movs	r3, #7
 8012180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012184:	e007      	b.n	8012196 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012186:	79fb      	ldrb	r3, [r7, #7]
 8012188:	f003 0304 	and.w	r3, r3, #4
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <f_open+0xfa>
 8012190:	2308      	movs	r3, #8
 8012192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801219a:	2b00      	cmp	r3, #0
 801219c:	d168      	bne.n	8012270 <f_open+0x1d4>
 801219e:	79fb      	ldrb	r3, [r7, #7]
 80121a0:	f003 0308 	and.w	r3, r3, #8
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d063      	beq.n	8012270 <f_open+0x1d4>
				dw = GET_FATTIME();
 80121a8:	f000 fdf2 	bl	8012d90 <get_fattime>
 80121ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80121ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b0:	330e      	adds	r3, #14
 80121b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fe fa2d 	bl	8010614 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80121ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121bc:	3316      	adds	r3, #22
 80121be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fe fa27 	bl	8010614 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80121c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c8:	330b      	adds	r3, #11
 80121ca:	2220      	movs	r2, #32
 80121cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121d2:	4611      	mov	r1, r2
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7ff f9f6 	bl	80115c6 <ld_clust>
 80121da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80121e0:	2200      	movs	r2, #0
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7ff fa0e 	bl	8011604 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80121e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ea:	331c      	adds	r3, #28
 80121ec:	2100      	movs	r1, #0
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fa10 	bl	8010614 <st_dword>
					fs->wflag = 1;
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	2201      	movs	r2, #1
 80121f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80121fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d037      	beq.n	8012270 <f_open+0x1d4>
						dw = fs->winsect;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012204:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012206:	f107 0314 	add.w	r3, r7, #20
 801220a:	2200      	movs	r2, #0
 801220c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801220e:	4618      	mov	r0, r3
 8012210:	f7fe fefe 	bl	8011010 <remove_chain>
 8012214:	4603      	mov	r3, r0
 8012216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801221a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801221e:	2b00      	cmp	r3, #0
 8012220:	d126      	bne.n	8012270 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012226:	4618      	mov	r0, r3
 8012228:	f7fe fc4e 	bl	8010ac8 <move_window>
 801222c:	4603      	mov	r3, r0
 801222e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012236:	3a01      	subs	r2, #1
 8012238:	611a      	str	r2, [r3, #16]
 801223a:	e019      	b.n	8012270 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801223c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012240:	2b00      	cmp	r3, #0
 8012242:	d115      	bne.n	8012270 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012244:	7ebb      	ldrb	r3, [r7, #26]
 8012246:	f003 0310 	and.w	r3, r3, #16
 801224a:	2b00      	cmp	r3, #0
 801224c:	d003      	beq.n	8012256 <f_open+0x1ba>
					res = FR_NO_FILE;
 801224e:	2304      	movs	r3, #4
 8012250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012254:	e00c      	b.n	8012270 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012256:	79fb      	ldrb	r3, [r7, #7]
 8012258:	f003 0302 	and.w	r3, r3, #2
 801225c:	2b00      	cmp	r3, #0
 801225e:	d007      	beq.n	8012270 <f_open+0x1d4>
 8012260:	7ebb      	ldrb	r3, [r7, #26]
 8012262:	f003 0301 	and.w	r3, r3, #1
 8012266:	2b00      	cmp	r3, #0
 8012268:	d002      	beq.n	8012270 <f_open+0x1d4>
						res = FR_DENIED;
 801226a:	2307      	movs	r3, #7
 801226c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012274:	2b00      	cmp	r3, #0
 8012276:	d128      	bne.n	80122ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	f003 0308 	and.w	r3, r3, #8
 801227e:	2b00      	cmp	r3, #0
 8012280:	d003      	beq.n	801228a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012282:	79fb      	ldrb	r3, [r7, #7]
 8012284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012288:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012298:	79fb      	ldrb	r3, [r7, #7]
 801229a:	f023 0301 	bic.w	r3, r3, #1
 801229e:	2b00      	cmp	r3, #0
 80122a0:	bf14      	ite	ne
 80122a2:	2301      	movne	r3, #1
 80122a4:	2300      	moveq	r3, #0
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	461a      	mov	r2, r3
 80122aa:	f107 0314 	add.w	r3, r7, #20
 80122ae:	4611      	mov	r1, r2
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fe fad7 	bl	8010864 <inc_lock>
 80122b6:	4602      	mov	r2, r0
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	691b      	ldr	r3, [r3, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <f_open+0x22e>
 80122c4:	2302      	movs	r3, #2
 80122c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80122ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f040 80a3 	bne.w	801241a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122d8:	4611      	mov	r1, r2
 80122da:	4618      	mov	r0, r3
 80122dc:	f7ff f973 	bl	80115c6 <ld_clust>
 80122e0:	4602      	mov	r2, r0
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	331c      	adds	r3, #28
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fe f954 	bl	8010598 <ld_dword>
 80122f0:	4602      	mov	r2, r0
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2200      	movs	r2, #0
 80122fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	88da      	ldrh	r2, [r3, #6]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	79fa      	ldrb	r2, [r7, #7]
 801230e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	2200      	movs	r2, #0
 8012314:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2200      	movs	r2, #0
 801231a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2200      	movs	r2, #0
 8012320:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	3330      	adds	r3, #48	; 0x30
 8012326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801232a:	2100      	movs	r1, #0
 801232c:	4618      	mov	r0, r3
 801232e:	f7fe f9be 	bl	80106ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012332:	79fb      	ldrb	r3, [r7, #7]
 8012334:	f003 0320 	and.w	r3, r3, #32
 8012338:	2b00      	cmp	r3, #0
 801233a:	d06e      	beq.n	801241a <f_open+0x37e>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d06a      	beq.n	801241a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	68da      	ldr	r2, [r3, #12]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	895b      	ldrh	r3, [r3, #10]
 8012350:	461a      	mov	r2, r3
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	fb03 f302 	mul.w	r3, r3, r2
 801235a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	657b      	str	r3, [r7, #84]	; 0x54
 8012368:	e016      	b.n	8012398 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801236e:	4618      	mov	r0, r3
 8012370:	f7fe fc67 	bl	8010c42 <get_fat>
 8012374:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012378:	2b01      	cmp	r3, #1
 801237a:	d802      	bhi.n	8012382 <f_open+0x2e6>
 801237c:	2302      	movs	r3, #2
 801237e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012388:	d102      	bne.n	8012390 <f_open+0x2f4>
 801238a:	2301      	movs	r3, #1
 801238c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012394:	1ad3      	subs	r3, r2, r3
 8012396:	657b      	str	r3, [r7, #84]	; 0x54
 8012398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801239c:	2b00      	cmp	r3, #0
 801239e:	d103      	bne.n	80123a8 <f_open+0x30c>
 80123a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d8e0      	bhi.n	801236a <f_open+0x2ce>
				}
				fp->clust = clst;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80123ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d131      	bne.n	801241a <f_open+0x37e>
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	899b      	ldrh	r3, [r3, #12]
 80123ba:	461a      	mov	r2, r3
 80123bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123be:	fbb3 f1f2 	udiv	r1, r3, r2
 80123c2:	fb02 f201 	mul.w	r2, r2, r1
 80123c6:	1a9b      	subs	r3, r3, r2
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d026      	beq.n	801241a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7fe fc17 	bl	8010c04 <clust2sect>
 80123d6:	6478      	str	r0, [r7, #68]	; 0x44
 80123d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d103      	bne.n	80123e6 <f_open+0x34a>
						res = FR_INT_ERR;
 80123de:	2302      	movs	r3, #2
 80123e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80123e4:	e019      	b.n	801241a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	899b      	ldrh	r3, [r3, #12]
 80123ea:	461a      	mov	r2, r3
 80123ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80123f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f4:	441a      	add	r2, r3
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	7858      	ldrb	r0, [r3, #1]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6a1a      	ldr	r2, [r3, #32]
 8012408:	2301      	movs	r3, #1
 801240a:	f7fe f84f 	bl	80104ac <disk_read>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <f_open+0x37e>
 8012414:	2301      	movs	r3, #1
 8012416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801241a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801241e:	2b00      	cmp	r3, #0
 8012420:	d002      	beq.n	8012428 <f_open+0x38c>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2200      	movs	r2, #0
 8012426:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801242c:	4618      	mov	r0, r3
 801242e:	3760      	adds	r7, #96	; 0x60
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b08c      	sub	sp, #48	; 0x30
 8012438:	af00      	add	r7, sp, #0
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
 8012440:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	2200      	movs	r2, #0
 801244a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f107 0210 	add.w	r2, r7, #16
 8012452:	4611      	mov	r1, r2
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff fda5 	bl	8011fa4 <validate>
 801245a:	4603      	mov	r3, r0
 801245c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012464:	2b00      	cmp	r3, #0
 8012466:	d107      	bne.n	8012478 <f_write+0x44>
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	7d5b      	ldrb	r3, [r3, #21]
 801246c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012474:	2b00      	cmp	r3, #0
 8012476:	d002      	beq.n	801247e <f_write+0x4a>
 8012478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801247c:	e16a      	b.n	8012754 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	7d1b      	ldrb	r3, [r3, #20]
 8012482:	f003 0302 	and.w	r3, r3, #2
 8012486:	2b00      	cmp	r3, #0
 8012488:	d101      	bne.n	801248e <f_write+0x5a>
 801248a:	2307      	movs	r3, #7
 801248c:	e162      	b.n	8012754 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	699a      	ldr	r2, [r3, #24]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	441a      	add	r2, r3
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	699b      	ldr	r3, [r3, #24]
 801249a:	429a      	cmp	r2, r3
 801249c:	f080 814c 	bcs.w	8012738 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	699b      	ldr	r3, [r3, #24]
 80124a4:	43db      	mvns	r3, r3
 80124a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80124a8:	e146      	b.n	8012738 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	699b      	ldr	r3, [r3, #24]
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	8992      	ldrh	r2, [r2, #12]
 80124b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80124b6:	fb02 f201 	mul.w	r2, r2, r1
 80124ba:	1a9b      	subs	r3, r3, r2
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f040 80f1 	bne.w	80126a4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	693a      	ldr	r2, [r7, #16]
 80124c8:	8992      	ldrh	r2, [r2, #12]
 80124ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80124ce:	693a      	ldr	r2, [r7, #16]
 80124d0:	8952      	ldrh	r2, [r2, #10]
 80124d2:	3a01      	subs	r2, #1
 80124d4:	4013      	ands	r3, r2
 80124d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d143      	bne.n	8012566 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	699b      	ldr	r3, [r3, #24]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10c      	bne.n	8012500 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d11a      	bne.n	8012528 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2100      	movs	r1, #0
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fe fdef 	bl	80110da <create_chain>
 80124fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80124fe:	e013      	b.n	8012528 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012504:	2b00      	cmp	r3, #0
 8012506:	d007      	beq.n	8012518 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	699b      	ldr	r3, [r3, #24]
 801250c:	4619      	mov	r1, r3
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7fe fe7b 	bl	801120a <clmt_clust>
 8012514:	62b8      	str	r0, [r7, #40]	; 0x28
 8012516:	e007      	b.n	8012528 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	69db      	ldr	r3, [r3, #28]
 801251e:	4619      	mov	r1, r3
 8012520:	4610      	mov	r0, r2
 8012522:	f7fe fdda 	bl	80110da <create_chain>
 8012526:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	2b00      	cmp	r3, #0
 801252c:	f000 8109 	beq.w	8012742 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012532:	2b01      	cmp	r3, #1
 8012534:	d104      	bne.n	8012540 <f_write+0x10c>
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2202      	movs	r2, #2
 801253a:	755a      	strb	r2, [r3, #21]
 801253c:	2302      	movs	r3, #2
 801253e:	e109      	b.n	8012754 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012546:	d104      	bne.n	8012552 <f_write+0x11e>
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2201      	movs	r2, #1
 801254c:	755a      	strb	r2, [r3, #21]
 801254e:	2301      	movs	r3, #1
 8012550:	e100      	b.n	8012754 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012556:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <f_write+0x132>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012564:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	7d1b      	ldrb	r3, [r3, #20]
 801256a:	b25b      	sxtb	r3, r3
 801256c:	2b00      	cmp	r3, #0
 801256e:	da18      	bge.n	80125a2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	7858      	ldrb	r0, [r3, #1]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	6a1a      	ldr	r2, [r3, #32]
 801257e:	2301      	movs	r3, #1
 8012580:	f7fd ffb4 	bl	80104ec <disk_write>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d004      	beq.n	8012594 <f_write+0x160>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	2201      	movs	r2, #1
 801258e:	755a      	strb	r2, [r3, #21]
 8012590:	2301      	movs	r3, #1
 8012592:	e0df      	b.n	8012754 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	7d1b      	ldrb	r3, [r3, #20]
 8012598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801259c:	b2da      	uxtb	r2, r3
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80125a2:	693a      	ldr	r2, [r7, #16]
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	69db      	ldr	r3, [r3, #28]
 80125a8:	4619      	mov	r1, r3
 80125aa:	4610      	mov	r0, r2
 80125ac:	f7fe fb2a 	bl	8010c04 <clust2sect>
 80125b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d104      	bne.n	80125c2 <f_write+0x18e>
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2202      	movs	r2, #2
 80125bc:	755a      	strb	r2, [r3, #21]
 80125be:	2302      	movs	r3, #2
 80125c0:	e0c8      	b.n	8012754 <f_write+0x320>
			sect += csect;
 80125c2:	697a      	ldr	r2, [r7, #20]
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	4413      	add	r3, r2
 80125c8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	899b      	ldrh	r3, [r3, #12]
 80125ce:	461a      	mov	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80125d6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80125d8:	6a3b      	ldr	r3, [r7, #32]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d043      	beq.n	8012666 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	4413      	add	r3, r2
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	8952      	ldrh	r2, [r2, #10]
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d905      	bls.n	80125f8 <f_write+0x1c4>
					cc = fs->csize - csect;
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	895b      	ldrh	r3, [r3, #10]
 80125f0:	461a      	mov	r2, r3
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	7858      	ldrb	r0, [r3, #1]
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	697a      	ldr	r2, [r7, #20]
 8012600:	69f9      	ldr	r1, [r7, #28]
 8012602:	f7fd ff73 	bl	80104ec <disk_write>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d004      	beq.n	8012616 <f_write+0x1e2>
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2201      	movs	r2, #1
 8012610:	755a      	strb	r2, [r3, #21]
 8012612:	2301      	movs	r3, #1
 8012614:	e09e      	b.n	8012754 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	6a1a      	ldr	r2, [r3, #32]
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	6a3a      	ldr	r2, [r7, #32]
 8012620:	429a      	cmp	r2, r3
 8012622:	d918      	bls.n	8012656 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6a1a      	ldr	r2, [r3, #32]
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	693a      	ldr	r2, [r7, #16]
 8012634:	8992      	ldrh	r2, [r2, #12]
 8012636:	fb02 f303 	mul.w	r3, r2, r3
 801263a:	69fa      	ldr	r2, [r7, #28]
 801263c:	18d1      	adds	r1, r2, r3
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	899b      	ldrh	r3, [r3, #12]
 8012642:	461a      	mov	r2, r3
 8012644:	f7fe f812 	bl	801066c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	7d1b      	ldrb	r3, [r3, #20]
 801264c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012650:	b2da      	uxtb	r2, r3
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	899b      	ldrh	r3, [r3, #12]
 801265a:	461a      	mov	r2, r3
 801265c:	6a3b      	ldr	r3, [r7, #32]
 801265e:	fb02 f303 	mul.w	r3, r2, r3
 8012662:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012664:	e04b      	b.n	80126fe <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	6a1b      	ldr	r3, [r3, #32]
 801266a:	697a      	ldr	r2, [r7, #20]
 801266c:	429a      	cmp	r2, r3
 801266e:	d016      	beq.n	801269e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	699a      	ldr	r2, [r3, #24]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012678:	429a      	cmp	r2, r3
 801267a:	d210      	bcs.n	801269e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	7858      	ldrb	r0, [r3, #1]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012686:	2301      	movs	r3, #1
 8012688:	697a      	ldr	r2, [r7, #20]
 801268a:	f7fd ff0f 	bl	80104ac <disk_read>
 801268e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012690:	2b00      	cmp	r3, #0
 8012692:	d004      	beq.n	801269e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2201      	movs	r2, #1
 8012698:	755a      	strb	r2, [r3, #21]
 801269a:	2301      	movs	r3, #1
 801269c:	e05a      	b.n	8012754 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	899b      	ldrh	r3, [r3, #12]
 80126a8:	4618      	mov	r0, r3
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	693a      	ldr	r2, [r7, #16]
 80126b0:	8992      	ldrh	r2, [r2, #12]
 80126b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80126b6:	fb02 f201 	mul.w	r2, r2, r1
 80126ba:	1a9b      	subs	r3, r3, r2
 80126bc:	1ac3      	subs	r3, r0, r3
 80126be:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80126c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d901      	bls.n	80126cc <f_write+0x298>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	699b      	ldr	r3, [r3, #24]
 80126d6:	693a      	ldr	r2, [r7, #16]
 80126d8:	8992      	ldrh	r2, [r2, #12]
 80126da:	fbb3 f0f2 	udiv	r0, r3, r2
 80126de:	fb02 f200 	mul.w	r2, r2, r0
 80126e2:	1a9b      	subs	r3, r3, r2
 80126e4:	440b      	add	r3, r1
 80126e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126e8:	69f9      	ldr	r1, [r7, #28]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fd ffbe 	bl	801066c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	7d1b      	ldrb	r3, [r3, #20]
 80126f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80126fe:	69fa      	ldr	r2, [r7, #28]
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	4413      	add	r3, r2
 8012704:	61fb      	str	r3, [r7, #28]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	699a      	ldr	r2, [r3, #24]
 801270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270c:	441a      	add	r2, r3
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	619a      	str	r2, [r3, #24]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	68da      	ldr	r2, [r3, #12]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	699b      	ldr	r3, [r3, #24]
 801271a:	429a      	cmp	r2, r3
 801271c:	bf38      	it	cc
 801271e:	461a      	movcc	r2, r3
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	60da      	str	r2, [r3, #12]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	441a      	add	r2, r3
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012734:	1ad3      	subs	r3, r2, r3
 8012736:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	f47f aeb5 	bne.w	80124aa <f_write+0x76>
 8012740:	e000      	b.n	8012744 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012742:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	7d1b      	ldrb	r3, [r3, #20]
 8012748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801274c:	b2da      	uxtb	r2, r3
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012752:	2300      	movs	r3, #0
}
 8012754:	4618      	mov	r0, r3
 8012756:	3730      	adds	r7, #48	; 0x30
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b086      	sub	sp, #24
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f107 0208 	add.w	r2, r7, #8
 801276a:	4611      	mov	r1, r2
 801276c:	4618      	mov	r0, r3
 801276e:	f7ff fc19 	bl	8011fa4 <validate>
 8012772:	4603      	mov	r3, r0
 8012774:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d168      	bne.n	801284e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	7d1b      	ldrb	r3, [r3, #20]
 8012780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012784:	2b00      	cmp	r3, #0
 8012786:	d062      	beq.n	801284e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	b25b      	sxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	da15      	bge.n	80127be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	7858      	ldrb	r0, [r3, #1]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a1a      	ldr	r2, [r3, #32]
 80127a0:	2301      	movs	r3, #1
 80127a2:	f7fd fea3 	bl	80104ec <disk_write>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d001      	beq.n	80127b0 <f_sync+0x54>
 80127ac:	2301      	movs	r3, #1
 80127ae:	e04f      	b.n	8012850 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	7d1b      	ldrb	r3, [r3, #20]
 80127b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80127be:	f000 fae7 	bl	8012d90 <get_fattime>
 80127c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ca:	4619      	mov	r1, r3
 80127cc:	4610      	mov	r0, r2
 80127ce:	f7fe f97b 	bl	8010ac8 <move_window>
 80127d2:	4603      	mov	r3, r0
 80127d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80127d6:	7dfb      	ldrb	r3, [r7, #23]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d138      	bne.n	801284e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	330b      	adds	r3, #11
 80127e6:	781a      	ldrb	r2, [r3, #0]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	330b      	adds	r3, #11
 80127ec:	f042 0220 	orr.w	r2, r2, #32
 80127f0:	b2d2      	uxtb	r2, r2
 80127f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6818      	ldr	r0, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	461a      	mov	r2, r3
 80127fe:	68f9      	ldr	r1, [r7, #12]
 8012800:	f7fe ff00 	bl	8011604 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f103 021c 	add.w	r2, r3, #28
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	4619      	mov	r1, r3
 8012810:	4610      	mov	r0, r2
 8012812:	f7fd feff 	bl	8010614 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	3316      	adds	r3, #22
 801281a:	6939      	ldr	r1, [r7, #16]
 801281c:	4618      	mov	r0, r3
 801281e:	f7fd fef9 	bl	8010614 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	3312      	adds	r3, #18
 8012826:	2100      	movs	r1, #0
 8012828:	4618      	mov	r0, r3
 801282a:	f7fd fed8 	bl	80105de <st_word>
					fs->wflag = 1;
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	2201      	movs	r2, #1
 8012832:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	4618      	mov	r0, r3
 8012838:	f7fe f974 	bl	8010b24 <sync_fs>
 801283c:	4603      	mov	r3, r0
 801283e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	7d1b      	ldrb	r3, [r3, #20]
 8012844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012848:	b2da      	uxtb	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012850:	4618      	mov	r0, r3
 8012852:	3718      	adds	r7, #24
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f7ff ff7b 	bl	801275c <f_sync>
 8012866:	4603      	mov	r3, r0
 8012868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801286a:	7bfb      	ldrb	r3, [r7, #15]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d118      	bne.n	80128a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f107 0208 	add.w	r2, r7, #8
 8012876:	4611      	mov	r1, r2
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff fb93 	bl	8011fa4 <validate>
 801287e:	4603      	mov	r3, r0
 8012880:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012882:	7bfb      	ldrb	r3, [r7, #15]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d10c      	bne.n	80128a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	691b      	ldr	r3, [r3, #16]
 801288c:	4618      	mov	r0, r3
 801288e:	f7fe f877 	bl	8010980 <dec_lock>
 8012892:	4603      	mov	r3, r0
 8012894:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012896:	7bfb      	ldrb	r3, [r7, #15]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d102      	bne.n	80128a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80128a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b096      	sub	sp, #88	; 0x58
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80128b4:	f107 0108 	add.w	r1, r7, #8
 80128b8:	1d3b      	adds	r3, r7, #4
 80128ba:	2202      	movs	r2, #2
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff f8ed 	bl	8011a9c <find_volume>
 80128c2:	4603      	mov	r3, r0
 80128c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80128cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f040 80f2 	bne.w	8012aba <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	f107 030c 	add.w	r3, r7, #12
 80128dc:	4611      	mov	r1, r2
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fe ffcc 	bl	801187c <follow_path>
 80128e4:	4603      	mov	r3, r0
 80128e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80128ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d102      	bne.n	80128f8 <f_mkdir+0x4c>
 80128f2:	2308      	movs	r3, #8
 80128f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80128f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128fc:	2b04      	cmp	r3, #4
 80128fe:	f040 80dc 	bne.w	8012aba <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012902:	f107 030c 	add.w	r3, r7, #12
 8012906:	2100      	movs	r1, #0
 8012908:	4618      	mov	r0, r3
 801290a:	f7fe fbe6 	bl	80110da <create_chain>
 801290e:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	895b      	ldrh	r3, [r3, #10]
 8012914:	461a      	mov	r2, r3
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	899b      	ldrh	r3, [r3, #12]
 801291a:	fb03 f302 	mul.w	r3, r3, r2
 801291e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <f_mkdir+0x86>
 801292c:	2307      	movs	r3, #7
 801292e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012934:	2b01      	cmp	r3, #1
 8012936:	d102      	bne.n	801293e <f_mkdir+0x92>
 8012938:	2302      	movs	r3, #2
 801293a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012944:	d102      	bne.n	801294c <f_mkdir+0xa0>
 8012946:	2301      	movs	r3, #1
 8012948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801294c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012950:	2b00      	cmp	r3, #0
 8012952:	d106      	bne.n	8012962 <f_mkdir+0xb6>
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	4618      	mov	r0, r3
 8012958:	f7fe f872 	bl	8010a40 <sync_window>
 801295c:	4603      	mov	r3, r0
 801295e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012962:	f000 fa15 	bl	8012d90 <get_fattime>
 8012966:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801296c:	2b00      	cmp	r3, #0
 801296e:	d16c      	bne.n	8012a4a <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012974:	4618      	mov	r0, r3
 8012976:	f7fe f945 	bl	8010c04 <clust2sect>
 801297a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	3334      	adds	r3, #52	; 0x34
 8012980:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	899b      	ldrh	r3, [r3, #12]
 8012986:	461a      	mov	r2, r3
 8012988:	2100      	movs	r1, #0
 801298a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801298c:	f7fd fe8f 	bl	80106ae <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012990:	220b      	movs	r2, #11
 8012992:	2120      	movs	r1, #32
 8012994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012996:	f7fd fe8a 	bl	80106ae <mem_set>
					dir[DIR_Name] = '.';
 801299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801299c:	222e      	movs	r2, #46	; 0x2e
 801299e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80129a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a2:	330b      	adds	r3, #11
 80129a4:	2210      	movs	r2, #16
 80129a6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80129a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129aa:	3316      	adds	r3, #22
 80129ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fd fe30 	bl	8010614 <st_dword>
					st_clust(fs, dir, dcl);
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe fe22 	bl	8011604 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80129c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c2:	3320      	adds	r3, #32
 80129c4:	2220      	movs	r2, #32
 80129c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7fd fe4f 	bl	801066c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80129ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d0:	3321      	adds	r3, #33	; 0x21
 80129d2:	222e      	movs	r2, #46	; 0x2e
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2b03      	cmp	r3, #3
 80129e0:	d106      	bne.n	80129f0 <f_mkdir+0x144>
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d101      	bne.n	80129f0 <f_mkdir+0x144>
 80129ec:	2300      	movs	r3, #0
 80129ee:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80129f0:	68b8      	ldr	r0, [r7, #8]
 80129f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129f4:	3320      	adds	r3, #32
 80129f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129f8:	4619      	mov	r1, r3
 80129fa:	f7fe fe03 	bl	8011604 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	895b      	ldrh	r3, [r3, #10]
 8012a02:	653b      	str	r3, [r7, #80]	; 0x50
 8012a04:	e01c      	b.n	8012a40 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8012a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a08:	1c5a      	adds	r2, r3, #1
 8012a0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2201      	movs	r2, #1
 8012a14:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fe f811 	bl	8010a40 <sync_window>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10d      	bne.n	8012a48 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	899b      	ldrh	r3, [r3, #12]
 8012a30:	461a      	mov	r2, r3
 8012a32:	2100      	movs	r1, #0
 8012a34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a36:	f7fd fe3a 	bl	80106ae <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8012a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1df      	bne.n	8012a06 <f_mkdir+0x15a>
 8012a46:	e000      	b.n	8012a4a <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8012a48:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d107      	bne.n	8012a62 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012a52:	f107 030c 	add.w	r3, r7, #12
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe fe49 	bl	80116ee <dir_register>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012a62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d120      	bne.n	8012aac <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a70:	3316      	adds	r3, #22
 8012a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7fd fdcd 	bl	8010614 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7fe fdbf 	bl	8011604 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a88:	330b      	adds	r3, #11
 8012a8a:	2210      	movs	r2, #16
 8012a8c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	2201      	movs	r2, #1
 8012a92:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d10e      	bne.n	8012aba <f_mkdir+0x20e>
					res = sync_fs(fs);
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fe f840 	bl	8010b24 <sync_fs>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012aaa:	e006      	b.n	8012aba <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012aac:	f107 030c 	add.w	r3, r7, #12
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7fe faab 	bl	8011010 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3758      	adds	r7, #88	; 0x58
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
	...

08012ac8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b087      	sub	sp, #28
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012ade:	4b1f      	ldr	r3, [pc, #124]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012ae0:	7a5b      	ldrb	r3, [r3, #9]
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d131      	bne.n	8012b4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012ae8:	4b1c      	ldr	r3, [pc, #112]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012aea:	7a5b      	ldrb	r3, [r3, #9]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	461a      	mov	r2, r3
 8012af0:	4b1a      	ldr	r3, [pc, #104]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012af2:	2100      	movs	r1, #0
 8012af4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012af6:	4b19      	ldr	r3, [pc, #100]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012af8:	7a5b      	ldrb	r3, [r3, #9]
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	4a17      	ldr	r2, [pc, #92]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012afe:	009b      	lsls	r3, r3, #2
 8012b00:	4413      	add	r3, r2
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012b06:	4b15      	ldr	r3, [pc, #84]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012b08:	7a5b      	ldrb	r3, [r3, #9]
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	4b13      	ldr	r3, [pc, #76]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012b10:	4413      	add	r3, r2
 8012b12:	79fa      	ldrb	r2, [r7, #7]
 8012b14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012b16:	4b11      	ldr	r3, [pc, #68]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012b18:	7a5b      	ldrb	r3, [r3, #9]
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	1c5a      	adds	r2, r3, #1
 8012b1e:	b2d1      	uxtb	r1, r2
 8012b20:	4a0e      	ldr	r2, [pc, #56]	; (8012b5c <FATFS_LinkDriverEx+0x94>)
 8012b22:	7251      	strb	r1, [r2, #9]
 8012b24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012b26:	7dbb      	ldrb	r3, [r7, #22]
 8012b28:	3330      	adds	r3, #48	; 0x30
 8012b2a:	b2da      	uxtb	r2, r3
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	3301      	adds	r3, #1
 8012b34:	223a      	movs	r2, #58	; 0x3a
 8012b36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	3302      	adds	r3, #2
 8012b3c:	222f      	movs	r2, #47	; 0x2f
 8012b3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	3303      	adds	r3, #3
 8012b44:	2200      	movs	r2, #0
 8012b46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	371c      	adds	r7, #28
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop
 8012b5c:	200003d0 	.word	0x200003d0

08012b60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	6839      	ldr	r1, [r7, #0]
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f7ff ffaa 	bl	8012ac8 <FATFS_LinkDriverEx>
 8012b74:	4603      	mov	r3, r0
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3708      	adds	r7, #8
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
	...

08012b80 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b085      	sub	sp, #20
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8012b90:	2301      	movs	r3, #1
 8012b92:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8012b94:	4b15      	ldr	r3, [pc, #84]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012b96:	7a5b      	ldrb	r3, [r3, #9]
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d01e      	beq.n	8012bdc <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	3b30      	subs	r3, #48	; 0x30
 8012ba4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8012ba6:	7bbb      	ldrb	r3, [r7, #14]
 8012ba8:	4a10      	ldr	r2, [pc, #64]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	4413      	add	r3, r2
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d013      	beq.n	8012bdc <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8012bb4:	7bbb      	ldrb	r3, [r7, #14]
 8012bb6:	4a0d      	ldr	r2, [pc, #52]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	4413      	add	r3, r2
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8012bc0:	7bbb      	ldrb	r3, [r7, #14]
 8012bc2:	4a0a      	ldr	r2, [pc, #40]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012bc4:	4413      	add	r3, r2
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8012bca:	4b08      	ldr	r3, [pc, #32]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012bcc:	7a5b      	ldrb	r3, [r3, #9]
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	4b05      	ldr	r3, [pc, #20]	; (8012bec <FATFS_UnLinkDriverEx+0x6c>)
 8012bd6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	200003d0 	.word	0x200003d0

08012bf0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff ffc0 	bl	8012b80 <FATFS_UnLinkDriverEx>
 8012c00:	4603      	mov	r3, r0
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
	...

08012c0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012c12:	2300      	movs	r3, #0
 8012c14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012c16:	f000 f896 	bl	8012d46 <BSP_SD_IsDetected>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d001      	beq.n	8012c24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012c20:	2301      	movs	r3, #1
 8012c22:	e012      	b.n	8012c4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012c24:	480b      	ldr	r0, [pc, #44]	; (8012c54 <BSP_SD_Init+0x48>)
 8012c26:	f7f7 f85d 	bl	8009ce4 <HAL_SD_Init>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012c2e:	79fb      	ldrb	r3, [r7, #7]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d109      	bne.n	8012c48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012c38:	4806      	ldr	r0, [pc, #24]	; (8012c54 <BSP_SD_Init+0x48>)
 8012c3a:	f7f7 fe38 	bl	800a8ae <HAL_SD_ConfigWideBusOperation>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d001      	beq.n	8012c48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012c44:	2301      	movs	r3, #1
 8012c46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012c48:	79fb      	ldrb	r3, [r7, #7]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	20006d70 	.word	0x20006d70

08012c58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b086      	sub	sp, #24
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012c64:	2300      	movs	r3, #0
 8012c66:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	68f9      	ldr	r1, [r7, #12]
 8012c6e:	4806      	ldr	r0, [pc, #24]	; (8012c88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012c70:	f7f7 f8c0 	bl	8009df4 <HAL_SD_ReadBlocks_DMA>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d001      	beq.n	8012c7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3718      	adds	r7, #24
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	20006d70 	.word	0x20006d70

08012c8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	68f9      	ldr	r1, [r7, #12]
 8012ca2:	4806      	ldr	r0, [pc, #24]	; (8012cbc <BSP_SD_WriteBlocks_DMA+0x30>)
 8012ca4:	f7f7 f972 	bl	8009f8c <HAL_SD_WriteBlocks_DMA>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d001      	beq.n	8012cb2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3718      	adds	r7, #24
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20006d70 	.word	0x20006d70

08012cc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012cc4:	4805      	ldr	r0, [pc, #20]	; (8012cdc <BSP_SD_GetCardState+0x1c>)
 8012cc6:	f7f7 fe6e 	bl	800a9a6 <HAL_SD_GetCardState>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b04      	cmp	r3, #4
 8012cce:	bf14      	ite	ne
 8012cd0:	2301      	movne	r3, #1
 8012cd2:	2300      	moveq	r3, #0
 8012cd4:	b2db      	uxtb	r3, r3
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	20006d70 	.word	0x20006d70

08012ce0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012ce8:	6879      	ldr	r1, [r7, #4]
 8012cea:	4803      	ldr	r0, [pc, #12]	; (8012cf8 <BSP_SD_GetCardInfo+0x18>)
 8012cec:	f7f7 fdb3 	bl	800a856 <HAL_SD_GetCardInfo>
}
 8012cf0:	bf00      	nop
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	20006d70 	.word	0x20006d70

08012cfc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012d04:	f000 f818 	bl	8012d38 <BSP_SD_AbortCallback>
}
 8012d08:	bf00      	nop
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012d18:	f002 f976 	bl	8015008 <BSP_SD_WriteCpltCallback>
}
 8012d1c:	bf00      	nop
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012d2c:	f002 f978 	bl	8015020 <BSP_SD_ReadCpltCallback>
}
 8012d30:	bf00      	nop
 8012d32:	3708      	adds	r7, #8
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	af00      	add	r7, sp, #0

}
 8012d3c:	bf00      	nop
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr

08012d46 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b082      	sub	sp, #8
 8012d4a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8012d50:	f000 f826 	bl	8012da0 <BSP_PlatformIsDetected>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d101      	bne.n	8012d5e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012d5e:	79fb      	ldrb	r3, [r7, #7]
 8012d60:	b2db      	uxtb	r3, r3
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012d70:	4904      	ldr	r1, [pc, #16]	; (8012d84 <MX_FATFS_Init+0x18>)
 8012d72:	4805      	ldr	r0, [pc, #20]	; (8012d88 <MX_FATFS_Init+0x1c>)
 8012d74:	f7ff fef4 	bl	8012b60 <FATFS_LinkDriver>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	4b03      	ldr	r3, [pc, #12]	; (8012d8c <MX_FATFS_Init+0x20>)
 8012d7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012d80:	bf00      	nop
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	20004b14 	.word	0x20004b14
 8012d88:	0801c338 	.word	0x0801c338
 8012d8c:	20004b10 	.word	0x20004b10

08012d90 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012d90:	b480      	push	{r7}
 8012d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012d94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012da6:	2301      	movs	r3, #1
 8012da8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012dae:	4806      	ldr	r0, [pc, #24]	; (8012dc8 <BSP_PlatformIsDetected+0x28>)
 8012db0:	f7f3 ffa6 	bl	8006d00 <HAL_GPIO_ReadPin>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012dbe:	79fb      	ldrb	r3, [r7, #7]
}  
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	40020000 	.word	0x40020000

08012dcc <print>:
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
};
 8012dd4:	bf00      	nop
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <println>:
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
};
 8012de8:	bf00      	nop
 8012dea:	370c      	adds	r7, #12
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <printv>:
static inline void printv(char* str, uint32_t len)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]

	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
 8012dfe:	bf00      	nop
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr

08012e0a <print_float>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_float(float number)
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	ed87 0a01 	vstr	s0, [r7, #4]
	printLen = sprintf(printBuffer, "%f", number);
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8012e20:	b480      	push	{r7}
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr

08012e34 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8012e34:	b480      	push	{r7}
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3e:	4a04      	ldr	r2, [pc, #16]	; (8012e50 <millis+0x1c>)
 8012e40:	fba2 2303 	umull	r2, r3, r2, r3
 8012e44:	099b      	lsrs	r3, r3, #6
 8012e46:	4618      	mov	r0, r3
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr
 8012e50:	10624dd3 	.word	0x10624dd3

08012e54 <getTime>:
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08c      	sub	sp, #48	; 0x30
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8012e5c:	f107 031c 	add.w	r3, r7, #28
 8012e60:	2200      	movs	r2, #0
 8012e62:	601a      	str	r2, [r3, #0]
 8012e64:	605a      	str	r2, [r3, #4]
 8012e66:	609a      	str	r2, [r3, #8]
 8012e68:	60da      	str	r2, [r3, #12]
 8012e6a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8012e70:	f107 030c 	add.w	r3, r7, #12
 8012e74:	2200      	movs	r2, #0
 8012e76:	601a      	str	r2, [r3, #0]
 8012e78:	605a      	str	r2, [r3, #4]
 8012e7a:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8012e7c:	f001 fe9c 	bl	8014bb8 <Get_RTC_Instance>
 8012e80:	f107 031c 	add.w	r3, r7, #28
 8012e84:	2200      	movs	r2, #0
 8012e86:	4619      	mov	r1, r3
 8012e88:	f7f6 fe0d 	bl	8009aa6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8012e8c:	f001 fe94 	bl	8014bb8 <Get_RTC_Instance>
 8012e90:	f107 0318 	add.w	r3, r7, #24
 8012e94:	2200      	movs	r2, #0
 8012e96:	4619      	mov	r1, r3
 8012e98:	f7f6 fe63 	bl	8009b62 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 8012e9c:	7efb      	ldrb	r3, [r7, #27]
 8012e9e:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8012ea0:	7e7b      	ldrb	r3, [r7, #25]
 8012ea2:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8012ea4:	7ebb      	ldrb	r3, [r7, #26]
 8012ea6:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8012ea8:	7e3b      	ldrb	r3, [r7, #24]
 8012eaa:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8012eac:	7f3b      	ldrb	r3, [r7, #28]
 8012eae:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8012eb0:	7f7b      	ldrb	r3, [r7, #29]
 8012eb2:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8012eb4:	7fbb      	ldrb	r3, [r7, #30]
 8012eb6:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8012eb8:	f7ff ffbc 	bl	8012e34 <millis>
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	4b0c      	ldr	r3, [pc, #48]	; (8012ef0 <getTime+0x9c>)
 8012ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8012ec4:	099b      	lsrs	r3, r3, #6
 8012ec6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012eca:	fb01 f303 	mul.w	r3, r1, r3
 8012ece:	1ad3      	subs	r3, r2, r3
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	f107 030c 	add.w	r3, r7, #12
 8012edc:	cb03      	ldmia	r3!, {r0, r1}
 8012ede:	6010      	str	r0, [r2, #0]
 8012ee0:	6051      	str	r1, [r2, #4]
 8012ee2:	881b      	ldrh	r3, [r3, #0]
 8012ee4:	8113      	strh	r3, [r2, #8]
}
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	3730      	adds	r7, #48	; 0x30
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	10624dd3 	.word	0x10624dd3

08012ef4 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef6:	b091      	sub	sp, #68	; 0x44
 8012ef8:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 8012efa:	f7ee f945 	bl	8001188 <SD_init>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d172      	bne.n	8012fea <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8012f04:	4841      	ldr	r0, [pc, #260]	; (801300c <sdTest_begin+0x118>)
 8012f06:	f7ff ff6b 	bl	8012de0 <println>
		print("[SD] Creating test file...");
 8012f0a:	4841      	ldr	r0, [pc, #260]	; (8013010 <sdTest_begin+0x11c>)
 8012f0c:	f7ff ff5e 	bl	8012dcc <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 8012f10:	4840      	ldr	r0, [pc, #256]	; (8013014 <sdTest_begin+0x120>)
 8012f12:	f7ee f975 	bl	8001200 <SD_newFile>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d161      	bne.n	8012fe0 <sdTest_begin+0xec>
		{
			println("successful.");
 8012f1c:	483e      	ldr	r0, [pc, #248]	; (8013018 <sdTest_begin+0x124>)
 8012f1e:	f7ff ff5f 	bl	8012de0 <println>
			bool status = true;
 8012f22:	2301      	movs	r3, #1
 8012f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8012f28:	493c      	ldr	r1, [pc, #240]	; (801301c <sdTest_begin+0x128>)
 8012f2a:	483a      	ldr	r0, [pc, #232]	; (8013014 <sdTest_begin+0x120>)
 8012f2c:	f7ee f990 	bl	8001250 <SD_writeToFile>
 8012f30:	4603      	mov	r3, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	bf0c      	ite	eq
 8012f36:	2301      	moveq	r3, #1
 8012f38:	2300      	movne	r3, #0
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f42:	4313      	orrs	r3, r2
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	bf14      	ite	ne
 8012f48:	2301      	movne	r3, #1
 8012f4a:	2300      	moveq	r3, #0
 8012f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 8012f50:	f107 031c 	add.w	r3, r7, #28
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7ff ff7d 	bl	8012e54 <getTime>
			char dateStr[26] = {0};
 8012f5a:	463b      	mov	r3, r7
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	605a      	str	r2, [r3, #4]
 8012f62:	609a      	str	r2, [r3, #8]
 8012f64:	60da      	str	r2, [r3, #12]
 8012f66:	611a      	str	r2, [r3, #16]
 8012f68:	615a      	str	r2, [r3, #20]
 8012f6a:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8012f6c:	7fbb      	ldrb	r3, [r7, #30]
 8012f6e:	461e      	mov	r6, r3
 8012f70:	7f7b      	ldrb	r3, [r7, #29]
 8012f72:	469c      	mov	ip, r3
 8012f74:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8012f76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012f7a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8012f7e:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8012f82:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8012f84:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8012f86:	4605      	mov	r5, r0
 8012f88:	4638      	mov	r0, r7
 8012f8a:	9504      	str	r5, [sp, #16]
 8012f8c:	9403      	str	r4, [sp, #12]
 8012f8e:	9102      	str	r1, [sp, #8]
 8012f90:	9201      	str	r2, [sp, #4]
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	4663      	mov	r3, ip
 8012f96:	4632      	mov	r2, r6
 8012f98:	4921      	ldr	r1, [pc, #132]	; (8013020 <sdTest_begin+0x12c>)
 8012f9a:	f004 f84b 	bl	8017034 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	481c      	ldr	r0, [pc, #112]	; (8013014 <sdTest_begin+0x120>)
 8012fa4:	f7ee f954 	bl	8001250 <SD_writeToFile>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	bf0c      	ite	eq
 8012fae:	2301      	moveq	r3, #1
 8012fb0:	2300      	movne	r3, #0
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	bf14      	ite	ne
 8012fc0:	2301      	movne	r3, #1
 8012fc2:	2300      	moveq	r3, #0
 8012fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8012fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d003      	beq.n	8012fd8 <sdTest_begin+0xe4>
 8012fd0:	4814      	ldr	r0, [pc, #80]	; (8013024 <sdTest_begin+0x130>)
 8012fd2:	f7ff ff05 	bl	8012de0 <println>
 8012fd6:	e010      	b.n	8012ffa <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8012fd8:	4813      	ldr	r0, [pc, #76]	; (8013028 <sdTest_begin+0x134>)
 8012fda:	f7ff ff01 	bl	8012de0 <println>
 8012fde:	e00c      	b.n	8012ffa <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 8012fe0:	4812      	ldr	r0, [pc, #72]	; (801302c <sdTest_begin+0x138>)
 8012fe2:	f7ff fefd 	bl	8012de0 <println>
			return false;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	e00b      	b.n	8013002 <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 8012fea:	4811      	ldr	r0, [pc, #68]	; (8013030 <sdTest_begin+0x13c>)
 8012fec:	f7ff fef8 	bl	8012de0 <println>
		sdActive = false;
 8012ff0:	4b10      	ldr	r3, [pc, #64]	; (8013034 <sdTest_begin+0x140>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	701a      	strb	r2, [r3, #0]
		return false;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e003      	b.n	8013002 <sdTest_begin+0x10e>
	}

	sdActive = true;
 8012ffa:	4b0e      	ldr	r3, [pc, #56]	; (8013034 <sdTest_begin+0x140>)
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	701a      	strb	r2, [r3, #0]
	return true;
 8013000:	2301      	movs	r3, #1
}
 8013002:	4618      	mov	r0, r3
 8013004:	372c      	adds	r7, #44	; 0x2c
 8013006:	46bd      	mov	sp, r7
 8013008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801300a:	bf00      	nop
 801300c:	0801bc08 	.word	0x0801bc08
 8013010:	0801bc18 	.word	0x0801bc18
 8013014:	0801bc34 	.word	0x0801bc34
 8013018:	0801bc40 	.word	0x0801bc40
 801301c:	0801bc4c 	.word	0x0801bc4c
 8013020:	0801bc5c 	.word	0x0801bc5c
 8013024:	0801bc74 	.word	0x0801bc74
 8013028:	0801bc98 	.word	0x0801bc98
 801302c:	0801bcbc 	.word	0x0801bcbc
 8013030:	0801bccc 	.word	0x0801bccc
 8013034:	20002e18 	.word	0x20002e18

08013038 <transmitter_begin>:

SX1278 radio;
bool firstTransmission;

static bool transmitter_begin(void)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 801303e:	4b27      	ldr	r3, [pc, #156]	; (80130dc <transmitter_begin+0xa4>)
 8013040:	2220      	movs	r2, #32
 8013042:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 8013044:	4b25      	ldr	r3, [pc, #148]	; (80130dc <transmitter_begin+0xa4>)
 8013046:	2240      	movs	r2, #64	; 0x40
 8013048:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 801304a:	4b24      	ldr	r3, [pc, #144]	; (80130dc <transmitter_begin+0xa4>)
 801304c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013050:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 8013052:	4b22      	ldr	r3, [pc, #136]	; (80130dc <transmitter_begin+0xa4>)
 8013054:	2280      	movs	r2, #128	; 0x80
 8013056:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 8013058:	4b20      	ldr	r3, [pc, #128]	; (80130dc <transmitter_begin+0xa4>)
 801305a:	4a21      	ldr	r2, [pc, #132]	; (80130e0 <transmitter_begin+0xa8>)
 801305c:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 801305e:	4b1f      	ldr	r3, [pc, #124]	; (80130dc <transmitter_begin+0xa4>)
 8013060:	4a20      	ldr	r2, [pc, #128]	; (80130e4 <transmitter_begin+0xac>)
 8013062:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 8013064:	4b1d      	ldr	r3, [pc, #116]	; (80130dc <transmitter_begin+0xa4>)
 8013066:	4a20      	ldr	r2, [pc, #128]	; (80130e8 <transmitter_begin+0xb0>)
 8013068:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 801306a:	4b1c      	ldr	r3, [pc, #112]	; (80130dc <transmitter_begin+0xa4>)
 801306c:	4a1d      	ldr	r2, [pc, #116]	; (80130e4 <transmitter_begin+0xac>)
 801306e:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 8013070:	f001 fd8e 	bl	8014b90 <Get_SPI1_Instance>
 8013074:	4602      	mov	r2, r0
 8013076:	4b19      	ldr	r3, [pc, #100]	; (80130dc <transmitter_begin+0xa4>)
 8013078:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 801307a:	4b18      	ldr	r3, [pc, #96]	; (80130dc <transmitter_begin+0xa4>)
 801307c:	4a1b      	ldr	r2, [pc, #108]	; (80130ec <transmitter_begin+0xb4>)
 801307e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013080:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 8013084:	4b15      	ldr	r3, [pc, #84]	; (80130dc <transmitter_begin+0xa4>)
 8013086:	2201      	movs	r2, #1
 8013088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	uint8_t attempts = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 8013090:	e011      	b.n	80130b6 <transmitter_begin+0x7e>
	{
		HAL_Delay(500);
 8013092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013096:	f7f2 ffcd 	bl	8006034 <HAL_Delay>
		if (TRANSMITTER_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
 801309a:	4815      	ldr	r0, [pc, #84]	; (80130f0 <transmitter_begin+0xb8>)
 801309c:	f7ff fea0 	bl	8012de0 <println>
		attempts++;
 80130a0:	79fb      	ldrb	r3, [r7, #7]
 80130a2:	3301      	adds	r3, #1
 80130a4:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 80130a6:	79fb      	ldrb	r3, [r7, #7]
 80130a8:	2b04      	cmp	r3, #4
 80130aa:	d904      	bls.n	80130b6 <transmitter_begin+0x7e>
		{
			if (TRANSMITTER_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
 80130ac:	4811      	ldr	r0, [pc, #68]	; (80130f4 <transmitter_begin+0xbc>)
 80130ae:	f7ff fe97 	bl	8012de0 <println>
			return false;
 80130b2:	2300      	movs	r3, #0
 80130b4:	e00e      	b.n	80130d4 <transmitter_begin+0x9c>
	while (!SX1278_init(&radio))
 80130b6:	4809      	ldr	r0, [pc, #36]	; (80130dc <transmitter_begin+0xa4>)
 80130b8:	f7ee fa18 	bl	80014ec <SX1278_init>
 80130bc:	4603      	mov	r3, r0
 80130be:	f083 0301 	eor.w	r3, r3, #1
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d1e4      	bne.n	8013092 <transmitter_begin+0x5a>
		}
	}
	if (TRANSMITTER_DEBUG) println("[LoRa] Radio successful init!");
 80130c8:	480b      	ldr	r0, [pc, #44]	; (80130f8 <transmitter_begin+0xc0>)
 80130ca:	f7ff fe89 	bl	8012de0 <println>
	firstTransmission = true;
 80130ce:	4b0b      	ldr	r3, [pc, #44]	; (80130fc <transmitter_begin+0xc4>)
 80130d0:	2201      	movs	r2, #1
 80130d2:	701a      	strb	r2, [r3, #0]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	20002868 	.word	0x20002868
 80130e0:	40020800 	.word	0x40020800
 80130e4:	40020000 	.word	0x40020000
 80130e8:	40020400 	.word	0x40020400
 80130ec:	20000124 	.word	0x20000124
 80130f0:	0801bd1c 	.word	0x0801bd1c
 80130f4:	0801bd44 	.word	0x0801bd44
 80130f8:	0801bd74 	.word	0x0801bd74
 80130fc:	20004b04 	.word	0x20004b04

08013100 <transmitter_loop>:

static bool transmitter_loop(uint8_t* buf, uint8_t len)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	460b      	mov	r3, r1
 801310a:	70fb      	strb	r3, [r7, #3]
	if (radio.active)
 801310c:	4b33      	ldr	r3, [pc, #204]	; (80131dc <transmitter_loop+0xdc>)
 801310e:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8013112:	2b00      	cmp	r3, #0
 8013114:	d05d      	beq.n	80131d2 <transmitter_loop+0xd2>
	{
		if (radio.useDio0IRQ)
 8013116:	4b31      	ldr	r3, [pc, #196]	; (80131dc <transmitter_loop+0xdc>)
 8013118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801311c:	2b00      	cmp	r3, #0
 801311e:	d04d      	beq.n	80131bc <transmitter_loop+0xbc>
		{
			// manually check for interrupt
			if (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET))
 8013120:	4b2f      	ldr	r3, [pc, #188]	; (80131e0 <transmitter_loop+0xe0>)
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d10f      	bne.n	8013148 <transmitter_loop+0x48>
 8013128:	4b2c      	ldr	r3, [pc, #176]	; (80131dc <transmitter_loop+0xdc>)
 801312a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801312e:	2b00      	cmp	r3, #0
 8013130:	d042      	beq.n	80131b8 <transmitter_loop+0xb8>
 8013132:	4b2a      	ldr	r3, [pc, #168]	; (80131dc <transmitter_loop+0xdc>)
 8013134:	69da      	ldr	r2, [r3, #28]
 8013136:	4b29      	ldr	r3, [pc, #164]	; (80131dc <transmitter_loop+0xdc>)
 8013138:	8a1b      	ldrh	r3, [r3, #16]
 801313a:	4619      	mov	r1, r3
 801313c:	4610      	mov	r0, r2
 801313e:	f7f3 fddf 	bl	8006d00 <HAL_GPIO_ReadPin>
 8013142:	4603      	mov	r3, r0
 8013144:	2b01      	cmp	r3, #1
 8013146:	d137      	bne.n	80131b8 <transmitter_loop+0xb8>
			{
				if (TRANSMITTER_DEBUG) println("[LoRa] Transmission finished.");
 8013148:	4826      	ldr	r0, [pc, #152]	; (80131e4 <transmitter_loop+0xe4>)
 801314a:	f7ff fe49 	bl	8012de0 <println>
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 801314e:	4b24      	ldr	r3, [pc, #144]	; (80131e0 <transmitter_loop+0xe0>)
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	f083 0301 	eor.w	r3, r3, #1
 8013156:	b2db      	uxtb	r3, r3
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <transmitter_loop+0x62>
 801315c:	481f      	ldr	r0, [pc, #124]	; (80131dc <transmitter_loop+0xdc>)
 801315e:	f7ee fc48 	bl	80019f2 <SX1278_dio0_IRQ>
				if (TRANSMITTER_PRINT_PACKET)
				{
					printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
 8013162:	78fb      	ldrb	r3, [r7, #3]
 8013164:	461a      	mov	r2, r3
 8013166:	4920      	ldr	r1, [pc, #128]	; (80131e8 <transmitter_loop+0xe8>)
 8013168:	4820      	ldr	r0, [pc, #128]	; (80131ec <transmitter_loop+0xec>)
 801316a:	f003 ff63 	bl	8017034 <siprintf>
 801316e:	4603      	mov	r3, r0
 8013170:	461a      	mov	r2, r3
 8013172:	4b1f      	ldr	r3, [pc, #124]	; (80131f0 <transmitter_loop+0xf0>)
 8013174:	601a      	str	r2, [r3, #0]
					printv(printBuffer, printLen);
 8013176:	4b1e      	ldr	r3, [pc, #120]	; (80131f0 <transmitter_loop+0xf0>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4619      	mov	r1, r3
 801317c:	481b      	ldr	r0, [pc, #108]	; (80131ec <transmitter_loop+0xec>)
 801317e:	f7ff fe39 	bl	8012df4 <printv>
					printv(buf, len);
 8013182:	78fb      	ldrb	r3, [r7, #3]
 8013184:	4619      	mov	r1, r3
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fe34 	bl	8012df4 <printv>
					println("]");
 801318c:	4819      	ldr	r0, [pc, #100]	; (80131f4 <transmitter_loop+0xf4>)
 801318e:	f7ff fe27 	bl	8012de0 <println>
				}
				SX1278_transmit(&radio, buf, len);
 8013192:	78fb      	ldrb	r3, [r7, #3]
 8013194:	461a      	mov	r2, r3
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	4810      	ldr	r0, [pc, #64]	; (80131dc <transmitter_loop+0xdc>)
 801319a:	f7ee fa9f 	bl	80016dc <SX1278_transmit>
				firstTransmission = false;
 801319e:	4b10      	ldr	r3, [pc, #64]	; (80131e0 <transmitter_loop+0xe0>)
 80131a0:	2200      	movs	r2, #0
 80131a2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 80131a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80131a8:	4813      	ldr	r0, [pc, #76]	; (80131f8 <transmitter_loop+0xf8>)
 80131aa:	f7f3 fdda 	bl	8006d62 <HAL_GPIO_TogglePin>
				if (TRANSMITTER_DEBUG) println("[LoRa] Packet pushed!");
 80131ae:	4813      	ldr	r0, [pc, #76]	; (80131fc <transmitter_loop+0xfc>)
 80131b0:	f7ff fe16 	bl	8012de0 <println>
				return true;
 80131b4:	2301      	movs	r3, #1
 80131b6:	e00d      	b.n	80131d4 <transmitter_loop+0xd4>
			}
			else return false;
 80131b8:	2300      	movs	r3, #0
 80131ba:	e00b      	b.n	80131d4 <transmitter_loop+0xd4>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 80131bc:	78fb      	ldrb	r3, [r7, #3]
 80131be:	461a      	mov	r2, r3
 80131c0:	6879      	ldr	r1, [r7, #4]
 80131c2:	4806      	ldr	r0, [pc, #24]	; (80131dc <transmitter_loop+0xdc>)
 80131c4:	f7ee fa8a 	bl	80016dc <SX1278_transmit>
			if (TRANSMITTER_DEBUG) println("[LoRa] Transmission finished.");
 80131c8:	4806      	ldr	r0, [pc, #24]	; (80131e4 <transmitter_loop+0xe4>)
 80131ca:	f7ff fe09 	bl	8012de0 <println>
			return true;
 80131ce:	2301      	movs	r3, #1
 80131d0:	e000      	b.n	80131d4 <transmitter_loop+0xd4>
		}
	}
	return false;
 80131d2:	2300      	movs	r3, #0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3708      	adds	r7, #8
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	20002868 	.word	0x20002868
 80131e0:	20004b04 	.word	0x20004b04
 80131e4:	0801bd94 	.word	0x0801bd94
 80131e8:	0801bdb4 	.word	0x0801bdb4
 80131ec:	200003e0 	.word	0x200003e0
 80131f0:	200003dc 	.word	0x200003dc
 80131f4:	0801bde0 	.word	0x0801bde0
 80131f8:	40020400 	.word	0x40020400
 80131fc:	0801bde4 	.word	0x0801bde4

08013200 <imuTest_getData>:
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

bool imuActive;

static bool imuTest_getData(void)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 8013204:	213a      	movs	r1, #58	; 0x3a
 8013206:	20d2      	movs	r0, #210	; 0xd2
 8013208:	f7f0 fa4f 	bl	80036aa <MPU_readByte>
 801320c:	4603      	mov	r3, r0
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	2b00      	cmp	r3, #0
 8013214:	f000 80bf 	beq.w	8013396 <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 8013218:	4860      	ldr	r0, [pc, #384]	; (801339c <imuTest_getData+0x19c>)
 801321a:	f7f0 fb1d 	bl	8003858 <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 801321e:	4b5f      	ldr	r3, [pc, #380]	; (801339c <imuTest_getData+0x19c>)
 8013220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013224:	ee07 3a90 	vmov	s15, r3
 8013228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801322c:	4b5c      	ldr	r3, [pc, #368]	; (80133a0 <imuTest_getData+0x1a0>)
 801322e:	edd3 7a00 	vldr	s15, [r3]
 8013232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013236:	4b5b      	ldr	r3, [pc, #364]	; (80133a4 <imuTest_getData+0x1a4>)
 8013238:	edd3 7a00 	vldr	s15, [r3]
 801323c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013240:	4b59      	ldr	r3, [pc, #356]	; (80133a8 <imuTest_getData+0x1a8>)
 8013242:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 8013246:	4b55      	ldr	r3, [pc, #340]	; (801339c <imuTest_getData+0x19c>)
 8013248:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801324c:	ee07 3a90 	vmov	s15, r3
 8013250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013254:	4b52      	ldr	r3, [pc, #328]	; (80133a0 <imuTest_getData+0x1a0>)
 8013256:	edd3 7a00 	vldr	s15, [r3]
 801325a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801325e:	4b51      	ldr	r3, [pc, #324]	; (80133a4 <imuTest_getData+0x1a4>)
 8013260:	edd3 7a01 	vldr	s15, [r3, #4]
 8013264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013268:	4b50      	ldr	r3, [pc, #320]	; (80133ac <imuTest_getData+0x1ac>)
 801326a:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 801326e:	4b4b      	ldr	r3, [pc, #300]	; (801339c <imuTest_getData+0x19c>)
 8013270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013274:	ee07 3a90 	vmov	s15, r3
 8013278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801327c:	4b48      	ldr	r3, [pc, #288]	; (80133a0 <imuTest_getData+0x1a0>)
 801327e:	edd3 7a00 	vldr	s15, [r3]
 8013282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013286:	4b47      	ldr	r3, [pc, #284]	; (80133a4 <imuTest_getData+0x1a4>)
 8013288:	edd3 7a02 	vldr	s15, [r3, #8]
 801328c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013290:	4b47      	ldr	r3, [pc, #284]	; (80133b0 <imuTest_getData+0x1b0>)
 8013292:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 8013296:	4847      	ldr	r0, [pc, #284]	; (80133b4 <imuTest_getData+0x1b4>)
 8013298:	f7f0 fb0a 	bl	80038b0 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 801329c:	4b45      	ldr	r3, [pc, #276]	; (80133b4 <imuTest_getData+0x1b4>)
 801329e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132a2:	ee07 3a90 	vmov	s15, r3
 80132a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132aa:	4b43      	ldr	r3, [pc, #268]	; (80133b8 <imuTest_getData+0x1b8>)
 80132ac:	edd3 7a00 	vldr	s15, [r3]
 80132b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132b4:	4b41      	ldr	r3, [pc, #260]	; (80133bc <imuTest_getData+0x1bc>)
 80132b6:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 80132ba:	4b3e      	ldr	r3, [pc, #248]	; (80133b4 <imuTest_getData+0x1b4>)
 80132bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80132c0:	ee07 3a90 	vmov	s15, r3
 80132c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132c8:	4b3b      	ldr	r3, [pc, #236]	; (80133b8 <imuTest_getData+0x1b8>)
 80132ca:	edd3 7a00 	vldr	s15, [r3]
 80132ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132d2:	4b3b      	ldr	r3, [pc, #236]	; (80133c0 <imuTest_getData+0x1c0>)
 80132d4:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 80132d8:	4b36      	ldr	r3, [pc, #216]	; (80133b4 <imuTest_getData+0x1b4>)
 80132da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80132de:	ee07 3a90 	vmov	s15, r3
 80132e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132e6:	4b34      	ldr	r3, [pc, #208]	; (80133b8 <imuTest_getData+0x1b8>)
 80132e8:	edd3 7a00 	vldr	s15, [r3]
 80132ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132f0:	4b34      	ldr	r3, [pc, #208]	; (80133c4 <imuTest_getData+0x1c4>)
 80132f2:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 80132f6:	4834      	ldr	r0, [pc, #208]	; (80133c8 <imuTest_getData+0x1c8>)
 80132f8:	f7f0 fb06 	bl	8003908 <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 80132fc:	4b32      	ldr	r3, [pc, #200]	; (80133c8 <imuTest_getData+0x1c8>)
 80132fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013302:	ee07 3a90 	vmov	s15, r3
 8013306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801330a:	4b30      	ldr	r3, [pc, #192]	; (80133cc <imuTest_getData+0x1cc>)
 801330c:	edd3 7a00 	vldr	s15, [r3]
 8013310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013314:	4b2e      	ldr	r3, [pc, #184]	; (80133d0 <imuTest_getData+0x1d0>)
 8013316:	edd3 7a00 	vldr	s15, [r3]
 801331a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801331e:	4b2d      	ldr	r3, [pc, #180]	; (80133d4 <imuTest_getData+0x1d4>)
 8013320:	edd3 7a00 	vldr	s15, [r3]
 8013324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013328:	4b2b      	ldr	r3, [pc, #172]	; (80133d8 <imuTest_getData+0x1d8>)
 801332a:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 801332e:	4b26      	ldr	r3, [pc, #152]	; (80133c8 <imuTest_getData+0x1c8>)
 8013330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013334:	ee07 3a90 	vmov	s15, r3
 8013338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801333c:	4b23      	ldr	r3, [pc, #140]	; (80133cc <imuTest_getData+0x1cc>)
 801333e:	edd3 7a00 	vldr	s15, [r3]
 8013342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013346:	4b22      	ldr	r3, [pc, #136]	; (80133d0 <imuTest_getData+0x1d0>)
 8013348:	edd3 7a01 	vldr	s15, [r3, #4]
 801334c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013350:	4b20      	ldr	r3, [pc, #128]	; (80133d4 <imuTest_getData+0x1d4>)
 8013352:	edd3 7a01 	vldr	s15, [r3, #4]
 8013356:	ee77 7a67 	vsub.f32	s15, s14, s15
 801335a:	4b20      	ldr	r3, [pc, #128]	; (80133dc <imuTest_getData+0x1dc>)
 801335c:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 8013360:	4b19      	ldr	r3, [pc, #100]	; (80133c8 <imuTest_getData+0x1c8>)
 8013362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013366:	ee07 3a90 	vmov	s15, r3
 801336a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801336e:	4b17      	ldr	r3, [pc, #92]	; (80133cc <imuTest_getData+0x1cc>)
 8013370:	edd3 7a00 	vldr	s15, [r3]
 8013374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013378:	4b15      	ldr	r3, [pc, #84]	; (80133d0 <imuTest_getData+0x1d0>)
 801337a:	edd3 7a02 	vldr	s15, [r3, #8]
 801337e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013382:	4b14      	ldr	r3, [pc, #80]	; (80133d4 <imuTest_getData+0x1d4>)
 8013384:	edd3 7a02 	vldr	s15, [r3, #8]
 8013388:	ee77 7a67 	vsub.f32	s15, s14, s15
 801338c:	4b14      	ldr	r3, [pc, #80]	; (80133e0 <imuTest_getData+0x1e0>)
 801338e:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8013392:	2301      	movs	r3, #1
 8013394:	e000      	b.n	8013398 <imuTest_getData+0x198>
	}
	return false;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	bd80      	pop	{r7, pc}
 801339c:	20002cd8 	.word	0x20002cd8
 80133a0:	20002d5c 	.word	0x20002d5c
 80133a4:	20002ce0 	.word	0x20002ce0
 80133a8:	20002d58 	.word	0x20002d58
 80133ac:	20002e04 	.word	0x20002e04
 80133b0:	20002d20 	.word	0x20002d20
 80133b4:	20002d28 	.word	0x20002d28
 80133b8:	20002d9c 	.word	0x20002d9c
 80133bc:	20002df4 	.word	0x20002df4
 80133c0:	20002d1c 	.word	0x20002d1c
 80133c4:	20002d8c 	.word	0x20002d8c
 80133c8:	20002db8 	.word	0x20002db8
 80133cc:	20002dd0 	.word	0x20002dd0
 80133d0:	20002df8 	.word	0x20002df8
 80133d4:	20002d70 	.word	0x20002d70
 80133d8:	20002e08 	.word	0x20002e08
 80133dc:	20002d30 	.word	0x20002d30
 80133e0:	20002da0 	.word	0x20002da0

080133e4 <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 80133e8:	f7ff fd1a 	bl	8012e20 <micros>
 80133ec:	4602      	mov	r2, r0
 80133ee:	4b43      	ldr	r3, [pc, #268]	; (80134fc <imuTest_quatUpdate+0x118>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	2b0a      	cmp	r3, #10
 80133f6:	d97d      	bls.n	80134f4 <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 80133f8:	f7ff fd12 	bl	8012e20 <micros>
 80133fc:	4603      	mov	r3, r0
 80133fe:	461a      	mov	r2, r3
 8013400:	4b3f      	ldr	r3, [pc, #252]	; (8013500 <imuTest_quatUpdate+0x11c>)
 8013402:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 8013404:	4b3e      	ldr	r3, [pc, #248]	; (8013500 <imuTest_quatUpdate+0x11c>)
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	4b3e      	ldr	r3, [pc, #248]	; (8013504 <imuTest_quatUpdate+0x120>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	ee07 3a90 	vmov	s15, r3
 8013412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013416:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8013508 <imuTest_quatUpdate+0x124>
 801341a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801341e:	4b3b      	ldr	r3, [pc, #236]	; (801350c <imuTest_quatUpdate+0x128>)
 8013420:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 8013424:	4b36      	ldr	r3, [pc, #216]	; (8013500 <imuTest_quatUpdate+0x11c>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	4a36      	ldr	r2, [pc, #216]	; (8013504 <imuTest_quatUpdate+0x120>)
 801342a:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 801342c:	4b38      	ldr	r3, [pc, #224]	; (8013510 <imuTest_quatUpdate+0x12c>)
 801342e:	ed93 7a00 	vldr	s14, [r3]
 8013432:	4b36      	ldr	r3, [pc, #216]	; (801350c <imuTest_quatUpdate+0x128>)
 8013434:	edd3 7a00 	vldr	s15, [r3]
 8013438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801343c:	4b34      	ldr	r3, [pc, #208]	; (8013510 <imuTest_quatUpdate+0x12c>)
 801343e:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 8013442:	4b34      	ldr	r3, [pc, #208]	; (8013514 <imuTest_quatUpdate+0x130>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	3301      	adds	r3, #1
 8013448:	4a32      	ldr	r2, [pc, #200]	; (8013514 <imuTest_quatUpdate+0x130>)
 801344a:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 801344c:	4b32      	ldr	r3, [pc, #200]	; (8013518 <imuTest_quatUpdate+0x134>)
 801344e:	edd3 6a00 	vldr	s13, [r3]
 8013452:	4b32      	ldr	r3, [pc, #200]	; (801351c <imuTest_quatUpdate+0x138>)
 8013454:	edd3 7a00 	vldr	s15, [r3]
 8013458:	eeb1 6a67 	vneg.f32	s12, s15
 801345c:	4b30      	ldr	r3, [pc, #192]	; (8013520 <imuTest_quatUpdate+0x13c>)
 801345e:	edd3 7a00 	vldr	s15, [r3]
 8013462:	eef1 5a67 	vneg.f32	s11, s15
 8013466:	4b2f      	ldr	r3, [pc, #188]	; (8013524 <imuTest_quatUpdate+0x140>)
 8013468:	edd3 7a00 	vldr	s15, [r3]
 801346c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8013528 <imuTest_quatUpdate+0x144>
 8013470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013474:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 801352c <imuTest_quatUpdate+0x148>
 8013478:	ee87 5a87 	vdiv.f32	s10, s15, s14
 801347c:	4b2c      	ldr	r3, [pc, #176]	; (8013530 <imuTest_quatUpdate+0x14c>)
 801347e:	edd3 7a00 	vldr	s15, [r3]
 8013482:	eef1 7a67 	vneg.f32	s15, s15
 8013486:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013528 <imuTest_quatUpdate+0x144>
 801348a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801348e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801352c <imuTest_quatUpdate+0x148>
 8013492:	eec7 4a87 	vdiv.f32	s9, s15, s14
 8013496:	4b27      	ldr	r3, [pc, #156]	; (8013534 <imuTest_quatUpdate+0x150>)
 8013498:	edd3 7a00 	vldr	s15, [r3]
 801349c:	eef1 7a67 	vneg.f32	s15, s15
 80134a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013528 <imuTest_quatUpdate+0x144>
 80134a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80134a8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801352c <imuTest_quatUpdate+0x148>
 80134ac:	eec7 2a87 	vdiv.f32	s5, s15, s14
 80134b0:	4b21      	ldr	r3, [pc, #132]	; (8013538 <imuTest_quatUpdate+0x154>)
 80134b2:	ed93 7a00 	vldr	s14, [r3]
 80134b6:	4b21      	ldr	r3, [pc, #132]	; (801353c <imuTest_quatUpdate+0x158>)
 80134b8:	edd3 7a00 	vldr	s15, [r3]
 80134bc:	eef1 7a67 	vneg.f32	s15, s15
 80134c0:	4b1f      	ldr	r3, [pc, #124]	; (8013540 <imuTest_quatUpdate+0x15c>)
 80134c2:	ed93 4a00 	vldr	s8, [r3]
 80134c6:	eef0 3a67 	vmov.f32	s7, s15
 80134ca:	eeb0 3a47 	vmov.f32	s6, s14
 80134ce:	eeb0 2a64 	vmov.f32	s4, s9
 80134d2:	eef0 1a45 	vmov.f32	s3, s10
 80134d6:	eeb0 1a65 	vmov.f32	s2, s11
 80134da:	eef0 0a46 	vmov.f32	s1, s12
 80134de:	eeb0 0a66 	vmov.f32	s0, s13
 80134e2:	f7f1 faf3 	bl	8004acc <MadgwickQuaternionUpdate>

		lastCompute = micros();
 80134e6:	f7ff fc9b 	bl	8012e20 <micros>
 80134ea:	4602      	mov	r2, r0
 80134ec:	4b03      	ldr	r3, [pc, #12]	; (80134fc <imuTest_quatUpdate+0x118>)
 80134ee:	601a      	str	r2, [r3, #0]
		return true;
 80134f0:	2301      	movs	r3, #1
 80134f2:	e000      	b.n	80134f6 <imuTest_quatUpdate+0x112>
	}
	return false;
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	20002e0c 	.word	0x20002e0c
 8013500:	20002d54 	.word	0x20002d54
 8013504:	20002d24 	.word	0x20002d24
 8013508:	49742400 	.word	0x49742400
 801350c:	20002dcc 	.word	0x20002dcc
 8013510:	20002d14 	.word	0x20002d14
 8013514:	20002e14 	.word	0x20002e14
 8013518:	20002d58 	.word	0x20002d58
 801351c:	20002e04 	.word	0x20002e04
 8013520:	20002d20 	.word	0x20002d20
 8013524:	20002df4 	.word	0x20002df4
 8013528:	40490fdb 	.word	0x40490fdb
 801352c:	43340000 	.word	0x43340000
 8013530:	20002d1c 	.word	0x20002d1c
 8013534:	20002d8c 	.word	0x20002d8c
 8013538:	20002d30 	.word	0x20002d30
 801353c:	20002e08 	.word	0x20002e08
 8013540:	20002da0 	.word	0x20002da0

08013544 <imuTest_getEuler>:
static void imuTest_getEuler()
{
 8013544:	b5b0      	push	{r4, r5, r7, lr}
 8013546:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8013548:	4b84      	ldr	r3, [pc, #528]	; (801375c <imuTest_getEuler+0x218>)
 801354a:	ed93 7a01 	vldr	s14, [r3, #4]
 801354e:	4b83      	ldr	r3, [pc, #524]	; (801375c <imuTest_getEuler+0x218>)
 8013550:	edd3 7a02 	vldr	s15, [r3, #8]
 8013554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013558:	4b80      	ldr	r3, [pc, #512]	; (801375c <imuTest_getEuler+0x218>)
 801355a:	edd3 6a00 	vldr	s13, [r3]
 801355e:	4b7f      	ldr	r3, [pc, #508]	; (801375c <imuTest_getEuler+0x218>)
 8013560:	edd3 7a03 	vldr	s15, [r3, #12]
 8013564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013568:	ee77 7a27 	vadd.f32	s15, s14, s15
 801356c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013570:	ee17 0a90 	vmov	r0, s15
 8013574:	f7ec fff8 	bl	8000568 <__aeabi_f2d>
 8013578:	4604      	mov	r4, r0
 801357a:	460d      	mov	r5, r1
 801357c:	4b77      	ldr	r3, [pc, #476]	; (801375c <imuTest_getEuler+0x218>)
 801357e:	ed93 7a00 	vldr	s14, [r3]
 8013582:	4b76      	ldr	r3, [pc, #472]	; (801375c <imuTest_getEuler+0x218>)
 8013584:	edd3 7a00 	vldr	s15, [r3]
 8013588:	ee27 7a27 	vmul.f32	s14, s14, s15
 801358c:	4b73      	ldr	r3, [pc, #460]	; (801375c <imuTest_getEuler+0x218>)
 801358e:	edd3 6a01 	vldr	s13, [r3, #4]
 8013592:	4b72      	ldr	r3, [pc, #456]	; (801375c <imuTest_getEuler+0x218>)
 8013594:	edd3 7a01 	vldr	s15, [r3, #4]
 8013598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801359c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135a0:	4b6e      	ldr	r3, [pc, #440]	; (801375c <imuTest_getEuler+0x218>)
 80135a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80135a6:	4b6d      	ldr	r3, [pc, #436]	; (801375c <imuTest_getEuler+0x218>)
 80135a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80135ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80135b4:	4b69      	ldr	r3, [pc, #420]	; (801375c <imuTest_getEuler+0x218>)
 80135b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80135ba:	4b68      	ldr	r3, [pc, #416]	; (801375c <imuTest_getEuler+0x218>)
 80135bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80135c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135c8:	ee17 0a90 	vmov	r0, s15
 80135cc:	f7ec ffcc 	bl	8000568 <__aeabi_f2d>
 80135d0:	4602      	mov	r2, r0
 80135d2:	460b      	mov	r3, r1
 80135d4:	ec43 2b11 	vmov	d1, r2, r3
 80135d8:	ec45 4b10 	vmov	d0, r4, r5
 80135dc:	f006 fc0e 	bl	8019dfc <atan2>
 80135e0:	ec54 3b10 	vmov	r3, r4, d0
 80135e4:	4618      	mov	r0, r3
 80135e6:	4621      	mov	r1, r4
 80135e8:	f7ed fb0e 	bl	8000c08 <__aeabi_d2f>
 80135ec:	4602      	mov	r2, r0
 80135ee:	4b5c      	ldr	r3, [pc, #368]	; (8013760 <imuTest_getEuler+0x21c>)
 80135f0:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 80135f2:	4b5a      	ldr	r3, [pc, #360]	; (801375c <imuTest_getEuler+0x218>)
 80135f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80135f8:	4b58      	ldr	r3, [pc, #352]	; (801375c <imuTest_getEuler+0x218>)
 80135fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80135fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013602:	4b56      	ldr	r3, [pc, #344]	; (801375c <imuTest_getEuler+0x218>)
 8013604:	edd3 6a00 	vldr	s13, [r3]
 8013608:	4b54      	ldr	r3, [pc, #336]	; (801375c <imuTest_getEuler+0x218>)
 801360a:	edd3 7a02 	vldr	s15, [r3, #8]
 801360e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013616:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801361a:	ee17 0a90 	vmov	r0, s15
 801361e:	f7ec ffa3 	bl	8000568 <__aeabi_f2d>
 8013622:	4603      	mov	r3, r0
 8013624:	460c      	mov	r4, r1
 8013626:	ec44 3b10 	vmov	d0, r3, r4
 801362a:	f006 fb8f 	bl	8019d4c <asin>
 801362e:	ec54 3b10 	vmov	r3, r4, d0
 8013632:	4618      	mov	r0, r3
 8013634:	4621      	mov	r1, r4
 8013636:	f7ed fae7 	bl	8000c08 <__aeabi_d2f>
 801363a:	4603      	mov	r3, r0
 801363c:	ee07 3a90 	vmov	s15, r3
 8013640:	eef1 7a67 	vneg.f32	s15, s15
 8013644:	4b47      	ldr	r3, [pc, #284]	; (8013764 <imuTest_getEuler+0x220>)
 8013646:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 801364a:	4b44      	ldr	r3, [pc, #272]	; (801375c <imuTest_getEuler+0x218>)
 801364c:	ed93 7a00 	vldr	s14, [r3]
 8013650:	4b42      	ldr	r3, [pc, #264]	; (801375c <imuTest_getEuler+0x218>)
 8013652:	edd3 7a01 	vldr	s15, [r3, #4]
 8013656:	ee27 7a27 	vmul.f32	s14, s14, s15
 801365a:	4b40      	ldr	r3, [pc, #256]	; (801375c <imuTest_getEuler+0x218>)
 801365c:	edd3 6a02 	vldr	s13, [r3, #8]
 8013660:	4b3e      	ldr	r3, [pc, #248]	; (801375c <imuTest_getEuler+0x218>)
 8013662:	edd3 7a03 	vldr	s15, [r3, #12]
 8013666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801366e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013672:	ee17 0a90 	vmov	r0, s15
 8013676:	f7ec ff77 	bl	8000568 <__aeabi_f2d>
 801367a:	4604      	mov	r4, r0
 801367c:	460d      	mov	r5, r1
 801367e:	4b37      	ldr	r3, [pc, #220]	; (801375c <imuTest_getEuler+0x218>)
 8013680:	ed93 7a00 	vldr	s14, [r3]
 8013684:	4b35      	ldr	r3, [pc, #212]	; (801375c <imuTest_getEuler+0x218>)
 8013686:	edd3 7a00 	vldr	s15, [r3]
 801368a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801368e:	4b33      	ldr	r3, [pc, #204]	; (801375c <imuTest_getEuler+0x218>)
 8013690:	edd3 6a01 	vldr	s13, [r3, #4]
 8013694:	4b31      	ldr	r3, [pc, #196]	; (801375c <imuTest_getEuler+0x218>)
 8013696:	edd3 7a01 	vldr	s15, [r3, #4]
 801369a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801369e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136a2:	4b2e      	ldr	r3, [pc, #184]	; (801375c <imuTest_getEuler+0x218>)
 80136a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80136a8:	4b2c      	ldr	r3, [pc, #176]	; (801375c <imuTest_getEuler+0x218>)
 80136aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80136ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136b6:	4b29      	ldr	r3, [pc, #164]	; (801375c <imuTest_getEuler+0x218>)
 80136b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80136bc:	4b27      	ldr	r3, [pc, #156]	; (801375c <imuTest_getEuler+0x218>)
 80136be:	edd3 7a03 	vldr	s15, [r3, #12]
 80136c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136ca:	ee17 0a90 	vmov	r0, s15
 80136ce:	f7ec ff4b 	bl	8000568 <__aeabi_f2d>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	ec43 2b11 	vmov	d1, r2, r3
 80136da:	ec45 4b10 	vmov	d0, r4, r5
 80136de:	f006 fb8d 	bl	8019dfc <atan2>
 80136e2:	ec54 3b10 	vmov	r3, r4, d0
 80136e6:	4618      	mov	r0, r3
 80136e8:	4621      	mov	r1, r4
 80136ea:	f7ed fa8d 	bl	8000c08 <__aeabi_d2f>
 80136ee:	4602      	mov	r2, r0
 80136f0:	4b1d      	ldr	r3, [pc, #116]	; (8013768 <imuTest_getEuler+0x224>)
 80136f2:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 80136f4:	4b1b      	ldr	r3, [pc, #108]	; (8013764 <imuTest_getEuler+0x220>)
 80136f6:	edd3 7a00 	vldr	s15, [r3]
 80136fa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801376c <imuTest_getEuler+0x228>
 80136fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013702:	4b18      	ldr	r3, [pc, #96]	; (8013764 <imuTest_getEuler+0x220>)
 8013704:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 8013708:	4b15      	ldr	r3, [pc, #84]	; (8013760 <imuTest_getEuler+0x21c>)
 801370a:	edd3 7a00 	vldr	s15, [r3]
 801370e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801376c <imuTest_getEuler+0x228>
 8013712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013716:	4b12      	ldr	r3, [pc, #72]	; (8013760 <imuTest_getEuler+0x21c>)
 8013718:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 801371c:	4b12      	ldr	r3, [pc, #72]	; (8013768 <imuTest_getEuler+0x224>)
 801371e:	edd3 7a00 	vldr	s15, [r3]
 8013722:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801376c <imuTest_getEuler+0x228>
 8013726:	ee67 7a87 	vmul.f32	s15, s15, s14
 801372a:	4b0f      	ldr	r3, [pc, #60]	; (8013768 <imuTest_getEuler+0x224>)
 801372c:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 8013730:	4b0b      	ldr	r3, [pc, #44]	; (8013760 <imuTest_getEuler+0x21c>)
 8013732:	edd3 7a00 	vldr	s15, [r3]
 8013736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801373e:	d400      	bmi.n	8013742 <imuTest_getEuler+0x1fe>
}
 8013740:	e009      	b.n	8013756 <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 8013742:	4b07      	ldr	r3, [pc, #28]	; (8013760 <imuTest_getEuler+0x21c>)
 8013744:	edd3 7a00 	vldr	s15, [r3]
 8013748:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013770 <imuTest_getEuler+0x22c>
 801374c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013750:	4b03      	ldr	r3, [pc, #12]	; (8013760 <imuTest_getEuler+0x21c>)
 8013752:	edc3 7a00 	vstr	s15, [r3]
}
 8013756:	bf00      	nop
 8013758:	bdb0      	pop	{r4, r5, r7, pc}
 801375a:	bf00      	nop
 801375c:	20002de4 	.word	0x20002de4
 8013760:	20002db4 	.word	0x20002db4
 8013764:	20002dc0 	.word	0x20002dc0
 8013768:	20002dc4 	.word	0x20002dc4
 801376c:	42652ee0 	.word	0x42652ee0
 8013770:	43b40000 	.word	0x43b40000
 8013774:	00000000 	.word	0x00000000

08013778 <imuTest_begin>:
		lastPrint = millis();
	}
}

static bool imuTest_begin(void)
{
 8013778:	b590      	push	{r4, r7, lr}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
	imuActive = false;
 801377e:	4bc4      	ldr	r3, [pc, #784]	; (8013a90 <imuTest_begin+0x318>)
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]

	println("imuTest start!");
 8013784:	48c3      	ldr	r0, [pc, #780]	; (8013a94 <imuTest_begin+0x31c>)
 8013786:	f7ff fb2b 	bl	8012de0 <println>
	GyroMeasError = PI * (60.0f / 180.0f);
 801378a:	4bc3      	ldr	r3, [pc, #780]	; (8013a98 <imuTest_begin+0x320>)
 801378c:	4ac3      	ldr	r2, [pc, #780]	; (8013a9c <imuTest_begin+0x324>)
 801378e:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 8013790:	4bc1      	ldr	r3, [pc, #772]	; (8013a98 <imuTest_begin+0x320>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	4618      	mov	r0, r3
 8013796:	f7ec fee7 	bl	8000568 <__aeabi_f2d>
 801379a:	a3bb      	add	r3, pc, #748	; (adr r3, 8013a88 <imuTest_begin+0x310>)
 801379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a0:	f7ec ff3a 	bl	8000618 <__aeabi_dmul>
 80137a4:	4603      	mov	r3, r0
 80137a6:	460c      	mov	r4, r1
 80137a8:	4618      	mov	r0, r3
 80137aa:	4621      	mov	r1, r4
 80137ac:	f7ed fa2c 	bl	8000c08 <__aeabi_d2f>
 80137b0:	4602      	mov	r2, r0
 80137b2:	4bbb      	ldr	r3, [pc, #748]	; (8013aa0 <imuTest_begin+0x328>)
 80137b4:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 80137b6:	4bbb      	ldr	r3, [pc, #748]	; (8013aa4 <imuTest_begin+0x32c>)
 80137b8:	4abb      	ldr	r2, [pc, #748]	; (8013aa8 <imuTest_begin+0x330>)
 80137ba:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 80137bc:	4bb9      	ldr	r3, [pc, #740]	; (8013aa4 <imuTest_begin+0x32c>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7ec fed1 	bl	8000568 <__aeabi_f2d>
 80137c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8013a88 <imuTest_begin+0x310>)
 80137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137cc:	f7ec ff24 	bl	8000618 <__aeabi_dmul>
 80137d0:	4603      	mov	r3, r0
 80137d2:	460c      	mov	r4, r1
 80137d4:	4618      	mov	r0, r3
 80137d6:	4621      	mov	r1, r4
 80137d8:	f7ed fa16 	bl	8000c08 <__aeabi_d2f>
 80137dc:	4602      	mov	r2, r0
 80137de:	4bb3      	ldr	r3, [pc, #716]	; (8013aac <imuTest_begin+0x334>)
 80137e0:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 80137e2:	4bb3      	ldr	r3, [pc, #716]	; (8013ab0 <imuTest_begin+0x338>)
 80137e4:	2200      	movs	r2, #0
 80137e6:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 80137e8:	4bb2      	ldr	r3, [pc, #712]	; (8013ab4 <imuTest_begin+0x33c>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 80137ee:	4bb2      	ldr	r3, [pc, #712]	; (8013ab8 <imuTest_begin+0x340>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 80137f4:	4bb1      	ldr	r3, [pc, #708]	; (8013abc <imuTest_begin+0x344>)
 80137f6:	2206      	movs	r2, #6
 80137f8:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 80137fa:	4bb1      	ldr	r3, [pc, #708]	; (8013ac0 <imuTest_begin+0x348>)
 80137fc:	f04f 0200 	mov.w	r2, #0
 8013800:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8013802:	4baf      	ldr	r3, [pc, #700]	; (8013ac0 <imuTest_begin+0x348>)
 8013804:	f04f 0200 	mov.w	r2, #0
 8013808:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 801380a:	4bad      	ldr	r3, [pc, #692]	; (8013ac0 <imuTest_begin+0x348>)
 801380c:	f04f 0200 	mov.w	r2, #0
 8013810:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 8013812:	4bac      	ldr	r3, [pc, #688]	; (8013ac4 <imuTest_begin+0x34c>)
 8013814:	f04f 0200 	mov.w	r2, #0
 8013818:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 801381a:	4baa      	ldr	r3, [pc, #680]	; (8013ac4 <imuTest_begin+0x34c>)
 801381c:	f04f 0200 	mov.w	r2, #0
 8013820:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8013822:	4ba8      	ldr	r3, [pc, #672]	; (8013ac4 <imuTest_begin+0x34c>)
 8013824:	f04f 0200 	mov.w	r2, #0
 8013828:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 801382a:	4ba7      	ldr	r3, [pc, #668]	; (8013ac8 <imuTest_begin+0x350>)
 801382c:	2200      	movs	r2, #0
 801382e:	601a      	str	r2, [r3, #0]
	count = 0;
 8013830:	4ba6      	ldr	r3, [pc, #664]	; (8013acc <imuTest_begin+0x354>)
 8013832:	2200      	movs	r2, #0
 8013834:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8013836:	4ba6      	ldr	r3, [pc, #664]	; (8013ad0 <imuTest_begin+0x358>)
 8013838:	f04f 0200 	mov.w	r2, #0
 801383c:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 801383e:	4ba5      	ldr	r3, [pc, #660]	; (8013ad4 <imuTest_begin+0x35c>)
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8013844:	4ba4      	ldr	r3, [pc, #656]	; (8013ad8 <imuTest_begin+0x360>)
 8013846:	2200      	movs	r2, #0
 8013848:	601a      	str	r2, [r3, #0]
	Now = 0;
 801384a:	4ba4      	ldr	r3, [pc, #656]	; (8013adc <imuTest_begin+0x364>)
 801384c:	2200      	movs	r2, #0
 801384e:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8013850:	4ba3      	ldr	r3, [pc, #652]	; (8013ae0 <imuTest_begin+0x368>)
 8013852:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013856:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8013858:	4ba1      	ldr	r3, [pc, #644]	; (8013ae0 <imuTest_begin+0x368>)
 801385a:	f04f 0200 	mov.w	r2, #0
 801385e:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8013860:	4b9f      	ldr	r3, [pc, #636]	; (8013ae0 <imuTest_begin+0x368>)
 8013862:	f04f 0200 	mov.w	r2, #0
 8013866:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8013868:	4b9d      	ldr	r3, [pc, #628]	; (8013ae0 <imuTest_begin+0x368>)
 801386a:	f04f 0200 	mov.w	r2, #0
 801386e:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8013870:	4b9c      	ldr	r3, [pc, #624]	; (8013ae4 <imuTest_begin+0x36c>)
 8013872:	f04f 0200 	mov.w	r2, #0
 8013876:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8013878:	4b9a      	ldr	r3, [pc, #616]	; (8013ae4 <imuTest_begin+0x36c>)
 801387a:	f04f 0200 	mov.w	r2, #0
 801387e:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8013880:	4b98      	ldr	r3, [pc, #608]	; (8013ae4 <imuTest_begin+0x36c>)
 8013882:	f04f 0200 	mov.w	r2, #0
 8013886:	609a      	str	r2, [r3, #8]


	if (MPU_present())
 8013888:	f7f0 f87a 	bl	8003980 <MPU_present>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 8190 	beq.w	8013bb4 <imuTest_begin+0x43c>
	{
		HAL_Delay(1000);
 8013894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013898:	f7f2 fbcc 	bl	8006034 <HAL_Delay>
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 801389c:	4892      	ldr	r0, [pc, #584]	; (8013ae8 <imuTest_begin+0x370>)
 801389e:	f7f0 fc87 	bl	80041b0 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 80138a2:	4892      	ldr	r0, [pc, #584]	; (8013aec <imuTest_begin+0x374>)
 80138a4:	f7ff fa9c 	bl	8012de0 <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 80138a8:	4891      	ldr	r0, [pc, #580]	; (8013af0 <imuTest_begin+0x378>)
 80138aa:	f7ff fa8f 	bl	8012dcc <print>
 80138ae:	4b8e      	ldr	r3, [pc, #568]	; (8013ae8 <imuTest_begin+0x370>)
 80138b0:	edd3 7a00 	vldr	s15, [r3]
 80138b4:	eeb0 0a67 	vmov.f32	s0, s15
 80138b8:	f7ff faa7 	bl	8012e0a <print_float>
 80138bc:	488d      	ldr	r0, [pc, #564]	; (8013af4 <imuTest_begin+0x37c>)
 80138be:	f7ff fa8f 	bl	8012de0 <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 80138c2:	488d      	ldr	r0, [pc, #564]	; (8013af8 <imuTest_begin+0x380>)
 80138c4:	f7ff fa82 	bl	8012dcc <print>
 80138c8:	4b87      	ldr	r3, [pc, #540]	; (8013ae8 <imuTest_begin+0x370>)
 80138ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80138ce:	eeb0 0a67 	vmov.f32	s0, s15
 80138d2:	f7ff fa9a 	bl	8012e0a <print_float>
 80138d6:	4887      	ldr	r0, [pc, #540]	; (8013af4 <imuTest_begin+0x37c>)
 80138d8:	f7ff fa82 	bl	8012de0 <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 80138dc:	4887      	ldr	r0, [pc, #540]	; (8013afc <imuTest_begin+0x384>)
 80138de:	f7ff fa75 	bl	8012dcc <print>
 80138e2:	4b81      	ldr	r3, [pc, #516]	; (8013ae8 <imuTest_begin+0x370>)
 80138e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80138e8:	eeb0 0a67 	vmov.f32	s0, s15
 80138ec:	f7ff fa8d 	bl	8012e0a <print_float>
 80138f0:	4880      	ldr	r0, [pc, #512]	; (8013af4 <imuTest_begin+0x37c>)
 80138f2:	f7ff fa75 	bl	8012de0 <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 80138f6:	4882      	ldr	r0, [pc, #520]	; (8013b00 <imuTest_begin+0x388>)
 80138f8:	f7ff fa68 	bl	8012dcc <print>
 80138fc:	4b7a      	ldr	r3, [pc, #488]	; (8013ae8 <imuTest_begin+0x370>)
 80138fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8013902:	eeb0 0a67 	vmov.f32	s0, s15
 8013906:	f7ff fa80 	bl	8012e0a <print_float>
 801390a:	487a      	ldr	r0, [pc, #488]	; (8013af4 <imuTest_begin+0x37c>)
 801390c:	f7ff fa68 	bl	8012de0 <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 8013910:	487c      	ldr	r0, [pc, #496]	; (8013b04 <imuTest_begin+0x38c>)
 8013912:	f7ff fa5b 	bl	8012dcc <print>
 8013916:	4b74      	ldr	r3, [pc, #464]	; (8013ae8 <imuTest_begin+0x370>)
 8013918:	edd3 7a04 	vldr	s15, [r3, #16]
 801391c:	eeb0 0a67 	vmov.f32	s0, s15
 8013920:	f7ff fa73 	bl	8012e0a <print_float>
 8013924:	4873      	ldr	r0, [pc, #460]	; (8013af4 <imuTest_begin+0x37c>)
 8013926:	f7ff fa5b 	bl	8012de0 <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 801392a:	4877      	ldr	r0, [pc, #476]	; (8013b08 <imuTest_begin+0x390>)
 801392c:	f7ff fa4e 	bl	8012dcc <print>
 8013930:	4b6d      	ldr	r3, [pc, #436]	; (8013ae8 <imuTest_begin+0x370>)
 8013932:	edd3 7a05 	vldr	s15, [r3, #20]
 8013936:	eeb0 0a67 	vmov.f32	s0, s15
 801393a:	f7ff fa66 	bl	8012e0a <print_float>
 801393e:	486d      	ldr	r0, [pc, #436]	; (8013af4 <imuTest_begin+0x37c>)
 8013940:	f7ff fa4e 	bl	8012de0 <println>
		HAL_Delay(1000);
 8013944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013948:	f7f2 fb74 	bl	8006034 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 801394c:	f7ef ff54 	bl	80037f8 <MPU_getAres>
		MPU_getGres();
 8013950:	f7ef ff1e 	bl	8003790 <MPU_getGres>
		MPU_getMres();
 8013954:	f7ef fefe 	bl	8003754 <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 8013958:	486c      	ldr	r0, [pc, #432]	; (8013b0c <imuTest_begin+0x394>)
 801395a:	f7ff fa41 	bl	8012de0 <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 801395e:	496c      	ldr	r1, [pc, #432]	; (8013b10 <imuTest_begin+0x398>)
 8013960:	486c      	ldr	r0, [pc, #432]	; (8013b14 <imuTest_begin+0x39c>)
 8013962:	f7f0 f997 	bl	8003c94 <MPU_calibrate>
		println("accel biases (mg)");
 8013966:	486c      	ldr	r0, [pc, #432]	; (8013b18 <imuTest_begin+0x3a0>)
 8013968:	f7ff fa3a 	bl	8012de0 <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 801396c:	4b68      	ldr	r3, [pc, #416]	; (8013b10 <imuTest_begin+0x398>)
 801396e:	edd3 7a00 	vldr	s15, [r3]
 8013972:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8013b1c <imuTest_begin+0x3a4>
 8013976:	ee67 7a87 	vmul.f32	s15, s15, s14
 801397a:	eeb0 0a67 	vmov.f32	s0, s15
 801397e:	f7ff fa44 	bl	8012e0a <print_float>
 8013982:	4867      	ldr	r0, [pc, #412]	; (8013b20 <imuTest_begin+0x3a8>)
 8013984:	f7ff fa2c 	bl	8012de0 <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8013988:	4b61      	ldr	r3, [pc, #388]	; (8013b10 <imuTest_begin+0x398>)
 801398a:	edd3 7a01 	vldr	s15, [r3, #4]
 801398e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8013b1c <imuTest_begin+0x3a4>
 8013992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013996:	eeb0 0a67 	vmov.f32	s0, s15
 801399a:	f7ff fa36 	bl	8012e0a <print_float>
 801399e:	4860      	ldr	r0, [pc, #384]	; (8013b20 <imuTest_begin+0x3a8>)
 80139a0:	f7ff fa1e 	bl	8012de0 <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 80139a4:	4b5a      	ldr	r3, [pc, #360]	; (8013b10 <imuTest_begin+0x398>)
 80139a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80139aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8013b1c <imuTest_begin+0x3a4>
 80139ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139b2:	eeb0 0a67 	vmov.f32	s0, s15
 80139b6:	f7ff fa28 	bl	8012e0a <print_float>
 80139ba:	4859      	ldr	r0, [pc, #356]	; (8013b20 <imuTest_begin+0x3a8>)
 80139bc:	f7ff fa10 	bl	8012de0 <println>
		println("gyro biases (dps)");
 80139c0:	4858      	ldr	r0, [pc, #352]	; (8013b24 <imuTest_begin+0x3ac>)
 80139c2:	f7ff fa0d 	bl	8012de0 <println>
		print_float(MPU9250gyroBias[0]); println("");
 80139c6:	4b53      	ldr	r3, [pc, #332]	; (8013b14 <imuTest_begin+0x39c>)
 80139c8:	edd3 7a00 	vldr	s15, [r3]
 80139cc:	eeb0 0a67 	vmov.f32	s0, s15
 80139d0:	f7ff fa1b 	bl	8012e0a <print_float>
 80139d4:	4852      	ldr	r0, [pc, #328]	; (8013b20 <imuTest_begin+0x3a8>)
 80139d6:	f7ff fa03 	bl	8012de0 <println>
		print_float(MPU9250gyroBias[1]); println("");
 80139da:	4b4e      	ldr	r3, [pc, #312]	; (8013b14 <imuTest_begin+0x39c>)
 80139dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80139e0:	eeb0 0a67 	vmov.f32	s0, s15
 80139e4:	f7ff fa11 	bl	8012e0a <print_float>
 80139e8:	484d      	ldr	r0, [pc, #308]	; (8013b20 <imuTest_begin+0x3a8>)
 80139ea:	f7ff f9f9 	bl	8012de0 <println>
		print_float(MPU9250gyroBias[2]); println("");
 80139ee:	4b49      	ldr	r3, [pc, #292]	; (8013b14 <imuTest_begin+0x39c>)
 80139f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80139f4:	eeb0 0a67 	vmov.f32	s0, s15
 80139f8:	f7ff fa07 	bl	8012e0a <print_float>
 80139fc:	4848      	ldr	r0, [pc, #288]	; (8013b20 <imuTest_begin+0x3a8>)
 80139fe:	f7ff f9ef 	bl	8012de0 <println>

		HAL_Delay(1000);
 8013a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013a06:	f7f2 fb15 	bl	8006034 <HAL_Delay>

		MPU_init();
 8013a0a:	f7ef ffdb 	bl	80039c4 <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 8013a0e:	4846      	ldr	r0, [pc, #280]	; (8013b28 <imuTest_begin+0x3b0>)
 8013a10:	f7ff f9e6 	bl	8012de0 <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 8013a14:	2100      	movs	r1, #0
 8013a16:	2018      	movs	r0, #24
 8013a18:	f7ef fe47 	bl	80036aa <MPU_readByte>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 8013a20:	79fb      	ldrb	r3, [r7, #7]
 8013a22:	2b48      	cmp	r3, #72	; 0x48
 8013a24:	d102      	bne.n	8013a2c <imuTest_begin+0x2b4>
 8013a26:	4841      	ldr	r0, [pc, #260]	; (8013b2c <imuTest_begin+0x3b4>)
 8013a28:	f7ff f9da 	bl	8012de0 <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	2180      	movs	r1, #128	; 0x80
 8013a30:	483f      	ldr	r0, [pc, #252]	; (8013b30 <imuTest_begin+0x3b8>)
 8013a32:	f7f3 f97d 	bl	8006d30 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8013a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013a3a:	f7f2 fafb 	bl	8006034 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 8013a3e:	4820      	ldr	r0, [pc, #128]	; (8013ac0 <imuTest_begin+0x348>)
 8013a40:	f7f0 f8a8 	bl	8003b94 <AK8963_init>
 8013a44:	483b      	ldr	r0, [pc, #236]	; (8013b34 <imuTest_begin+0x3bc>)
 8013a46:	f7ff f9cb 	bl	8012de0 <println>

		MPU_calibrateMag(MPU9250magBias);
 8013a4a:	483b      	ldr	r0, [pc, #236]	; (8013b38 <imuTest_begin+0x3c0>)
 8013a4c:	f7f0 ff56 	bl	80048fc <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 8013a50:	483a      	ldr	r0, [pc, #232]	; (8013b3c <imuTest_begin+0x3c4>)
 8013a52:	f7ff f9c5 	bl	8012de0 <println>
		print_float(MPU9250magBias[0]); println("");
 8013a56:	4b38      	ldr	r3, [pc, #224]	; (8013b38 <imuTest_begin+0x3c0>)
 8013a58:	edd3 7a00 	vldr	s15, [r3]
 8013a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8013a60:	f7ff f9d3 	bl	8012e0a <print_float>
 8013a64:	482e      	ldr	r0, [pc, #184]	; (8013b20 <imuTest_begin+0x3a8>)
 8013a66:	f7ff f9bb 	bl	8012de0 <println>
		print_float(MPU9250magBias[1]); println("");
 8013a6a:	4b33      	ldr	r3, [pc, #204]	; (8013b38 <imuTest_begin+0x3c0>)
 8013a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013a70:	eeb0 0a67 	vmov.f32	s0, s15
 8013a74:	f7ff f9c9 	bl	8012e0a <print_float>
 8013a78:	4829      	ldr	r0, [pc, #164]	; (8013b20 <imuTest_begin+0x3a8>)
 8013a7a:	f7ff f9b1 	bl	8012de0 <println>
		print_float(MPU9250magBias[2]); println("");
 8013a7e:	4b2e      	ldr	r3, [pc, #184]	; (8013b38 <imuTest_begin+0x3c0>)
 8013a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8013a84:	e05c      	b.n	8013b40 <imuTest_begin+0x3c8>
 8013a86:	bf00      	nop
 8013a88:	e8584caa 	.word	0xe8584caa
 8013a8c:	3febb67a 	.word	0x3febb67a
 8013a90:	20002cde 	.word	0x20002cde
 8013a94:	0801be08 	.word	0x0801be08
 8013a98:	20002d64 	.word	0x20002d64
 8013a9c:	3f860a92 	.word	0x3f860a92
 8013aa0:	20002d98 	.word	0x20002d98
 8013aa4:	20002cec 	.word	0x20002cec
 8013aa8:	3c8efa36 	.word	0x3c8efa36
 8013aac:	20002e10 	.word	0x20002e10
 8013ab0:	20002d18 	.word	0x20002d18
 8013ab4:	20002cdf 	.word	0x20002cdf
 8013ab8:	20002d68 	.word	0x20002d68
 8013abc:	20002d40 	.word	0x20002d40
 8013ac0:	20002df8 	.word	0x20002df8
 8013ac4:	20002d44 	.word	0x20002d44
 8013ac8:	20002d90 	.word	0x20002d90
 8013acc:	20002d88 	.word	0x20002d88
 8013ad0:	20002dcc 	.word	0x20002dcc
 8013ad4:	20002d24 	.word	0x20002d24
 8013ad8:	20002dd4 	.word	0x20002dd4
 8013adc:	20002d54 	.word	0x20002d54
 8013ae0:	20002de4 	.word	0x20002de4
 8013ae4:	20002d34 	.word	0x20002d34
 8013ae8:	20002cf0 	.word	0x20002cf0
 8013aec:	0801be18 	.word	0x0801be18
 8013af0:	0801be2c 	.word	0x0801be2c
 8013af4:	0801be5c 	.word	0x0801be5c
 8013af8:	0801be70 	.word	0x0801be70
 8013afc:	0801bea0 	.word	0x0801bea0
 8013b00:	0801bed0 	.word	0x0801bed0
 8013b04:	0801befc 	.word	0x0801befc
 8013b08:	0801bf28 	.word	0x0801bf28
 8013b0c:	0801bf54 	.word	0x0801bf54
 8013b10:	20002ce0 	.word	0x20002ce0
 8013b14:	20002da8 	.word	0x20002da8
 8013b18:	0801bf78 	.word	0x0801bf78
 8013b1c:	447a0000 	.word	0x447a0000
 8013b20:	0801bcf8 	.word	0x0801bcf8
 8013b24:	0801bf8c 	.word	0x0801bf8c
 8013b28:	0801bfa0 	.word	0x0801bfa0
 8013b2c:	0801bfd0 	.word	0x0801bfd0
 8013b30:	40020800 	.word	0x40020800
 8013b34:	0801bfe4 	.word	0x0801bfe4
 8013b38:	20002d70 	.word	0x20002d70
 8013b3c:	0801c010 	.word	0x0801c010
 8013b40:	eeb0 0a67 	vmov.f32	s0, s15
 8013b44:	f7ff f961 	bl	8012e0a <print_float>
 8013b48:	481d      	ldr	r0, [pc, #116]	; (8013bc0 <imuTest_begin+0x448>)
 8013b4a:	f7ff f949 	bl	8012de0 <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 8013b4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8013b52:	f7f2 fa6f 	bl	8006034 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 8013b56:	481b      	ldr	r0, [pc, #108]	; (8013bc4 <imuTest_begin+0x44c>)
 8013b58:	f7ff f938 	bl	8012dcc <print>
 8013b5c:	4b1a      	ldr	r3, [pc, #104]	; (8013bc8 <imuTest_begin+0x450>)
 8013b5e:	edd3 7a00 	vldr	s15, [r3]
 8013b62:	eeb0 0a67 	vmov.f32	s0, s15
 8013b66:	f7ff f950 	bl	8012e0a <print_float>
 8013b6a:	4815      	ldr	r0, [pc, #84]	; (8013bc0 <imuTest_begin+0x448>)
 8013b6c:	f7ff f938 	bl	8012de0 <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 8013b70:	4816      	ldr	r0, [pc, #88]	; (8013bcc <imuTest_begin+0x454>)
 8013b72:	f7ff f92b 	bl	8012dcc <print>
 8013b76:	4b14      	ldr	r3, [pc, #80]	; (8013bc8 <imuTest_begin+0x450>)
 8013b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8013b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b80:	f7ff f943 	bl	8012e0a <print_float>
 8013b84:	480e      	ldr	r0, [pc, #56]	; (8013bc0 <imuTest_begin+0x448>)
 8013b86:	f7ff f92b 	bl	8012de0 <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 8013b8a:	4811      	ldr	r0, [pc, #68]	; (8013bd0 <imuTest_begin+0x458>)
 8013b8c:	f7ff f91e 	bl	8012dcc <print>
 8013b90:	4b0d      	ldr	r3, [pc, #52]	; (8013bc8 <imuTest_begin+0x450>)
 8013b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b96:	eeb0 0a67 	vmov.f32	s0, s15
 8013b9a:	f7ff f936 	bl	8012e0a <print_float>
 8013b9e:	4808      	ldr	r0, [pc, #32]	; (8013bc0 <imuTest_begin+0x448>)
 8013ba0:	f7ff f91e 	bl	8012de0 <println>


		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	2180      	movs	r1, #128	; 0x80
 8013ba8:	480a      	ldr	r0, [pc, #40]	; (8013bd4 <imuTest_begin+0x45c>)
 8013baa:	f7f3 f8c1 	bl	8006d30 <HAL_GPIO_WritePin>
		imuActive = true;
 8013bae:	4b0a      	ldr	r3, [pc, #40]	; (8013bd8 <imuTest_begin+0x460>)
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	701a      	strb	r2, [r3, #0]
	}
}
 8013bb4:	bf00      	nop
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	370c      	adds	r7, #12
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd90      	pop	{r4, r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	0801bcf8 	.word	0x0801bcf8
 8013bc4:	0801c028 	.word	0x0801c028
 8013bc8:	20002df8 	.word	0x20002df8
 8013bcc:	0801c054 	.word	0x0801c054
 8013bd0:	0801c080 	.word	0x0801c080
 8013bd4:	40020800 	.word	0x40020800
 8013bd8:	20002cde 	.word	0x20002cde

08013bdc <sensing_begin>:
uint32_t lastImuLog;
// IMU
// (SPS)

static bool sensing_begin(void)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 8013be6:	f000 ffdd 	bl	8014ba4 <Get_UART3_Instance>
 8013bea:	4602      	mov	r2, r0
 8013bec:	4b43      	ldr	r3, [pc, #268]	; (8013cfc <sensing_begin+0x120>)
 8013bee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 8013bf2:	e010      	b.n	8013c16 <sensing_begin+0x3a>
	{
		HAL_Delay(500);
 8013bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013bf8:	f7f2 fa1c 	bl	8006034 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 8013bfc:	4840      	ldr	r0, [pc, #256]	; (8013d00 <sensing_begin+0x124>)
 8013bfe:	f7ff f8ef 	bl	8012de0 <println>
		attempts++;
 8013c02:	79fb      	ldrb	r3, [r7, #7]
 8013c04:	3301      	adds	r3, #1
 8013c06:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8013c08:	79fb      	ldrb	r3, [r7, #7]
 8013c0a:	2b04      	cmp	r3, #4
 8013c0c:	d903      	bls.n	8013c16 <sensing_begin+0x3a>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8013c0e:	483d      	ldr	r0, [pc, #244]	; (8013d04 <sensing_begin+0x128>)
 8013c10:	f7ff f8e6 	bl	8012de0 <println>
			break;
 8013c14:	e008      	b.n	8013c28 <sensing_begin+0x4c>
	while (!GPS_init(&gps))
 8013c16:	4839      	ldr	r0, [pc, #228]	; (8013cfc <sensing_begin+0x120>)
 8013c18:	f7ee fc14 	bl	8002444 <GPS_init>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	f083 0301 	eor.w	r3, r3, #1
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1e5      	bne.n	8013bf4 <sensing_begin+0x18>
		}
	}

	attempts = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 8013c2c:	4b36      	ldr	r3, [pc, #216]	; (8013d08 <sensing_begin+0x12c>)
 8013c2e:	4a37      	ldr	r2, [pc, #220]	; (8013d0c <sensing_begin+0x130>)
 8013c30:	3307      	adds	r3, #7
 8013c32:	6810      	ldr	r0, [r2, #0]
 8013c34:	6018      	str	r0, [r3, #0]
 8013c36:	7912      	ldrb	r2, [r2, #4]
 8013c38:	711a      	strb	r2, [r3, #4]
	bmp.addr = BMP280_I2C_ADDRESS_0;
 8013c3a:	4b33      	ldr	r3, [pc, #204]	; (8013d08 <sensing_begin+0x12c>)
 8013c3c:	2276      	movs	r2, #118	; 0x76
 8013c3e:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 8013c40:	f000 ff9c 	bl	8014b7c <Get_I2C1_Instance>
 8013c44:	4602      	mov	r2, r0
 8013c46:	4b30      	ldr	r3, [pc, #192]	; (8013d08 <sensing_begin+0x12c>)
 8013c48:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 8013c4a:	e010      	b.n	8013c6e <sensing_begin+0x92>
	{
		HAL_Delay(500);
 8013c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013c50:	f7f2 f9f0 	bl	8006034 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 8013c54:	482e      	ldr	r0, [pc, #184]	; (8013d10 <sensing_begin+0x134>)
 8013c56:	f7ff f8c3 	bl	8012de0 <println>
		attempts++;
 8013c5a:	79fb      	ldrb	r3, [r7, #7]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8013c60:	79fb      	ldrb	r3, [r7, #7]
 8013c62:	2b04      	cmp	r3, #4
 8013c64:	d903      	bls.n	8013c6e <sensing_begin+0x92>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8013c66:	482b      	ldr	r0, [pc, #172]	; (8013d14 <sensing_begin+0x138>)
 8013c68:	f7ff f8ba 	bl	8012de0 <println>
			break;
 8013c6c:	e009      	b.n	8013c82 <sensing_begin+0xa6>
	while (!bmp280_init(&bmp, &bmp.params))
 8013c6e:	492a      	ldr	r1, [pc, #168]	; (8013d18 <sensing_begin+0x13c>)
 8013c70:	4825      	ldr	r0, [pc, #148]	; (8013d08 <sensing_begin+0x12c>)
 8013c72:	f7ee f841 	bl	8001cf8 <bmp280_init>
 8013c76:	4603      	mov	r3, r0
 8013c78:	f083 0301 	eor.w	r3, r3, #1
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1e4      	bne.n	8013c4c <sensing_begin+0x70>
		}
	}

	if (imuTest_begin()) println("[IMU] Init successful!");
 8013c82:	f7ff fd79 	bl	8013778 <imuTest_begin>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d002      	beq.n	8013c92 <sensing_begin+0xb6>
 8013c8c:	4823      	ldr	r0, [pc, #140]	; (8013d1c <sensing_begin+0x140>)
 8013c8e:	f7ff f8a7 	bl	8012de0 <println>

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 8013c92:	4823      	ldr	r0, [pc, #140]	; (8013d20 <sensing_begin+0x144>)
 8013c94:	f7ff f8a4 	bl	8012de0 <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 8013c98:	4822      	ldr	r0, [pc, #136]	; (8013d24 <sensing_begin+0x148>)
 8013c9a:	f7ff f897 	bl	8012dcc <print>
 8013c9e:	4b17      	ldr	r3, [pc, #92]	; (8013cfc <sensing_begin+0x120>)
 8013ca0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <sensing_begin+0xd4>
 8013ca8:	481f      	ldr	r0, [pc, #124]	; (8013d28 <sensing_begin+0x14c>)
 8013caa:	f7ff f899 	bl	8012de0 <println>
 8013cae:	e002      	b.n	8013cb6 <sensing_begin+0xda>
 8013cb0:	481e      	ldr	r0, [pc, #120]	; (8013d2c <sensing_begin+0x150>)
 8013cb2:	f7ff f895 	bl	8012de0 <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 8013cb6:	481e      	ldr	r0, [pc, #120]	; (8013d30 <sensing_begin+0x154>)
 8013cb8:	f7ff f888 	bl	8012dcc <print>
 8013cbc:	4b12      	ldr	r3, [pc, #72]	; (8013d08 <sensing_begin+0x12c>)
 8013cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d003      	beq.n	8013cce <sensing_begin+0xf2>
 8013cc6:	4818      	ldr	r0, [pc, #96]	; (8013d28 <sensing_begin+0x14c>)
 8013cc8:	f7ff f88a 	bl	8012de0 <println>
 8013ccc:	e002      	b.n	8013cd4 <sensing_begin+0xf8>
 8013cce:	4817      	ldr	r0, [pc, #92]	; (8013d2c <sensing_begin+0x150>)
 8013cd0:	f7ff f886 	bl	8012de0 <println>
		print("IMU - "); imuActive ? println("active") : println("not active");
 8013cd4:	4817      	ldr	r0, [pc, #92]	; (8013d34 <sensing_begin+0x158>)
 8013cd6:	f7ff f879 	bl	8012dcc <print>
 8013cda:	4b17      	ldr	r3, [pc, #92]	; (8013d38 <sensing_begin+0x15c>)
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d003      	beq.n	8013cea <sensing_begin+0x10e>
 8013ce2:	4811      	ldr	r0, [pc, #68]	; (8013d28 <sensing_begin+0x14c>)
 8013ce4:	f7ff f87c 	bl	8012de0 <println>
 8013ce8:	e002      	b.n	8013cf0 <sensing_begin+0x114>
 8013cea:	4810      	ldr	r0, [pc, #64]	; (8013d2c <sensing_begin+0x150>)
 8013cec:	f7ff f878 	bl	8012de0 <println>
	}
}
 8013cf0:	bf00      	nop
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3708      	adds	r7, #8
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20002aa8 	.word	0x20002aa8
 8013d00:	0801c0ac 	.word	0x0801c0ac
 8013d04:	0801c0d4 	.word	0x0801c0d4
 8013d08:	2000365c 	.word	0x2000365c
 8013d0c:	2000011c 	.word	0x2000011c
 8013d10:	0801c100 	.word	0x0801c100
 8013d14:	0801c128 	.word	0x0801c128
 8013d18:	20003663 	.word	0x20003663
 8013d1c:	0801c154 	.word	0x0801c154
 8013d20:	0801c16c 	.word	0x0801c16c
 8013d24:	0801c184 	.word	0x0801c184
 8013d28:	0801c18c 	.word	0x0801c18c
 8013d2c:	0801c194 	.word	0x0801c194
 8013d30:	0801c1a0 	.word	0x0801c1a0
 8013d34:	0801c1a8 	.word	0x0801c1a8
 8013d38:	20002cde 	.word	0x20002cde

08013d3c <sensing_loop>:

static void sensing_loop(void)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
	if (gps.active)
 8013d42:	4b59      	ldr	r3, [pc, #356]	; (8013ea8 <sensing_loop+0x16c>)
 8013d44:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d018      	beq.n	8013d7e <sensing_loop+0x42>
	{
		GPS_read(&gps);
 8013d4c:	4856      	ldr	r0, [pc, #344]	; (8013ea8 <sensing_loop+0x16c>)
 8013d4e:	f7ee fae1 	bl	8002314 <GPS_read>
		if (GPS_newNMEAreceived(&gps))
 8013d52:	4855      	ldr	r0, [pc, #340]	; (8013ea8 <sensing_loop+0x16c>)
 8013d54:	f7ef fc49 	bl	80035ea <GPS_newNMEAreceived>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d00f      	beq.n	8013d7e <sensing_loop+0x42>
		{
			//println(GPS_lastNMEA(&gps));
			if (gps.fix) log_gps(&gps);
 8013d5e:	4b52      	ldr	r3, [pc, #328]	; (8013ea8 <sensing_loop+0x16c>)
 8013d60:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <sensing_loop+0x32>
 8013d68:	484f      	ldr	r0, [pc, #316]	; (8013ea8 <sensing_loop+0x16c>)
 8013d6a:	f7f1 fff9 	bl	8005d60 <log_gps>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 8013d6e:	484e      	ldr	r0, [pc, #312]	; (8013ea8 <sensing_loop+0x16c>)
 8013d70:	f7ef fc49 	bl	8003606 <GPS_lastNMEA>
 8013d74:	4603      	mov	r3, r0
 8013d76:	4619      	mov	r1, r3
 8013d78:	484b      	ldr	r0, [pc, #300]	; (8013ea8 <sensing_loop+0x16c>)
 8013d7a:	f7ee fced 	bl	8002758 <GPS_parse>
		}
	}

	if (bmp.active)
 8013d7e:	4b4b      	ldr	r3, [pc, #300]	; (8013eac <sensing_loop+0x170>)
 8013d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d012      	beq.n	8013dae <sensing_loop+0x72>
	{
		bmp280_update(&bmp);
 8013d88:	4848      	ldr	r0, [pc, #288]	; (8013eac <sensing_loop+0x170>)
 8013d8a:	f7ee faa1 	bl	80022d0 <bmp280_update>
		if (millis() - lastBmpLog >= 100)
 8013d8e:	f7ff f851 	bl	8012e34 <millis>
 8013d92:	4602      	mov	r2, r0
 8013d94:	4b46      	ldr	r3, [pc, #280]	; (8013eb0 <sensing_loop+0x174>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	2b63      	cmp	r3, #99	; 0x63
 8013d9c:	d907      	bls.n	8013dae <sensing_loop+0x72>
		{
			log_bmp(&bmp);
 8013d9e:	4843      	ldr	r0, [pc, #268]	; (8013eac <sensing_loop+0x170>)
 8013da0:	f7f1 ff92 	bl	8005cc8 <log_bmp>
			lastBmpLog = millis();
 8013da4:	f7ff f846 	bl	8012e34 <millis>
 8013da8:	4602      	mov	r2, r0
 8013daa:	4b41      	ldr	r3, [pc, #260]	; (8013eb0 <sensing_loop+0x174>)
 8013dac:	601a      	str	r2, [r3, #0]
		}
	}

	if (imuActive)
 8013dae:	4b41      	ldr	r3, [pc, #260]	; (8013eb4 <sensing_loop+0x178>)
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d01f      	beq.n	8013df6 <sensing_loop+0xba>
	{
		imuTest_getData();		// get data from IMU
 8013db6:	f7ff fa23 	bl	8013200 <imuTest_getData>
		imuTest_quatUpdate();	// compute data received
 8013dba:	f7ff fb13 	bl	80133e4 <imuTest_quatUpdate>

		if (millis() - lastImuLog >= 100)
 8013dbe:	f7ff f839 	bl	8012e34 <millis>
 8013dc2:	4602      	mov	r2, r0
 8013dc4:	4b3c      	ldr	r3, [pc, #240]	; (8013eb8 <sensing_loop+0x17c>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	2b63      	cmp	r3, #99	; 0x63
 8013dcc:	d913      	bls.n	8013df6 <sensing_loop+0xba>
		{
			imuTest_getEuler();
 8013dce:	f7ff fbb9 	bl	8013544 <imuTest_getEuler>
			float eulers[3] = {yaw, pitch, roll};
 8013dd2:	4b3a      	ldr	r3, [pc, #232]	; (8013ebc <sensing_loop+0x180>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	607b      	str	r3, [r7, #4]
 8013dd8:	4b39      	ldr	r3, [pc, #228]	; (8013ec0 <sensing_loop+0x184>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	60bb      	str	r3, [r7, #8]
 8013dde:	4b39      	ldr	r3, [pc, #228]	; (8013ec4 <sensing_loop+0x188>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	60fb      	str	r3, [r7, #12]
			log_imu(eulers);
 8013de4:	1d3b      	adds	r3, r7, #4
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7f2 f806 	bl	8005df8 <log_imu>
			lastImuLog = millis();
 8013dec:	f7ff f822 	bl	8012e34 <millis>
 8013df0:	4602      	mov	r2, r0
 8013df2:	4b31      	ldr	r3, [pc, #196]	; (8013eb8 <sensing_loop+0x17c>)
 8013df4:	601a      	str	r2, [r3, #0]
		}

	}

	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8013df6:	f7ff f81d 	bl	8012e34 <millis>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	4b32      	ldr	r3, [pc, #200]	; (8013ec8 <sensing_loop+0x18c>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013e06:	d34b      	bcc.n	8013ea0 <sensing_loop+0x164>
	{
		if (bmp.active)
 8013e08:	4b28      	ldr	r3, [pc, #160]	; (8013eac <sensing_loop+0x170>)
 8013e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d019      	beq.n	8013e46 <sensing_loop+0x10a>
		{
			print("Pressure: "); print_float(bmp.pressure); println("");
 8013e12:	482e      	ldr	r0, [pc, #184]	; (8013ecc <sensing_loop+0x190>)
 8013e14:	f7fe ffda 	bl	8012dcc <print>
 8013e18:	4b24      	ldr	r3, [pc, #144]	; (8013eac <sensing_loop+0x170>)
 8013e1a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8013e22:	f7fe fff2 	bl	8012e0a <print_float>
 8013e26:	482a      	ldr	r0, [pc, #168]	; (8013ed0 <sensing_loop+0x194>)
 8013e28:	f7fe ffda 	bl	8012de0 <println>
			print("Temperature: "); print_float(bmp.temperature); println("");
 8013e2c:	4829      	ldr	r0, [pc, #164]	; (8013ed4 <sensing_loop+0x198>)
 8013e2e:	f7fe ffcd 	bl	8012dcc <print>
 8013e32:	4b1e      	ldr	r3, [pc, #120]	; (8013eac <sensing_loop+0x170>)
 8013e34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8013e38:	eeb0 0a67 	vmov.f32	s0, s15
 8013e3c:	f7fe ffe5 	bl	8012e0a <print_float>
 8013e40:	4823      	ldr	r0, [pc, #140]	; (8013ed0 <sensing_loop+0x194>)
 8013e42:	f7fe ffcd 	bl	8012de0 <println>
		}
		if (gps.active)
 8013e46:	4b18      	ldr	r3, [pc, #96]	; (8013ea8 <sensing_loop+0x16c>)
 8013e48:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d022      	beq.n	8013e96 <sensing_loop+0x15a>
		{
			if (gps.fix)
 8013e50:	4b15      	ldr	r3, [pc, #84]	; (8013ea8 <sensing_loop+0x16c>)
 8013e52:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d01a      	beq.n	8013e90 <sensing_loop+0x154>
			{
				print("Latitude: "); print_float(gps.latitudeDegrees); println("");
 8013e5a:	481f      	ldr	r0, [pc, #124]	; (8013ed8 <sensing_loop+0x19c>)
 8013e5c:	f7fe ffb6 	bl	8012dcc <print>
 8013e60:	4b11      	ldr	r3, [pc, #68]	; (8013ea8 <sensing_loop+0x16c>)
 8013e62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8013e66:	eeb0 0a67 	vmov.f32	s0, s15
 8013e6a:	f7fe ffce 	bl	8012e0a <print_float>
 8013e6e:	4818      	ldr	r0, [pc, #96]	; (8013ed0 <sensing_loop+0x194>)
 8013e70:	f7fe ffb6 	bl	8012de0 <println>
				print("Longitude: "); print_float(gps.longitudeDegrees); println("");
 8013e74:	4819      	ldr	r0, [pc, #100]	; (8013edc <sensing_loop+0x1a0>)
 8013e76:	f7fe ffa9 	bl	8012dcc <print>
 8013e7a:	4b0b      	ldr	r3, [pc, #44]	; (8013ea8 <sensing_loop+0x16c>)
 8013e7c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8013e80:	eeb0 0a67 	vmov.f32	s0, s15
 8013e84:	f7fe ffc1 	bl	8012e0a <print_float>
 8013e88:	4811      	ldr	r0, [pc, #68]	; (8013ed0 <sensing_loop+0x194>)
 8013e8a:	f7fe ffa9 	bl	8012de0 <println>
 8013e8e:	e002      	b.n	8013e96 <sensing_loop+0x15a>
			}
			else println("GPS has no fix!");
 8013e90:	4813      	ldr	r0, [pc, #76]	; (8013ee0 <sensing_loop+0x1a4>)
 8013e92:	f7fe ffa5 	bl	8012de0 <println>
		}
		lastDataPrint = millis();
 8013e96:	f7fe ffcd 	bl	8012e34 <millis>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <sensing_loop+0x18c>)
 8013e9e:	601a      	str	r2, [r3, #0]
	}
}
 8013ea0:	bf00      	nop
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20002aa8 	.word	0x20002aa8
 8013eac:	2000365c 	.word	0x2000365c
 8013eb0:	20004aec 	.word	0x20004aec
 8013eb4:	20002cde 	.word	0x20002cde
 8013eb8:	20003a94 	.word	0x20003a94
 8013ebc:	20002db4 	.word	0x20002db4
 8013ec0:	20002dc0 	.word	0x20002dc0
 8013ec4:	20002dc4 	.word	0x20002dc4
 8013ec8:	200046e8 	.word	0x200046e8
 8013ecc:	0801c1b0 	.word	0x0801c1b0
 8013ed0:	0801bcf8 	.word	0x0801bcf8
 8013ed4:	0801c1bc 	.word	0x0801c1bc
 8013ed8:	0801c1cc 	.word	0x0801c1cc
 8013edc:	0801c1d8 	.word	0x0801c1d8
 8013ee0:	0801c1e4 	.word	0x0801c1e4
 8013ee4:	00000000 	.word	0x00000000

08013ee8 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 8013ee8:	b5b0      	push	{r4, r5, r7, lr}
 8013eea:	ed2d 8b02 	vpush	{d8}
 8013eee:	b08c      	sub	sp, #48	; 0x30
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8013ef6:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.8;	// scale of motor power
 8013efa:	4b95      	ldr	r3, [pc, #596]	; (8014150 <algoGalgo+0x268>)
 8013efc:	627b      	str	r3, [r7, #36]	; 0x24
	float TurboMode= 50.0;
 8013efe:	4b95      	ldr	r3, [pc, #596]	; (8014154 <algoGalgo+0x26c>)
 8013f00:	623b      	str	r3, [r7, #32]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 8013f02:	ed97 7a00 	vldr	s14, [r7]
 8013f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust = 180.0+TurboMode;
 8013f12:	edd7 7a08 	vldr	s15, [r7, #32]
 8013f16:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8014158 <algoGalgo+0x270>
 8013f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f1e:	edc7 7a07 	vstr	s15, [r7, #28]

	if (error<-180.0)
 8013f22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013f26:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801415c <algoGalgo+0x274>
 8013f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f32:	d50c      	bpl.n	8013f4e <algoGalgo+0x66>
		error = target_yaw-yaw+360.0;
 8013f34:	ed97 7a00 	vldr	s14, [r7]
 8013f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f40:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8014160 <algoGalgo+0x278>
 8013f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8013f4c:	e014      	b.n	8013f78 <algoGalgo+0x90>
	else if (error>180.0)
 8013f4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013f52:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8014158 <algoGalgo+0x270>
 8013f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5e:	dd0b      	ble.n	8013f78 <algoGalgo+0x90>
		error = target_yaw-yaw-360.0;
 8013f60:	ed97 7a00 	vldr	s14, [r7]
 8013f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f6c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8014160 <algoGalgo+0x278>
 8013f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 8013f78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013f7c:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 8013f7e:	4b79      	ldr	r3, [pc, #484]	; (8014164 <algoGalgo+0x27c>)
 8013f80:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 8013f82:	ed97 7a06 	vldr	s14, [r7, #24]
 8013f86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8e:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 8013f92:	4b75      	ldr	r3, [pc, #468]	; (8014168 <algoGalgo+0x280>)
 8013f94:	edd3 7a00 	vldr	s15, [r3]
 8013f98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8013f9c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8013fa0:	f7fe ff48 	bl	8012e34 <millis>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	4b71      	ldr	r3, [pc, #452]	; (801416c <algoGalgo+0x284>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	ee07 3a90 	vmov	s15, r3
 8013fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013fb4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8013fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fc0:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 8013fc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8013fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8013fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if (PID>180.0-TurboMode)
 8013fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fd6:	f7ec fac7 	bl	8000568 <__aeabi_f2d>
 8013fda:	4604      	mov	r4, r0
 8013fdc:	460d      	mov	r5, r1
 8013fde:	6a38      	ldr	r0, [r7, #32]
 8013fe0:	f7ec fac2 	bl	8000568 <__aeabi_f2d>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	f04f 0000 	mov.w	r0, #0
 8013fec:	4960      	ldr	r1, [pc, #384]	; (8014170 <algoGalgo+0x288>)
 8013fee:	f7ec f95b 	bl	80002a8 <__aeabi_dsub>
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	f7ec fd9d 	bl	8000b38 <__aeabi_dcmpgt>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d008      	beq.n	8014016 <algoGalgo+0x12e>
			PID=180.0-TurboMode;
 8014004:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014158 <algoGalgo+0x270>
 8014008:	edd7 7a08 	vldr	s15, [r7, #32]
 801400c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014010:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8014014:	e01d      	b.n	8014052 <algoGalgo+0x16a>
		else if (PID<-180.0+TurboMode)
 8014016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014018:	f7ec faa6 	bl	8000568 <__aeabi_f2d>
 801401c:	4604      	mov	r4, r0
 801401e:	460d      	mov	r5, r1
 8014020:	6a38      	ldr	r0, [r7, #32]
 8014022:	f7ec faa1 	bl	8000568 <__aeabi_f2d>
 8014026:	f04f 0200 	mov.w	r2, #0
 801402a:	4b51      	ldr	r3, [pc, #324]	; (8014170 <algoGalgo+0x288>)
 801402c:	f7ec f93c 	bl	80002a8 <__aeabi_dsub>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4620      	mov	r0, r4
 8014036:	4629      	mov	r1, r5
 8014038:	f7ec fd60 	bl	8000afc <__aeabi_dcmplt>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d007      	beq.n	8014052 <algoGalgo+0x16a>
			PID=-180.0+TurboMode;
 8014042:	edd7 7a08 	vldr	s15, [r7, #32]
 8014046:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014158 <algoGalgo+0x270>
 801404a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801404e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 8014052:	ed97 7a07 	vldr	s14, [r7, #28]
 8014056:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801405a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801405e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014066:	ee17 0a90 	vmov	r0, s15
 801406a:	f7ec fa7d 	bl	8000568 <__aeabi_f2d>
 801406e:	a334      	add	r3, pc, #208	; (adr r3, 8014140 <algoGalgo+0x258>)
 8014070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014074:	f7ec fad0 	bl	8000618 <__aeabi_dmul>
 8014078:	4603      	mov	r3, r0
 801407a:	460c      	mov	r4, r1
 801407c:	4618      	mov	r0, r3
 801407e:	4621      	mov	r1, r4
 8014080:	f7ec fdc2 	bl	8000c08 <__aeabi_d2f>
 8014084:	4605      	mov	r5, r0
 8014086:	ed97 7a07 	vldr	s14, [r7, #28]
 801408a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801408e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014092:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801409a:	ee17 0a90 	vmov	r0, s15
 801409e:	f7ec fa63 	bl	8000568 <__aeabi_f2d>
 80140a2:	a327      	add	r3, pc, #156	; (adr r3, 8014140 <algoGalgo+0x258>)
 80140a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a8:	f7ec fab6 	bl	8000618 <__aeabi_dmul>
 80140ac:	4603      	mov	r3, r0
 80140ae:	460c      	mov	r4, r1
 80140b0:	4618      	mov	r0, r3
 80140b2:	4621      	mov	r1, r4
 80140b4:	a324      	add	r3, pc, #144	; (adr r3, 8014148 <algoGalgo+0x260>)
 80140b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ba:	f7ec faad 	bl	8000618 <__aeabi_dmul>
 80140be:	4603      	mov	r3, r0
 80140c0:	460c      	mov	r4, r1
 80140c2:	4618      	mov	r0, r3
 80140c4:	4621      	mov	r1, r4
 80140c6:	f7ec fd9f 	bl	8000c08 <__aeabi_d2f>
 80140ca:	4603      	mov	r3, r0
 80140cc:	ee00 3a90 	vmov	s1, r3
 80140d0:	ee00 5a10 	vmov	s0, r5
 80140d4:	f7ec ffc2 	bl	800105c <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80140d8:	edd7 7a00 	vldr	s15, [r7]
 80140dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80140e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80140e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f0:	db12      	blt.n	8014118 <algoGalgo+0x230>
 80140f2:	edd7 7a00 	vldr	s15, [r7]
 80140f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80140fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8014102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	d805      	bhi.n	8014118 <algoGalgo+0x230>
 801410c:	2201      	movs	r2, #1
 801410e:	2180      	movs	r1, #128	; 0x80
 8014110:	4818      	ldr	r0, [pc, #96]	; (8014174 <algoGalgo+0x28c>)
 8014112:	f7f2 fe0d 	bl	8006d30 <HAL_GPIO_WritePin>
 8014116:	e004      	b.n	8014122 <algoGalgo+0x23a>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014118:	2200      	movs	r2, #0
 801411a:	2180      	movs	r1, #128	; 0x80
 801411c:	4815      	ldr	r0, [pc, #84]	; (8014174 <algoGalgo+0x28c>)
 801411e:	f7f2 fe07 	bl	8006d30 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 8014122:	4a11      	ldr	r2, [pc, #68]	; (8014168 <algoGalgo+0x280>)
 8014124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014126:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8014128:	f7fe fe84 	bl	8012e34 <millis>
 801412c:	4602      	mov	r2, r0
 801412e:	4b0f      	ldr	r3, [pc, #60]	; (801416c <algoGalgo+0x284>)
 8014130:	601a      	str	r2, [r3, #0]
}
 8014132:	bf00      	nop
 8014134:	3730      	adds	r7, #48	; 0x30
 8014136:	46bd      	mov	sp, r7
 8014138:	ecbd 8b02 	vpop	{d8}
 801413c:	bdb0      	pop	{r4, r5, r7, pc}
 801413e:	bf00      	nop
 8014140:	16c16c17 	.word	0x16c16c17
 8014144:	3f66c16c 	.word	0x3f66c16c
 8014148:	d70a3d71 	.word	0xd70a3d71
 801414c:	3fed70a3 	.word	0x3fed70a3
 8014150:	3f4ccccd 	.word	0x3f4ccccd
 8014154:	42480000 	.word	0x42480000
 8014158:	43340000 	.word	0x43340000
 801415c:	c3340000 	.word	0xc3340000
 8014160:	43b40000 	.word	0x43b40000
 8014164:	43fa0000 	.word	0x43fa0000
 8014168:	20002864 	.word	0x20002864
 801416c:	20002860 	.word	0x20002860
 8014170:	40668000 	.word	0x40668000
 8014174:	40020800 	.word	0x40020800

08014178 <setup>:
uint32_t lastSave;
uint32_t lastMotUpdate;
float target_yaw;

static void setup(void)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	af00      	add	r7, sp, #0
	// wait for USR button press
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 801417c:	bf00      	nop
 801417e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014182:	4822      	ldr	r0, [pc, #136]	; (801420c <setup+0x94>)
 8014184:	f7f2 fdbc 	bl	8006d00 <HAL_GPIO_ReadPin>
 8014188:	4603      	mov	r3, r0
 801418a:	2b01      	cmp	r3, #1
 801418c:	d0f7      	beq.n	801417e <setup+0x6>
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 801418e:	2201      	movs	r2, #1
 8014190:	2140      	movs	r1, #64	; 0x40
 8014192:	481f      	ldr	r0, [pc, #124]	; (8014210 <setup+0x98>)
 8014194:	f7f2 fdcc 	bl	8006d30 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8014198:	481e      	ldr	r0, [pc, #120]	; (8014214 <setup+0x9c>)
 801419a:	f7fe fe21 	bl	8012de0 <println>
 801419e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80141a2:	f7f1 ff47 	bl	8006034 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80141a6:	2200      	movs	r2, #0
 80141a8:	2140      	movs	r1, #64	; 0x40
 80141aa:	4819      	ldr	r0, [pc, #100]	; (8014210 <setup+0x98>)
 80141ac:	f7f2 fdc0 	bl	8006d30 <HAL_GPIO_WritePin>


	if (sdTest_begin()) println("SD card is working!");
 80141b0:	f7fe fea0 	bl	8012ef4 <sdTest_begin>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d002      	beq.n	80141c0 <setup+0x48>
 80141ba:	4817      	ldr	r0, [pc, #92]	; (8014218 <setup+0xa0>)
 80141bc:	f7fe fe10 	bl	8012de0 <println>
	log_new();
 80141c0:	f7f1 fb82 	bl	80058c8 <log_new>
	SD_init();
 80141c4:	f7ec ffe0 	bl	8001188 <SD_init>

	if (transmitter_begin()) println("Radio is working!");
 80141c8:	f7fe ff36 	bl	8013038 <transmitter_begin>
 80141cc:	4603      	mov	r3, r0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d002      	beq.n	80141d8 <setup+0x60>
 80141d2:	4812      	ldr	r0, [pc, #72]	; (801421c <setup+0xa4>)
 80141d4:	f7fe fe04 	bl	8012de0 <println>
	//if (receiver_begin()) println("Radio is working!");

	sensing_begin();
 80141d8:	f7ff fd00 	bl	8013bdc <sensing_begin>

	target_yaw = 180;
 80141dc:	4b10      	ldr	r3, [pc, #64]	; (8014220 <setup+0xa8>)
 80141de:	4a11      	ldr	r2, [pc, #68]	; (8014224 <setup+0xac>)
 80141e0:	601a      	str	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 80141e2:	bf00      	nop
 80141e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80141e8:	4808      	ldr	r0, [pc, #32]	; (801420c <setup+0x94>)
 80141ea:	f7f2 fd89 	bl	8006d00 <HAL_GPIO_ReadPin>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b01      	cmp	r3, #1
 80141f2:	d0f7      	beq.n	80141e4 <setup+0x6c>
	enableMotors(); println("[MOT] Motors enabled!");
 80141f4:	f7ec ff92 	bl	800111c <enableMotors>
 80141f8:	480b      	ldr	r0, [pc, #44]	; (8014228 <setup+0xb0>)
 80141fa:	f7fe fdf1 	bl	8012de0 <println>

	transmitter_loop("new transmit", 14);
 80141fe:	210e      	movs	r1, #14
 8014200:	480a      	ldr	r0, [pc, #40]	; (801422c <setup+0xb4>)
 8014202:	f7fe ff7d 	bl	8013100 <transmitter_loop>
}
 8014206:	bf00      	nop
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	40020000 	.word	0x40020000
 8014210:	40020800 	.word	0x40020800
 8014214:	0801c208 	.word	0x0801c208
 8014218:	0801c218 	.word	0x0801c218
 801421c:	0801c22c 	.word	0x0801c22c
 8014220:	20004b00 	.word	0x20004b00
 8014224:	43340000 	.word	0x43340000
 8014228:	0801c240 	.word	0x0801c240
 801422c:	0801c258 	.word	0x0801c258

08014230 <loop>:

static void loop(void)
{
 8014230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014234:	b084      	sub	sp, #16
 8014236:	af04      	add	r7, sp, #16
	if (millis() - lastSave >= 1000)
 8014238:	f7fe fdfc 	bl	8012e34 <millis>
 801423c:	4602      	mov	r2, r0
 801423e:	4b3a      	ldr	r3, [pc, #232]	; (8014328 <loop+0xf8>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014248:	d306      	bcc.n	8014258 <loop+0x28>
	{
		log_save();
 801424a:	f7f1 fc17 	bl	8005a7c <log_save>
		lastSave = millis();
 801424e:	f7fe fdf1 	bl	8012e34 <millis>
 8014252:	4602      	mov	r2, r0
 8014254:	4b34      	ldr	r3, [pc, #208]	; (8014328 <loop+0xf8>)
 8014256:	601a      	str	r2, [r3, #0]
	}

	sensing_loop();
 8014258:	f7ff fd70 	bl	8013d3c <sensing_loop>

	if (HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET)
 801425c:	4b33      	ldr	r3, [pc, #204]	; (801432c <loop+0xfc>)
 801425e:	69da      	ldr	r2, [r3, #28]
 8014260:	4b32      	ldr	r3, [pc, #200]	; (801432c <loop+0xfc>)
 8014262:	8a1b      	ldrh	r3, [r3, #16]
 8014264:	4619      	mov	r1, r3
 8014266:	4610      	mov	r0, r2
 8014268:	f7f2 fd4a 	bl	8006d00 <HAL_GPIO_ReadPin>
 801426c:	4603      	mov	r3, r0
 801426e:	2b01      	cmp	r3, #1
 8014270:	d131      	bne.n	80142d6 <loop+0xa6>
	{
		radio.txLen = sprintf(radio.lastPacket, "%f_%f_%f", yaw, pitch, roll);
 8014272:	4b2f      	ldr	r3, [pc, #188]	; (8014330 <loop+0x100>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	4618      	mov	r0, r3
 8014278:	f7ec f976 	bl	8000568 <__aeabi_f2d>
 801427c:	4680      	mov	r8, r0
 801427e:	4689      	mov	r9, r1
 8014280:	4b2c      	ldr	r3, [pc, #176]	; (8014334 <loop+0x104>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4618      	mov	r0, r3
 8014286:	f7ec f96f 	bl	8000568 <__aeabi_f2d>
 801428a:	4604      	mov	r4, r0
 801428c:	460d      	mov	r5, r1
 801428e:	4b2a      	ldr	r3, [pc, #168]	; (8014338 <loop+0x108>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4618      	mov	r0, r3
 8014294:	f7ec f968 	bl	8000568 <__aeabi_f2d>
 8014298:	4602      	mov	r2, r0
 801429a:	460b      	mov	r3, r1
 801429c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142a0:	e9cd 4500 	strd	r4, r5, [sp]
 80142a4:	4642      	mov	r2, r8
 80142a6:	464b      	mov	r3, r9
 80142a8:	4924      	ldr	r1, [pc, #144]	; (801433c <loop+0x10c>)
 80142aa:	4825      	ldr	r0, [pc, #148]	; (8014340 <loop+0x110>)
 80142ac:	f002 fec2 	bl	8017034 <siprintf>
 80142b0:	4603      	mov	r3, r0
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	4b1d      	ldr	r3, [pc, #116]	; (801432c <loop+0xfc>)
 80142b6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		if (transmitter_loop(radio.lastPacket, radio.txLen))
 80142ba:	4b1c      	ldr	r3, [pc, #112]	; (801432c <loop+0xfc>)
 80142bc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80142c0:	4619      	mov	r1, r3
 80142c2:	481f      	ldr	r0, [pc, #124]	; (8014340 <loop+0x110>)
 80142c4:	f7fe ff1c 	bl	8013100 <transmitter_loop>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d003      	beq.n	80142d6 <loop+0xa6>
		{
			log_radio(&radio, true);
 80142ce:	2101      	movs	r1, #1
 80142d0:	4816      	ldr	r0, [pc, #88]	; (801432c <loop+0xfc>)
 80142d2:	f7f1 fdeb 	bl	8005eac <log_radio>
		}
	}

	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 80142d6:	f7fe fdad 	bl	8012e34 <millis>
 80142da:	4602      	mov	r2, r0
 80142dc:	4b19      	ldr	r3, [pc, #100]	; (8014344 <loop+0x114>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	d91c      	bls.n	8014320 <loop+0xf0>
	{
		imuTest_getEuler();
 80142e6:	f7ff f92d 	bl	8013544 <imuTest_getEuler>
		algoGalgo(yaw, target_yaw);
 80142ea:	4b11      	ldr	r3, [pc, #68]	; (8014330 <loop+0x100>)
 80142ec:	edd3 7a00 	vldr	s15, [r3]
 80142f0:	4b15      	ldr	r3, [pc, #84]	; (8014348 <loop+0x118>)
 80142f2:	ed93 7a00 	vldr	s14, [r3]
 80142f6:	eef0 0a47 	vmov.f32	s1, s14
 80142fa:	eeb0 0a67 	vmov.f32	s0, s15
 80142fe:	f7ff fdf3 	bl	8013ee8 <algoGalgo>
		print_float(yaw); println("");
 8014302:	4b0b      	ldr	r3, [pc, #44]	; (8014330 <loop+0x100>)
 8014304:	edd3 7a00 	vldr	s15, [r3]
 8014308:	eeb0 0a67 	vmov.f32	s0, s15
 801430c:	f7fe fd7d 	bl	8012e0a <print_float>
 8014310:	480e      	ldr	r0, [pc, #56]	; (801434c <loop+0x11c>)
 8014312:	f7fe fd65 	bl	8012de0 <println>
		lastMotUpdate = millis();
 8014316:	f7fe fd8d 	bl	8012e34 <millis>
 801431a:	4602      	mov	r2, r0
 801431c:	4b09      	ldr	r3, [pc, #36]	; (8014344 <loop+0x114>)
 801431e:	601a      	str	r2, [r3, #0]
	}

}
 8014320:	bf00      	nop
 8014322:	46bd      	mov	sp, r7
 8014324:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014328:	20004b08 	.word	0x20004b08
 801432c:	20002868 	.word	0x20002868
 8014330:	20002db4 	.word	0x20002db4
 8014334:	20002dc0 	.word	0x20002dc0
 8014338:	20002dc4 	.word	0x20002dc4
 801433c:	0801c268 	.word	0x0801c268
 8014340:	200029a5 	.word	0x200029a5
 8014344:	20004af8 	.word	0x20004af8
 8014348:	20004b00 	.word	0x20004b00
 801434c:	0801bcf8 	.word	0x0801bcf8

08014350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014354:	f7f1 fdfc 	bl	8005f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014358:	f000 f862 	bl	8014420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801435c:	f000 fb30 	bl	80149c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8014360:	f000 fb06 	bl	8014970 <MX_DMA_Init>
  MX_I2C1_Init();
 8014364:	f000 f8de 	bl	8014524 <MX_I2C1_Init>
  MX_RTC_Init();
 8014368:	f000 f90a 	bl	8014580 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 801436c:	f000 f92e 	bl	80145cc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8014370:	f000 f94c 	bl	801460c <MX_SPI1_Init>
  MX_TIM2_Init();
 8014374:	f000 f980 	bl	8014678 <MX_TIM2_Init>
  MX_TIM3_Init();
 8014378:	f000 f9cc 	bl	8014714 <MX_TIM3_Init>
  MX_TIM5_Init();
 801437c:	f000 fa4c 	bl	8014818 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8014380:	f000 facc 	bl	801491c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8014384:	f7fe fcf2 	bl	8012d6c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8014388:	f001 f9d2 	bl	8015730 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 801438c:	4820      	ldr	r0, [pc, #128]	; (8014410 <main+0xc0>)
 801438e:	f7f7 fba8 	bl	800bae2 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014392:	2200      	movs	r2, #0
 8014394:	2180      	movs	r1, #128	; 0x80
 8014396:	481f      	ldr	r0, [pc, #124]	; (8014414 <main+0xc4>)
 8014398:	f7f2 fcca 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801439c:	2200      	movs	r2, #0
 801439e:	2140      	movs	r1, #64	; 0x40
 80143a0:	481c      	ldr	r0, [pc, #112]	; (8014414 <main+0xc4>)
 80143a2:	f7f2 fcc5 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 80143a6:	2200      	movs	r2, #0
 80143a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80143ac:	481a      	ldr	r0, [pc, #104]	; (8014418 <main+0xc8>)
 80143ae:	f7f2 fcbf 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 80143b2:	2200      	movs	r2, #0
 80143b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80143b8:	4817      	ldr	r0, [pc, #92]	; (8014418 <main+0xc8>)
 80143ba:	f7f2 fcb9 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 80143be:	2200      	movs	r2, #0
 80143c0:	2101      	movs	r1, #1
 80143c2:	4816      	ldr	r0, [pc, #88]	; (801441c <main+0xcc>)
 80143c4:	f7f2 fcb4 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 80143c8:	2200      	movs	r2, #0
 80143ca:	2104      	movs	r1, #4
 80143cc:	4813      	ldr	r0, [pc, #76]	; (801441c <main+0xcc>)
 80143ce:	f7f2 fcaf 	bl	8006d30 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 80143d2:	2200      	movs	r2, #0
 80143d4:	2101      	movs	r1, #1
 80143d6:	480f      	ldr	r0, [pc, #60]	; (8014414 <main+0xc4>)
 80143d8:	f7f2 fcaa 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 80143dc:	2200      	movs	r2, #0
 80143de:	2104      	movs	r1, #4
 80143e0:	480c      	ldr	r0, [pc, #48]	; (8014414 <main+0xc4>)
 80143e2:	f7f2 fca5 	bl	8006d30 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 80143e6:	2200      	movs	r2, #0
 80143e8:	2102      	movs	r1, #2
 80143ea:	480a      	ldr	r0, [pc, #40]	; (8014414 <main+0xc4>)
 80143ec:	f7f2 fca0 	bl	8006d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 80143f0:	2201      	movs	r2, #1
 80143f2:	2108      	movs	r1, #8
 80143f4:	4807      	ldr	r0, [pc, #28]	; (8014414 <main+0xc4>)
 80143f6:	f7f2 fc9b 	bl	8006d30 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 80143fa:	2200      	movs	r2, #0
 80143fc:	2110      	movs	r1, #16
 80143fe:	4807      	ldr	r0, [pc, #28]	; (801441c <main+0xcc>)
 8014400:	f7f2 fc96 	bl	8006d30 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8014404:	f7ff feb8 	bl	8014178 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8014408:	f7ff ff12 	bl	8014230 <loop>
 801440c:	e7fc      	b.n	8014408 <main+0xb8>
 801440e:	bf00      	nop
 8014410:	20006e4c 	.word	0x20006e4c
 8014414:	40020800 	.word	0x40020800
 8014418:	40020400 	.word	0x40020400
 801441c:	40020000 	.word	0x40020000

08014420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b098      	sub	sp, #96	; 0x60
 8014424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801442a:	2230      	movs	r2, #48	; 0x30
 801442c:	2100      	movs	r1, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f001 fefb 	bl	801622a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014434:	f107 031c 	add.w	r3, r7, #28
 8014438:	2200      	movs	r2, #0
 801443a:	601a      	str	r2, [r3, #0]
 801443c:	605a      	str	r2, [r3, #4]
 801443e:	609a      	str	r2, [r3, #8]
 8014440:	60da      	str	r2, [r3, #12]
 8014442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014444:	f107 030c 	add.w	r3, r7, #12
 8014448:	2200      	movs	r2, #0
 801444a:	601a      	str	r2, [r3, #0]
 801444c:	605a      	str	r2, [r3, #4]
 801444e:	609a      	str	r2, [r3, #8]
 8014450:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8014452:	2300      	movs	r3, #0
 8014454:	60bb      	str	r3, [r7, #8]
 8014456:	4b31      	ldr	r3, [pc, #196]	; (801451c <SystemClock_Config+0xfc>)
 8014458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801445a:	4a30      	ldr	r2, [pc, #192]	; (801451c <SystemClock_Config+0xfc>)
 801445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014460:	6413      	str	r3, [r2, #64]	; 0x40
 8014462:	4b2e      	ldr	r3, [pc, #184]	; (801451c <SystemClock_Config+0xfc>)
 8014464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801446a:	60bb      	str	r3, [r7, #8]
 801446c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801446e:	2300      	movs	r3, #0
 8014470:	607b      	str	r3, [r7, #4]
 8014472:	4b2b      	ldr	r3, [pc, #172]	; (8014520 <SystemClock_Config+0x100>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	4a2a      	ldr	r2, [pc, #168]	; (8014520 <SystemClock_Config+0x100>)
 8014478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801447c:	6013      	str	r3, [r2, #0]
 801447e:	4b28      	ldr	r3, [pc, #160]	; (8014520 <SystemClock_Config+0x100>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014486:	607b      	str	r3, [r7, #4]
 8014488:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801448a:	2305      	movs	r3, #5
 801448c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801448e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8014494:	2301      	movs	r3, #1
 8014496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014498:	2302      	movs	r3, #2
 801449a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801449c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80144a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80144a2:	2306      	movs	r3, #6
 80144a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80144a6:	23a8      	movs	r3, #168	; 0xa8
 80144a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80144aa:	2302      	movs	r3, #2
 80144ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80144ae:	2307      	movs	r3, #7
 80144b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80144b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7f4 fd78 	bl	8008fac <HAL_RCC_OscConfig>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d001      	beq.n	80144c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80144c2:	f000 fb8d 	bl	8014be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80144c6:	230f      	movs	r3, #15
 80144c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80144ca:	2302      	movs	r3, #2
 80144cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80144ce:	2300      	movs	r3, #0
 80144d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80144d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80144d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80144d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80144de:	f107 031c 	add.w	r3, r7, #28
 80144e2:	2105      	movs	r1, #5
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7f4 ffa3 	bl	8009430 <HAL_RCC_ClockConfig>
 80144ea:	4603      	mov	r3, r0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d001      	beq.n	80144f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80144f0:	f000 fb76 	bl	8014be0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80144f4:	2302      	movs	r3, #2
 80144f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80144f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80144fe:	f107 030c 	add.w	r3, r7, #12
 8014502:	4618      	mov	r0, r3
 8014504:	f7f5 f95c 	bl	80097c0 <HAL_RCCEx_PeriphCLKConfig>
 8014508:	4603      	mov	r3, r0
 801450a:	2b00      	cmp	r3, #0
 801450c:	d001      	beq.n	8014512 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 801450e:	f000 fb67 	bl	8014be0 <Error_Handler>
  }
}
 8014512:	bf00      	nop
 8014514:	3760      	adds	r7, #96	; 0x60
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}
 801451a:	bf00      	nop
 801451c:	40023800 	.word	0x40023800
 8014520:	40007000 	.word	0x40007000

08014524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8014528:	4b12      	ldr	r3, [pc, #72]	; (8014574 <MX_I2C1_Init+0x50>)
 801452a:	4a13      	ldr	r2, [pc, #76]	; (8014578 <MX_I2C1_Init+0x54>)
 801452c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 801452e:	4b11      	ldr	r3, [pc, #68]	; (8014574 <MX_I2C1_Init+0x50>)
 8014530:	4a12      	ldr	r2, [pc, #72]	; (801457c <MX_I2C1_Init+0x58>)
 8014532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014534:	4b0f      	ldr	r3, [pc, #60]	; (8014574 <MX_I2C1_Init+0x50>)
 8014536:	2200      	movs	r2, #0
 8014538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801453a:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <MX_I2C1_Init+0x50>)
 801453c:	2200      	movs	r2, #0
 801453e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014540:	4b0c      	ldr	r3, [pc, #48]	; (8014574 <MX_I2C1_Init+0x50>)
 8014542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014548:	4b0a      	ldr	r3, [pc, #40]	; (8014574 <MX_I2C1_Init+0x50>)
 801454a:	2200      	movs	r2, #0
 801454c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801454e:	4b09      	ldr	r3, [pc, #36]	; (8014574 <MX_I2C1_Init+0x50>)
 8014550:	2200      	movs	r2, #0
 8014552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014554:	4b07      	ldr	r3, [pc, #28]	; (8014574 <MX_I2C1_Init+0x50>)
 8014556:	2200      	movs	r2, #0
 8014558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801455a:	4b06      	ldr	r3, [pc, #24]	; (8014574 <MX_I2C1_Init+0x50>)
 801455c:	2200      	movs	r2, #0
 801455e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014560:	4804      	ldr	r0, [pc, #16]	; (8014574 <MX_I2C1_Init+0x50>)
 8014562:	f7f2 fc19 	bl	8006d98 <HAL_I2C_Init>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d001      	beq.n	8014570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801456c:	f000 fb38 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8014570:	bf00      	nop
 8014572:	bd80      	pop	{r7, pc}
 8014574:	20006c1c 	.word	0x20006c1c
 8014578:	40005400 	.word	0x40005400
 801457c:	00061a80 	.word	0x00061a80

08014580 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8014584:	4b0f      	ldr	r3, [pc, #60]	; (80145c4 <MX_RTC_Init+0x44>)
 8014586:	4a10      	ldr	r2, [pc, #64]	; (80145c8 <MX_RTC_Init+0x48>)
 8014588:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801458a:	4b0e      	ldr	r3, [pc, #56]	; (80145c4 <MX_RTC_Init+0x44>)
 801458c:	2200      	movs	r2, #0
 801458e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8014590:	4b0c      	ldr	r3, [pc, #48]	; (80145c4 <MX_RTC_Init+0x44>)
 8014592:	227f      	movs	r2, #127	; 0x7f
 8014594:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8014596:	4b0b      	ldr	r3, [pc, #44]	; (80145c4 <MX_RTC_Init+0x44>)
 8014598:	22ff      	movs	r2, #255	; 0xff
 801459a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801459c:	4b09      	ldr	r3, [pc, #36]	; (80145c4 <MX_RTC_Init+0x44>)
 801459e:	2200      	movs	r2, #0
 80145a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80145a2:	4b08      	ldr	r3, [pc, #32]	; (80145c4 <MX_RTC_Init+0x44>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80145a8:	4b06      	ldr	r3, [pc, #24]	; (80145c4 <MX_RTC_Init+0x44>)
 80145aa:	2200      	movs	r2, #0
 80145ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80145ae:	4805      	ldr	r0, [pc, #20]	; (80145c4 <MX_RTC_Init+0x44>)
 80145b0:	f7f5 f9e8 	bl	8009984 <HAL_RTC_Init>
 80145b4:	4603      	mov	r3, r0
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d001      	beq.n	80145be <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80145ba:	f000 fb11 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80145be:	bf00      	nop
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20006cf0 	.word	0x20006cf0
 80145c8:	40002800 	.word	0x40002800

080145cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80145cc:	b480      	push	{r7}
 80145ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80145d0:	4b0c      	ldr	r3, [pc, #48]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145d2:	4a0d      	ldr	r2, [pc, #52]	; (8014608 <MX_SDIO_SD_Init+0x3c>)
 80145d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80145d6:	4b0b      	ldr	r3, [pc, #44]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145d8:	2200      	movs	r2, #0
 80145da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80145dc:	4b09      	ldr	r3, [pc, #36]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145de:	2200      	movs	r2, #0
 80145e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80145e2:	4b08      	ldr	r3, [pc, #32]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145e4:	2200      	movs	r2, #0
 80145e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80145e8:	4b06      	ldr	r3, [pc, #24]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145ea:	2200      	movs	r2, #0
 80145ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80145ee:	4b05      	ldr	r3, [pc, #20]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145f0:	2200      	movs	r2, #0
 80145f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80145f4:	4b03      	ldr	r3, [pc, #12]	; (8014604 <MX_SDIO_SD_Init+0x38>)
 80145f6:	2200      	movs	r2, #0
 80145f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80145fa:	bf00      	nop
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	20006d70 	.word	0x20006d70
 8014608:	40012c00 	.word	0x40012c00

0801460c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8014610:	4b17      	ldr	r3, [pc, #92]	; (8014670 <MX_SPI1_Init+0x64>)
 8014612:	4a18      	ldr	r2, [pc, #96]	; (8014674 <MX_SPI1_Init+0x68>)
 8014614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8014616:	4b16      	ldr	r3, [pc, #88]	; (8014670 <MX_SPI1_Init+0x64>)
 8014618:	f44f 7282 	mov.w	r2, #260	; 0x104
 801461c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801461e:	4b14      	ldr	r3, [pc, #80]	; (8014670 <MX_SPI1_Init+0x64>)
 8014620:	2200      	movs	r2, #0
 8014622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8014624:	4b12      	ldr	r3, [pc, #72]	; (8014670 <MX_SPI1_Init+0x64>)
 8014626:	2200      	movs	r2, #0
 8014628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801462a:	4b11      	ldr	r3, [pc, #68]	; (8014670 <MX_SPI1_Init+0x64>)
 801462c:	2200      	movs	r2, #0
 801462e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8014630:	4b0f      	ldr	r3, [pc, #60]	; (8014670 <MX_SPI1_Init+0x64>)
 8014632:	2200      	movs	r2, #0
 8014634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8014636:	4b0e      	ldr	r3, [pc, #56]	; (8014670 <MX_SPI1_Init+0x64>)
 8014638:	f44f 7200 	mov.w	r2, #512	; 0x200
 801463c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801463e:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <MX_SPI1_Init+0x64>)
 8014640:	2218      	movs	r2, #24
 8014642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8014644:	4b0a      	ldr	r3, [pc, #40]	; (8014670 <MX_SPI1_Init+0x64>)
 8014646:	2200      	movs	r2, #0
 8014648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801464a:	4b09      	ldr	r3, [pc, #36]	; (8014670 <MX_SPI1_Init+0x64>)
 801464c:	2200      	movs	r2, #0
 801464e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014650:	4b07      	ldr	r3, [pc, #28]	; (8014670 <MX_SPI1_Init+0x64>)
 8014652:	2200      	movs	r2, #0
 8014654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8014656:	4b06      	ldr	r3, [pc, #24]	; (8014670 <MX_SPI1_Init+0x64>)
 8014658:	220a      	movs	r2, #10
 801465a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801465c:	4804      	ldr	r0, [pc, #16]	; (8014670 <MX_SPI1_Init+0x64>)
 801465e:	f7f6 fe20 	bl	800b2a2 <HAL_SPI_Init>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	d001      	beq.n	801466c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8014668:	f000 faba 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801466c:	bf00      	nop
 801466e:	bd80      	pop	{r7, pc}
 8014670:	20006df4 	.word	0x20006df4
 8014674:	40013000 	.word	0x40013000

08014678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b086      	sub	sp, #24
 801467c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801467e:	f107 0308 	add.w	r3, r7, #8
 8014682:	2200      	movs	r2, #0
 8014684:	601a      	str	r2, [r3, #0]
 8014686:	605a      	str	r2, [r3, #4]
 8014688:	609a      	str	r2, [r3, #8]
 801468a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801468c:	463b      	mov	r3, r7
 801468e:	2200      	movs	r2, #0
 8014690:	601a      	str	r2, [r3, #0]
 8014692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8014694:	4b1d      	ldr	r3, [pc, #116]	; (801470c <MX_TIM2_Init+0x94>)
 8014696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801469a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 801469c:	4b1b      	ldr	r3, [pc, #108]	; (801470c <MX_TIM2_Init+0x94>)
 801469e:	2253      	movs	r2, #83	; 0x53
 80146a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80146a2:	4b1a      	ldr	r3, [pc, #104]	; (801470c <MX_TIM2_Init+0x94>)
 80146a4:	2200      	movs	r2, #0
 80146a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 80146a8:	4b18      	ldr	r3, [pc, #96]	; (801470c <MX_TIM2_Init+0x94>)
 80146aa:	4a19      	ldr	r2, [pc, #100]	; (8014710 <MX_TIM2_Init+0x98>)
 80146ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80146ae:	4b17      	ldr	r3, [pc, #92]	; (801470c <MX_TIM2_Init+0x94>)
 80146b0:	2200      	movs	r2, #0
 80146b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80146b4:	4b15      	ldr	r3, [pc, #84]	; (801470c <MX_TIM2_Init+0x94>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80146ba:	4814      	ldr	r0, [pc, #80]	; (801470c <MX_TIM2_Init+0x94>)
 80146bc:	f7f7 f9e6 	bl	800ba8c <HAL_TIM_Base_Init>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d001      	beq.n	80146ca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80146c6:	f000 fa8b 	bl	8014be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80146ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80146d0:	f107 0308 	add.w	r3, r7, #8
 80146d4:	4619      	mov	r1, r3
 80146d6:	480d      	ldr	r0, [pc, #52]	; (801470c <MX_TIM2_Init+0x94>)
 80146d8:	f7f7 fb60 	bl	800bd9c <HAL_TIM_ConfigClockSource>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d001      	beq.n	80146e6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80146e2:	f000 fa7d 	bl	8014be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80146e6:	2300      	movs	r3, #0
 80146e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80146ea:	2300      	movs	r3, #0
 80146ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80146ee:	463b      	mov	r3, r7
 80146f0:	4619      	mov	r1, r3
 80146f2:	4806      	ldr	r0, [pc, #24]	; (801470c <MX_TIM2_Init+0x94>)
 80146f4:	f7f7 ff19 	bl	800c52a <HAL_TIMEx_MasterConfigSynchronization>
 80146f8:	4603      	mov	r3, r0
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d001      	beq.n	8014702 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80146fe:	f000 fa6f 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8014702:	bf00      	nop
 8014704:	3718      	adds	r7, #24
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	20006e4c 	.word	0x20006e4c
 8014710:	fa56ea00 	.word	0xfa56ea00

08014714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b08e      	sub	sp, #56	; 0x38
 8014718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801471a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801471e:	2200      	movs	r2, #0
 8014720:	601a      	str	r2, [r3, #0]
 8014722:	605a      	str	r2, [r3, #4]
 8014724:	609a      	str	r2, [r3, #8]
 8014726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014728:	f107 0320 	add.w	r3, r7, #32
 801472c:	2200      	movs	r2, #0
 801472e:	601a      	str	r2, [r3, #0]
 8014730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014732:	1d3b      	adds	r3, r7, #4
 8014734:	2200      	movs	r2, #0
 8014736:	601a      	str	r2, [r3, #0]
 8014738:	605a      	str	r2, [r3, #4]
 801473a:	609a      	str	r2, [r3, #8]
 801473c:	60da      	str	r2, [r3, #12]
 801473e:	611a      	str	r2, [r3, #16]
 8014740:	615a      	str	r2, [r3, #20]
 8014742:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8014744:	4b32      	ldr	r3, [pc, #200]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014746:	4a33      	ldr	r2, [pc, #204]	; (8014814 <MX_TIM3_Init+0x100>)
 8014748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 801474a:	4b31      	ldr	r3, [pc, #196]	; (8014810 <MX_TIM3_Init+0xfc>)
 801474c:	22a7      	movs	r2, #167	; 0xa7
 801474e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014750:	4b2f      	ldr	r3, [pc, #188]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014752:	2200      	movs	r2, #0
 8014754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8014756:	4b2e      	ldr	r3, [pc, #184]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014758:	f242 7210 	movw	r2, #10000	; 0x2710
 801475c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801475e:	4b2c      	ldr	r3, [pc, #176]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014760:	2200      	movs	r2, #0
 8014762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014764:	4b2a      	ldr	r3, [pc, #168]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014766:	2200      	movs	r2, #0
 8014768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801476a:	4829      	ldr	r0, [pc, #164]	; (8014810 <MX_TIM3_Init+0xfc>)
 801476c:	f7f7 f98e 	bl	800ba8c <HAL_TIM_Base_Init>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8014776:	f000 fa33 	bl	8014be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801477e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8014780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014784:	4619      	mov	r1, r3
 8014786:	4822      	ldr	r0, [pc, #136]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014788:	f7f7 fb08 	bl	800bd9c <HAL_TIM_ConfigClockSource>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d001      	beq.n	8014796 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8014792:	f000 fa25 	bl	8014be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8014796:	481e      	ldr	r0, [pc, #120]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014798:	f7f7 f9c7 	bl	800bb2a <HAL_TIM_PWM_Init>
 801479c:	4603      	mov	r3, r0
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d001      	beq.n	80147a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80147a2:	f000 fa1d 	bl	8014be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80147a6:	2300      	movs	r3, #0
 80147a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80147aa:	2300      	movs	r3, #0
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80147ae:	f107 0320 	add.w	r3, r7, #32
 80147b2:	4619      	mov	r1, r3
 80147b4:	4816      	ldr	r0, [pc, #88]	; (8014810 <MX_TIM3_Init+0xfc>)
 80147b6:	f7f7 feb8 	bl	800c52a <HAL_TIMEx_MasterConfigSynchronization>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d001      	beq.n	80147c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80147c0:	f000 fa0e 	bl	8014be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80147c4:	2360      	movs	r3, #96	; 0x60
 80147c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80147c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80147cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80147ce:	2300      	movs	r3, #0
 80147d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80147d2:	2300      	movs	r3, #0
 80147d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80147d6:	1d3b      	adds	r3, r7, #4
 80147d8:	2208      	movs	r2, #8
 80147da:	4619      	mov	r1, r3
 80147dc:	480c      	ldr	r0, [pc, #48]	; (8014810 <MX_TIM3_Init+0xfc>)
 80147de:	f7f7 fa17 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d001      	beq.n	80147ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80147e8:	f000 f9fa 	bl	8014be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80147ec:	1d3b      	adds	r3, r7, #4
 80147ee:	220c      	movs	r2, #12
 80147f0:	4619      	mov	r1, r3
 80147f2:	4807      	ldr	r0, [pc, #28]	; (8014810 <MX_TIM3_Init+0xfc>)
 80147f4:	f7f7 fa0c 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d001      	beq.n	8014802 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80147fe:	f000 f9ef 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8014802:	4803      	ldr	r0, [pc, #12]	; (8014810 <MX_TIM3_Init+0xfc>)
 8014804:	f000 fe32 	bl	801546c <HAL_TIM_MspPostInit>

}
 8014808:	bf00      	nop
 801480a:	3738      	adds	r7, #56	; 0x38
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}
 8014810:	20006cb0 	.word	0x20006cb0
 8014814:	40000400 	.word	0x40000400

08014818 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b08e      	sub	sp, #56	; 0x38
 801481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801481e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014822:	2200      	movs	r2, #0
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	605a      	str	r2, [r3, #4]
 8014828:	609a      	str	r2, [r3, #8]
 801482a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801482c:	f107 0320 	add.w	r3, r7, #32
 8014830:	2200      	movs	r2, #0
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014836:	1d3b      	adds	r3, r7, #4
 8014838:	2200      	movs	r2, #0
 801483a:	601a      	str	r2, [r3, #0]
 801483c:	605a      	str	r2, [r3, #4]
 801483e:	609a      	str	r2, [r3, #8]
 8014840:	60da      	str	r2, [r3, #12]
 8014842:	611a      	str	r2, [r3, #16]
 8014844:	615a      	str	r2, [r3, #20]
 8014846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8014848:	4b32      	ldr	r3, [pc, #200]	; (8014914 <MX_TIM5_Init+0xfc>)
 801484a:	4a33      	ldr	r2, [pc, #204]	; (8014918 <MX_TIM5_Init+0x100>)
 801484c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801484e:	4b31      	ldr	r3, [pc, #196]	; (8014914 <MX_TIM5_Init+0xfc>)
 8014850:	2200      	movs	r2, #0
 8014852:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8014854:	4b2f      	ldr	r3, [pc, #188]	; (8014914 <MX_TIM5_Init+0xfc>)
 8014856:	2240      	movs	r2, #64	; 0x40
 8014858:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801485a:	4b2e      	ldr	r3, [pc, #184]	; (8014914 <MX_TIM5_Init+0xfc>)
 801485c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014860:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8014862:	4b2c      	ldr	r3, [pc, #176]	; (8014914 <MX_TIM5_Init+0xfc>)
 8014864:	2200      	movs	r2, #0
 8014866:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014868:	4b2a      	ldr	r3, [pc, #168]	; (8014914 <MX_TIM5_Init+0xfc>)
 801486a:	2200      	movs	r2, #0
 801486c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801486e:	4829      	ldr	r0, [pc, #164]	; (8014914 <MX_TIM5_Init+0xfc>)
 8014870:	f7f7 f90c 	bl	800ba8c <HAL_TIM_Base_Init>
 8014874:	4603      	mov	r3, r0
 8014876:	2b00      	cmp	r3, #0
 8014878:	d001      	beq.n	801487e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801487a:	f000 f9b1 	bl	8014be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801487e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014882:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8014884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014888:	4619      	mov	r1, r3
 801488a:	4822      	ldr	r0, [pc, #136]	; (8014914 <MX_TIM5_Init+0xfc>)
 801488c:	f7f7 fa86 	bl	800bd9c <HAL_TIM_ConfigClockSource>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d001      	beq.n	801489a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8014896:	f000 f9a3 	bl	8014be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801489a:	481e      	ldr	r0, [pc, #120]	; (8014914 <MX_TIM5_Init+0xfc>)
 801489c:	f7f7 f945 	bl	800bb2a <HAL_TIM_PWM_Init>
 80148a0:	4603      	mov	r3, r0
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d001      	beq.n	80148aa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80148a6:	f000 f99b 	bl	8014be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80148aa:	2300      	movs	r3, #0
 80148ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80148ae:	2300      	movs	r3, #0
 80148b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80148b2:	f107 0320 	add.w	r3, r7, #32
 80148b6:	4619      	mov	r1, r3
 80148b8:	4816      	ldr	r0, [pc, #88]	; (8014914 <MX_TIM5_Init+0xfc>)
 80148ba:	f7f7 fe36 	bl	800c52a <HAL_TIMEx_MasterConfigSynchronization>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d001      	beq.n	80148c8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80148c4:	f000 f98c 	bl	8014be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80148c8:	2370      	movs	r3, #112	; 0x70
 80148ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80148cc:	2364      	movs	r3, #100	; 0x64
 80148ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80148d0:	2300      	movs	r3, #0
 80148d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80148d4:	2300      	movs	r3, #0
 80148d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80148d8:	1d3b      	adds	r3, r7, #4
 80148da:	2204      	movs	r2, #4
 80148dc:	4619      	mov	r1, r3
 80148de:	480d      	ldr	r0, [pc, #52]	; (8014914 <MX_TIM5_Init+0xfc>)
 80148e0:	f7f7 f996 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 80148e4:	4603      	mov	r3, r0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d001      	beq.n	80148ee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80148ea:	f000 f979 	bl	8014be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80148ee:	1d3b      	adds	r3, r7, #4
 80148f0:	220c      	movs	r2, #12
 80148f2:	4619      	mov	r1, r3
 80148f4:	4807      	ldr	r0, [pc, #28]	; (8014914 <MX_TIM5_Init+0xfc>)
 80148f6:	f7f7 f98b 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 80148fa:	4603      	mov	r3, r0
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d001      	beq.n	8014904 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8014900:	f000 f96e 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8014904:	4803      	ldr	r0, [pc, #12]	; (8014914 <MX_TIM5_Init+0xfc>)
 8014906:	f000 fdb1 	bl	801546c <HAL_TIM_MspPostInit>

}
 801490a:	bf00      	nop
 801490c:	3738      	adds	r7, #56	; 0x38
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	20006c70 	.word	0x20006c70
 8014918:	40000c00 	.word	0x40000c00

0801491c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8014920:	4b11      	ldr	r3, [pc, #68]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014922:	4a12      	ldr	r2, [pc, #72]	; (801496c <MX_USART3_UART_Init+0x50>)
 8014924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8014926:	4b10      	ldr	r3, [pc, #64]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801492c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801492e:	4b0e      	ldr	r3, [pc, #56]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014930:	2200      	movs	r2, #0
 8014932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8014934:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014936:	2200      	movs	r2, #0
 8014938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801493a:	4b0b      	ldr	r3, [pc, #44]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 801493c:	2200      	movs	r2, #0
 801493e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8014940:	4b09      	ldr	r3, [pc, #36]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014942:	220c      	movs	r2, #12
 8014944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014946:	4b08      	ldr	r3, [pc, #32]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014948:	2200      	movs	r2, #0
 801494a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801494c:	4b06      	ldr	r3, [pc, #24]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 801494e:	2200      	movs	r2, #0
 8014950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8014952:	4805      	ldr	r0, [pc, #20]	; (8014968 <MX_USART3_UART_Init+0x4c>)
 8014954:	f7f7 fe2e 	bl	800c5b4 <HAL_UART_Init>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d001      	beq.n	8014962 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801495e:	f000 f93f 	bl	8014be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8014962:	bf00      	nop
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	20006bdc 	.word	0x20006bdc
 801496c:	40004800 	.word	0x40004800

08014970 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8014976:	2300      	movs	r3, #0
 8014978:	607b      	str	r3, [r7, #4]
 801497a:	4b10      	ldr	r3, [pc, #64]	; (80149bc <MX_DMA_Init+0x4c>)
 801497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497e:	4a0f      	ldr	r2, [pc, #60]	; (80149bc <MX_DMA_Init+0x4c>)
 8014980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014984:	6313      	str	r3, [r2, #48]	; 0x30
 8014986:	4b0d      	ldr	r3, [pc, #52]	; (80149bc <MX_DMA_Init+0x4c>)
 8014988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801498a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801498e:	607b      	str	r3, [r7, #4]
 8014990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8014992:	2200      	movs	r2, #0
 8014994:	2100      	movs	r1, #0
 8014996:	203b      	movs	r0, #59	; 0x3b
 8014998:	f7f1 fc49 	bl	800622e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801499c:	203b      	movs	r0, #59	; 0x3b
 801499e:	f7f1 fc62 	bl	8006266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80149a2:	2200      	movs	r2, #0
 80149a4:	2100      	movs	r1, #0
 80149a6:	2045      	movs	r0, #69	; 0x45
 80149a8:	f7f1 fc41 	bl	800622e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80149ac:	2045      	movs	r0, #69	; 0x45
 80149ae:	f7f1 fc5a 	bl	8006266 <HAL_NVIC_EnableIRQ>

}
 80149b2:	bf00      	nop
 80149b4:	3708      	adds	r7, #8
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	40023800 	.word	0x40023800

080149c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b08a      	sub	sp, #40	; 0x28
 80149c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149c6:	f107 0314 	add.w	r3, r7, #20
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]
 80149ce:	605a      	str	r2, [r3, #4]
 80149d0:	609a      	str	r2, [r3, #8]
 80149d2:	60da      	str	r2, [r3, #12]
 80149d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80149d6:	2300      	movs	r3, #0
 80149d8:	613b      	str	r3, [r7, #16]
 80149da:	4b63      	ldr	r3, [pc, #396]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 80149dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149de:	4a62      	ldr	r2, [pc, #392]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 80149e0:	f043 0304 	orr.w	r3, r3, #4
 80149e4:	6313      	str	r3, [r2, #48]	; 0x30
 80149e6:	4b60      	ldr	r3, [pc, #384]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 80149e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ea:	f003 0304 	and.w	r3, r3, #4
 80149ee:	613b      	str	r3, [r7, #16]
 80149f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80149f2:	2300      	movs	r3, #0
 80149f4:	60fb      	str	r3, [r7, #12]
 80149f6:	4b5c      	ldr	r3, [pc, #368]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 80149f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149fa:	4a5b      	ldr	r2, [pc, #364]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 80149fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a00:	6313      	str	r3, [r2, #48]	; 0x30
 8014a02:	4b59      	ldr	r3, [pc, #356]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a0a:	60fb      	str	r3, [r7, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a0e:	2300      	movs	r3, #0
 8014a10:	60bb      	str	r3, [r7, #8]
 8014a12:	4b55      	ldr	r3, [pc, #340]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a16:	4a54      	ldr	r2, [pc, #336]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a18:	f043 0301 	orr.w	r3, r3, #1
 8014a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8014a1e:	4b52      	ldr	r3, [pc, #328]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a22:	f003 0301 	and.w	r3, r3, #1
 8014a26:	60bb      	str	r3, [r7, #8]
 8014a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	607b      	str	r3, [r7, #4]
 8014a2e:	4b4e      	ldr	r3, [pc, #312]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a32:	4a4d      	ldr	r2, [pc, #308]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a34:	f043 0302 	orr.w	r3, r3, #2
 8014a38:	6313      	str	r3, [r2, #48]	; 0x30
 8014a3a:	4b4b      	ldr	r3, [pc, #300]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3e:	f003 0302 	and.w	r3, r3, #2
 8014a42:	607b      	str	r3, [r7, #4]
 8014a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a46:	2300      	movs	r3, #0
 8014a48:	603b      	str	r3, [r7, #0]
 8014a4a:	4b47      	ldr	r3, [pc, #284]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4e:	4a46      	ldr	r2, [pc, #280]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a50:	f043 0308 	orr.w	r3, r3, #8
 8014a54:	6313      	str	r3, [r2, #48]	; 0x30
 8014a56:	4b44      	ldr	r3, [pc, #272]	; (8014b68 <MX_GPIO_Init+0x1a8>)
 8014a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a5a:	f003 0308 	and.w	r3, r3, #8
 8014a5e:	603b      	str	r3, [r7, #0]
 8014a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8014a62:	2200      	movs	r2, #0
 8014a64:	21ef      	movs	r1, #239	; 0xef
 8014a66:	4841      	ldr	r0, [pc, #260]	; (8014b6c <MX_GPIO_Init+0x1ac>)
 8014a68:	f7f2 f962 	bl	8006d30 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	2115      	movs	r1, #21
 8014a70:	483f      	ldr	r0, [pc, #252]	; (8014b70 <MX_GPIO_Init+0x1b0>)
 8014a72:	f7f2 f95d 	bl	8006d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8014a76:	2200      	movs	r2, #0
 8014a78:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8014a7c:	483d      	ldr	r0, [pc, #244]	; (8014b74 <MX_GPIO_Init+0x1b4>)
 8014a7e:	f7f2 f957 	bl	8006d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8014a82:	23cf      	movs	r3, #207	; 0xcf
 8014a84:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a86:	2301      	movs	r3, #1
 8014a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a92:	f107 0314 	add.w	r3, r7, #20
 8014a96:	4619      	mov	r1, r3
 8014a98:	4834      	ldr	r0, [pc, #208]	; (8014b6c <MX_GPIO_Init+0x1ac>)
 8014a9a:	f7f1 ff97 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 8014a9e:	2305      	movs	r3, #5
 8014aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014aa6:	2302      	movs	r3, #2
 8014aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014aae:	f107 0314 	add.w	r3, r7, #20
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	482e      	ldr	r0, [pc, #184]	; (8014b70 <MX_GPIO_Init+0x1b0>)
 8014ab6:	f7f1 ff89 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8014aba:	2310      	movs	r3, #16
 8014abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014abe:	2301      	movs	r3, #1
 8014ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8014aca:	f107 0314 	add.w	r3, r7, #20
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4827      	ldr	r0, [pc, #156]	; (8014b70 <MX_GPIO_Init+0x1b0>)
 8014ad2:	f7f1 ff7b 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 8014ad6:	23c0      	movs	r3, #192	; 0xc0
 8014ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014ada:	4b27      	ldr	r3, [pc, #156]	; (8014b78 <MX_GPIO_Init+0x1b8>)
 8014adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ae2:	f107 0314 	add.w	r3, r7, #20
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	4821      	ldr	r0, [pc, #132]	; (8014b70 <MX_GPIO_Init+0x1b0>)
 8014aea:	f7f1 ff6f 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 8014aee:	2320      	movs	r3, #32
 8014af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014af2:	2301      	movs	r3, #1
 8014af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014af6:	2302      	movs	r3, #2
 8014af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014afa:	2300      	movs	r3, #0
 8014afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 8014afe:	f107 0314 	add.w	r3, r7, #20
 8014b02:	4619      	mov	r1, r3
 8014b04:	4819      	ldr	r0, [pc, #100]	; (8014b6c <MX_GPIO_Init+0x1ac>)
 8014b06:	f7f1 ff61 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8014b0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8014b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b10:	2301      	movs	r3, #1
 8014b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b14:	2300      	movs	r3, #0
 8014b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014b1c:	f107 0314 	add.w	r3, r7, #20
 8014b20:	4619      	mov	r1, r3
 8014b22:	4814      	ldr	r0, [pc, #80]	; (8014b74 <MX_GPIO_Init+0x1b4>)
 8014b24:	f7f1 ff52 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 8014b28:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8014b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014b32:	2301      	movs	r3, #1
 8014b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b36:	f107 0314 	add.w	r3, r7, #20
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	480c      	ldr	r0, [pc, #48]	; (8014b70 <MX_GPIO_Init+0x1b0>)
 8014b3e:	f7f1 ff45 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8014b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014b4c:	2302      	movs	r3, #2
 8014b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b50:	2300      	movs	r3, #0
 8014b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8014b54:	f107 0314 	add.w	r3, r7, #20
 8014b58:	4619      	mov	r1, r3
 8014b5a:	4806      	ldr	r0, [pc, #24]	; (8014b74 <MX_GPIO_Init+0x1b4>)
 8014b5c:	f7f1 ff36 	bl	80069cc <HAL_GPIO_Init>

}
 8014b60:	bf00      	nop
 8014b62:	3728      	adds	r7, #40	; 0x28
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	40023800 	.word	0x40023800
 8014b6c:	40020800 	.word	0x40020800
 8014b70:	40020000 	.word	0x40020000
 8014b74:	40020400 	.word	0x40020400
 8014b78:	10110000 	.word	0x10110000

08014b7c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8014b7c:	b480      	push	{r7}
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	4b02      	ldr	r3, [pc, #8]	; (8014b8c <Get_I2C1_Instance+0x10>)
 8014b82:	4618      	mov	r0, r3
 8014b84:	46bd      	mov	sp, r7
 8014b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8a:	4770      	bx	lr
 8014b8c:	20006c1c 	.word	0x20006c1c

08014b90 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8014b90:	b480      	push	{r7}
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	4b02      	ldr	r3, [pc, #8]	; (8014ba0 <Get_SPI1_Instance+0x10>)
 8014b96:	4618      	mov	r0, r3
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	20006df4 	.word	0x20006df4

08014ba4 <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8014ba4:	b480      	push	{r7}
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	4b02      	ldr	r3, [pc, #8]	; (8014bb4 <Get_UART3_Instance+0x10>)
 8014baa:	4618      	mov	r0, r3
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr
 8014bb4:	20006bdc 	.word	0x20006bdc

08014bb8 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8014bb8:	b480      	push	{r7}
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	4b02      	ldr	r3, [pc, #8]	; (8014bc8 <Get_RTC_Instance+0x10>)
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr
 8014bc8:	20006cf0 	.word	0x20006cf0

08014bcc <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 8014bcc:	b480      	push	{r7}
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	4b02      	ldr	r3, [pc, #8]	; (8014bdc <Get_TIM5_Instance+0x10>)
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	20006c70 	.word	0x20006c70

08014be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014be0:	b480      	push	{r7}
 8014be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014be4:	bf00      	nop
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr

08014bee <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b084      	sub	sp, #16
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014bf6:	f7f1 fa11 	bl	800601c <HAL_GetTick>
 8014bfa:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014bfc:	e006      	b.n	8014c0c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014bfe:	f7fe f85f 	bl	8012cc0 <BSP_SD_GetCardState>
 8014c02:	4603      	mov	r3, r0
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d101      	bne.n	8014c0c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	e009      	b.n	8014c20 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014c0c:	f7f1 fa06 	bl	800601c <HAL_GetTick>
 8014c10:	4602      	mov	r2, r0
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	1ad3      	subs	r3, r2, r3
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d8f0      	bhi.n	8014bfe <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3710      	adds	r7, #16
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b082      	sub	sp, #8
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	4603      	mov	r3, r0
 8014c30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014c32:	4b0b      	ldr	r3, [pc, #44]	; (8014c60 <SD_CheckStatus+0x38>)
 8014c34:	2201      	movs	r2, #1
 8014c36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014c38:	f7fe f842 	bl	8012cc0 <BSP_SD_GetCardState>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d107      	bne.n	8014c52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014c42:	4b07      	ldr	r3, [pc, #28]	; (8014c60 <SD_CheckStatus+0x38>)
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	f023 0301 	bic.w	r3, r3, #1
 8014c4c:	b2da      	uxtb	r2, r3
 8014c4e:	4b04      	ldr	r3, [pc, #16]	; (8014c60 <SD_CheckStatus+0x38>)
 8014c50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014c52:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <SD_CheckStatus+0x38>)
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	b2db      	uxtb	r3, r3
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3708      	adds	r7, #8
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	20000130 	.word	0x20000130

08014c64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014c6e:	f7fd ffcd 	bl	8012c0c <BSP_SD_Init>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d107      	bne.n	8014c88 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014c78:	79fb      	ldrb	r3, [r7, #7]
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff ffd4 	bl	8014c28 <SD_CheckStatus>
 8014c80:	4603      	mov	r3, r0
 8014c82:	461a      	mov	r2, r3
 8014c84:	4b04      	ldr	r3, [pc, #16]	; (8014c98 <SD_initialize+0x34>)
 8014c86:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8014c88:	4b03      	ldr	r3, [pc, #12]	; (8014c98 <SD_initialize+0x34>)
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	b2db      	uxtb	r3, r3
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	20000130 	.word	0x20000130

08014c9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014ca6:	79fb      	ldrb	r3, [r7, #7]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7ff ffbd 	bl	8014c28 <SD_CheckStatus>
 8014cae:	4603      	mov	r3, r0
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3708      	adds	r7, #8
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}

08014cb8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b088      	sub	sp, #32
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	60b9      	str	r1, [r7, #8]
 8014cc0:	607a      	str	r2, [r7, #4]
 8014cc2:	603b      	str	r3, [r7, #0]
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014cc8:	2301      	movs	r3, #1
 8014cca:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014ccc:	f247 5030 	movw	r0, #30000	; 0x7530
 8014cd0:	f7ff ff8d 	bl	8014bee <SD_CheckStatusWithTimeout>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	da01      	bge.n	8014cde <SD_read+0x26>
  {
    return res;
 8014cda:	7ffb      	ldrb	r3, [r7, #31]
 8014cdc:	e08b      	b.n	8014df6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	f003 0303 	and.w	r3, r3, #3
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f040 8085 	bne.w	8014df4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	68b8      	ldr	r0, [r7, #8]
 8014cf0:	f7fd ffb2 	bl	8012c58 <BSP_SD_ReadBlocks_DMA>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d133      	bne.n	8014d62 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014cfa:	4b41      	ldr	r3, [pc, #260]	; (8014e00 <SD_read+0x148>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014d00:	f7f1 f98c 	bl	800601c <HAL_GetTick>
 8014d04:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014d06:	bf00      	nop
 8014d08:	4b3d      	ldr	r3, [pc, #244]	; (8014e00 <SD_read+0x148>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d108      	bne.n	8014d22 <SD_read+0x6a>
 8014d10:	f7f1 f984 	bl	800601c <HAL_GetTick>
 8014d14:	4602      	mov	r2, r0
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d9f2      	bls.n	8014d08 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8014d22:	4b37      	ldr	r3, [pc, #220]	; (8014e00 <SD_read+0x148>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d102      	bne.n	8014d30 <SD_read+0x78>
      {
        res = RES_ERROR;
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	77fb      	strb	r3, [r7, #31]
 8014d2e:	e061      	b.n	8014df4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8014d30:	4b33      	ldr	r3, [pc, #204]	; (8014e00 <SD_read+0x148>)
 8014d32:	2200      	movs	r2, #0
 8014d34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014d36:	f7f1 f971 	bl	800601c <HAL_GetTick>
 8014d3a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014d3c:	e007      	b.n	8014d4e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014d3e:	f7fd ffbf 	bl	8012cc0 <BSP_SD_GetCardState>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d102      	bne.n	8014d4e <SD_read+0x96>
          {
            res = RES_OK;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014d4c:	e052      	b.n	8014df4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014d4e:	f7f1 f965 	bl	800601c <HAL_GetTick>
 8014d52:	4602      	mov	r2, r0
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	f247 522f 	movw	r2, #29999	; 0x752f
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d9ee      	bls.n	8014d3e <SD_read+0x86>
 8014d60:	e048      	b.n	8014df4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8014d62:	2300      	movs	r3, #0
 8014d64:	61bb      	str	r3, [r7, #24]
 8014d66:	e034      	b.n	8014dd2 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	1c5a      	adds	r2, r3, #1
 8014d6c:	607a      	str	r2, [r7, #4]
 8014d6e:	2201      	movs	r2, #1
 8014d70:	4619      	mov	r1, r3
 8014d72:	4824      	ldr	r0, [pc, #144]	; (8014e04 <SD_read+0x14c>)
 8014d74:	f7fd ff70 	bl	8012c58 <BSP_SD_ReadBlocks_DMA>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8014d7c:	7fbb      	ldrb	r3, [r7, #30]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d12c      	bne.n	8014ddc <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8014d82:	4b1f      	ldr	r3, [pc, #124]	; (8014e00 <SD_read+0x148>)
 8014d84:	2200      	movs	r2, #0
 8014d86:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8014d88:	f7f1 f948 	bl	800601c <HAL_GetTick>
 8014d8c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014d8e:	bf00      	nop
 8014d90:	4b1b      	ldr	r3, [pc, #108]	; (8014e00 <SD_read+0x148>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d108      	bne.n	8014daa <SD_read+0xf2>
 8014d98:	f7f1 f940 	bl	800601c <HAL_GetTick>
 8014d9c:	4602      	mov	r2, r0
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	f247 522f 	movw	r2, #29999	; 0x752f
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d9f2      	bls.n	8014d90 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8014daa:	4b15      	ldr	r3, [pc, #84]	; (8014e00 <SD_read+0x148>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d016      	beq.n	8014de0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	4a13      	ldr	r2, [pc, #76]	; (8014e04 <SD_read+0x14c>)
 8014db6:	4618      	mov	r0, r3
 8014db8:	4611      	mov	r1, r2
 8014dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	f001 fa28 	bl	8016214 <memcpy>
          buff += BLOCKSIZE;
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014dca:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	3301      	adds	r3, #1
 8014dd0:	61bb      	str	r3, [r7, #24]
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	683a      	ldr	r2, [r7, #0]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d8c6      	bhi.n	8014d68 <SD_read+0xb0>
 8014dda:	e002      	b.n	8014de2 <SD_read+0x12a>
        }
        else
        {
          break;
 8014ddc:	bf00      	nop
 8014dde:	e000      	b.n	8014de2 <SD_read+0x12a>
            break;
 8014de0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	683a      	ldr	r2, [r7, #0]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d104      	bne.n	8014df4 <SD_read+0x13c>
 8014dea:	7fbb      	ldrb	r3, [r7, #30]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d101      	bne.n	8014df4 <SD_read+0x13c>
        res = RES_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8014df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3720      	adds	r7, #32
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	200007e4 	.word	0x200007e4
 8014e04:	200005e0 	.word	0x200005e0

08014e08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b088      	sub	sp, #32
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60b9      	str	r1, [r7, #8]
 8014e10:	607a      	str	r2, [r7, #4]
 8014e12:	603b      	str	r3, [r7, #0]
 8014e14:	4603      	mov	r3, r0
 8014e16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8014e1c:	4b4c      	ldr	r3, [pc, #304]	; (8014f50 <SD_write+0x148>)
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014e22:	f247 5030 	movw	r0, #30000	; 0x7530
 8014e26:	f7ff fee2 	bl	8014bee <SD_CheckStatusWithTimeout>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	da01      	bge.n	8014e34 <SD_write+0x2c>
  {
    return res;
 8014e30:	7ffb      	ldrb	r3, [r7, #31]
 8014e32:	e088      	b.n	8014f46 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	f003 0303 	and.w	r3, r3, #3
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	f040 8082 	bne.w	8014f44 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014e40:	683a      	ldr	r2, [r7, #0]
 8014e42:	6879      	ldr	r1, [r7, #4]
 8014e44:	68b8      	ldr	r0, [r7, #8]
 8014e46:	f7fd ff21 	bl	8012c8c <BSP_SD_WriteBlocks_DMA>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d130      	bne.n	8014eb2 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014e50:	f7f1 f8e4 	bl	800601c <HAL_GetTick>
 8014e54:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014e56:	bf00      	nop
 8014e58:	4b3d      	ldr	r3, [pc, #244]	; (8014f50 <SD_write+0x148>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d108      	bne.n	8014e72 <SD_write+0x6a>
 8014e60:	f7f1 f8dc 	bl	800601c <HAL_GetTick>
 8014e64:	4602      	mov	r2, r0
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	1ad3      	subs	r3, r2, r3
 8014e6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d9f2      	bls.n	8014e58 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8014e72:	4b37      	ldr	r3, [pc, #220]	; (8014f50 <SD_write+0x148>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d102      	bne.n	8014e80 <SD_write+0x78>
      {
        res = RES_ERROR;
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	77fb      	strb	r3, [r7, #31]
 8014e7e:	e061      	b.n	8014f44 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8014e80:	4b33      	ldr	r3, [pc, #204]	; (8014f50 <SD_write+0x148>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014e86:	f7f1 f8c9 	bl	800601c <HAL_GetTick>
 8014e8a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014e8c:	e007      	b.n	8014e9e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014e8e:	f7fd ff17 	bl	8012cc0 <BSP_SD_GetCardState>
 8014e92:	4603      	mov	r3, r0
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d102      	bne.n	8014e9e <SD_write+0x96>
          {
            res = RES_OK;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	77fb      	strb	r3, [r7, #31]
            break;
 8014e9c:	e052      	b.n	8014f44 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014e9e:	f7f1 f8bd 	bl	800601c <HAL_GetTick>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	f247 522f 	movw	r2, #29999	; 0x752f
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d9ee      	bls.n	8014e8e <SD_write+0x86>
 8014eb0:	e048      	b.n	8014f44 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	61bb      	str	r3, [r7, #24]
 8014eb6:	e034      	b.n	8014f22 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8014eb8:	4b25      	ldr	r3, [pc, #148]	; (8014f50 <SD_write+0x148>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	1c5a      	adds	r2, r3, #1
 8014ec2:	607a      	str	r2, [r7, #4]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4822      	ldr	r0, [pc, #136]	; (8014f54 <SD_write+0x14c>)
 8014eca:	f7fd fedf 	bl	8012c8c <BSP_SD_WriteBlocks_DMA>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8014ed2:	7fbb      	ldrb	r3, [r7, #30]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d129      	bne.n	8014f2c <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8014ed8:	f7f1 f8a0 	bl	800601c <HAL_GetTick>
 8014edc:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014ede:	bf00      	nop
 8014ee0:	4b1b      	ldr	r3, [pc, #108]	; (8014f50 <SD_write+0x148>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d108      	bne.n	8014efa <SD_write+0xf2>
 8014ee8:	f7f1 f898 	bl	800601c <HAL_GetTick>
 8014eec:	4602      	mov	r2, r0
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	1ad3      	subs	r3, r2, r3
 8014ef2:	f247 522f 	movw	r2, #29999	; 0x752f
 8014ef6:	4293      	cmp	r3, r2
 8014ef8:	d9f2      	bls.n	8014ee0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8014efa:	4b15      	ldr	r3, [pc, #84]	; (8014f50 <SD_write+0x148>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d016      	beq.n	8014f30 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	4a13      	ldr	r2, [pc, #76]	; (8014f54 <SD_write+0x14c>)
 8014f06:	4618      	mov	r0, r3
 8014f08:	4611      	mov	r1, r2
 8014f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f0e:	461a      	mov	r2, r3
 8014f10:	f001 f980 	bl	8016214 <memcpy>
          buff += BLOCKSIZE;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014f1a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	61bb      	str	r3, [r7, #24]
 8014f22:	69bb      	ldr	r3, [r7, #24]
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d8c6      	bhi.n	8014eb8 <SD_write+0xb0>
 8014f2a:	e002      	b.n	8014f32 <SD_write+0x12a>
        }
        else
        {
          break;
 8014f2c:	bf00      	nop
 8014f2e:	e000      	b.n	8014f32 <SD_write+0x12a>
            break;
 8014f30:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	683a      	ldr	r2, [r7, #0]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d104      	bne.n	8014f44 <SD_write+0x13c>
 8014f3a:	7fbb      	ldrb	r3, [r7, #30]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d101      	bne.n	8014f44 <SD_write+0x13c>
        res = RES_OK;
 8014f40:	2300      	movs	r3, #0
 8014f42:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8014f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3720      	adds	r7, #32
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	200007e0 	.word	0x200007e0
 8014f54:	200005e0 	.word	0x200005e0

08014f58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08c      	sub	sp, #48	; 0x30
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	603a      	str	r2, [r7, #0]
 8014f62:	71fb      	strb	r3, [r7, #7]
 8014f64:	460b      	mov	r3, r1
 8014f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014f68:	2301      	movs	r3, #1
 8014f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014f6e:	4b25      	ldr	r3, [pc, #148]	; (8015004 <SD_ioctl+0xac>)
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	f003 0301 	and.w	r3, r3, #1
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d001      	beq.n	8014f80 <SD_ioctl+0x28>
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e03c      	b.n	8014ffa <SD_ioctl+0xa2>

  switch (cmd)
 8014f80:	79bb      	ldrb	r3, [r7, #6]
 8014f82:	2b03      	cmp	r3, #3
 8014f84:	d834      	bhi.n	8014ff0 <SD_ioctl+0x98>
 8014f86:	a201      	add	r2, pc, #4	; (adr r2, 8014f8c <SD_ioctl+0x34>)
 8014f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f8c:	08014f9d 	.word	0x08014f9d
 8014f90:	08014fa5 	.word	0x08014fa5
 8014f94:	08014fbd 	.word	0x08014fbd
 8014f98:	08014fd7 	.word	0x08014fd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fa2:	e028      	b.n	8014ff6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014fa4:	f107 030c 	add.w	r3, r7, #12
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7fd fe99 	bl	8012ce0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fba:	e01c      	b.n	8014ff6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014fbc:	f107 030c 	add.w	r3, r7, #12
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7fd fe8d 	bl	8012ce0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc8:	b29a      	uxth	r2, r3
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fd4:	e00f      	b.n	8014ff6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014fd6:	f107 030c 	add.w	r3, r7, #12
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fd fe80 	bl	8012ce0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe2:	0a5a      	lsrs	r2, r3, #9
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fee:	e002      	b.n	8014ff6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014ff0:	2304      	movs	r3, #4
 8014ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3730      	adds	r7, #48	; 0x30
 8014ffe:	46bd      	mov	sp, r7
 8015000:	bd80      	pop	{r7, pc}
 8015002:	bf00      	nop
 8015004:	20000130 	.word	0x20000130

08015008 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015008:	b480      	push	{r7}
 801500a:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 801500c:	4b03      	ldr	r3, [pc, #12]	; (801501c <BSP_SD_WriteCpltCallback+0x14>)
 801500e:	2201      	movs	r2, #1
 8015010:	601a      	str	r2, [r3, #0]
}
 8015012:	bf00      	nop
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr
 801501c:	200007e0 	.word	0x200007e0

08015020 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015024:	4b03      	ldr	r3, [pc, #12]	; (8015034 <BSP_SD_ReadCpltCallback+0x14>)
 8015026:	2201      	movs	r2, #1
 8015028:	601a      	str	r2, [r3, #0]
}
 801502a:	bf00      	nop
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr
 8015034:	200007e4 	.word	0x200007e4

08015038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801503e:	2300      	movs	r3, #0
 8015040:	607b      	str	r3, [r7, #4]
 8015042:	4b10      	ldr	r3, [pc, #64]	; (8015084 <HAL_MspInit+0x4c>)
 8015044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015046:	4a0f      	ldr	r2, [pc, #60]	; (8015084 <HAL_MspInit+0x4c>)
 8015048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801504c:	6453      	str	r3, [r2, #68]	; 0x44
 801504e:	4b0d      	ldr	r3, [pc, #52]	; (8015084 <HAL_MspInit+0x4c>)
 8015050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015056:	607b      	str	r3, [r7, #4]
 8015058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801505a:	2300      	movs	r3, #0
 801505c:	603b      	str	r3, [r7, #0]
 801505e:	4b09      	ldr	r3, [pc, #36]	; (8015084 <HAL_MspInit+0x4c>)
 8015060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015062:	4a08      	ldr	r2, [pc, #32]	; (8015084 <HAL_MspInit+0x4c>)
 8015064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015068:	6413      	str	r3, [r2, #64]	; 0x40
 801506a:	4b06      	ldr	r3, [pc, #24]	; (8015084 <HAL_MspInit+0x4c>)
 801506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015072:	603b      	str	r3, [r7, #0]
 8015074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015076:	bf00      	nop
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	40023800 	.word	0x40023800

08015088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b08a      	sub	sp, #40	; 0x28
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015090:	f107 0314 	add.w	r3, r7, #20
 8015094:	2200      	movs	r2, #0
 8015096:	601a      	str	r2, [r3, #0]
 8015098:	605a      	str	r2, [r3, #4]
 801509a:	609a      	str	r2, [r3, #8]
 801509c:	60da      	str	r2, [r3, #12]
 801509e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	4a19      	ldr	r2, [pc, #100]	; (801510c <HAL_I2C_MspInit+0x84>)
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d12b      	bne.n	8015102 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80150aa:	2300      	movs	r3, #0
 80150ac:	613b      	str	r3, [r7, #16]
 80150ae:	4b18      	ldr	r3, [pc, #96]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150b2:	4a17      	ldr	r2, [pc, #92]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150b4:	f043 0302 	orr.w	r3, r3, #2
 80150b8:	6313      	str	r3, [r2, #48]	; 0x30
 80150ba:	4b15      	ldr	r3, [pc, #84]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150be:	f003 0302 	and.w	r3, r3, #2
 80150c2:	613b      	str	r3, [r7, #16]
 80150c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80150c6:	23c0      	movs	r3, #192	; 0xc0
 80150c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80150ca:	2312      	movs	r3, #18
 80150cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80150ce:	2301      	movs	r3, #1
 80150d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80150d2:	2303      	movs	r3, #3
 80150d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80150d6:	2304      	movs	r3, #4
 80150d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80150da:	f107 0314 	add.w	r3, r7, #20
 80150de:	4619      	mov	r1, r3
 80150e0:	480c      	ldr	r0, [pc, #48]	; (8015114 <HAL_I2C_MspInit+0x8c>)
 80150e2:	f7f1 fc73 	bl	80069cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80150e6:	2300      	movs	r3, #0
 80150e8:	60fb      	str	r3, [r7, #12]
 80150ea:	4b09      	ldr	r3, [pc, #36]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ee:	4a08      	ldr	r2, [pc, #32]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150f4:	6413      	str	r3, [r2, #64]	; 0x40
 80150f6:	4b06      	ldr	r3, [pc, #24]	; (8015110 <HAL_I2C_MspInit+0x88>)
 80150f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80150fe:	60fb      	str	r3, [r7, #12]
 8015100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8015102:	bf00      	nop
 8015104:	3728      	adds	r7, #40	; 0x28
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	40005400 	.word	0x40005400
 8015110:	40023800 	.word	0x40023800
 8015114:	40020400 	.word	0x40020400

08015118 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015118:	b480      	push	{r7}
 801511a:	b083      	sub	sp, #12
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4a05      	ldr	r2, [pc, #20]	; (801513c <HAL_RTC_MspInit+0x24>)
 8015126:	4293      	cmp	r3, r2
 8015128:	d102      	bne.n	8015130 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801512a:	4b05      	ldr	r3, [pc, #20]	; (8015140 <HAL_RTC_MspInit+0x28>)
 801512c:	2201      	movs	r2, #1
 801512e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015130:	bf00      	nop
 8015132:	370c      	adds	r7, #12
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr
 801513c:	40002800 	.word	0x40002800
 8015140:	42470e3c 	.word	0x42470e3c

08015144 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b08a      	sub	sp, #40	; 0x28
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801514c:	f107 0314 	add.w	r3, r7, #20
 8015150:	2200      	movs	r2, #0
 8015152:	601a      	str	r2, [r3, #0]
 8015154:	605a      	str	r2, [r3, #4]
 8015156:	609a      	str	r2, [r3, #8]
 8015158:	60da      	str	r2, [r3, #12]
 801515a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4a70      	ldr	r2, [pc, #448]	; (8015324 <HAL_SD_MspInit+0x1e0>)
 8015162:	4293      	cmp	r3, r2
 8015164:	f040 80da 	bne.w	801531c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8015168:	2300      	movs	r3, #0
 801516a:	613b      	str	r3, [r7, #16]
 801516c:	4b6e      	ldr	r3, [pc, #440]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 801516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015170:	4a6d      	ldr	r2, [pc, #436]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 8015172:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015176:	6453      	str	r3, [r2, #68]	; 0x44
 8015178:	4b6b      	ldr	r3, [pc, #428]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 801517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801517c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015180:	613b      	str	r3, [r7, #16]
 8015182:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015184:	2300      	movs	r3, #0
 8015186:	60fb      	str	r3, [r7, #12]
 8015188:	4b67      	ldr	r3, [pc, #412]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 801518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801518c:	4a66      	ldr	r2, [pc, #408]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 801518e:	f043 0304 	orr.w	r3, r3, #4
 8015192:	6313      	str	r3, [r2, #48]	; 0x30
 8015194:	4b64      	ldr	r3, [pc, #400]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 8015196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015198:	f003 0304 	and.w	r3, r3, #4
 801519c:	60fb      	str	r3, [r7, #12]
 801519e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80151a0:	2300      	movs	r3, #0
 80151a2:	60bb      	str	r3, [r7, #8]
 80151a4:	4b60      	ldr	r3, [pc, #384]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 80151a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a8:	4a5f      	ldr	r2, [pc, #380]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 80151aa:	f043 0308 	orr.w	r3, r3, #8
 80151ae:	6313      	str	r3, [r2, #48]	; 0x30
 80151b0:	4b5d      	ldr	r3, [pc, #372]	; (8015328 <HAL_SD_MspInit+0x1e4>)
 80151b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151b4:	f003 0308 	and.w	r3, r3, #8
 80151b8:	60bb      	str	r3, [r7, #8]
 80151ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80151bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80151c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151c2:	2302      	movs	r3, #2
 80151c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80151c6:	2301      	movs	r3, #1
 80151c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151ca:	2303      	movs	r3, #3
 80151cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80151ce:	230c      	movs	r3, #12
 80151d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80151d2:	f107 0314 	add.w	r3, r7, #20
 80151d6:	4619      	mov	r1, r3
 80151d8:	4854      	ldr	r0, [pc, #336]	; (801532c <HAL_SD_MspInit+0x1e8>)
 80151da:	f7f1 fbf7 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80151de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80151e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151e4:	2302      	movs	r3, #2
 80151e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151e8:	2300      	movs	r3, #0
 80151ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151ec:	2303      	movs	r3, #3
 80151ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80151f0:	230c      	movs	r3, #12
 80151f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80151f4:	f107 0314 	add.w	r3, r7, #20
 80151f8:	4619      	mov	r1, r3
 80151fa:	484c      	ldr	r0, [pc, #304]	; (801532c <HAL_SD_MspInit+0x1e8>)
 80151fc:	f7f1 fbe6 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015200:	2304      	movs	r3, #4
 8015202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015204:	2302      	movs	r3, #2
 8015206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015208:	2301      	movs	r3, #1
 801520a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801520c:	2303      	movs	r3, #3
 801520e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015210:	230c      	movs	r3, #12
 8015212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015214:	f107 0314 	add.w	r3, r7, #20
 8015218:	4619      	mov	r1, r3
 801521a:	4845      	ldr	r0, [pc, #276]	; (8015330 <HAL_SD_MspInit+0x1ec>)
 801521c:	f7f1 fbd6 	bl	80069cc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8015220:	4b44      	ldr	r3, [pc, #272]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015222:	4a45      	ldr	r2, [pc, #276]	; (8015338 <HAL_SD_MspInit+0x1f4>)
 8015224:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8015226:	4b43      	ldr	r3, [pc, #268]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801522c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801522e:	4b41      	ldr	r3, [pc, #260]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015230:	2200      	movs	r2, #0
 8015232:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015234:	4b3f      	ldr	r3, [pc, #252]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015236:	2200      	movs	r2, #0
 8015238:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 801523a:	4b3e      	ldr	r3, [pc, #248]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801523c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015240:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015242:	4b3c      	ldr	r3, [pc, #240]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015248:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801524a:	4b3a      	ldr	r3, [pc, #232]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801524c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015250:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8015252:	4b38      	ldr	r3, [pc, #224]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015254:	2220      	movs	r2, #32
 8015256:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015258:	4b36      	ldr	r3, [pc, #216]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801525a:	2200      	movs	r2, #0
 801525c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801525e:	4b35      	ldr	r3, [pc, #212]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015260:	2204      	movs	r2, #4
 8015262:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015264:	4b33      	ldr	r3, [pc, #204]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015266:	2203      	movs	r2, #3
 8015268:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 801526a:	4b32      	ldr	r3, [pc, #200]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801526c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015270:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015272:	4b30      	ldr	r3, [pc, #192]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015274:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015278:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 801527a:	482e      	ldr	r0, [pc, #184]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801527c:	f7f1 f80e 	bl	800629c <HAL_DMA_Init>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d001      	beq.n	801528a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8015286:	f7ff fcab 	bl	8014be0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	4a29      	ldr	r2, [pc, #164]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 801528e:	63da      	str	r2, [r3, #60]	; 0x3c
 8015290:	4a28      	ldr	r2, [pc, #160]	; (8015334 <HAL_SD_MspInit+0x1f0>)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8015296:	4b29      	ldr	r3, [pc, #164]	; (801533c <HAL_SD_MspInit+0x1f8>)
 8015298:	4a29      	ldr	r2, [pc, #164]	; (8015340 <HAL_SD_MspInit+0x1fc>)
 801529a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 801529c:	4b27      	ldr	r3, [pc, #156]	; (801533c <HAL_SD_MspInit+0x1f8>)
 801529e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80152a2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80152a4:	4b25      	ldr	r3, [pc, #148]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152a6:	2240      	movs	r2, #64	; 0x40
 80152a8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80152aa:	4b24      	ldr	r3, [pc, #144]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80152b0:	4b22      	ldr	r3, [pc, #136]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152b6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80152b8:	4b20      	ldr	r3, [pc, #128]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80152be:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80152c0:	4b1e      	ldr	r3, [pc, #120]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80152c6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80152c8:	4b1c      	ldr	r3, [pc, #112]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152ca:	2220      	movs	r2, #32
 80152cc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80152ce:	4b1b      	ldr	r3, [pc, #108]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152d0:	2200      	movs	r2, #0
 80152d2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80152d4:	4b19      	ldr	r3, [pc, #100]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152d6:	2204      	movs	r2, #4
 80152d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80152da:	4b18      	ldr	r3, [pc, #96]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152dc:	2203      	movs	r2, #3
 80152de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80152e0:	4b16      	ldr	r3, [pc, #88]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80152e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80152e8:	4b14      	ldr	r3, [pc, #80]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80152ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80152f0:	4812      	ldr	r0, [pc, #72]	; (801533c <HAL_SD_MspInit+0x1f8>)
 80152f2:	f7f0 ffd3 	bl	800629c <HAL_DMA_Init>
 80152f6:	4603      	mov	r3, r0
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80152fc:	f7ff fc70 	bl	8014be0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4a0e      	ldr	r2, [pc, #56]	; (801533c <HAL_SD_MspInit+0x1f8>)
 8015304:	641a      	str	r2, [r3, #64]	; 0x40
 8015306:	4a0d      	ldr	r2, [pc, #52]	; (801533c <HAL_SD_MspInit+0x1f8>)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 801530c:	2200      	movs	r2, #0
 801530e:	2100      	movs	r1, #0
 8015310:	2031      	movs	r0, #49	; 0x31
 8015312:	f7f0 ff8c 	bl	800622e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8015316:	2031      	movs	r0, #49	; 0x31
 8015318:	f7f0 ffa5 	bl	8006266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 801531c:	bf00      	nop
 801531e:	3728      	adds	r7, #40	; 0x28
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	40012c00 	.word	0x40012c00
 8015328:	40023800 	.word	0x40023800
 801532c:	40020800 	.word	0x40020800
 8015330:	40020c00 	.word	0x40020c00
 8015334:	20006b7c 	.word	0x20006b7c
 8015338:	40026458 	.word	0x40026458
 801533c:	20006d10 	.word	0x20006d10
 8015340:	400264a0 	.word	0x400264a0

08015344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b08a      	sub	sp, #40	; 0x28
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801534c:	f107 0314 	add.w	r3, r7, #20
 8015350:	2200      	movs	r2, #0
 8015352:	601a      	str	r2, [r3, #0]
 8015354:	605a      	str	r2, [r3, #4]
 8015356:	609a      	str	r2, [r3, #8]
 8015358:	60da      	str	r2, [r3, #12]
 801535a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a19      	ldr	r2, [pc, #100]	; (80153c8 <HAL_SPI_MspInit+0x84>)
 8015362:	4293      	cmp	r3, r2
 8015364:	d12b      	bne.n	80153be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8015366:	2300      	movs	r3, #0
 8015368:	613b      	str	r3, [r7, #16]
 801536a:	4b18      	ldr	r3, [pc, #96]	; (80153cc <HAL_SPI_MspInit+0x88>)
 801536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801536e:	4a17      	ldr	r2, [pc, #92]	; (80153cc <HAL_SPI_MspInit+0x88>)
 8015370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015374:	6453      	str	r3, [r2, #68]	; 0x44
 8015376:	4b15      	ldr	r3, [pc, #84]	; (80153cc <HAL_SPI_MspInit+0x88>)
 8015378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801537a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801537e:	613b      	str	r3, [r7, #16]
 8015380:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015382:	2300      	movs	r3, #0
 8015384:	60fb      	str	r3, [r7, #12]
 8015386:	4b11      	ldr	r3, [pc, #68]	; (80153cc <HAL_SPI_MspInit+0x88>)
 8015388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801538a:	4a10      	ldr	r2, [pc, #64]	; (80153cc <HAL_SPI_MspInit+0x88>)
 801538c:	f043 0302 	orr.w	r3, r3, #2
 8015390:	6313      	str	r3, [r2, #48]	; 0x30
 8015392:	4b0e      	ldr	r3, [pc, #56]	; (80153cc <HAL_SPI_MspInit+0x88>)
 8015394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015396:	f003 0302 	and.w	r3, r3, #2
 801539a:	60fb      	str	r3, [r7, #12]
 801539c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 801539e:	2338      	movs	r3, #56	; 0x38
 80153a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153a2:	2302      	movs	r3, #2
 80153a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153a6:	2300      	movs	r3, #0
 80153a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80153aa:	2303      	movs	r3, #3
 80153ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80153ae:	2305      	movs	r3, #5
 80153b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80153b2:	f107 0314 	add.w	r3, r7, #20
 80153b6:	4619      	mov	r1, r3
 80153b8:	4805      	ldr	r0, [pc, #20]	; (80153d0 <HAL_SPI_MspInit+0x8c>)
 80153ba:	f7f1 fb07 	bl	80069cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80153be:	bf00      	nop
 80153c0:	3728      	adds	r7, #40	; 0x28
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	40013000 	.word	0x40013000
 80153cc:	40023800 	.word	0x40023800
 80153d0:	40020400 	.word	0x40020400

080153d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80153d4:	b480      	push	{r7}
 80153d6:	b087      	sub	sp, #28
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80153e4:	d10e      	bne.n	8015404 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80153e6:	2300      	movs	r3, #0
 80153e8:	617b      	str	r3, [r7, #20]
 80153ea:	4b1d      	ldr	r3, [pc, #116]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 80153ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153ee:	4a1c      	ldr	r2, [pc, #112]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 80153f0:	f043 0301 	orr.w	r3, r3, #1
 80153f4:	6413      	str	r3, [r2, #64]	; 0x40
 80153f6:	4b1a      	ldr	r3, [pc, #104]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 80153f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153fa:	f003 0301 	and.w	r3, r3, #1
 80153fe:	617b      	str	r3, [r7, #20]
 8015400:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8015402:	e026      	b.n	8015452 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	4a16      	ldr	r2, [pc, #88]	; (8015464 <HAL_TIM_Base_MspInit+0x90>)
 801540a:	4293      	cmp	r3, r2
 801540c:	d10e      	bne.n	801542c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801540e:	2300      	movs	r3, #0
 8015410:	613b      	str	r3, [r7, #16]
 8015412:	4b13      	ldr	r3, [pc, #76]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 8015414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015416:	4a12      	ldr	r2, [pc, #72]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 8015418:	f043 0302 	orr.w	r3, r3, #2
 801541c:	6413      	str	r3, [r2, #64]	; 0x40
 801541e:	4b10      	ldr	r3, [pc, #64]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 8015420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015422:	f003 0302 	and.w	r3, r3, #2
 8015426:	613b      	str	r3, [r7, #16]
 8015428:	693b      	ldr	r3, [r7, #16]
}
 801542a:	e012      	b.n	8015452 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	4a0d      	ldr	r2, [pc, #52]	; (8015468 <HAL_TIM_Base_MspInit+0x94>)
 8015432:	4293      	cmp	r3, r2
 8015434:	d10d      	bne.n	8015452 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8015436:	2300      	movs	r3, #0
 8015438:	60fb      	str	r3, [r7, #12]
 801543a:	4b09      	ldr	r3, [pc, #36]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 801543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801543e:	4a08      	ldr	r2, [pc, #32]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 8015440:	f043 0308 	orr.w	r3, r3, #8
 8015444:	6413      	str	r3, [r2, #64]	; 0x40
 8015446:	4b06      	ldr	r3, [pc, #24]	; (8015460 <HAL_TIM_Base_MspInit+0x8c>)
 8015448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801544a:	f003 0308 	and.w	r3, r3, #8
 801544e:	60fb      	str	r3, [r7, #12]
 8015450:	68fb      	ldr	r3, [r7, #12]
}
 8015452:	bf00      	nop
 8015454:	371c      	adds	r7, #28
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr
 801545e:	bf00      	nop
 8015460:	40023800 	.word	0x40023800
 8015464:	40000400 	.word	0x40000400
 8015468:	40000c00 	.word	0x40000c00

0801546c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b08a      	sub	sp, #40	; 0x28
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015474:	f107 0314 	add.w	r3, r7, #20
 8015478:	2200      	movs	r2, #0
 801547a:	601a      	str	r2, [r3, #0]
 801547c:	605a      	str	r2, [r3, #4]
 801547e:	609a      	str	r2, [r3, #8]
 8015480:	60da      	str	r2, [r3, #12]
 8015482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	4a24      	ldr	r2, [pc, #144]	; (801551c <HAL_TIM_MspPostInit+0xb0>)
 801548a:	4293      	cmp	r3, r2
 801548c:	d11e      	bne.n	80154cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801548e:	2300      	movs	r3, #0
 8015490:	613b      	str	r3, [r7, #16]
 8015492:	4b23      	ldr	r3, [pc, #140]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 8015494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015496:	4a22      	ldr	r2, [pc, #136]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 8015498:	f043 0302 	orr.w	r3, r3, #2
 801549c:	6313      	str	r3, [r2, #48]	; 0x30
 801549e:	4b20      	ldr	r3, [pc, #128]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 80154a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154a2:	f003 0302 	and.w	r3, r3, #2
 80154a6:	613b      	str	r3, [r7, #16]
 80154a8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P7B1_Pin;
 80154aa:	2303      	movs	r3, #3
 80154ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154ae:	2302      	movs	r3, #2
 80154b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154b2:	2300      	movs	r3, #0
 80154b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80154b6:	2300      	movs	r3, #0
 80154b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80154ba:	2302      	movs	r3, #2
 80154bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80154be:	f107 0314 	add.w	r3, r7, #20
 80154c2:	4619      	mov	r1, r3
 80154c4:	4817      	ldr	r0, [pc, #92]	; (8015524 <HAL_TIM_MspPostInit+0xb8>)
 80154c6:	f7f1 fa81 	bl	80069cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80154ca:	e022      	b.n	8015512 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	4a15      	ldr	r2, [pc, #84]	; (8015528 <HAL_TIM_MspPostInit+0xbc>)
 80154d2:	4293      	cmp	r3, r2
 80154d4:	d11d      	bne.n	8015512 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80154d6:	2300      	movs	r3, #0
 80154d8:	60fb      	str	r3, [r7, #12]
 80154da:	4b11      	ldr	r3, [pc, #68]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 80154dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154de:	4a10      	ldr	r2, [pc, #64]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 80154e0:	f043 0301 	orr.w	r3, r3, #1
 80154e4:	6313      	str	r3, [r2, #48]	; 0x30
 80154e6:	4b0e      	ldr	r3, [pc, #56]	; (8015520 <HAL_TIM_MspPostInit+0xb4>)
 80154e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ea:	f003 0301 	and.w	r3, r3, #1
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 80154f2:	230a      	movs	r3, #10
 80154f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154f6:	2302      	movs	r3, #2
 80154f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154fa:	2300      	movs	r3, #0
 80154fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80154fe:	2300      	movs	r3, #0
 8015500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8015502:	2302      	movs	r3, #2
 8015504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015506:	f107 0314 	add.w	r3, r7, #20
 801550a:	4619      	mov	r1, r3
 801550c:	4807      	ldr	r0, [pc, #28]	; (801552c <HAL_TIM_MspPostInit+0xc0>)
 801550e:	f7f1 fa5d 	bl	80069cc <HAL_GPIO_Init>
}
 8015512:	bf00      	nop
 8015514:	3728      	adds	r7, #40	; 0x28
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	40000400 	.word	0x40000400
 8015520:	40023800 	.word	0x40023800
 8015524:	40020400 	.word	0x40020400
 8015528:	40000c00 	.word	0x40000c00
 801552c:	40020000 	.word	0x40020000

08015530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b08a      	sub	sp, #40	; 0x28
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015538:	f107 0314 	add.w	r3, r7, #20
 801553c:	2200      	movs	r2, #0
 801553e:	601a      	str	r2, [r3, #0]
 8015540:	605a      	str	r2, [r3, #4]
 8015542:	609a      	str	r2, [r3, #8]
 8015544:	60da      	str	r2, [r3, #12]
 8015546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	4a19      	ldr	r2, [pc, #100]	; (80155b4 <HAL_UART_MspInit+0x84>)
 801554e:	4293      	cmp	r3, r2
 8015550:	d12c      	bne.n	80155ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8015552:	2300      	movs	r3, #0
 8015554:	613b      	str	r3, [r7, #16]
 8015556:	4b18      	ldr	r3, [pc, #96]	; (80155b8 <HAL_UART_MspInit+0x88>)
 8015558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801555a:	4a17      	ldr	r2, [pc, #92]	; (80155b8 <HAL_UART_MspInit+0x88>)
 801555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015560:	6413      	str	r3, [r2, #64]	; 0x40
 8015562:	4b15      	ldr	r3, [pc, #84]	; (80155b8 <HAL_UART_MspInit+0x88>)
 8015564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801556a:	613b      	str	r3, [r7, #16]
 801556c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801556e:	2300      	movs	r3, #0
 8015570:	60fb      	str	r3, [r7, #12]
 8015572:	4b11      	ldr	r3, [pc, #68]	; (80155b8 <HAL_UART_MspInit+0x88>)
 8015574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015576:	4a10      	ldr	r2, [pc, #64]	; (80155b8 <HAL_UART_MspInit+0x88>)
 8015578:	f043 0302 	orr.w	r3, r3, #2
 801557c:	6313      	str	r3, [r2, #48]	; 0x30
 801557e:	4b0e      	ldr	r3, [pc, #56]	; (80155b8 <HAL_UART_MspInit+0x88>)
 8015580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015582:	f003 0302 	and.w	r3, r3, #2
 8015586:	60fb      	str	r3, [r7, #12]
 8015588:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 801558a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801558e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015590:	2302      	movs	r3, #2
 8015592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015594:	2301      	movs	r3, #1
 8015596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015598:	2303      	movs	r3, #3
 801559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801559c:	2307      	movs	r3, #7
 801559e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80155a0:	f107 0314 	add.w	r3, r7, #20
 80155a4:	4619      	mov	r1, r3
 80155a6:	4805      	ldr	r0, [pc, #20]	; (80155bc <HAL_UART_MspInit+0x8c>)
 80155a8:	f7f1 fa10 	bl	80069cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80155ac:	bf00      	nop
 80155ae:	3728      	adds	r7, #40	; 0x28
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	40004800 	.word	0x40004800
 80155b8:	40023800 	.word	0x40023800
 80155bc:	40020400 	.word	0x40020400

080155c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80155c0:	b480      	push	{r7}
 80155c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80155c4:	bf00      	nop
 80155c6:	46bd      	mov	sp, r7
 80155c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155cc:	4770      	bx	lr

080155ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80155ce:	b480      	push	{r7}
 80155d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80155d2:	e7fe      	b.n	80155d2 <HardFault_Handler+0x4>

080155d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80155d4:	b480      	push	{r7}
 80155d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80155d8:	e7fe      	b.n	80155d8 <MemManage_Handler+0x4>

080155da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80155da:	b480      	push	{r7}
 80155dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80155de:	e7fe      	b.n	80155de <BusFault_Handler+0x4>

080155e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80155e0:	b480      	push	{r7}
 80155e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80155e4:	e7fe      	b.n	80155e4 <UsageFault_Handler+0x4>

080155e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80155e6:	b480      	push	{r7}
 80155e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80155ea:	bf00      	nop
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80155f4:	b480      	push	{r7}
 80155f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80155f8:	bf00      	nop
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr

08015602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015602:	b480      	push	{r7}
 8015604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015606:	bf00      	nop
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr

08015610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015614:	f7f0 fcee 	bl	8005ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015618:	bf00      	nop
 801561a:	bd80      	pop	{r7, pc}

0801561c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8015620:	4802      	ldr	r0, [pc, #8]	; (801562c <SDIO_IRQHandler+0x10>)
 8015622:	f7f4 fd7f 	bl	800a124 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8015626:	bf00      	nop
 8015628:	bd80      	pop	{r7, pc}
 801562a:	bf00      	nop
 801562c:	20006d70 	.word	0x20006d70

08015630 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8015634:	4802      	ldr	r0, [pc, #8]	; (8015640 <DMA2_Stream3_IRQHandler+0x10>)
 8015636:	f7f0 ff61 	bl	80064fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801563a:	bf00      	nop
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	20006b7c 	.word	0x20006b7c

08015644 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8015648:	4802      	ldr	r0, [pc, #8]	; (8015654 <OTG_FS_IRQHandler+0x10>)
 801564a:	f7f2 fc74 	bl	8007f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801564e:	bf00      	nop
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	20008128 	.word	0x20008128

08015658 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 801565c:	4802      	ldr	r0, [pc, #8]	; (8015668 <DMA2_Stream6_IRQHandler+0x10>)
 801565e:	f7f0 ff4d 	bl	80064fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8015662:	bf00      	nop
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	20006d10 	.word	0x20006d10

0801566c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015674:	4b11      	ldr	r3, [pc, #68]	; (80156bc <_sbrk+0x50>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d102      	bne.n	8015682 <_sbrk+0x16>
		heap_end = &end;
 801567c:	4b0f      	ldr	r3, [pc, #60]	; (80156bc <_sbrk+0x50>)
 801567e:	4a10      	ldr	r2, [pc, #64]	; (80156c0 <_sbrk+0x54>)
 8015680:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8015682:	4b0e      	ldr	r3, [pc, #56]	; (80156bc <_sbrk+0x50>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8015688:	4b0c      	ldr	r3, [pc, #48]	; (80156bc <_sbrk+0x50>)
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	4413      	add	r3, r2
 8015690:	466a      	mov	r2, sp
 8015692:	4293      	cmp	r3, r2
 8015694:	d907      	bls.n	80156a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8015696:	f000 fd83 	bl	80161a0 <__errno>
 801569a:	4602      	mov	r2, r0
 801569c:	230c      	movs	r3, #12
 801569e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80156a0:	f04f 33ff 	mov.w	r3, #4294967295
 80156a4:	e006      	b.n	80156b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80156a6:	4b05      	ldr	r3, [pc, #20]	; (80156bc <_sbrk+0x50>)
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	4413      	add	r3, r2
 80156ae:	4a03      	ldr	r2, [pc, #12]	; (80156bc <_sbrk+0x50>)
 80156b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80156b2:	68fb      	ldr	r3, [r7, #12]
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3710      	adds	r7, #16
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}
 80156bc:	200007e8 	.word	0x200007e8
 80156c0:	20008738 	.word	0x20008738

080156c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80156c4:	b480      	push	{r7}
 80156c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80156c8:	4b16      	ldr	r3, [pc, #88]	; (8015724 <SystemInit+0x60>)
 80156ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156ce:	4a15      	ldr	r2, [pc, #84]	; (8015724 <SystemInit+0x60>)
 80156d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80156d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80156d8:	4b13      	ldr	r3, [pc, #76]	; (8015728 <SystemInit+0x64>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	4a12      	ldr	r2, [pc, #72]	; (8015728 <SystemInit+0x64>)
 80156de:	f043 0301 	orr.w	r3, r3, #1
 80156e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80156e4:	4b10      	ldr	r3, [pc, #64]	; (8015728 <SystemInit+0x64>)
 80156e6:	2200      	movs	r2, #0
 80156e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80156ea:	4b0f      	ldr	r3, [pc, #60]	; (8015728 <SystemInit+0x64>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	4a0e      	ldr	r2, [pc, #56]	; (8015728 <SystemInit+0x64>)
 80156f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80156f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80156f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80156fa:	4b0b      	ldr	r3, [pc, #44]	; (8015728 <SystemInit+0x64>)
 80156fc:	4a0b      	ldr	r2, [pc, #44]	; (801572c <SystemInit+0x68>)
 80156fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015700:	4b09      	ldr	r3, [pc, #36]	; (8015728 <SystemInit+0x64>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4a08      	ldr	r2, [pc, #32]	; (8015728 <SystemInit+0x64>)
 8015706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801570a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801570c:	4b06      	ldr	r3, [pc, #24]	; (8015728 <SystemInit+0x64>)
 801570e:	2200      	movs	r2, #0
 8015710:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015712:	4b04      	ldr	r3, [pc, #16]	; (8015724 <SystemInit+0x60>)
 8015714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015718:	609a      	str	r2, [r3, #8]
#endif
}
 801571a:	bf00      	nop
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr
 8015724:	e000ed00 	.word	0xe000ed00
 8015728:	40023800 	.word	0x40023800
 801572c:	24003010 	.word	0x24003010

08015730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015734:	2200      	movs	r2, #0
 8015736:	4912      	ldr	r1, [pc, #72]	; (8015780 <MX_USB_DEVICE_Init+0x50>)
 8015738:	4812      	ldr	r0, [pc, #72]	; (8015784 <MX_USB_DEVICE_Init+0x54>)
 801573a:	f7f9 fe1c 	bl	800f376 <USBD_Init>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015744:	f7ff fa4c 	bl	8014be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015748:	490f      	ldr	r1, [pc, #60]	; (8015788 <MX_USB_DEVICE_Init+0x58>)
 801574a:	480e      	ldr	r0, [pc, #56]	; (8015784 <MX_USB_DEVICE_Init+0x54>)
 801574c:	f7f9 fe3e 	bl	800f3cc <USBD_RegisterClass>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015756:	f7ff fa43 	bl	8014be0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801575a:	490c      	ldr	r1, [pc, #48]	; (801578c <MX_USB_DEVICE_Init+0x5c>)
 801575c:	4809      	ldr	r0, [pc, #36]	; (8015784 <MX_USB_DEVICE_Init+0x54>)
 801575e:	f7f9 fd9b 	bl	800f298 <USBD_CDC_RegisterInterface>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015768:	f7ff fa3a 	bl	8014be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801576c:	4805      	ldr	r0, [pc, #20]	; (8015784 <MX_USB_DEVICE_Init+0x54>)
 801576e:	f7f9 fe47 	bl	800f400 <USBD_Start>
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015778:	f7ff fa32 	bl	8014be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801577c:	bf00      	nop
 801577e:	bd80      	pop	{r7, pc}
 8015780:	20000148 	.word	0x20000148
 8015784:	20006e8c 	.word	0x20006e8c
 8015788:	20000018 	.word	0x20000018
 801578c:	20000138 	.word	0x20000138

08015790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015794:	2200      	movs	r2, #0
 8015796:	4905      	ldr	r1, [pc, #20]	; (80157ac <CDC_Init_FS+0x1c>)
 8015798:	4805      	ldr	r0, [pc, #20]	; (80157b0 <CDC_Init_FS+0x20>)
 801579a:	f7f9 fd94 	bl	800f2c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801579e:	4905      	ldr	r1, [pc, #20]	; (80157b4 <CDC_Init_FS+0x24>)
 80157a0:	4803      	ldr	r0, [pc, #12]	; (80157b0 <CDC_Init_FS+0x20>)
 80157a2:	f7f9 fdaa 	bl	800f2fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80157a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20007928 	.word	0x20007928
 80157b0:	20006e8c 	.word	0x20006e8c
 80157b4:	20007128 	.word	0x20007128

080157b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80157b8:	b480      	push	{r7}
 80157ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80157bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80157be:	4618      	mov	r0, r3
 80157c0:	46bd      	mov	sp, r7
 80157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c6:	4770      	bx	lr

080157c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b085      	sub	sp, #20
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	4603      	mov	r3, r0
 80157d0:	6039      	str	r1, [r7, #0]
 80157d2:	71fb      	strb	r3, [r7, #7]
 80157d4:	4613      	mov	r3, r2
 80157d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80157d8:	f107 0308 	add.w	r3, r7, #8
 80157dc:	2200      	movs	r2, #0
 80157de:	601a      	str	r2, [r3, #0]
 80157e0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80157e4:	79fb      	ldrb	r3, [r7, #7]
 80157e6:	2b23      	cmp	r3, #35	; 0x23
 80157e8:	d87c      	bhi.n	80158e4 <CDC_Control_FS+0x11c>
 80157ea:	a201      	add	r2, pc, #4	; (adr r2, 80157f0 <CDC_Control_FS+0x28>)
 80157ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f0:	080158e5 	.word	0x080158e5
 80157f4:	080158e5 	.word	0x080158e5
 80157f8:	080158e5 	.word	0x080158e5
 80157fc:	080158e5 	.word	0x080158e5
 8015800:	080158e5 	.word	0x080158e5
 8015804:	080158e5 	.word	0x080158e5
 8015808:	080158e5 	.word	0x080158e5
 801580c:	080158e5 	.word	0x080158e5
 8015810:	080158e5 	.word	0x080158e5
 8015814:	080158e5 	.word	0x080158e5
 8015818:	080158e5 	.word	0x080158e5
 801581c:	080158e5 	.word	0x080158e5
 8015820:	080158e5 	.word	0x080158e5
 8015824:	080158e5 	.word	0x080158e5
 8015828:	080158e5 	.word	0x080158e5
 801582c:	080158e5 	.word	0x080158e5
 8015830:	080158e5 	.word	0x080158e5
 8015834:	080158e5 	.word	0x080158e5
 8015838:	080158e5 	.word	0x080158e5
 801583c:	080158e5 	.word	0x080158e5
 8015840:	080158e5 	.word	0x080158e5
 8015844:	080158e5 	.word	0x080158e5
 8015848:	080158e5 	.word	0x080158e5
 801584c:	080158e5 	.word	0x080158e5
 8015850:	080158e5 	.word	0x080158e5
 8015854:	080158e5 	.word	0x080158e5
 8015858:	080158e5 	.word	0x080158e5
 801585c:	080158e5 	.word	0x080158e5
 8015860:	080158e5 	.word	0x080158e5
 8015864:	080158e5 	.word	0x080158e5
 8015868:	080158e5 	.word	0x080158e5
 801586c:	080158e5 	.word	0x080158e5
 8015870:	08015881 	.word	0x08015881
 8015874:	080158ad 	.word	0x080158ad
 8015878:	080158e5 	.word	0x080158e5
 801587c:	080158e5 	.word	0x080158e5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	785b      	ldrb	r3, [r3, #1]
 801588a:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	789b      	ldrb	r3, [r3, #2]
 8015890:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	78db      	ldrb	r3, [r3, #3]
 8015896:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	791b      	ldrb	r3, [r3, #4]
 801589c:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	795b      	ldrb	r3, [r3, #5]
 80158a2:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	799b      	ldrb	r3, [r3, #6]
 80158a8:	73bb      	strb	r3, [r7, #14]
        	break;
 80158aa:	e01c      	b.n	80158e6 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80158ac:	7a3a      	ldrb	r2, [r7, #8]
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	3301      	adds	r3, #1
 80158b6:	7a7a      	ldrb	r2, [r7, #9]
 80158b8:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	3302      	adds	r3, #2
 80158be:	7aba      	ldrb	r2, [r7, #10]
 80158c0:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	3303      	adds	r3, #3
 80158c6:	7afa      	ldrb	r2, [r7, #11]
 80158c8:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	3304      	adds	r3, #4
 80158ce:	7b3a      	ldrb	r2, [r7, #12]
 80158d0:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	3305      	adds	r3, #5
 80158d6:	7b7a      	ldrb	r2, [r7, #13]
 80158d8:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	3306      	adds	r3, #6
 80158de:	7bba      	ldrb	r2, [r7, #14]
 80158e0:	701a      	strb	r2, [r3, #0]
        	break;
 80158e2:	e000      	b.n	80158e6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80158e4:	bf00      	nop
  }

  return (USBD_OK);
 80158e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3714      	adds	r7, #20
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr

080158f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80158fe:	6879      	ldr	r1, [r7, #4]
 8015900:	4805      	ldr	r0, [pc, #20]	; (8015918 <CDC_Receive_FS+0x24>)
 8015902:	f7f9 fcfa 	bl	800f2fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015906:	4804      	ldr	r0, [pc, #16]	; (8015918 <CDC_Receive_FS+0x24>)
 8015908:	f7f9 fd0b 	bl	800f322 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801590c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801590e:	4618      	mov	r0, r3
 8015910:	3708      	adds	r7, #8
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	20006e8c 	.word	0x20006e8c

0801591c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b08a      	sub	sp, #40	; 0x28
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015924:	f107 0314 	add.w	r3, r7, #20
 8015928:	2200      	movs	r2, #0
 801592a:	601a      	str	r2, [r3, #0]
 801592c:	605a      	str	r2, [r3, #4]
 801592e:	609a      	str	r2, [r3, #8]
 8015930:	60da      	str	r2, [r3, #12]
 8015932:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801593c:	d13a      	bne.n	80159b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801593e:	2300      	movs	r3, #0
 8015940:	613b      	str	r3, [r7, #16]
 8015942:	4b1e      	ldr	r3, [pc, #120]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 8015944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015946:	4a1d      	ldr	r2, [pc, #116]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 8015948:	f043 0301 	orr.w	r3, r3, #1
 801594c:	6313      	str	r3, [r2, #48]	; 0x30
 801594e:	4b1b      	ldr	r3, [pc, #108]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 8015950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015952:	f003 0301 	and.w	r3, r3, #1
 8015956:	613b      	str	r3, [r7, #16]
 8015958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801595a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801595e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015960:	2302      	movs	r3, #2
 8015962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015964:	2300      	movs	r3, #0
 8015966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015968:	2303      	movs	r3, #3
 801596a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801596c:	230a      	movs	r3, #10
 801596e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015970:	f107 0314 	add.w	r3, r7, #20
 8015974:	4619      	mov	r1, r3
 8015976:	4812      	ldr	r0, [pc, #72]	; (80159c0 <HAL_PCD_MspInit+0xa4>)
 8015978:	f7f1 f828 	bl	80069cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801597c:	4b0f      	ldr	r3, [pc, #60]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 801597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015980:	4a0e      	ldr	r2, [pc, #56]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 8015982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015986:	6353      	str	r3, [r2, #52]	; 0x34
 8015988:	2300      	movs	r3, #0
 801598a:	60fb      	str	r3, [r7, #12]
 801598c:	4b0b      	ldr	r3, [pc, #44]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 801598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015990:	4a0a      	ldr	r2, [pc, #40]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 8015992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015996:	6453      	str	r3, [r2, #68]	; 0x44
 8015998:	4b08      	ldr	r3, [pc, #32]	; (80159bc <HAL_PCD_MspInit+0xa0>)
 801599a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801599c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80159a0:	60fb      	str	r3, [r7, #12]
 80159a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80159a4:	2200      	movs	r2, #0
 80159a6:	2100      	movs	r1, #0
 80159a8:	2043      	movs	r0, #67	; 0x43
 80159aa:	f7f0 fc40 	bl	800622e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80159ae:	2043      	movs	r0, #67	; 0x43
 80159b0:	f7f0 fc59 	bl	8006266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80159b4:	bf00      	nop
 80159b6:	3728      	adds	r7, #40	; 0x28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	40023800 	.word	0x40023800
 80159c0:	40020000 	.word	0x40020000

080159c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80159d8:	4619      	mov	r1, r3
 80159da:	4610      	mov	r0, r2
 80159dc:	f7f9 fd59 	bl	800f492 <USBD_LL_SetupStage>
}
 80159e0:	bf00      	nop
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	460b      	mov	r3, r1
 80159f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80159fa:	78fa      	ldrb	r2, [r7, #3]
 80159fc:	6879      	ldr	r1, [r7, #4]
 80159fe:	4613      	mov	r3, r2
 8015a00:	00db      	lsls	r3, r3, #3
 8015a02:	1a9b      	subs	r3, r3, r2
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	440b      	add	r3, r1
 8015a08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	78fb      	ldrb	r3, [r7, #3]
 8015a10:	4619      	mov	r1, r3
 8015a12:	f7f9 fd89 	bl	800f528 <USBD_LL_DataOutStage>
}
 8015a16:	bf00      	nop
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}

08015a1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a1e:	b580      	push	{r7, lr}
 8015a20:	b082      	sub	sp, #8
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
 8015a26:	460b      	mov	r3, r1
 8015a28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015a30:	78fa      	ldrb	r2, [r7, #3]
 8015a32:	6879      	ldr	r1, [r7, #4]
 8015a34:	4613      	mov	r3, r2
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	1a9b      	subs	r3, r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	440b      	add	r3, r1
 8015a3e:	3348      	adds	r3, #72	; 0x48
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	78fb      	ldrb	r3, [r7, #3]
 8015a44:	4619      	mov	r1, r3
 8015a46:	f7f9 fde0 	bl	800f60a <USBD_LL_DataInStage>
}
 8015a4a:	bf00      	nop
 8015a4c:	3708      	adds	r7, #8
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}

08015a52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a52:	b580      	push	{r7, lr}
 8015a54:	b082      	sub	sp, #8
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f9 feee 	bl	800f842 <USBD_LL_SOF>
}
 8015a66:	bf00      	nop
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b084      	sub	sp, #16
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a76:	2301      	movs	r3, #1
 8015a78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	68db      	ldr	r3, [r3, #12]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d102      	bne.n	8015a88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015a82:	2300      	movs	r3, #0
 8015a84:	73fb      	strb	r3, [r7, #15]
 8015a86:	e008      	b.n	8015a9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	2b02      	cmp	r3, #2
 8015a8e:	d102      	bne.n	8015a96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015a90:	2301      	movs	r3, #1
 8015a92:	73fb      	strb	r3, [r7, #15]
 8015a94:	e001      	b.n	8015a9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015a96:	f7ff f8a3 	bl	8014be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015aa0:	7bfa      	ldrb	r2, [r7, #15]
 8015aa2:	4611      	mov	r1, r2
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f9 fe96 	bl	800f7d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f9 fe4f 	bl	800f754 <USBD_LL_Reset>
}
 8015ab6:	bf00      	nop
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
	...

08015ac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7f9 fe91 	bl	800f7f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	6812      	ldr	r2, [r2, #0]
 8015ae2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ae6:	f043 0301 	orr.w	r3, r3, #1
 8015aea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6a1b      	ldr	r3, [r3, #32]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d005      	beq.n	8015b00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015af4:	4b04      	ldr	r3, [pc, #16]	; (8015b08 <HAL_PCD_SuspendCallback+0x48>)
 8015af6:	691b      	ldr	r3, [r3, #16]
 8015af8:	4a03      	ldr	r2, [pc, #12]	; (8015b08 <HAL_PCD_SuspendCallback+0x48>)
 8015afa:	f043 0306 	orr.w	r3, r3, #6
 8015afe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	e000ed00 	.word	0xe000ed00

08015b0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7f9 fe80 	bl	800f820 <USBD_LL_Resume>
}
 8015b20:	bf00      	nop
 8015b22:	3708      	adds	r7, #8
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	460b      	mov	r3, r1
 8015b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b3a:	78fa      	ldrb	r2, [r7, #3]
 8015b3c:	4611      	mov	r1, r2
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f9 fea6 	bl	800f890 <USBD_LL_IsoOUTIncomplete>
}
 8015b44:	bf00      	nop
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	460b      	mov	r3, r1
 8015b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b5e:	78fa      	ldrb	r2, [r7, #3]
 8015b60:	4611      	mov	r1, r2
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7f9 fe87 	bl	800f876 <USBD_LL_IsoINIncomplete>
}
 8015b68:	bf00      	nop
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7f9 fe93 	bl	800f8aa <USBD_LL_DevConnected>
}
 8015b84:	bf00      	nop
 8015b86:	3708      	adds	r7, #8
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7f9 fe90 	bl	800f8c0 <USBD_LL_DevDisconnected>
}
 8015ba0:	bf00      	nop
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b082      	sub	sp, #8
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d13c      	bne.n	8015c32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015bb8:	4a20      	ldr	r2, [pc, #128]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	4a1e      	ldr	r2, [pc, #120]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015bc8:	4b1c      	ldr	r3, [pc, #112]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015bce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015bd0:	4b1a      	ldr	r3, [pc, #104]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bd2:	2204      	movs	r2, #4
 8015bd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015bd6:	4b19      	ldr	r3, [pc, #100]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bd8:	2202      	movs	r2, #2
 8015bda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015bdc:	4b17      	ldr	r3, [pc, #92]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bde:	2200      	movs	r2, #0
 8015be0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015be2:	4b16      	ldr	r3, [pc, #88]	; (8015c3c <USBD_LL_Init+0x94>)
 8015be4:	2202      	movs	r2, #2
 8015be6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015be8:	4b14      	ldr	r3, [pc, #80]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015bee:	4b13      	ldr	r3, [pc, #76]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015bf4:	4b11      	ldr	r3, [pc, #68]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015bfa:	4b10      	ldr	r3, [pc, #64]	; (8015c3c <USBD_LL_Init+0x94>)
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015c00:	4b0e      	ldr	r3, [pc, #56]	; (8015c3c <USBD_LL_Init+0x94>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015c06:	480d      	ldr	r0, [pc, #52]	; (8015c3c <USBD_LL_Init+0x94>)
 8015c08:	f7f2 f845 	bl	8007c96 <HAL_PCD_Init>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015c12:	f7fe ffe5 	bl	8014be0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015c16:	2180      	movs	r1, #128	; 0x80
 8015c18:	4808      	ldr	r0, [pc, #32]	; (8015c3c <USBD_LL_Init+0x94>)
 8015c1a:	f7f3 f9aa 	bl	8008f72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015c1e:	2240      	movs	r2, #64	; 0x40
 8015c20:	2100      	movs	r1, #0
 8015c22:	4806      	ldr	r0, [pc, #24]	; (8015c3c <USBD_LL_Init+0x94>)
 8015c24:	f7f3 f95e 	bl	8008ee4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015c28:	2280      	movs	r2, #128	; 0x80
 8015c2a:	2101      	movs	r1, #1
 8015c2c:	4803      	ldr	r0, [pc, #12]	; (8015c3c <USBD_LL_Init+0x94>)
 8015c2e:	f7f3 f959 	bl	8008ee4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3708      	adds	r7, #8
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	20008128 	.word	0x20008128

08015c40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7f2 f93a 	bl	8007ed0 <HAL_PCD_Start>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015c60:	7bfb      	ldrb	r3, [r7, #15]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f000 f92e 	bl	8015ec4 <USBD_Get_USB_Status>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}

08015c76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015c76:	b580      	push	{r7, lr}
 8015c78:	b084      	sub	sp, #16
 8015c7a:	af00      	add	r7, sp, #0
 8015c7c:	6078      	str	r0, [r7, #4]
 8015c7e:	4608      	mov	r0, r1
 8015c80:	4611      	mov	r1, r2
 8015c82:	461a      	mov	r2, r3
 8015c84:	4603      	mov	r3, r0
 8015c86:	70fb      	strb	r3, [r7, #3]
 8015c88:	460b      	mov	r3, r1
 8015c8a:	70bb      	strb	r3, [r7, #2]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015c9e:	78bb      	ldrb	r3, [r7, #2]
 8015ca0:	883a      	ldrh	r2, [r7, #0]
 8015ca2:	78f9      	ldrb	r1, [r7, #3]
 8015ca4:	f7f2 fd0f 	bl	80086c6 <HAL_PCD_EP_Open>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f908 	bl	8015ec4 <USBD_Get_USB_Status>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b084      	sub	sp, #16
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	6078      	str	r0, [r7, #4]
 8015cca:	460b      	mov	r3, r1
 8015ccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015cdc:	78fa      	ldrb	r2, [r7, #3]
 8015cde:	4611      	mov	r1, r2
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f2 fd58 	bl	8008796 <HAL_PCD_EP_Close>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015cea:	7bfb      	ldrb	r3, [r7, #15]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f000 f8e9 	bl	8015ec4 <USBD_Get_USB_Status>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b084      	sub	sp, #16
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d10:	2300      	movs	r3, #0
 8015d12:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015d1a:	78fa      	ldrb	r2, [r7, #3]
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7f2 fe30 	bl	8008984 <HAL_PCD_EP_SetStall>
 8015d24:	4603      	mov	r3, r0
 8015d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d28:	7bfb      	ldrb	r3, [r7, #15]
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f000 f8ca 	bl	8015ec4 <USBD_Get_USB_Status>
 8015d30:	4603      	mov	r3, r0
 8015d32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3710      	adds	r7, #16
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}

08015d3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d3e:	b580      	push	{r7, lr}
 8015d40:	b084      	sub	sp, #16
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
 8015d46:	460b      	mov	r3, r1
 8015d48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015d58:	78fa      	ldrb	r2, [r7, #3]
 8015d5a:	4611      	mov	r1, r2
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7f2 fe75 	bl	8008a4c <HAL_PCD_EP_ClrStall>
 8015d62:	4603      	mov	r3, r0
 8015d64:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015d66:	7bfb      	ldrb	r3, [r7, #15]
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f000 f8ab 	bl	8015ec4 <USBD_Get_USB_Status>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015d72:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3710      	adds	r7, #16
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	b085      	sub	sp, #20
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	460b      	mov	r3, r1
 8015d86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015d8e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	da0b      	bge.n	8015db0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015d98:	78fb      	ldrb	r3, [r7, #3]
 8015d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d9e:	68f9      	ldr	r1, [r7, #12]
 8015da0:	4613      	mov	r3, r2
 8015da2:	00db      	lsls	r3, r3, #3
 8015da4:	1a9b      	subs	r3, r3, r2
 8015da6:	009b      	lsls	r3, r3, #2
 8015da8:	440b      	add	r3, r1
 8015daa:	333e      	adds	r3, #62	; 0x3e
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	e00b      	b.n	8015dc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015db0:	78fb      	ldrb	r3, [r7, #3]
 8015db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015db6:	68f9      	ldr	r1, [r7, #12]
 8015db8:	4613      	mov	r3, r2
 8015dba:	00db      	lsls	r3, r3, #3
 8015dbc:	1a9b      	subs	r3, r3, r2
 8015dbe:	009b      	lsls	r3, r3, #2
 8015dc0:	440b      	add	r3, r1
 8015dc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015dc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3714      	adds	r7, #20
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	460b      	mov	r3, r1
 8015dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015de0:	2300      	movs	r3, #0
 8015de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015de4:	2300      	movs	r3, #0
 8015de6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015dee:	78fa      	ldrb	r2, [r7, #3]
 8015df0:	4611      	mov	r1, r2
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7f2 fc42 	bl	800867c <HAL_PCD_SetAddress>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dfc:	7bfb      	ldrb	r3, [r7, #15]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f000 f860 	bl	8015ec4 <USBD_Get_USB_Status>
 8015e04:	4603      	mov	r3, r0
 8015e06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b086      	sub	sp, #24
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	60f8      	str	r0, [r7, #12]
 8015e1a:	607a      	str	r2, [r7, #4]
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	460b      	mov	r3, r1
 8015e20:	72fb      	strb	r3, [r7, #11]
 8015e22:	4613      	mov	r3, r2
 8015e24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e26:	2300      	movs	r3, #0
 8015e28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015e34:	893b      	ldrh	r3, [r7, #8]
 8015e36:	7af9      	ldrb	r1, [r7, #11]
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	f7f2 fd59 	bl	80088f0 <HAL_PCD_EP_Transmit>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015e42:	7dfb      	ldrb	r3, [r7, #23]
 8015e44:	4618      	mov	r0, r3
 8015e46:	f000 f83d 	bl	8015ec4 <USBD_Get_USB_Status>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015e4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	3718      	adds	r7, #24
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b086      	sub	sp, #24
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	607a      	str	r2, [r7, #4]
 8015e62:	461a      	mov	r2, r3
 8015e64:	460b      	mov	r3, r1
 8015e66:	72fb      	strb	r3, [r7, #11]
 8015e68:	4613      	mov	r3, r2
 8015e6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e70:	2300      	movs	r3, #0
 8015e72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015e7a:	893b      	ldrh	r3, [r7, #8]
 8015e7c:	7af9      	ldrb	r1, [r7, #11]
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	f7f2 fcd3 	bl	800882a <HAL_PCD_EP_Receive>
 8015e84:	4603      	mov	r3, r0
 8015e86:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015e88:	7dfb      	ldrb	r3, [r7, #23]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f000 f81a 	bl	8015ec4 <USBD_Get_USB_Status>
 8015e90:	4603      	mov	r3, r0
 8015e92:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015e94:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3718      	adds	r7, #24
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e9e:	b580      	push	{r7, lr}
 8015ea0:	b082      	sub	sp, #8
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
 8015ea6:	460b      	mov	r3, r1
 8015ea8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015eb0:	78fa      	ldrb	r2, [r7, #3]
 8015eb2:	4611      	mov	r1, r2
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f2 fd03 	bl	80088c0 <HAL_PCD_EP_GetRxCount>
 8015eba:	4603      	mov	r3, r0
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3708      	adds	r7, #8
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	4603      	mov	r3, r0
 8015ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015ed2:	79fb      	ldrb	r3, [r7, #7]
 8015ed4:	2b03      	cmp	r3, #3
 8015ed6:	d817      	bhi.n	8015f08 <USBD_Get_USB_Status+0x44>
 8015ed8:	a201      	add	r2, pc, #4	; (adr r2, 8015ee0 <USBD_Get_USB_Status+0x1c>)
 8015eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ede:	bf00      	nop
 8015ee0:	08015ef1 	.word	0x08015ef1
 8015ee4:	08015ef7 	.word	0x08015ef7
 8015ee8:	08015efd 	.word	0x08015efd
 8015eec:	08015f03 	.word	0x08015f03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ef4:	e00b      	b.n	8015f0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ef6:	2302      	movs	r3, #2
 8015ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8015efa:	e008      	b.n	8015f0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015efc:	2301      	movs	r3, #1
 8015efe:	73fb      	strb	r3, [r7, #15]
    break;
 8015f00:	e005      	b.n	8015f0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015f02:	2302      	movs	r3, #2
 8015f04:	73fb      	strb	r3, [r7, #15]
    break;
 8015f06:	e002      	b.n	8015f0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015f08:	2302      	movs	r3, #2
 8015f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8015f0c:	bf00      	nop
  }
  return usb_status;
 8015f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3714      	adds	r7, #20
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	4603      	mov	r3, r0
 8015f24:	6039      	str	r1, [r7, #0]
 8015f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2212      	movs	r2, #18
 8015f2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015f2e:	4b03      	ldr	r3, [pc, #12]	; (8015f3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	370c      	adds	r7, #12
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr
 8015f3c:	20000164 	.word	0x20000164

08015f40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f40:	b480      	push	{r7}
 8015f42:	b083      	sub	sp, #12
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	4603      	mov	r3, r0
 8015f48:	6039      	str	r1, [r7, #0]
 8015f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	2204      	movs	r2, #4
 8015f50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015f52:	4b03      	ldr	r3, [pc, #12]	; (8015f60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	370c      	adds	r7, #12
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr
 8015f60:	20000178 	.word	0x20000178

08015f64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	6039      	str	r1, [r7, #0]
 8015f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015f70:	79fb      	ldrb	r3, [r7, #7]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d105      	bne.n	8015f82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f76:	683a      	ldr	r2, [r7, #0]
 8015f78:	4907      	ldr	r1, [pc, #28]	; (8015f98 <USBD_FS_ProductStrDescriptor+0x34>)
 8015f7a:	4808      	ldr	r0, [pc, #32]	; (8015f9c <USBD_FS_ProductStrDescriptor+0x38>)
 8015f7c:	f7fa f978 	bl	8010270 <USBD_GetString>
 8015f80:	e004      	b.n	8015f8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015f82:	683a      	ldr	r2, [r7, #0]
 8015f84:	4904      	ldr	r1, [pc, #16]	; (8015f98 <USBD_FS_ProductStrDescriptor+0x34>)
 8015f86:	4805      	ldr	r0, [pc, #20]	; (8015f9c <USBD_FS_ProductStrDescriptor+0x38>)
 8015f88:	f7fa f972 	bl	8010270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015f8c:	4b02      	ldr	r3, [pc, #8]	; (8015f98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	20008530 	.word	0x20008530
 8015f9c:	0801c274 	.word	0x0801c274

08015fa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	6039      	str	r1, [r7, #0]
 8015faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015fac:	683a      	ldr	r2, [r7, #0]
 8015fae:	4904      	ldr	r1, [pc, #16]	; (8015fc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015fb0:	4804      	ldr	r0, [pc, #16]	; (8015fc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015fb2:	f7fa f95d 	bl	8010270 <USBD_GetString>
  return USBD_StrDesc;
 8015fb6:	4b02      	ldr	r3, [pc, #8]	; (8015fc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3708      	adds	r7, #8
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}
 8015fc0:	20008530 	.word	0x20008530
 8015fc4:	0801c280 	.word	0x0801c280

08015fc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	6039      	str	r1, [r7, #0]
 8015fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	221a      	movs	r2, #26
 8015fd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015fda:	f000 f843 	bl	8016064 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8015fde:	4b02      	ldr	r3, [pc, #8]	; (8015fe8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	2000017c 	.word	0x2000017c

08015fec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	6039      	str	r1, [r7, #0]
 8015ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ff8:	79fb      	ldrb	r3, [r7, #7]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d105      	bne.n	801600a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ffe:	683a      	ldr	r2, [r7, #0]
 8016000:	4907      	ldr	r1, [pc, #28]	; (8016020 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016002:	4808      	ldr	r0, [pc, #32]	; (8016024 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016004:	f7fa f934 	bl	8010270 <USBD_GetString>
 8016008:	e004      	b.n	8016014 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801600a:	683a      	ldr	r2, [r7, #0]
 801600c:	4904      	ldr	r1, [pc, #16]	; (8016020 <USBD_FS_ConfigStrDescriptor+0x34>)
 801600e:	4805      	ldr	r0, [pc, #20]	; (8016024 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016010:	f7fa f92e 	bl	8010270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016014:	4b02      	ldr	r3, [pc, #8]	; (8016020 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016016:	4618      	mov	r0, r3
 8016018:	3708      	adds	r7, #8
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	20008530 	.word	0x20008530
 8016024:	0801c294 	.word	0x0801c294

08016028 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	4603      	mov	r3, r0
 8016030:	6039      	str	r1, [r7, #0]
 8016032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016034:	79fb      	ldrb	r3, [r7, #7]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d105      	bne.n	8016046 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801603a:	683a      	ldr	r2, [r7, #0]
 801603c:	4907      	ldr	r1, [pc, #28]	; (801605c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801603e:	4808      	ldr	r0, [pc, #32]	; (8016060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016040:	f7fa f916 	bl	8010270 <USBD_GetString>
 8016044:	e004      	b.n	8016050 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016046:	683a      	ldr	r2, [r7, #0]
 8016048:	4904      	ldr	r1, [pc, #16]	; (801605c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801604a:	4805      	ldr	r0, [pc, #20]	; (8016060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801604c:	f7fa f910 	bl	8010270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016050:	4b02      	ldr	r3, [pc, #8]	; (801605c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016052:	4618      	mov	r0, r3
 8016054:	3708      	adds	r7, #8
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	20008530 	.word	0x20008530
 8016060:	0801c2a0 	.word	0x0801c2a0

08016064 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801606a:	4b0f      	ldr	r3, [pc, #60]	; (80160a8 <Get_SerialNum+0x44>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016070:	4b0e      	ldr	r3, [pc, #56]	; (80160ac <Get_SerialNum+0x48>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016076:	4b0e      	ldr	r3, [pc, #56]	; (80160b0 <Get_SerialNum+0x4c>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801607c:	68fa      	ldr	r2, [r7, #12]
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	4413      	add	r3, r2
 8016082:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d009      	beq.n	801609e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801608a:	2208      	movs	r2, #8
 801608c:	4909      	ldr	r1, [pc, #36]	; (80160b4 <Get_SerialNum+0x50>)
 801608e:	68f8      	ldr	r0, [r7, #12]
 8016090:	f000 f814 	bl	80160bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016094:	2204      	movs	r2, #4
 8016096:	4908      	ldr	r1, [pc, #32]	; (80160b8 <Get_SerialNum+0x54>)
 8016098:	68b8      	ldr	r0, [r7, #8]
 801609a:	f000 f80f 	bl	80160bc <IntToUnicode>
  }
}
 801609e:	bf00      	nop
 80160a0:	3710      	adds	r7, #16
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	1fff7a10 	.word	0x1fff7a10
 80160ac:	1fff7a14 	.word	0x1fff7a14
 80160b0:	1fff7a18 	.word	0x1fff7a18
 80160b4:	2000017e 	.word	0x2000017e
 80160b8:	2000018e 	.word	0x2000018e

080160bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80160bc:	b480      	push	{r7}
 80160be:	b087      	sub	sp, #28
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	4613      	mov	r3, r2
 80160c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80160ca:	2300      	movs	r3, #0
 80160cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80160ce:	2300      	movs	r3, #0
 80160d0:	75fb      	strb	r3, [r7, #23]
 80160d2:	e027      	b.n	8016124 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	0f1b      	lsrs	r3, r3, #28
 80160d8:	2b09      	cmp	r3, #9
 80160da:	d80b      	bhi.n	80160f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	0f1b      	lsrs	r3, r3, #28
 80160e0:	b2da      	uxtb	r2, r3
 80160e2:	7dfb      	ldrb	r3, [r7, #23]
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4619      	mov	r1, r3
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	440b      	add	r3, r1
 80160ec:	3230      	adds	r2, #48	; 0x30
 80160ee:	b2d2      	uxtb	r2, r2
 80160f0:	701a      	strb	r2, [r3, #0]
 80160f2:	e00a      	b.n	801610a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	0f1b      	lsrs	r3, r3, #28
 80160f8:	b2da      	uxtb	r2, r3
 80160fa:	7dfb      	ldrb	r3, [r7, #23]
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4619      	mov	r1, r3
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	440b      	add	r3, r1
 8016104:	3237      	adds	r2, #55	; 0x37
 8016106:	b2d2      	uxtb	r2, r2
 8016108:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	011b      	lsls	r3, r3, #4
 801610e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016110:	7dfb      	ldrb	r3, [r7, #23]
 8016112:	005b      	lsls	r3, r3, #1
 8016114:	3301      	adds	r3, #1
 8016116:	68ba      	ldr	r2, [r7, #8]
 8016118:	4413      	add	r3, r2
 801611a:	2200      	movs	r2, #0
 801611c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801611e:	7dfb      	ldrb	r3, [r7, #23]
 8016120:	3301      	adds	r3, #1
 8016122:	75fb      	strb	r3, [r7, #23]
 8016124:	7dfa      	ldrb	r2, [r7, #23]
 8016126:	79fb      	ldrb	r3, [r7, #7]
 8016128:	429a      	cmp	r2, r3
 801612a:	d3d3      	bcc.n	80160d4 <IntToUnicode+0x18>
  }
}
 801612c:	bf00      	nop
 801612e:	371c      	adds	r7, #28
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr

08016138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8016138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016170 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801613c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801613e:	e003      	b.n	8016148 <LoopCopyDataInit>

08016140 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016140:	4b0c      	ldr	r3, [pc, #48]	; (8016174 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016142:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016144:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016146:	3104      	adds	r1, #4

08016148 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016148:	480b      	ldr	r0, [pc, #44]	; (8016178 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801614a:	4b0c      	ldr	r3, [pc, #48]	; (801617c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801614c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801614e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016150:	d3f6      	bcc.n	8016140 <CopyDataInit>
  ldr  r2, =_sbss
 8016152:	4a0b      	ldr	r2, [pc, #44]	; (8016180 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016154:	e002      	b.n	801615c <LoopFillZerobss>

08016156 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016156:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016158:	f842 3b04 	str.w	r3, [r2], #4

0801615c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801615c:	4b09      	ldr	r3, [pc, #36]	; (8016184 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801615e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016160:	d3f9      	bcc.n	8016156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016162:	f7ff faaf 	bl	80156c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016166:	f000 f821 	bl	80161ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801616a:	f7fe f8f1 	bl	8014350 <main>
  bx  lr    
 801616e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8016170:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8016174:	0801c6b8 	.word	0x0801c6b8
  ldr  r0, =_sdata
 8016178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801617c:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 8016180:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8016184:	20008734 	.word	0x20008734

08016188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016188:	e7fe      	b.n	8016188 <ADC_IRQHandler>

0801618a <atof>:
 801618a:	2100      	movs	r1, #0
 801618c:	f001 bde0 	b.w	8017d50 <strtod>

08016190 <atoi>:
 8016190:	220a      	movs	r2, #10
 8016192:	2100      	movs	r1, #0
 8016194:	f001 be7e 	b.w	8017e94 <strtol>

08016198 <atol>:
 8016198:	220a      	movs	r2, #10
 801619a:	2100      	movs	r1, #0
 801619c:	f001 be7a 	b.w	8017e94 <strtol>

080161a0 <__errno>:
 80161a0:	4b01      	ldr	r3, [pc, #4]	; (80161a8 <__errno+0x8>)
 80161a2:	6818      	ldr	r0, [r3, #0]
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	20000198 	.word	0x20000198

080161ac <__libc_init_array>:
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	4e0d      	ldr	r6, [pc, #52]	; (80161e4 <__libc_init_array+0x38>)
 80161b0:	4c0d      	ldr	r4, [pc, #52]	; (80161e8 <__libc_init_array+0x3c>)
 80161b2:	1ba4      	subs	r4, r4, r6
 80161b4:	10a4      	asrs	r4, r4, #2
 80161b6:	2500      	movs	r5, #0
 80161b8:	42a5      	cmp	r5, r4
 80161ba:	d109      	bne.n	80161d0 <__libc_init_array+0x24>
 80161bc:	4e0b      	ldr	r6, [pc, #44]	; (80161ec <__libc_init_array+0x40>)
 80161be:	4c0c      	ldr	r4, [pc, #48]	; (80161f0 <__libc_init_array+0x44>)
 80161c0:	f005 fb58 	bl	801b874 <_init>
 80161c4:	1ba4      	subs	r4, r4, r6
 80161c6:	10a4      	asrs	r4, r4, #2
 80161c8:	2500      	movs	r5, #0
 80161ca:	42a5      	cmp	r5, r4
 80161cc:	d105      	bne.n	80161da <__libc_init_array+0x2e>
 80161ce:	bd70      	pop	{r4, r5, r6, pc}
 80161d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161d4:	4798      	blx	r3
 80161d6:	3501      	adds	r5, #1
 80161d8:	e7ee      	b.n	80161b8 <__libc_init_array+0xc>
 80161da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80161de:	4798      	blx	r3
 80161e0:	3501      	adds	r5, #1
 80161e2:	e7f2      	b.n	80161ca <__libc_init_array+0x1e>
 80161e4:	0801c6b0 	.word	0x0801c6b0
 80161e8:	0801c6b0 	.word	0x0801c6b0
 80161ec:	0801c6b0 	.word	0x0801c6b0
 80161f0:	0801c6b4 	.word	0x0801c6b4

080161f4 <malloc>:
 80161f4:	4b02      	ldr	r3, [pc, #8]	; (8016200 <malloc+0xc>)
 80161f6:	4601      	mov	r1, r0
 80161f8:	6818      	ldr	r0, [r3, #0]
 80161fa:	f000 b86d 	b.w	80162d8 <_malloc_r>
 80161fe:	bf00      	nop
 8016200:	20000198 	.word	0x20000198

08016204 <free>:
 8016204:	4b02      	ldr	r3, [pc, #8]	; (8016210 <free+0xc>)
 8016206:	4601      	mov	r1, r0
 8016208:	6818      	ldr	r0, [r3, #0]
 801620a:	f000 b817 	b.w	801623c <_free_r>
 801620e:	bf00      	nop
 8016210:	20000198 	.word	0x20000198

08016214 <memcpy>:
 8016214:	b510      	push	{r4, lr}
 8016216:	1e43      	subs	r3, r0, #1
 8016218:	440a      	add	r2, r1
 801621a:	4291      	cmp	r1, r2
 801621c:	d100      	bne.n	8016220 <memcpy+0xc>
 801621e:	bd10      	pop	{r4, pc}
 8016220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016228:	e7f7      	b.n	801621a <memcpy+0x6>

0801622a <memset>:
 801622a:	4402      	add	r2, r0
 801622c:	4603      	mov	r3, r0
 801622e:	4293      	cmp	r3, r2
 8016230:	d100      	bne.n	8016234 <memset+0xa>
 8016232:	4770      	bx	lr
 8016234:	f803 1b01 	strb.w	r1, [r3], #1
 8016238:	e7f9      	b.n	801622e <memset+0x4>
	...

0801623c <_free_r>:
 801623c:	b538      	push	{r3, r4, r5, lr}
 801623e:	4605      	mov	r5, r0
 8016240:	2900      	cmp	r1, #0
 8016242:	d045      	beq.n	80162d0 <_free_r+0x94>
 8016244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016248:	1f0c      	subs	r4, r1, #4
 801624a:	2b00      	cmp	r3, #0
 801624c:	bfb8      	it	lt
 801624e:	18e4      	addlt	r4, r4, r3
 8016250:	f002 ffc6 	bl	80191e0 <__malloc_lock>
 8016254:	4a1f      	ldr	r2, [pc, #124]	; (80162d4 <_free_r+0x98>)
 8016256:	6813      	ldr	r3, [r2, #0]
 8016258:	4610      	mov	r0, r2
 801625a:	b933      	cbnz	r3, 801626a <_free_r+0x2e>
 801625c:	6063      	str	r3, [r4, #4]
 801625e:	6014      	str	r4, [r2, #0]
 8016260:	4628      	mov	r0, r5
 8016262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016266:	f002 bfbc 	b.w	80191e2 <__malloc_unlock>
 801626a:	42a3      	cmp	r3, r4
 801626c:	d90c      	bls.n	8016288 <_free_r+0x4c>
 801626e:	6821      	ldr	r1, [r4, #0]
 8016270:	1862      	adds	r2, r4, r1
 8016272:	4293      	cmp	r3, r2
 8016274:	bf04      	itt	eq
 8016276:	681a      	ldreq	r2, [r3, #0]
 8016278:	685b      	ldreq	r3, [r3, #4]
 801627a:	6063      	str	r3, [r4, #4]
 801627c:	bf04      	itt	eq
 801627e:	1852      	addeq	r2, r2, r1
 8016280:	6022      	streq	r2, [r4, #0]
 8016282:	6004      	str	r4, [r0, #0]
 8016284:	e7ec      	b.n	8016260 <_free_r+0x24>
 8016286:	4613      	mov	r3, r2
 8016288:	685a      	ldr	r2, [r3, #4]
 801628a:	b10a      	cbz	r2, 8016290 <_free_r+0x54>
 801628c:	42a2      	cmp	r2, r4
 801628e:	d9fa      	bls.n	8016286 <_free_r+0x4a>
 8016290:	6819      	ldr	r1, [r3, #0]
 8016292:	1858      	adds	r0, r3, r1
 8016294:	42a0      	cmp	r0, r4
 8016296:	d10b      	bne.n	80162b0 <_free_r+0x74>
 8016298:	6820      	ldr	r0, [r4, #0]
 801629a:	4401      	add	r1, r0
 801629c:	1858      	adds	r0, r3, r1
 801629e:	4282      	cmp	r2, r0
 80162a0:	6019      	str	r1, [r3, #0]
 80162a2:	d1dd      	bne.n	8016260 <_free_r+0x24>
 80162a4:	6810      	ldr	r0, [r2, #0]
 80162a6:	6852      	ldr	r2, [r2, #4]
 80162a8:	605a      	str	r2, [r3, #4]
 80162aa:	4401      	add	r1, r0
 80162ac:	6019      	str	r1, [r3, #0]
 80162ae:	e7d7      	b.n	8016260 <_free_r+0x24>
 80162b0:	d902      	bls.n	80162b8 <_free_r+0x7c>
 80162b2:	230c      	movs	r3, #12
 80162b4:	602b      	str	r3, [r5, #0]
 80162b6:	e7d3      	b.n	8016260 <_free_r+0x24>
 80162b8:	6820      	ldr	r0, [r4, #0]
 80162ba:	1821      	adds	r1, r4, r0
 80162bc:	428a      	cmp	r2, r1
 80162be:	bf04      	itt	eq
 80162c0:	6811      	ldreq	r1, [r2, #0]
 80162c2:	6852      	ldreq	r2, [r2, #4]
 80162c4:	6062      	str	r2, [r4, #4]
 80162c6:	bf04      	itt	eq
 80162c8:	1809      	addeq	r1, r1, r0
 80162ca:	6021      	streq	r1, [r4, #0]
 80162cc:	605c      	str	r4, [r3, #4]
 80162ce:	e7c7      	b.n	8016260 <_free_r+0x24>
 80162d0:	bd38      	pop	{r3, r4, r5, pc}
 80162d2:	bf00      	nop
 80162d4:	200007ec 	.word	0x200007ec

080162d8 <_malloc_r>:
 80162d8:	b570      	push	{r4, r5, r6, lr}
 80162da:	1ccd      	adds	r5, r1, #3
 80162dc:	f025 0503 	bic.w	r5, r5, #3
 80162e0:	3508      	adds	r5, #8
 80162e2:	2d0c      	cmp	r5, #12
 80162e4:	bf38      	it	cc
 80162e6:	250c      	movcc	r5, #12
 80162e8:	2d00      	cmp	r5, #0
 80162ea:	4606      	mov	r6, r0
 80162ec:	db01      	blt.n	80162f2 <_malloc_r+0x1a>
 80162ee:	42a9      	cmp	r1, r5
 80162f0:	d903      	bls.n	80162fa <_malloc_r+0x22>
 80162f2:	230c      	movs	r3, #12
 80162f4:	6033      	str	r3, [r6, #0]
 80162f6:	2000      	movs	r0, #0
 80162f8:	bd70      	pop	{r4, r5, r6, pc}
 80162fa:	f002 ff71 	bl	80191e0 <__malloc_lock>
 80162fe:	4a21      	ldr	r2, [pc, #132]	; (8016384 <_malloc_r+0xac>)
 8016300:	6814      	ldr	r4, [r2, #0]
 8016302:	4621      	mov	r1, r4
 8016304:	b991      	cbnz	r1, 801632c <_malloc_r+0x54>
 8016306:	4c20      	ldr	r4, [pc, #128]	; (8016388 <_malloc_r+0xb0>)
 8016308:	6823      	ldr	r3, [r4, #0]
 801630a:	b91b      	cbnz	r3, 8016314 <_malloc_r+0x3c>
 801630c:	4630      	mov	r0, r6
 801630e:	f000 fe7b 	bl	8017008 <_sbrk_r>
 8016312:	6020      	str	r0, [r4, #0]
 8016314:	4629      	mov	r1, r5
 8016316:	4630      	mov	r0, r6
 8016318:	f000 fe76 	bl	8017008 <_sbrk_r>
 801631c:	1c43      	adds	r3, r0, #1
 801631e:	d124      	bne.n	801636a <_malloc_r+0x92>
 8016320:	230c      	movs	r3, #12
 8016322:	6033      	str	r3, [r6, #0]
 8016324:	4630      	mov	r0, r6
 8016326:	f002 ff5c 	bl	80191e2 <__malloc_unlock>
 801632a:	e7e4      	b.n	80162f6 <_malloc_r+0x1e>
 801632c:	680b      	ldr	r3, [r1, #0]
 801632e:	1b5b      	subs	r3, r3, r5
 8016330:	d418      	bmi.n	8016364 <_malloc_r+0x8c>
 8016332:	2b0b      	cmp	r3, #11
 8016334:	d90f      	bls.n	8016356 <_malloc_r+0x7e>
 8016336:	600b      	str	r3, [r1, #0]
 8016338:	50cd      	str	r5, [r1, r3]
 801633a:	18cc      	adds	r4, r1, r3
 801633c:	4630      	mov	r0, r6
 801633e:	f002 ff50 	bl	80191e2 <__malloc_unlock>
 8016342:	f104 000b 	add.w	r0, r4, #11
 8016346:	1d23      	adds	r3, r4, #4
 8016348:	f020 0007 	bic.w	r0, r0, #7
 801634c:	1ac3      	subs	r3, r0, r3
 801634e:	d0d3      	beq.n	80162f8 <_malloc_r+0x20>
 8016350:	425a      	negs	r2, r3
 8016352:	50e2      	str	r2, [r4, r3]
 8016354:	e7d0      	b.n	80162f8 <_malloc_r+0x20>
 8016356:	428c      	cmp	r4, r1
 8016358:	684b      	ldr	r3, [r1, #4]
 801635a:	bf16      	itet	ne
 801635c:	6063      	strne	r3, [r4, #4]
 801635e:	6013      	streq	r3, [r2, #0]
 8016360:	460c      	movne	r4, r1
 8016362:	e7eb      	b.n	801633c <_malloc_r+0x64>
 8016364:	460c      	mov	r4, r1
 8016366:	6849      	ldr	r1, [r1, #4]
 8016368:	e7cc      	b.n	8016304 <_malloc_r+0x2c>
 801636a:	1cc4      	adds	r4, r0, #3
 801636c:	f024 0403 	bic.w	r4, r4, #3
 8016370:	42a0      	cmp	r0, r4
 8016372:	d005      	beq.n	8016380 <_malloc_r+0xa8>
 8016374:	1a21      	subs	r1, r4, r0
 8016376:	4630      	mov	r0, r6
 8016378:	f000 fe46 	bl	8017008 <_sbrk_r>
 801637c:	3001      	adds	r0, #1
 801637e:	d0cf      	beq.n	8016320 <_malloc_r+0x48>
 8016380:	6025      	str	r5, [r4, #0]
 8016382:	e7db      	b.n	801633c <_malloc_r+0x64>
 8016384:	200007ec 	.word	0x200007ec
 8016388:	200007f0 	.word	0x200007f0

0801638c <__cvt>:
 801638c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016390:	ec55 4b10 	vmov	r4, r5, d0
 8016394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016396:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801639a:	2d00      	cmp	r5, #0
 801639c:	460e      	mov	r6, r1
 801639e:	4691      	mov	r9, r2
 80163a0:	4619      	mov	r1, r3
 80163a2:	bfb8      	it	lt
 80163a4:	4622      	movlt	r2, r4
 80163a6:	462b      	mov	r3, r5
 80163a8:	f027 0720 	bic.w	r7, r7, #32
 80163ac:	bfbb      	ittet	lt
 80163ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80163b2:	461d      	movlt	r5, r3
 80163b4:	2300      	movge	r3, #0
 80163b6:	232d      	movlt	r3, #45	; 0x2d
 80163b8:	bfb8      	it	lt
 80163ba:	4614      	movlt	r4, r2
 80163bc:	2f46      	cmp	r7, #70	; 0x46
 80163be:	700b      	strb	r3, [r1, #0]
 80163c0:	d004      	beq.n	80163cc <__cvt+0x40>
 80163c2:	2f45      	cmp	r7, #69	; 0x45
 80163c4:	d100      	bne.n	80163c8 <__cvt+0x3c>
 80163c6:	3601      	adds	r6, #1
 80163c8:	2102      	movs	r1, #2
 80163ca:	e000      	b.n	80163ce <__cvt+0x42>
 80163cc:	2103      	movs	r1, #3
 80163ce:	ab03      	add	r3, sp, #12
 80163d0:	9301      	str	r3, [sp, #4]
 80163d2:	ab02      	add	r3, sp, #8
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	4632      	mov	r2, r6
 80163d8:	4653      	mov	r3, sl
 80163da:	ec45 4b10 	vmov	d0, r4, r5
 80163de:	f001 fdfb 	bl	8017fd8 <_dtoa_r>
 80163e2:	2f47      	cmp	r7, #71	; 0x47
 80163e4:	4680      	mov	r8, r0
 80163e6:	d102      	bne.n	80163ee <__cvt+0x62>
 80163e8:	f019 0f01 	tst.w	r9, #1
 80163ec:	d026      	beq.n	801643c <__cvt+0xb0>
 80163ee:	2f46      	cmp	r7, #70	; 0x46
 80163f0:	eb08 0906 	add.w	r9, r8, r6
 80163f4:	d111      	bne.n	801641a <__cvt+0x8e>
 80163f6:	f898 3000 	ldrb.w	r3, [r8]
 80163fa:	2b30      	cmp	r3, #48	; 0x30
 80163fc:	d10a      	bne.n	8016414 <__cvt+0x88>
 80163fe:	2200      	movs	r2, #0
 8016400:	2300      	movs	r3, #0
 8016402:	4620      	mov	r0, r4
 8016404:	4629      	mov	r1, r5
 8016406:	f7ea fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801640a:	b918      	cbnz	r0, 8016414 <__cvt+0x88>
 801640c:	f1c6 0601 	rsb	r6, r6, #1
 8016410:	f8ca 6000 	str.w	r6, [sl]
 8016414:	f8da 3000 	ldr.w	r3, [sl]
 8016418:	4499      	add	r9, r3
 801641a:	2200      	movs	r2, #0
 801641c:	2300      	movs	r3, #0
 801641e:	4620      	mov	r0, r4
 8016420:	4629      	mov	r1, r5
 8016422:	f7ea fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 8016426:	b938      	cbnz	r0, 8016438 <__cvt+0xac>
 8016428:	2230      	movs	r2, #48	; 0x30
 801642a:	9b03      	ldr	r3, [sp, #12]
 801642c:	454b      	cmp	r3, r9
 801642e:	d205      	bcs.n	801643c <__cvt+0xb0>
 8016430:	1c59      	adds	r1, r3, #1
 8016432:	9103      	str	r1, [sp, #12]
 8016434:	701a      	strb	r2, [r3, #0]
 8016436:	e7f8      	b.n	801642a <__cvt+0x9e>
 8016438:	f8cd 900c 	str.w	r9, [sp, #12]
 801643c:	9b03      	ldr	r3, [sp, #12]
 801643e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016440:	eba3 0308 	sub.w	r3, r3, r8
 8016444:	4640      	mov	r0, r8
 8016446:	6013      	str	r3, [r2, #0]
 8016448:	b004      	add	sp, #16
 801644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801644e <__exponent>:
 801644e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016450:	2900      	cmp	r1, #0
 8016452:	4604      	mov	r4, r0
 8016454:	bfba      	itte	lt
 8016456:	4249      	neglt	r1, r1
 8016458:	232d      	movlt	r3, #45	; 0x2d
 801645a:	232b      	movge	r3, #43	; 0x2b
 801645c:	2909      	cmp	r1, #9
 801645e:	f804 2b02 	strb.w	r2, [r4], #2
 8016462:	7043      	strb	r3, [r0, #1]
 8016464:	dd20      	ble.n	80164a8 <__exponent+0x5a>
 8016466:	f10d 0307 	add.w	r3, sp, #7
 801646a:	461f      	mov	r7, r3
 801646c:	260a      	movs	r6, #10
 801646e:	fb91 f5f6 	sdiv	r5, r1, r6
 8016472:	fb06 1115 	mls	r1, r6, r5, r1
 8016476:	3130      	adds	r1, #48	; 0x30
 8016478:	2d09      	cmp	r5, #9
 801647a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801647e:	f103 32ff 	add.w	r2, r3, #4294967295
 8016482:	4629      	mov	r1, r5
 8016484:	dc09      	bgt.n	801649a <__exponent+0x4c>
 8016486:	3130      	adds	r1, #48	; 0x30
 8016488:	3b02      	subs	r3, #2
 801648a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801648e:	42bb      	cmp	r3, r7
 8016490:	4622      	mov	r2, r4
 8016492:	d304      	bcc.n	801649e <__exponent+0x50>
 8016494:	1a10      	subs	r0, r2, r0
 8016496:	b003      	add	sp, #12
 8016498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801649a:	4613      	mov	r3, r2
 801649c:	e7e7      	b.n	801646e <__exponent+0x20>
 801649e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164a2:	f804 2b01 	strb.w	r2, [r4], #1
 80164a6:	e7f2      	b.n	801648e <__exponent+0x40>
 80164a8:	2330      	movs	r3, #48	; 0x30
 80164aa:	4419      	add	r1, r3
 80164ac:	7083      	strb	r3, [r0, #2]
 80164ae:	1d02      	adds	r2, r0, #4
 80164b0:	70c1      	strb	r1, [r0, #3]
 80164b2:	e7ef      	b.n	8016494 <__exponent+0x46>

080164b4 <_printf_float>:
 80164b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b8:	b08d      	sub	sp, #52	; 0x34
 80164ba:	460c      	mov	r4, r1
 80164bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80164c0:	4616      	mov	r6, r2
 80164c2:	461f      	mov	r7, r3
 80164c4:	4605      	mov	r5, r0
 80164c6:	f002 fe6b 	bl	80191a0 <_localeconv_r>
 80164ca:	6803      	ldr	r3, [r0, #0]
 80164cc:	9304      	str	r3, [sp, #16]
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7e9 fe88 	bl	80001e4 <strlen>
 80164d4:	2300      	movs	r3, #0
 80164d6:	930a      	str	r3, [sp, #40]	; 0x28
 80164d8:	f8d8 3000 	ldr.w	r3, [r8]
 80164dc:	9005      	str	r0, [sp, #20]
 80164de:	3307      	adds	r3, #7
 80164e0:	f023 0307 	bic.w	r3, r3, #7
 80164e4:	f103 0208 	add.w	r2, r3, #8
 80164e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80164ec:	f8d4 b000 	ldr.w	fp, [r4]
 80164f0:	f8c8 2000 	str.w	r2, [r8]
 80164f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80164fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016500:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016504:	9307      	str	r3, [sp, #28]
 8016506:	f8cd 8018 	str.w	r8, [sp, #24]
 801650a:	f04f 32ff 	mov.w	r2, #4294967295
 801650e:	4ba7      	ldr	r3, [pc, #668]	; (80167ac <_printf_float+0x2f8>)
 8016510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016514:	f7ea fb1a 	bl	8000b4c <__aeabi_dcmpun>
 8016518:	bb70      	cbnz	r0, 8016578 <_printf_float+0xc4>
 801651a:	f04f 32ff 	mov.w	r2, #4294967295
 801651e:	4ba3      	ldr	r3, [pc, #652]	; (80167ac <_printf_float+0x2f8>)
 8016520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016524:	f7ea faf4 	bl	8000b10 <__aeabi_dcmple>
 8016528:	bb30      	cbnz	r0, 8016578 <_printf_float+0xc4>
 801652a:	2200      	movs	r2, #0
 801652c:	2300      	movs	r3, #0
 801652e:	4640      	mov	r0, r8
 8016530:	4649      	mov	r1, r9
 8016532:	f7ea fae3 	bl	8000afc <__aeabi_dcmplt>
 8016536:	b110      	cbz	r0, 801653e <_printf_float+0x8a>
 8016538:	232d      	movs	r3, #45	; 0x2d
 801653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801653e:	4a9c      	ldr	r2, [pc, #624]	; (80167b0 <_printf_float+0x2fc>)
 8016540:	4b9c      	ldr	r3, [pc, #624]	; (80167b4 <_printf_float+0x300>)
 8016542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016546:	bf8c      	ite	hi
 8016548:	4690      	movhi	r8, r2
 801654a:	4698      	movls	r8, r3
 801654c:	2303      	movs	r3, #3
 801654e:	f02b 0204 	bic.w	r2, fp, #4
 8016552:	6123      	str	r3, [r4, #16]
 8016554:	6022      	str	r2, [r4, #0]
 8016556:	f04f 0900 	mov.w	r9, #0
 801655a:	9700      	str	r7, [sp, #0]
 801655c:	4633      	mov	r3, r6
 801655e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016560:	4621      	mov	r1, r4
 8016562:	4628      	mov	r0, r5
 8016564:	f000 f9e6 	bl	8016934 <_printf_common>
 8016568:	3001      	adds	r0, #1
 801656a:	f040 808d 	bne.w	8016688 <_printf_float+0x1d4>
 801656e:	f04f 30ff 	mov.w	r0, #4294967295
 8016572:	b00d      	add	sp, #52	; 0x34
 8016574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016578:	4642      	mov	r2, r8
 801657a:	464b      	mov	r3, r9
 801657c:	4640      	mov	r0, r8
 801657e:	4649      	mov	r1, r9
 8016580:	f7ea fae4 	bl	8000b4c <__aeabi_dcmpun>
 8016584:	b110      	cbz	r0, 801658c <_printf_float+0xd8>
 8016586:	4a8c      	ldr	r2, [pc, #560]	; (80167b8 <_printf_float+0x304>)
 8016588:	4b8c      	ldr	r3, [pc, #560]	; (80167bc <_printf_float+0x308>)
 801658a:	e7da      	b.n	8016542 <_printf_float+0x8e>
 801658c:	6861      	ldr	r1, [r4, #4]
 801658e:	1c4b      	adds	r3, r1, #1
 8016590:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016594:	a80a      	add	r0, sp, #40	; 0x28
 8016596:	d13e      	bne.n	8016616 <_printf_float+0x162>
 8016598:	2306      	movs	r3, #6
 801659a:	6063      	str	r3, [r4, #4]
 801659c:	2300      	movs	r3, #0
 801659e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80165a2:	ab09      	add	r3, sp, #36	; 0x24
 80165a4:	9300      	str	r3, [sp, #0]
 80165a6:	ec49 8b10 	vmov	d0, r8, r9
 80165aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80165ae:	6022      	str	r2, [r4, #0]
 80165b0:	f8cd a004 	str.w	sl, [sp, #4]
 80165b4:	6861      	ldr	r1, [r4, #4]
 80165b6:	4628      	mov	r0, r5
 80165b8:	f7ff fee8 	bl	801638c <__cvt>
 80165bc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80165c0:	2b47      	cmp	r3, #71	; 0x47
 80165c2:	4680      	mov	r8, r0
 80165c4:	d109      	bne.n	80165da <_printf_float+0x126>
 80165c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165c8:	1cd8      	adds	r0, r3, #3
 80165ca:	db02      	blt.n	80165d2 <_printf_float+0x11e>
 80165cc:	6862      	ldr	r2, [r4, #4]
 80165ce:	4293      	cmp	r3, r2
 80165d0:	dd47      	ble.n	8016662 <_printf_float+0x1ae>
 80165d2:	f1aa 0a02 	sub.w	sl, sl, #2
 80165d6:	fa5f fa8a 	uxtb.w	sl, sl
 80165da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80165de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165e0:	d824      	bhi.n	801662c <_printf_float+0x178>
 80165e2:	3901      	subs	r1, #1
 80165e4:	4652      	mov	r2, sl
 80165e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80165ea:	9109      	str	r1, [sp, #36]	; 0x24
 80165ec:	f7ff ff2f 	bl	801644e <__exponent>
 80165f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165f2:	1813      	adds	r3, r2, r0
 80165f4:	2a01      	cmp	r2, #1
 80165f6:	4681      	mov	r9, r0
 80165f8:	6123      	str	r3, [r4, #16]
 80165fa:	dc02      	bgt.n	8016602 <_printf_float+0x14e>
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	07d1      	lsls	r1, r2, #31
 8016600:	d501      	bpl.n	8016606 <_printf_float+0x152>
 8016602:	3301      	adds	r3, #1
 8016604:	6123      	str	r3, [r4, #16]
 8016606:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801660a:	2b00      	cmp	r3, #0
 801660c:	d0a5      	beq.n	801655a <_printf_float+0xa6>
 801660e:	232d      	movs	r3, #45	; 0x2d
 8016610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016614:	e7a1      	b.n	801655a <_printf_float+0xa6>
 8016616:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801661a:	f000 8177 	beq.w	801690c <_printf_float+0x458>
 801661e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016622:	d1bb      	bne.n	801659c <_printf_float+0xe8>
 8016624:	2900      	cmp	r1, #0
 8016626:	d1b9      	bne.n	801659c <_printf_float+0xe8>
 8016628:	2301      	movs	r3, #1
 801662a:	e7b6      	b.n	801659a <_printf_float+0xe6>
 801662c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016630:	d119      	bne.n	8016666 <_printf_float+0x1b2>
 8016632:	2900      	cmp	r1, #0
 8016634:	6863      	ldr	r3, [r4, #4]
 8016636:	dd0c      	ble.n	8016652 <_printf_float+0x19e>
 8016638:	6121      	str	r1, [r4, #16]
 801663a:	b913      	cbnz	r3, 8016642 <_printf_float+0x18e>
 801663c:	6822      	ldr	r2, [r4, #0]
 801663e:	07d2      	lsls	r2, r2, #31
 8016640:	d502      	bpl.n	8016648 <_printf_float+0x194>
 8016642:	3301      	adds	r3, #1
 8016644:	440b      	add	r3, r1
 8016646:	6123      	str	r3, [r4, #16]
 8016648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801664a:	65a3      	str	r3, [r4, #88]	; 0x58
 801664c:	f04f 0900 	mov.w	r9, #0
 8016650:	e7d9      	b.n	8016606 <_printf_float+0x152>
 8016652:	b913      	cbnz	r3, 801665a <_printf_float+0x1a6>
 8016654:	6822      	ldr	r2, [r4, #0]
 8016656:	07d0      	lsls	r0, r2, #31
 8016658:	d501      	bpl.n	801665e <_printf_float+0x1aa>
 801665a:	3302      	adds	r3, #2
 801665c:	e7f3      	b.n	8016646 <_printf_float+0x192>
 801665e:	2301      	movs	r3, #1
 8016660:	e7f1      	b.n	8016646 <_printf_float+0x192>
 8016662:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8016666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801666a:	4293      	cmp	r3, r2
 801666c:	db05      	blt.n	801667a <_printf_float+0x1c6>
 801666e:	6822      	ldr	r2, [r4, #0]
 8016670:	6123      	str	r3, [r4, #16]
 8016672:	07d1      	lsls	r1, r2, #31
 8016674:	d5e8      	bpl.n	8016648 <_printf_float+0x194>
 8016676:	3301      	adds	r3, #1
 8016678:	e7e5      	b.n	8016646 <_printf_float+0x192>
 801667a:	2b00      	cmp	r3, #0
 801667c:	bfd4      	ite	le
 801667e:	f1c3 0302 	rsble	r3, r3, #2
 8016682:	2301      	movgt	r3, #1
 8016684:	4413      	add	r3, r2
 8016686:	e7de      	b.n	8016646 <_printf_float+0x192>
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	055a      	lsls	r2, r3, #21
 801668c:	d407      	bmi.n	801669e <_printf_float+0x1ea>
 801668e:	6923      	ldr	r3, [r4, #16]
 8016690:	4642      	mov	r2, r8
 8016692:	4631      	mov	r1, r6
 8016694:	4628      	mov	r0, r5
 8016696:	47b8      	blx	r7
 8016698:	3001      	adds	r0, #1
 801669a:	d12b      	bne.n	80166f4 <_printf_float+0x240>
 801669c:	e767      	b.n	801656e <_printf_float+0xba>
 801669e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80166a2:	f240 80dc 	bls.w	801685e <_printf_float+0x3aa>
 80166a6:	2200      	movs	r2, #0
 80166a8:	2300      	movs	r3, #0
 80166aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80166ae:	f7ea fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80166b2:	2800      	cmp	r0, #0
 80166b4:	d033      	beq.n	801671e <_printf_float+0x26a>
 80166b6:	2301      	movs	r3, #1
 80166b8:	4a41      	ldr	r2, [pc, #260]	; (80167c0 <_printf_float+0x30c>)
 80166ba:	4631      	mov	r1, r6
 80166bc:	4628      	mov	r0, r5
 80166be:	47b8      	blx	r7
 80166c0:	3001      	adds	r0, #1
 80166c2:	f43f af54 	beq.w	801656e <_printf_float+0xba>
 80166c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166ca:	429a      	cmp	r2, r3
 80166cc:	db02      	blt.n	80166d4 <_printf_float+0x220>
 80166ce:	6823      	ldr	r3, [r4, #0]
 80166d0:	07d8      	lsls	r0, r3, #31
 80166d2:	d50f      	bpl.n	80166f4 <_printf_float+0x240>
 80166d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166d8:	4631      	mov	r1, r6
 80166da:	4628      	mov	r0, r5
 80166dc:	47b8      	blx	r7
 80166de:	3001      	adds	r0, #1
 80166e0:	f43f af45 	beq.w	801656e <_printf_float+0xba>
 80166e4:	f04f 0800 	mov.w	r8, #0
 80166e8:	f104 091a 	add.w	r9, r4, #26
 80166ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166ee:	3b01      	subs	r3, #1
 80166f0:	4543      	cmp	r3, r8
 80166f2:	dc09      	bgt.n	8016708 <_printf_float+0x254>
 80166f4:	6823      	ldr	r3, [r4, #0]
 80166f6:	079b      	lsls	r3, r3, #30
 80166f8:	f100 8103 	bmi.w	8016902 <_printf_float+0x44e>
 80166fc:	68e0      	ldr	r0, [r4, #12]
 80166fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016700:	4298      	cmp	r0, r3
 8016702:	bfb8      	it	lt
 8016704:	4618      	movlt	r0, r3
 8016706:	e734      	b.n	8016572 <_printf_float+0xbe>
 8016708:	2301      	movs	r3, #1
 801670a:	464a      	mov	r2, r9
 801670c:	4631      	mov	r1, r6
 801670e:	4628      	mov	r0, r5
 8016710:	47b8      	blx	r7
 8016712:	3001      	adds	r0, #1
 8016714:	f43f af2b 	beq.w	801656e <_printf_float+0xba>
 8016718:	f108 0801 	add.w	r8, r8, #1
 801671c:	e7e6      	b.n	80166ec <_printf_float+0x238>
 801671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016720:	2b00      	cmp	r3, #0
 8016722:	dc2b      	bgt.n	801677c <_printf_float+0x2c8>
 8016724:	2301      	movs	r3, #1
 8016726:	4a26      	ldr	r2, [pc, #152]	; (80167c0 <_printf_float+0x30c>)
 8016728:	4631      	mov	r1, r6
 801672a:	4628      	mov	r0, r5
 801672c:	47b8      	blx	r7
 801672e:	3001      	adds	r0, #1
 8016730:	f43f af1d 	beq.w	801656e <_printf_float+0xba>
 8016734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016736:	b923      	cbnz	r3, 8016742 <_printf_float+0x28e>
 8016738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801673a:	b913      	cbnz	r3, 8016742 <_printf_float+0x28e>
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	07d9      	lsls	r1, r3, #31
 8016740:	d5d8      	bpl.n	80166f4 <_printf_float+0x240>
 8016742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016746:	4631      	mov	r1, r6
 8016748:	4628      	mov	r0, r5
 801674a:	47b8      	blx	r7
 801674c:	3001      	adds	r0, #1
 801674e:	f43f af0e 	beq.w	801656e <_printf_float+0xba>
 8016752:	f04f 0900 	mov.w	r9, #0
 8016756:	f104 0a1a 	add.w	sl, r4, #26
 801675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801675c:	425b      	negs	r3, r3
 801675e:	454b      	cmp	r3, r9
 8016760:	dc01      	bgt.n	8016766 <_printf_float+0x2b2>
 8016762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016764:	e794      	b.n	8016690 <_printf_float+0x1dc>
 8016766:	2301      	movs	r3, #1
 8016768:	4652      	mov	r2, sl
 801676a:	4631      	mov	r1, r6
 801676c:	4628      	mov	r0, r5
 801676e:	47b8      	blx	r7
 8016770:	3001      	adds	r0, #1
 8016772:	f43f aefc 	beq.w	801656e <_printf_float+0xba>
 8016776:	f109 0901 	add.w	r9, r9, #1
 801677a:	e7ee      	b.n	801675a <_printf_float+0x2a6>
 801677c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801677e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016780:	429a      	cmp	r2, r3
 8016782:	bfa8      	it	ge
 8016784:	461a      	movge	r2, r3
 8016786:	2a00      	cmp	r2, #0
 8016788:	4691      	mov	r9, r2
 801678a:	dd07      	ble.n	801679c <_printf_float+0x2e8>
 801678c:	4613      	mov	r3, r2
 801678e:	4631      	mov	r1, r6
 8016790:	4642      	mov	r2, r8
 8016792:	4628      	mov	r0, r5
 8016794:	47b8      	blx	r7
 8016796:	3001      	adds	r0, #1
 8016798:	f43f aee9 	beq.w	801656e <_printf_float+0xba>
 801679c:	f104 031a 	add.w	r3, r4, #26
 80167a0:	f04f 0b00 	mov.w	fp, #0
 80167a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80167a8:	9306      	str	r3, [sp, #24]
 80167aa:	e015      	b.n	80167d8 <_printf_float+0x324>
 80167ac:	7fefffff 	.word	0x7fefffff
 80167b0:	0801c368 	.word	0x0801c368
 80167b4:	0801c364 	.word	0x0801c364
 80167b8:	0801c370 	.word	0x0801c370
 80167bc:	0801c36c 	.word	0x0801c36c
 80167c0:	0801c374 	.word	0x0801c374
 80167c4:	2301      	movs	r3, #1
 80167c6:	9a06      	ldr	r2, [sp, #24]
 80167c8:	4631      	mov	r1, r6
 80167ca:	4628      	mov	r0, r5
 80167cc:	47b8      	blx	r7
 80167ce:	3001      	adds	r0, #1
 80167d0:	f43f aecd 	beq.w	801656e <_printf_float+0xba>
 80167d4:	f10b 0b01 	add.w	fp, fp, #1
 80167d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80167dc:	ebaa 0309 	sub.w	r3, sl, r9
 80167e0:	455b      	cmp	r3, fp
 80167e2:	dcef      	bgt.n	80167c4 <_printf_float+0x310>
 80167e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80167e8:	429a      	cmp	r2, r3
 80167ea:	44d0      	add	r8, sl
 80167ec:	db15      	blt.n	801681a <_printf_float+0x366>
 80167ee:	6823      	ldr	r3, [r4, #0]
 80167f0:	07da      	lsls	r2, r3, #31
 80167f2:	d412      	bmi.n	801681a <_printf_float+0x366>
 80167f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167f8:	eba3 020a 	sub.w	r2, r3, sl
 80167fc:	eba3 0a01 	sub.w	sl, r3, r1
 8016800:	4592      	cmp	sl, r2
 8016802:	bfa8      	it	ge
 8016804:	4692      	movge	sl, r2
 8016806:	f1ba 0f00 	cmp.w	sl, #0
 801680a:	dc0e      	bgt.n	801682a <_printf_float+0x376>
 801680c:	f04f 0800 	mov.w	r8, #0
 8016810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016814:	f104 091a 	add.w	r9, r4, #26
 8016818:	e019      	b.n	801684e <_printf_float+0x39a>
 801681a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801681e:	4631      	mov	r1, r6
 8016820:	4628      	mov	r0, r5
 8016822:	47b8      	blx	r7
 8016824:	3001      	adds	r0, #1
 8016826:	d1e5      	bne.n	80167f4 <_printf_float+0x340>
 8016828:	e6a1      	b.n	801656e <_printf_float+0xba>
 801682a:	4653      	mov	r3, sl
 801682c:	4642      	mov	r2, r8
 801682e:	4631      	mov	r1, r6
 8016830:	4628      	mov	r0, r5
 8016832:	47b8      	blx	r7
 8016834:	3001      	adds	r0, #1
 8016836:	d1e9      	bne.n	801680c <_printf_float+0x358>
 8016838:	e699      	b.n	801656e <_printf_float+0xba>
 801683a:	2301      	movs	r3, #1
 801683c:	464a      	mov	r2, r9
 801683e:	4631      	mov	r1, r6
 8016840:	4628      	mov	r0, r5
 8016842:	47b8      	blx	r7
 8016844:	3001      	adds	r0, #1
 8016846:	f43f ae92 	beq.w	801656e <_printf_float+0xba>
 801684a:	f108 0801 	add.w	r8, r8, #1
 801684e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016852:	1a9b      	subs	r3, r3, r2
 8016854:	eba3 030a 	sub.w	r3, r3, sl
 8016858:	4543      	cmp	r3, r8
 801685a:	dcee      	bgt.n	801683a <_printf_float+0x386>
 801685c:	e74a      	b.n	80166f4 <_printf_float+0x240>
 801685e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016860:	2a01      	cmp	r2, #1
 8016862:	dc01      	bgt.n	8016868 <_printf_float+0x3b4>
 8016864:	07db      	lsls	r3, r3, #31
 8016866:	d53a      	bpl.n	80168de <_printf_float+0x42a>
 8016868:	2301      	movs	r3, #1
 801686a:	4642      	mov	r2, r8
 801686c:	4631      	mov	r1, r6
 801686e:	4628      	mov	r0, r5
 8016870:	47b8      	blx	r7
 8016872:	3001      	adds	r0, #1
 8016874:	f43f ae7b 	beq.w	801656e <_printf_float+0xba>
 8016878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801687c:	4631      	mov	r1, r6
 801687e:	4628      	mov	r0, r5
 8016880:	47b8      	blx	r7
 8016882:	3001      	adds	r0, #1
 8016884:	f108 0801 	add.w	r8, r8, #1
 8016888:	f43f ae71 	beq.w	801656e <_printf_float+0xba>
 801688c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801688e:	2200      	movs	r2, #0
 8016890:	f103 3aff 	add.w	sl, r3, #4294967295
 8016894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016898:	2300      	movs	r3, #0
 801689a:	f7ea f925 	bl	8000ae8 <__aeabi_dcmpeq>
 801689e:	b9c8      	cbnz	r0, 80168d4 <_printf_float+0x420>
 80168a0:	4653      	mov	r3, sl
 80168a2:	4642      	mov	r2, r8
 80168a4:	4631      	mov	r1, r6
 80168a6:	4628      	mov	r0, r5
 80168a8:	47b8      	blx	r7
 80168aa:	3001      	adds	r0, #1
 80168ac:	d10e      	bne.n	80168cc <_printf_float+0x418>
 80168ae:	e65e      	b.n	801656e <_printf_float+0xba>
 80168b0:	2301      	movs	r3, #1
 80168b2:	4652      	mov	r2, sl
 80168b4:	4631      	mov	r1, r6
 80168b6:	4628      	mov	r0, r5
 80168b8:	47b8      	blx	r7
 80168ba:	3001      	adds	r0, #1
 80168bc:	f43f ae57 	beq.w	801656e <_printf_float+0xba>
 80168c0:	f108 0801 	add.w	r8, r8, #1
 80168c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168c6:	3b01      	subs	r3, #1
 80168c8:	4543      	cmp	r3, r8
 80168ca:	dcf1      	bgt.n	80168b0 <_printf_float+0x3fc>
 80168cc:	464b      	mov	r3, r9
 80168ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80168d2:	e6de      	b.n	8016692 <_printf_float+0x1de>
 80168d4:	f04f 0800 	mov.w	r8, #0
 80168d8:	f104 0a1a 	add.w	sl, r4, #26
 80168dc:	e7f2      	b.n	80168c4 <_printf_float+0x410>
 80168de:	2301      	movs	r3, #1
 80168e0:	e7df      	b.n	80168a2 <_printf_float+0x3ee>
 80168e2:	2301      	movs	r3, #1
 80168e4:	464a      	mov	r2, r9
 80168e6:	4631      	mov	r1, r6
 80168e8:	4628      	mov	r0, r5
 80168ea:	47b8      	blx	r7
 80168ec:	3001      	adds	r0, #1
 80168ee:	f43f ae3e 	beq.w	801656e <_printf_float+0xba>
 80168f2:	f108 0801 	add.w	r8, r8, #1
 80168f6:	68e3      	ldr	r3, [r4, #12]
 80168f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168fa:	1a9b      	subs	r3, r3, r2
 80168fc:	4543      	cmp	r3, r8
 80168fe:	dcf0      	bgt.n	80168e2 <_printf_float+0x42e>
 8016900:	e6fc      	b.n	80166fc <_printf_float+0x248>
 8016902:	f04f 0800 	mov.w	r8, #0
 8016906:	f104 0919 	add.w	r9, r4, #25
 801690a:	e7f4      	b.n	80168f6 <_printf_float+0x442>
 801690c:	2900      	cmp	r1, #0
 801690e:	f43f ae8b 	beq.w	8016628 <_printf_float+0x174>
 8016912:	2300      	movs	r3, #0
 8016914:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016918:	ab09      	add	r3, sp, #36	; 0x24
 801691a:	9300      	str	r3, [sp, #0]
 801691c:	ec49 8b10 	vmov	d0, r8, r9
 8016920:	6022      	str	r2, [r4, #0]
 8016922:	f8cd a004 	str.w	sl, [sp, #4]
 8016926:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801692a:	4628      	mov	r0, r5
 801692c:	f7ff fd2e 	bl	801638c <__cvt>
 8016930:	4680      	mov	r8, r0
 8016932:	e648      	b.n	80165c6 <_printf_float+0x112>

08016934 <_printf_common>:
 8016934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016938:	4691      	mov	r9, r2
 801693a:	461f      	mov	r7, r3
 801693c:	688a      	ldr	r2, [r1, #8]
 801693e:	690b      	ldr	r3, [r1, #16]
 8016940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016944:	4293      	cmp	r3, r2
 8016946:	bfb8      	it	lt
 8016948:	4613      	movlt	r3, r2
 801694a:	f8c9 3000 	str.w	r3, [r9]
 801694e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016952:	4606      	mov	r6, r0
 8016954:	460c      	mov	r4, r1
 8016956:	b112      	cbz	r2, 801695e <_printf_common+0x2a>
 8016958:	3301      	adds	r3, #1
 801695a:	f8c9 3000 	str.w	r3, [r9]
 801695e:	6823      	ldr	r3, [r4, #0]
 8016960:	0699      	lsls	r1, r3, #26
 8016962:	bf42      	ittt	mi
 8016964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016968:	3302      	addmi	r3, #2
 801696a:	f8c9 3000 	strmi.w	r3, [r9]
 801696e:	6825      	ldr	r5, [r4, #0]
 8016970:	f015 0506 	ands.w	r5, r5, #6
 8016974:	d107      	bne.n	8016986 <_printf_common+0x52>
 8016976:	f104 0a19 	add.w	sl, r4, #25
 801697a:	68e3      	ldr	r3, [r4, #12]
 801697c:	f8d9 2000 	ldr.w	r2, [r9]
 8016980:	1a9b      	subs	r3, r3, r2
 8016982:	42ab      	cmp	r3, r5
 8016984:	dc28      	bgt.n	80169d8 <_printf_common+0xa4>
 8016986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801698a:	6822      	ldr	r2, [r4, #0]
 801698c:	3300      	adds	r3, #0
 801698e:	bf18      	it	ne
 8016990:	2301      	movne	r3, #1
 8016992:	0692      	lsls	r2, r2, #26
 8016994:	d42d      	bmi.n	80169f2 <_printf_common+0xbe>
 8016996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801699a:	4639      	mov	r1, r7
 801699c:	4630      	mov	r0, r6
 801699e:	47c0      	blx	r8
 80169a0:	3001      	adds	r0, #1
 80169a2:	d020      	beq.n	80169e6 <_printf_common+0xb2>
 80169a4:	6823      	ldr	r3, [r4, #0]
 80169a6:	68e5      	ldr	r5, [r4, #12]
 80169a8:	f8d9 2000 	ldr.w	r2, [r9]
 80169ac:	f003 0306 	and.w	r3, r3, #6
 80169b0:	2b04      	cmp	r3, #4
 80169b2:	bf08      	it	eq
 80169b4:	1aad      	subeq	r5, r5, r2
 80169b6:	68a3      	ldr	r3, [r4, #8]
 80169b8:	6922      	ldr	r2, [r4, #16]
 80169ba:	bf0c      	ite	eq
 80169bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80169c0:	2500      	movne	r5, #0
 80169c2:	4293      	cmp	r3, r2
 80169c4:	bfc4      	itt	gt
 80169c6:	1a9b      	subgt	r3, r3, r2
 80169c8:	18ed      	addgt	r5, r5, r3
 80169ca:	f04f 0900 	mov.w	r9, #0
 80169ce:	341a      	adds	r4, #26
 80169d0:	454d      	cmp	r5, r9
 80169d2:	d11a      	bne.n	8016a0a <_printf_common+0xd6>
 80169d4:	2000      	movs	r0, #0
 80169d6:	e008      	b.n	80169ea <_printf_common+0xb6>
 80169d8:	2301      	movs	r3, #1
 80169da:	4652      	mov	r2, sl
 80169dc:	4639      	mov	r1, r7
 80169de:	4630      	mov	r0, r6
 80169e0:	47c0      	blx	r8
 80169e2:	3001      	adds	r0, #1
 80169e4:	d103      	bne.n	80169ee <_printf_common+0xba>
 80169e6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ee:	3501      	adds	r5, #1
 80169f0:	e7c3      	b.n	801697a <_printf_common+0x46>
 80169f2:	18e1      	adds	r1, r4, r3
 80169f4:	1c5a      	adds	r2, r3, #1
 80169f6:	2030      	movs	r0, #48	; 0x30
 80169f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80169fc:	4422      	add	r2, r4
 80169fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a06:	3302      	adds	r3, #2
 8016a08:	e7c5      	b.n	8016996 <_printf_common+0x62>
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	4622      	mov	r2, r4
 8016a0e:	4639      	mov	r1, r7
 8016a10:	4630      	mov	r0, r6
 8016a12:	47c0      	blx	r8
 8016a14:	3001      	adds	r0, #1
 8016a16:	d0e6      	beq.n	80169e6 <_printf_common+0xb2>
 8016a18:	f109 0901 	add.w	r9, r9, #1
 8016a1c:	e7d8      	b.n	80169d0 <_printf_common+0x9c>
	...

08016a20 <_printf_i>:
 8016a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016a28:	460c      	mov	r4, r1
 8016a2a:	7e09      	ldrb	r1, [r1, #24]
 8016a2c:	b085      	sub	sp, #20
 8016a2e:	296e      	cmp	r1, #110	; 0x6e
 8016a30:	4617      	mov	r7, r2
 8016a32:	4606      	mov	r6, r0
 8016a34:	4698      	mov	r8, r3
 8016a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a38:	f000 80b3 	beq.w	8016ba2 <_printf_i+0x182>
 8016a3c:	d822      	bhi.n	8016a84 <_printf_i+0x64>
 8016a3e:	2963      	cmp	r1, #99	; 0x63
 8016a40:	d036      	beq.n	8016ab0 <_printf_i+0x90>
 8016a42:	d80a      	bhi.n	8016a5a <_printf_i+0x3a>
 8016a44:	2900      	cmp	r1, #0
 8016a46:	f000 80b9 	beq.w	8016bbc <_printf_i+0x19c>
 8016a4a:	2958      	cmp	r1, #88	; 0x58
 8016a4c:	f000 8083 	beq.w	8016b56 <_printf_i+0x136>
 8016a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016a58:	e032      	b.n	8016ac0 <_printf_i+0xa0>
 8016a5a:	2964      	cmp	r1, #100	; 0x64
 8016a5c:	d001      	beq.n	8016a62 <_printf_i+0x42>
 8016a5e:	2969      	cmp	r1, #105	; 0x69
 8016a60:	d1f6      	bne.n	8016a50 <_printf_i+0x30>
 8016a62:	6820      	ldr	r0, [r4, #0]
 8016a64:	6813      	ldr	r3, [r2, #0]
 8016a66:	0605      	lsls	r5, r0, #24
 8016a68:	f103 0104 	add.w	r1, r3, #4
 8016a6c:	d52a      	bpl.n	8016ac4 <_printf_i+0xa4>
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	6011      	str	r1, [r2, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	da03      	bge.n	8016a7e <_printf_i+0x5e>
 8016a76:	222d      	movs	r2, #45	; 0x2d
 8016a78:	425b      	negs	r3, r3
 8016a7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016a7e:	486f      	ldr	r0, [pc, #444]	; (8016c3c <_printf_i+0x21c>)
 8016a80:	220a      	movs	r2, #10
 8016a82:	e039      	b.n	8016af8 <_printf_i+0xd8>
 8016a84:	2973      	cmp	r1, #115	; 0x73
 8016a86:	f000 809d 	beq.w	8016bc4 <_printf_i+0x1a4>
 8016a8a:	d808      	bhi.n	8016a9e <_printf_i+0x7e>
 8016a8c:	296f      	cmp	r1, #111	; 0x6f
 8016a8e:	d020      	beq.n	8016ad2 <_printf_i+0xb2>
 8016a90:	2970      	cmp	r1, #112	; 0x70
 8016a92:	d1dd      	bne.n	8016a50 <_printf_i+0x30>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	f043 0320 	orr.w	r3, r3, #32
 8016a9a:	6023      	str	r3, [r4, #0]
 8016a9c:	e003      	b.n	8016aa6 <_printf_i+0x86>
 8016a9e:	2975      	cmp	r1, #117	; 0x75
 8016aa0:	d017      	beq.n	8016ad2 <_printf_i+0xb2>
 8016aa2:	2978      	cmp	r1, #120	; 0x78
 8016aa4:	d1d4      	bne.n	8016a50 <_printf_i+0x30>
 8016aa6:	2378      	movs	r3, #120	; 0x78
 8016aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016aac:	4864      	ldr	r0, [pc, #400]	; (8016c40 <_printf_i+0x220>)
 8016aae:	e055      	b.n	8016b5c <_printf_i+0x13c>
 8016ab0:	6813      	ldr	r3, [r2, #0]
 8016ab2:	1d19      	adds	r1, r3, #4
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	6011      	str	r1, [r2, #0]
 8016ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	e08c      	b.n	8016bde <_printf_i+0x1be>
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	6011      	str	r1, [r2, #0]
 8016ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016acc:	bf18      	it	ne
 8016ace:	b21b      	sxthne	r3, r3
 8016ad0:	e7cf      	b.n	8016a72 <_printf_i+0x52>
 8016ad2:	6813      	ldr	r3, [r2, #0]
 8016ad4:	6825      	ldr	r5, [r4, #0]
 8016ad6:	1d18      	adds	r0, r3, #4
 8016ad8:	6010      	str	r0, [r2, #0]
 8016ada:	0628      	lsls	r0, r5, #24
 8016adc:	d501      	bpl.n	8016ae2 <_printf_i+0xc2>
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	e002      	b.n	8016ae8 <_printf_i+0xc8>
 8016ae2:	0668      	lsls	r0, r5, #25
 8016ae4:	d5fb      	bpl.n	8016ade <_printf_i+0xbe>
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	4854      	ldr	r0, [pc, #336]	; (8016c3c <_printf_i+0x21c>)
 8016aea:	296f      	cmp	r1, #111	; 0x6f
 8016aec:	bf14      	ite	ne
 8016aee:	220a      	movne	r2, #10
 8016af0:	2208      	moveq	r2, #8
 8016af2:	2100      	movs	r1, #0
 8016af4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016af8:	6865      	ldr	r5, [r4, #4]
 8016afa:	60a5      	str	r5, [r4, #8]
 8016afc:	2d00      	cmp	r5, #0
 8016afe:	f2c0 8095 	blt.w	8016c2c <_printf_i+0x20c>
 8016b02:	6821      	ldr	r1, [r4, #0]
 8016b04:	f021 0104 	bic.w	r1, r1, #4
 8016b08:	6021      	str	r1, [r4, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d13d      	bne.n	8016b8a <_printf_i+0x16a>
 8016b0e:	2d00      	cmp	r5, #0
 8016b10:	f040 808e 	bne.w	8016c30 <_printf_i+0x210>
 8016b14:	4665      	mov	r5, ip
 8016b16:	2a08      	cmp	r2, #8
 8016b18:	d10b      	bne.n	8016b32 <_printf_i+0x112>
 8016b1a:	6823      	ldr	r3, [r4, #0]
 8016b1c:	07db      	lsls	r3, r3, #31
 8016b1e:	d508      	bpl.n	8016b32 <_printf_i+0x112>
 8016b20:	6923      	ldr	r3, [r4, #16]
 8016b22:	6862      	ldr	r2, [r4, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	bfde      	ittt	le
 8016b28:	2330      	movle	r3, #48	; 0x30
 8016b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016b32:	ebac 0305 	sub.w	r3, ip, r5
 8016b36:	6123      	str	r3, [r4, #16]
 8016b38:	f8cd 8000 	str.w	r8, [sp]
 8016b3c:	463b      	mov	r3, r7
 8016b3e:	aa03      	add	r2, sp, #12
 8016b40:	4621      	mov	r1, r4
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7ff fef6 	bl	8016934 <_printf_common>
 8016b48:	3001      	adds	r0, #1
 8016b4a:	d14d      	bne.n	8016be8 <_printf_i+0x1c8>
 8016b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b50:	b005      	add	sp, #20
 8016b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b56:	4839      	ldr	r0, [pc, #228]	; (8016c3c <_printf_i+0x21c>)
 8016b58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016b5c:	6813      	ldr	r3, [r2, #0]
 8016b5e:	6821      	ldr	r1, [r4, #0]
 8016b60:	1d1d      	adds	r5, r3, #4
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	6015      	str	r5, [r2, #0]
 8016b66:	060a      	lsls	r2, r1, #24
 8016b68:	d50b      	bpl.n	8016b82 <_printf_i+0x162>
 8016b6a:	07ca      	lsls	r2, r1, #31
 8016b6c:	bf44      	itt	mi
 8016b6e:	f041 0120 	orrmi.w	r1, r1, #32
 8016b72:	6021      	strmi	r1, [r4, #0]
 8016b74:	b91b      	cbnz	r3, 8016b7e <_printf_i+0x15e>
 8016b76:	6822      	ldr	r2, [r4, #0]
 8016b78:	f022 0220 	bic.w	r2, r2, #32
 8016b7c:	6022      	str	r2, [r4, #0]
 8016b7e:	2210      	movs	r2, #16
 8016b80:	e7b7      	b.n	8016af2 <_printf_i+0xd2>
 8016b82:	064d      	lsls	r5, r1, #25
 8016b84:	bf48      	it	mi
 8016b86:	b29b      	uxthmi	r3, r3
 8016b88:	e7ef      	b.n	8016b6a <_printf_i+0x14a>
 8016b8a:	4665      	mov	r5, ip
 8016b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016b90:	fb02 3311 	mls	r3, r2, r1, r3
 8016b94:	5cc3      	ldrb	r3, [r0, r3]
 8016b96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	2900      	cmp	r1, #0
 8016b9e:	d1f5      	bne.n	8016b8c <_printf_i+0x16c>
 8016ba0:	e7b9      	b.n	8016b16 <_printf_i+0xf6>
 8016ba2:	6813      	ldr	r3, [r2, #0]
 8016ba4:	6825      	ldr	r5, [r4, #0]
 8016ba6:	6961      	ldr	r1, [r4, #20]
 8016ba8:	1d18      	adds	r0, r3, #4
 8016baa:	6010      	str	r0, [r2, #0]
 8016bac:	0628      	lsls	r0, r5, #24
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	d501      	bpl.n	8016bb6 <_printf_i+0x196>
 8016bb2:	6019      	str	r1, [r3, #0]
 8016bb4:	e002      	b.n	8016bbc <_printf_i+0x19c>
 8016bb6:	066a      	lsls	r2, r5, #25
 8016bb8:	d5fb      	bpl.n	8016bb2 <_printf_i+0x192>
 8016bba:	8019      	strh	r1, [r3, #0]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	6123      	str	r3, [r4, #16]
 8016bc0:	4665      	mov	r5, ip
 8016bc2:	e7b9      	b.n	8016b38 <_printf_i+0x118>
 8016bc4:	6813      	ldr	r3, [r2, #0]
 8016bc6:	1d19      	adds	r1, r3, #4
 8016bc8:	6011      	str	r1, [r2, #0]
 8016bca:	681d      	ldr	r5, [r3, #0]
 8016bcc:	6862      	ldr	r2, [r4, #4]
 8016bce:	2100      	movs	r1, #0
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f7e9 fb15 	bl	8000200 <memchr>
 8016bd6:	b108      	cbz	r0, 8016bdc <_printf_i+0x1bc>
 8016bd8:	1b40      	subs	r0, r0, r5
 8016bda:	6060      	str	r0, [r4, #4]
 8016bdc:	6863      	ldr	r3, [r4, #4]
 8016bde:	6123      	str	r3, [r4, #16]
 8016be0:	2300      	movs	r3, #0
 8016be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016be6:	e7a7      	b.n	8016b38 <_printf_i+0x118>
 8016be8:	6923      	ldr	r3, [r4, #16]
 8016bea:	462a      	mov	r2, r5
 8016bec:	4639      	mov	r1, r7
 8016bee:	4630      	mov	r0, r6
 8016bf0:	47c0      	blx	r8
 8016bf2:	3001      	adds	r0, #1
 8016bf4:	d0aa      	beq.n	8016b4c <_printf_i+0x12c>
 8016bf6:	6823      	ldr	r3, [r4, #0]
 8016bf8:	079b      	lsls	r3, r3, #30
 8016bfa:	d413      	bmi.n	8016c24 <_printf_i+0x204>
 8016bfc:	68e0      	ldr	r0, [r4, #12]
 8016bfe:	9b03      	ldr	r3, [sp, #12]
 8016c00:	4298      	cmp	r0, r3
 8016c02:	bfb8      	it	lt
 8016c04:	4618      	movlt	r0, r3
 8016c06:	e7a3      	b.n	8016b50 <_printf_i+0x130>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	464a      	mov	r2, r9
 8016c0c:	4639      	mov	r1, r7
 8016c0e:	4630      	mov	r0, r6
 8016c10:	47c0      	blx	r8
 8016c12:	3001      	adds	r0, #1
 8016c14:	d09a      	beq.n	8016b4c <_printf_i+0x12c>
 8016c16:	3501      	adds	r5, #1
 8016c18:	68e3      	ldr	r3, [r4, #12]
 8016c1a:	9a03      	ldr	r2, [sp, #12]
 8016c1c:	1a9b      	subs	r3, r3, r2
 8016c1e:	42ab      	cmp	r3, r5
 8016c20:	dcf2      	bgt.n	8016c08 <_printf_i+0x1e8>
 8016c22:	e7eb      	b.n	8016bfc <_printf_i+0x1dc>
 8016c24:	2500      	movs	r5, #0
 8016c26:	f104 0919 	add.w	r9, r4, #25
 8016c2a:	e7f5      	b.n	8016c18 <_printf_i+0x1f8>
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1ac      	bne.n	8016b8a <_printf_i+0x16a>
 8016c30:	7803      	ldrb	r3, [r0, #0]
 8016c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c3a:	e76c      	b.n	8016b16 <_printf_i+0xf6>
 8016c3c:	0801c376 	.word	0x0801c376
 8016c40:	0801c387 	.word	0x0801c387

08016c44 <_scanf_float>:
 8016c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c48:	469a      	mov	sl, r3
 8016c4a:	688b      	ldr	r3, [r1, #8]
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	1e5a      	subs	r2, r3, #1
 8016c50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016c54:	b087      	sub	sp, #28
 8016c56:	bf83      	ittte	hi
 8016c58:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016c5c:	189b      	addhi	r3, r3, r2
 8016c5e:	9301      	strhi	r3, [sp, #4]
 8016c60:	2300      	movls	r3, #0
 8016c62:	bf86      	itte	hi
 8016c64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c68:	608b      	strhi	r3, [r1, #8]
 8016c6a:	9301      	strls	r3, [sp, #4]
 8016c6c:	680b      	ldr	r3, [r1, #0]
 8016c6e:	4688      	mov	r8, r1
 8016c70:	f04f 0b00 	mov.w	fp, #0
 8016c74:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016c78:	f848 3b1c 	str.w	r3, [r8], #28
 8016c7c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016c80:	4607      	mov	r7, r0
 8016c82:	460c      	mov	r4, r1
 8016c84:	4645      	mov	r5, r8
 8016c86:	465a      	mov	r2, fp
 8016c88:	46d9      	mov	r9, fp
 8016c8a:	f8cd b008 	str.w	fp, [sp, #8]
 8016c8e:	68a1      	ldr	r1, [r4, #8]
 8016c90:	b181      	cbz	r1, 8016cb4 <_scanf_float+0x70>
 8016c92:	6833      	ldr	r3, [r6, #0]
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	2b49      	cmp	r3, #73	; 0x49
 8016c98:	d071      	beq.n	8016d7e <_scanf_float+0x13a>
 8016c9a:	d84d      	bhi.n	8016d38 <_scanf_float+0xf4>
 8016c9c:	2b39      	cmp	r3, #57	; 0x39
 8016c9e:	d840      	bhi.n	8016d22 <_scanf_float+0xde>
 8016ca0:	2b31      	cmp	r3, #49	; 0x31
 8016ca2:	f080 8088 	bcs.w	8016db6 <_scanf_float+0x172>
 8016ca6:	2b2d      	cmp	r3, #45	; 0x2d
 8016ca8:	f000 8090 	beq.w	8016dcc <_scanf_float+0x188>
 8016cac:	d815      	bhi.n	8016cda <_scanf_float+0x96>
 8016cae:	2b2b      	cmp	r3, #43	; 0x2b
 8016cb0:	f000 808c 	beq.w	8016dcc <_scanf_float+0x188>
 8016cb4:	f1b9 0f00 	cmp.w	r9, #0
 8016cb8:	d003      	beq.n	8016cc2 <_scanf_float+0x7e>
 8016cba:	6823      	ldr	r3, [r4, #0]
 8016cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016cc0:	6023      	str	r3, [r4, #0]
 8016cc2:	3a01      	subs	r2, #1
 8016cc4:	2a01      	cmp	r2, #1
 8016cc6:	f200 80ea 	bhi.w	8016e9e <_scanf_float+0x25a>
 8016cca:	4545      	cmp	r5, r8
 8016ccc:	f200 80dc 	bhi.w	8016e88 <_scanf_float+0x244>
 8016cd0:	2601      	movs	r6, #1
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	b007      	add	sp, #28
 8016cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cda:	2b2e      	cmp	r3, #46	; 0x2e
 8016cdc:	f000 809f 	beq.w	8016e1e <_scanf_float+0x1da>
 8016ce0:	2b30      	cmp	r3, #48	; 0x30
 8016ce2:	d1e7      	bne.n	8016cb4 <_scanf_float+0x70>
 8016ce4:	6820      	ldr	r0, [r4, #0]
 8016ce6:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016cea:	d064      	beq.n	8016db6 <_scanf_float+0x172>
 8016cec:	9b01      	ldr	r3, [sp, #4]
 8016cee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016cf2:	6020      	str	r0, [r4, #0]
 8016cf4:	f109 0901 	add.w	r9, r9, #1
 8016cf8:	b11b      	cbz	r3, 8016d02 <_scanf_float+0xbe>
 8016cfa:	3b01      	subs	r3, #1
 8016cfc:	3101      	adds	r1, #1
 8016cfe:	9301      	str	r3, [sp, #4]
 8016d00:	60a1      	str	r1, [r4, #8]
 8016d02:	68a3      	ldr	r3, [r4, #8]
 8016d04:	3b01      	subs	r3, #1
 8016d06:	60a3      	str	r3, [r4, #8]
 8016d08:	6923      	ldr	r3, [r4, #16]
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	6123      	str	r3, [r4, #16]
 8016d0e:	6873      	ldr	r3, [r6, #4]
 8016d10:	3b01      	subs	r3, #1
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	6073      	str	r3, [r6, #4]
 8016d16:	f340 80ac 	ble.w	8016e72 <_scanf_float+0x22e>
 8016d1a:	6833      	ldr	r3, [r6, #0]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	6033      	str	r3, [r6, #0]
 8016d20:	e7b5      	b.n	8016c8e <_scanf_float+0x4a>
 8016d22:	2b45      	cmp	r3, #69	; 0x45
 8016d24:	f000 8085 	beq.w	8016e32 <_scanf_float+0x1ee>
 8016d28:	2b46      	cmp	r3, #70	; 0x46
 8016d2a:	d06a      	beq.n	8016e02 <_scanf_float+0x1be>
 8016d2c:	2b41      	cmp	r3, #65	; 0x41
 8016d2e:	d1c1      	bne.n	8016cb4 <_scanf_float+0x70>
 8016d30:	2a01      	cmp	r2, #1
 8016d32:	d1bf      	bne.n	8016cb4 <_scanf_float+0x70>
 8016d34:	2202      	movs	r2, #2
 8016d36:	e046      	b.n	8016dc6 <_scanf_float+0x182>
 8016d38:	2b65      	cmp	r3, #101	; 0x65
 8016d3a:	d07a      	beq.n	8016e32 <_scanf_float+0x1ee>
 8016d3c:	d818      	bhi.n	8016d70 <_scanf_float+0x12c>
 8016d3e:	2b54      	cmp	r3, #84	; 0x54
 8016d40:	d066      	beq.n	8016e10 <_scanf_float+0x1cc>
 8016d42:	d811      	bhi.n	8016d68 <_scanf_float+0x124>
 8016d44:	2b4e      	cmp	r3, #78	; 0x4e
 8016d46:	d1b5      	bne.n	8016cb4 <_scanf_float+0x70>
 8016d48:	2a00      	cmp	r2, #0
 8016d4a:	d146      	bne.n	8016dda <_scanf_float+0x196>
 8016d4c:	f1b9 0f00 	cmp.w	r9, #0
 8016d50:	d145      	bne.n	8016dde <_scanf_float+0x19a>
 8016d52:	6821      	ldr	r1, [r4, #0]
 8016d54:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016d58:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016d5c:	d13f      	bne.n	8016dde <_scanf_float+0x19a>
 8016d5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016d62:	6021      	str	r1, [r4, #0]
 8016d64:	2201      	movs	r2, #1
 8016d66:	e02e      	b.n	8016dc6 <_scanf_float+0x182>
 8016d68:	2b59      	cmp	r3, #89	; 0x59
 8016d6a:	d01e      	beq.n	8016daa <_scanf_float+0x166>
 8016d6c:	2b61      	cmp	r3, #97	; 0x61
 8016d6e:	e7de      	b.n	8016d2e <_scanf_float+0xea>
 8016d70:	2b6e      	cmp	r3, #110	; 0x6e
 8016d72:	d0e9      	beq.n	8016d48 <_scanf_float+0x104>
 8016d74:	d815      	bhi.n	8016da2 <_scanf_float+0x15e>
 8016d76:	2b66      	cmp	r3, #102	; 0x66
 8016d78:	d043      	beq.n	8016e02 <_scanf_float+0x1be>
 8016d7a:	2b69      	cmp	r3, #105	; 0x69
 8016d7c:	d19a      	bne.n	8016cb4 <_scanf_float+0x70>
 8016d7e:	f1bb 0f00 	cmp.w	fp, #0
 8016d82:	d138      	bne.n	8016df6 <_scanf_float+0x1b2>
 8016d84:	f1b9 0f00 	cmp.w	r9, #0
 8016d88:	d197      	bne.n	8016cba <_scanf_float+0x76>
 8016d8a:	6821      	ldr	r1, [r4, #0]
 8016d8c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016d90:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016d94:	d195      	bne.n	8016cc2 <_scanf_float+0x7e>
 8016d96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016d9a:	6021      	str	r1, [r4, #0]
 8016d9c:	f04f 0b01 	mov.w	fp, #1
 8016da0:	e011      	b.n	8016dc6 <_scanf_float+0x182>
 8016da2:	2b74      	cmp	r3, #116	; 0x74
 8016da4:	d034      	beq.n	8016e10 <_scanf_float+0x1cc>
 8016da6:	2b79      	cmp	r3, #121	; 0x79
 8016da8:	d184      	bne.n	8016cb4 <_scanf_float+0x70>
 8016daa:	f1bb 0f07 	cmp.w	fp, #7
 8016dae:	d181      	bne.n	8016cb4 <_scanf_float+0x70>
 8016db0:	f04f 0b08 	mov.w	fp, #8
 8016db4:	e007      	b.n	8016dc6 <_scanf_float+0x182>
 8016db6:	eb12 0f0b 	cmn.w	r2, fp
 8016dba:	f47f af7b 	bne.w	8016cb4 <_scanf_float+0x70>
 8016dbe:	6821      	ldr	r1, [r4, #0]
 8016dc0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016dc4:	6021      	str	r1, [r4, #0]
 8016dc6:	702b      	strb	r3, [r5, #0]
 8016dc8:	3501      	adds	r5, #1
 8016dca:	e79a      	b.n	8016d02 <_scanf_float+0xbe>
 8016dcc:	6821      	ldr	r1, [r4, #0]
 8016dce:	0608      	lsls	r0, r1, #24
 8016dd0:	f57f af70 	bpl.w	8016cb4 <_scanf_float+0x70>
 8016dd4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016dd8:	e7f4      	b.n	8016dc4 <_scanf_float+0x180>
 8016dda:	2a02      	cmp	r2, #2
 8016ddc:	d047      	beq.n	8016e6e <_scanf_float+0x22a>
 8016dde:	f1bb 0f01 	cmp.w	fp, #1
 8016de2:	d003      	beq.n	8016dec <_scanf_float+0x1a8>
 8016de4:	f1bb 0f04 	cmp.w	fp, #4
 8016de8:	f47f af64 	bne.w	8016cb4 <_scanf_float+0x70>
 8016dec:	f10b 0b01 	add.w	fp, fp, #1
 8016df0:	fa5f fb8b 	uxtb.w	fp, fp
 8016df4:	e7e7      	b.n	8016dc6 <_scanf_float+0x182>
 8016df6:	f1bb 0f03 	cmp.w	fp, #3
 8016dfa:	d0f7      	beq.n	8016dec <_scanf_float+0x1a8>
 8016dfc:	f1bb 0f05 	cmp.w	fp, #5
 8016e00:	e7f2      	b.n	8016de8 <_scanf_float+0x1a4>
 8016e02:	f1bb 0f02 	cmp.w	fp, #2
 8016e06:	f47f af55 	bne.w	8016cb4 <_scanf_float+0x70>
 8016e0a:	f04f 0b03 	mov.w	fp, #3
 8016e0e:	e7da      	b.n	8016dc6 <_scanf_float+0x182>
 8016e10:	f1bb 0f06 	cmp.w	fp, #6
 8016e14:	f47f af4e 	bne.w	8016cb4 <_scanf_float+0x70>
 8016e18:	f04f 0b07 	mov.w	fp, #7
 8016e1c:	e7d3      	b.n	8016dc6 <_scanf_float+0x182>
 8016e1e:	6821      	ldr	r1, [r4, #0]
 8016e20:	0588      	lsls	r0, r1, #22
 8016e22:	f57f af47 	bpl.w	8016cb4 <_scanf_float+0x70>
 8016e26:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016e2a:	6021      	str	r1, [r4, #0]
 8016e2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e30:	e7c9      	b.n	8016dc6 <_scanf_float+0x182>
 8016e32:	6821      	ldr	r1, [r4, #0]
 8016e34:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016e38:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016e3c:	d006      	beq.n	8016e4c <_scanf_float+0x208>
 8016e3e:	0548      	lsls	r0, r1, #21
 8016e40:	f57f af38 	bpl.w	8016cb4 <_scanf_float+0x70>
 8016e44:	f1b9 0f00 	cmp.w	r9, #0
 8016e48:	f43f af3b 	beq.w	8016cc2 <_scanf_float+0x7e>
 8016e4c:	0588      	lsls	r0, r1, #22
 8016e4e:	bf58      	it	pl
 8016e50:	9802      	ldrpl	r0, [sp, #8]
 8016e52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016e56:	bf58      	it	pl
 8016e58:	eba9 0000 	subpl.w	r0, r9, r0
 8016e5c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016e60:	bf58      	it	pl
 8016e62:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016e66:	6021      	str	r1, [r4, #0]
 8016e68:	f04f 0900 	mov.w	r9, #0
 8016e6c:	e7ab      	b.n	8016dc6 <_scanf_float+0x182>
 8016e6e:	2203      	movs	r2, #3
 8016e70:	e7a9      	b.n	8016dc6 <_scanf_float+0x182>
 8016e72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016e76:	9205      	str	r2, [sp, #20]
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	4798      	blx	r3
 8016e7e:	9a05      	ldr	r2, [sp, #20]
 8016e80:	2800      	cmp	r0, #0
 8016e82:	f43f af04 	beq.w	8016c8e <_scanf_float+0x4a>
 8016e86:	e715      	b.n	8016cb4 <_scanf_float+0x70>
 8016e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016e90:	4632      	mov	r2, r6
 8016e92:	4638      	mov	r0, r7
 8016e94:	4798      	blx	r3
 8016e96:	6923      	ldr	r3, [r4, #16]
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	6123      	str	r3, [r4, #16]
 8016e9c:	e715      	b.n	8016cca <_scanf_float+0x86>
 8016e9e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016ea2:	2b06      	cmp	r3, #6
 8016ea4:	d80a      	bhi.n	8016ebc <_scanf_float+0x278>
 8016ea6:	f1bb 0f02 	cmp.w	fp, #2
 8016eaa:	d968      	bls.n	8016f7e <_scanf_float+0x33a>
 8016eac:	f1ab 0b03 	sub.w	fp, fp, #3
 8016eb0:	fa5f fb8b 	uxtb.w	fp, fp
 8016eb4:	eba5 0b0b 	sub.w	fp, r5, fp
 8016eb8:	455d      	cmp	r5, fp
 8016eba:	d14b      	bne.n	8016f54 <_scanf_float+0x310>
 8016ebc:	6823      	ldr	r3, [r4, #0]
 8016ebe:	05da      	lsls	r2, r3, #23
 8016ec0:	d51f      	bpl.n	8016f02 <_scanf_float+0x2be>
 8016ec2:	055b      	lsls	r3, r3, #21
 8016ec4:	d468      	bmi.n	8016f98 <_scanf_float+0x354>
 8016ec6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016eca:	6923      	ldr	r3, [r4, #16]
 8016ecc:	2965      	cmp	r1, #101	; 0x65
 8016ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ed2:	f105 3bff 	add.w	fp, r5, #4294967295
 8016ed6:	6123      	str	r3, [r4, #16]
 8016ed8:	d00d      	beq.n	8016ef6 <_scanf_float+0x2b2>
 8016eda:	2945      	cmp	r1, #69	; 0x45
 8016edc:	d00b      	beq.n	8016ef6 <_scanf_float+0x2b2>
 8016ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ee2:	4632      	mov	r2, r6
 8016ee4:	4638      	mov	r0, r7
 8016ee6:	4798      	blx	r3
 8016ee8:	6923      	ldr	r3, [r4, #16]
 8016eea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	f1a5 0b02 	sub.w	fp, r5, #2
 8016ef4:	6123      	str	r3, [r4, #16]
 8016ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016efa:	4632      	mov	r2, r6
 8016efc:	4638      	mov	r0, r7
 8016efe:	4798      	blx	r3
 8016f00:	465d      	mov	r5, fp
 8016f02:	6826      	ldr	r6, [r4, #0]
 8016f04:	f016 0610 	ands.w	r6, r6, #16
 8016f08:	d17a      	bne.n	8017000 <_scanf_float+0x3bc>
 8016f0a:	702e      	strb	r6, [r5, #0]
 8016f0c:	6823      	ldr	r3, [r4, #0]
 8016f0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f16:	d142      	bne.n	8016f9e <_scanf_float+0x35a>
 8016f18:	9b02      	ldr	r3, [sp, #8]
 8016f1a:	eba9 0303 	sub.w	r3, r9, r3
 8016f1e:	425a      	negs	r2, r3
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d149      	bne.n	8016fb8 <_scanf_float+0x374>
 8016f24:	2200      	movs	r2, #0
 8016f26:	4641      	mov	r1, r8
 8016f28:	4638      	mov	r0, r7
 8016f2a:	f000 ff01 	bl	8017d30 <_strtod_r>
 8016f2e:	6825      	ldr	r5, [r4, #0]
 8016f30:	f8da 3000 	ldr.w	r3, [sl]
 8016f34:	f015 0f02 	tst.w	r5, #2
 8016f38:	f103 0204 	add.w	r2, r3, #4
 8016f3c:	ec59 8b10 	vmov	r8, r9, d0
 8016f40:	f8ca 2000 	str.w	r2, [sl]
 8016f44:	d043      	beq.n	8016fce <_scanf_float+0x38a>
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	e9c3 8900 	strd	r8, r9, [r3]
 8016f4c:	68e3      	ldr	r3, [r4, #12]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	60e3      	str	r3, [r4, #12]
 8016f52:	e6be      	b.n	8016cd2 <_scanf_float+0x8e>
 8016f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f5c:	4632      	mov	r2, r6
 8016f5e:	4638      	mov	r0, r7
 8016f60:	4798      	blx	r3
 8016f62:	6923      	ldr	r3, [r4, #16]
 8016f64:	3b01      	subs	r3, #1
 8016f66:	6123      	str	r3, [r4, #16]
 8016f68:	e7a6      	b.n	8016eb8 <_scanf_float+0x274>
 8016f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f6e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f72:	4632      	mov	r2, r6
 8016f74:	4638      	mov	r0, r7
 8016f76:	4798      	blx	r3
 8016f78:	6923      	ldr	r3, [r4, #16]
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	6123      	str	r3, [r4, #16]
 8016f7e:	4545      	cmp	r5, r8
 8016f80:	d8f3      	bhi.n	8016f6a <_scanf_float+0x326>
 8016f82:	e6a5      	b.n	8016cd0 <_scanf_float+0x8c>
 8016f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016f8c:	4632      	mov	r2, r6
 8016f8e:	4638      	mov	r0, r7
 8016f90:	4798      	blx	r3
 8016f92:	6923      	ldr	r3, [r4, #16]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	6123      	str	r3, [r4, #16]
 8016f98:	4545      	cmp	r5, r8
 8016f9a:	d8f3      	bhi.n	8016f84 <_scanf_float+0x340>
 8016f9c:	e698      	b.n	8016cd0 <_scanf_float+0x8c>
 8016f9e:	9b03      	ldr	r3, [sp, #12]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d0bf      	beq.n	8016f24 <_scanf_float+0x2e0>
 8016fa4:	9904      	ldr	r1, [sp, #16]
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	4632      	mov	r2, r6
 8016faa:	3101      	adds	r1, #1
 8016fac:	4638      	mov	r0, r7
 8016fae:	f000 ff5f 	bl	8017e70 <_strtol_r>
 8016fb2:	9b03      	ldr	r3, [sp, #12]
 8016fb4:	9d04      	ldr	r5, [sp, #16]
 8016fb6:	1ac2      	subs	r2, r0, r3
 8016fb8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016fbc:	429d      	cmp	r5, r3
 8016fbe:	bf28      	it	cs
 8016fc0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016fc4:	490f      	ldr	r1, [pc, #60]	; (8017004 <_scanf_float+0x3c0>)
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f000 f834 	bl	8017034 <siprintf>
 8016fcc:	e7aa      	b.n	8016f24 <_scanf_float+0x2e0>
 8016fce:	f015 0504 	ands.w	r5, r5, #4
 8016fd2:	d1b8      	bne.n	8016f46 <_scanf_float+0x302>
 8016fd4:	681f      	ldr	r7, [r3, #0]
 8016fd6:	ee10 2a10 	vmov	r2, s0
 8016fda:	464b      	mov	r3, r9
 8016fdc:	ee10 0a10 	vmov	r0, s0
 8016fe0:	4649      	mov	r1, r9
 8016fe2:	f7e9 fdb3 	bl	8000b4c <__aeabi_dcmpun>
 8016fe6:	b128      	cbz	r0, 8016ff4 <_scanf_float+0x3b0>
 8016fe8:	4628      	mov	r0, r5
 8016fea:	f000 f81d 	bl	8017028 <nanf>
 8016fee:	ed87 0a00 	vstr	s0, [r7]
 8016ff2:	e7ab      	b.n	8016f4c <_scanf_float+0x308>
 8016ff4:	4640      	mov	r0, r8
 8016ff6:	4649      	mov	r1, r9
 8016ff8:	f7e9 fe06 	bl	8000c08 <__aeabi_d2f>
 8016ffc:	6038      	str	r0, [r7, #0]
 8016ffe:	e7a5      	b.n	8016f4c <_scanf_float+0x308>
 8017000:	2600      	movs	r6, #0
 8017002:	e666      	b.n	8016cd2 <_scanf_float+0x8e>
 8017004:	0801c398 	.word	0x0801c398

08017008 <_sbrk_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4c06      	ldr	r4, [pc, #24]	; (8017024 <_sbrk_r+0x1c>)
 801700c:	2300      	movs	r3, #0
 801700e:	4605      	mov	r5, r0
 8017010:	4608      	mov	r0, r1
 8017012:	6023      	str	r3, [r4, #0]
 8017014:	f7fe fb2a 	bl	801566c <_sbrk>
 8017018:	1c43      	adds	r3, r0, #1
 801701a:	d102      	bne.n	8017022 <_sbrk_r+0x1a>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	b103      	cbz	r3, 8017022 <_sbrk_r+0x1a>
 8017020:	602b      	str	r3, [r5, #0]
 8017022:	bd38      	pop	{r3, r4, r5, pc}
 8017024:	20008730 	.word	0x20008730

08017028 <nanf>:
 8017028:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017030 <nanf+0x8>
 801702c:	4770      	bx	lr
 801702e:	bf00      	nop
 8017030:	7fc00000 	.word	0x7fc00000

08017034 <siprintf>:
 8017034:	b40e      	push	{r1, r2, r3}
 8017036:	b500      	push	{lr}
 8017038:	b09c      	sub	sp, #112	; 0x70
 801703a:	ab1d      	add	r3, sp, #116	; 0x74
 801703c:	9002      	str	r0, [sp, #8]
 801703e:	9006      	str	r0, [sp, #24]
 8017040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017044:	4809      	ldr	r0, [pc, #36]	; (801706c <siprintf+0x38>)
 8017046:	9107      	str	r1, [sp, #28]
 8017048:	9104      	str	r1, [sp, #16]
 801704a:	4909      	ldr	r1, [pc, #36]	; (8017070 <siprintf+0x3c>)
 801704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017050:	9105      	str	r1, [sp, #20]
 8017052:	6800      	ldr	r0, [r0, #0]
 8017054:	9301      	str	r3, [sp, #4]
 8017056:	a902      	add	r1, sp, #8
 8017058:	f002 fd2c 	bl	8019ab4 <_svfiprintf_r>
 801705c:	9b02      	ldr	r3, [sp, #8]
 801705e:	2200      	movs	r2, #0
 8017060:	701a      	strb	r2, [r3, #0]
 8017062:	b01c      	add	sp, #112	; 0x70
 8017064:	f85d eb04 	ldr.w	lr, [sp], #4
 8017068:	b003      	add	sp, #12
 801706a:	4770      	bx	lr
 801706c:	20000198 	.word	0x20000198
 8017070:	ffff0208 	.word	0xffff0208

08017074 <strcat>:
 8017074:	b510      	push	{r4, lr}
 8017076:	4603      	mov	r3, r0
 8017078:	781a      	ldrb	r2, [r3, #0]
 801707a:	1c5c      	adds	r4, r3, #1
 801707c:	b93a      	cbnz	r2, 801708e <strcat+0x1a>
 801707e:	3b01      	subs	r3, #1
 8017080:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017084:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017088:	2a00      	cmp	r2, #0
 801708a:	d1f9      	bne.n	8017080 <strcat+0xc>
 801708c:	bd10      	pop	{r4, pc}
 801708e:	4623      	mov	r3, r4
 8017090:	e7f2      	b.n	8017078 <strcat+0x4>

08017092 <strchr>:
 8017092:	b2c9      	uxtb	r1, r1
 8017094:	4603      	mov	r3, r0
 8017096:	f810 2b01 	ldrb.w	r2, [r0], #1
 801709a:	b11a      	cbz	r2, 80170a4 <strchr+0x12>
 801709c:	428a      	cmp	r2, r1
 801709e:	d1f9      	bne.n	8017094 <strchr+0x2>
 80170a0:	4618      	mov	r0, r3
 80170a2:	4770      	bx	lr
 80170a4:	2900      	cmp	r1, #0
 80170a6:	bf18      	it	ne
 80170a8:	2300      	movne	r3, #0
 80170aa:	e7f9      	b.n	80170a0 <strchr+0xe>

080170ac <strcpy>:
 80170ac:	4603      	mov	r3, r0
 80170ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170b2:	f803 2b01 	strb.w	r2, [r3], #1
 80170b6:	2a00      	cmp	r2, #0
 80170b8:	d1f9      	bne.n	80170ae <strcpy+0x2>
 80170ba:	4770      	bx	lr

080170bc <strncmp>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	b16a      	cbz	r2, 80170dc <strncmp+0x20>
 80170c0:	3901      	subs	r1, #1
 80170c2:	1884      	adds	r4, r0, r2
 80170c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80170c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d103      	bne.n	80170d8 <strncmp+0x1c>
 80170d0:	42a0      	cmp	r0, r4
 80170d2:	d001      	beq.n	80170d8 <strncmp+0x1c>
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d1f5      	bne.n	80170c4 <strncmp+0x8>
 80170d8:	1a98      	subs	r0, r3, r2
 80170da:	bd10      	pop	{r4, pc}
 80170dc:	4610      	mov	r0, r2
 80170de:	e7fc      	b.n	80170da <strncmp+0x1e>

080170e0 <strncpy>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	3901      	subs	r1, #1
 80170e4:	4604      	mov	r4, r0
 80170e6:	b902      	cbnz	r2, 80170ea <strncpy+0xa>
 80170e8:	bd70      	pop	{r4, r5, r6, pc}
 80170ea:	4623      	mov	r3, r4
 80170ec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80170f0:	f803 5b01 	strb.w	r5, [r3], #1
 80170f4:	1e56      	subs	r6, r2, #1
 80170f6:	b92d      	cbnz	r5, 8017104 <strncpy+0x24>
 80170f8:	4414      	add	r4, r2
 80170fa:	42a3      	cmp	r3, r4
 80170fc:	d0f4      	beq.n	80170e8 <strncpy+0x8>
 80170fe:	f803 5b01 	strb.w	r5, [r3], #1
 8017102:	e7fa      	b.n	80170fa <strncpy+0x1a>
 8017104:	461c      	mov	r4, r3
 8017106:	4632      	mov	r2, r6
 8017108:	e7ed      	b.n	80170e6 <strncpy+0x6>

0801710a <sulp>:
 801710a:	b570      	push	{r4, r5, r6, lr}
 801710c:	4604      	mov	r4, r0
 801710e:	460d      	mov	r5, r1
 8017110:	ec45 4b10 	vmov	d0, r4, r5
 8017114:	4616      	mov	r6, r2
 8017116:	f002 fb31 	bl	801977c <__ulp>
 801711a:	ec51 0b10 	vmov	r0, r1, d0
 801711e:	b17e      	cbz	r6, 8017140 <sulp+0x36>
 8017120:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017124:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017128:	2b00      	cmp	r3, #0
 801712a:	dd09      	ble.n	8017140 <sulp+0x36>
 801712c:	051b      	lsls	r3, r3, #20
 801712e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017132:	2400      	movs	r4, #0
 8017134:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017138:	4622      	mov	r2, r4
 801713a:	462b      	mov	r3, r5
 801713c:	f7e9 fa6c 	bl	8000618 <__aeabi_dmul>
 8017140:	bd70      	pop	{r4, r5, r6, pc}
 8017142:	0000      	movs	r0, r0
 8017144:	0000      	movs	r0, r0
	...

08017148 <_strtod_l>:
 8017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	461f      	mov	r7, r3
 801714e:	b0a1      	sub	sp, #132	; 0x84
 8017150:	2300      	movs	r3, #0
 8017152:	4681      	mov	r9, r0
 8017154:	4638      	mov	r0, r7
 8017156:	460e      	mov	r6, r1
 8017158:	9217      	str	r2, [sp, #92]	; 0x5c
 801715a:	931c      	str	r3, [sp, #112]	; 0x70
 801715c:	f002 f81d 	bl	801919a <__localeconv_l>
 8017160:	4680      	mov	r8, r0
 8017162:	6800      	ldr	r0, [r0, #0]
 8017164:	f7e9 f83e 	bl	80001e4 <strlen>
 8017168:	f04f 0a00 	mov.w	sl, #0
 801716c:	4604      	mov	r4, r0
 801716e:	f04f 0b00 	mov.w	fp, #0
 8017172:	961b      	str	r6, [sp, #108]	; 0x6c
 8017174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017176:	781a      	ldrb	r2, [r3, #0]
 8017178:	2a0d      	cmp	r2, #13
 801717a:	d832      	bhi.n	80171e2 <_strtod_l+0x9a>
 801717c:	2a09      	cmp	r2, #9
 801717e:	d236      	bcs.n	80171ee <_strtod_l+0xa6>
 8017180:	2a00      	cmp	r2, #0
 8017182:	d03e      	beq.n	8017202 <_strtod_l+0xba>
 8017184:	2300      	movs	r3, #0
 8017186:	930d      	str	r3, [sp, #52]	; 0x34
 8017188:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801718a:	782b      	ldrb	r3, [r5, #0]
 801718c:	2b30      	cmp	r3, #48	; 0x30
 801718e:	f040 80ac 	bne.w	80172ea <_strtod_l+0x1a2>
 8017192:	786b      	ldrb	r3, [r5, #1]
 8017194:	2b58      	cmp	r3, #88	; 0x58
 8017196:	d001      	beq.n	801719c <_strtod_l+0x54>
 8017198:	2b78      	cmp	r3, #120	; 0x78
 801719a:	d167      	bne.n	801726c <_strtod_l+0x124>
 801719c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801719e:	9301      	str	r3, [sp, #4]
 80171a0:	ab1c      	add	r3, sp, #112	; 0x70
 80171a2:	9300      	str	r3, [sp, #0]
 80171a4:	9702      	str	r7, [sp, #8]
 80171a6:	ab1d      	add	r3, sp, #116	; 0x74
 80171a8:	4a88      	ldr	r2, [pc, #544]	; (80173cc <_strtod_l+0x284>)
 80171aa:	a91b      	add	r1, sp, #108	; 0x6c
 80171ac:	4648      	mov	r0, r9
 80171ae:	f001 fd1a 	bl	8018be6 <__gethex>
 80171b2:	f010 0407 	ands.w	r4, r0, #7
 80171b6:	4606      	mov	r6, r0
 80171b8:	d005      	beq.n	80171c6 <_strtod_l+0x7e>
 80171ba:	2c06      	cmp	r4, #6
 80171bc:	d12b      	bne.n	8017216 <_strtod_l+0xce>
 80171be:	3501      	adds	r5, #1
 80171c0:	2300      	movs	r3, #0
 80171c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80171c4:	930d      	str	r3, [sp, #52]	; 0x34
 80171c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	f040 859a 	bne.w	8017d02 <_strtod_l+0xbba>
 80171ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171d0:	b1e3      	cbz	r3, 801720c <_strtod_l+0xc4>
 80171d2:	4652      	mov	r2, sl
 80171d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80171d8:	ec43 2b10 	vmov	d0, r2, r3
 80171dc:	b021      	add	sp, #132	; 0x84
 80171de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e2:	2a2b      	cmp	r2, #43	; 0x2b
 80171e4:	d015      	beq.n	8017212 <_strtod_l+0xca>
 80171e6:	2a2d      	cmp	r2, #45	; 0x2d
 80171e8:	d004      	beq.n	80171f4 <_strtod_l+0xac>
 80171ea:	2a20      	cmp	r2, #32
 80171ec:	d1ca      	bne.n	8017184 <_strtod_l+0x3c>
 80171ee:	3301      	adds	r3, #1
 80171f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80171f2:	e7bf      	b.n	8017174 <_strtod_l+0x2c>
 80171f4:	2201      	movs	r2, #1
 80171f6:	920d      	str	r2, [sp, #52]	; 0x34
 80171f8:	1c5a      	adds	r2, r3, #1
 80171fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80171fc:	785b      	ldrb	r3, [r3, #1]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d1c2      	bne.n	8017188 <_strtod_l+0x40>
 8017202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017204:	961b      	str	r6, [sp, #108]	; 0x6c
 8017206:	2b00      	cmp	r3, #0
 8017208:	f040 8579 	bne.w	8017cfe <_strtod_l+0xbb6>
 801720c:	4652      	mov	r2, sl
 801720e:	465b      	mov	r3, fp
 8017210:	e7e2      	b.n	80171d8 <_strtod_l+0x90>
 8017212:	2200      	movs	r2, #0
 8017214:	e7ef      	b.n	80171f6 <_strtod_l+0xae>
 8017216:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017218:	b13a      	cbz	r2, 801722a <_strtod_l+0xe2>
 801721a:	2135      	movs	r1, #53	; 0x35
 801721c:	a81e      	add	r0, sp, #120	; 0x78
 801721e:	f002 fba5 	bl	801996c <__copybits>
 8017222:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017224:	4648      	mov	r0, r9
 8017226:	f002 f811 	bl	801924c <_Bfree>
 801722a:	3c01      	subs	r4, #1
 801722c:	2c04      	cmp	r4, #4
 801722e:	d806      	bhi.n	801723e <_strtod_l+0xf6>
 8017230:	e8df f004 	tbb	[pc, r4]
 8017234:	1714030a 	.word	0x1714030a
 8017238:	0a          	.byte	0x0a
 8017239:	00          	.byte	0x00
 801723a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801723e:	0730      	lsls	r0, r6, #28
 8017240:	d5c1      	bpl.n	80171c6 <_strtod_l+0x7e>
 8017242:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017246:	e7be      	b.n	80171c6 <_strtod_l+0x7e>
 8017248:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801724c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801724e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017252:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017256:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801725a:	e7f0      	b.n	801723e <_strtod_l+0xf6>
 801725c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80173d0 <_strtod_l+0x288>
 8017260:	e7ed      	b.n	801723e <_strtod_l+0xf6>
 8017262:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017266:	f04f 3aff 	mov.w	sl, #4294967295
 801726a:	e7e8      	b.n	801723e <_strtod_l+0xf6>
 801726c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	921b      	str	r2, [sp, #108]	; 0x6c
 8017272:	785b      	ldrb	r3, [r3, #1]
 8017274:	2b30      	cmp	r3, #48	; 0x30
 8017276:	d0f9      	beq.n	801726c <_strtod_l+0x124>
 8017278:	2b00      	cmp	r3, #0
 801727a:	d0a4      	beq.n	80171c6 <_strtod_l+0x7e>
 801727c:	2301      	movs	r3, #1
 801727e:	2500      	movs	r5, #0
 8017280:	9306      	str	r3, [sp, #24]
 8017282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017284:	9308      	str	r3, [sp, #32]
 8017286:	9507      	str	r5, [sp, #28]
 8017288:	9505      	str	r5, [sp, #20]
 801728a:	220a      	movs	r2, #10
 801728c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801728e:	7807      	ldrb	r7, [r0, #0]
 8017290:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017294:	b2d9      	uxtb	r1, r3
 8017296:	2909      	cmp	r1, #9
 8017298:	d929      	bls.n	80172ee <_strtod_l+0x1a6>
 801729a:	4622      	mov	r2, r4
 801729c:	f8d8 1000 	ldr.w	r1, [r8]
 80172a0:	f7ff ff0c 	bl	80170bc <strncmp>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	d031      	beq.n	801730c <_strtod_l+0x1c4>
 80172a8:	2000      	movs	r0, #0
 80172aa:	9c05      	ldr	r4, [sp, #20]
 80172ac:	9004      	str	r0, [sp, #16]
 80172ae:	463b      	mov	r3, r7
 80172b0:	4602      	mov	r2, r0
 80172b2:	2b65      	cmp	r3, #101	; 0x65
 80172b4:	d001      	beq.n	80172ba <_strtod_l+0x172>
 80172b6:	2b45      	cmp	r3, #69	; 0x45
 80172b8:	d114      	bne.n	80172e4 <_strtod_l+0x19c>
 80172ba:	b924      	cbnz	r4, 80172c6 <_strtod_l+0x17e>
 80172bc:	b910      	cbnz	r0, 80172c4 <_strtod_l+0x17c>
 80172be:	9b06      	ldr	r3, [sp, #24]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d09e      	beq.n	8017202 <_strtod_l+0xba>
 80172c4:	2400      	movs	r4, #0
 80172c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80172c8:	1c73      	adds	r3, r6, #1
 80172ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80172cc:	7873      	ldrb	r3, [r6, #1]
 80172ce:	2b2b      	cmp	r3, #43	; 0x2b
 80172d0:	d078      	beq.n	80173c4 <_strtod_l+0x27c>
 80172d2:	2b2d      	cmp	r3, #45	; 0x2d
 80172d4:	d070      	beq.n	80173b8 <_strtod_l+0x270>
 80172d6:	f04f 0c00 	mov.w	ip, #0
 80172da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80172de:	2f09      	cmp	r7, #9
 80172e0:	d97c      	bls.n	80173dc <_strtod_l+0x294>
 80172e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80172e4:	f04f 0e00 	mov.w	lr, #0
 80172e8:	e09a      	b.n	8017420 <_strtod_l+0x2d8>
 80172ea:	2300      	movs	r3, #0
 80172ec:	e7c7      	b.n	801727e <_strtod_l+0x136>
 80172ee:	9905      	ldr	r1, [sp, #20]
 80172f0:	2908      	cmp	r1, #8
 80172f2:	bfdd      	ittte	le
 80172f4:	9907      	ldrle	r1, [sp, #28]
 80172f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80172fa:	9307      	strle	r3, [sp, #28]
 80172fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017300:	9b05      	ldr	r3, [sp, #20]
 8017302:	3001      	adds	r0, #1
 8017304:	3301      	adds	r3, #1
 8017306:	9305      	str	r3, [sp, #20]
 8017308:	901b      	str	r0, [sp, #108]	; 0x6c
 801730a:	e7bf      	b.n	801728c <_strtod_l+0x144>
 801730c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801730e:	191a      	adds	r2, r3, r4
 8017310:	921b      	str	r2, [sp, #108]	; 0x6c
 8017312:	9a05      	ldr	r2, [sp, #20]
 8017314:	5d1b      	ldrb	r3, [r3, r4]
 8017316:	2a00      	cmp	r2, #0
 8017318:	d037      	beq.n	801738a <_strtod_l+0x242>
 801731a:	9c05      	ldr	r4, [sp, #20]
 801731c:	4602      	mov	r2, r0
 801731e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017322:	2909      	cmp	r1, #9
 8017324:	d913      	bls.n	801734e <_strtod_l+0x206>
 8017326:	2101      	movs	r1, #1
 8017328:	9104      	str	r1, [sp, #16]
 801732a:	e7c2      	b.n	80172b2 <_strtod_l+0x16a>
 801732c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801732e:	1c5a      	adds	r2, r3, #1
 8017330:	921b      	str	r2, [sp, #108]	; 0x6c
 8017332:	785b      	ldrb	r3, [r3, #1]
 8017334:	3001      	adds	r0, #1
 8017336:	2b30      	cmp	r3, #48	; 0x30
 8017338:	d0f8      	beq.n	801732c <_strtod_l+0x1e4>
 801733a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801733e:	2a08      	cmp	r2, #8
 8017340:	f200 84e4 	bhi.w	8017d0c <_strtod_l+0xbc4>
 8017344:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017346:	9208      	str	r2, [sp, #32]
 8017348:	4602      	mov	r2, r0
 801734a:	2000      	movs	r0, #0
 801734c:	4604      	mov	r4, r0
 801734e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017352:	f100 0101 	add.w	r1, r0, #1
 8017356:	d012      	beq.n	801737e <_strtod_l+0x236>
 8017358:	440a      	add	r2, r1
 801735a:	eb00 0c04 	add.w	ip, r0, r4
 801735e:	4621      	mov	r1, r4
 8017360:	270a      	movs	r7, #10
 8017362:	458c      	cmp	ip, r1
 8017364:	d113      	bne.n	801738e <_strtod_l+0x246>
 8017366:	1821      	adds	r1, r4, r0
 8017368:	2908      	cmp	r1, #8
 801736a:	f104 0401 	add.w	r4, r4, #1
 801736e:	4404      	add	r4, r0
 8017370:	dc19      	bgt.n	80173a6 <_strtod_l+0x25e>
 8017372:	9b07      	ldr	r3, [sp, #28]
 8017374:	210a      	movs	r1, #10
 8017376:	fb01 e303 	mla	r3, r1, r3, lr
 801737a:	9307      	str	r3, [sp, #28]
 801737c:	2100      	movs	r1, #0
 801737e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017380:	1c58      	adds	r0, r3, #1
 8017382:	901b      	str	r0, [sp, #108]	; 0x6c
 8017384:	785b      	ldrb	r3, [r3, #1]
 8017386:	4608      	mov	r0, r1
 8017388:	e7c9      	b.n	801731e <_strtod_l+0x1d6>
 801738a:	9805      	ldr	r0, [sp, #20]
 801738c:	e7d3      	b.n	8017336 <_strtod_l+0x1ee>
 801738e:	2908      	cmp	r1, #8
 8017390:	f101 0101 	add.w	r1, r1, #1
 8017394:	dc03      	bgt.n	801739e <_strtod_l+0x256>
 8017396:	9b07      	ldr	r3, [sp, #28]
 8017398:	437b      	muls	r3, r7
 801739a:	9307      	str	r3, [sp, #28]
 801739c:	e7e1      	b.n	8017362 <_strtod_l+0x21a>
 801739e:	2910      	cmp	r1, #16
 80173a0:	bfd8      	it	le
 80173a2:	437d      	mulle	r5, r7
 80173a4:	e7dd      	b.n	8017362 <_strtod_l+0x21a>
 80173a6:	2c10      	cmp	r4, #16
 80173a8:	bfdc      	itt	le
 80173aa:	210a      	movle	r1, #10
 80173ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80173b0:	e7e4      	b.n	801737c <_strtod_l+0x234>
 80173b2:	2301      	movs	r3, #1
 80173b4:	9304      	str	r3, [sp, #16]
 80173b6:	e781      	b.n	80172bc <_strtod_l+0x174>
 80173b8:	f04f 0c01 	mov.w	ip, #1
 80173bc:	1cb3      	adds	r3, r6, #2
 80173be:	931b      	str	r3, [sp, #108]	; 0x6c
 80173c0:	78b3      	ldrb	r3, [r6, #2]
 80173c2:	e78a      	b.n	80172da <_strtod_l+0x192>
 80173c4:	f04f 0c00 	mov.w	ip, #0
 80173c8:	e7f8      	b.n	80173bc <_strtod_l+0x274>
 80173ca:	bf00      	nop
 80173cc:	0801c3a0 	.word	0x0801c3a0
 80173d0:	7ff00000 	.word	0x7ff00000
 80173d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173d6:	1c5f      	adds	r7, r3, #1
 80173d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80173da:	785b      	ldrb	r3, [r3, #1]
 80173dc:	2b30      	cmp	r3, #48	; 0x30
 80173de:	d0f9      	beq.n	80173d4 <_strtod_l+0x28c>
 80173e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80173e4:	2f08      	cmp	r7, #8
 80173e6:	f63f af7d 	bhi.w	80172e4 <_strtod_l+0x19c>
 80173ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80173ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173f0:	930a      	str	r3, [sp, #40]	; 0x28
 80173f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173f4:	1c5f      	adds	r7, r3, #1
 80173f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80173f8:	785b      	ldrb	r3, [r3, #1]
 80173fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80173fe:	f1b8 0f09 	cmp.w	r8, #9
 8017402:	d937      	bls.n	8017474 <_strtod_l+0x32c>
 8017404:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017406:	1a7f      	subs	r7, r7, r1
 8017408:	2f08      	cmp	r7, #8
 801740a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801740e:	dc37      	bgt.n	8017480 <_strtod_l+0x338>
 8017410:	45be      	cmp	lr, r7
 8017412:	bfa8      	it	ge
 8017414:	46be      	movge	lr, r7
 8017416:	f1bc 0f00 	cmp.w	ip, #0
 801741a:	d001      	beq.n	8017420 <_strtod_l+0x2d8>
 801741c:	f1ce 0e00 	rsb	lr, lr, #0
 8017420:	2c00      	cmp	r4, #0
 8017422:	d151      	bne.n	80174c8 <_strtod_l+0x380>
 8017424:	2800      	cmp	r0, #0
 8017426:	f47f aece 	bne.w	80171c6 <_strtod_l+0x7e>
 801742a:	9a06      	ldr	r2, [sp, #24]
 801742c:	2a00      	cmp	r2, #0
 801742e:	f47f aeca 	bne.w	80171c6 <_strtod_l+0x7e>
 8017432:	9a04      	ldr	r2, [sp, #16]
 8017434:	2a00      	cmp	r2, #0
 8017436:	f47f aee4 	bne.w	8017202 <_strtod_l+0xba>
 801743a:	2b4e      	cmp	r3, #78	; 0x4e
 801743c:	d027      	beq.n	801748e <_strtod_l+0x346>
 801743e:	dc21      	bgt.n	8017484 <_strtod_l+0x33c>
 8017440:	2b49      	cmp	r3, #73	; 0x49
 8017442:	f47f aede 	bne.w	8017202 <_strtod_l+0xba>
 8017446:	49a0      	ldr	r1, [pc, #640]	; (80176c8 <_strtod_l+0x580>)
 8017448:	a81b      	add	r0, sp, #108	; 0x6c
 801744a:	f001 fdff 	bl	801904c <__match>
 801744e:	2800      	cmp	r0, #0
 8017450:	f43f aed7 	beq.w	8017202 <_strtod_l+0xba>
 8017454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017456:	499d      	ldr	r1, [pc, #628]	; (80176cc <_strtod_l+0x584>)
 8017458:	3b01      	subs	r3, #1
 801745a:	a81b      	add	r0, sp, #108	; 0x6c
 801745c:	931b      	str	r3, [sp, #108]	; 0x6c
 801745e:	f001 fdf5 	bl	801904c <__match>
 8017462:	b910      	cbnz	r0, 801746a <_strtod_l+0x322>
 8017464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017466:	3301      	adds	r3, #1
 8017468:	931b      	str	r3, [sp, #108]	; 0x6c
 801746a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80176e0 <_strtod_l+0x598>
 801746e:	f04f 0a00 	mov.w	sl, #0
 8017472:	e6a8      	b.n	80171c6 <_strtod_l+0x7e>
 8017474:	210a      	movs	r1, #10
 8017476:	fb01 3e0e 	mla	lr, r1, lr, r3
 801747a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801747e:	e7b8      	b.n	80173f2 <_strtod_l+0x2aa>
 8017480:	46be      	mov	lr, r7
 8017482:	e7c8      	b.n	8017416 <_strtod_l+0x2ce>
 8017484:	2b69      	cmp	r3, #105	; 0x69
 8017486:	d0de      	beq.n	8017446 <_strtod_l+0x2fe>
 8017488:	2b6e      	cmp	r3, #110	; 0x6e
 801748a:	f47f aeba 	bne.w	8017202 <_strtod_l+0xba>
 801748e:	4990      	ldr	r1, [pc, #576]	; (80176d0 <_strtod_l+0x588>)
 8017490:	a81b      	add	r0, sp, #108	; 0x6c
 8017492:	f001 fddb 	bl	801904c <__match>
 8017496:	2800      	cmp	r0, #0
 8017498:	f43f aeb3 	beq.w	8017202 <_strtod_l+0xba>
 801749c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	2b28      	cmp	r3, #40	; 0x28
 80174a2:	d10e      	bne.n	80174c2 <_strtod_l+0x37a>
 80174a4:	aa1e      	add	r2, sp, #120	; 0x78
 80174a6:	498b      	ldr	r1, [pc, #556]	; (80176d4 <_strtod_l+0x58c>)
 80174a8:	a81b      	add	r0, sp, #108	; 0x6c
 80174aa:	f001 fde3 	bl	8019074 <__hexnan>
 80174ae:	2805      	cmp	r0, #5
 80174b0:	d107      	bne.n	80174c2 <_strtod_l+0x37a>
 80174b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80174b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80174b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80174bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80174c0:	e681      	b.n	80171c6 <_strtod_l+0x7e>
 80174c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80176e8 <_strtod_l+0x5a0>
 80174c6:	e7d2      	b.n	801746e <_strtod_l+0x326>
 80174c8:	ebae 0302 	sub.w	r3, lr, r2
 80174cc:	9306      	str	r3, [sp, #24]
 80174ce:	9b05      	ldr	r3, [sp, #20]
 80174d0:	9807      	ldr	r0, [sp, #28]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	bf08      	it	eq
 80174d6:	4623      	moveq	r3, r4
 80174d8:	2c10      	cmp	r4, #16
 80174da:	9305      	str	r3, [sp, #20]
 80174dc:	46a0      	mov	r8, r4
 80174de:	bfa8      	it	ge
 80174e0:	f04f 0810 	movge.w	r8, #16
 80174e4:	f7e9 f81e 	bl	8000524 <__aeabi_ui2d>
 80174e8:	2c09      	cmp	r4, #9
 80174ea:	4682      	mov	sl, r0
 80174ec:	468b      	mov	fp, r1
 80174ee:	dc13      	bgt.n	8017518 <_strtod_l+0x3d0>
 80174f0:	9b06      	ldr	r3, [sp, #24]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	f43f ae67 	beq.w	80171c6 <_strtod_l+0x7e>
 80174f8:	9b06      	ldr	r3, [sp, #24]
 80174fa:	dd7a      	ble.n	80175f2 <_strtod_l+0x4aa>
 80174fc:	2b16      	cmp	r3, #22
 80174fe:	dc61      	bgt.n	80175c4 <_strtod_l+0x47c>
 8017500:	4a75      	ldr	r2, [pc, #468]	; (80176d8 <_strtod_l+0x590>)
 8017502:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8017506:	e9de 0100 	ldrd	r0, r1, [lr]
 801750a:	4652      	mov	r2, sl
 801750c:	465b      	mov	r3, fp
 801750e:	f7e9 f883 	bl	8000618 <__aeabi_dmul>
 8017512:	4682      	mov	sl, r0
 8017514:	468b      	mov	fp, r1
 8017516:	e656      	b.n	80171c6 <_strtod_l+0x7e>
 8017518:	4b6f      	ldr	r3, [pc, #444]	; (80176d8 <_strtod_l+0x590>)
 801751a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801751e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017522:	f7e9 f879 	bl	8000618 <__aeabi_dmul>
 8017526:	4606      	mov	r6, r0
 8017528:	4628      	mov	r0, r5
 801752a:	460f      	mov	r7, r1
 801752c:	f7e8 fffa 	bl	8000524 <__aeabi_ui2d>
 8017530:	4602      	mov	r2, r0
 8017532:	460b      	mov	r3, r1
 8017534:	4630      	mov	r0, r6
 8017536:	4639      	mov	r1, r7
 8017538:	f7e8 feb8 	bl	80002ac <__adddf3>
 801753c:	2c0f      	cmp	r4, #15
 801753e:	4682      	mov	sl, r0
 8017540:	468b      	mov	fp, r1
 8017542:	ddd5      	ble.n	80174f0 <_strtod_l+0x3a8>
 8017544:	9b06      	ldr	r3, [sp, #24]
 8017546:	eba4 0808 	sub.w	r8, r4, r8
 801754a:	4498      	add	r8, r3
 801754c:	f1b8 0f00 	cmp.w	r8, #0
 8017550:	f340 8096 	ble.w	8017680 <_strtod_l+0x538>
 8017554:	f018 030f 	ands.w	r3, r8, #15
 8017558:	d00a      	beq.n	8017570 <_strtod_l+0x428>
 801755a:	495f      	ldr	r1, [pc, #380]	; (80176d8 <_strtod_l+0x590>)
 801755c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017560:	4652      	mov	r2, sl
 8017562:	465b      	mov	r3, fp
 8017564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017568:	f7e9 f856 	bl	8000618 <__aeabi_dmul>
 801756c:	4682      	mov	sl, r0
 801756e:	468b      	mov	fp, r1
 8017570:	f038 080f 	bics.w	r8, r8, #15
 8017574:	d073      	beq.n	801765e <_strtod_l+0x516>
 8017576:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801757a:	dd47      	ble.n	801760c <_strtod_l+0x4c4>
 801757c:	2400      	movs	r4, #0
 801757e:	46a0      	mov	r8, r4
 8017580:	9407      	str	r4, [sp, #28]
 8017582:	9405      	str	r4, [sp, #20]
 8017584:	2322      	movs	r3, #34	; 0x22
 8017586:	f8df b158 	ldr.w	fp, [pc, #344]	; 80176e0 <_strtod_l+0x598>
 801758a:	f8c9 3000 	str.w	r3, [r9]
 801758e:	f04f 0a00 	mov.w	sl, #0
 8017592:	9b07      	ldr	r3, [sp, #28]
 8017594:	2b00      	cmp	r3, #0
 8017596:	f43f ae16 	beq.w	80171c6 <_strtod_l+0x7e>
 801759a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801759c:	4648      	mov	r0, r9
 801759e:	f001 fe55 	bl	801924c <_Bfree>
 80175a2:	9905      	ldr	r1, [sp, #20]
 80175a4:	4648      	mov	r0, r9
 80175a6:	f001 fe51 	bl	801924c <_Bfree>
 80175aa:	4641      	mov	r1, r8
 80175ac:	4648      	mov	r0, r9
 80175ae:	f001 fe4d 	bl	801924c <_Bfree>
 80175b2:	9907      	ldr	r1, [sp, #28]
 80175b4:	4648      	mov	r0, r9
 80175b6:	f001 fe49 	bl	801924c <_Bfree>
 80175ba:	4621      	mov	r1, r4
 80175bc:	4648      	mov	r0, r9
 80175be:	f001 fe45 	bl	801924c <_Bfree>
 80175c2:	e600      	b.n	80171c6 <_strtod_l+0x7e>
 80175c4:	9a06      	ldr	r2, [sp, #24]
 80175c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80175ca:	4293      	cmp	r3, r2
 80175cc:	dbba      	blt.n	8017544 <_strtod_l+0x3fc>
 80175ce:	4d42      	ldr	r5, [pc, #264]	; (80176d8 <_strtod_l+0x590>)
 80175d0:	f1c4 040f 	rsb	r4, r4, #15
 80175d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80175d8:	4652      	mov	r2, sl
 80175da:	465b      	mov	r3, fp
 80175dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175e0:	f7e9 f81a 	bl	8000618 <__aeabi_dmul>
 80175e4:	9b06      	ldr	r3, [sp, #24]
 80175e6:	1b1c      	subs	r4, r3, r4
 80175e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80175ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80175f0:	e78d      	b.n	801750e <_strtod_l+0x3c6>
 80175f2:	f113 0f16 	cmn.w	r3, #22
 80175f6:	dba5      	blt.n	8017544 <_strtod_l+0x3fc>
 80175f8:	4a37      	ldr	r2, [pc, #220]	; (80176d8 <_strtod_l+0x590>)
 80175fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80175fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8017602:	4650      	mov	r0, sl
 8017604:	4659      	mov	r1, fp
 8017606:	f7e9 f931 	bl	800086c <__aeabi_ddiv>
 801760a:	e782      	b.n	8017512 <_strtod_l+0x3ca>
 801760c:	2300      	movs	r3, #0
 801760e:	4e33      	ldr	r6, [pc, #204]	; (80176dc <_strtod_l+0x594>)
 8017610:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017614:	4650      	mov	r0, sl
 8017616:	4659      	mov	r1, fp
 8017618:	461d      	mov	r5, r3
 801761a:	f1b8 0f01 	cmp.w	r8, #1
 801761e:	dc21      	bgt.n	8017664 <_strtod_l+0x51c>
 8017620:	b10b      	cbz	r3, 8017626 <_strtod_l+0x4de>
 8017622:	4682      	mov	sl, r0
 8017624:	468b      	mov	fp, r1
 8017626:	4b2d      	ldr	r3, [pc, #180]	; (80176dc <_strtod_l+0x594>)
 8017628:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801762c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017630:	4652      	mov	r2, sl
 8017632:	465b      	mov	r3, fp
 8017634:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017638:	f7e8 ffee 	bl	8000618 <__aeabi_dmul>
 801763c:	4b28      	ldr	r3, [pc, #160]	; (80176e0 <_strtod_l+0x598>)
 801763e:	460a      	mov	r2, r1
 8017640:	400b      	ands	r3, r1
 8017642:	4928      	ldr	r1, [pc, #160]	; (80176e4 <_strtod_l+0x59c>)
 8017644:	428b      	cmp	r3, r1
 8017646:	4682      	mov	sl, r0
 8017648:	d898      	bhi.n	801757c <_strtod_l+0x434>
 801764a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801764e:	428b      	cmp	r3, r1
 8017650:	bf86      	itte	hi
 8017652:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80176ec <_strtod_l+0x5a4>
 8017656:	f04f 3aff 	movhi.w	sl, #4294967295
 801765a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801765e:	2300      	movs	r3, #0
 8017660:	9304      	str	r3, [sp, #16]
 8017662:	e077      	b.n	8017754 <_strtod_l+0x60c>
 8017664:	f018 0f01 	tst.w	r8, #1
 8017668:	d006      	beq.n	8017678 <_strtod_l+0x530>
 801766a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017672:	f7e8 ffd1 	bl	8000618 <__aeabi_dmul>
 8017676:	2301      	movs	r3, #1
 8017678:	3501      	adds	r5, #1
 801767a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801767e:	e7cc      	b.n	801761a <_strtod_l+0x4d2>
 8017680:	d0ed      	beq.n	801765e <_strtod_l+0x516>
 8017682:	f1c8 0800 	rsb	r8, r8, #0
 8017686:	f018 020f 	ands.w	r2, r8, #15
 801768a:	d00a      	beq.n	80176a2 <_strtod_l+0x55a>
 801768c:	4b12      	ldr	r3, [pc, #72]	; (80176d8 <_strtod_l+0x590>)
 801768e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017692:	4650      	mov	r0, sl
 8017694:	4659      	mov	r1, fp
 8017696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801769a:	f7e9 f8e7 	bl	800086c <__aeabi_ddiv>
 801769e:	4682      	mov	sl, r0
 80176a0:	468b      	mov	fp, r1
 80176a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80176a6:	d0da      	beq.n	801765e <_strtod_l+0x516>
 80176a8:	f1b8 0f1f 	cmp.w	r8, #31
 80176ac:	dd20      	ble.n	80176f0 <_strtod_l+0x5a8>
 80176ae:	2400      	movs	r4, #0
 80176b0:	46a0      	mov	r8, r4
 80176b2:	9407      	str	r4, [sp, #28]
 80176b4:	9405      	str	r4, [sp, #20]
 80176b6:	2322      	movs	r3, #34	; 0x22
 80176b8:	f04f 0a00 	mov.w	sl, #0
 80176bc:	f04f 0b00 	mov.w	fp, #0
 80176c0:	f8c9 3000 	str.w	r3, [r9]
 80176c4:	e765      	b.n	8017592 <_strtod_l+0x44a>
 80176c6:	bf00      	nop
 80176c8:	0801c369 	.word	0x0801c369
 80176cc:	0801c3f3 	.word	0x0801c3f3
 80176d0:	0801c371 	.word	0x0801c371
 80176d4:	0801c3b4 	.word	0x0801c3b4
 80176d8:	0801c430 	.word	0x0801c430
 80176dc:	0801c408 	.word	0x0801c408
 80176e0:	7ff00000 	.word	0x7ff00000
 80176e4:	7ca00000 	.word	0x7ca00000
 80176e8:	fff80000 	.word	0xfff80000
 80176ec:	7fefffff 	.word	0x7fefffff
 80176f0:	f018 0310 	ands.w	r3, r8, #16
 80176f4:	bf18      	it	ne
 80176f6:	236a      	movne	r3, #106	; 0x6a
 80176f8:	4da0      	ldr	r5, [pc, #640]	; (801797c <_strtod_l+0x834>)
 80176fa:	9304      	str	r3, [sp, #16]
 80176fc:	4650      	mov	r0, sl
 80176fe:	4659      	mov	r1, fp
 8017700:	2300      	movs	r3, #0
 8017702:	f1b8 0f00 	cmp.w	r8, #0
 8017706:	f300 810a 	bgt.w	801791e <_strtod_l+0x7d6>
 801770a:	b10b      	cbz	r3, 8017710 <_strtod_l+0x5c8>
 801770c:	4682      	mov	sl, r0
 801770e:	468b      	mov	fp, r1
 8017710:	9b04      	ldr	r3, [sp, #16]
 8017712:	b1bb      	cbz	r3, 8017744 <_strtod_l+0x5fc>
 8017714:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801771c:	2b00      	cmp	r3, #0
 801771e:	4659      	mov	r1, fp
 8017720:	dd10      	ble.n	8017744 <_strtod_l+0x5fc>
 8017722:	2b1f      	cmp	r3, #31
 8017724:	f340 8107 	ble.w	8017936 <_strtod_l+0x7ee>
 8017728:	2b34      	cmp	r3, #52	; 0x34
 801772a:	bfde      	ittt	le
 801772c:	3b20      	suble	r3, #32
 801772e:	f04f 32ff 	movle.w	r2, #4294967295
 8017732:	fa02 f303 	lslle.w	r3, r2, r3
 8017736:	f04f 0a00 	mov.w	sl, #0
 801773a:	bfcc      	ite	gt
 801773c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017740:	ea03 0b01 	andle.w	fp, r3, r1
 8017744:	2200      	movs	r2, #0
 8017746:	2300      	movs	r3, #0
 8017748:	4650      	mov	r0, sl
 801774a:	4659      	mov	r1, fp
 801774c:	f7e9 f9cc 	bl	8000ae8 <__aeabi_dcmpeq>
 8017750:	2800      	cmp	r0, #0
 8017752:	d1ac      	bne.n	80176ae <_strtod_l+0x566>
 8017754:	9b07      	ldr	r3, [sp, #28]
 8017756:	9300      	str	r3, [sp, #0]
 8017758:	9a05      	ldr	r2, [sp, #20]
 801775a:	9908      	ldr	r1, [sp, #32]
 801775c:	4623      	mov	r3, r4
 801775e:	4648      	mov	r0, r9
 8017760:	f001 fdc6 	bl	80192f0 <__s2b>
 8017764:	9007      	str	r0, [sp, #28]
 8017766:	2800      	cmp	r0, #0
 8017768:	f43f af08 	beq.w	801757c <_strtod_l+0x434>
 801776c:	9a06      	ldr	r2, [sp, #24]
 801776e:	9b06      	ldr	r3, [sp, #24]
 8017770:	2a00      	cmp	r2, #0
 8017772:	f1c3 0300 	rsb	r3, r3, #0
 8017776:	bfa8      	it	ge
 8017778:	2300      	movge	r3, #0
 801777a:	930e      	str	r3, [sp, #56]	; 0x38
 801777c:	2400      	movs	r4, #0
 801777e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017782:	9316      	str	r3, [sp, #88]	; 0x58
 8017784:	46a0      	mov	r8, r4
 8017786:	9b07      	ldr	r3, [sp, #28]
 8017788:	4648      	mov	r0, r9
 801778a:	6859      	ldr	r1, [r3, #4]
 801778c:	f001 fd2a 	bl	80191e4 <_Balloc>
 8017790:	9005      	str	r0, [sp, #20]
 8017792:	2800      	cmp	r0, #0
 8017794:	f43f aef6 	beq.w	8017584 <_strtod_l+0x43c>
 8017798:	9b07      	ldr	r3, [sp, #28]
 801779a:	691a      	ldr	r2, [r3, #16]
 801779c:	3202      	adds	r2, #2
 801779e:	f103 010c 	add.w	r1, r3, #12
 80177a2:	0092      	lsls	r2, r2, #2
 80177a4:	300c      	adds	r0, #12
 80177a6:	f7fe fd35 	bl	8016214 <memcpy>
 80177aa:	aa1e      	add	r2, sp, #120	; 0x78
 80177ac:	a91d      	add	r1, sp, #116	; 0x74
 80177ae:	ec4b ab10 	vmov	d0, sl, fp
 80177b2:	4648      	mov	r0, r9
 80177b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80177b8:	f002 f856 	bl	8019868 <__d2b>
 80177bc:	901c      	str	r0, [sp, #112]	; 0x70
 80177be:	2800      	cmp	r0, #0
 80177c0:	f43f aee0 	beq.w	8017584 <_strtod_l+0x43c>
 80177c4:	2101      	movs	r1, #1
 80177c6:	4648      	mov	r0, r9
 80177c8:	f001 fe1e 	bl	8019408 <__i2b>
 80177cc:	4680      	mov	r8, r0
 80177ce:	2800      	cmp	r0, #0
 80177d0:	f43f aed8 	beq.w	8017584 <_strtod_l+0x43c>
 80177d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80177d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80177d8:	2e00      	cmp	r6, #0
 80177da:	bfab      	itete	ge
 80177dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80177de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80177e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80177e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80177e4:	bfac      	ite	ge
 80177e6:	18f7      	addge	r7, r6, r3
 80177e8:	1b9d      	sublt	r5, r3, r6
 80177ea:	9b04      	ldr	r3, [sp, #16]
 80177ec:	1af6      	subs	r6, r6, r3
 80177ee:	4416      	add	r6, r2
 80177f0:	4b63      	ldr	r3, [pc, #396]	; (8017980 <_strtod_l+0x838>)
 80177f2:	3e01      	subs	r6, #1
 80177f4:	429e      	cmp	r6, r3
 80177f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80177fa:	f280 80af 	bge.w	801795c <_strtod_l+0x814>
 80177fe:	1b9b      	subs	r3, r3, r6
 8017800:	2b1f      	cmp	r3, #31
 8017802:	eba2 0203 	sub.w	r2, r2, r3
 8017806:	f04f 0101 	mov.w	r1, #1
 801780a:	f300 809b 	bgt.w	8017944 <_strtod_l+0x7fc>
 801780e:	fa01 f303 	lsl.w	r3, r1, r3
 8017812:	930f      	str	r3, [sp, #60]	; 0x3c
 8017814:	2300      	movs	r3, #0
 8017816:	930a      	str	r3, [sp, #40]	; 0x28
 8017818:	18be      	adds	r6, r7, r2
 801781a:	9b04      	ldr	r3, [sp, #16]
 801781c:	42b7      	cmp	r7, r6
 801781e:	4415      	add	r5, r2
 8017820:	441d      	add	r5, r3
 8017822:	463b      	mov	r3, r7
 8017824:	bfa8      	it	ge
 8017826:	4633      	movge	r3, r6
 8017828:	42ab      	cmp	r3, r5
 801782a:	bfa8      	it	ge
 801782c:	462b      	movge	r3, r5
 801782e:	2b00      	cmp	r3, #0
 8017830:	bfc2      	ittt	gt
 8017832:	1af6      	subgt	r6, r6, r3
 8017834:	1aed      	subgt	r5, r5, r3
 8017836:	1aff      	subgt	r7, r7, r3
 8017838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801783a:	b1bb      	cbz	r3, 801786c <_strtod_l+0x724>
 801783c:	4641      	mov	r1, r8
 801783e:	461a      	mov	r2, r3
 8017840:	4648      	mov	r0, r9
 8017842:	f001 fe81 	bl	8019548 <__pow5mult>
 8017846:	4680      	mov	r8, r0
 8017848:	2800      	cmp	r0, #0
 801784a:	f43f ae9b 	beq.w	8017584 <_strtod_l+0x43c>
 801784e:	4601      	mov	r1, r0
 8017850:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017852:	4648      	mov	r0, r9
 8017854:	f001 fde1 	bl	801941a <__multiply>
 8017858:	900c      	str	r0, [sp, #48]	; 0x30
 801785a:	2800      	cmp	r0, #0
 801785c:	f43f ae92 	beq.w	8017584 <_strtod_l+0x43c>
 8017860:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017862:	4648      	mov	r0, r9
 8017864:	f001 fcf2 	bl	801924c <_Bfree>
 8017868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801786a:	931c      	str	r3, [sp, #112]	; 0x70
 801786c:	2e00      	cmp	r6, #0
 801786e:	dc7a      	bgt.n	8017966 <_strtod_l+0x81e>
 8017870:	9b06      	ldr	r3, [sp, #24]
 8017872:	2b00      	cmp	r3, #0
 8017874:	dd08      	ble.n	8017888 <_strtod_l+0x740>
 8017876:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017878:	9905      	ldr	r1, [sp, #20]
 801787a:	4648      	mov	r0, r9
 801787c:	f001 fe64 	bl	8019548 <__pow5mult>
 8017880:	9005      	str	r0, [sp, #20]
 8017882:	2800      	cmp	r0, #0
 8017884:	f43f ae7e 	beq.w	8017584 <_strtod_l+0x43c>
 8017888:	2d00      	cmp	r5, #0
 801788a:	dd08      	ble.n	801789e <_strtod_l+0x756>
 801788c:	462a      	mov	r2, r5
 801788e:	9905      	ldr	r1, [sp, #20]
 8017890:	4648      	mov	r0, r9
 8017892:	f001 fea7 	bl	80195e4 <__lshift>
 8017896:	9005      	str	r0, [sp, #20]
 8017898:	2800      	cmp	r0, #0
 801789a:	f43f ae73 	beq.w	8017584 <_strtod_l+0x43c>
 801789e:	2f00      	cmp	r7, #0
 80178a0:	dd08      	ble.n	80178b4 <_strtod_l+0x76c>
 80178a2:	4641      	mov	r1, r8
 80178a4:	463a      	mov	r2, r7
 80178a6:	4648      	mov	r0, r9
 80178a8:	f001 fe9c 	bl	80195e4 <__lshift>
 80178ac:	4680      	mov	r8, r0
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f43f ae68 	beq.w	8017584 <_strtod_l+0x43c>
 80178b4:	9a05      	ldr	r2, [sp, #20]
 80178b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80178b8:	4648      	mov	r0, r9
 80178ba:	f001 ff01 	bl	80196c0 <__mdiff>
 80178be:	4604      	mov	r4, r0
 80178c0:	2800      	cmp	r0, #0
 80178c2:	f43f ae5f 	beq.w	8017584 <_strtod_l+0x43c>
 80178c6:	68c3      	ldr	r3, [r0, #12]
 80178c8:	930c      	str	r3, [sp, #48]	; 0x30
 80178ca:	2300      	movs	r3, #0
 80178cc:	60c3      	str	r3, [r0, #12]
 80178ce:	4641      	mov	r1, r8
 80178d0:	f001 fedc 	bl	801968c <__mcmp>
 80178d4:	2800      	cmp	r0, #0
 80178d6:	da55      	bge.n	8017984 <_strtod_l+0x83c>
 80178d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178da:	b9e3      	cbnz	r3, 8017916 <_strtod_l+0x7ce>
 80178dc:	f1ba 0f00 	cmp.w	sl, #0
 80178e0:	d119      	bne.n	8017916 <_strtod_l+0x7ce>
 80178e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80178e6:	b9b3      	cbnz	r3, 8017916 <_strtod_l+0x7ce>
 80178e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80178ec:	0d1b      	lsrs	r3, r3, #20
 80178ee:	051b      	lsls	r3, r3, #20
 80178f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80178f4:	d90f      	bls.n	8017916 <_strtod_l+0x7ce>
 80178f6:	6963      	ldr	r3, [r4, #20]
 80178f8:	b913      	cbnz	r3, 8017900 <_strtod_l+0x7b8>
 80178fa:	6923      	ldr	r3, [r4, #16]
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	dd0a      	ble.n	8017916 <_strtod_l+0x7ce>
 8017900:	4621      	mov	r1, r4
 8017902:	2201      	movs	r2, #1
 8017904:	4648      	mov	r0, r9
 8017906:	f001 fe6d 	bl	80195e4 <__lshift>
 801790a:	4641      	mov	r1, r8
 801790c:	4604      	mov	r4, r0
 801790e:	f001 febd 	bl	801968c <__mcmp>
 8017912:	2800      	cmp	r0, #0
 8017914:	dc67      	bgt.n	80179e6 <_strtod_l+0x89e>
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d171      	bne.n	8017a00 <_strtod_l+0x8b8>
 801791c:	e63d      	b.n	801759a <_strtod_l+0x452>
 801791e:	f018 0f01 	tst.w	r8, #1
 8017922:	d004      	beq.n	801792e <_strtod_l+0x7e6>
 8017924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017928:	f7e8 fe76 	bl	8000618 <__aeabi_dmul>
 801792c:	2301      	movs	r3, #1
 801792e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017932:	3508      	adds	r5, #8
 8017934:	e6e5      	b.n	8017702 <_strtod_l+0x5ba>
 8017936:	f04f 32ff 	mov.w	r2, #4294967295
 801793a:	fa02 f303 	lsl.w	r3, r2, r3
 801793e:	ea03 0a0a 	and.w	sl, r3, sl
 8017942:	e6ff      	b.n	8017744 <_strtod_l+0x5fc>
 8017944:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017948:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801794c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017950:	36e2      	adds	r6, #226	; 0xe2
 8017952:	fa01 f306 	lsl.w	r3, r1, r6
 8017956:	930a      	str	r3, [sp, #40]	; 0x28
 8017958:	910f      	str	r1, [sp, #60]	; 0x3c
 801795a:	e75d      	b.n	8017818 <_strtod_l+0x6d0>
 801795c:	2300      	movs	r3, #0
 801795e:	930a      	str	r3, [sp, #40]	; 0x28
 8017960:	2301      	movs	r3, #1
 8017962:	930f      	str	r3, [sp, #60]	; 0x3c
 8017964:	e758      	b.n	8017818 <_strtod_l+0x6d0>
 8017966:	4632      	mov	r2, r6
 8017968:	991c      	ldr	r1, [sp, #112]	; 0x70
 801796a:	4648      	mov	r0, r9
 801796c:	f001 fe3a 	bl	80195e4 <__lshift>
 8017970:	901c      	str	r0, [sp, #112]	; 0x70
 8017972:	2800      	cmp	r0, #0
 8017974:	f47f af7c 	bne.w	8017870 <_strtod_l+0x728>
 8017978:	e604      	b.n	8017584 <_strtod_l+0x43c>
 801797a:	bf00      	nop
 801797c:	0801c3c8 	.word	0x0801c3c8
 8017980:	fffffc02 	.word	0xfffffc02
 8017984:	465d      	mov	r5, fp
 8017986:	f040 8086 	bne.w	8017a96 <_strtod_l+0x94e>
 801798a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801798c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017990:	b32a      	cbz	r2, 80179de <_strtod_l+0x896>
 8017992:	4aaf      	ldr	r2, [pc, #700]	; (8017c50 <_strtod_l+0xb08>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d153      	bne.n	8017a40 <_strtod_l+0x8f8>
 8017998:	9b04      	ldr	r3, [sp, #16]
 801799a:	4650      	mov	r0, sl
 801799c:	b1d3      	cbz	r3, 80179d4 <_strtod_l+0x88c>
 801799e:	4aad      	ldr	r2, [pc, #692]	; (8017c54 <_strtod_l+0xb0c>)
 80179a0:	402a      	ands	r2, r5
 80179a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80179a6:	f04f 31ff 	mov.w	r1, #4294967295
 80179aa:	d816      	bhi.n	80179da <_strtod_l+0x892>
 80179ac:	0d12      	lsrs	r2, r2, #20
 80179ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80179b2:	fa01 f303 	lsl.w	r3, r1, r3
 80179b6:	4298      	cmp	r0, r3
 80179b8:	d142      	bne.n	8017a40 <_strtod_l+0x8f8>
 80179ba:	4ba7      	ldr	r3, [pc, #668]	; (8017c58 <_strtod_l+0xb10>)
 80179bc:	429d      	cmp	r5, r3
 80179be:	d102      	bne.n	80179c6 <_strtod_l+0x87e>
 80179c0:	3001      	adds	r0, #1
 80179c2:	f43f addf 	beq.w	8017584 <_strtod_l+0x43c>
 80179c6:	4ba3      	ldr	r3, [pc, #652]	; (8017c54 <_strtod_l+0xb0c>)
 80179c8:	402b      	ands	r3, r5
 80179ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80179ce:	f04f 0a00 	mov.w	sl, #0
 80179d2:	e7a0      	b.n	8017916 <_strtod_l+0x7ce>
 80179d4:	f04f 33ff 	mov.w	r3, #4294967295
 80179d8:	e7ed      	b.n	80179b6 <_strtod_l+0x86e>
 80179da:	460b      	mov	r3, r1
 80179dc:	e7eb      	b.n	80179b6 <_strtod_l+0x86e>
 80179de:	bb7b      	cbnz	r3, 8017a40 <_strtod_l+0x8f8>
 80179e0:	f1ba 0f00 	cmp.w	sl, #0
 80179e4:	d12c      	bne.n	8017a40 <_strtod_l+0x8f8>
 80179e6:	9904      	ldr	r1, [sp, #16]
 80179e8:	4a9a      	ldr	r2, [pc, #616]	; (8017c54 <_strtod_l+0xb0c>)
 80179ea:	465b      	mov	r3, fp
 80179ec:	b1f1      	cbz	r1, 8017a2c <_strtod_l+0x8e4>
 80179ee:	ea02 010b 	and.w	r1, r2, fp
 80179f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80179f6:	dc19      	bgt.n	8017a2c <_strtod_l+0x8e4>
 80179f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80179fc:	f77f ae5b 	ble.w	80176b6 <_strtod_l+0x56e>
 8017a00:	4a96      	ldr	r2, [pc, #600]	; (8017c5c <_strtod_l+0xb14>)
 8017a02:	2300      	movs	r3, #0
 8017a04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017a08:	4650      	mov	r0, sl
 8017a0a:	4659      	mov	r1, fp
 8017a0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017a10:	f7e8 fe02 	bl	8000618 <__aeabi_dmul>
 8017a14:	4682      	mov	sl, r0
 8017a16:	468b      	mov	fp, r1
 8017a18:	2900      	cmp	r1, #0
 8017a1a:	f47f adbe 	bne.w	801759a <_strtod_l+0x452>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	f47f adbb 	bne.w	801759a <_strtod_l+0x452>
 8017a24:	2322      	movs	r3, #34	; 0x22
 8017a26:	f8c9 3000 	str.w	r3, [r9]
 8017a2a:	e5b6      	b.n	801759a <_strtod_l+0x452>
 8017a2c:	4013      	ands	r3, r2
 8017a2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017a32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017a36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8017a3e:	e76a      	b.n	8017916 <_strtod_l+0x7ce>
 8017a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a42:	b193      	cbz	r3, 8017a6a <_strtod_l+0x922>
 8017a44:	422b      	tst	r3, r5
 8017a46:	f43f af66 	beq.w	8017916 <_strtod_l+0x7ce>
 8017a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a4c:	9a04      	ldr	r2, [sp, #16]
 8017a4e:	4650      	mov	r0, sl
 8017a50:	4659      	mov	r1, fp
 8017a52:	b173      	cbz	r3, 8017a72 <_strtod_l+0x92a>
 8017a54:	f7ff fb59 	bl	801710a <sulp>
 8017a58:	4602      	mov	r2, r0
 8017a5a:	460b      	mov	r3, r1
 8017a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017a60:	f7e8 fc24 	bl	80002ac <__adddf3>
 8017a64:	4682      	mov	sl, r0
 8017a66:	468b      	mov	fp, r1
 8017a68:	e755      	b.n	8017916 <_strtod_l+0x7ce>
 8017a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a6c:	ea13 0f0a 	tst.w	r3, sl
 8017a70:	e7e9      	b.n	8017a46 <_strtod_l+0x8fe>
 8017a72:	f7ff fb4a 	bl	801710a <sulp>
 8017a76:	4602      	mov	r2, r0
 8017a78:	460b      	mov	r3, r1
 8017a7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017a7e:	f7e8 fc13 	bl	80002a8 <__aeabi_dsub>
 8017a82:	2200      	movs	r2, #0
 8017a84:	2300      	movs	r3, #0
 8017a86:	4682      	mov	sl, r0
 8017a88:	468b      	mov	fp, r1
 8017a8a:	f7e9 f82d 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	f47f ae11 	bne.w	80176b6 <_strtod_l+0x56e>
 8017a94:	e73f      	b.n	8017916 <_strtod_l+0x7ce>
 8017a96:	4641      	mov	r1, r8
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f001 ff34 	bl	8019906 <__ratio>
 8017a9e:	ec57 6b10 	vmov	r6, r7, d0
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017aa8:	ee10 0a10 	vmov	r0, s0
 8017aac:	4639      	mov	r1, r7
 8017aae:	f7e9 f82f 	bl	8000b10 <__aeabi_dcmple>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d077      	beq.n	8017ba6 <_strtod_l+0xa5e>
 8017ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d04a      	beq.n	8017b52 <_strtod_l+0xa0a>
 8017abc:	4b68      	ldr	r3, [pc, #416]	; (8017c60 <_strtod_l+0xb18>)
 8017abe:	2200      	movs	r2, #0
 8017ac0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ac4:	4f66      	ldr	r7, [pc, #408]	; (8017c60 <_strtod_l+0xb18>)
 8017ac6:	2600      	movs	r6, #0
 8017ac8:	4b62      	ldr	r3, [pc, #392]	; (8017c54 <_strtod_l+0xb0c>)
 8017aca:	402b      	ands	r3, r5
 8017acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ad0:	4b64      	ldr	r3, [pc, #400]	; (8017c64 <_strtod_l+0xb1c>)
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	f040 80ce 	bne.w	8017c74 <_strtod_l+0xb2c>
 8017ad8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017adc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017ae0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017ae4:	ec4b ab10 	vmov	d0, sl, fp
 8017ae8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017aec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017af0:	f001 fe44 	bl	801977c <__ulp>
 8017af4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017af8:	ec53 2b10 	vmov	r2, r3, d0
 8017afc:	f7e8 fd8c 	bl	8000618 <__aeabi_dmul>
 8017b00:	4652      	mov	r2, sl
 8017b02:	465b      	mov	r3, fp
 8017b04:	f7e8 fbd2 	bl	80002ac <__adddf3>
 8017b08:	460b      	mov	r3, r1
 8017b0a:	4952      	ldr	r1, [pc, #328]	; (8017c54 <_strtod_l+0xb0c>)
 8017b0c:	4a56      	ldr	r2, [pc, #344]	; (8017c68 <_strtod_l+0xb20>)
 8017b0e:	4019      	ands	r1, r3
 8017b10:	4291      	cmp	r1, r2
 8017b12:	4682      	mov	sl, r0
 8017b14:	d95b      	bls.n	8017bce <_strtod_l+0xa86>
 8017b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	d103      	bne.n	8017b28 <_strtod_l+0x9e0>
 8017b20:	9b08      	ldr	r3, [sp, #32]
 8017b22:	3301      	adds	r3, #1
 8017b24:	f43f ad2e 	beq.w	8017584 <_strtod_l+0x43c>
 8017b28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017c58 <_strtod_l+0xb10>
 8017b2c:	f04f 3aff 	mov.w	sl, #4294967295
 8017b30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017b32:	4648      	mov	r0, r9
 8017b34:	f001 fb8a 	bl	801924c <_Bfree>
 8017b38:	9905      	ldr	r1, [sp, #20]
 8017b3a:	4648      	mov	r0, r9
 8017b3c:	f001 fb86 	bl	801924c <_Bfree>
 8017b40:	4641      	mov	r1, r8
 8017b42:	4648      	mov	r0, r9
 8017b44:	f001 fb82 	bl	801924c <_Bfree>
 8017b48:	4621      	mov	r1, r4
 8017b4a:	4648      	mov	r0, r9
 8017b4c:	f001 fb7e 	bl	801924c <_Bfree>
 8017b50:	e619      	b.n	8017786 <_strtod_l+0x63e>
 8017b52:	f1ba 0f00 	cmp.w	sl, #0
 8017b56:	d11a      	bne.n	8017b8e <_strtod_l+0xa46>
 8017b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017b5c:	b9eb      	cbnz	r3, 8017b9a <_strtod_l+0xa52>
 8017b5e:	2200      	movs	r2, #0
 8017b60:	4b3f      	ldr	r3, [pc, #252]	; (8017c60 <_strtod_l+0xb18>)
 8017b62:	4630      	mov	r0, r6
 8017b64:	4639      	mov	r1, r7
 8017b66:	f7e8 ffc9 	bl	8000afc <__aeabi_dcmplt>
 8017b6a:	b9c8      	cbnz	r0, 8017ba0 <_strtod_l+0xa58>
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	4639      	mov	r1, r7
 8017b70:	2200      	movs	r2, #0
 8017b72:	4b3e      	ldr	r3, [pc, #248]	; (8017c6c <_strtod_l+0xb24>)
 8017b74:	f7e8 fd50 	bl	8000618 <__aeabi_dmul>
 8017b78:	4606      	mov	r6, r0
 8017b7a:	460f      	mov	r7, r1
 8017b7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017b80:	9618      	str	r6, [sp, #96]	; 0x60
 8017b82:	9319      	str	r3, [sp, #100]	; 0x64
 8017b84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017b88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017b8c:	e79c      	b.n	8017ac8 <_strtod_l+0x980>
 8017b8e:	f1ba 0f01 	cmp.w	sl, #1
 8017b92:	d102      	bne.n	8017b9a <_strtod_l+0xa52>
 8017b94:	2d00      	cmp	r5, #0
 8017b96:	f43f ad8e 	beq.w	80176b6 <_strtod_l+0x56e>
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	4b34      	ldr	r3, [pc, #208]	; (8017c70 <_strtod_l+0xb28>)
 8017b9e:	e78f      	b.n	8017ac0 <_strtod_l+0x978>
 8017ba0:	2600      	movs	r6, #0
 8017ba2:	4f32      	ldr	r7, [pc, #200]	; (8017c6c <_strtod_l+0xb24>)
 8017ba4:	e7ea      	b.n	8017b7c <_strtod_l+0xa34>
 8017ba6:	4b31      	ldr	r3, [pc, #196]	; (8017c6c <_strtod_l+0xb24>)
 8017ba8:	4630      	mov	r0, r6
 8017baa:	4639      	mov	r1, r7
 8017bac:	2200      	movs	r2, #0
 8017bae:	f7e8 fd33 	bl	8000618 <__aeabi_dmul>
 8017bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	460f      	mov	r7, r1
 8017bb8:	b933      	cbnz	r3, 8017bc8 <_strtod_l+0xa80>
 8017bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bbe:	9010      	str	r0, [sp, #64]	; 0x40
 8017bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8017bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017bc6:	e7df      	b.n	8017b88 <_strtod_l+0xa40>
 8017bc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017bcc:	e7f9      	b.n	8017bc2 <_strtod_l+0xa7a>
 8017bce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017bd2:	9b04      	ldr	r3, [sp, #16]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d1ab      	bne.n	8017b30 <_strtod_l+0x9e8>
 8017bd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017bdc:	0d1b      	lsrs	r3, r3, #20
 8017bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017be0:	051b      	lsls	r3, r3, #20
 8017be2:	429a      	cmp	r2, r3
 8017be4:	465d      	mov	r5, fp
 8017be6:	d1a3      	bne.n	8017b30 <_strtod_l+0x9e8>
 8017be8:	4639      	mov	r1, r7
 8017bea:	4630      	mov	r0, r6
 8017bec:	f7e8 ffc4 	bl	8000b78 <__aeabi_d2iz>
 8017bf0:	f7e8 fca8 	bl	8000544 <__aeabi_i2d>
 8017bf4:	460b      	mov	r3, r1
 8017bf6:	4602      	mov	r2, r0
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	f7e8 fb54 	bl	80002a8 <__aeabi_dsub>
 8017c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c02:	4606      	mov	r6, r0
 8017c04:	460f      	mov	r7, r1
 8017c06:	b933      	cbnz	r3, 8017c16 <_strtod_l+0xace>
 8017c08:	f1ba 0f00 	cmp.w	sl, #0
 8017c0c:	d103      	bne.n	8017c16 <_strtod_l+0xace>
 8017c0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017c12:	2d00      	cmp	r5, #0
 8017c14:	d06d      	beq.n	8017cf2 <_strtod_l+0xbaa>
 8017c16:	a30a      	add	r3, pc, #40	; (adr r3, 8017c40 <_strtod_l+0xaf8>)
 8017c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c1c:	4630      	mov	r0, r6
 8017c1e:	4639      	mov	r1, r7
 8017c20:	f7e8 ff6c 	bl	8000afc <__aeabi_dcmplt>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	f47f acb8 	bne.w	801759a <_strtod_l+0x452>
 8017c2a:	a307      	add	r3, pc, #28	; (adr r3, 8017c48 <_strtod_l+0xb00>)
 8017c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c30:	4630      	mov	r0, r6
 8017c32:	4639      	mov	r1, r7
 8017c34:	f7e8 ff80 	bl	8000b38 <__aeabi_dcmpgt>
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	f43f af79 	beq.w	8017b30 <_strtod_l+0x9e8>
 8017c3e:	e4ac      	b.n	801759a <_strtod_l+0x452>
 8017c40:	94a03595 	.word	0x94a03595
 8017c44:	3fdfffff 	.word	0x3fdfffff
 8017c48:	35afe535 	.word	0x35afe535
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	000fffff 	.word	0x000fffff
 8017c54:	7ff00000 	.word	0x7ff00000
 8017c58:	7fefffff 	.word	0x7fefffff
 8017c5c:	39500000 	.word	0x39500000
 8017c60:	3ff00000 	.word	0x3ff00000
 8017c64:	7fe00000 	.word	0x7fe00000
 8017c68:	7c9fffff 	.word	0x7c9fffff
 8017c6c:	3fe00000 	.word	0x3fe00000
 8017c70:	bff00000 	.word	0xbff00000
 8017c74:	9b04      	ldr	r3, [sp, #16]
 8017c76:	b333      	cbz	r3, 8017cc6 <_strtod_l+0xb7e>
 8017c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017c7e:	d822      	bhi.n	8017cc6 <_strtod_l+0xb7e>
 8017c80:	a327      	add	r3, pc, #156	; (adr r3, 8017d20 <_strtod_l+0xbd8>)
 8017c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c86:	4630      	mov	r0, r6
 8017c88:	4639      	mov	r1, r7
 8017c8a:	f7e8 ff41 	bl	8000b10 <__aeabi_dcmple>
 8017c8e:	b1a0      	cbz	r0, 8017cba <_strtod_l+0xb72>
 8017c90:	4639      	mov	r1, r7
 8017c92:	4630      	mov	r0, r6
 8017c94:	f7e8 ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	bf08      	it	eq
 8017c9c:	2001      	moveq	r0, #1
 8017c9e:	f7e8 fc41 	bl	8000524 <__aeabi_ui2d>
 8017ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ca4:	4606      	mov	r6, r0
 8017ca6:	460f      	mov	r7, r1
 8017ca8:	bb03      	cbnz	r3, 8017cec <_strtod_l+0xba4>
 8017caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017cae:	9012      	str	r0, [sp, #72]	; 0x48
 8017cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017cb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017cb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017cbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017cc2:	1a9b      	subs	r3, r3, r2
 8017cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017cca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017cce:	f001 fd55 	bl	801977c <__ulp>
 8017cd2:	4650      	mov	r0, sl
 8017cd4:	ec53 2b10 	vmov	r2, r3, d0
 8017cd8:	4659      	mov	r1, fp
 8017cda:	f7e8 fc9d 	bl	8000618 <__aeabi_dmul>
 8017cde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017ce2:	f7e8 fae3 	bl	80002ac <__adddf3>
 8017ce6:	4682      	mov	sl, r0
 8017ce8:	468b      	mov	fp, r1
 8017cea:	e772      	b.n	8017bd2 <_strtod_l+0xa8a>
 8017cec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017cf0:	e7df      	b.n	8017cb2 <_strtod_l+0xb6a>
 8017cf2:	a30d      	add	r3, pc, #52	; (adr r3, 8017d28 <_strtod_l+0xbe0>)
 8017cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf8:	f7e8 ff00 	bl	8000afc <__aeabi_dcmplt>
 8017cfc:	e79c      	b.n	8017c38 <_strtod_l+0xaf0>
 8017cfe:	2300      	movs	r3, #0
 8017d00:	930d      	str	r3, [sp, #52]	; 0x34
 8017d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d06:	6013      	str	r3, [r2, #0]
 8017d08:	f7ff ba61 	b.w	80171ce <_strtod_l+0x86>
 8017d0c:	2b65      	cmp	r3, #101	; 0x65
 8017d0e:	f04f 0200 	mov.w	r2, #0
 8017d12:	f43f ab4e 	beq.w	80173b2 <_strtod_l+0x26a>
 8017d16:	2101      	movs	r1, #1
 8017d18:	4614      	mov	r4, r2
 8017d1a:	9104      	str	r1, [sp, #16]
 8017d1c:	f7ff bacb 	b.w	80172b6 <_strtod_l+0x16e>
 8017d20:	ffc00000 	.word	0xffc00000
 8017d24:	41dfffff 	.word	0x41dfffff
 8017d28:	94a03595 	.word	0x94a03595
 8017d2c:	3fcfffff 	.word	0x3fcfffff

08017d30 <_strtod_r>:
 8017d30:	4b05      	ldr	r3, [pc, #20]	; (8017d48 <_strtod_r+0x18>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	b410      	push	{r4}
 8017d36:	6a1b      	ldr	r3, [r3, #32]
 8017d38:	4c04      	ldr	r4, [pc, #16]	; (8017d4c <_strtod_r+0x1c>)
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	bf08      	it	eq
 8017d3e:	4623      	moveq	r3, r4
 8017d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d44:	f7ff ba00 	b.w	8017148 <_strtod_l>
 8017d48:	20000198 	.word	0x20000198
 8017d4c:	200001fc 	.word	0x200001fc

08017d50 <strtod>:
 8017d50:	4b07      	ldr	r3, [pc, #28]	; (8017d70 <strtod+0x20>)
 8017d52:	4a08      	ldr	r2, [pc, #32]	; (8017d74 <strtod+0x24>)
 8017d54:	b410      	push	{r4}
 8017d56:	681c      	ldr	r4, [r3, #0]
 8017d58:	6a23      	ldr	r3, [r4, #32]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	bf08      	it	eq
 8017d5e:	4613      	moveq	r3, r2
 8017d60:	460a      	mov	r2, r1
 8017d62:	4601      	mov	r1, r0
 8017d64:	4620      	mov	r0, r4
 8017d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d6a:	f7ff b9ed 	b.w	8017148 <_strtod_l>
 8017d6e:	bf00      	nop
 8017d70:	20000198 	.word	0x20000198
 8017d74:	200001fc 	.word	0x200001fc

08017d78 <_strtol_l.isra.0>:
 8017d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d7c:	4680      	mov	r8, r0
 8017d7e:	4689      	mov	r9, r1
 8017d80:	4692      	mov	sl, r2
 8017d82:	461e      	mov	r6, r3
 8017d84:	460f      	mov	r7, r1
 8017d86:	463d      	mov	r5, r7
 8017d88:	9808      	ldr	r0, [sp, #32]
 8017d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d8e:	f001 fa01 	bl	8019194 <__locale_ctype_ptr_l>
 8017d92:	4420      	add	r0, r4
 8017d94:	7843      	ldrb	r3, [r0, #1]
 8017d96:	f013 0308 	ands.w	r3, r3, #8
 8017d9a:	d132      	bne.n	8017e02 <_strtol_l.isra.0+0x8a>
 8017d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8017d9e:	d132      	bne.n	8017e06 <_strtol_l.isra.0+0x8e>
 8017da0:	787c      	ldrb	r4, [r7, #1]
 8017da2:	1cbd      	adds	r5, r7, #2
 8017da4:	2201      	movs	r2, #1
 8017da6:	2e00      	cmp	r6, #0
 8017da8:	d05d      	beq.n	8017e66 <_strtol_l.isra.0+0xee>
 8017daa:	2e10      	cmp	r6, #16
 8017dac:	d109      	bne.n	8017dc2 <_strtol_l.isra.0+0x4a>
 8017dae:	2c30      	cmp	r4, #48	; 0x30
 8017db0:	d107      	bne.n	8017dc2 <_strtol_l.isra.0+0x4a>
 8017db2:	782b      	ldrb	r3, [r5, #0]
 8017db4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017db8:	2b58      	cmp	r3, #88	; 0x58
 8017dba:	d14f      	bne.n	8017e5c <_strtol_l.isra.0+0xe4>
 8017dbc:	786c      	ldrb	r4, [r5, #1]
 8017dbe:	2610      	movs	r6, #16
 8017dc0:	3502      	adds	r5, #2
 8017dc2:	2a00      	cmp	r2, #0
 8017dc4:	bf14      	ite	ne
 8017dc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017dca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017dce:	2700      	movs	r7, #0
 8017dd0:	fbb1 fcf6 	udiv	ip, r1, r6
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017dda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017dde:	2b09      	cmp	r3, #9
 8017de0:	d817      	bhi.n	8017e12 <_strtol_l.isra.0+0x9a>
 8017de2:	461c      	mov	r4, r3
 8017de4:	42a6      	cmp	r6, r4
 8017de6:	dd23      	ble.n	8017e30 <_strtol_l.isra.0+0xb8>
 8017de8:	1c7b      	adds	r3, r7, #1
 8017dea:	d007      	beq.n	8017dfc <_strtol_l.isra.0+0x84>
 8017dec:	4584      	cmp	ip, r0
 8017dee:	d31c      	bcc.n	8017e2a <_strtol_l.isra.0+0xb2>
 8017df0:	d101      	bne.n	8017df6 <_strtol_l.isra.0+0x7e>
 8017df2:	45a6      	cmp	lr, r4
 8017df4:	db19      	blt.n	8017e2a <_strtol_l.isra.0+0xb2>
 8017df6:	fb00 4006 	mla	r0, r0, r6, r4
 8017dfa:	2701      	movs	r7, #1
 8017dfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e00:	e7eb      	b.n	8017dda <_strtol_l.isra.0+0x62>
 8017e02:	462f      	mov	r7, r5
 8017e04:	e7bf      	b.n	8017d86 <_strtol_l.isra.0+0xe>
 8017e06:	2c2b      	cmp	r4, #43	; 0x2b
 8017e08:	bf04      	itt	eq
 8017e0a:	1cbd      	addeq	r5, r7, #2
 8017e0c:	787c      	ldrbeq	r4, [r7, #1]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	e7c9      	b.n	8017da6 <_strtol_l.isra.0+0x2e>
 8017e12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017e16:	2b19      	cmp	r3, #25
 8017e18:	d801      	bhi.n	8017e1e <_strtol_l.isra.0+0xa6>
 8017e1a:	3c37      	subs	r4, #55	; 0x37
 8017e1c:	e7e2      	b.n	8017de4 <_strtol_l.isra.0+0x6c>
 8017e1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017e22:	2b19      	cmp	r3, #25
 8017e24:	d804      	bhi.n	8017e30 <_strtol_l.isra.0+0xb8>
 8017e26:	3c57      	subs	r4, #87	; 0x57
 8017e28:	e7dc      	b.n	8017de4 <_strtol_l.isra.0+0x6c>
 8017e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8017e2e:	e7e5      	b.n	8017dfc <_strtol_l.isra.0+0x84>
 8017e30:	1c7b      	adds	r3, r7, #1
 8017e32:	d108      	bne.n	8017e46 <_strtol_l.isra.0+0xce>
 8017e34:	2322      	movs	r3, #34	; 0x22
 8017e36:	f8c8 3000 	str.w	r3, [r8]
 8017e3a:	4608      	mov	r0, r1
 8017e3c:	f1ba 0f00 	cmp.w	sl, #0
 8017e40:	d107      	bne.n	8017e52 <_strtol_l.isra.0+0xda>
 8017e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e46:	b102      	cbz	r2, 8017e4a <_strtol_l.isra.0+0xd2>
 8017e48:	4240      	negs	r0, r0
 8017e4a:	f1ba 0f00 	cmp.w	sl, #0
 8017e4e:	d0f8      	beq.n	8017e42 <_strtol_l.isra.0+0xca>
 8017e50:	b10f      	cbz	r7, 8017e56 <_strtol_l.isra.0+0xde>
 8017e52:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e56:	f8ca 9000 	str.w	r9, [sl]
 8017e5a:	e7f2      	b.n	8017e42 <_strtol_l.isra.0+0xca>
 8017e5c:	2430      	movs	r4, #48	; 0x30
 8017e5e:	2e00      	cmp	r6, #0
 8017e60:	d1af      	bne.n	8017dc2 <_strtol_l.isra.0+0x4a>
 8017e62:	2608      	movs	r6, #8
 8017e64:	e7ad      	b.n	8017dc2 <_strtol_l.isra.0+0x4a>
 8017e66:	2c30      	cmp	r4, #48	; 0x30
 8017e68:	d0a3      	beq.n	8017db2 <_strtol_l.isra.0+0x3a>
 8017e6a:	260a      	movs	r6, #10
 8017e6c:	e7a9      	b.n	8017dc2 <_strtol_l.isra.0+0x4a>
	...

08017e70 <_strtol_r>:
 8017e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e72:	4c06      	ldr	r4, [pc, #24]	; (8017e8c <_strtol_r+0x1c>)
 8017e74:	4d06      	ldr	r5, [pc, #24]	; (8017e90 <_strtol_r+0x20>)
 8017e76:	6824      	ldr	r4, [r4, #0]
 8017e78:	6a24      	ldr	r4, [r4, #32]
 8017e7a:	2c00      	cmp	r4, #0
 8017e7c:	bf08      	it	eq
 8017e7e:	462c      	moveq	r4, r5
 8017e80:	9400      	str	r4, [sp, #0]
 8017e82:	f7ff ff79 	bl	8017d78 <_strtol_l.isra.0>
 8017e86:	b003      	add	sp, #12
 8017e88:	bd30      	pop	{r4, r5, pc}
 8017e8a:	bf00      	nop
 8017e8c:	20000198 	.word	0x20000198
 8017e90:	200001fc 	.word	0x200001fc

08017e94 <strtol>:
 8017e94:	4b08      	ldr	r3, [pc, #32]	; (8017eb8 <strtol+0x24>)
 8017e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e98:	681c      	ldr	r4, [r3, #0]
 8017e9a:	4d08      	ldr	r5, [pc, #32]	; (8017ebc <strtol+0x28>)
 8017e9c:	6a23      	ldr	r3, [r4, #32]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	bf08      	it	eq
 8017ea2:	462b      	moveq	r3, r5
 8017ea4:	9300      	str	r3, [sp, #0]
 8017ea6:	4613      	mov	r3, r2
 8017ea8:	460a      	mov	r2, r1
 8017eaa:	4601      	mov	r1, r0
 8017eac:	4620      	mov	r0, r4
 8017eae:	f7ff ff63 	bl	8017d78 <_strtol_l.isra.0>
 8017eb2:	b003      	add	sp, #12
 8017eb4:	bd30      	pop	{r4, r5, pc}
 8017eb6:	bf00      	nop
 8017eb8:	20000198 	.word	0x20000198
 8017ebc:	200001fc 	.word	0x200001fc

08017ec0 <quorem>:
 8017ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec4:	6903      	ldr	r3, [r0, #16]
 8017ec6:	690c      	ldr	r4, [r1, #16]
 8017ec8:	42a3      	cmp	r3, r4
 8017eca:	4680      	mov	r8, r0
 8017ecc:	f2c0 8082 	blt.w	8017fd4 <quorem+0x114>
 8017ed0:	3c01      	subs	r4, #1
 8017ed2:	f101 0714 	add.w	r7, r1, #20
 8017ed6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017eda:	f100 0614 	add.w	r6, r0, #20
 8017ede:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017ee2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017ee6:	eb06 030c 	add.w	r3, r6, ip
 8017eea:	3501      	adds	r5, #1
 8017eec:	eb07 090c 	add.w	r9, r7, ip
 8017ef0:	9301      	str	r3, [sp, #4]
 8017ef2:	fbb0 f5f5 	udiv	r5, r0, r5
 8017ef6:	b395      	cbz	r5, 8017f5e <quorem+0x9e>
 8017ef8:	f04f 0a00 	mov.w	sl, #0
 8017efc:	4638      	mov	r0, r7
 8017efe:	46b6      	mov	lr, r6
 8017f00:	46d3      	mov	fp, sl
 8017f02:	f850 2b04 	ldr.w	r2, [r0], #4
 8017f06:	b293      	uxth	r3, r2
 8017f08:	fb05 a303 	mla	r3, r5, r3, sl
 8017f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	ebab 0303 	sub.w	r3, fp, r3
 8017f16:	0c12      	lsrs	r2, r2, #16
 8017f18:	f8de b000 	ldr.w	fp, [lr]
 8017f1c:	fb05 a202 	mla	r2, r5, r2, sl
 8017f20:	fa13 f38b 	uxtah	r3, r3, fp
 8017f24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017f28:	fa1f fb82 	uxth.w	fp, r2
 8017f2c:	f8de 2000 	ldr.w	r2, [lr]
 8017f30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f3e:	4581      	cmp	r9, r0
 8017f40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017f44:	f84e 3b04 	str.w	r3, [lr], #4
 8017f48:	d2db      	bcs.n	8017f02 <quorem+0x42>
 8017f4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8017f4e:	b933      	cbnz	r3, 8017f5e <quorem+0x9e>
 8017f50:	9b01      	ldr	r3, [sp, #4]
 8017f52:	3b04      	subs	r3, #4
 8017f54:	429e      	cmp	r6, r3
 8017f56:	461a      	mov	r2, r3
 8017f58:	d330      	bcc.n	8017fbc <quorem+0xfc>
 8017f5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f5e:	4640      	mov	r0, r8
 8017f60:	f001 fb94 	bl	801968c <__mcmp>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	db25      	blt.n	8017fb4 <quorem+0xf4>
 8017f68:	3501      	adds	r5, #1
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f04f 0c00 	mov.w	ip, #0
 8017f70:	f857 2b04 	ldr.w	r2, [r7], #4
 8017f74:	f8d0 e000 	ldr.w	lr, [r0]
 8017f78:	b293      	uxth	r3, r2
 8017f7a:	ebac 0303 	sub.w	r3, ip, r3
 8017f7e:	0c12      	lsrs	r2, r2, #16
 8017f80:	fa13 f38e 	uxtah	r3, r3, lr
 8017f84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f92:	45b9      	cmp	r9, r7
 8017f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017f98:	f840 3b04 	str.w	r3, [r0], #4
 8017f9c:	d2e8      	bcs.n	8017f70 <quorem+0xb0>
 8017f9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017fa2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017fa6:	b92a      	cbnz	r2, 8017fb4 <quorem+0xf4>
 8017fa8:	3b04      	subs	r3, #4
 8017faa:	429e      	cmp	r6, r3
 8017fac:	461a      	mov	r2, r3
 8017fae:	d30b      	bcc.n	8017fc8 <quorem+0x108>
 8017fb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8017fb4:	4628      	mov	r0, r5
 8017fb6:	b003      	add	sp, #12
 8017fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fbc:	6812      	ldr	r2, [r2, #0]
 8017fbe:	3b04      	subs	r3, #4
 8017fc0:	2a00      	cmp	r2, #0
 8017fc2:	d1ca      	bne.n	8017f5a <quorem+0x9a>
 8017fc4:	3c01      	subs	r4, #1
 8017fc6:	e7c5      	b.n	8017f54 <quorem+0x94>
 8017fc8:	6812      	ldr	r2, [r2, #0]
 8017fca:	3b04      	subs	r3, #4
 8017fcc:	2a00      	cmp	r2, #0
 8017fce:	d1ef      	bne.n	8017fb0 <quorem+0xf0>
 8017fd0:	3c01      	subs	r4, #1
 8017fd2:	e7ea      	b.n	8017faa <quorem+0xea>
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	e7ee      	b.n	8017fb6 <quorem+0xf6>

08017fd8 <_dtoa_r>:
 8017fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	ec57 6b10 	vmov	r6, r7, d0
 8017fe0:	b097      	sub	sp, #92	; 0x5c
 8017fe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017fe4:	9106      	str	r1, [sp, #24]
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	920b      	str	r2, [sp, #44]	; 0x2c
 8017fea:	9312      	str	r3, [sp, #72]	; 0x48
 8017fec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017ff0:	e9cd 6700 	strd	r6, r7, [sp]
 8017ff4:	b93d      	cbnz	r5, 8018006 <_dtoa_r+0x2e>
 8017ff6:	2010      	movs	r0, #16
 8017ff8:	f7fe f8fc 	bl	80161f4 <malloc>
 8017ffc:	6260      	str	r0, [r4, #36]	; 0x24
 8017ffe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018002:	6005      	str	r5, [r0, #0]
 8018004:	60c5      	str	r5, [r0, #12]
 8018006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018008:	6819      	ldr	r1, [r3, #0]
 801800a:	b151      	cbz	r1, 8018022 <_dtoa_r+0x4a>
 801800c:	685a      	ldr	r2, [r3, #4]
 801800e:	604a      	str	r2, [r1, #4]
 8018010:	2301      	movs	r3, #1
 8018012:	4093      	lsls	r3, r2
 8018014:	608b      	str	r3, [r1, #8]
 8018016:	4620      	mov	r0, r4
 8018018:	f001 f918 	bl	801924c <_Bfree>
 801801c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801801e:	2200      	movs	r2, #0
 8018020:	601a      	str	r2, [r3, #0]
 8018022:	1e3b      	subs	r3, r7, #0
 8018024:	bfbb      	ittet	lt
 8018026:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801802a:	9301      	strlt	r3, [sp, #4]
 801802c:	2300      	movge	r3, #0
 801802e:	2201      	movlt	r2, #1
 8018030:	bfac      	ite	ge
 8018032:	f8c8 3000 	strge.w	r3, [r8]
 8018036:	f8c8 2000 	strlt.w	r2, [r8]
 801803a:	4baf      	ldr	r3, [pc, #700]	; (80182f8 <_dtoa_r+0x320>)
 801803c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018040:	ea33 0308 	bics.w	r3, r3, r8
 8018044:	d114      	bne.n	8018070 <_dtoa_r+0x98>
 8018046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018048:	f242 730f 	movw	r3, #9999	; 0x270f
 801804c:	6013      	str	r3, [r2, #0]
 801804e:	9b00      	ldr	r3, [sp, #0]
 8018050:	b923      	cbnz	r3, 801805c <_dtoa_r+0x84>
 8018052:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018056:	2800      	cmp	r0, #0
 8018058:	f000 8542 	beq.w	8018ae0 <_dtoa_r+0xb08>
 801805c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801805e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801830c <_dtoa_r+0x334>
 8018062:	2b00      	cmp	r3, #0
 8018064:	f000 8544 	beq.w	8018af0 <_dtoa_r+0xb18>
 8018068:	f10b 0303 	add.w	r3, fp, #3
 801806c:	f000 bd3e 	b.w	8018aec <_dtoa_r+0xb14>
 8018070:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018074:	2200      	movs	r2, #0
 8018076:	2300      	movs	r3, #0
 8018078:	4630      	mov	r0, r6
 801807a:	4639      	mov	r1, r7
 801807c:	f7e8 fd34 	bl	8000ae8 <__aeabi_dcmpeq>
 8018080:	4681      	mov	r9, r0
 8018082:	b168      	cbz	r0, 80180a0 <_dtoa_r+0xc8>
 8018084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018086:	2301      	movs	r3, #1
 8018088:	6013      	str	r3, [r2, #0]
 801808a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 8524 	beq.w	8018ada <_dtoa_r+0xb02>
 8018092:	4b9a      	ldr	r3, [pc, #616]	; (80182fc <_dtoa_r+0x324>)
 8018094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018096:	f103 3bff 	add.w	fp, r3, #4294967295
 801809a:	6013      	str	r3, [r2, #0]
 801809c:	f000 bd28 	b.w	8018af0 <_dtoa_r+0xb18>
 80180a0:	aa14      	add	r2, sp, #80	; 0x50
 80180a2:	a915      	add	r1, sp, #84	; 0x54
 80180a4:	ec47 6b10 	vmov	d0, r6, r7
 80180a8:	4620      	mov	r0, r4
 80180aa:	f001 fbdd 	bl	8019868 <__d2b>
 80180ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80180b2:	9004      	str	r0, [sp, #16]
 80180b4:	2d00      	cmp	r5, #0
 80180b6:	d07c      	beq.n	80181b2 <_dtoa_r+0x1da>
 80180b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80180bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80180c0:	46b2      	mov	sl, r6
 80180c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80180c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80180ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80180ce:	2200      	movs	r2, #0
 80180d0:	4b8b      	ldr	r3, [pc, #556]	; (8018300 <_dtoa_r+0x328>)
 80180d2:	4650      	mov	r0, sl
 80180d4:	4659      	mov	r1, fp
 80180d6:	f7e8 f8e7 	bl	80002a8 <__aeabi_dsub>
 80180da:	a381      	add	r3, pc, #516	; (adr r3, 80182e0 <_dtoa_r+0x308>)
 80180dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e0:	f7e8 fa9a 	bl	8000618 <__aeabi_dmul>
 80180e4:	a380      	add	r3, pc, #512	; (adr r3, 80182e8 <_dtoa_r+0x310>)
 80180e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ea:	f7e8 f8df 	bl	80002ac <__adddf3>
 80180ee:	4606      	mov	r6, r0
 80180f0:	4628      	mov	r0, r5
 80180f2:	460f      	mov	r7, r1
 80180f4:	f7e8 fa26 	bl	8000544 <__aeabi_i2d>
 80180f8:	a37d      	add	r3, pc, #500	; (adr r3, 80182f0 <_dtoa_r+0x318>)
 80180fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fe:	f7e8 fa8b 	bl	8000618 <__aeabi_dmul>
 8018102:	4602      	mov	r2, r0
 8018104:	460b      	mov	r3, r1
 8018106:	4630      	mov	r0, r6
 8018108:	4639      	mov	r1, r7
 801810a:	f7e8 f8cf 	bl	80002ac <__adddf3>
 801810e:	4606      	mov	r6, r0
 8018110:	460f      	mov	r7, r1
 8018112:	f7e8 fd31 	bl	8000b78 <__aeabi_d2iz>
 8018116:	2200      	movs	r2, #0
 8018118:	4682      	mov	sl, r0
 801811a:	2300      	movs	r3, #0
 801811c:	4630      	mov	r0, r6
 801811e:	4639      	mov	r1, r7
 8018120:	f7e8 fcec 	bl	8000afc <__aeabi_dcmplt>
 8018124:	b148      	cbz	r0, 801813a <_dtoa_r+0x162>
 8018126:	4650      	mov	r0, sl
 8018128:	f7e8 fa0c 	bl	8000544 <__aeabi_i2d>
 801812c:	4632      	mov	r2, r6
 801812e:	463b      	mov	r3, r7
 8018130:	f7e8 fcda 	bl	8000ae8 <__aeabi_dcmpeq>
 8018134:	b908      	cbnz	r0, 801813a <_dtoa_r+0x162>
 8018136:	f10a 3aff 	add.w	sl, sl, #4294967295
 801813a:	f1ba 0f16 	cmp.w	sl, #22
 801813e:	d859      	bhi.n	80181f4 <_dtoa_r+0x21c>
 8018140:	4970      	ldr	r1, [pc, #448]	; (8018304 <_dtoa_r+0x32c>)
 8018142:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801814a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801814e:	f7e8 fcf3 	bl	8000b38 <__aeabi_dcmpgt>
 8018152:	2800      	cmp	r0, #0
 8018154:	d050      	beq.n	80181f8 <_dtoa_r+0x220>
 8018156:	f10a 3aff 	add.w	sl, sl, #4294967295
 801815a:	2300      	movs	r3, #0
 801815c:	930f      	str	r3, [sp, #60]	; 0x3c
 801815e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018160:	1b5d      	subs	r5, r3, r5
 8018162:	f1b5 0801 	subs.w	r8, r5, #1
 8018166:	bf49      	itett	mi
 8018168:	f1c5 0301 	rsbmi	r3, r5, #1
 801816c:	2300      	movpl	r3, #0
 801816e:	9305      	strmi	r3, [sp, #20]
 8018170:	f04f 0800 	movmi.w	r8, #0
 8018174:	bf58      	it	pl
 8018176:	9305      	strpl	r3, [sp, #20]
 8018178:	f1ba 0f00 	cmp.w	sl, #0
 801817c:	db3e      	blt.n	80181fc <_dtoa_r+0x224>
 801817e:	2300      	movs	r3, #0
 8018180:	44d0      	add	r8, sl
 8018182:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018186:	9307      	str	r3, [sp, #28]
 8018188:	9b06      	ldr	r3, [sp, #24]
 801818a:	2b09      	cmp	r3, #9
 801818c:	f200 8090 	bhi.w	80182b0 <_dtoa_r+0x2d8>
 8018190:	2b05      	cmp	r3, #5
 8018192:	bfc4      	itt	gt
 8018194:	3b04      	subgt	r3, #4
 8018196:	9306      	strgt	r3, [sp, #24]
 8018198:	9b06      	ldr	r3, [sp, #24]
 801819a:	f1a3 0302 	sub.w	r3, r3, #2
 801819e:	bfcc      	ite	gt
 80181a0:	2500      	movgt	r5, #0
 80181a2:	2501      	movle	r5, #1
 80181a4:	2b03      	cmp	r3, #3
 80181a6:	f200 808f 	bhi.w	80182c8 <_dtoa_r+0x2f0>
 80181aa:	e8df f003 	tbb	[pc, r3]
 80181ae:	7f7d      	.short	0x7f7d
 80181b0:	7131      	.short	0x7131
 80181b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80181b6:	441d      	add	r5, r3
 80181b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80181bc:	2820      	cmp	r0, #32
 80181be:	dd13      	ble.n	80181e8 <_dtoa_r+0x210>
 80181c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80181c4:	9b00      	ldr	r3, [sp, #0]
 80181c6:	fa08 f800 	lsl.w	r8, r8, r0
 80181ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80181ce:	fa23 f000 	lsr.w	r0, r3, r0
 80181d2:	ea48 0000 	orr.w	r0, r8, r0
 80181d6:	f7e8 f9a5 	bl	8000524 <__aeabi_ui2d>
 80181da:	2301      	movs	r3, #1
 80181dc:	4682      	mov	sl, r0
 80181de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80181e2:	3d01      	subs	r5, #1
 80181e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80181e6:	e772      	b.n	80180ce <_dtoa_r+0xf6>
 80181e8:	9b00      	ldr	r3, [sp, #0]
 80181ea:	f1c0 0020 	rsb	r0, r0, #32
 80181ee:	fa03 f000 	lsl.w	r0, r3, r0
 80181f2:	e7f0      	b.n	80181d6 <_dtoa_r+0x1fe>
 80181f4:	2301      	movs	r3, #1
 80181f6:	e7b1      	b.n	801815c <_dtoa_r+0x184>
 80181f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80181fa:	e7b0      	b.n	801815e <_dtoa_r+0x186>
 80181fc:	9b05      	ldr	r3, [sp, #20]
 80181fe:	eba3 030a 	sub.w	r3, r3, sl
 8018202:	9305      	str	r3, [sp, #20]
 8018204:	f1ca 0300 	rsb	r3, sl, #0
 8018208:	9307      	str	r3, [sp, #28]
 801820a:	2300      	movs	r3, #0
 801820c:	930e      	str	r3, [sp, #56]	; 0x38
 801820e:	e7bb      	b.n	8018188 <_dtoa_r+0x1b0>
 8018210:	2301      	movs	r3, #1
 8018212:	930a      	str	r3, [sp, #40]	; 0x28
 8018214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018216:	2b00      	cmp	r3, #0
 8018218:	dd59      	ble.n	80182ce <_dtoa_r+0x2f6>
 801821a:	9302      	str	r3, [sp, #8]
 801821c:	4699      	mov	r9, r3
 801821e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018220:	2200      	movs	r2, #0
 8018222:	6072      	str	r2, [r6, #4]
 8018224:	2204      	movs	r2, #4
 8018226:	f102 0014 	add.w	r0, r2, #20
 801822a:	4298      	cmp	r0, r3
 801822c:	6871      	ldr	r1, [r6, #4]
 801822e:	d953      	bls.n	80182d8 <_dtoa_r+0x300>
 8018230:	4620      	mov	r0, r4
 8018232:	f000 ffd7 	bl	80191e4 <_Balloc>
 8018236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018238:	6030      	str	r0, [r6, #0]
 801823a:	f1b9 0f0e 	cmp.w	r9, #14
 801823e:	f8d3 b000 	ldr.w	fp, [r3]
 8018242:	f200 80e6 	bhi.w	8018412 <_dtoa_r+0x43a>
 8018246:	2d00      	cmp	r5, #0
 8018248:	f000 80e3 	beq.w	8018412 <_dtoa_r+0x43a>
 801824c:	ed9d 7b00 	vldr	d7, [sp]
 8018250:	f1ba 0f00 	cmp.w	sl, #0
 8018254:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018258:	dd74      	ble.n	8018344 <_dtoa_r+0x36c>
 801825a:	4a2a      	ldr	r2, [pc, #168]	; (8018304 <_dtoa_r+0x32c>)
 801825c:	f00a 030f 	and.w	r3, sl, #15
 8018260:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018264:	ed93 7b00 	vldr	d7, [r3]
 8018268:	ea4f 162a 	mov.w	r6, sl, asr #4
 801826c:	06f0      	lsls	r0, r6, #27
 801826e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018272:	d565      	bpl.n	8018340 <_dtoa_r+0x368>
 8018274:	4b24      	ldr	r3, [pc, #144]	; (8018308 <_dtoa_r+0x330>)
 8018276:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801827a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801827e:	f7e8 faf5 	bl	800086c <__aeabi_ddiv>
 8018282:	e9cd 0100 	strd	r0, r1, [sp]
 8018286:	f006 060f 	and.w	r6, r6, #15
 801828a:	2503      	movs	r5, #3
 801828c:	4f1e      	ldr	r7, [pc, #120]	; (8018308 <_dtoa_r+0x330>)
 801828e:	e04c      	b.n	801832a <_dtoa_r+0x352>
 8018290:	2301      	movs	r3, #1
 8018292:	930a      	str	r3, [sp, #40]	; 0x28
 8018294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018296:	4453      	add	r3, sl
 8018298:	f103 0901 	add.w	r9, r3, #1
 801829c:	9302      	str	r3, [sp, #8]
 801829e:	464b      	mov	r3, r9
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	bfb8      	it	lt
 80182a4:	2301      	movlt	r3, #1
 80182a6:	e7ba      	b.n	801821e <_dtoa_r+0x246>
 80182a8:	2300      	movs	r3, #0
 80182aa:	e7b2      	b.n	8018212 <_dtoa_r+0x23a>
 80182ac:	2300      	movs	r3, #0
 80182ae:	e7f0      	b.n	8018292 <_dtoa_r+0x2ba>
 80182b0:	2501      	movs	r5, #1
 80182b2:	2300      	movs	r3, #0
 80182b4:	9306      	str	r3, [sp, #24]
 80182b6:	950a      	str	r5, [sp, #40]	; 0x28
 80182b8:	f04f 33ff 	mov.w	r3, #4294967295
 80182bc:	9302      	str	r3, [sp, #8]
 80182be:	4699      	mov	r9, r3
 80182c0:	2200      	movs	r2, #0
 80182c2:	2312      	movs	r3, #18
 80182c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80182c6:	e7aa      	b.n	801821e <_dtoa_r+0x246>
 80182c8:	2301      	movs	r3, #1
 80182ca:	930a      	str	r3, [sp, #40]	; 0x28
 80182cc:	e7f4      	b.n	80182b8 <_dtoa_r+0x2e0>
 80182ce:	2301      	movs	r3, #1
 80182d0:	9302      	str	r3, [sp, #8]
 80182d2:	4699      	mov	r9, r3
 80182d4:	461a      	mov	r2, r3
 80182d6:	e7f5      	b.n	80182c4 <_dtoa_r+0x2ec>
 80182d8:	3101      	adds	r1, #1
 80182da:	6071      	str	r1, [r6, #4]
 80182dc:	0052      	lsls	r2, r2, #1
 80182de:	e7a2      	b.n	8018226 <_dtoa_r+0x24e>
 80182e0:	636f4361 	.word	0x636f4361
 80182e4:	3fd287a7 	.word	0x3fd287a7
 80182e8:	8b60c8b3 	.word	0x8b60c8b3
 80182ec:	3fc68a28 	.word	0x3fc68a28
 80182f0:	509f79fb 	.word	0x509f79fb
 80182f4:	3fd34413 	.word	0x3fd34413
 80182f8:	7ff00000 	.word	0x7ff00000
 80182fc:	0801c375 	.word	0x0801c375
 8018300:	3ff80000 	.word	0x3ff80000
 8018304:	0801c430 	.word	0x0801c430
 8018308:	0801c408 	.word	0x0801c408
 801830c:	0801c3f9 	.word	0x0801c3f9
 8018310:	07f1      	lsls	r1, r6, #31
 8018312:	d508      	bpl.n	8018326 <_dtoa_r+0x34e>
 8018314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018318:	e9d7 2300 	ldrd	r2, r3, [r7]
 801831c:	f7e8 f97c 	bl	8000618 <__aeabi_dmul>
 8018320:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018324:	3501      	adds	r5, #1
 8018326:	1076      	asrs	r6, r6, #1
 8018328:	3708      	adds	r7, #8
 801832a:	2e00      	cmp	r6, #0
 801832c:	d1f0      	bne.n	8018310 <_dtoa_r+0x338>
 801832e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018332:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018336:	f7e8 fa99 	bl	800086c <__aeabi_ddiv>
 801833a:	e9cd 0100 	strd	r0, r1, [sp]
 801833e:	e01a      	b.n	8018376 <_dtoa_r+0x39e>
 8018340:	2502      	movs	r5, #2
 8018342:	e7a3      	b.n	801828c <_dtoa_r+0x2b4>
 8018344:	f000 80a0 	beq.w	8018488 <_dtoa_r+0x4b0>
 8018348:	f1ca 0600 	rsb	r6, sl, #0
 801834c:	4b9f      	ldr	r3, [pc, #636]	; (80185cc <_dtoa_r+0x5f4>)
 801834e:	4fa0      	ldr	r7, [pc, #640]	; (80185d0 <_dtoa_r+0x5f8>)
 8018350:	f006 020f 	and.w	r2, r6, #15
 8018354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801835c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018360:	f7e8 f95a 	bl	8000618 <__aeabi_dmul>
 8018364:	e9cd 0100 	strd	r0, r1, [sp]
 8018368:	1136      	asrs	r6, r6, #4
 801836a:	2300      	movs	r3, #0
 801836c:	2502      	movs	r5, #2
 801836e:	2e00      	cmp	r6, #0
 8018370:	d17f      	bne.n	8018472 <_dtoa_r+0x49a>
 8018372:	2b00      	cmp	r3, #0
 8018374:	d1e1      	bne.n	801833a <_dtoa_r+0x362>
 8018376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018378:	2b00      	cmp	r3, #0
 801837a:	f000 8087 	beq.w	801848c <_dtoa_r+0x4b4>
 801837e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018382:	2200      	movs	r2, #0
 8018384:	4b93      	ldr	r3, [pc, #588]	; (80185d4 <_dtoa_r+0x5fc>)
 8018386:	4630      	mov	r0, r6
 8018388:	4639      	mov	r1, r7
 801838a:	f7e8 fbb7 	bl	8000afc <__aeabi_dcmplt>
 801838e:	2800      	cmp	r0, #0
 8018390:	d07c      	beq.n	801848c <_dtoa_r+0x4b4>
 8018392:	f1b9 0f00 	cmp.w	r9, #0
 8018396:	d079      	beq.n	801848c <_dtoa_r+0x4b4>
 8018398:	9b02      	ldr	r3, [sp, #8]
 801839a:	2b00      	cmp	r3, #0
 801839c:	dd35      	ble.n	801840a <_dtoa_r+0x432>
 801839e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80183a2:	9308      	str	r3, [sp, #32]
 80183a4:	4639      	mov	r1, r7
 80183a6:	2200      	movs	r2, #0
 80183a8:	4b8b      	ldr	r3, [pc, #556]	; (80185d8 <_dtoa_r+0x600>)
 80183aa:	4630      	mov	r0, r6
 80183ac:	f7e8 f934 	bl	8000618 <__aeabi_dmul>
 80183b0:	e9cd 0100 	strd	r0, r1, [sp]
 80183b4:	9f02      	ldr	r7, [sp, #8]
 80183b6:	3501      	adds	r5, #1
 80183b8:	4628      	mov	r0, r5
 80183ba:	f7e8 f8c3 	bl	8000544 <__aeabi_i2d>
 80183be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183c2:	f7e8 f929 	bl	8000618 <__aeabi_dmul>
 80183c6:	2200      	movs	r2, #0
 80183c8:	4b84      	ldr	r3, [pc, #528]	; (80185dc <_dtoa_r+0x604>)
 80183ca:	f7e7 ff6f 	bl	80002ac <__adddf3>
 80183ce:	4605      	mov	r5, r0
 80183d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80183d4:	2f00      	cmp	r7, #0
 80183d6:	d15d      	bne.n	8018494 <_dtoa_r+0x4bc>
 80183d8:	2200      	movs	r2, #0
 80183da:	4b81      	ldr	r3, [pc, #516]	; (80185e0 <_dtoa_r+0x608>)
 80183dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183e0:	f7e7 ff62 	bl	80002a8 <__aeabi_dsub>
 80183e4:	462a      	mov	r2, r5
 80183e6:	4633      	mov	r3, r6
 80183e8:	e9cd 0100 	strd	r0, r1, [sp]
 80183ec:	f7e8 fba4 	bl	8000b38 <__aeabi_dcmpgt>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	f040 8288 	bne.w	8018906 <_dtoa_r+0x92e>
 80183f6:	462a      	mov	r2, r5
 80183f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80183fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018400:	f7e8 fb7c 	bl	8000afc <__aeabi_dcmplt>
 8018404:	2800      	cmp	r0, #0
 8018406:	f040 827c 	bne.w	8018902 <_dtoa_r+0x92a>
 801840a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801840e:	e9cd 2300 	strd	r2, r3, [sp]
 8018412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018414:	2b00      	cmp	r3, #0
 8018416:	f2c0 8150 	blt.w	80186ba <_dtoa_r+0x6e2>
 801841a:	f1ba 0f0e 	cmp.w	sl, #14
 801841e:	f300 814c 	bgt.w	80186ba <_dtoa_r+0x6e2>
 8018422:	4b6a      	ldr	r3, [pc, #424]	; (80185cc <_dtoa_r+0x5f4>)
 8018424:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018428:	ed93 7b00 	vldr	d7, [r3]
 801842c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801842e:	2b00      	cmp	r3, #0
 8018430:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018434:	f280 80d8 	bge.w	80185e8 <_dtoa_r+0x610>
 8018438:	f1b9 0f00 	cmp.w	r9, #0
 801843c:	f300 80d4 	bgt.w	80185e8 <_dtoa_r+0x610>
 8018440:	f040 825e 	bne.w	8018900 <_dtoa_r+0x928>
 8018444:	2200      	movs	r2, #0
 8018446:	4b66      	ldr	r3, [pc, #408]	; (80185e0 <_dtoa_r+0x608>)
 8018448:	ec51 0b17 	vmov	r0, r1, d7
 801844c:	f7e8 f8e4 	bl	8000618 <__aeabi_dmul>
 8018450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018454:	f7e8 fb66 	bl	8000b24 <__aeabi_dcmpge>
 8018458:	464f      	mov	r7, r9
 801845a:	464e      	mov	r6, r9
 801845c:	2800      	cmp	r0, #0
 801845e:	f040 8234 	bne.w	80188ca <_dtoa_r+0x8f2>
 8018462:	2331      	movs	r3, #49	; 0x31
 8018464:	f10b 0501 	add.w	r5, fp, #1
 8018468:	f88b 3000 	strb.w	r3, [fp]
 801846c:	f10a 0a01 	add.w	sl, sl, #1
 8018470:	e22f      	b.n	80188d2 <_dtoa_r+0x8fa>
 8018472:	07f2      	lsls	r2, r6, #31
 8018474:	d505      	bpl.n	8018482 <_dtoa_r+0x4aa>
 8018476:	e9d7 2300 	ldrd	r2, r3, [r7]
 801847a:	f7e8 f8cd 	bl	8000618 <__aeabi_dmul>
 801847e:	3501      	adds	r5, #1
 8018480:	2301      	movs	r3, #1
 8018482:	1076      	asrs	r6, r6, #1
 8018484:	3708      	adds	r7, #8
 8018486:	e772      	b.n	801836e <_dtoa_r+0x396>
 8018488:	2502      	movs	r5, #2
 801848a:	e774      	b.n	8018376 <_dtoa_r+0x39e>
 801848c:	f8cd a020 	str.w	sl, [sp, #32]
 8018490:	464f      	mov	r7, r9
 8018492:	e791      	b.n	80183b8 <_dtoa_r+0x3e0>
 8018494:	4b4d      	ldr	r3, [pc, #308]	; (80185cc <_dtoa_r+0x5f4>)
 8018496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801849a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d047      	beq.n	8018534 <_dtoa_r+0x55c>
 80184a4:	4602      	mov	r2, r0
 80184a6:	460b      	mov	r3, r1
 80184a8:	2000      	movs	r0, #0
 80184aa:	494e      	ldr	r1, [pc, #312]	; (80185e4 <_dtoa_r+0x60c>)
 80184ac:	f7e8 f9de 	bl	800086c <__aeabi_ddiv>
 80184b0:	462a      	mov	r2, r5
 80184b2:	4633      	mov	r3, r6
 80184b4:	f7e7 fef8 	bl	80002a8 <__aeabi_dsub>
 80184b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80184bc:	465d      	mov	r5, fp
 80184be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184c2:	f7e8 fb59 	bl	8000b78 <__aeabi_d2iz>
 80184c6:	4606      	mov	r6, r0
 80184c8:	f7e8 f83c 	bl	8000544 <__aeabi_i2d>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184d4:	f7e7 fee8 	bl	80002a8 <__aeabi_dsub>
 80184d8:	3630      	adds	r6, #48	; 0x30
 80184da:	f805 6b01 	strb.w	r6, [r5], #1
 80184de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184e2:	e9cd 0100 	strd	r0, r1, [sp]
 80184e6:	f7e8 fb09 	bl	8000afc <__aeabi_dcmplt>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d163      	bne.n	80185b6 <_dtoa_r+0x5de>
 80184ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184f2:	2000      	movs	r0, #0
 80184f4:	4937      	ldr	r1, [pc, #220]	; (80185d4 <_dtoa_r+0x5fc>)
 80184f6:	f7e7 fed7 	bl	80002a8 <__aeabi_dsub>
 80184fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184fe:	f7e8 fafd 	bl	8000afc <__aeabi_dcmplt>
 8018502:	2800      	cmp	r0, #0
 8018504:	f040 80b7 	bne.w	8018676 <_dtoa_r+0x69e>
 8018508:	eba5 030b 	sub.w	r3, r5, fp
 801850c:	429f      	cmp	r7, r3
 801850e:	f77f af7c 	ble.w	801840a <_dtoa_r+0x432>
 8018512:	2200      	movs	r2, #0
 8018514:	4b30      	ldr	r3, [pc, #192]	; (80185d8 <_dtoa_r+0x600>)
 8018516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801851a:	f7e8 f87d 	bl	8000618 <__aeabi_dmul>
 801851e:	2200      	movs	r2, #0
 8018520:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018524:	4b2c      	ldr	r3, [pc, #176]	; (80185d8 <_dtoa_r+0x600>)
 8018526:	e9dd 0100 	ldrd	r0, r1, [sp]
 801852a:	f7e8 f875 	bl	8000618 <__aeabi_dmul>
 801852e:	e9cd 0100 	strd	r0, r1, [sp]
 8018532:	e7c4      	b.n	80184be <_dtoa_r+0x4e6>
 8018534:	462a      	mov	r2, r5
 8018536:	4633      	mov	r3, r6
 8018538:	f7e8 f86e 	bl	8000618 <__aeabi_dmul>
 801853c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018540:	eb0b 0507 	add.w	r5, fp, r7
 8018544:	465e      	mov	r6, fp
 8018546:	e9dd 0100 	ldrd	r0, r1, [sp]
 801854a:	f7e8 fb15 	bl	8000b78 <__aeabi_d2iz>
 801854e:	4607      	mov	r7, r0
 8018550:	f7e7 fff8 	bl	8000544 <__aeabi_i2d>
 8018554:	3730      	adds	r7, #48	; 0x30
 8018556:	4602      	mov	r2, r0
 8018558:	460b      	mov	r3, r1
 801855a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801855e:	f7e7 fea3 	bl	80002a8 <__aeabi_dsub>
 8018562:	f806 7b01 	strb.w	r7, [r6], #1
 8018566:	42ae      	cmp	r6, r5
 8018568:	e9cd 0100 	strd	r0, r1, [sp]
 801856c:	f04f 0200 	mov.w	r2, #0
 8018570:	d126      	bne.n	80185c0 <_dtoa_r+0x5e8>
 8018572:	4b1c      	ldr	r3, [pc, #112]	; (80185e4 <_dtoa_r+0x60c>)
 8018574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018578:	f7e7 fe98 	bl	80002ac <__adddf3>
 801857c:	4602      	mov	r2, r0
 801857e:	460b      	mov	r3, r1
 8018580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018584:	f7e8 fad8 	bl	8000b38 <__aeabi_dcmpgt>
 8018588:	2800      	cmp	r0, #0
 801858a:	d174      	bne.n	8018676 <_dtoa_r+0x69e>
 801858c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018590:	2000      	movs	r0, #0
 8018592:	4914      	ldr	r1, [pc, #80]	; (80185e4 <_dtoa_r+0x60c>)
 8018594:	f7e7 fe88 	bl	80002a8 <__aeabi_dsub>
 8018598:	4602      	mov	r2, r0
 801859a:	460b      	mov	r3, r1
 801859c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185a0:	f7e8 faac 	bl	8000afc <__aeabi_dcmplt>
 80185a4:	2800      	cmp	r0, #0
 80185a6:	f43f af30 	beq.w	801840a <_dtoa_r+0x432>
 80185aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80185ae:	2b30      	cmp	r3, #48	; 0x30
 80185b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80185b4:	d002      	beq.n	80185bc <_dtoa_r+0x5e4>
 80185b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185ba:	e04a      	b.n	8018652 <_dtoa_r+0x67a>
 80185bc:	4615      	mov	r5, r2
 80185be:	e7f4      	b.n	80185aa <_dtoa_r+0x5d2>
 80185c0:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <_dtoa_r+0x600>)
 80185c2:	f7e8 f829 	bl	8000618 <__aeabi_dmul>
 80185c6:	e9cd 0100 	strd	r0, r1, [sp]
 80185ca:	e7bc      	b.n	8018546 <_dtoa_r+0x56e>
 80185cc:	0801c430 	.word	0x0801c430
 80185d0:	0801c408 	.word	0x0801c408
 80185d4:	3ff00000 	.word	0x3ff00000
 80185d8:	40240000 	.word	0x40240000
 80185dc:	401c0000 	.word	0x401c0000
 80185e0:	40140000 	.word	0x40140000
 80185e4:	3fe00000 	.word	0x3fe00000
 80185e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80185ec:	465d      	mov	r5, fp
 80185ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f2:	4630      	mov	r0, r6
 80185f4:	4639      	mov	r1, r7
 80185f6:	f7e8 f939 	bl	800086c <__aeabi_ddiv>
 80185fa:	f7e8 fabd 	bl	8000b78 <__aeabi_d2iz>
 80185fe:	4680      	mov	r8, r0
 8018600:	f7e7 ffa0 	bl	8000544 <__aeabi_i2d>
 8018604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018608:	f7e8 f806 	bl	8000618 <__aeabi_dmul>
 801860c:	4602      	mov	r2, r0
 801860e:	460b      	mov	r3, r1
 8018610:	4630      	mov	r0, r6
 8018612:	4639      	mov	r1, r7
 8018614:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018618:	f7e7 fe46 	bl	80002a8 <__aeabi_dsub>
 801861c:	f805 6b01 	strb.w	r6, [r5], #1
 8018620:	eba5 060b 	sub.w	r6, r5, fp
 8018624:	45b1      	cmp	r9, r6
 8018626:	4602      	mov	r2, r0
 8018628:	460b      	mov	r3, r1
 801862a:	d139      	bne.n	80186a0 <_dtoa_r+0x6c8>
 801862c:	f7e7 fe3e 	bl	80002ac <__adddf3>
 8018630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018634:	4606      	mov	r6, r0
 8018636:	460f      	mov	r7, r1
 8018638:	f7e8 fa7e 	bl	8000b38 <__aeabi_dcmpgt>
 801863c:	b9c8      	cbnz	r0, 8018672 <_dtoa_r+0x69a>
 801863e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018642:	4630      	mov	r0, r6
 8018644:	4639      	mov	r1, r7
 8018646:	f7e8 fa4f 	bl	8000ae8 <__aeabi_dcmpeq>
 801864a:	b110      	cbz	r0, 8018652 <_dtoa_r+0x67a>
 801864c:	f018 0f01 	tst.w	r8, #1
 8018650:	d10f      	bne.n	8018672 <_dtoa_r+0x69a>
 8018652:	9904      	ldr	r1, [sp, #16]
 8018654:	4620      	mov	r0, r4
 8018656:	f000 fdf9 	bl	801924c <_Bfree>
 801865a:	2300      	movs	r3, #0
 801865c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801865e:	702b      	strb	r3, [r5, #0]
 8018660:	f10a 0301 	add.w	r3, sl, #1
 8018664:	6013      	str	r3, [r2, #0]
 8018666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018668:	2b00      	cmp	r3, #0
 801866a:	f000 8241 	beq.w	8018af0 <_dtoa_r+0xb18>
 801866e:	601d      	str	r5, [r3, #0]
 8018670:	e23e      	b.n	8018af0 <_dtoa_r+0xb18>
 8018672:	f8cd a020 	str.w	sl, [sp, #32]
 8018676:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801867a:	2a39      	cmp	r2, #57	; 0x39
 801867c:	f105 33ff 	add.w	r3, r5, #4294967295
 8018680:	d108      	bne.n	8018694 <_dtoa_r+0x6bc>
 8018682:	459b      	cmp	fp, r3
 8018684:	d10a      	bne.n	801869c <_dtoa_r+0x6c4>
 8018686:	9b08      	ldr	r3, [sp, #32]
 8018688:	3301      	adds	r3, #1
 801868a:	9308      	str	r3, [sp, #32]
 801868c:	2330      	movs	r3, #48	; 0x30
 801868e:	f88b 3000 	strb.w	r3, [fp]
 8018692:	465b      	mov	r3, fp
 8018694:	781a      	ldrb	r2, [r3, #0]
 8018696:	3201      	adds	r2, #1
 8018698:	701a      	strb	r2, [r3, #0]
 801869a:	e78c      	b.n	80185b6 <_dtoa_r+0x5de>
 801869c:	461d      	mov	r5, r3
 801869e:	e7ea      	b.n	8018676 <_dtoa_r+0x69e>
 80186a0:	2200      	movs	r2, #0
 80186a2:	4b9b      	ldr	r3, [pc, #620]	; (8018910 <_dtoa_r+0x938>)
 80186a4:	f7e7 ffb8 	bl	8000618 <__aeabi_dmul>
 80186a8:	2200      	movs	r2, #0
 80186aa:	2300      	movs	r3, #0
 80186ac:	4606      	mov	r6, r0
 80186ae:	460f      	mov	r7, r1
 80186b0:	f7e8 fa1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d09a      	beq.n	80185ee <_dtoa_r+0x616>
 80186b8:	e7cb      	b.n	8018652 <_dtoa_r+0x67a>
 80186ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186bc:	2a00      	cmp	r2, #0
 80186be:	f000 808b 	beq.w	80187d8 <_dtoa_r+0x800>
 80186c2:	9a06      	ldr	r2, [sp, #24]
 80186c4:	2a01      	cmp	r2, #1
 80186c6:	dc6e      	bgt.n	80187a6 <_dtoa_r+0x7ce>
 80186c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186ca:	2a00      	cmp	r2, #0
 80186cc:	d067      	beq.n	801879e <_dtoa_r+0x7c6>
 80186ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80186d2:	9f07      	ldr	r7, [sp, #28]
 80186d4:	9d05      	ldr	r5, [sp, #20]
 80186d6:	9a05      	ldr	r2, [sp, #20]
 80186d8:	2101      	movs	r1, #1
 80186da:	441a      	add	r2, r3
 80186dc:	4620      	mov	r0, r4
 80186de:	9205      	str	r2, [sp, #20]
 80186e0:	4498      	add	r8, r3
 80186e2:	f000 fe91 	bl	8019408 <__i2b>
 80186e6:	4606      	mov	r6, r0
 80186e8:	2d00      	cmp	r5, #0
 80186ea:	dd0c      	ble.n	8018706 <_dtoa_r+0x72e>
 80186ec:	f1b8 0f00 	cmp.w	r8, #0
 80186f0:	dd09      	ble.n	8018706 <_dtoa_r+0x72e>
 80186f2:	4545      	cmp	r5, r8
 80186f4:	9a05      	ldr	r2, [sp, #20]
 80186f6:	462b      	mov	r3, r5
 80186f8:	bfa8      	it	ge
 80186fa:	4643      	movge	r3, r8
 80186fc:	1ad2      	subs	r2, r2, r3
 80186fe:	9205      	str	r2, [sp, #20]
 8018700:	1aed      	subs	r5, r5, r3
 8018702:	eba8 0803 	sub.w	r8, r8, r3
 8018706:	9b07      	ldr	r3, [sp, #28]
 8018708:	b1eb      	cbz	r3, 8018746 <_dtoa_r+0x76e>
 801870a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801870c:	2b00      	cmp	r3, #0
 801870e:	d067      	beq.n	80187e0 <_dtoa_r+0x808>
 8018710:	b18f      	cbz	r7, 8018736 <_dtoa_r+0x75e>
 8018712:	4631      	mov	r1, r6
 8018714:	463a      	mov	r2, r7
 8018716:	4620      	mov	r0, r4
 8018718:	f000 ff16 	bl	8019548 <__pow5mult>
 801871c:	9a04      	ldr	r2, [sp, #16]
 801871e:	4601      	mov	r1, r0
 8018720:	4606      	mov	r6, r0
 8018722:	4620      	mov	r0, r4
 8018724:	f000 fe79 	bl	801941a <__multiply>
 8018728:	9904      	ldr	r1, [sp, #16]
 801872a:	9008      	str	r0, [sp, #32]
 801872c:	4620      	mov	r0, r4
 801872e:	f000 fd8d 	bl	801924c <_Bfree>
 8018732:	9b08      	ldr	r3, [sp, #32]
 8018734:	9304      	str	r3, [sp, #16]
 8018736:	9b07      	ldr	r3, [sp, #28]
 8018738:	1bda      	subs	r2, r3, r7
 801873a:	d004      	beq.n	8018746 <_dtoa_r+0x76e>
 801873c:	9904      	ldr	r1, [sp, #16]
 801873e:	4620      	mov	r0, r4
 8018740:	f000 ff02 	bl	8019548 <__pow5mult>
 8018744:	9004      	str	r0, [sp, #16]
 8018746:	2101      	movs	r1, #1
 8018748:	4620      	mov	r0, r4
 801874a:	f000 fe5d 	bl	8019408 <__i2b>
 801874e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018750:	4607      	mov	r7, r0
 8018752:	2b00      	cmp	r3, #0
 8018754:	f000 81d0 	beq.w	8018af8 <_dtoa_r+0xb20>
 8018758:	461a      	mov	r2, r3
 801875a:	4601      	mov	r1, r0
 801875c:	4620      	mov	r0, r4
 801875e:	f000 fef3 	bl	8019548 <__pow5mult>
 8018762:	9b06      	ldr	r3, [sp, #24]
 8018764:	2b01      	cmp	r3, #1
 8018766:	4607      	mov	r7, r0
 8018768:	dc40      	bgt.n	80187ec <_dtoa_r+0x814>
 801876a:	9b00      	ldr	r3, [sp, #0]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d139      	bne.n	80187e4 <_dtoa_r+0x80c>
 8018770:	9b01      	ldr	r3, [sp, #4]
 8018772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018776:	2b00      	cmp	r3, #0
 8018778:	d136      	bne.n	80187e8 <_dtoa_r+0x810>
 801877a:	9b01      	ldr	r3, [sp, #4]
 801877c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018780:	0d1b      	lsrs	r3, r3, #20
 8018782:	051b      	lsls	r3, r3, #20
 8018784:	b12b      	cbz	r3, 8018792 <_dtoa_r+0x7ba>
 8018786:	9b05      	ldr	r3, [sp, #20]
 8018788:	3301      	adds	r3, #1
 801878a:	9305      	str	r3, [sp, #20]
 801878c:	f108 0801 	add.w	r8, r8, #1
 8018790:	2301      	movs	r3, #1
 8018792:	9307      	str	r3, [sp, #28]
 8018794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018796:	2b00      	cmp	r3, #0
 8018798:	d12a      	bne.n	80187f0 <_dtoa_r+0x818>
 801879a:	2001      	movs	r0, #1
 801879c:	e030      	b.n	8018800 <_dtoa_r+0x828>
 801879e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80187a4:	e795      	b.n	80186d2 <_dtoa_r+0x6fa>
 80187a6:	9b07      	ldr	r3, [sp, #28]
 80187a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80187ac:	42bb      	cmp	r3, r7
 80187ae:	bfbf      	itttt	lt
 80187b0:	9b07      	ldrlt	r3, [sp, #28]
 80187b2:	9707      	strlt	r7, [sp, #28]
 80187b4:	1afa      	sublt	r2, r7, r3
 80187b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80187b8:	bfbb      	ittet	lt
 80187ba:	189b      	addlt	r3, r3, r2
 80187bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80187be:	1bdf      	subge	r7, r3, r7
 80187c0:	2700      	movlt	r7, #0
 80187c2:	f1b9 0f00 	cmp.w	r9, #0
 80187c6:	bfb5      	itete	lt
 80187c8:	9b05      	ldrlt	r3, [sp, #20]
 80187ca:	9d05      	ldrge	r5, [sp, #20]
 80187cc:	eba3 0509 	sublt.w	r5, r3, r9
 80187d0:	464b      	movge	r3, r9
 80187d2:	bfb8      	it	lt
 80187d4:	2300      	movlt	r3, #0
 80187d6:	e77e      	b.n	80186d6 <_dtoa_r+0x6fe>
 80187d8:	9f07      	ldr	r7, [sp, #28]
 80187da:	9d05      	ldr	r5, [sp, #20]
 80187dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187de:	e783      	b.n	80186e8 <_dtoa_r+0x710>
 80187e0:	9a07      	ldr	r2, [sp, #28]
 80187e2:	e7ab      	b.n	801873c <_dtoa_r+0x764>
 80187e4:	2300      	movs	r3, #0
 80187e6:	e7d4      	b.n	8018792 <_dtoa_r+0x7ba>
 80187e8:	9b00      	ldr	r3, [sp, #0]
 80187ea:	e7d2      	b.n	8018792 <_dtoa_r+0x7ba>
 80187ec:	2300      	movs	r3, #0
 80187ee:	9307      	str	r3, [sp, #28]
 80187f0:	693b      	ldr	r3, [r7, #16]
 80187f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80187f6:	6918      	ldr	r0, [r3, #16]
 80187f8:	f000 fdb8 	bl	801936c <__hi0bits>
 80187fc:	f1c0 0020 	rsb	r0, r0, #32
 8018800:	4440      	add	r0, r8
 8018802:	f010 001f 	ands.w	r0, r0, #31
 8018806:	d047      	beq.n	8018898 <_dtoa_r+0x8c0>
 8018808:	f1c0 0320 	rsb	r3, r0, #32
 801880c:	2b04      	cmp	r3, #4
 801880e:	dd3b      	ble.n	8018888 <_dtoa_r+0x8b0>
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	f1c0 001c 	rsb	r0, r0, #28
 8018816:	4403      	add	r3, r0
 8018818:	9305      	str	r3, [sp, #20]
 801881a:	4405      	add	r5, r0
 801881c:	4480      	add	r8, r0
 801881e:	9b05      	ldr	r3, [sp, #20]
 8018820:	2b00      	cmp	r3, #0
 8018822:	dd05      	ble.n	8018830 <_dtoa_r+0x858>
 8018824:	461a      	mov	r2, r3
 8018826:	9904      	ldr	r1, [sp, #16]
 8018828:	4620      	mov	r0, r4
 801882a:	f000 fedb 	bl	80195e4 <__lshift>
 801882e:	9004      	str	r0, [sp, #16]
 8018830:	f1b8 0f00 	cmp.w	r8, #0
 8018834:	dd05      	ble.n	8018842 <_dtoa_r+0x86a>
 8018836:	4639      	mov	r1, r7
 8018838:	4642      	mov	r2, r8
 801883a:	4620      	mov	r0, r4
 801883c:	f000 fed2 	bl	80195e4 <__lshift>
 8018840:	4607      	mov	r7, r0
 8018842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018844:	b353      	cbz	r3, 801889c <_dtoa_r+0x8c4>
 8018846:	4639      	mov	r1, r7
 8018848:	9804      	ldr	r0, [sp, #16]
 801884a:	f000 ff1f 	bl	801968c <__mcmp>
 801884e:	2800      	cmp	r0, #0
 8018850:	da24      	bge.n	801889c <_dtoa_r+0x8c4>
 8018852:	2300      	movs	r3, #0
 8018854:	220a      	movs	r2, #10
 8018856:	9904      	ldr	r1, [sp, #16]
 8018858:	4620      	mov	r0, r4
 801885a:	f000 fd0e 	bl	801927a <__multadd>
 801885e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018860:	9004      	str	r0, [sp, #16]
 8018862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018866:	2b00      	cmp	r3, #0
 8018868:	f000 814d 	beq.w	8018b06 <_dtoa_r+0xb2e>
 801886c:	2300      	movs	r3, #0
 801886e:	4631      	mov	r1, r6
 8018870:	220a      	movs	r2, #10
 8018872:	4620      	mov	r0, r4
 8018874:	f000 fd01 	bl	801927a <__multadd>
 8018878:	9b02      	ldr	r3, [sp, #8]
 801887a:	2b00      	cmp	r3, #0
 801887c:	4606      	mov	r6, r0
 801887e:	dc4f      	bgt.n	8018920 <_dtoa_r+0x948>
 8018880:	9b06      	ldr	r3, [sp, #24]
 8018882:	2b02      	cmp	r3, #2
 8018884:	dd4c      	ble.n	8018920 <_dtoa_r+0x948>
 8018886:	e011      	b.n	80188ac <_dtoa_r+0x8d4>
 8018888:	d0c9      	beq.n	801881e <_dtoa_r+0x846>
 801888a:	9a05      	ldr	r2, [sp, #20]
 801888c:	331c      	adds	r3, #28
 801888e:	441a      	add	r2, r3
 8018890:	9205      	str	r2, [sp, #20]
 8018892:	441d      	add	r5, r3
 8018894:	4498      	add	r8, r3
 8018896:	e7c2      	b.n	801881e <_dtoa_r+0x846>
 8018898:	4603      	mov	r3, r0
 801889a:	e7f6      	b.n	801888a <_dtoa_r+0x8b2>
 801889c:	f1b9 0f00 	cmp.w	r9, #0
 80188a0:	dc38      	bgt.n	8018914 <_dtoa_r+0x93c>
 80188a2:	9b06      	ldr	r3, [sp, #24]
 80188a4:	2b02      	cmp	r3, #2
 80188a6:	dd35      	ble.n	8018914 <_dtoa_r+0x93c>
 80188a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80188ac:	9b02      	ldr	r3, [sp, #8]
 80188ae:	b963      	cbnz	r3, 80188ca <_dtoa_r+0x8f2>
 80188b0:	4639      	mov	r1, r7
 80188b2:	2205      	movs	r2, #5
 80188b4:	4620      	mov	r0, r4
 80188b6:	f000 fce0 	bl	801927a <__multadd>
 80188ba:	4601      	mov	r1, r0
 80188bc:	4607      	mov	r7, r0
 80188be:	9804      	ldr	r0, [sp, #16]
 80188c0:	f000 fee4 	bl	801968c <__mcmp>
 80188c4:	2800      	cmp	r0, #0
 80188c6:	f73f adcc 	bgt.w	8018462 <_dtoa_r+0x48a>
 80188ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188cc:	465d      	mov	r5, fp
 80188ce:	ea6f 0a03 	mvn.w	sl, r3
 80188d2:	f04f 0900 	mov.w	r9, #0
 80188d6:	4639      	mov	r1, r7
 80188d8:	4620      	mov	r0, r4
 80188da:	f000 fcb7 	bl	801924c <_Bfree>
 80188de:	2e00      	cmp	r6, #0
 80188e0:	f43f aeb7 	beq.w	8018652 <_dtoa_r+0x67a>
 80188e4:	f1b9 0f00 	cmp.w	r9, #0
 80188e8:	d005      	beq.n	80188f6 <_dtoa_r+0x91e>
 80188ea:	45b1      	cmp	r9, r6
 80188ec:	d003      	beq.n	80188f6 <_dtoa_r+0x91e>
 80188ee:	4649      	mov	r1, r9
 80188f0:	4620      	mov	r0, r4
 80188f2:	f000 fcab 	bl	801924c <_Bfree>
 80188f6:	4631      	mov	r1, r6
 80188f8:	4620      	mov	r0, r4
 80188fa:	f000 fca7 	bl	801924c <_Bfree>
 80188fe:	e6a8      	b.n	8018652 <_dtoa_r+0x67a>
 8018900:	2700      	movs	r7, #0
 8018902:	463e      	mov	r6, r7
 8018904:	e7e1      	b.n	80188ca <_dtoa_r+0x8f2>
 8018906:	f8dd a020 	ldr.w	sl, [sp, #32]
 801890a:	463e      	mov	r6, r7
 801890c:	e5a9      	b.n	8018462 <_dtoa_r+0x48a>
 801890e:	bf00      	nop
 8018910:	40240000 	.word	0x40240000
 8018914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018916:	f8cd 9008 	str.w	r9, [sp, #8]
 801891a:	2b00      	cmp	r3, #0
 801891c:	f000 80fa 	beq.w	8018b14 <_dtoa_r+0xb3c>
 8018920:	2d00      	cmp	r5, #0
 8018922:	dd05      	ble.n	8018930 <_dtoa_r+0x958>
 8018924:	4631      	mov	r1, r6
 8018926:	462a      	mov	r2, r5
 8018928:	4620      	mov	r0, r4
 801892a:	f000 fe5b 	bl	80195e4 <__lshift>
 801892e:	4606      	mov	r6, r0
 8018930:	9b07      	ldr	r3, [sp, #28]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d04c      	beq.n	80189d0 <_dtoa_r+0x9f8>
 8018936:	6871      	ldr	r1, [r6, #4]
 8018938:	4620      	mov	r0, r4
 801893a:	f000 fc53 	bl	80191e4 <_Balloc>
 801893e:	6932      	ldr	r2, [r6, #16]
 8018940:	3202      	adds	r2, #2
 8018942:	4605      	mov	r5, r0
 8018944:	0092      	lsls	r2, r2, #2
 8018946:	f106 010c 	add.w	r1, r6, #12
 801894a:	300c      	adds	r0, #12
 801894c:	f7fd fc62 	bl	8016214 <memcpy>
 8018950:	2201      	movs	r2, #1
 8018952:	4629      	mov	r1, r5
 8018954:	4620      	mov	r0, r4
 8018956:	f000 fe45 	bl	80195e4 <__lshift>
 801895a:	9b00      	ldr	r3, [sp, #0]
 801895c:	f8cd b014 	str.w	fp, [sp, #20]
 8018960:	f003 0301 	and.w	r3, r3, #1
 8018964:	46b1      	mov	r9, r6
 8018966:	9307      	str	r3, [sp, #28]
 8018968:	4606      	mov	r6, r0
 801896a:	4639      	mov	r1, r7
 801896c:	9804      	ldr	r0, [sp, #16]
 801896e:	f7ff faa7 	bl	8017ec0 <quorem>
 8018972:	4649      	mov	r1, r9
 8018974:	4605      	mov	r5, r0
 8018976:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801897a:	9804      	ldr	r0, [sp, #16]
 801897c:	f000 fe86 	bl	801968c <__mcmp>
 8018980:	4632      	mov	r2, r6
 8018982:	9000      	str	r0, [sp, #0]
 8018984:	4639      	mov	r1, r7
 8018986:	4620      	mov	r0, r4
 8018988:	f000 fe9a 	bl	80196c0 <__mdiff>
 801898c:	68c3      	ldr	r3, [r0, #12]
 801898e:	4602      	mov	r2, r0
 8018990:	bb03      	cbnz	r3, 80189d4 <_dtoa_r+0x9fc>
 8018992:	4601      	mov	r1, r0
 8018994:	9008      	str	r0, [sp, #32]
 8018996:	9804      	ldr	r0, [sp, #16]
 8018998:	f000 fe78 	bl	801968c <__mcmp>
 801899c:	9a08      	ldr	r2, [sp, #32]
 801899e:	4603      	mov	r3, r0
 80189a0:	4611      	mov	r1, r2
 80189a2:	4620      	mov	r0, r4
 80189a4:	9308      	str	r3, [sp, #32]
 80189a6:	f000 fc51 	bl	801924c <_Bfree>
 80189aa:	9b08      	ldr	r3, [sp, #32]
 80189ac:	b9a3      	cbnz	r3, 80189d8 <_dtoa_r+0xa00>
 80189ae:	9a06      	ldr	r2, [sp, #24]
 80189b0:	b992      	cbnz	r2, 80189d8 <_dtoa_r+0xa00>
 80189b2:	9a07      	ldr	r2, [sp, #28]
 80189b4:	b982      	cbnz	r2, 80189d8 <_dtoa_r+0xa00>
 80189b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189ba:	d029      	beq.n	8018a10 <_dtoa_r+0xa38>
 80189bc:	9b00      	ldr	r3, [sp, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	dd01      	ble.n	80189c6 <_dtoa_r+0x9ee>
 80189c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80189c6:	9b05      	ldr	r3, [sp, #20]
 80189c8:	1c5d      	adds	r5, r3, #1
 80189ca:	f883 8000 	strb.w	r8, [r3]
 80189ce:	e782      	b.n	80188d6 <_dtoa_r+0x8fe>
 80189d0:	4630      	mov	r0, r6
 80189d2:	e7c2      	b.n	801895a <_dtoa_r+0x982>
 80189d4:	2301      	movs	r3, #1
 80189d6:	e7e3      	b.n	80189a0 <_dtoa_r+0x9c8>
 80189d8:	9a00      	ldr	r2, [sp, #0]
 80189da:	2a00      	cmp	r2, #0
 80189dc:	db04      	blt.n	80189e8 <_dtoa_r+0xa10>
 80189de:	d125      	bne.n	8018a2c <_dtoa_r+0xa54>
 80189e0:	9a06      	ldr	r2, [sp, #24]
 80189e2:	bb1a      	cbnz	r2, 8018a2c <_dtoa_r+0xa54>
 80189e4:	9a07      	ldr	r2, [sp, #28]
 80189e6:	bb0a      	cbnz	r2, 8018a2c <_dtoa_r+0xa54>
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	ddec      	ble.n	80189c6 <_dtoa_r+0x9ee>
 80189ec:	2201      	movs	r2, #1
 80189ee:	9904      	ldr	r1, [sp, #16]
 80189f0:	4620      	mov	r0, r4
 80189f2:	f000 fdf7 	bl	80195e4 <__lshift>
 80189f6:	4639      	mov	r1, r7
 80189f8:	9004      	str	r0, [sp, #16]
 80189fa:	f000 fe47 	bl	801968c <__mcmp>
 80189fe:	2800      	cmp	r0, #0
 8018a00:	dc03      	bgt.n	8018a0a <_dtoa_r+0xa32>
 8018a02:	d1e0      	bne.n	80189c6 <_dtoa_r+0x9ee>
 8018a04:	f018 0f01 	tst.w	r8, #1
 8018a08:	d0dd      	beq.n	80189c6 <_dtoa_r+0x9ee>
 8018a0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a0e:	d1d8      	bne.n	80189c2 <_dtoa_r+0x9ea>
 8018a10:	9b05      	ldr	r3, [sp, #20]
 8018a12:	9a05      	ldr	r2, [sp, #20]
 8018a14:	1c5d      	adds	r5, r3, #1
 8018a16:	2339      	movs	r3, #57	; 0x39
 8018a18:	7013      	strb	r3, [r2, #0]
 8018a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a1e:	2b39      	cmp	r3, #57	; 0x39
 8018a20:	f105 32ff 	add.w	r2, r5, #4294967295
 8018a24:	d04f      	beq.n	8018ac6 <_dtoa_r+0xaee>
 8018a26:	3301      	adds	r3, #1
 8018a28:	7013      	strb	r3, [r2, #0]
 8018a2a:	e754      	b.n	80188d6 <_dtoa_r+0x8fe>
 8018a2c:	9a05      	ldr	r2, [sp, #20]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	f102 0501 	add.w	r5, r2, #1
 8018a34:	dd06      	ble.n	8018a44 <_dtoa_r+0xa6c>
 8018a36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a3a:	d0e9      	beq.n	8018a10 <_dtoa_r+0xa38>
 8018a3c:	f108 0801 	add.w	r8, r8, #1
 8018a40:	9b05      	ldr	r3, [sp, #20]
 8018a42:	e7c2      	b.n	80189ca <_dtoa_r+0x9f2>
 8018a44:	9a02      	ldr	r2, [sp, #8]
 8018a46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018a4a:	eba5 030b 	sub.w	r3, r5, fp
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d021      	beq.n	8018a96 <_dtoa_r+0xabe>
 8018a52:	2300      	movs	r3, #0
 8018a54:	220a      	movs	r2, #10
 8018a56:	9904      	ldr	r1, [sp, #16]
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f000 fc0e 	bl	801927a <__multadd>
 8018a5e:	45b1      	cmp	r9, r6
 8018a60:	9004      	str	r0, [sp, #16]
 8018a62:	f04f 0300 	mov.w	r3, #0
 8018a66:	f04f 020a 	mov.w	r2, #10
 8018a6a:	4649      	mov	r1, r9
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	d105      	bne.n	8018a7c <_dtoa_r+0xaa4>
 8018a70:	f000 fc03 	bl	801927a <__multadd>
 8018a74:	4681      	mov	r9, r0
 8018a76:	4606      	mov	r6, r0
 8018a78:	9505      	str	r5, [sp, #20]
 8018a7a:	e776      	b.n	801896a <_dtoa_r+0x992>
 8018a7c:	f000 fbfd 	bl	801927a <__multadd>
 8018a80:	4631      	mov	r1, r6
 8018a82:	4681      	mov	r9, r0
 8018a84:	2300      	movs	r3, #0
 8018a86:	220a      	movs	r2, #10
 8018a88:	4620      	mov	r0, r4
 8018a8a:	f000 fbf6 	bl	801927a <__multadd>
 8018a8e:	4606      	mov	r6, r0
 8018a90:	e7f2      	b.n	8018a78 <_dtoa_r+0xaa0>
 8018a92:	f04f 0900 	mov.w	r9, #0
 8018a96:	2201      	movs	r2, #1
 8018a98:	9904      	ldr	r1, [sp, #16]
 8018a9a:	4620      	mov	r0, r4
 8018a9c:	f000 fda2 	bl	80195e4 <__lshift>
 8018aa0:	4639      	mov	r1, r7
 8018aa2:	9004      	str	r0, [sp, #16]
 8018aa4:	f000 fdf2 	bl	801968c <__mcmp>
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	dcb6      	bgt.n	8018a1a <_dtoa_r+0xa42>
 8018aac:	d102      	bne.n	8018ab4 <_dtoa_r+0xadc>
 8018aae:	f018 0f01 	tst.w	r8, #1
 8018ab2:	d1b2      	bne.n	8018a1a <_dtoa_r+0xa42>
 8018ab4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018ab8:	2b30      	cmp	r3, #48	; 0x30
 8018aba:	f105 32ff 	add.w	r2, r5, #4294967295
 8018abe:	f47f af0a 	bne.w	80188d6 <_dtoa_r+0x8fe>
 8018ac2:	4615      	mov	r5, r2
 8018ac4:	e7f6      	b.n	8018ab4 <_dtoa_r+0xadc>
 8018ac6:	4593      	cmp	fp, r2
 8018ac8:	d105      	bne.n	8018ad6 <_dtoa_r+0xafe>
 8018aca:	2331      	movs	r3, #49	; 0x31
 8018acc:	f10a 0a01 	add.w	sl, sl, #1
 8018ad0:	f88b 3000 	strb.w	r3, [fp]
 8018ad4:	e6ff      	b.n	80188d6 <_dtoa_r+0x8fe>
 8018ad6:	4615      	mov	r5, r2
 8018ad8:	e79f      	b.n	8018a1a <_dtoa_r+0xa42>
 8018ada:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018b40 <_dtoa_r+0xb68>
 8018ade:	e007      	b.n	8018af0 <_dtoa_r+0xb18>
 8018ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ae2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018b44 <_dtoa_r+0xb6c>
 8018ae6:	b11b      	cbz	r3, 8018af0 <_dtoa_r+0xb18>
 8018ae8:	f10b 0308 	add.w	r3, fp, #8
 8018aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018aee:	6013      	str	r3, [r2, #0]
 8018af0:	4658      	mov	r0, fp
 8018af2:	b017      	add	sp, #92	; 0x5c
 8018af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af8:	9b06      	ldr	r3, [sp, #24]
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	f77f ae35 	ble.w	801876a <_dtoa_r+0x792>
 8018b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b02:	9307      	str	r3, [sp, #28]
 8018b04:	e649      	b.n	801879a <_dtoa_r+0x7c2>
 8018b06:	9b02      	ldr	r3, [sp, #8]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	dc03      	bgt.n	8018b14 <_dtoa_r+0xb3c>
 8018b0c:	9b06      	ldr	r3, [sp, #24]
 8018b0e:	2b02      	cmp	r3, #2
 8018b10:	f73f aecc 	bgt.w	80188ac <_dtoa_r+0x8d4>
 8018b14:	465d      	mov	r5, fp
 8018b16:	4639      	mov	r1, r7
 8018b18:	9804      	ldr	r0, [sp, #16]
 8018b1a:	f7ff f9d1 	bl	8017ec0 <quorem>
 8018b1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018b22:	f805 8b01 	strb.w	r8, [r5], #1
 8018b26:	9a02      	ldr	r2, [sp, #8]
 8018b28:	eba5 030b 	sub.w	r3, r5, fp
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	ddb0      	ble.n	8018a92 <_dtoa_r+0xaba>
 8018b30:	2300      	movs	r3, #0
 8018b32:	220a      	movs	r2, #10
 8018b34:	9904      	ldr	r1, [sp, #16]
 8018b36:	4620      	mov	r0, r4
 8018b38:	f000 fb9f 	bl	801927a <__multadd>
 8018b3c:	9004      	str	r0, [sp, #16]
 8018b3e:	e7ea      	b.n	8018b16 <_dtoa_r+0xb3e>
 8018b40:	0801c374 	.word	0x0801c374
 8018b44:	0801c3f0 	.word	0x0801c3f0

08018b48 <rshift>:
 8018b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b4a:	6906      	ldr	r6, [r0, #16]
 8018b4c:	114b      	asrs	r3, r1, #5
 8018b4e:	429e      	cmp	r6, r3
 8018b50:	f100 0414 	add.w	r4, r0, #20
 8018b54:	dd30      	ble.n	8018bb8 <rshift+0x70>
 8018b56:	f011 011f 	ands.w	r1, r1, #31
 8018b5a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018b5e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018b62:	d108      	bne.n	8018b76 <rshift+0x2e>
 8018b64:	4621      	mov	r1, r4
 8018b66:	42b2      	cmp	r2, r6
 8018b68:	460b      	mov	r3, r1
 8018b6a:	d211      	bcs.n	8018b90 <rshift+0x48>
 8018b6c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018b70:	f841 3b04 	str.w	r3, [r1], #4
 8018b74:	e7f7      	b.n	8018b66 <rshift+0x1e>
 8018b76:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018b7a:	f1c1 0c20 	rsb	ip, r1, #32
 8018b7e:	40cd      	lsrs	r5, r1
 8018b80:	3204      	adds	r2, #4
 8018b82:	4623      	mov	r3, r4
 8018b84:	42b2      	cmp	r2, r6
 8018b86:	4617      	mov	r7, r2
 8018b88:	d30c      	bcc.n	8018ba4 <rshift+0x5c>
 8018b8a:	601d      	str	r5, [r3, #0]
 8018b8c:	b105      	cbz	r5, 8018b90 <rshift+0x48>
 8018b8e:	3304      	adds	r3, #4
 8018b90:	1b1a      	subs	r2, r3, r4
 8018b92:	42a3      	cmp	r3, r4
 8018b94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018b98:	bf08      	it	eq
 8018b9a:	2300      	moveq	r3, #0
 8018b9c:	6102      	str	r2, [r0, #16]
 8018b9e:	bf08      	it	eq
 8018ba0:	6143      	streq	r3, [r0, #20]
 8018ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ba4:	683f      	ldr	r7, [r7, #0]
 8018ba6:	fa07 f70c 	lsl.w	r7, r7, ip
 8018baa:	433d      	orrs	r5, r7
 8018bac:	f843 5b04 	str.w	r5, [r3], #4
 8018bb0:	f852 5b04 	ldr.w	r5, [r2], #4
 8018bb4:	40cd      	lsrs	r5, r1
 8018bb6:	e7e5      	b.n	8018b84 <rshift+0x3c>
 8018bb8:	4623      	mov	r3, r4
 8018bba:	e7e9      	b.n	8018b90 <rshift+0x48>

08018bbc <__hexdig_fun>:
 8018bbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018bc0:	2b09      	cmp	r3, #9
 8018bc2:	d802      	bhi.n	8018bca <__hexdig_fun+0xe>
 8018bc4:	3820      	subs	r0, #32
 8018bc6:	b2c0      	uxtb	r0, r0
 8018bc8:	4770      	bx	lr
 8018bca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018bce:	2b05      	cmp	r3, #5
 8018bd0:	d801      	bhi.n	8018bd6 <__hexdig_fun+0x1a>
 8018bd2:	3847      	subs	r0, #71	; 0x47
 8018bd4:	e7f7      	b.n	8018bc6 <__hexdig_fun+0xa>
 8018bd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018bda:	2b05      	cmp	r3, #5
 8018bdc:	d801      	bhi.n	8018be2 <__hexdig_fun+0x26>
 8018bde:	3827      	subs	r0, #39	; 0x27
 8018be0:	e7f1      	b.n	8018bc6 <__hexdig_fun+0xa>
 8018be2:	2000      	movs	r0, #0
 8018be4:	4770      	bx	lr

08018be6 <__gethex>:
 8018be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bea:	b08b      	sub	sp, #44	; 0x2c
 8018bec:	468a      	mov	sl, r1
 8018bee:	9002      	str	r0, [sp, #8]
 8018bf0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018bf2:	9306      	str	r3, [sp, #24]
 8018bf4:	4690      	mov	r8, r2
 8018bf6:	f000 fad0 	bl	801919a <__localeconv_l>
 8018bfa:	6803      	ldr	r3, [r0, #0]
 8018bfc:	9303      	str	r3, [sp, #12]
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7e7 faf0 	bl	80001e4 <strlen>
 8018c04:	9b03      	ldr	r3, [sp, #12]
 8018c06:	9001      	str	r0, [sp, #4]
 8018c08:	4403      	add	r3, r0
 8018c0a:	f04f 0b00 	mov.w	fp, #0
 8018c0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018c12:	9307      	str	r3, [sp, #28]
 8018c14:	f8da 3000 	ldr.w	r3, [sl]
 8018c18:	3302      	adds	r3, #2
 8018c1a:	461f      	mov	r7, r3
 8018c1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018c20:	2830      	cmp	r0, #48	; 0x30
 8018c22:	d06c      	beq.n	8018cfe <__gethex+0x118>
 8018c24:	f7ff ffca 	bl	8018bbc <__hexdig_fun>
 8018c28:	4604      	mov	r4, r0
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	d16a      	bne.n	8018d04 <__gethex+0x11e>
 8018c2e:	9a01      	ldr	r2, [sp, #4]
 8018c30:	9903      	ldr	r1, [sp, #12]
 8018c32:	4638      	mov	r0, r7
 8018c34:	f7fe fa42 	bl	80170bc <strncmp>
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	d166      	bne.n	8018d0a <__gethex+0x124>
 8018c3c:	9b01      	ldr	r3, [sp, #4]
 8018c3e:	5cf8      	ldrb	r0, [r7, r3]
 8018c40:	18fe      	adds	r6, r7, r3
 8018c42:	f7ff ffbb 	bl	8018bbc <__hexdig_fun>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	d062      	beq.n	8018d10 <__gethex+0x12a>
 8018c4a:	4633      	mov	r3, r6
 8018c4c:	7818      	ldrb	r0, [r3, #0]
 8018c4e:	2830      	cmp	r0, #48	; 0x30
 8018c50:	461f      	mov	r7, r3
 8018c52:	f103 0301 	add.w	r3, r3, #1
 8018c56:	d0f9      	beq.n	8018c4c <__gethex+0x66>
 8018c58:	f7ff ffb0 	bl	8018bbc <__hexdig_fun>
 8018c5c:	fab0 f580 	clz	r5, r0
 8018c60:	096d      	lsrs	r5, r5, #5
 8018c62:	4634      	mov	r4, r6
 8018c64:	f04f 0b01 	mov.w	fp, #1
 8018c68:	463a      	mov	r2, r7
 8018c6a:	4616      	mov	r6, r2
 8018c6c:	3201      	adds	r2, #1
 8018c6e:	7830      	ldrb	r0, [r6, #0]
 8018c70:	f7ff ffa4 	bl	8018bbc <__hexdig_fun>
 8018c74:	2800      	cmp	r0, #0
 8018c76:	d1f8      	bne.n	8018c6a <__gethex+0x84>
 8018c78:	9a01      	ldr	r2, [sp, #4]
 8018c7a:	9903      	ldr	r1, [sp, #12]
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	f7fe fa1d 	bl	80170bc <strncmp>
 8018c82:	b950      	cbnz	r0, 8018c9a <__gethex+0xb4>
 8018c84:	b954      	cbnz	r4, 8018c9c <__gethex+0xb6>
 8018c86:	9b01      	ldr	r3, [sp, #4]
 8018c88:	18f4      	adds	r4, r6, r3
 8018c8a:	4622      	mov	r2, r4
 8018c8c:	4616      	mov	r6, r2
 8018c8e:	3201      	adds	r2, #1
 8018c90:	7830      	ldrb	r0, [r6, #0]
 8018c92:	f7ff ff93 	bl	8018bbc <__hexdig_fun>
 8018c96:	2800      	cmp	r0, #0
 8018c98:	d1f8      	bne.n	8018c8c <__gethex+0xa6>
 8018c9a:	b10c      	cbz	r4, 8018ca0 <__gethex+0xba>
 8018c9c:	1ba4      	subs	r4, r4, r6
 8018c9e:	00a4      	lsls	r4, r4, #2
 8018ca0:	7833      	ldrb	r3, [r6, #0]
 8018ca2:	2b50      	cmp	r3, #80	; 0x50
 8018ca4:	d001      	beq.n	8018caa <__gethex+0xc4>
 8018ca6:	2b70      	cmp	r3, #112	; 0x70
 8018ca8:	d140      	bne.n	8018d2c <__gethex+0x146>
 8018caa:	7873      	ldrb	r3, [r6, #1]
 8018cac:	2b2b      	cmp	r3, #43	; 0x2b
 8018cae:	d031      	beq.n	8018d14 <__gethex+0x12e>
 8018cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8018cb2:	d033      	beq.n	8018d1c <__gethex+0x136>
 8018cb4:	1c71      	adds	r1, r6, #1
 8018cb6:	f04f 0900 	mov.w	r9, #0
 8018cba:	7808      	ldrb	r0, [r1, #0]
 8018cbc:	f7ff ff7e 	bl	8018bbc <__hexdig_fun>
 8018cc0:	1e43      	subs	r3, r0, #1
 8018cc2:	b2db      	uxtb	r3, r3
 8018cc4:	2b18      	cmp	r3, #24
 8018cc6:	d831      	bhi.n	8018d2c <__gethex+0x146>
 8018cc8:	f1a0 0210 	sub.w	r2, r0, #16
 8018ccc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018cd0:	f7ff ff74 	bl	8018bbc <__hexdig_fun>
 8018cd4:	1e43      	subs	r3, r0, #1
 8018cd6:	b2db      	uxtb	r3, r3
 8018cd8:	2b18      	cmp	r3, #24
 8018cda:	d922      	bls.n	8018d22 <__gethex+0x13c>
 8018cdc:	f1b9 0f00 	cmp.w	r9, #0
 8018ce0:	d000      	beq.n	8018ce4 <__gethex+0xfe>
 8018ce2:	4252      	negs	r2, r2
 8018ce4:	4414      	add	r4, r2
 8018ce6:	f8ca 1000 	str.w	r1, [sl]
 8018cea:	b30d      	cbz	r5, 8018d30 <__gethex+0x14a>
 8018cec:	f1bb 0f00 	cmp.w	fp, #0
 8018cf0:	bf0c      	ite	eq
 8018cf2:	2706      	moveq	r7, #6
 8018cf4:	2700      	movne	r7, #0
 8018cf6:	4638      	mov	r0, r7
 8018cf8:	b00b      	add	sp, #44	; 0x2c
 8018cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfe:	f10b 0b01 	add.w	fp, fp, #1
 8018d02:	e78a      	b.n	8018c1a <__gethex+0x34>
 8018d04:	2500      	movs	r5, #0
 8018d06:	462c      	mov	r4, r5
 8018d08:	e7ae      	b.n	8018c68 <__gethex+0x82>
 8018d0a:	463e      	mov	r6, r7
 8018d0c:	2501      	movs	r5, #1
 8018d0e:	e7c7      	b.n	8018ca0 <__gethex+0xba>
 8018d10:	4604      	mov	r4, r0
 8018d12:	e7fb      	b.n	8018d0c <__gethex+0x126>
 8018d14:	f04f 0900 	mov.w	r9, #0
 8018d18:	1cb1      	adds	r1, r6, #2
 8018d1a:	e7ce      	b.n	8018cba <__gethex+0xd4>
 8018d1c:	f04f 0901 	mov.w	r9, #1
 8018d20:	e7fa      	b.n	8018d18 <__gethex+0x132>
 8018d22:	230a      	movs	r3, #10
 8018d24:	fb03 0202 	mla	r2, r3, r2, r0
 8018d28:	3a10      	subs	r2, #16
 8018d2a:	e7cf      	b.n	8018ccc <__gethex+0xe6>
 8018d2c:	4631      	mov	r1, r6
 8018d2e:	e7da      	b.n	8018ce6 <__gethex+0x100>
 8018d30:	1bf3      	subs	r3, r6, r7
 8018d32:	3b01      	subs	r3, #1
 8018d34:	4629      	mov	r1, r5
 8018d36:	2b07      	cmp	r3, #7
 8018d38:	dc49      	bgt.n	8018dce <__gethex+0x1e8>
 8018d3a:	9802      	ldr	r0, [sp, #8]
 8018d3c:	f000 fa52 	bl	80191e4 <_Balloc>
 8018d40:	9b01      	ldr	r3, [sp, #4]
 8018d42:	f100 0914 	add.w	r9, r0, #20
 8018d46:	f04f 0b00 	mov.w	fp, #0
 8018d4a:	f1c3 0301 	rsb	r3, r3, #1
 8018d4e:	4605      	mov	r5, r0
 8018d50:	f8cd 9010 	str.w	r9, [sp, #16]
 8018d54:	46da      	mov	sl, fp
 8018d56:	9308      	str	r3, [sp, #32]
 8018d58:	42b7      	cmp	r7, r6
 8018d5a:	d33b      	bcc.n	8018dd4 <__gethex+0x1ee>
 8018d5c:	9804      	ldr	r0, [sp, #16]
 8018d5e:	f840 ab04 	str.w	sl, [r0], #4
 8018d62:	eba0 0009 	sub.w	r0, r0, r9
 8018d66:	1080      	asrs	r0, r0, #2
 8018d68:	6128      	str	r0, [r5, #16]
 8018d6a:	0147      	lsls	r7, r0, #5
 8018d6c:	4650      	mov	r0, sl
 8018d6e:	f000 fafd 	bl	801936c <__hi0bits>
 8018d72:	f8d8 6000 	ldr.w	r6, [r8]
 8018d76:	1a3f      	subs	r7, r7, r0
 8018d78:	42b7      	cmp	r7, r6
 8018d7a:	dd64      	ble.n	8018e46 <__gethex+0x260>
 8018d7c:	1bbf      	subs	r7, r7, r6
 8018d7e:	4639      	mov	r1, r7
 8018d80:	4628      	mov	r0, r5
 8018d82:	f000 fe0d 	bl	80199a0 <__any_on>
 8018d86:	4682      	mov	sl, r0
 8018d88:	b178      	cbz	r0, 8018daa <__gethex+0x1c4>
 8018d8a:	1e7b      	subs	r3, r7, #1
 8018d8c:	1159      	asrs	r1, r3, #5
 8018d8e:	f003 021f 	and.w	r2, r3, #31
 8018d92:	f04f 0a01 	mov.w	sl, #1
 8018d96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018d9a:	fa0a f202 	lsl.w	r2, sl, r2
 8018d9e:	420a      	tst	r2, r1
 8018da0:	d003      	beq.n	8018daa <__gethex+0x1c4>
 8018da2:	4553      	cmp	r3, sl
 8018da4:	dc46      	bgt.n	8018e34 <__gethex+0x24e>
 8018da6:	f04f 0a02 	mov.w	sl, #2
 8018daa:	4639      	mov	r1, r7
 8018dac:	4628      	mov	r0, r5
 8018dae:	f7ff fecb 	bl	8018b48 <rshift>
 8018db2:	443c      	add	r4, r7
 8018db4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018db8:	42a3      	cmp	r3, r4
 8018dba:	da52      	bge.n	8018e62 <__gethex+0x27c>
 8018dbc:	4629      	mov	r1, r5
 8018dbe:	9802      	ldr	r0, [sp, #8]
 8018dc0:	f000 fa44 	bl	801924c <_Bfree>
 8018dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	6013      	str	r3, [r2, #0]
 8018dca:	27a3      	movs	r7, #163	; 0xa3
 8018dcc:	e793      	b.n	8018cf6 <__gethex+0x110>
 8018dce:	3101      	adds	r1, #1
 8018dd0:	105b      	asrs	r3, r3, #1
 8018dd2:	e7b0      	b.n	8018d36 <__gethex+0x150>
 8018dd4:	1e73      	subs	r3, r6, #1
 8018dd6:	9305      	str	r3, [sp, #20]
 8018dd8:	9a07      	ldr	r2, [sp, #28]
 8018dda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018dde:	4293      	cmp	r3, r2
 8018de0:	d018      	beq.n	8018e14 <__gethex+0x22e>
 8018de2:	f1bb 0f20 	cmp.w	fp, #32
 8018de6:	d107      	bne.n	8018df8 <__gethex+0x212>
 8018de8:	9b04      	ldr	r3, [sp, #16]
 8018dea:	f8c3 a000 	str.w	sl, [r3]
 8018dee:	3304      	adds	r3, #4
 8018df0:	f04f 0a00 	mov.w	sl, #0
 8018df4:	9304      	str	r3, [sp, #16]
 8018df6:	46d3      	mov	fp, sl
 8018df8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018dfc:	f7ff fede 	bl	8018bbc <__hexdig_fun>
 8018e00:	f000 000f 	and.w	r0, r0, #15
 8018e04:	fa00 f00b 	lsl.w	r0, r0, fp
 8018e08:	ea4a 0a00 	orr.w	sl, sl, r0
 8018e0c:	f10b 0b04 	add.w	fp, fp, #4
 8018e10:	9b05      	ldr	r3, [sp, #20]
 8018e12:	e00d      	b.n	8018e30 <__gethex+0x24a>
 8018e14:	9b05      	ldr	r3, [sp, #20]
 8018e16:	9a08      	ldr	r2, [sp, #32]
 8018e18:	4413      	add	r3, r2
 8018e1a:	42bb      	cmp	r3, r7
 8018e1c:	d3e1      	bcc.n	8018de2 <__gethex+0x1fc>
 8018e1e:	4618      	mov	r0, r3
 8018e20:	9a01      	ldr	r2, [sp, #4]
 8018e22:	9903      	ldr	r1, [sp, #12]
 8018e24:	9309      	str	r3, [sp, #36]	; 0x24
 8018e26:	f7fe f949 	bl	80170bc <strncmp>
 8018e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d1d8      	bne.n	8018de2 <__gethex+0x1fc>
 8018e30:	461e      	mov	r6, r3
 8018e32:	e791      	b.n	8018d58 <__gethex+0x172>
 8018e34:	1eb9      	subs	r1, r7, #2
 8018e36:	4628      	mov	r0, r5
 8018e38:	f000 fdb2 	bl	80199a0 <__any_on>
 8018e3c:	2800      	cmp	r0, #0
 8018e3e:	d0b2      	beq.n	8018da6 <__gethex+0x1c0>
 8018e40:	f04f 0a03 	mov.w	sl, #3
 8018e44:	e7b1      	b.n	8018daa <__gethex+0x1c4>
 8018e46:	da09      	bge.n	8018e5c <__gethex+0x276>
 8018e48:	1bf7      	subs	r7, r6, r7
 8018e4a:	4629      	mov	r1, r5
 8018e4c:	463a      	mov	r2, r7
 8018e4e:	9802      	ldr	r0, [sp, #8]
 8018e50:	f000 fbc8 	bl	80195e4 <__lshift>
 8018e54:	1be4      	subs	r4, r4, r7
 8018e56:	4605      	mov	r5, r0
 8018e58:	f100 0914 	add.w	r9, r0, #20
 8018e5c:	f04f 0a00 	mov.w	sl, #0
 8018e60:	e7a8      	b.n	8018db4 <__gethex+0x1ce>
 8018e62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e66:	42a0      	cmp	r0, r4
 8018e68:	dd6a      	ble.n	8018f40 <__gethex+0x35a>
 8018e6a:	1b04      	subs	r4, r0, r4
 8018e6c:	42a6      	cmp	r6, r4
 8018e6e:	dc2e      	bgt.n	8018ece <__gethex+0x2e8>
 8018e70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e74:	2b02      	cmp	r3, #2
 8018e76:	d022      	beq.n	8018ebe <__gethex+0x2d8>
 8018e78:	2b03      	cmp	r3, #3
 8018e7a:	d024      	beq.n	8018ec6 <__gethex+0x2e0>
 8018e7c:	2b01      	cmp	r3, #1
 8018e7e:	d115      	bne.n	8018eac <__gethex+0x2c6>
 8018e80:	42a6      	cmp	r6, r4
 8018e82:	d113      	bne.n	8018eac <__gethex+0x2c6>
 8018e84:	2e01      	cmp	r6, #1
 8018e86:	dc0b      	bgt.n	8018ea0 <__gethex+0x2ba>
 8018e88:	9a06      	ldr	r2, [sp, #24]
 8018e8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e8e:	6013      	str	r3, [r2, #0]
 8018e90:	2301      	movs	r3, #1
 8018e92:	612b      	str	r3, [r5, #16]
 8018e94:	f8c9 3000 	str.w	r3, [r9]
 8018e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e9a:	2762      	movs	r7, #98	; 0x62
 8018e9c:	601d      	str	r5, [r3, #0]
 8018e9e:	e72a      	b.n	8018cf6 <__gethex+0x110>
 8018ea0:	1e71      	subs	r1, r6, #1
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	f000 fd7c 	bl	80199a0 <__any_on>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d1ed      	bne.n	8018e88 <__gethex+0x2a2>
 8018eac:	4629      	mov	r1, r5
 8018eae:	9802      	ldr	r0, [sp, #8]
 8018eb0:	f000 f9cc 	bl	801924c <_Bfree>
 8018eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	6013      	str	r3, [r2, #0]
 8018eba:	2750      	movs	r7, #80	; 0x50
 8018ebc:	e71b      	b.n	8018cf6 <__gethex+0x110>
 8018ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d0e1      	beq.n	8018e88 <__gethex+0x2a2>
 8018ec4:	e7f2      	b.n	8018eac <__gethex+0x2c6>
 8018ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1dd      	bne.n	8018e88 <__gethex+0x2a2>
 8018ecc:	e7ee      	b.n	8018eac <__gethex+0x2c6>
 8018ece:	1e67      	subs	r7, r4, #1
 8018ed0:	f1ba 0f00 	cmp.w	sl, #0
 8018ed4:	d131      	bne.n	8018f3a <__gethex+0x354>
 8018ed6:	b127      	cbz	r7, 8018ee2 <__gethex+0x2fc>
 8018ed8:	4639      	mov	r1, r7
 8018eda:	4628      	mov	r0, r5
 8018edc:	f000 fd60 	bl	80199a0 <__any_on>
 8018ee0:	4682      	mov	sl, r0
 8018ee2:	117a      	asrs	r2, r7, #5
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	f007 071f 	and.w	r7, r7, #31
 8018eea:	fa03 f707 	lsl.w	r7, r3, r7
 8018eee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018ef2:	4621      	mov	r1, r4
 8018ef4:	421f      	tst	r7, r3
 8018ef6:	4628      	mov	r0, r5
 8018ef8:	bf18      	it	ne
 8018efa:	f04a 0a02 	orrne.w	sl, sl, #2
 8018efe:	1b36      	subs	r6, r6, r4
 8018f00:	f7ff fe22 	bl	8018b48 <rshift>
 8018f04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018f08:	2702      	movs	r7, #2
 8018f0a:	f1ba 0f00 	cmp.w	sl, #0
 8018f0e:	d048      	beq.n	8018fa2 <__gethex+0x3bc>
 8018f10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f14:	2b02      	cmp	r3, #2
 8018f16:	d015      	beq.n	8018f44 <__gethex+0x35e>
 8018f18:	2b03      	cmp	r3, #3
 8018f1a:	d017      	beq.n	8018f4c <__gethex+0x366>
 8018f1c:	2b01      	cmp	r3, #1
 8018f1e:	d109      	bne.n	8018f34 <__gethex+0x34e>
 8018f20:	f01a 0f02 	tst.w	sl, #2
 8018f24:	d006      	beq.n	8018f34 <__gethex+0x34e>
 8018f26:	f8d9 3000 	ldr.w	r3, [r9]
 8018f2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8018f2e:	f01a 0f01 	tst.w	sl, #1
 8018f32:	d10e      	bne.n	8018f52 <__gethex+0x36c>
 8018f34:	f047 0710 	orr.w	r7, r7, #16
 8018f38:	e033      	b.n	8018fa2 <__gethex+0x3bc>
 8018f3a:	f04f 0a01 	mov.w	sl, #1
 8018f3e:	e7d0      	b.n	8018ee2 <__gethex+0x2fc>
 8018f40:	2701      	movs	r7, #1
 8018f42:	e7e2      	b.n	8018f0a <__gethex+0x324>
 8018f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f46:	f1c3 0301 	rsb	r3, r3, #1
 8018f4a:	9315      	str	r3, [sp, #84]	; 0x54
 8018f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d0f0      	beq.n	8018f34 <__gethex+0x34e>
 8018f52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018f56:	f105 0314 	add.w	r3, r5, #20
 8018f5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018f5e:	eb03 010a 	add.w	r1, r3, sl
 8018f62:	f04f 0c00 	mov.w	ip, #0
 8018f66:	4618      	mov	r0, r3
 8018f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018f70:	d01c      	beq.n	8018fac <__gethex+0x3c6>
 8018f72:	3201      	adds	r2, #1
 8018f74:	6002      	str	r2, [r0, #0]
 8018f76:	2f02      	cmp	r7, #2
 8018f78:	f105 0314 	add.w	r3, r5, #20
 8018f7c:	d138      	bne.n	8018ff0 <__gethex+0x40a>
 8018f7e:	f8d8 2000 	ldr.w	r2, [r8]
 8018f82:	3a01      	subs	r2, #1
 8018f84:	42b2      	cmp	r2, r6
 8018f86:	d10a      	bne.n	8018f9e <__gethex+0x3b8>
 8018f88:	1171      	asrs	r1, r6, #5
 8018f8a:	2201      	movs	r2, #1
 8018f8c:	f006 061f 	and.w	r6, r6, #31
 8018f90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f94:	fa02 f606 	lsl.w	r6, r2, r6
 8018f98:	421e      	tst	r6, r3
 8018f9a:	bf18      	it	ne
 8018f9c:	4617      	movne	r7, r2
 8018f9e:	f047 0720 	orr.w	r7, r7, #32
 8018fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018fa4:	601d      	str	r5, [r3, #0]
 8018fa6:	9b06      	ldr	r3, [sp, #24]
 8018fa8:	601c      	str	r4, [r3, #0]
 8018faa:	e6a4      	b.n	8018cf6 <__gethex+0x110>
 8018fac:	4299      	cmp	r1, r3
 8018fae:	f843 cc04 	str.w	ip, [r3, #-4]
 8018fb2:	d8d8      	bhi.n	8018f66 <__gethex+0x380>
 8018fb4:	68ab      	ldr	r3, [r5, #8]
 8018fb6:	4599      	cmp	r9, r3
 8018fb8:	db12      	blt.n	8018fe0 <__gethex+0x3fa>
 8018fba:	6869      	ldr	r1, [r5, #4]
 8018fbc:	9802      	ldr	r0, [sp, #8]
 8018fbe:	3101      	adds	r1, #1
 8018fc0:	f000 f910 	bl	80191e4 <_Balloc>
 8018fc4:	692a      	ldr	r2, [r5, #16]
 8018fc6:	3202      	adds	r2, #2
 8018fc8:	f105 010c 	add.w	r1, r5, #12
 8018fcc:	4683      	mov	fp, r0
 8018fce:	0092      	lsls	r2, r2, #2
 8018fd0:	300c      	adds	r0, #12
 8018fd2:	f7fd f91f 	bl	8016214 <memcpy>
 8018fd6:	4629      	mov	r1, r5
 8018fd8:	9802      	ldr	r0, [sp, #8]
 8018fda:	f000 f937 	bl	801924c <_Bfree>
 8018fde:	465d      	mov	r5, fp
 8018fe0:	692b      	ldr	r3, [r5, #16]
 8018fe2:	1c5a      	adds	r2, r3, #1
 8018fe4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018fe8:	612a      	str	r2, [r5, #16]
 8018fea:	2201      	movs	r2, #1
 8018fec:	615a      	str	r2, [r3, #20]
 8018fee:	e7c2      	b.n	8018f76 <__gethex+0x390>
 8018ff0:	692a      	ldr	r2, [r5, #16]
 8018ff2:	454a      	cmp	r2, r9
 8018ff4:	dd0b      	ble.n	801900e <__gethex+0x428>
 8018ff6:	2101      	movs	r1, #1
 8018ff8:	4628      	mov	r0, r5
 8018ffa:	f7ff fda5 	bl	8018b48 <rshift>
 8018ffe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019002:	3401      	adds	r4, #1
 8019004:	42a3      	cmp	r3, r4
 8019006:	f6ff aed9 	blt.w	8018dbc <__gethex+0x1d6>
 801900a:	2701      	movs	r7, #1
 801900c:	e7c7      	b.n	8018f9e <__gethex+0x3b8>
 801900e:	f016 061f 	ands.w	r6, r6, #31
 8019012:	d0fa      	beq.n	801900a <__gethex+0x424>
 8019014:	449a      	add	sl, r3
 8019016:	f1c6 0620 	rsb	r6, r6, #32
 801901a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801901e:	f000 f9a5 	bl	801936c <__hi0bits>
 8019022:	42b0      	cmp	r0, r6
 8019024:	dbe7      	blt.n	8018ff6 <__gethex+0x410>
 8019026:	e7f0      	b.n	801900a <__gethex+0x424>

08019028 <L_shift>:
 8019028:	f1c2 0208 	rsb	r2, r2, #8
 801902c:	0092      	lsls	r2, r2, #2
 801902e:	b570      	push	{r4, r5, r6, lr}
 8019030:	f1c2 0620 	rsb	r6, r2, #32
 8019034:	6843      	ldr	r3, [r0, #4]
 8019036:	6804      	ldr	r4, [r0, #0]
 8019038:	fa03 f506 	lsl.w	r5, r3, r6
 801903c:	432c      	orrs	r4, r5
 801903e:	40d3      	lsrs	r3, r2
 8019040:	6004      	str	r4, [r0, #0]
 8019042:	f840 3f04 	str.w	r3, [r0, #4]!
 8019046:	4288      	cmp	r0, r1
 8019048:	d3f4      	bcc.n	8019034 <L_shift+0xc>
 801904a:	bd70      	pop	{r4, r5, r6, pc}

0801904c <__match>:
 801904c:	b530      	push	{r4, r5, lr}
 801904e:	6803      	ldr	r3, [r0, #0]
 8019050:	3301      	adds	r3, #1
 8019052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019056:	b914      	cbnz	r4, 801905e <__match+0x12>
 8019058:	6003      	str	r3, [r0, #0]
 801905a:	2001      	movs	r0, #1
 801905c:	bd30      	pop	{r4, r5, pc}
 801905e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019066:	2d19      	cmp	r5, #25
 8019068:	bf98      	it	ls
 801906a:	3220      	addls	r2, #32
 801906c:	42a2      	cmp	r2, r4
 801906e:	d0f0      	beq.n	8019052 <__match+0x6>
 8019070:	2000      	movs	r0, #0
 8019072:	e7f3      	b.n	801905c <__match+0x10>

08019074 <__hexnan>:
 8019074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019078:	680b      	ldr	r3, [r1, #0]
 801907a:	6801      	ldr	r1, [r0, #0]
 801907c:	115f      	asrs	r7, r3, #5
 801907e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019082:	f013 031f 	ands.w	r3, r3, #31
 8019086:	b087      	sub	sp, #28
 8019088:	bf18      	it	ne
 801908a:	3704      	addne	r7, #4
 801908c:	2500      	movs	r5, #0
 801908e:	1f3e      	subs	r6, r7, #4
 8019090:	4682      	mov	sl, r0
 8019092:	4690      	mov	r8, r2
 8019094:	9301      	str	r3, [sp, #4]
 8019096:	f847 5c04 	str.w	r5, [r7, #-4]
 801909a:	46b1      	mov	r9, r6
 801909c:	4634      	mov	r4, r6
 801909e:	9502      	str	r5, [sp, #8]
 80190a0:	46ab      	mov	fp, r5
 80190a2:	784a      	ldrb	r2, [r1, #1]
 80190a4:	1c4b      	adds	r3, r1, #1
 80190a6:	9303      	str	r3, [sp, #12]
 80190a8:	b342      	cbz	r2, 80190fc <__hexnan+0x88>
 80190aa:	4610      	mov	r0, r2
 80190ac:	9105      	str	r1, [sp, #20]
 80190ae:	9204      	str	r2, [sp, #16]
 80190b0:	f7ff fd84 	bl	8018bbc <__hexdig_fun>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d143      	bne.n	8019140 <__hexnan+0xcc>
 80190b8:	9a04      	ldr	r2, [sp, #16]
 80190ba:	9905      	ldr	r1, [sp, #20]
 80190bc:	2a20      	cmp	r2, #32
 80190be:	d818      	bhi.n	80190f2 <__hexnan+0x7e>
 80190c0:	9b02      	ldr	r3, [sp, #8]
 80190c2:	459b      	cmp	fp, r3
 80190c4:	dd13      	ble.n	80190ee <__hexnan+0x7a>
 80190c6:	454c      	cmp	r4, r9
 80190c8:	d206      	bcs.n	80190d8 <__hexnan+0x64>
 80190ca:	2d07      	cmp	r5, #7
 80190cc:	dc04      	bgt.n	80190d8 <__hexnan+0x64>
 80190ce:	462a      	mov	r2, r5
 80190d0:	4649      	mov	r1, r9
 80190d2:	4620      	mov	r0, r4
 80190d4:	f7ff ffa8 	bl	8019028 <L_shift>
 80190d8:	4544      	cmp	r4, r8
 80190da:	d944      	bls.n	8019166 <__hexnan+0xf2>
 80190dc:	2300      	movs	r3, #0
 80190de:	f1a4 0904 	sub.w	r9, r4, #4
 80190e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80190e6:	f8cd b008 	str.w	fp, [sp, #8]
 80190ea:	464c      	mov	r4, r9
 80190ec:	461d      	mov	r5, r3
 80190ee:	9903      	ldr	r1, [sp, #12]
 80190f0:	e7d7      	b.n	80190a2 <__hexnan+0x2e>
 80190f2:	2a29      	cmp	r2, #41	; 0x29
 80190f4:	d14a      	bne.n	801918c <__hexnan+0x118>
 80190f6:	3102      	adds	r1, #2
 80190f8:	f8ca 1000 	str.w	r1, [sl]
 80190fc:	f1bb 0f00 	cmp.w	fp, #0
 8019100:	d044      	beq.n	801918c <__hexnan+0x118>
 8019102:	454c      	cmp	r4, r9
 8019104:	d206      	bcs.n	8019114 <__hexnan+0xa0>
 8019106:	2d07      	cmp	r5, #7
 8019108:	dc04      	bgt.n	8019114 <__hexnan+0xa0>
 801910a:	462a      	mov	r2, r5
 801910c:	4649      	mov	r1, r9
 801910e:	4620      	mov	r0, r4
 8019110:	f7ff ff8a 	bl	8019028 <L_shift>
 8019114:	4544      	cmp	r4, r8
 8019116:	d928      	bls.n	801916a <__hexnan+0xf6>
 8019118:	4643      	mov	r3, r8
 801911a:	f854 2b04 	ldr.w	r2, [r4], #4
 801911e:	f843 2b04 	str.w	r2, [r3], #4
 8019122:	42a6      	cmp	r6, r4
 8019124:	d2f9      	bcs.n	801911a <__hexnan+0xa6>
 8019126:	2200      	movs	r2, #0
 8019128:	f843 2b04 	str.w	r2, [r3], #4
 801912c:	429e      	cmp	r6, r3
 801912e:	d2fb      	bcs.n	8019128 <__hexnan+0xb4>
 8019130:	6833      	ldr	r3, [r6, #0]
 8019132:	b91b      	cbnz	r3, 801913c <__hexnan+0xc8>
 8019134:	4546      	cmp	r6, r8
 8019136:	d127      	bne.n	8019188 <__hexnan+0x114>
 8019138:	2301      	movs	r3, #1
 801913a:	6033      	str	r3, [r6, #0]
 801913c:	2005      	movs	r0, #5
 801913e:	e026      	b.n	801918e <__hexnan+0x11a>
 8019140:	3501      	adds	r5, #1
 8019142:	2d08      	cmp	r5, #8
 8019144:	f10b 0b01 	add.w	fp, fp, #1
 8019148:	dd06      	ble.n	8019158 <__hexnan+0xe4>
 801914a:	4544      	cmp	r4, r8
 801914c:	d9cf      	bls.n	80190ee <__hexnan+0x7a>
 801914e:	2300      	movs	r3, #0
 8019150:	f844 3c04 	str.w	r3, [r4, #-4]
 8019154:	2501      	movs	r5, #1
 8019156:	3c04      	subs	r4, #4
 8019158:	6822      	ldr	r2, [r4, #0]
 801915a:	f000 000f 	and.w	r0, r0, #15
 801915e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019162:	6020      	str	r0, [r4, #0]
 8019164:	e7c3      	b.n	80190ee <__hexnan+0x7a>
 8019166:	2508      	movs	r5, #8
 8019168:	e7c1      	b.n	80190ee <__hexnan+0x7a>
 801916a:	9b01      	ldr	r3, [sp, #4]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d0df      	beq.n	8019130 <__hexnan+0xbc>
 8019170:	f04f 32ff 	mov.w	r2, #4294967295
 8019174:	f1c3 0320 	rsb	r3, r3, #32
 8019178:	fa22 f303 	lsr.w	r3, r2, r3
 801917c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019180:	401a      	ands	r2, r3
 8019182:	f847 2c04 	str.w	r2, [r7, #-4]
 8019186:	e7d3      	b.n	8019130 <__hexnan+0xbc>
 8019188:	3e04      	subs	r6, #4
 801918a:	e7d1      	b.n	8019130 <__hexnan+0xbc>
 801918c:	2004      	movs	r0, #4
 801918e:	b007      	add	sp, #28
 8019190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019194 <__locale_ctype_ptr_l>:
 8019194:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019198:	4770      	bx	lr

0801919a <__localeconv_l>:
 801919a:	30f0      	adds	r0, #240	; 0xf0
 801919c:	4770      	bx	lr
	...

080191a0 <_localeconv_r>:
 80191a0:	4b04      	ldr	r3, [pc, #16]	; (80191b4 <_localeconv_r+0x14>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	6a18      	ldr	r0, [r3, #32]
 80191a6:	4b04      	ldr	r3, [pc, #16]	; (80191b8 <_localeconv_r+0x18>)
 80191a8:	2800      	cmp	r0, #0
 80191aa:	bf08      	it	eq
 80191ac:	4618      	moveq	r0, r3
 80191ae:	30f0      	adds	r0, #240	; 0xf0
 80191b0:	4770      	bx	lr
 80191b2:	bf00      	nop
 80191b4:	20000198 	.word	0x20000198
 80191b8:	200001fc 	.word	0x200001fc

080191bc <__ascii_mbtowc>:
 80191bc:	b082      	sub	sp, #8
 80191be:	b901      	cbnz	r1, 80191c2 <__ascii_mbtowc+0x6>
 80191c0:	a901      	add	r1, sp, #4
 80191c2:	b142      	cbz	r2, 80191d6 <__ascii_mbtowc+0x1a>
 80191c4:	b14b      	cbz	r3, 80191da <__ascii_mbtowc+0x1e>
 80191c6:	7813      	ldrb	r3, [r2, #0]
 80191c8:	600b      	str	r3, [r1, #0]
 80191ca:	7812      	ldrb	r2, [r2, #0]
 80191cc:	1c10      	adds	r0, r2, #0
 80191ce:	bf18      	it	ne
 80191d0:	2001      	movne	r0, #1
 80191d2:	b002      	add	sp, #8
 80191d4:	4770      	bx	lr
 80191d6:	4610      	mov	r0, r2
 80191d8:	e7fb      	b.n	80191d2 <__ascii_mbtowc+0x16>
 80191da:	f06f 0001 	mvn.w	r0, #1
 80191de:	e7f8      	b.n	80191d2 <__ascii_mbtowc+0x16>

080191e0 <__malloc_lock>:
 80191e0:	4770      	bx	lr

080191e2 <__malloc_unlock>:
 80191e2:	4770      	bx	lr

080191e4 <_Balloc>:
 80191e4:	b570      	push	{r4, r5, r6, lr}
 80191e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80191e8:	4604      	mov	r4, r0
 80191ea:	460e      	mov	r6, r1
 80191ec:	b93d      	cbnz	r5, 80191fe <_Balloc+0x1a>
 80191ee:	2010      	movs	r0, #16
 80191f0:	f7fd f800 	bl	80161f4 <malloc>
 80191f4:	6260      	str	r0, [r4, #36]	; 0x24
 80191f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80191fa:	6005      	str	r5, [r0, #0]
 80191fc:	60c5      	str	r5, [r0, #12]
 80191fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019200:	68eb      	ldr	r3, [r5, #12]
 8019202:	b183      	cbz	r3, 8019226 <_Balloc+0x42>
 8019204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019206:	68db      	ldr	r3, [r3, #12]
 8019208:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801920c:	b9b8      	cbnz	r0, 801923e <_Balloc+0x5a>
 801920e:	2101      	movs	r1, #1
 8019210:	fa01 f506 	lsl.w	r5, r1, r6
 8019214:	1d6a      	adds	r2, r5, #5
 8019216:	0092      	lsls	r2, r2, #2
 8019218:	4620      	mov	r0, r4
 801921a:	f000 fbe2 	bl	80199e2 <_calloc_r>
 801921e:	b160      	cbz	r0, 801923a <_Balloc+0x56>
 8019220:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019224:	e00e      	b.n	8019244 <_Balloc+0x60>
 8019226:	2221      	movs	r2, #33	; 0x21
 8019228:	2104      	movs	r1, #4
 801922a:	4620      	mov	r0, r4
 801922c:	f000 fbd9 	bl	80199e2 <_calloc_r>
 8019230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019232:	60e8      	str	r0, [r5, #12]
 8019234:	68db      	ldr	r3, [r3, #12]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d1e4      	bne.n	8019204 <_Balloc+0x20>
 801923a:	2000      	movs	r0, #0
 801923c:	bd70      	pop	{r4, r5, r6, pc}
 801923e:	6802      	ldr	r2, [r0, #0]
 8019240:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019244:	2300      	movs	r3, #0
 8019246:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801924a:	e7f7      	b.n	801923c <_Balloc+0x58>

0801924c <_Bfree>:
 801924c:	b570      	push	{r4, r5, r6, lr}
 801924e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019250:	4606      	mov	r6, r0
 8019252:	460d      	mov	r5, r1
 8019254:	b93c      	cbnz	r4, 8019266 <_Bfree+0x1a>
 8019256:	2010      	movs	r0, #16
 8019258:	f7fc ffcc 	bl	80161f4 <malloc>
 801925c:	6270      	str	r0, [r6, #36]	; 0x24
 801925e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019262:	6004      	str	r4, [r0, #0]
 8019264:	60c4      	str	r4, [r0, #12]
 8019266:	b13d      	cbz	r5, 8019278 <_Bfree+0x2c>
 8019268:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801926a:	686a      	ldr	r2, [r5, #4]
 801926c:	68db      	ldr	r3, [r3, #12]
 801926e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019272:	6029      	str	r1, [r5, #0]
 8019274:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019278:	bd70      	pop	{r4, r5, r6, pc}

0801927a <__multadd>:
 801927a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801927e:	690d      	ldr	r5, [r1, #16]
 8019280:	461f      	mov	r7, r3
 8019282:	4606      	mov	r6, r0
 8019284:	460c      	mov	r4, r1
 8019286:	f101 0c14 	add.w	ip, r1, #20
 801928a:	2300      	movs	r3, #0
 801928c:	f8dc 0000 	ldr.w	r0, [ip]
 8019290:	b281      	uxth	r1, r0
 8019292:	fb02 7101 	mla	r1, r2, r1, r7
 8019296:	0c0f      	lsrs	r7, r1, #16
 8019298:	0c00      	lsrs	r0, r0, #16
 801929a:	fb02 7000 	mla	r0, r2, r0, r7
 801929e:	b289      	uxth	r1, r1
 80192a0:	3301      	adds	r3, #1
 80192a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80192a6:	429d      	cmp	r5, r3
 80192a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80192ac:	f84c 1b04 	str.w	r1, [ip], #4
 80192b0:	dcec      	bgt.n	801928c <__multadd+0x12>
 80192b2:	b1d7      	cbz	r7, 80192ea <__multadd+0x70>
 80192b4:	68a3      	ldr	r3, [r4, #8]
 80192b6:	42ab      	cmp	r3, r5
 80192b8:	dc12      	bgt.n	80192e0 <__multadd+0x66>
 80192ba:	6861      	ldr	r1, [r4, #4]
 80192bc:	4630      	mov	r0, r6
 80192be:	3101      	adds	r1, #1
 80192c0:	f7ff ff90 	bl	80191e4 <_Balloc>
 80192c4:	6922      	ldr	r2, [r4, #16]
 80192c6:	3202      	adds	r2, #2
 80192c8:	f104 010c 	add.w	r1, r4, #12
 80192cc:	4680      	mov	r8, r0
 80192ce:	0092      	lsls	r2, r2, #2
 80192d0:	300c      	adds	r0, #12
 80192d2:	f7fc ff9f 	bl	8016214 <memcpy>
 80192d6:	4621      	mov	r1, r4
 80192d8:	4630      	mov	r0, r6
 80192da:	f7ff ffb7 	bl	801924c <_Bfree>
 80192de:	4644      	mov	r4, r8
 80192e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80192e4:	3501      	adds	r5, #1
 80192e6:	615f      	str	r7, [r3, #20]
 80192e8:	6125      	str	r5, [r4, #16]
 80192ea:	4620      	mov	r0, r4
 80192ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192f0 <__s2b>:
 80192f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192f4:	460c      	mov	r4, r1
 80192f6:	4615      	mov	r5, r2
 80192f8:	461f      	mov	r7, r3
 80192fa:	2209      	movs	r2, #9
 80192fc:	3308      	adds	r3, #8
 80192fe:	4606      	mov	r6, r0
 8019300:	fb93 f3f2 	sdiv	r3, r3, r2
 8019304:	2100      	movs	r1, #0
 8019306:	2201      	movs	r2, #1
 8019308:	429a      	cmp	r2, r3
 801930a:	db20      	blt.n	801934e <__s2b+0x5e>
 801930c:	4630      	mov	r0, r6
 801930e:	f7ff ff69 	bl	80191e4 <_Balloc>
 8019312:	9b08      	ldr	r3, [sp, #32]
 8019314:	6143      	str	r3, [r0, #20]
 8019316:	2d09      	cmp	r5, #9
 8019318:	f04f 0301 	mov.w	r3, #1
 801931c:	6103      	str	r3, [r0, #16]
 801931e:	dd19      	ble.n	8019354 <__s2b+0x64>
 8019320:	f104 0809 	add.w	r8, r4, #9
 8019324:	46c1      	mov	r9, r8
 8019326:	442c      	add	r4, r5
 8019328:	f819 3b01 	ldrb.w	r3, [r9], #1
 801932c:	4601      	mov	r1, r0
 801932e:	3b30      	subs	r3, #48	; 0x30
 8019330:	220a      	movs	r2, #10
 8019332:	4630      	mov	r0, r6
 8019334:	f7ff ffa1 	bl	801927a <__multadd>
 8019338:	45a1      	cmp	r9, r4
 801933a:	d1f5      	bne.n	8019328 <__s2b+0x38>
 801933c:	eb08 0405 	add.w	r4, r8, r5
 8019340:	3c08      	subs	r4, #8
 8019342:	1b2d      	subs	r5, r5, r4
 8019344:	1963      	adds	r3, r4, r5
 8019346:	42bb      	cmp	r3, r7
 8019348:	db07      	blt.n	801935a <__s2b+0x6a>
 801934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801934e:	0052      	lsls	r2, r2, #1
 8019350:	3101      	adds	r1, #1
 8019352:	e7d9      	b.n	8019308 <__s2b+0x18>
 8019354:	340a      	adds	r4, #10
 8019356:	2509      	movs	r5, #9
 8019358:	e7f3      	b.n	8019342 <__s2b+0x52>
 801935a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801935e:	4601      	mov	r1, r0
 8019360:	3b30      	subs	r3, #48	; 0x30
 8019362:	220a      	movs	r2, #10
 8019364:	4630      	mov	r0, r6
 8019366:	f7ff ff88 	bl	801927a <__multadd>
 801936a:	e7eb      	b.n	8019344 <__s2b+0x54>

0801936c <__hi0bits>:
 801936c:	0c02      	lsrs	r2, r0, #16
 801936e:	0412      	lsls	r2, r2, #16
 8019370:	4603      	mov	r3, r0
 8019372:	b9b2      	cbnz	r2, 80193a2 <__hi0bits+0x36>
 8019374:	0403      	lsls	r3, r0, #16
 8019376:	2010      	movs	r0, #16
 8019378:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801937c:	bf04      	itt	eq
 801937e:	021b      	lsleq	r3, r3, #8
 8019380:	3008      	addeq	r0, #8
 8019382:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019386:	bf04      	itt	eq
 8019388:	011b      	lsleq	r3, r3, #4
 801938a:	3004      	addeq	r0, #4
 801938c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019390:	bf04      	itt	eq
 8019392:	009b      	lsleq	r3, r3, #2
 8019394:	3002      	addeq	r0, #2
 8019396:	2b00      	cmp	r3, #0
 8019398:	db06      	blt.n	80193a8 <__hi0bits+0x3c>
 801939a:	005b      	lsls	r3, r3, #1
 801939c:	d503      	bpl.n	80193a6 <__hi0bits+0x3a>
 801939e:	3001      	adds	r0, #1
 80193a0:	4770      	bx	lr
 80193a2:	2000      	movs	r0, #0
 80193a4:	e7e8      	b.n	8019378 <__hi0bits+0xc>
 80193a6:	2020      	movs	r0, #32
 80193a8:	4770      	bx	lr

080193aa <__lo0bits>:
 80193aa:	6803      	ldr	r3, [r0, #0]
 80193ac:	f013 0207 	ands.w	r2, r3, #7
 80193b0:	4601      	mov	r1, r0
 80193b2:	d00b      	beq.n	80193cc <__lo0bits+0x22>
 80193b4:	07da      	lsls	r2, r3, #31
 80193b6:	d423      	bmi.n	8019400 <__lo0bits+0x56>
 80193b8:	0798      	lsls	r0, r3, #30
 80193ba:	bf49      	itett	mi
 80193bc:	085b      	lsrmi	r3, r3, #1
 80193be:	089b      	lsrpl	r3, r3, #2
 80193c0:	2001      	movmi	r0, #1
 80193c2:	600b      	strmi	r3, [r1, #0]
 80193c4:	bf5c      	itt	pl
 80193c6:	600b      	strpl	r3, [r1, #0]
 80193c8:	2002      	movpl	r0, #2
 80193ca:	4770      	bx	lr
 80193cc:	b298      	uxth	r0, r3
 80193ce:	b9a8      	cbnz	r0, 80193fc <__lo0bits+0x52>
 80193d0:	0c1b      	lsrs	r3, r3, #16
 80193d2:	2010      	movs	r0, #16
 80193d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80193d8:	bf04      	itt	eq
 80193da:	0a1b      	lsreq	r3, r3, #8
 80193dc:	3008      	addeq	r0, #8
 80193de:	071a      	lsls	r2, r3, #28
 80193e0:	bf04      	itt	eq
 80193e2:	091b      	lsreq	r3, r3, #4
 80193e4:	3004      	addeq	r0, #4
 80193e6:	079a      	lsls	r2, r3, #30
 80193e8:	bf04      	itt	eq
 80193ea:	089b      	lsreq	r3, r3, #2
 80193ec:	3002      	addeq	r0, #2
 80193ee:	07da      	lsls	r2, r3, #31
 80193f0:	d402      	bmi.n	80193f8 <__lo0bits+0x4e>
 80193f2:	085b      	lsrs	r3, r3, #1
 80193f4:	d006      	beq.n	8019404 <__lo0bits+0x5a>
 80193f6:	3001      	adds	r0, #1
 80193f8:	600b      	str	r3, [r1, #0]
 80193fa:	4770      	bx	lr
 80193fc:	4610      	mov	r0, r2
 80193fe:	e7e9      	b.n	80193d4 <__lo0bits+0x2a>
 8019400:	2000      	movs	r0, #0
 8019402:	4770      	bx	lr
 8019404:	2020      	movs	r0, #32
 8019406:	4770      	bx	lr

08019408 <__i2b>:
 8019408:	b510      	push	{r4, lr}
 801940a:	460c      	mov	r4, r1
 801940c:	2101      	movs	r1, #1
 801940e:	f7ff fee9 	bl	80191e4 <_Balloc>
 8019412:	2201      	movs	r2, #1
 8019414:	6144      	str	r4, [r0, #20]
 8019416:	6102      	str	r2, [r0, #16]
 8019418:	bd10      	pop	{r4, pc}

0801941a <__multiply>:
 801941a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941e:	4614      	mov	r4, r2
 8019420:	690a      	ldr	r2, [r1, #16]
 8019422:	6923      	ldr	r3, [r4, #16]
 8019424:	429a      	cmp	r2, r3
 8019426:	bfb8      	it	lt
 8019428:	460b      	movlt	r3, r1
 801942a:	4688      	mov	r8, r1
 801942c:	bfbc      	itt	lt
 801942e:	46a0      	movlt	r8, r4
 8019430:	461c      	movlt	r4, r3
 8019432:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019436:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801943a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801943e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019442:	eb07 0609 	add.w	r6, r7, r9
 8019446:	42b3      	cmp	r3, r6
 8019448:	bfb8      	it	lt
 801944a:	3101      	addlt	r1, #1
 801944c:	f7ff feca 	bl	80191e4 <_Balloc>
 8019450:	f100 0514 	add.w	r5, r0, #20
 8019454:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019458:	462b      	mov	r3, r5
 801945a:	2200      	movs	r2, #0
 801945c:	4573      	cmp	r3, lr
 801945e:	d316      	bcc.n	801948e <__multiply+0x74>
 8019460:	f104 0214 	add.w	r2, r4, #20
 8019464:	f108 0114 	add.w	r1, r8, #20
 8019468:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801946c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019470:	9300      	str	r3, [sp, #0]
 8019472:	9b00      	ldr	r3, [sp, #0]
 8019474:	9201      	str	r2, [sp, #4]
 8019476:	4293      	cmp	r3, r2
 8019478:	d80c      	bhi.n	8019494 <__multiply+0x7a>
 801947a:	2e00      	cmp	r6, #0
 801947c:	dd03      	ble.n	8019486 <__multiply+0x6c>
 801947e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019482:	2b00      	cmp	r3, #0
 8019484:	d05d      	beq.n	8019542 <__multiply+0x128>
 8019486:	6106      	str	r6, [r0, #16]
 8019488:	b003      	add	sp, #12
 801948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948e:	f843 2b04 	str.w	r2, [r3], #4
 8019492:	e7e3      	b.n	801945c <__multiply+0x42>
 8019494:	f8b2 b000 	ldrh.w	fp, [r2]
 8019498:	f1bb 0f00 	cmp.w	fp, #0
 801949c:	d023      	beq.n	80194e6 <__multiply+0xcc>
 801949e:	4689      	mov	r9, r1
 80194a0:	46ac      	mov	ip, r5
 80194a2:	f04f 0800 	mov.w	r8, #0
 80194a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80194aa:	f8dc a000 	ldr.w	sl, [ip]
 80194ae:	b2a3      	uxth	r3, r4
 80194b0:	fa1f fa8a 	uxth.w	sl, sl
 80194b4:	fb0b a303 	mla	r3, fp, r3, sl
 80194b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80194bc:	f8dc 4000 	ldr.w	r4, [ip]
 80194c0:	4443      	add	r3, r8
 80194c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80194c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80194ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80194ce:	46e2      	mov	sl, ip
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80194d6:	454f      	cmp	r7, r9
 80194d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80194dc:	f84a 3b04 	str.w	r3, [sl], #4
 80194e0:	d82b      	bhi.n	801953a <__multiply+0x120>
 80194e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80194e6:	9b01      	ldr	r3, [sp, #4]
 80194e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80194ec:	3204      	adds	r2, #4
 80194ee:	f1ba 0f00 	cmp.w	sl, #0
 80194f2:	d020      	beq.n	8019536 <__multiply+0x11c>
 80194f4:	682b      	ldr	r3, [r5, #0]
 80194f6:	4689      	mov	r9, r1
 80194f8:	46a8      	mov	r8, r5
 80194fa:	f04f 0b00 	mov.w	fp, #0
 80194fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8019502:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019506:	fb0a 440c 	mla	r4, sl, ip, r4
 801950a:	445c      	add	r4, fp
 801950c:	46c4      	mov	ip, r8
 801950e:	b29b      	uxth	r3, r3
 8019510:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019514:	f84c 3b04 	str.w	r3, [ip], #4
 8019518:	f859 3b04 	ldr.w	r3, [r9], #4
 801951c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019520:	0c1b      	lsrs	r3, r3, #16
 8019522:	fb0a b303 	mla	r3, sl, r3, fp
 8019526:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801952a:	454f      	cmp	r7, r9
 801952c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019530:	d805      	bhi.n	801953e <__multiply+0x124>
 8019532:	f8c8 3004 	str.w	r3, [r8, #4]
 8019536:	3504      	adds	r5, #4
 8019538:	e79b      	b.n	8019472 <__multiply+0x58>
 801953a:	46d4      	mov	ip, sl
 801953c:	e7b3      	b.n	80194a6 <__multiply+0x8c>
 801953e:	46e0      	mov	r8, ip
 8019540:	e7dd      	b.n	80194fe <__multiply+0xe4>
 8019542:	3e01      	subs	r6, #1
 8019544:	e799      	b.n	801947a <__multiply+0x60>
	...

08019548 <__pow5mult>:
 8019548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801954c:	4615      	mov	r5, r2
 801954e:	f012 0203 	ands.w	r2, r2, #3
 8019552:	4606      	mov	r6, r0
 8019554:	460f      	mov	r7, r1
 8019556:	d007      	beq.n	8019568 <__pow5mult+0x20>
 8019558:	3a01      	subs	r2, #1
 801955a:	4c21      	ldr	r4, [pc, #132]	; (80195e0 <__pow5mult+0x98>)
 801955c:	2300      	movs	r3, #0
 801955e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019562:	f7ff fe8a 	bl	801927a <__multadd>
 8019566:	4607      	mov	r7, r0
 8019568:	10ad      	asrs	r5, r5, #2
 801956a:	d035      	beq.n	80195d8 <__pow5mult+0x90>
 801956c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801956e:	b93c      	cbnz	r4, 8019580 <__pow5mult+0x38>
 8019570:	2010      	movs	r0, #16
 8019572:	f7fc fe3f 	bl	80161f4 <malloc>
 8019576:	6270      	str	r0, [r6, #36]	; 0x24
 8019578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801957c:	6004      	str	r4, [r0, #0]
 801957e:	60c4      	str	r4, [r0, #12]
 8019580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019588:	b94c      	cbnz	r4, 801959e <__pow5mult+0x56>
 801958a:	f240 2171 	movw	r1, #625	; 0x271
 801958e:	4630      	mov	r0, r6
 8019590:	f7ff ff3a 	bl	8019408 <__i2b>
 8019594:	2300      	movs	r3, #0
 8019596:	f8c8 0008 	str.w	r0, [r8, #8]
 801959a:	4604      	mov	r4, r0
 801959c:	6003      	str	r3, [r0, #0]
 801959e:	f04f 0800 	mov.w	r8, #0
 80195a2:	07eb      	lsls	r3, r5, #31
 80195a4:	d50a      	bpl.n	80195bc <__pow5mult+0x74>
 80195a6:	4639      	mov	r1, r7
 80195a8:	4622      	mov	r2, r4
 80195aa:	4630      	mov	r0, r6
 80195ac:	f7ff ff35 	bl	801941a <__multiply>
 80195b0:	4639      	mov	r1, r7
 80195b2:	4681      	mov	r9, r0
 80195b4:	4630      	mov	r0, r6
 80195b6:	f7ff fe49 	bl	801924c <_Bfree>
 80195ba:	464f      	mov	r7, r9
 80195bc:	106d      	asrs	r5, r5, #1
 80195be:	d00b      	beq.n	80195d8 <__pow5mult+0x90>
 80195c0:	6820      	ldr	r0, [r4, #0]
 80195c2:	b938      	cbnz	r0, 80195d4 <__pow5mult+0x8c>
 80195c4:	4622      	mov	r2, r4
 80195c6:	4621      	mov	r1, r4
 80195c8:	4630      	mov	r0, r6
 80195ca:	f7ff ff26 	bl	801941a <__multiply>
 80195ce:	6020      	str	r0, [r4, #0]
 80195d0:	f8c0 8000 	str.w	r8, [r0]
 80195d4:	4604      	mov	r4, r0
 80195d6:	e7e4      	b.n	80195a2 <__pow5mult+0x5a>
 80195d8:	4638      	mov	r0, r7
 80195da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195de:	bf00      	nop
 80195e0:	0801c4f8 	.word	0x0801c4f8

080195e4 <__lshift>:
 80195e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195e8:	460c      	mov	r4, r1
 80195ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80195ee:	6923      	ldr	r3, [r4, #16]
 80195f0:	6849      	ldr	r1, [r1, #4]
 80195f2:	eb0a 0903 	add.w	r9, sl, r3
 80195f6:	68a3      	ldr	r3, [r4, #8]
 80195f8:	4607      	mov	r7, r0
 80195fa:	4616      	mov	r6, r2
 80195fc:	f109 0501 	add.w	r5, r9, #1
 8019600:	42ab      	cmp	r3, r5
 8019602:	db32      	blt.n	801966a <__lshift+0x86>
 8019604:	4638      	mov	r0, r7
 8019606:	f7ff fded 	bl	80191e4 <_Balloc>
 801960a:	2300      	movs	r3, #0
 801960c:	4680      	mov	r8, r0
 801960e:	f100 0114 	add.w	r1, r0, #20
 8019612:	461a      	mov	r2, r3
 8019614:	4553      	cmp	r3, sl
 8019616:	db2b      	blt.n	8019670 <__lshift+0x8c>
 8019618:	6920      	ldr	r0, [r4, #16]
 801961a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801961e:	f104 0314 	add.w	r3, r4, #20
 8019622:	f016 021f 	ands.w	r2, r6, #31
 8019626:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801962a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801962e:	d025      	beq.n	801967c <__lshift+0x98>
 8019630:	f1c2 0e20 	rsb	lr, r2, #32
 8019634:	2000      	movs	r0, #0
 8019636:	681e      	ldr	r6, [r3, #0]
 8019638:	468a      	mov	sl, r1
 801963a:	4096      	lsls	r6, r2
 801963c:	4330      	orrs	r0, r6
 801963e:	f84a 0b04 	str.w	r0, [sl], #4
 8019642:	f853 0b04 	ldr.w	r0, [r3], #4
 8019646:	459c      	cmp	ip, r3
 8019648:	fa20 f00e 	lsr.w	r0, r0, lr
 801964c:	d814      	bhi.n	8019678 <__lshift+0x94>
 801964e:	6048      	str	r0, [r1, #4]
 8019650:	b108      	cbz	r0, 8019656 <__lshift+0x72>
 8019652:	f109 0502 	add.w	r5, r9, #2
 8019656:	3d01      	subs	r5, #1
 8019658:	4638      	mov	r0, r7
 801965a:	f8c8 5010 	str.w	r5, [r8, #16]
 801965e:	4621      	mov	r1, r4
 8019660:	f7ff fdf4 	bl	801924c <_Bfree>
 8019664:	4640      	mov	r0, r8
 8019666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801966a:	3101      	adds	r1, #1
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	e7c7      	b.n	8019600 <__lshift+0x1c>
 8019670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019674:	3301      	adds	r3, #1
 8019676:	e7cd      	b.n	8019614 <__lshift+0x30>
 8019678:	4651      	mov	r1, sl
 801967a:	e7dc      	b.n	8019636 <__lshift+0x52>
 801967c:	3904      	subs	r1, #4
 801967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019682:	f841 2f04 	str.w	r2, [r1, #4]!
 8019686:	459c      	cmp	ip, r3
 8019688:	d8f9      	bhi.n	801967e <__lshift+0x9a>
 801968a:	e7e4      	b.n	8019656 <__lshift+0x72>

0801968c <__mcmp>:
 801968c:	6903      	ldr	r3, [r0, #16]
 801968e:	690a      	ldr	r2, [r1, #16]
 8019690:	1a9b      	subs	r3, r3, r2
 8019692:	b530      	push	{r4, r5, lr}
 8019694:	d10c      	bne.n	80196b0 <__mcmp+0x24>
 8019696:	0092      	lsls	r2, r2, #2
 8019698:	3014      	adds	r0, #20
 801969a:	3114      	adds	r1, #20
 801969c:	1884      	adds	r4, r0, r2
 801969e:	4411      	add	r1, r2
 80196a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80196a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80196a8:	4295      	cmp	r5, r2
 80196aa:	d003      	beq.n	80196b4 <__mcmp+0x28>
 80196ac:	d305      	bcc.n	80196ba <__mcmp+0x2e>
 80196ae:	2301      	movs	r3, #1
 80196b0:	4618      	mov	r0, r3
 80196b2:	bd30      	pop	{r4, r5, pc}
 80196b4:	42a0      	cmp	r0, r4
 80196b6:	d3f3      	bcc.n	80196a0 <__mcmp+0x14>
 80196b8:	e7fa      	b.n	80196b0 <__mcmp+0x24>
 80196ba:	f04f 33ff 	mov.w	r3, #4294967295
 80196be:	e7f7      	b.n	80196b0 <__mcmp+0x24>

080196c0 <__mdiff>:
 80196c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c4:	460d      	mov	r5, r1
 80196c6:	4607      	mov	r7, r0
 80196c8:	4611      	mov	r1, r2
 80196ca:	4628      	mov	r0, r5
 80196cc:	4614      	mov	r4, r2
 80196ce:	f7ff ffdd 	bl	801968c <__mcmp>
 80196d2:	1e06      	subs	r6, r0, #0
 80196d4:	d108      	bne.n	80196e8 <__mdiff+0x28>
 80196d6:	4631      	mov	r1, r6
 80196d8:	4638      	mov	r0, r7
 80196da:	f7ff fd83 	bl	80191e4 <_Balloc>
 80196de:	2301      	movs	r3, #1
 80196e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80196e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196e8:	bfa4      	itt	ge
 80196ea:	4623      	movge	r3, r4
 80196ec:	462c      	movge	r4, r5
 80196ee:	4638      	mov	r0, r7
 80196f0:	6861      	ldr	r1, [r4, #4]
 80196f2:	bfa6      	itte	ge
 80196f4:	461d      	movge	r5, r3
 80196f6:	2600      	movge	r6, #0
 80196f8:	2601      	movlt	r6, #1
 80196fa:	f7ff fd73 	bl	80191e4 <_Balloc>
 80196fe:	692b      	ldr	r3, [r5, #16]
 8019700:	60c6      	str	r6, [r0, #12]
 8019702:	6926      	ldr	r6, [r4, #16]
 8019704:	f105 0914 	add.w	r9, r5, #20
 8019708:	f104 0214 	add.w	r2, r4, #20
 801970c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019710:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019714:	f100 0514 	add.w	r5, r0, #20
 8019718:	f04f 0e00 	mov.w	lr, #0
 801971c:	f852 ab04 	ldr.w	sl, [r2], #4
 8019720:	f859 4b04 	ldr.w	r4, [r9], #4
 8019724:	fa1e f18a 	uxtah	r1, lr, sl
 8019728:	b2a3      	uxth	r3, r4
 801972a:	1ac9      	subs	r1, r1, r3
 801972c:	0c23      	lsrs	r3, r4, #16
 801972e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8019732:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019736:	b289      	uxth	r1, r1
 8019738:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801973c:	45c8      	cmp	r8, r9
 801973e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019742:	4694      	mov	ip, r2
 8019744:	f845 3b04 	str.w	r3, [r5], #4
 8019748:	d8e8      	bhi.n	801971c <__mdiff+0x5c>
 801974a:	45bc      	cmp	ip, r7
 801974c:	d304      	bcc.n	8019758 <__mdiff+0x98>
 801974e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019752:	b183      	cbz	r3, 8019776 <__mdiff+0xb6>
 8019754:	6106      	str	r6, [r0, #16]
 8019756:	e7c5      	b.n	80196e4 <__mdiff+0x24>
 8019758:	f85c 1b04 	ldr.w	r1, [ip], #4
 801975c:	fa1e f381 	uxtah	r3, lr, r1
 8019760:	141a      	asrs	r2, r3, #16
 8019762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019766:	b29b      	uxth	r3, r3
 8019768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801976c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019770:	f845 3b04 	str.w	r3, [r5], #4
 8019774:	e7e9      	b.n	801974a <__mdiff+0x8a>
 8019776:	3e01      	subs	r6, #1
 8019778:	e7e9      	b.n	801974e <__mdiff+0x8e>
	...

0801977c <__ulp>:
 801977c:	4b12      	ldr	r3, [pc, #72]	; (80197c8 <__ulp+0x4c>)
 801977e:	ee10 2a90 	vmov	r2, s1
 8019782:	401a      	ands	r2, r3
 8019784:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019788:	2b00      	cmp	r3, #0
 801978a:	dd04      	ble.n	8019796 <__ulp+0x1a>
 801978c:	2000      	movs	r0, #0
 801978e:	4619      	mov	r1, r3
 8019790:	ec41 0b10 	vmov	d0, r0, r1
 8019794:	4770      	bx	lr
 8019796:	425b      	negs	r3, r3
 8019798:	151b      	asrs	r3, r3, #20
 801979a:	2b13      	cmp	r3, #19
 801979c:	f04f 0000 	mov.w	r0, #0
 80197a0:	f04f 0100 	mov.w	r1, #0
 80197a4:	dc04      	bgt.n	80197b0 <__ulp+0x34>
 80197a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80197aa:	fa42 f103 	asr.w	r1, r2, r3
 80197ae:	e7ef      	b.n	8019790 <__ulp+0x14>
 80197b0:	3b14      	subs	r3, #20
 80197b2:	2b1e      	cmp	r3, #30
 80197b4:	f04f 0201 	mov.w	r2, #1
 80197b8:	bfda      	itte	le
 80197ba:	f1c3 031f 	rsble	r3, r3, #31
 80197be:	fa02 f303 	lslle.w	r3, r2, r3
 80197c2:	4613      	movgt	r3, r2
 80197c4:	4618      	mov	r0, r3
 80197c6:	e7e3      	b.n	8019790 <__ulp+0x14>
 80197c8:	7ff00000 	.word	0x7ff00000

080197cc <__b2d>:
 80197cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ce:	6905      	ldr	r5, [r0, #16]
 80197d0:	f100 0714 	add.w	r7, r0, #20
 80197d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80197d8:	1f2e      	subs	r6, r5, #4
 80197da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80197de:	4620      	mov	r0, r4
 80197e0:	f7ff fdc4 	bl	801936c <__hi0bits>
 80197e4:	f1c0 0320 	rsb	r3, r0, #32
 80197e8:	280a      	cmp	r0, #10
 80197ea:	600b      	str	r3, [r1, #0]
 80197ec:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019864 <__b2d+0x98>
 80197f0:	dc14      	bgt.n	801981c <__b2d+0x50>
 80197f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80197f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80197fa:	42b7      	cmp	r7, r6
 80197fc:	ea41 030c 	orr.w	r3, r1, ip
 8019800:	bf34      	ite	cc
 8019802:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019806:	2100      	movcs	r1, #0
 8019808:	3015      	adds	r0, #21
 801980a:	fa04 f000 	lsl.w	r0, r4, r0
 801980e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019812:	ea40 0201 	orr.w	r2, r0, r1
 8019816:	ec43 2b10 	vmov	d0, r2, r3
 801981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801981c:	42b7      	cmp	r7, r6
 801981e:	bf3a      	itte	cc
 8019820:	f1a5 0608 	subcc.w	r6, r5, #8
 8019824:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019828:	2100      	movcs	r1, #0
 801982a:	380b      	subs	r0, #11
 801982c:	d015      	beq.n	801985a <__b2d+0x8e>
 801982e:	4084      	lsls	r4, r0
 8019830:	f1c0 0520 	rsb	r5, r0, #32
 8019834:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019838:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801983c:	42be      	cmp	r6, r7
 801983e:	fa21 fc05 	lsr.w	ip, r1, r5
 8019842:	ea44 030c 	orr.w	r3, r4, ip
 8019846:	bf8c      	ite	hi
 8019848:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801984c:	2400      	movls	r4, #0
 801984e:	fa01 f000 	lsl.w	r0, r1, r0
 8019852:	40ec      	lsrs	r4, r5
 8019854:	ea40 0204 	orr.w	r2, r0, r4
 8019858:	e7dd      	b.n	8019816 <__b2d+0x4a>
 801985a:	ea44 030c 	orr.w	r3, r4, ip
 801985e:	460a      	mov	r2, r1
 8019860:	e7d9      	b.n	8019816 <__b2d+0x4a>
 8019862:	bf00      	nop
 8019864:	3ff00000 	.word	0x3ff00000

08019868 <__d2b>:
 8019868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801986c:	460e      	mov	r6, r1
 801986e:	2101      	movs	r1, #1
 8019870:	ec59 8b10 	vmov	r8, r9, d0
 8019874:	4615      	mov	r5, r2
 8019876:	f7ff fcb5 	bl	80191e4 <_Balloc>
 801987a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801987e:	4607      	mov	r7, r0
 8019880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019884:	bb34      	cbnz	r4, 80198d4 <__d2b+0x6c>
 8019886:	9301      	str	r3, [sp, #4]
 8019888:	f1b8 0300 	subs.w	r3, r8, #0
 801988c:	d027      	beq.n	80198de <__d2b+0x76>
 801988e:	a802      	add	r0, sp, #8
 8019890:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019894:	f7ff fd89 	bl	80193aa <__lo0bits>
 8019898:	9900      	ldr	r1, [sp, #0]
 801989a:	b1f0      	cbz	r0, 80198da <__d2b+0x72>
 801989c:	9a01      	ldr	r2, [sp, #4]
 801989e:	f1c0 0320 	rsb	r3, r0, #32
 80198a2:	fa02 f303 	lsl.w	r3, r2, r3
 80198a6:	430b      	orrs	r3, r1
 80198a8:	40c2      	lsrs	r2, r0
 80198aa:	617b      	str	r3, [r7, #20]
 80198ac:	9201      	str	r2, [sp, #4]
 80198ae:	9b01      	ldr	r3, [sp, #4]
 80198b0:	61bb      	str	r3, [r7, #24]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	bf14      	ite	ne
 80198b6:	2102      	movne	r1, #2
 80198b8:	2101      	moveq	r1, #1
 80198ba:	6139      	str	r1, [r7, #16]
 80198bc:	b1c4      	cbz	r4, 80198f0 <__d2b+0x88>
 80198be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80198c2:	4404      	add	r4, r0
 80198c4:	6034      	str	r4, [r6, #0]
 80198c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80198ca:	6028      	str	r0, [r5, #0]
 80198cc:	4638      	mov	r0, r7
 80198ce:	b003      	add	sp, #12
 80198d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80198d8:	e7d5      	b.n	8019886 <__d2b+0x1e>
 80198da:	6179      	str	r1, [r7, #20]
 80198dc:	e7e7      	b.n	80198ae <__d2b+0x46>
 80198de:	a801      	add	r0, sp, #4
 80198e0:	f7ff fd63 	bl	80193aa <__lo0bits>
 80198e4:	9b01      	ldr	r3, [sp, #4]
 80198e6:	617b      	str	r3, [r7, #20]
 80198e8:	2101      	movs	r1, #1
 80198ea:	6139      	str	r1, [r7, #16]
 80198ec:	3020      	adds	r0, #32
 80198ee:	e7e5      	b.n	80198bc <__d2b+0x54>
 80198f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80198f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80198f8:	6030      	str	r0, [r6, #0]
 80198fa:	6918      	ldr	r0, [r3, #16]
 80198fc:	f7ff fd36 	bl	801936c <__hi0bits>
 8019900:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019904:	e7e1      	b.n	80198ca <__d2b+0x62>

08019906 <__ratio>:
 8019906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990a:	4688      	mov	r8, r1
 801990c:	4669      	mov	r1, sp
 801990e:	4681      	mov	r9, r0
 8019910:	f7ff ff5c 	bl	80197cc <__b2d>
 8019914:	a901      	add	r1, sp, #4
 8019916:	4640      	mov	r0, r8
 8019918:	ec57 6b10 	vmov	r6, r7, d0
 801991c:	f7ff ff56 	bl	80197cc <__b2d>
 8019920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019924:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019928:	eba3 0c02 	sub.w	ip, r3, r2
 801992c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019930:	1a9b      	subs	r3, r3, r2
 8019932:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019936:	ec5b ab10 	vmov	sl, fp, d0
 801993a:	2b00      	cmp	r3, #0
 801993c:	bfce      	itee	gt
 801993e:	463a      	movgt	r2, r7
 8019940:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019944:	465a      	movle	r2, fp
 8019946:	4659      	mov	r1, fp
 8019948:	463d      	mov	r5, r7
 801994a:	bfd4      	ite	le
 801994c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019950:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019954:	4630      	mov	r0, r6
 8019956:	ee10 2a10 	vmov	r2, s0
 801995a:	460b      	mov	r3, r1
 801995c:	4629      	mov	r1, r5
 801995e:	f7e6 ff85 	bl	800086c <__aeabi_ddiv>
 8019962:	ec41 0b10 	vmov	d0, r0, r1
 8019966:	b003      	add	sp, #12
 8019968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801996c <__copybits>:
 801996c:	3901      	subs	r1, #1
 801996e:	b510      	push	{r4, lr}
 8019970:	1149      	asrs	r1, r1, #5
 8019972:	6914      	ldr	r4, [r2, #16]
 8019974:	3101      	adds	r1, #1
 8019976:	f102 0314 	add.w	r3, r2, #20
 801997a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801997e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019982:	42a3      	cmp	r3, r4
 8019984:	4602      	mov	r2, r0
 8019986:	d303      	bcc.n	8019990 <__copybits+0x24>
 8019988:	2300      	movs	r3, #0
 801998a:	428a      	cmp	r2, r1
 801998c:	d305      	bcc.n	801999a <__copybits+0x2e>
 801998e:	bd10      	pop	{r4, pc}
 8019990:	f853 2b04 	ldr.w	r2, [r3], #4
 8019994:	f840 2b04 	str.w	r2, [r0], #4
 8019998:	e7f3      	b.n	8019982 <__copybits+0x16>
 801999a:	f842 3b04 	str.w	r3, [r2], #4
 801999e:	e7f4      	b.n	801998a <__copybits+0x1e>

080199a0 <__any_on>:
 80199a0:	f100 0214 	add.w	r2, r0, #20
 80199a4:	6900      	ldr	r0, [r0, #16]
 80199a6:	114b      	asrs	r3, r1, #5
 80199a8:	4298      	cmp	r0, r3
 80199aa:	b510      	push	{r4, lr}
 80199ac:	db11      	blt.n	80199d2 <__any_on+0x32>
 80199ae:	dd0a      	ble.n	80199c6 <__any_on+0x26>
 80199b0:	f011 011f 	ands.w	r1, r1, #31
 80199b4:	d007      	beq.n	80199c6 <__any_on+0x26>
 80199b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80199ba:	fa24 f001 	lsr.w	r0, r4, r1
 80199be:	fa00 f101 	lsl.w	r1, r0, r1
 80199c2:	428c      	cmp	r4, r1
 80199c4:	d10b      	bne.n	80199de <__any_on+0x3e>
 80199c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d803      	bhi.n	80199d6 <__any_on+0x36>
 80199ce:	2000      	movs	r0, #0
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	4603      	mov	r3, r0
 80199d4:	e7f7      	b.n	80199c6 <__any_on+0x26>
 80199d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80199da:	2900      	cmp	r1, #0
 80199dc:	d0f5      	beq.n	80199ca <__any_on+0x2a>
 80199de:	2001      	movs	r0, #1
 80199e0:	e7f6      	b.n	80199d0 <__any_on+0x30>

080199e2 <_calloc_r>:
 80199e2:	b538      	push	{r3, r4, r5, lr}
 80199e4:	fb02 f401 	mul.w	r4, r2, r1
 80199e8:	4621      	mov	r1, r4
 80199ea:	f7fc fc75 	bl	80162d8 <_malloc_r>
 80199ee:	4605      	mov	r5, r0
 80199f0:	b118      	cbz	r0, 80199fa <_calloc_r+0x18>
 80199f2:	4622      	mov	r2, r4
 80199f4:	2100      	movs	r1, #0
 80199f6:	f7fc fc18 	bl	801622a <memset>
 80199fa:	4628      	mov	r0, r5
 80199fc:	bd38      	pop	{r3, r4, r5, pc}

080199fe <__ssputs_r>:
 80199fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a02:	688e      	ldr	r6, [r1, #8]
 8019a04:	429e      	cmp	r6, r3
 8019a06:	4682      	mov	sl, r0
 8019a08:	460c      	mov	r4, r1
 8019a0a:	4690      	mov	r8, r2
 8019a0c:	4699      	mov	r9, r3
 8019a0e:	d837      	bhi.n	8019a80 <__ssputs_r+0x82>
 8019a10:	898a      	ldrh	r2, [r1, #12]
 8019a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a16:	d031      	beq.n	8019a7c <__ssputs_r+0x7e>
 8019a18:	6825      	ldr	r5, [r4, #0]
 8019a1a:	6909      	ldr	r1, [r1, #16]
 8019a1c:	1a6f      	subs	r7, r5, r1
 8019a1e:	6965      	ldr	r5, [r4, #20]
 8019a20:	2302      	movs	r3, #2
 8019a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a26:	fb95 f5f3 	sdiv	r5, r5, r3
 8019a2a:	f109 0301 	add.w	r3, r9, #1
 8019a2e:	443b      	add	r3, r7
 8019a30:	429d      	cmp	r5, r3
 8019a32:	bf38      	it	cc
 8019a34:	461d      	movcc	r5, r3
 8019a36:	0553      	lsls	r3, r2, #21
 8019a38:	d530      	bpl.n	8019a9c <__ssputs_r+0x9e>
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	f7fc fc4c 	bl	80162d8 <_malloc_r>
 8019a40:	4606      	mov	r6, r0
 8019a42:	b950      	cbnz	r0, 8019a5a <__ssputs_r+0x5c>
 8019a44:	230c      	movs	r3, #12
 8019a46:	f8ca 3000 	str.w	r3, [sl]
 8019a4a:	89a3      	ldrh	r3, [r4, #12]
 8019a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a50:	81a3      	strh	r3, [r4, #12]
 8019a52:	f04f 30ff 	mov.w	r0, #4294967295
 8019a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a5a:	463a      	mov	r2, r7
 8019a5c:	6921      	ldr	r1, [r4, #16]
 8019a5e:	f7fc fbd9 	bl	8016214 <memcpy>
 8019a62:	89a3      	ldrh	r3, [r4, #12]
 8019a64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a6c:	81a3      	strh	r3, [r4, #12]
 8019a6e:	6126      	str	r6, [r4, #16]
 8019a70:	6165      	str	r5, [r4, #20]
 8019a72:	443e      	add	r6, r7
 8019a74:	1bed      	subs	r5, r5, r7
 8019a76:	6026      	str	r6, [r4, #0]
 8019a78:	60a5      	str	r5, [r4, #8]
 8019a7a:	464e      	mov	r6, r9
 8019a7c:	454e      	cmp	r6, r9
 8019a7e:	d900      	bls.n	8019a82 <__ssputs_r+0x84>
 8019a80:	464e      	mov	r6, r9
 8019a82:	4632      	mov	r2, r6
 8019a84:	4641      	mov	r1, r8
 8019a86:	6820      	ldr	r0, [r4, #0]
 8019a88:	f000 f919 	bl	8019cbe <memmove>
 8019a8c:	68a3      	ldr	r3, [r4, #8]
 8019a8e:	1b9b      	subs	r3, r3, r6
 8019a90:	60a3      	str	r3, [r4, #8]
 8019a92:	6823      	ldr	r3, [r4, #0]
 8019a94:	441e      	add	r6, r3
 8019a96:	6026      	str	r6, [r4, #0]
 8019a98:	2000      	movs	r0, #0
 8019a9a:	e7dc      	b.n	8019a56 <__ssputs_r+0x58>
 8019a9c:	462a      	mov	r2, r5
 8019a9e:	f000 f927 	bl	8019cf0 <_realloc_r>
 8019aa2:	4606      	mov	r6, r0
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	d1e2      	bne.n	8019a6e <__ssputs_r+0x70>
 8019aa8:	6921      	ldr	r1, [r4, #16]
 8019aaa:	4650      	mov	r0, sl
 8019aac:	f7fc fbc6 	bl	801623c <_free_r>
 8019ab0:	e7c8      	b.n	8019a44 <__ssputs_r+0x46>
	...

08019ab4 <_svfiprintf_r>:
 8019ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab8:	461d      	mov	r5, r3
 8019aba:	898b      	ldrh	r3, [r1, #12]
 8019abc:	061f      	lsls	r7, r3, #24
 8019abe:	b09d      	sub	sp, #116	; 0x74
 8019ac0:	4680      	mov	r8, r0
 8019ac2:	460c      	mov	r4, r1
 8019ac4:	4616      	mov	r6, r2
 8019ac6:	d50f      	bpl.n	8019ae8 <_svfiprintf_r+0x34>
 8019ac8:	690b      	ldr	r3, [r1, #16]
 8019aca:	b96b      	cbnz	r3, 8019ae8 <_svfiprintf_r+0x34>
 8019acc:	2140      	movs	r1, #64	; 0x40
 8019ace:	f7fc fc03 	bl	80162d8 <_malloc_r>
 8019ad2:	6020      	str	r0, [r4, #0]
 8019ad4:	6120      	str	r0, [r4, #16]
 8019ad6:	b928      	cbnz	r0, 8019ae4 <_svfiprintf_r+0x30>
 8019ad8:	230c      	movs	r3, #12
 8019ada:	f8c8 3000 	str.w	r3, [r8]
 8019ade:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae2:	e0c8      	b.n	8019c76 <_svfiprintf_r+0x1c2>
 8019ae4:	2340      	movs	r3, #64	; 0x40
 8019ae6:	6163      	str	r3, [r4, #20]
 8019ae8:	2300      	movs	r3, #0
 8019aea:	9309      	str	r3, [sp, #36]	; 0x24
 8019aec:	2320      	movs	r3, #32
 8019aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019af2:	2330      	movs	r3, #48	; 0x30
 8019af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019af8:	9503      	str	r5, [sp, #12]
 8019afa:	f04f 0b01 	mov.w	fp, #1
 8019afe:	4637      	mov	r7, r6
 8019b00:	463d      	mov	r5, r7
 8019b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019b06:	b10b      	cbz	r3, 8019b0c <_svfiprintf_r+0x58>
 8019b08:	2b25      	cmp	r3, #37	; 0x25
 8019b0a:	d13e      	bne.n	8019b8a <_svfiprintf_r+0xd6>
 8019b0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8019b10:	d00b      	beq.n	8019b2a <_svfiprintf_r+0x76>
 8019b12:	4653      	mov	r3, sl
 8019b14:	4632      	mov	r2, r6
 8019b16:	4621      	mov	r1, r4
 8019b18:	4640      	mov	r0, r8
 8019b1a:	f7ff ff70 	bl	80199fe <__ssputs_r>
 8019b1e:	3001      	adds	r0, #1
 8019b20:	f000 80a4 	beq.w	8019c6c <_svfiprintf_r+0x1b8>
 8019b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b26:	4453      	add	r3, sl
 8019b28:	9309      	str	r3, [sp, #36]	; 0x24
 8019b2a:	783b      	ldrb	r3, [r7, #0]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	f000 809d 	beq.w	8019c6c <_svfiprintf_r+0x1b8>
 8019b32:	2300      	movs	r3, #0
 8019b34:	f04f 32ff 	mov.w	r2, #4294967295
 8019b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b3c:	9304      	str	r3, [sp, #16]
 8019b3e:	9307      	str	r3, [sp, #28]
 8019b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b44:	931a      	str	r3, [sp, #104]	; 0x68
 8019b46:	462f      	mov	r7, r5
 8019b48:	2205      	movs	r2, #5
 8019b4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019b4e:	4850      	ldr	r0, [pc, #320]	; (8019c90 <_svfiprintf_r+0x1dc>)
 8019b50:	f7e6 fb56 	bl	8000200 <memchr>
 8019b54:	9b04      	ldr	r3, [sp, #16]
 8019b56:	b9d0      	cbnz	r0, 8019b8e <_svfiprintf_r+0xda>
 8019b58:	06d9      	lsls	r1, r3, #27
 8019b5a:	bf44      	itt	mi
 8019b5c:	2220      	movmi	r2, #32
 8019b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b62:	071a      	lsls	r2, r3, #28
 8019b64:	bf44      	itt	mi
 8019b66:	222b      	movmi	r2, #43	; 0x2b
 8019b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b6c:	782a      	ldrb	r2, [r5, #0]
 8019b6e:	2a2a      	cmp	r2, #42	; 0x2a
 8019b70:	d015      	beq.n	8019b9e <_svfiprintf_r+0xea>
 8019b72:	9a07      	ldr	r2, [sp, #28]
 8019b74:	462f      	mov	r7, r5
 8019b76:	2000      	movs	r0, #0
 8019b78:	250a      	movs	r5, #10
 8019b7a:	4639      	mov	r1, r7
 8019b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b80:	3b30      	subs	r3, #48	; 0x30
 8019b82:	2b09      	cmp	r3, #9
 8019b84:	d94d      	bls.n	8019c22 <_svfiprintf_r+0x16e>
 8019b86:	b1b8      	cbz	r0, 8019bb8 <_svfiprintf_r+0x104>
 8019b88:	e00f      	b.n	8019baa <_svfiprintf_r+0xf6>
 8019b8a:	462f      	mov	r7, r5
 8019b8c:	e7b8      	b.n	8019b00 <_svfiprintf_r+0x4c>
 8019b8e:	4a40      	ldr	r2, [pc, #256]	; (8019c90 <_svfiprintf_r+0x1dc>)
 8019b90:	1a80      	subs	r0, r0, r2
 8019b92:	fa0b f000 	lsl.w	r0, fp, r0
 8019b96:	4318      	orrs	r0, r3
 8019b98:	9004      	str	r0, [sp, #16]
 8019b9a:	463d      	mov	r5, r7
 8019b9c:	e7d3      	b.n	8019b46 <_svfiprintf_r+0x92>
 8019b9e:	9a03      	ldr	r2, [sp, #12]
 8019ba0:	1d11      	adds	r1, r2, #4
 8019ba2:	6812      	ldr	r2, [r2, #0]
 8019ba4:	9103      	str	r1, [sp, #12]
 8019ba6:	2a00      	cmp	r2, #0
 8019ba8:	db01      	blt.n	8019bae <_svfiprintf_r+0xfa>
 8019baa:	9207      	str	r2, [sp, #28]
 8019bac:	e004      	b.n	8019bb8 <_svfiprintf_r+0x104>
 8019bae:	4252      	negs	r2, r2
 8019bb0:	f043 0302 	orr.w	r3, r3, #2
 8019bb4:	9207      	str	r2, [sp, #28]
 8019bb6:	9304      	str	r3, [sp, #16]
 8019bb8:	783b      	ldrb	r3, [r7, #0]
 8019bba:	2b2e      	cmp	r3, #46	; 0x2e
 8019bbc:	d10c      	bne.n	8019bd8 <_svfiprintf_r+0x124>
 8019bbe:	787b      	ldrb	r3, [r7, #1]
 8019bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8019bc2:	d133      	bne.n	8019c2c <_svfiprintf_r+0x178>
 8019bc4:	9b03      	ldr	r3, [sp, #12]
 8019bc6:	1d1a      	adds	r2, r3, #4
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	9203      	str	r2, [sp, #12]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	bfb8      	it	lt
 8019bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bd4:	3702      	adds	r7, #2
 8019bd6:	9305      	str	r3, [sp, #20]
 8019bd8:	4d2e      	ldr	r5, [pc, #184]	; (8019c94 <_svfiprintf_r+0x1e0>)
 8019bda:	7839      	ldrb	r1, [r7, #0]
 8019bdc:	2203      	movs	r2, #3
 8019bde:	4628      	mov	r0, r5
 8019be0:	f7e6 fb0e 	bl	8000200 <memchr>
 8019be4:	b138      	cbz	r0, 8019bf6 <_svfiprintf_r+0x142>
 8019be6:	2340      	movs	r3, #64	; 0x40
 8019be8:	1b40      	subs	r0, r0, r5
 8019bea:	fa03 f000 	lsl.w	r0, r3, r0
 8019bee:	9b04      	ldr	r3, [sp, #16]
 8019bf0:	4303      	orrs	r3, r0
 8019bf2:	3701      	adds	r7, #1
 8019bf4:	9304      	str	r3, [sp, #16]
 8019bf6:	7839      	ldrb	r1, [r7, #0]
 8019bf8:	4827      	ldr	r0, [pc, #156]	; (8019c98 <_svfiprintf_r+0x1e4>)
 8019bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bfe:	2206      	movs	r2, #6
 8019c00:	1c7e      	adds	r6, r7, #1
 8019c02:	f7e6 fafd 	bl	8000200 <memchr>
 8019c06:	2800      	cmp	r0, #0
 8019c08:	d038      	beq.n	8019c7c <_svfiprintf_r+0x1c8>
 8019c0a:	4b24      	ldr	r3, [pc, #144]	; (8019c9c <_svfiprintf_r+0x1e8>)
 8019c0c:	bb13      	cbnz	r3, 8019c54 <_svfiprintf_r+0x1a0>
 8019c0e:	9b03      	ldr	r3, [sp, #12]
 8019c10:	3307      	adds	r3, #7
 8019c12:	f023 0307 	bic.w	r3, r3, #7
 8019c16:	3308      	adds	r3, #8
 8019c18:	9303      	str	r3, [sp, #12]
 8019c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c1c:	444b      	add	r3, r9
 8019c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8019c20:	e76d      	b.n	8019afe <_svfiprintf_r+0x4a>
 8019c22:	fb05 3202 	mla	r2, r5, r2, r3
 8019c26:	2001      	movs	r0, #1
 8019c28:	460f      	mov	r7, r1
 8019c2a:	e7a6      	b.n	8019b7a <_svfiprintf_r+0xc6>
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	3701      	adds	r7, #1
 8019c30:	9305      	str	r3, [sp, #20]
 8019c32:	4619      	mov	r1, r3
 8019c34:	250a      	movs	r5, #10
 8019c36:	4638      	mov	r0, r7
 8019c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c3c:	3a30      	subs	r2, #48	; 0x30
 8019c3e:	2a09      	cmp	r2, #9
 8019c40:	d903      	bls.n	8019c4a <_svfiprintf_r+0x196>
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d0c8      	beq.n	8019bd8 <_svfiprintf_r+0x124>
 8019c46:	9105      	str	r1, [sp, #20]
 8019c48:	e7c6      	b.n	8019bd8 <_svfiprintf_r+0x124>
 8019c4a:	fb05 2101 	mla	r1, r5, r1, r2
 8019c4e:	2301      	movs	r3, #1
 8019c50:	4607      	mov	r7, r0
 8019c52:	e7f0      	b.n	8019c36 <_svfiprintf_r+0x182>
 8019c54:	ab03      	add	r3, sp, #12
 8019c56:	9300      	str	r3, [sp, #0]
 8019c58:	4622      	mov	r2, r4
 8019c5a:	4b11      	ldr	r3, [pc, #68]	; (8019ca0 <_svfiprintf_r+0x1ec>)
 8019c5c:	a904      	add	r1, sp, #16
 8019c5e:	4640      	mov	r0, r8
 8019c60:	f7fc fc28 	bl	80164b4 <_printf_float>
 8019c64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019c68:	4681      	mov	r9, r0
 8019c6a:	d1d6      	bne.n	8019c1a <_svfiprintf_r+0x166>
 8019c6c:	89a3      	ldrh	r3, [r4, #12]
 8019c6e:	065b      	lsls	r3, r3, #25
 8019c70:	f53f af35 	bmi.w	8019ade <_svfiprintf_r+0x2a>
 8019c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c76:	b01d      	add	sp, #116	; 0x74
 8019c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c7c:	ab03      	add	r3, sp, #12
 8019c7e:	9300      	str	r3, [sp, #0]
 8019c80:	4622      	mov	r2, r4
 8019c82:	4b07      	ldr	r3, [pc, #28]	; (8019ca0 <_svfiprintf_r+0x1ec>)
 8019c84:	a904      	add	r1, sp, #16
 8019c86:	4640      	mov	r0, r8
 8019c88:	f7fc feca 	bl	8016a20 <_printf_i>
 8019c8c:	e7ea      	b.n	8019c64 <_svfiprintf_r+0x1b0>
 8019c8e:	bf00      	nop
 8019c90:	0801c504 	.word	0x0801c504
 8019c94:	0801c50a 	.word	0x0801c50a
 8019c98:	0801c50e 	.word	0x0801c50e
 8019c9c:	080164b5 	.word	0x080164b5
 8019ca0:	080199ff 	.word	0x080199ff

08019ca4 <__ascii_wctomb>:
 8019ca4:	b149      	cbz	r1, 8019cba <__ascii_wctomb+0x16>
 8019ca6:	2aff      	cmp	r2, #255	; 0xff
 8019ca8:	bf85      	ittet	hi
 8019caa:	238a      	movhi	r3, #138	; 0x8a
 8019cac:	6003      	strhi	r3, [r0, #0]
 8019cae:	700a      	strbls	r2, [r1, #0]
 8019cb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8019cb4:	bf98      	it	ls
 8019cb6:	2001      	movls	r0, #1
 8019cb8:	4770      	bx	lr
 8019cba:	4608      	mov	r0, r1
 8019cbc:	4770      	bx	lr

08019cbe <memmove>:
 8019cbe:	4288      	cmp	r0, r1
 8019cc0:	b510      	push	{r4, lr}
 8019cc2:	eb01 0302 	add.w	r3, r1, r2
 8019cc6:	d807      	bhi.n	8019cd8 <memmove+0x1a>
 8019cc8:	1e42      	subs	r2, r0, #1
 8019cca:	4299      	cmp	r1, r3
 8019ccc:	d00a      	beq.n	8019ce4 <memmove+0x26>
 8019cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019cd2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019cd6:	e7f8      	b.n	8019cca <memmove+0xc>
 8019cd8:	4283      	cmp	r3, r0
 8019cda:	d9f5      	bls.n	8019cc8 <memmove+0xa>
 8019cdc:	1881      	adds	r1, r0, r2
 8019cde:	1ad2      	subs	r2, r2, r3
 8019ce0:	42d3      	cmn	r3, r2
 8019ce2:	d100      	bne.n	8019ce6 <memmove+0x28>
 8019ce4:	bd10      	pop	{r4, pc}
 8019ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019cea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019cee:	e7f7      	b.n	8019ce0 <memmove+0x22>

08019cf0 <_realloc_r>:
 8019cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cf2:	4607      	mov	r7, r0
 8019cf4:	4614      	mov	r4, r2
 8019cf6:	460e      	mov	r6, r1
 8019cf8:	b921      	cbnz	r1, 8019d04 <_realloc_r+0x14>
 8019cfa:	4611      	mov	r1, r2
 8019cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d00:	f7fc baea 	b.w	80162d8 <_malloc_r>
 8019d04:	b922      	cbnz	r2, 8019d10 <_realloc_r+0x20>
 8019d06:	f7fc fa99 	bl	801623c <_free_r>
 8019d0a:	4625      	mov	r5, r4
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d10:	f000 f814 	bl	8019d3c <_malloc_usable_size_r>
 8019d14:	42a0      	cmp	r0, r4
 8019d16:	d20f      	bcs.n	8019d38 <_realloc_r+0x48>
 8019d18:	4621      	mov	r1, r4
 8019d1a:	4638      	mov	r0, r7
 8019d1c:	f7fc fadc 	bl	80162d8 <_malloc_r>
 8019d20:	4605      	mov	r5, r0
 8019d22:	2800      	cmp	r0, #0
 8019d24:	d0f2      	beq.n	8019d0c <_realloc_r+0x1c>
 8019d26:	4631      	mov	r1, r6
 8019d28:	4622      	mov	r2, r4
 8019d2a:	f7fc fa73 	bl	8016214 <memcpy>
 8019d2e:	4631      	mov	r1, r6
 8019d30:	4638      	mov	r0, r7
 8019d32:	f7fc fa83 	bl	801623c <_free_r>
 8019d36:	e7e9      	b.n	8019d0c <_realloc_r+0x1c>
 8019d38:	4635      	mov	r5, r6
 8019d3a:	e7e7      	b.n	8019d0c <_realloc_r+0x1c>

08019d3c <_malloc_usable_size_r>:
 8019d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d40:	1f18      	subs	r0, r3, #4
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	bfbc      	itt	lt
 8019d46:	580b      	ldrlt	r3, [r1, r0]
 8019d48:	18c0      	addlt	r0, r0, r3
 8019d4a:	4770      	bx	lr

08019d4c <asin>:
 8019d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d4e:	ed2d 8b02 	vpush	{d8}
 8019d52:	4e26      	ldr	r6, [pc, #152]	; (8019dec <asin+0xa0>)
 8019d54:	b08b      	sub	sp, #44	; 0x2c
 8019d56:	ec55 4b10 	vmov	r4, r5, d0
 8019d5a:	f000 fa11 	bl	801a180 <__ieee754_asin>
 8019d5e:	f996 3000 	ldrsb.w	r3, [r6]
 8019d62:	eeb0 8a40 	vmov.f32	s16, s0
 8019d66:	eef0 8a60 	vmov.f32	s17, s1
 8019d6a:	3301      	adds	r3, #1
 8019d6c:	d036      	beq.n	8019ddc <asin+0x90>
 8019d6e:	4622      	mov	r2, r4
 8019d70:	462b      	mov	r3, r5
 8019d72:	4620      	mov	r0, r4
 8019d74:	4629      	mov	r1, r5
 8019d76:	f7e6 fee9 	bl	8000b4c <__aeabi_dcmpun>
 8019d7a:	4607      	mov	r7, r0
 8019d7c:	bb70      	cbnz	r0, 8019ddc <asin+0x90>
 8019d7e:	ec45 4b10 	vmov	d0, r4, r5
 8019d82:	f001 fc51 	bl	801b628 <fabs>
 8019d86:	2200      	movs	r2, #0
 8019d88:	4b19      	ldr	r3, [pc, #100]	; (8019df0 <asin+0xa4>)
 8019d8a:	ec51 0b10 	vmov	r0, r1, d0
 8019d8e:	f7e6 fed3 	bl	8000b38 <__aeabi_dcmpgt>
 8019d92:	b318      	cbz	r0, 8019ddc <asin+0x90>
 8019d94:	2301      	movs	r3, #1
 8019d96:	9300      	str	r3, [sp, #0]
 8019d98:	4816      	ldr	r0, [pc, #88]	; (8019df4 <asin+0xa8>)
 8019d9a:	4b17      	ldr	r3, [pc, #92]	; (8019df8 <asin+0xac>)
 8019d9c:	9301      	str	r3, [sp, #4]
 8019d9e:	9708      	str	r7, [sp, #32]
 8019da0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019da4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019da8:	f001 fc52 	bl	801b650 <nan>
 8019dac:	f996 3000 	ldrsb.w	r3, [r6]
 8019db0:	2b02      	cmp	r3, #2
 8019db2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8019db6:	d104      	bne.n	8019dc2 <asin+0x76>
 8019db8:	f7fc f9f2 	bl	80161a0 <__errno>
 8019dbc:	2321      	movs	r3, #33	; 0x21
 8019dbe:	6003      	str	r3, [r0, #0]
 8019dc0:	e004      	b.n	8019dcc <asin+0x80>
 8019dc2:	4668      	mov	r0, sp
 8019dc4:	f001 fc41 	bl	801b64a <matherr>
 8019dc8:	2800      	cmp	r0, #0
 8019dca:	d0f5      	beq.n	8019db8 <asin+0x6c>
 8019dcc:	9b08      	ldr	r3, [sp, #32]
 8019dce:	b11b      	cbz	r3, 8019dd8 <asin+0x8c>
 8019dd0:	f7fc f9e6 	bl	80161a0 <__errno>
 8019dd4:	9b08      	ldr	r3, [sp, #32]
 8019dd6:	6003      	str	r3, [r0, #0]
 8019dd8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8019de0:	eef0 0a68 	vmov.f32	s1, s17
 8019de4:	b00b      	add	sp, #44	; 0x2c
 8019de6:	ecbd 8b02 	vpop	{d8}
 8019dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dec:	20000368 	.word	0x20000368
 8019df0:	3ff00000 	.word	0x3ff00000
 8019df4:	0801c509 	.word	0x0801c509
 8019df8:	0801c616 	.word	0x0801c616

08019dfc <atan2>:
 8019dfc:	f000 bbd0 	b.w	801a5a0 <__ieee754_atan2>

08019e00 <pow>:
 8019e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e04:	ed2d 8b04 	vpush	{d8-d9}
 8019e08:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801a0dc <pow+0x2dc>
 8019e0c:	b08d      	sub	sp, #52	; 0x34
 8019e0e:	ec57 6b10 	vmov	r6, r7, d0
 8019e12:	ec55 4b11 	vmov	r4, r5, d1
 8019e16:	f000 fca3 	bl	801a760 <__ieee754_pow>
 8019e1a:	f999 3000 	ldrsb.w	r3, [r9]
 8019e1e:	9300      	str	r3, [sp, #0]
 8019e20:	3301      	adds	r3, #1
 8019e22:	eeb0 8a40 	vmov.f32	s16, s0
 8019e26:	eef0 8a60 	vmov.f32	s17, s1
 8019e2a:	46c8      	mov	r8, r9
 8019e2c:	d05f      	beq.n	8019eee <pow+0xee>
 8019e2e:	4622      	mov	r2, r4
 8019e30:	462b      	mov	r3, r5
 8019e32:	4620      	mov	r0, r4
 8019e34:	4629      	mov	r1, r5
 8019e36:	f7e6 fe89 	bl	8000b4c <__aeabi_dcmpun>
 8019e3a:	4683      	mov	fp, r0
 8019e3c:	2800      	cmp	r0, #0
 8019e3e:	d156      	bne.n	8019eee <pow+0xee>
 8019e40:	4632      	mov	r2, r6
 8019e42:	463b      	mov	r3, r7
 8019e44:	4630      	mov	r0, r6
 8019e46:	4639      	mov	r1, r7
 8019e48:	f7e6 fe80 	bl	8000b4c <__aeabi_dcmpun>
 8019e4c:	9001      	str	r0, [sp, #4]
 8019e4e:	b1e8      	cbz	r0, 8019e8c <pow+0x8c>
 8019e50:	2200      	movs	r2, #0
 8019e52:	2300      	movs	r3, #0
 8019e54:	4620      	mov	r0, r4
 8019e56:	4629      	mov	r1, r5
 8019e58:	f7e6 fe46 	bl	8000ae8 <__aeabi_dcmpeq>
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	d046      	beq.n	8019eee <pow+0xee>
 8019e60:	2301      	movs	r3, #1
 8019e62:	9302      	str	r3, [sp, #8]
 8019e64:	4b96      	ldr	r3, [pc, #600]	; (801a0c0 <pow+0x2c0>)
 8019e66:	9303      	str	r3, [sp, #12]
 8019e68:	4b96      	ldr	r3, [pc, #600]	; (801a0c4 <pow+0x2c4>)
 8019e6a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019e6e:	2200      	movs	r2, #0
 8019e70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e74:	9b00      	ldr	r3, [sp, #0]
 8019e76:	2b02      	cmp	r3, #2
 8019e78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019e7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019e80:	d033      	beq.n	8019eea <pow+0xea>
 8019e82:	a802      	add	r0, sp, #8
 8019e84:	f001 fbe1 	bl	801b64a <matherr>
 8019e88:	bb48      	cbnz	r0, 8019ede <pow+0xde>
 8019e8a:	e05d      	b.n	8019f48 <pow+0x148>
 8019e8c:	f04f 0a00 	mov.w	sl, #0
 8019e90:	f04f 0b00 	mov.w	fp, #0
 8019e94:	4652      	mov	r2, sl
 8019e96:	465b      	mov	r3, fp
 8019e98:	4630      	mov	r0, r6
 8019e9a:	4639      	mov	r1, r7
 8019e9c:	f7e6 fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 8019ea0:	ec4b ab19 	vmov	d9, sl, fp
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	d054      	beq.n	8019f52 <pow+0x152>
 8019ea8:	4652      	mov	r2, sl
 8019eaa:	465b      	mov	r3, fp
 8019eac:	4620      	mov	r0, r4
 8019eae:	4629      	mov	r1, r5
 8019eb0:	f7e6 fe1a 	bl	8000ae8 <__aeabi_dcmpeq>
 8019eb4:	4680      	mov	r8, r0
 8019eb6:	b318      	cbz	r0, 8019f00 <pow+0x100>
 8019eb8:	2301      	movs	r3, #1
 8019eba:	9302      	str	r3, [sp, #8]
 8019ebc:	4b80      	ldr	r3, [pc, #512]	; (801a0c0 <pow+0x2c0>)
 8019ebe:	9303      	str	r3, [sp, #12]
 8019ec0:	9b01      	ldr	r3, [sp, #4]
 8019ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ec4:	9b00      	ldr	r3, [sp, #0]
 8019ec6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019eca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019ece:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d0d5      	beq.n	8019e82 <pow+0x82>
 8019ed6:	4b7b      	ldr	r3, [pc, #492]	; (801a0c4 <pow+0x2c4>)
 8019ed8:	2200      	movs	r2, #0
 8019eda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ee0:	b11b      	cbz	r3, 8019eea <pow+0xea>
 8019ee2:	f7fc f95d 	bl	80161a0 <__errno>
 8019ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ee8:	6003      	str	r3, [r0, #0]
 8019eea:	ed9d 8b08 	vldr	d8, [sp, #32]
 8019eee:	eeb0 0a48 	vmov.f32	s0, s16
 8019ef2:	eef0 0a68 	vmov.f32	s1, s17
 8019ef6:	b00d      	add	sp, #52	; 0x34
 8019ef8:	ecbd 8b04 	vpop	{d8-d9}
 8019efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f00:	ec45 4b10 	vmov	d0, r4, r5
 8019f04:	f001 fb99 	bl	801b63a <finite>
 8019f08:	2800      	cmp	r0, #0
 8019f0a:	d0f0      	beq.n	8019eee <pow+0xee>
 8019f0c:	4652      	mov	r2, sl
 8019f0e:	465b      	mov	r3, fp
 8019f10:	4620      	mov	r0, r4
 8019f12:	4629      	mov	r1, r5
 8019f14:	f7e6 fdf2 	bl	8000afc <__aeabi_dcmplt>
 8019f18:	2800      	cmp	r0, #0
 8019f1a:	d0e8      	beq.n	8019eee <pow+0xee>
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	9302      	str	r3, [sp, #8]
 8019f20:	4b67      	ldr	r3, [pc, #412]	; (801a0c0 <pow+0x2c0>)
 8019f22:	9303      	str	r3, [sp, #12]
 8019f24:	f999 3000 	ldrsb.w	r3, [r9]
 8019f28:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8019f2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019f30:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019f34:	b913      	cbnz	r3, 8019f3c <pow+0x13c>
 8019f36:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019f3a:	e7a2      	b.n	8019e82 <pow+0x82>
 8019f3c:	4962      	ldr	r1, [pc, #392]	; (801a0c8 <pow+0x2c8>)
 8019f3e:	2000      	movs	r0, #0
 8019f40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019f44:	2b02      	cmp	r3, #2
 8019f46:	d19c      	bne.n	8019e82 <pow+0x82>
 8019f48:	f7fc f92a 	bl	80161a0 <__errno>
 8019f4c:	2321      	movs	r3, #33	; 0x21
 8019f4e:	6003      	str	r3, [r0, #0]
 8019f50:	e7c5      	b.n	8019ede <pow+0xde>
 8019f52:	eeb0 0a48 	vmov.f32	s0, s16
 8019f56:	eef0 0a68 	vmov.f32	s1, s17
 8019f5a:	f001 fb6e 	bl	801b63a <finite>
 8019f5e:	9000      	str	r0, [sp, #0]
 8019f60:	2800      	cmp	r0, #0
 8019f62:	f040 8081 	bne.w	801a068 <pow+0x268>
 8019f66:	ec47 6b10 	vmov	d0, r6, r7
 8019f6a:	f001 fb66 	bl	801b63a <finite>
 8019f6e:	2800      	cmp	r0, #0
 8019f70:	d07a      	beq.n	801a068 <pow+0x268>
 8019f72:	ec45 4b10 	vmov	d0, r4, r5
 8019f76:	f001 fb60 	bl	801b63a <finite>
 8019f7a:	2800      	cmp	r0, #0
 8019f7c:	d074      	beq.n	801a068 <pow+0x268>
 8019f7e:	ec53 2b18 	vmov	r2, r3, d8
 8019f82:	ee18 0a10 	vmov	r0, s16
 8019f86:	4619      	mov	r1, r3
 8019f88:	f7e6 fde0 	bl	8000b4c <__aeabi_dcmpun>
 8019f8c:	f999 9000 	ldrsb.w	r9, [r9]
 8019f90:	4b4b      	ldr	r3, [pc, #300]	; (801a0c0 <pow+0x2c0>)
 8019f92:	b1b0      	cbz	r0, 8019fc2 <pow+0x1c2>
 8019f94:	2201      	movs	r2, #1
 8019f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019f9a:	9b00      	ldr	r3, [sp, #0]
 8019f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8019f9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019fa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019fa6:	f1b9 0f00 	cmp.w	r9, #0
 8019faa:	d0c4      	beq.n	8019f36 <pow+0x136>
 8019fac:	4652      	mov	r2, sl
 8019fae:	465b      	mov	r3, fp
 8019fb0:	4650      	mov	r0, sl
 8019fb2:	4659      	mov	r1, fp
 8019fb4:	f7e6 fc5a 	bl	800086c <__aeabi_ddiv>
 8019fb8:	f1b9 0f02 	cmp.w	r9, #2
 8019fbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019fc0:	e7c1      	b.n	8019f46 <pow+0x146>
 8019fc2:	2203      	movs	r2, #3
 8019fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019fc8:	900a      	str	r0, [sp, #40]	; 0x28
 8019fca:	4629      	mov	r1, r5
 8019fcc:	4620      	mov	r0, r4
 8019fce:	2200      	movs	r2, #0
 8019fd0:	4b3e      	ldr	r3, [pc, #248]	; (801a0cc <pow+0x2cc>)
 8019fd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019fd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019fda:	f7e6 fb1d 	bl	8000618 <__aeabi_dmul>
 8019fde:	4604      	mov	r4, r0
 8019fe0:	460d      	mov	r5, r1
 8019fe2:	f1b9 0f00 	cmp.w	r9, #0
 8019fe6:	d124      	bne.n	801a032 <pow+0x232>
 8019fe8:	4b39      	ldr	r3, [pc, #228]	; (801a0d0 <pow+0x2d0>)
 8019fea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019fee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	4652      	mov	r2, sl
 8019ff6:	465b      	mov	r3, fp
 8019ff8:	4639      	mov	r1, r7
 8019ffa:	f7e6 fd7f 	bl	8000afc <__aeabi_dcmplt>
 8019ffe:	2800      	cmp	r0, #0
 801a000:	d056      	beq.n	801a0b0 <pow+0x2b0>
 801a002:	ec45 4b10 	vmov	d0, r4, r5
 801a006:	f001 fb2b 	bl	801b660 <rint>
 801a00a:	4622      	mov	r2, r4
 801a00c:	462b      	mov	r3, r5
 801a00e:	ec51 0b10 	vmov	r0, r1, d0
 801a012:	f7e6 fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 801a016:	b920      	cbnz	r0, 801a022 <pow+0x222>
 801a018:	4b2e      	ldr	r3, [pc, #184]	; (801a0d4 <pow+0x2d4>)
 801a01a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a01e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a022:	f998 3000 	ldrsb.w	r3, [r8]
 801a026:	2b02      	cmp	r3, #2
 801a028:	d142      	bne.n	801a0b0 <pow+0x2b0>
 801a02a:	f7fc f8b9 	bl	80161a0 <__errno>
 801a02e:	2322      	movs	r3, #34	; 0x22
 801a030:	e78d      	b.n	8019f4e <pow+0x14e>
 801a032:	4b29      	ldr	r3, [pc, #164]	; (801a0d8 <pow+0x2d8>)
 801a034:	2200      	movs	r2, #0
 801a036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a03a:	4630      	mov	r0, r6
 801a03c:	4652      	mov	r2, sl
 801a03e:	465b      	mov	r3, fp
 801a040:	4639      	mov	r1, r7
 801a042:	f7e6 fd5b 	bl	8000afc <__aeabi_dcmplt>
 801a046:	2800      	cmp	r0, #0
 801a048:	d0eb      	beq.n	801a022 <pow+0x222>
 801a04a:	ec45 4b10 	vmov	d0, r4, r5
 801a04e:	f001 fb07 	bl	801b660 <rint>
 801a052:	4622      	mov	r2, r4
 801a054:	462b      	mov	r3, r5
 801a056:	ec51 0b10 	vmov	r0, r1, d0
 801a05a:	f7e6 fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 801a05e:	2800      	cmp	r0, #0
 801a060:	d1df      	bne.n	801a022 <pow+0x222>
 801a062:	2200      	movs	r2, #0
 801a064:	4b18      	ldr	r3, [pc, #96]	; (801a0c8 <pow+0x2c8>)
 801a066:	e7da      	b.n	801a01e <pow+0x21e>
 801a068:	2200      	movs	r2, #0
 801a06a:	2300      	movs	r3, #0
 801a06c:	ec51 0b18 	vmov	r0, r1, d8
 801a070:	f7e6 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 801a074:	2800      	cmp	r0, #0
 801a076:	f43f af3a 	beq.w	8019eee <pow+0xee>
 801a07a:	ec47 6b10 	vmov	d0, r6, r7
 801a07e:	f001 fadc 	bl	801b63a <finite>
 801a082:	2800      	cmp	r0, #0
 801a084:	f43f af33 	beq.w	8019eee <pow+0xee>
 801a088:	ec45 4b10 	vmov	d0, r4, r5
 801a08c:	f001 fad5 	bl	801b63a <finite>
 801a090:	2800      	cmp	r0, #0
 801a092:	f43f af2c 	beq.w	8019eee <pow+0xee>
 801a096:	2304      	movs	r3, #4
 801a098:	9302      	str	r3, [sp, #8]
 801a09a:	4b09      	ldr	r3, [pc, #36]	; (801a0c0 <pow+0x2c0>)
 801a09c:	9303      	str	r3, [sp, #12]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	930a      	str	r3, [sp, #40]	; 0x28
 801a0a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801a0a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801a0aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 801a0ae:	e7b8      	b.n	801a022 <pow+0x222>
 801a0b0:	a802      	add	r0, sp, #8
 801a0b2:	f001 faca 	bl	801b64a <matherr>
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	f47f af11 	bne.w	8019ede <pow+0xde>
 801a0bc:	e7b5      	b.n	801a02a <pow+0x22a>
 801a0be:	bf00      	nop
 801a0c0:	0801c61b 	.word	0x0801c61b
 801a0c4:	3ff00000 	.word	0x3ff00000
 801a0c8:	fff00000 	.word	0xfff00000
 801a0cc:	3fe00000 	.word	0x3fe00000
 801a0d0:	47efffff 	.word	0x47efffff
 801a0d4:	c7efffff 	.word	0xc7efffff
 801a0d8:	7ff00000 	.word	0x7ff00000
 801a0dc:	20000368 	.word	0x20000368

0801a0e0 <sqrtf>:
 801a0e0:	b510      	push	{r4, lr}
 801a0e2:	ed2d 8b02 	vpush	{d8}
 801a0e6:	b08a      	sub	sp, #40	; 0x28
 801a0e8:	eeb0 8a40 	vmov.f32	s16, s0
 801a0ec:	f001 f8f6 	bl	801b2dc <__ieee754_sqrtf>
 801a0f0:	4b21      	ldr	r3, [pc, #132]	; (801a178 <sqrtf+0x98>)
 801a0f2:	f993 4000 	ldrsb.w	r4, [r3]
 801a0f6:	1c63      	adds	r3, r4, #1
 801a0f8:	d02c      	beq.n	801a154 <sqrtf+0x74>
 801a0fa:	eeb4 8a48 	vcmp.f32	s16, s16
 801a0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a102:	d627      	bvs.n	801a154 <sqrtf+0x74>
 801a104:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a10c:	d522      	bpl.n	801a154 <sqrtf+0x74>
 801a10e:	2301      	movs	r3, #1
 801a110:	9300      	str	r3, [sp, #0]
 801a112:	4b1a      	ldr	r3, [pc, #104]	; (801a17c <sqrtf+0x9c>)
 801a114:	9301      	str	r3, [sp, #4]
 801a116:	ee18 0a10 	vmov	r0, s16
 801a11a:	2300      	movs	r3, #0
 801a11c:	9308      	str	r3, [sp, #32]
 801a11e:	f7e6 fa23 	bl	8000568 <__aeabi_f2d>
 801a122:	2200      	movs	r2, #0
 801a124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a12c:	2300      	movs	r3, #0
 801a12e:	b9ac      	cbnz	r4, 801a15c <sqrtf+0x7c>
 801a130:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a134:	4668      	mov	r0, sp
 801a136:	f001 fa88 	bl	801b64a <matherr>
 801a13a:	b1b8      	cbz	r0, 801a16c <sqrtf+0x8c>
 801a13c:	9b08      	ldr	r3, [sp, #32]
 801a13e:	b11b      	cbz	r3, 801a148 <sqrtf+0x68>
 801a140:	f7fc f82e 	bl	80161a0 <__errno>
 801a144:	9b08      	ldr	r3, [sp, #32]
 801a146:	6003      	str	r3, [r0, #0]
 801a148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a14c:	f7e6 fd5c 	bl	8000c08 <__aeabi_d2f>
 801a150:	ee00 0a10 	vmov	s0, r0
 801a154:	b00a      	add	sp, #40	; 0x28
 801a156:	ecbd 8b02 	vpop	{d8}
 801a15a:	bd10      	pop	{r4, pc}
 801a15c:	4610      	mov	r0, r2
 801a15e:	4619      	mov	r1, r3
 801a160:	f7e6 fb84 	bl	800086c <__aeabi_ddiv>
 801a164:	2c02      	cmp	r4, #2
 801a166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a16a:	d1e3      	bne.n	801a134 <sqrtf+0x54>
 801a16c:	f7fc f818 	bl	80161a0 <__errno>
 801a170:	2321      	movs	r3, #33	; 0x21
 801a172:	6003      	str	r3, [r0, #0]
 801a174:	e7e2      	b.n	801a13c <sqrtf+0x5c>
 801a176:	bf00      	nop
 801a178:	20000368 	.word	0x20000368
 801a17c:	0801c61f 	.word	0x0801c61f

0801a180 <__ieee754_asin>:
 801a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a184:	ec55 4b10 	vmov	r4, r5, d0
 801a188:	4bcb      	ldr	r3, [pc, #812]	; (801a4b8 <__ieee754_asin+0x338>)
 801a18a:	b087      	sub	sp, #28
 801a18c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801a190:	429f      	cmp	r7, r3
 801a192:	9501      	str	r5, [sp, #4]
 801a194:	dd31      	ble.n	801a1fa <__ieee754_asin+0x7a>
 801a196:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801a19a:	ee10 3a10 	vmov	r3, s0
 801a19e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801a1a2:	433b      	orrs	r3, r7
 801a1a4:	d117      	bne.n	801a1d6 <__ieee754_asin+0x56>
 801a1a6:	a3aa      	add	r3, pc, #680	; (adr r3, 801a450 <__ieee754_asin+0x2d0>)
 801a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ac:	ee10 0a10 	vmov	r0, s0
 801a1b0:	4629      	mov	r1, r5
 801a1b2:	f7e6 fa31 	bl	8000618 <__aeabi_dmul>
 801a1b6:	a3a8      	add	r3, pc, #672	; (adr r3, 801a458 <__ieee754_asin+0x2d8>)
 801a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1bc:	4606      	mov	r6, r0
 801a1be:	460f      	mov	r7, r1
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	4629      	mov	r1, r5
 801a1c4:	f7e6 fa28 	bl	8000618 <__aeabi_dmul>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	460b      	mov	r3, r1
 801a1cc:	4630      	mov	r0, r6
 801a1ce:	4639      	mov	r1, r7
 801a1d0:	f7e6 f86c 	bl	80002ac <__adddf3>
 801a1d4:	e00a      	b.n	801a1ec <__ieee754_asin+0x6c>
 801a1d6:	ee10 2a10 	vmov	r2, s0
 801a1da:	462b      	mov	r3, r5
 801a1dc:	4620      	mov	r0, r4
 801a1de:	4629      	mov	r1, r5
 801a1e0:	f7e6 f862 	bl	80002a8 <__aeabi_dsub>
 801a1e4:	4602      	mov	r2, r0
 801a1e6:	460b      	mov	r3, r1
 801a1e8:	f7e6 fb40 	bl	800086c <__aeabi_ddiv>
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	460d      	mov	r5, r1
 801a1f0:	ec45 4b10 	vmov	d0, r4, r5
 801a1f4:	b007      	add	sp, #28
 801a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1fa:	4bb0      	ldr	r3, [pc, #704]	; (801a4bc <__ieee754_asin+0x33c>)
 801a1fc:	429f      	cmp	r7, r3
 801a1fe:	dc11      	bgt.n	801a224 <__ieee754_asin+0xa4>
 801a200:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801a204:	f280 80ae 	bge.w	801a364 <__ieee754_asin+0x1e4>
 801a208:	a395      	add	r3, pc, #596	; (adr r3, 801a460 <__ieee754_asin+0x2e0>)
 801a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a20e:	ee10 0a10 	vmov	r0, s0
 801a212:	4629      	mov	r1, r5
 801a214:	f7e6 f84a 	bl	80002ac <__adddf3>
 801a218:	2200      	movs	r2, #0
 801a21a:	4ba9      	ldr	r3, [pc, #676]	; (801a4c0 <__ieee754_asin+0x340>)
 801a21c:	f7e6 fc8c 	bl	8000b38 <__aeabi_dcmpgt>
 801a220:	2800      	cmp	r0, #0
 801a222:	d1e5      	bne.n	801a1f0 <__ieee754_asin+0x70>
 801a224:	ec45 4b10 	vmov	d0, r4, r5
 801a228:	f001 f9fe 	bl	801b628 <fabs>
 801a22c:	2000      	movs	r0, #0
 801a22e:	ec53 2b10 	vmov	r2, r3, d0
 801a232:	49a3      	ldr	r1, [pc, #652]	; (801a4c0 <__ieee754_asin+0x340>)
 801a234:	f7e6 f838 	bl	80002a8 <__aeabi_dsub>
 801a238:	2200      	movs	r2, #0
 801a23a:	4ba2      	ldr	r3, [pc, #648]	; (801a4c4 <__ieee754_asin+0x344>)
 801a23c:	f7e6 f9ec 	bl	8000618 <__aeabi_dmul>
 801a240:	a389      	add	r3, pc, #548	; (adr r3, 801a468 <__ieee754_asin+0x2e8>)
 801a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a246:	4604      	mov	r4, r0
 801a248:	460d      	mov	r5, r1
 801a24a:	f7e6 f9e5 	bl	8000618 <__aeabi_dmul>
 801a24e:	a388      	add	r3, pc, #544	; (adr r3, 801a470 <__ieee754_asin+0x2f0>)
 801a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a254:	f7e6 f82a 	bl	80002ac <__adddf3>
 801a258:	4622      	mov	r2, r4
 801a25a:	462b      	mov	r3, r5
 801a25c:	f7e6 f9dc 	bl	8000618 <__aeabi_dmul>
 801a260:	a385      	add	r3, pc, #532	; (adr r3, 801a478 <__ieee754_asin+0x2f8>)
 801a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a266:	f7e6 f81f 	bl	80002a8 <__aeabi_dsub>
 801a26a:	4622      	mov	r2, r4
 801a26c:	462b      	mov	r3, r5
 801a26e:	f7e6 f9d3 	bl	8000618 <__aeabi_dmul>
 801a272:	a383      	add	r3, pc, #524	; (adr r3, 801a480 <__ieee754_asin+0x300>)
 801a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a278:	f7e6 f818 	bl	80002ac <__adddf3>
 801a27c:	4622      	mov	r2, r4
 801a27e:	462b      	mov	r3, r5
 801a280:	f7e6 f9ca 	bl	8000618 <__aeabi_dmul>
 801a284:	a380      	add	r3, pc, #512	; (adr r3, 801a488 <__ieee754_asin+0x308>)
 801a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28a:	f7e6 f80d 	bl	80002a8 <__aeabi_dsub>
 801a28e:	4622      	mov	r2, r4
 801a290:	462b      	mov	r3, r5
 801a292:	f7e6 f9c1 	bl	8000618 <__aeabi_dmul>
 801a296:	a37e      	add	r3, pc, #504	; (adr r3, 801a490 <__ieee754_asin+0x310>)
 801a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29c:	f7e6 f806 	bl	80002ac <__adddf3>
 801a2a0:	4622      	mov	r2, r4
 801a2a2:	462b      	mov	r3, r5
 801a2a4:	f7e6 f9b8 	bl	8000618 <__aeabi_dmul>
 801a2a8:	a37b      	add	r3, pc, #492	; (adr r3, 801a498 <__ieee754_asin+0x318>)
 801a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ae:	4680      	mov	r8, r0
 801a2b0:	4689      	mov	r9, r1
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	4629      	mov	r1, r5
 801a2b6:	f7e6 f9af 	bl	8000618 <__aeabi_dmul>
 801a2ba:	a379      	add	r3, pc, #484	; (adr r3, 801a4a0 <__ieee754_asin+0x320>)
 801a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c0:	f7e5 fff2 	bl	80002a8 <__aeabi_dsub>
 801a2c4:	4622      	mov	r2, r4
 801a2c6:	462b      	mov	r3, r5
 801a2c8:	f7e6 f9a6 	bl	8000618 <__aeabi_dmul>
 801a2cc:	a376      	add	r3, pc, #472	; (adr r3, 801a4a8 <__ieee754_asin+0x328>)
 801a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d2:	f7e5 ffeb 	bl	80002ac <__adddf3>
 801a2d6:	4622      	mov	r2, r4
 801a2d8:	462b      	mov	r3, r5
 801a2da:	f7e6 f99d 	bl	8000618 <__aeabi_dmul>
 801a2de:	a374      	add	r3, pc, #464	; (adr r3, 801a4b0 <__ieee754_asin+0x330>)
 801a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e4:	f7e5 ffe0 	bl	80002a8 <__aeabi_dsub>
 801a2e8:	4622      	mov	r2, r4
 801a2ea:	462b      	mov	r3, r5
 801a2ec:	f7e6 f994 	bl	8000618 <__aeabi_dmul>
 801a2f0:	4b73      	ldr	r3, [pc, #460]	; (801a4c0 <__ieee754_asin+0x340>)
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	f7e5 ffda 	bl	80002ac <__adddf3>
 801a2f8:	ec45 4b10 	vmov	d0, r4, r5
 801a2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a300:	f000 ff3c 	bl	801b17c <__ieee754_sqrt>
 801a304:	4b70      	ldr	r3, [pc, #448]	; (801a4c8 <__ieee754_asin+0x348>)
 801a306:	429f      	cmp	r7, r3
 801a308:	ec5b ab10 	vmov	sl, fp, d0
 801a30c:	f340 80de 	ble.w	801a4cc <__ieee754_asin+0x34c>
 801a310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a314:	4640      	mov	r0, r8
 801a316:	4649      	mov	r1, r9
 801a318:	f7e6 faa8 	bl	800086c <__aeabi_ddiv>
 801a31c:	4652      	mov	r2, sl
 801a31e:	465b      	mov	r3, fp
 801a320:	f7e6 f97a 	bl	8000618 <__aeabi_dmul>
 801a324:	4652      	mov	r2, sl
 801a326:	465b      	mov	r3, fp
 801a328:	f7e5 ffc0 	bl	80002ac <__adddf3>
 801a32c:	4602      	mov	r2, r0
 801a32e:	460b      	mov	r3, r1
 801a330:	f7e5 ffbc 	bl	80002ac <__adddf3>
 801a334:	a348      	add	r3, pc, #288	; (adr r3, 801a458 <__ieee754_asin+0x2d8>)
 801a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a33a:	f7e5 ffb5 	bl	80002a8 <__aeabi_dsub>
 801a33e:	4602      	mov	r2, r0
 801a340:	460b      	mov	r3, r1
 801a342:	a143      	add	r1, pc, #268	; (adr r1, 801a450 <__ieee754_asin+0x2d0>)
 801a344:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a348:	f7e5 ffae 	bl	80002a8 <__aeabi_dsub>
 801a34c:	9b01      	ldr	r3, [sp, #4]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	bfdc      	itt	le
 801a352:	4602      	movle	r2, r0
 801a354:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801a358:	4604      	mov	r4, r0
 801a35a:	460d      	mov	r5, r1
 801a35c:	bfdc      	itt	le
 801a35e:	4614      	movle	r4, r2
 801a360:	461d      	movle	r5, r3
 801a362:	e745      	b.n	801a1f0 <__ieee754_asin+0x70>
 801a364:	ee10 2a10 	vmov	r2, s0
 801a368:	ee10 0a10 	vmov	r0, s0
 801a36c:	462b      	mov	r3, r5
 801a36e:	4629      	mov	r1, r5
 801a370:	f7e6 f952 	bl	8000618 <__aeabi_dmul>
 801a374:	a33c      	add	r3, pc, #240	; (adr r3, 801a468 <__ieee754_asin+0x2e8>)
 801a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a37a:	4606      	mov	r6, r0
 801a37c:	460f      	mov	r7, r1
 801a37e:	f7e6 f94b 	bl	8000618 <__aeabi_dmul>
 801a382:	a33b      	add	r3, pc, #236	; (adr r3, 801a470 <__ieee754_asin+0x2f0>)
 801a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a388:	f7e5 ff90 	bl	80002ac <__adddf3>
 801a38c:	4632      	mov	r2, r6
 801a38e:	463b      	mov	r3, r7
 801a390:	f7e6 f942 	bl	8000618 <__aeabi_dmul>
 801a394:	a338      	add	r3, pc, #224	; (adr r3, 801a478 <__ieee754_asin+0x2f8>)
 801a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39a:	f7e5 ff85 	bl	80002a8 <__aeabi_dsub>
 801a39e:	4632      	mov	r2, r6
 801a3a0:	463b      	mov	r3, r7
 801a3a2:	f7e6 f939 	bl	8000618 <__aeabi_dmul>
 801a3a6:	a336      	add	r3, pc, #216	; (adr r3, 801a480 <__ieee754_asin+0x300>)
 801a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ac:	f7e5 ff7e 	bl	80002ac <__adddf3>
 801a3b0:	4632      	mov	r2, r6
 801a3b2:	463b      	mov	r3, r7
 801a3b4:	f7e6 f930 	bl	8000618 <__aeabi_dmul>
 801a3b8:	a333      	add	r3, pc, #204	; (adr r3, 801a488 <__ieee754_asin+0x308>)
 801a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3be:	f7e5 ff73 	bl	80002a8 <__aeabi_dsub>
 801a3c2:	4632      	mov	r2, r6
 801a3c4:	463b      	mov	r3, r7
 801a3c6:	f7e6 f927 	bl	8000618 <__aeabi_dmul>
 801a3ca:	a331      	add	r3, pc, #196	; (adr r3, 801a490 <__ieee754_asin+0x310>)
 801a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d0:	f7e5 ff6c 	bl	80002ac <__adddf3>
 801a3d4:	4632      	mov	r2, r6
 801a3d6:	463b      	mov	r3, r7
 801a3d8:	f7e6 f91e 	bl	8000618 <__aeabi_dmul>
 801a3dc:	a32e      	add	r3, pc, #184	; (adr r3, 801a498 <__ieee754_asin+0x318>)
 801a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e2:	4680      	mov	r8, r0
 801a3e4:	4689      	mov	r9, r1
 801a3e6:	4630      	mov	r0, r6
 801a3e8:	4639      	mov	r1, r7
 801a3ea:	f7e6 f915 	bl	8000618 <__aeabi_dmul>
 801a3ee:	a32c      	add	r3, pc, #176	; (adr r3, 801a4a0 <__ieee754_asin+0x320>)
 801a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f4:	f7e5 ff58 	bl	80002a8 <__aeabi_dsub>
 801a3f8:	4632      	mov	r2, r6
 801a3fa:	463b      	mov	r3, r7
 801a3fc:	f7e6 f90c 	bl	8000618 <__aeabi_dmul>
 801a400:	a329      	add	r3, pc, #164	; (adr r3, 801a4a8 <__ieee754_asin+0x328>)
 801a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a406:	f7e5 ff51 	bl	80002ac <__adddf3>
 801a40a:	4632      	mov	r2, r6
 801a40c:	463b      	mov	r3, r7
 801a40e:	f7e6 f903 	bl	8000618 <__aeabi_dmul>
 801a412:	a327      	add	r3, pc, #156	; (adr r3, 801a4b0 <__ieee754_asin+0x330>)
 801a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a418:	f7e5 ff46 	bl	80002a8 <__aeabi_dsub>
 801a41c:	4632      	mov	r2, r6
 801a41e:	463b      	mov	r3, r7
 801a420:	f7e6 f8fa 	bl	8000618 <__aeabi_dmul>
 801a424:	2200      	movs	r2, #0
 801a426:	4b26      	ldr	r3, [pc, #152]	; (801a4c0 <__ieee754_asin+0x340>)
 801a428:	f7e5 ff40 	bl	80002ac <__adddf3>
 801a42c:	4602      	mov	r2, r0
 801a42e:	460b      	mov	r3, r1
 801a430:	4640      	mov	r0, r8
 801a432:	4649      	mov	r1, r9
 801a434:	f7e6 fa1a 	bl	800086c <__aeabi_ddiv>
 801a438:	4622      	mov	r2, r4
 801a43a:	462b      	mov	r3, r5
 801a43c:	f7e6 f8ec 	bl	8000618 <__aeabi_dmul>
 801a440:	4602      	mov	r2, r0
 801a442:	460b      	mov	r3, r1
 801a444:	4620      	mov	r0, r4
 801a446:	4629      	mov	r1, r5
 801a448:	e6c2      	b.n	801a1d0 <__ieee754_asin+0x50>
 801a44a:	bf00      	nop
 801a44c:	f3af 8000 	nop.w
 801a450:	54442d18 	.word	0x54442d18
 801a454:	3ff921fb 	.word	0x3ff921fb
 801a458:	33145c07 	.word	0x33145c07
 801a45c:	3c91a626 	.word	0x3c91a626
 801a460:	8800759c 	.word	0x8800759c
 801a464:	7e37e43c 	.word	0x7e37e43c
 801a468:	0dfdf709 	.word	0x0dfdf709
 801a46c:	3f023de1 	.word	0x3f023de1
 801a470:	7501b288 	.word	0x7501b288
 801a474:	3f49efe0 	.word	0x3f49efe0
 801a478:	b5688f3b 	.word	0xb5688f3b
 801a47c:	3fa48228 	.word	0x3fa48228
 801a480:	0e884455 	.word	0x0e884455
 801a484:	3fc9c155 	.word	0x3fc9c155
 801a488:	03eb6f7d 	.word	0x03eb6f7d
 801a48c:	3fd4d612 	.word	0x3fd4d612
 801a490:	55555555 	.word	0x55555555
 801a494:	3fc55555 	.word	0x3fc55555
 801a498:	b12e9282 	.word	0xb12e9282
 801a49c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a4a0:	1b8d0159 	.word	0x1b8d0159
 801a4a4:	3fe6066c 	.word	0x3fe6066c
 801a4a8:	9c598ac8 	.word	0x9c598ac8
 801a4ac:	40002ae5 	.word	0x40002ae5
 801a4b0:	1c8a2d4b 	.word	0x1c8a2d4b
 801a4b4:	40033a27 	.word	0x40033a27
 801a4b8:	3fefffff 	.word	0x3fefffff
 801a4bc:	3fdfffff 	.word	0x3fdfffff
 801a4c0:	3ff00000 	.word	0x3ff00000
 801a4c4:	3fe00000 	.word	0x3fe00000
 801a4c8:	3fef3332 	.word	0x3fef3332
 801a4cc:	ee10 2a10 	vmov	r2, s0
 801a4d0:	ee10 0a10 	vmov	r0, s0
 801a4d4:	465b      	mov	r3, fp
 801a4d6:	4659      	mov	r1, fp
 801a4d8:	f7e5 fee8 	bl	80002ac <__adddf3>
 801a4dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a4e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a4e4:	4640      	mov	r0, r8
 801a4e6:	4649      	mov	r1, r9
 801a4e8:	f7e6 f9c0 	bl	800086c <__aeabi_ddiv>
 801a4ec:	4602      	mov	r2, r0
 801a4ee:	460b      	mov	r3, r1
 801a4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a4f4:	f7e6 f890 	bl	8000618 <__aeabi_dmul>
 801a4f8:	2600      	movs	r6, #0
 801a4fa:	4680      	mov	r8, r0
 801a4fc:	4689      	mov	r9, r1
 801a4fe:	4632      	mov	r2, r6
 801a500:	465b      	mov	r3, fp
 801a502:	4630      	mov	r0, r6
 801a504:	4659      	mov	r1, fp
 801a506:	f7e6 f887 	bl	8000618 <__aeabi_dmul>
 801a50a:	4602      	mov	r2, r0
 801a50c:	460b      	mov	r3, r1
 801a50e:	4620      	mov	r0, r4
 801a510:	4629      	mov	r1, r5
 801a512:	f7e5 fec9 	bl	80002a8 <__aeabi_dsub>
 801a516:	4632      	mov	r2, r6
 801a518:	4604      	mov	r4, r0
 801a51a:	460d      	mov	r5, r1
 801a51c:	465b      	mov	r3, fp
 801a51e:	4650      	mov	r0, sl
 801a520:	4659      	mov	r1, fp
 801a522:	f7e5 fec3 	bl	80002ac <__adddf3>
 801a526:	4602      	mov	r2, r0
 801a528:	460b      	mov	r3, r1
 801a52a:	4620      	mov	r0, r4
 801a52c:	4629      	mov	r1, r5
 801a52e:	f7e6 f99d 	bl	800086c <__aeabi_ddiv>
 801a532:	4602      	mov	r2, r0
 801a534:	460b      	mov	r3, r1
 801a536:	f7e5 feb9 	bl	80002ac <__adddf3>
 801a53a:	4602      	mov	r2, r0
 801a53c:	460b      	mov	r3, r1
 801a53e:	a114      	add	r1, pc, #80	; (adr r1, 801a590 <__ieee754_asin+0x410>)
 801a540:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a544:	f7e5 feb0 	bl	80002a8 <__aeabi_dsub>
 801a548:	4602      	mov	r2, r0
 801a54a:	460b      	mov	r3, r1
 801a54c:	4640      	mov	r0, r8
 801a54e:	4649      	mov	r1, r9
 801a550:	f7e5 feaa 	bl	80002a8 <__aeabi_dsub>
 801a554:	465f      	mov	r7, fp
 801a556:	4604      	mov	r4, r0
 801a558:	460d      	mov	r5, r1
 801a55a:	4632      	mov	r2, r6
 801a55c:	465b      	mov	r3, fp
 801a55e:	4630      	mov	r0, r6
 801a560:	4639      	mov	r1, r7
 801a562:	f7e5 fea3 	bl	80002ac <__adddf3>
 801a566:	4602      	mov	r2, r0
 801a568:	460b      	mov	r3, r1
 801a56a:	a10b      	add	r1, pc, #44	; (adr r1, 801a598 <__ieee754_asin+0x418>)
 801a56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a570:	f7e5 fe9a 	bl	80002a8 <__aeabi_dsub>
 801a574:	4602      	mov	r2, r0
 801a576:	460b      	mov	r3, r1
 801a578:	4620      	mov	r0, r4
 801a57a:	4629      	mov	r1, r5
 801a57c:	f7e5 fe94 	bl	80002a8 <__aeabi_dsub>
 801a580:	4602      	mov	r2, r0
 801a582:	460b      	mov	r3, r1
 801a584:	a104      	add	r1, pc, #16	; (adr r1, 801a598 <__ieee754_asin+0x418>)
 801a586:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a58a:	e6dd      	b.n	801a348 <__ieee754_asin+0x1c8>
 801a58c:	f3af 8000 	nop.w
 801a590:	33145c07 	.word	0x33145c07
 801a594:	3c91a626 	.word	0x3c91a626
 801a598:	54442d18 	.word	0x54442d18
 801a59c:	3fe921fb 	.word	0x3fe921fb

0801a5a0 <__ieee754_atan2>:
 801a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5a4:	ec57 6b11 	vmov	r6, r7, d1
 801a5a8:	4273      	negs	r3, r6
 801a5aa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a5ae:	4333      	orrs	r3, r6
 801a5b0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801a758 <__ieee754_atan2+0x1b8>
 801a5b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a5b8:	4573      	cmp	r3, lr
 801a5ba:	ec51 0b10 	vmov	r0, r1, d0
 801a5be:	ee11 8a10 	vmov	r8, s2
 801a5c2:	d80a      	bhi.n	801a5da <__ieee754_atan2+0x3a>
 801a5c4:	4244      	negs	r4, r0
 801a5c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a5ca:	4304      	orrs	r4, r0
 801a5cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a5d0:	4574      	cmp	r4, lr
 801a5d2:	468c      	mov	ip, r1
 801a5d4:	ee10 9a10 	vmov	r9, s0
 801a5d8:	d907      	bls.n	801a5ea <__ieee754_atan2+0x4a>
 801a5da:	4632      	mov	r2, r6
 801a5dc:	463b      	mov	r3, r7
 801a5de:	f7e5 fe65 	bl	80002ac <__adddf3>
 801a5e2:	ec41 0b10 	vmov	d0, r0, r1
 801a5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a5ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a5f2:	4334      	orrs	r4, r6
 801a5f4:	d103      	bne.n	801a5fe <__ieee754_atan2+0x5e>
 801a5f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5fa:	f000 be75 	b.w	801b2e8 <atan>
 801a5fe:	17bc      	asrs	r4, r7, #30
 801a600:	f004 0402 	and.w	r4, r4, #2
 801a604:	ea53 0909 	orrs.w	r9, r3, r9
 801a608:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a60c:	d107      	bne.n	801a61e <__ieee754_atan2+0x7e>
 801a60e:	2c02      	cmp	r4, #2
 801a610:	d073      	beq.n	801a6fa <__ieee754_atan2+0x15a>
 801a612:	2c03      	cmp	r4, #3
 801a614:	d1e5      	bne.n	801a5e2 <__ieee754_atan2+0x42>
 801a616:	a13e      	add	r1, pc, #248	; (adr r1, 801a710 <__ieee754_atan2+0x170>)
 801a618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a61c:	e7e1      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a61e:	ea52 0808 	orrs.w	r8, r2, r8
 801a622:	d106      	bne.n	801a632 <__ieee754_atan2+0x92>
 801a624:	f1bc 0f00 	cmp.w	ip, #0
 801a628:	da6b      	bge.n	801a702 <__ieee754_atan2+0x162>
 801a62a:	a13b      	add	r1, pc, #236	; (adr r1, 801a718 <__ieee754_atan2+0x178>)
 801a62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a630:	e7d7      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a632:	4572      	cmp	r2, lr
 801a634:	d120      	bne.n	801a678 <__ieee754_atan2+0xd8>
 801a636:	4293      	cmp	r3, r2
 801a638:	d111      	bne.n	801a65e <__ieee754_atan2+0xbe>
 801a63a:	2c02      	cmp	r4, #2
 801a63c:	d007      	beq.n	801a64e <__ieee754_atan2+0xae>
 801a63e:	2c03      	cmp	r4, #3
 801a640:	d009      	beq.n	801a656 <__ieee754_atan2+0xb6>
 801a642:	2c01      	cmp	r4, #1
 801a644:	d155      	bne.n	801a6f2 <__ieee754_atan2+0x152>
 801a646:	a136      	add	r1, pc, #216	; (adr r1, 801a720 <__ieee754_atan2+0x180>)
 801a648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a64c:	e7c9      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a64e:	a136      	add	r1, pc, #216	; (adr r1, 801a728 <__ieee754_atan2+0x188>)
 801a650:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a654:	e7c5      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a656:	a136      	add	r1, pc, #216	; (adr r1, 801a730 <__ieee754_atan2+0x190>)
 801a658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a65c:	e7c1      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a65e:	2c02      	cmp	r4, #2
 801a660:	d04b      	beq.n	801a6fa <__ieee754_atan2+0x15a>
 801a662:	2c03      	cmp	r4, #3
 801a664:	d0d7      	beq.n	801a616 <__ieee754_atan2+0x76>
 801a666:	2c01      	cmp	r4, #1
 801a668:	f04f 0000 	mov.w	r0, #0
 801a66c:	d102      	bne.n	801a674 <__ieee754_atan2+0xd4>
 801a66e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a672:	e7b6      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a674:	2100      	movs	r1, #0
 801a676:	e7b4      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a678:	4573      	cmp	r3, lr
 801a67a:	d0d3      	beq.n	801a624 <__ieee754_atan2+0x84>
 801a67c:	1a9b      	subs	r3, r3, r2
 801a67e:	151b      	asrs	r3, r3, #20
 801a680:	2b3c      	cmp	r3, #60	; 0x3c
 801a682:	dc1e      	bgt.n	801a6c2 <__ieee754_atan2+0x122>
 801a684:	2f00      	cmp	r7, #0
 801a686:	da01      	bge.n	801a68c <__ieee754_atan2+0xec>
 801a688:	333c      	adds	r3, #60	; 0x3c
 801a68a:	db1e      	blt.n	801a6ca <__ieee754_atan2+0x12a>
 801a68c:	4632      	mov	r2, r6
 801a68e:	463b      	mov	r3, r7
 801a690:	f7e6 f8ec 	bl	800086c <__aeabi_ddiv>
 801a694:	ec41 0b10 	vmov	d0, r0, r1
 801a698:	f000 ffc6 	bl	801b628 <fabs>
 801a69c:	f000 fe24 	bl	801b2e8 <atan>
 801a6a0:	ec51 0b10 	vmov	r0, r1, d0
 801a6a4:	2c01      	cmp	r4, #1
 801a6a6:	d013      	beq.n	801a6d0 <__ieee754_atan2+0x130>
 801a6a8:	2c02      	cmp	r4, #2
 801a6aa:	d015      	beq.n	801a6d8 <__ieee754_atan2+0x138>
 801a6ac:	2c00      	cmp	r4, #0
 801a6ae:	d098      	beq.n	801a5e2 <__ieee754_atan2+0x42>
 801a6b0:	a321      	add	r3, pc, #132	; (adr r3, 801a738 <__ieee754_atan2+0x198>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	f7e5 fdf7 	bl	80002a8 <__aeabi_dsub>
 801a6ba:	a321      	add	r3, pc, #132	; (adr r3, 801a740 <__ieee754_atan2+0x1a0>)
 801a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c0:	e014      	b.n	801a6ec <__ieee754_atan2+0x14c>
 801a6c2:	a121      	add	r1, pc, #132	; (adr r1, 801a748 <__ieee754_atan2+0x1a8>)
 801a6c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6c8:	e7ec      	b.n	801a6a4 <__ieee754_atan2+0x104>
 801a6ca:	2000      	movs	r0, #0
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	e7e9      	b.n	801a6a4 <__ieee754_atan2+0x104>
 801a6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a6d4:	4619      	mov	r1, r3
 801a6d6:	e784      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a6d8:	a317      	add	r3, pc, #92	; (adr r3, 801a738 <__ieee754_atan2+0x198>)
 801a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6de:	f7e5 fde3 	bl	80002a8 <__aeabi_dsub>
 801a6e2:	4602      	mov	r2, r0
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	a116      	add	r1, pc, #88	; (adr r1, 801a740 <__ieee754_atan2+0x1a0>)
 801a6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6ec:	f7e5 fddc 	bl	80002a8 <__aeabi_dsub>
 801a6f0:	e777      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a6f2:	a117      	add	r1, pc, #92	; (adr r1, 801a750 <__ieee754_atan2+0x1b0>)
 801a6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6f8:	e773      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a6fa:	a111      	add	r1, pc, #68	; (adr r1, 801a740 <__ieee754_atan2+0x1a0>)
 801a6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a700:	e76f      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a702:	a111      	add	r1, pc, #68	; (adr r1, 801a748 <__ieee754_atan2+0x1a8>)
 801a704:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a708:	e76b      	b.n	801a5e2 <__ieee754_atan2+0x42>
 801a70a:	bf00      	nop
 801a70c:	f3af 8000 	nop.w
 801a710:	54442d18 	.word	0x54442d18
 801a714:	c00921fb 	.word	0xc00921fb
 801a718:	54442d18 	.word	0x54442d18
 801a71c:	bff921fb 	.word	0xbff921fb
 801a720:	54442d18 	.word	0x54442d18
 801a724:	bfe921fb 	.word	0xbfe921fb
 801a728:	7f3321d2 	.word	0x7f3321d2
 801a72c:	4002d97c 	.word	0x4002d97c
 801a730:	7f3321d2 	.word	0x7f3321d2
 801a734:	c002d97c 	.word	0xc002d97c
 801a738:	33145c07 	.word	0x33145c07
 801a73c:	3ca1a626 	.word	0x3ca1a626
 801a740:	54442d18 	.word	0x54442d18
 801a744:	400921fb 	.word	0x400921fb
 801a748:	54442d18 	.word	0x54442d18
 801a74c:	3ff921fb 	.word	0x3ff921fb
 801a750:	54442d18 	.word	0x54442d18
 801a754:	3fe921fb 	.word	0x3fe921fb
 801a758:	7ff00000 	.word	0x7ff00000
 801a75c:	00000000 	.word	0x00000000

0801a760 <__ieee754_pow>:
 801a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a764:	b091      	sub	sp, #68	; 0x44
 801a766:	ed8d 1b00 	vstr	d1, [sp]
 801a76a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a76e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a772:	ea58 0302 	orrs.w	r3, r8, r2
 801a776:	ec57 6b10 	vmov	r6, r7, d0
 801a77a:	f000 84be 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a77e:	4b7a      	ldr	r3, [pc, #488]	; (801a968 <__ieee754_pow+0x208>)
 801a780:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a784:	429c      	cmp	r4, r3
 801a786:	463d      	mov	r5, r7
 801a788:	ee10 aa10 	vmov	sl, s0
 801a78c:	dc09      	bgt.n	801a7a2 <__ieee754_pow+0x42>
 801a78e:	d103      	bne.n	801a798 <__ieee754_pow+0x38>
 801a790:	b93e      	cbnz	r6, 801a7a2 <__ieee754_pow+0x42>
 801a792:	45a0      	cmp	r8, r4
 801a794:	dc0d      	bgt.n	801a7b2 <__ieee754_pow+0x52>
 801a796:	e001      	b.n	801a79c <__ieee754_pow+0x3c>
 801a798:	4598      	cmp	r8, r3
 801a79a:	dc02      	bgt.n	801a7a2 <__ieee754_pow+0x42>
 801a79c:	4598      	cmp	r8, r3
 801a79e:	d10e      	bne.n	801a7be <__ieee754_pow+0x5e>
 801a7a0:	b16a      	cbz	r2, 801a7be <__ieee754_pow+0x5e>
 801a7a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a7a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a7aa:	ea54 030a 	orrs.w	r3, r4, sl
 801a7ae:	f000 84a4 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a7b2:	486e      	ldr	r0, [pc, #440]	; (801a96c <__ieee754_pow+0x20c>)
 801a7b4:	b011      	add	sp, #68	; 0x44
 801a7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7ba:	f000 bf49 	b.w	801b650 <nan>
 801a7be:	2d00      	cmp	r5, #0
 801a7c0:	da53      	bge.n	801a86a <__ieee754_pow+0x10a>
 801a7c2:	4b6b      	ldr	r3, [pc, #428]	; (801a970 <__ieee754_pow+0x210>)
 801a7c4:	4598      	cmp	r8, r3
 801a7c6:	dc4d      	bgt.n	801a864 <__ieee754_pow+0x104>
 801a7c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a7cc:	4598      	cmp	r8, r3
 801a7ce:	dd4c      	ble.n	801a86a <__ieee754_pow+0x10a>
 801a7d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a7d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a7d8:	2b14      	cmp	r3, #20
 801a7da:	dd26      	ble.n	801a82a <__ieee754_pow+0xca>
 801a7dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a7e0:	fa22 f103 	lsr.w	r1, r2, r3
 801a7e4:	fa01 f303 	lsl.w	r3, r1, r3
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	d13e      	bne.n	801a86a <__ieee754_pow+0x10a>
 801a7ec:	f001 0101 	and.w	r1, r1, #1
 801a7f0:	f1c1 0b02 	rsb	fp, r1, #2
 801a7f4:	2a00      	cmp	r2, #0
 801a7f6:	d15b      	bne.n	801a8b0 <__ieee754_pow+0x150>
 801a7f8:	4b5b      	ldr	r3, [pc, #364]	; (801a968 <__ieee754_pow+0x208>)
 801a7fa:	4598      	cmp	r8, r3
 801a7fc:	d124      	bne.n	801a848 <__ieee754_pow+0xe8>
 801a7fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a802:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a806:	ea53 030a 	orrs.w	r3, r3, sl
 801a80a:	f000 8476 	beq.w	801b0fa <__ieee754_pow+0x99a>
 801a80e:	4b59      	ldr	r3, [pc, #356]	; (801a974 <__ieee754_pow+0x214>)
 801a810:	429c      	cmp	r4, r3
 801a812:	dd2d      	ble.n	801a870 <__ieee754_pow+0x110>
 801a814:	f1b9 0f00 	cmp.w	r9, #0
 801a818:	f280 8473 	bge.w	801b102 <__ieee754_pow+0x9a2>
 801a81c:	2000      	movs	r0, #0
 801a81e:	2100      	movs	r1, #0
 801a820:	ec41 0b10 	vmov	d0, r0, r1
 801a824:	b011      	add	sp, #68	; 0x44
 801a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82a:	2a00      	cmp	r2, #0
 801a82c:	d13e      	bne.n	801a8ac <__ieee754_pow+0x14c>
 801a82e:	f1c3 0314 	rsb	r3, r3, #20
 801a832:	fa48 f103 	asr.w	r1, r8, r3
 801a836:	fa01 f303 	lsl.w	r3, r1, r3
 801a83a:	4543      	cmp	r3, r8
 801a83c:	f040 8469 	bne.w	801b112 <__ieee754_pow+0x9b2>
 801a840:	f001 0101 	and.w	r1, r1, #1
 801a844:	f1c1 0b02 	rsb	fp, r1, #2
 801a848:	4b4b      	ldr	r3, [pc, #300]	; (801a978 <__ieee754_pow+0x218>)
 801a84a:	4598      	cmp	r8, r3
 801a84c:	d118      	bne.n	801a880 <__ieee754_pow+0x120>
 801a84e:	f1b9 0f00 	cmp.w	r9, #0
 801a852:	f280 845a 	bge.w	801b10a <__ieee754_pow+0x9aa>
 801a856:	4948      	ldr	r1, [pc, #288]	; (801a978 <__ieee754_pow+0x218>)
 801a858:	4632      	mov	r2, r6
 801a85a:	463b      	mov	r3, r7
 801a85c:	2000      	movs	r0, #0
 801a85e:	f7e6 f805 	bl	800086c <__aeabi_ddiv>
 801a862:	e7dd      	b.n	801a820 <__ieee754_pow+0xc0>
 801a864:	f04f 0b02 	mov.w	fp, #2
 801a868:	e7c4      	b.n	801a7f4 <__ieee754_pow+0x94>
 801a86a:	f04f 0b00 	mov.w	fp, #0
 801a86e:	e7c1      	b.n	801a7f4 <__ieee754_pow+0x94>
 801a870:	f1b9 0f00 	cmp.w	r9, #0
 801a874:	dad2      	bge.n	801a81c <__ieee754_pow+0xbc>
 801a876:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a87a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a87e:	e7cf      	b.n	801a820 <__ieee754_pow+0xc0>
 801a880:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a884:	d106      	bne.n	801a894 <__ieee754_pow+0x134>
 801a886:	4632      	mov	r2, r6
 801a888:	463b      	mov	r3, r7
 801a88a:	4610      	mov	r0, r2
 801a88c:	4619      	mov	r1, r3
 801a88e:	f7e5 fec3 	bl	8000618 <__aeabi_dmul>
 801a892:	e7c5      	b.n	801a820 <__ieee754_pow+0xc0>
 801a894:	4b39      	ldr	r3, [pc, #228]	; (801a97c <__ieee754_pow+0x21c>)
 801a896:	4599      	cmp	r9, r3
 801a898:	d10a      	bne.n	801a8b0 <__ieee754_pow+0x150>
 801a89a:	2d00      	cmp	r5, #0
 801a89c:	db08      	blt.n	801a8b0 <__ieee754_pow+0x150>
 801a89e:	ec47 6b10 	vmov	d0, r6, r7
 801a8a2:	b011      	add	sp, #68	; 0x44
 801a8a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a8:	f000 bc68 	b.w	801b17c <__ieee754_sqrt>
 801a8ac:	f04f 0b00 	mov.w	fp, #0
 801a8b0:	ec47 6b10 	vmov	d0, r6, r7
 801a8b4:	f000 feb8 	bl	801b628 <fabs>
 801a8b8:	ec51 0b10 	vmov	r0, r1, d0
 801a8bc:	f1ba 0f00 	cmp.w	sl, #0
 801a8c0:	d127      	bne.n	801a912 <__ieee754_pow+0x1b2>
 801a8c2:	b124      	cbz	r4, 801a8ce <__ieee754_pow+0x16e>
 801a8c4:	4b2c      	ldr	r3, [pc, #176]	; (801a978 <__ieee754_pow+0x218>)
 801a8c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	d121      	bne.n	801a912 <__ieee754_pow+0x1b2>
 801a8ce:	f1b9 0f00 	cmp.w	r9, #0
 801a8d2:	da05      	bge.n	801a8e0 <__ieee754_pow+0x180>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	2000      	movs	r0, #0
 801a8da:	4927      	ldr	r1, [pc, #156]	; (801a978 <__ieee754_pow+0x218>)
 801a8dc:	f7e5 ffc6 	bl	800086c <__aeabi_ddiv>
 801a8e0:	2d00      	cmp	r5, #0
 801a8e2:	da9d      	bge.n	801a820 <__ieee754_pow+0xc0>
 801a8e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a8e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a8ec:	ea54 030b 	orrs.w	r3, r4, fp
 801a8f0:	d108      	bne.n	801a904 <__ieee754_pow+0x1a4>
 801a8f2:	4602      	mov	r2, r0
 801a8f4:	460b      	mov	r3, r1
 801a8f6:	4610      	mov	r0, r2
 801a8f8:	4619      	mov	r1, r3
 801a8fa:	f7e5 fcd5 	bl	80002a8 <__aeabi_dsub>
 801a8fe:	4602      	mov	r2, r0
 801a900:	460b      	mov	r3, r1
 801a902:	e7ac      	b.n	801a85e <__ieee754_pow+0xfe>
 801a904:	f1bb 0f01 	cmp.w	fp, #1
 801a908:	d18a      	bne.n	801a820 <__ieee754_pow+0xc0>
 801a90a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a90e:	4619      	mov	r1, r3
 801a910:	e786      	b.n	801a820 <__ieee754_pow+0xc0>
 801a912:	0fed      	lsrs	r5, r5, #31
 801a914:	1e6b      	subs	r3, r5, #1
 801a916:	930d      	str	r3, [sp, #52]	; 0x34
 801a918:	ea5b 0303 	orrs.w	r3, fp, r3
 801a91c:	d102      	bne.n	801a924 <__ieee754_pow+0x1c4>
 801a91e:	4632      	mov	r2, r6
 801a920:	463b      	mov	r3, r7
 801a922:	e7e8      	b.n	801a8f6 <__ieee754_pow+0x196>
 801a924:	4b16      	ldr	r3, [pc, #88]	; (801a980 <__ieee754_pow+0x220>)
 801a926:	4598      	cmp	r8, r3
 801a928:	f340 80fe 	ble.w	801ab28 <__ieee754_pow+0x3c8>
 801a92c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a930:	4598      	cmp	r8, r3
 801a932:	dd0a      	ble.n	801a94a <__ieee754_pow+0x1ea>
 801a934:	4b0f      	ldr	r3, [pc, #60]	; (801a974 <__ieee754_pow+0x214>)
 801a936:	429c      	cmp	r4, r3
 801a938:	dc0d      	bgt.n	801a956 <__ieee754_pow+0x1f6>
 801a93a:	f1b9 0f00 	cmp.w	r9, #0
 801a93e:	f6bf af6d 	bge.w	801a81c <__ieee754_pow+0xbc>
 801a942:	a307      	add	r3, pc, #28	; (adr r3, 801a960 <__ieee754_pow+0x200>)
 801a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a948:	e79f      	b.n	801a88a <__ieee754_pow+0x12a>
 801a94a:	4b0e      	ldr	r3, [pc, #56]	; (801a984 <__ieee754_pow+0x224>)
 801a94c:	429c      	cmp	r4, r3
 801a94e:	ddf4      	ble.n	801a93a <__ieee754_pow+0x1da>
 801a950:	4b09      	ldr	r3, [pc, #36]	; (801a978 <__ieee754_pow+0x218>)
 801a952:	429c      	cmp	r4, r3
 801a954:	dd18      	ble.n	801a988 <__ieee754_pow+0x228>
 801a956:	f1b9 0f00 	cmp.w	r9, #0
 801a95a:	dcf2      	bgt.n	801a942 <__ieee754_pow+0x1e2>
 801a95c:	e75e      	b.n	801a81c <__ieee754_pow+0xbc>
 801a95e:	bf00      	nop
 801a960:	8800759c 	.word	0x8800759c
 801a964:	7e37e43c 	.word	0x7e37e43c
 801a968:	7ff00000 	.word	0x7ff00000
 801a96c:	0801c509 	.word	0x0801c509
 801a970:	433fffff 	.word	0x433fffff
 801a974:	3fefffff 	.word	0x3fefffff
 801a978:	3ff00000 	.word	0x3ff00000
 801a97c:	3fe00000 	.word	0x3fe00000
 801a980:	41e00000 	.word	0x41e00000
 801a984:	3feffffe 	.word	0x3feffffe
 801a988:	2200      	movs	r2, #0
 801a98a:	4b63      	ldr	r3, [pc, #396]	; (801ab18 <__ieee754_pow+0x3b8>)
 801a98c:	f7e5 fc8c 	bl	80002a8 <__aeabi_dsub>
 801a990:	a355      	add	r3, pc, #340	; (adr r3, 801aae8 <__ieee754_pow+0x388>)
 801a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a996:	4604      	mov	r4, r0
 801a998:	460d      	mov	r5, r1
 801a99a:	f7e5 fe3d 	bl	8000618 <__aeabi_dmul>
 801a99e:	a354      	add	r3, pc, #336	; (adr r3, 801aaf0 <__ieee754_pow+0x390>)
 801a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a4:	4606      	mov	r6, r0
 801a9a6:	460f      	mov	r7, r1
 801a9a8:	4620      	mov	r0, r4
 801a9aa:	4629      	mov	r1, r5
 801a9ac:	f7e5 fe34 	bl	8000618 <__aeabi_dmul>
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9b6:	4b59      	ldr	r3, [pc, #356]	; (801ab1c <__ieee754_pow+0x3bc>)
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	4629      	mov	r1, r5
 801a9bc:	f7e5 fe2c 	bl	8000618 <__aeabi_dmul>
 801a9c0:	4602      	mov	r2, r0
 801a9c2:	460b      	mov	r3, r1
 801a9c4:	a14c      	add	r1, pc, #304	; (adr r1, 801aaf8 <__ieee754_pow+0x398>)
 801a9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a9ca:	f7e5 fc6d 	bl	80002a8 <__aeabi_dsub>
 801a9ce:	4622      	mov	r2, r4
 801a9d0:	462b      	mov	r3, r5
 801a9d2:	f7e5 fe21 	bl	8000618 <__aeabi_dmul>
 801a9d6:	4602      	mov	r2, r0
 801a9d8:	460b      	mov	r3, r1
 801a9da:	2000      	movs	r0, #0
 801a9dc:	4950      	ldr	r1, [pc, #320]	; (801ab20 <__ieee754_pow+0x3c0>)
 801a9de:	f7e5 fc63 	bl	80002a8 <__aeabi_dsub>
 801a9e2:	4622      	mov	r2, r4
 801a9e4:	462b      	mov	r3, r5
 801a9e6:	4680      	mov	r8, r0
 801a9e8:	4689      	mov	r9, r1
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	4629      	mov	r1, r5
 801a9ee:	f7e5 fe13 	bl	8000618 <__aeabi_dmul>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	f7e5 fe0d 	bl	8000618 <__aeabi_dmul>
 801a9fe:	a340      	add	r3, pc, #256	; (adr r3, 801ab00 <__ieee754_pow+0x3a0>)
 801aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa04:	f7e5 fe08 	bl	8000618 <__aeabi_dmul>
 801aa08:	4602      	mov	r2, r0
 801aa0a:	460b      	mov	r3, r1
 801aa0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa10:	f7e5 fc4a 	bl	80002a8 <__aeabi_dsub>
 801aa14:	4602      	mov	r2, r0
 801aa16:	460b      	mov	r3, r1
 801aa18:	4604      	mov	r4, r0
 801aa1a:	460d      	mov	r5, r1
 801aa1c:	4630      	mov	r0, r6
 801aa1e:	4639      	mov	r1, r7
 801aa20:	f7e5 fc44 	bl	80002ac <__adddf3>
 801aa24:	2000      	movs	r0, #0
 801aa26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa2a:	4632      	mov	r2, r6
 801aa2c:	463b      	mov	r3, r7
 801aa2e:	f7e5 fc3b 	bl	80002a8 <__aeabi_dsub>
 801aa32:	4602      	mov	r2, r0
 801aa34:	460b      	mov	r3, r1
 801aa36:	4620      	mov	r0, r4
 801aa38:	4629      	mov	r1, r5
 801aa3a:	f7e5 fc35 	bl	80002a8 <__aeabi_dsub>
 801aa3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa40:	f10b 33ff 	add.w	r3, fp, #4294967295
 801aa44:	4313      	orrs	r3, r2
 801aa46:	4606      	mov	r6, r0
 801aa48:	460f      	mov	r7, r1
 801aa4a:	f040 81eb 	bne.w	801ae24 <__ieee754_pow+0x6c4>
 801aa4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ab08 <__ieee754_pow+0x3a8>
 801aa52:	e9dd 4500 	ldrd	r4, r5, [sp]
 801aa56:	2400      	movs	r4, #0
 801aa58:	4622      	mov	r2, r4
 801aa5a:	462b      	mov	r3, r5
 801aa5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aa64:	f7e5 fc20 	bl	80002a8 <__aeabi_dsub>
 801aa68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa6c:	f7e5 fdd4 	bl	8000618 <__aeabi_dmul>
 801aa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa74:	4680      	mov	r8, r0
 801aa76:	4689      	mov	r9, r1
 801aa78:	4630      	mov	r0, r6
 801aa7a:	4639      	mov	r1, r7
 801aa7c:	f7e5 fdcc 	bl	8000618 <__aeabi_dmul>
 801aa80:	4602      	mov	r2, r0
 801aa82:	460b      	mov	r3, r1
 801aa84:	4640      	mov	r0, r8
 801aa86:	4649      	mov	r1, r9
 801aa88:	f7e5 fc10 	bl	80002ac <__adddf3>
 801aa8c:	4622      	mov	r2, r4
 801aa8e:	462b      	mov	r3, r5
 801aa90:	4680      	mov	r8, r0
 801aa92:	4689      	mov	r9, r1
 801aa94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa98:	f7e5 fdbe 	bl	8000618 <__aeabi_dmul>
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	460d      	mov	r5, r1
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	4649      	mov	r1, r9
 801aaa6:	4640      	mov	r0, r8
 801aaa8:	e9cd 4500 	strd	r4, r5, [sp]
 801aaac:	f7e5 fbfe 	bl	80002ac <__adddf3>
 801aab0:	4b1c      	ldr	r3, [pc, #112]	; (801ab24 <__ieee754_pow+0x3c4>)
 801aab2:	4299      	cmp	r1, r3
 801aab4:	4606      	mov	r6, r0
 801aab6:	460f      	mov	r7, r1
 801aab8:	468b      	mov	fp, r1
 801aaba:	f340 82f7 	ble.w	801b0ac <__ieee754_pow+0x94c>
 801aabe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801aac2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801aac6:	4303      	orrs	r3, r0
 801aac8:	f000 81ea 	beq.w	801aea0 <__ieee754_pow+0x740>
 801aacc:	a310      	add	r3, pc, #64	; (adr r3, 801ab10 <__ieee754_pow+0x3b0>)
 801aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aad6:	f7e5 fd9f 	bl	8000618 <__aeabi_dmul>
 801aada:	a30d      	add	r3, pc, #52	; (adr r3, 801ab10 <__ieee754_pow+0x3b0>)
 801aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae0:	e6d5      	b.n	801a88e <__ieee754_pow+0x12e>
 801aae2:	bf00      	nop
 801aae4:	f3af 8000 	nop.w
 801aae8:	60000000 	.word	0x60000000
 801aaec:	3ff71547 	.word	0x3ff71547
 801aaf0:	f85ddf44 	.word	0xf85ddf44
 801aaf4:	3e54ae0b 	.word	0x3e54ae0b
 801aaf8:	55555555 	.word	0x55555555
 801aafc:	3fd55555 	.word	0x3fd55555
 801ab00:	652b82fe 	.word	0x652b82fe
 801ab04:	3ff71547 	.word	0x3ff71547
 801ab08:	00000000 	.word	0x00000000
 801ab0c:	bff00000 	.word	0xbff00000
 801ab10:	8800759c 	.word	0x8800759c
 801ab14:	7e37e43c 	.word	0x7e37e43c
 801ab18:	3ff00000 	.word	0x3ff00000
 801ab1c:	3fd00000 	.word	0x3fd00000
 801ab20:	3fe00000 	.word	0x3fe00000
 801ab24:	408fffff 	.word	0x408fffff
 801ab28:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ab2c:	f04f 0200 	mov.w	r2, #0
 801ab30:	da05      	bge.n	801ab3e <__ieee754_pow+0x3de>
 801ab32:	4bd3      	ldr	r3, [pc, #844]	; (801ae80 <__ieee754_pow+0x720>)
 801ab34:	f7e5 fd70 	bl	8000618 <__aeabi_dmul>
 801ab38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	1523      	asrs	r3, r4, #20
 801ab40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ab44:	4413      	add	r3, r2
 801ab46:	9309      	str	r3, [sp, #36]	; 0x24
 801ab48:	4bce      	ldr	r3, [pc, #824]	; (801ae84 <__ieee754_pow+0x724>)
 801ab4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ab4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ab52:	429c      	cmp	r4, r3
 801ab54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ab58:	dd08      	ble.n	801ab6c <__ieee754_pow+0x40c>
 801ab5a:	4bcb      	ldr	r3, [pc, #812]	; (801ae88 <__ieee754_pow+0x728>)
 801ab5c:	429c      	cmp	r4, r3
 801ab5e:	f340 815e 	ble.w	801ae1e <__ieee754_pow+0x6be>
 801ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab64:	3301      	adds	r3, #1
 801ab66:	9309      	str	r3, [sp, #36]	; 0x24
 801ab68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ab6c:	f04f 0a00 	mov.w	sl, #0
 801ab70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ab74:	930c      	str	r3, [sp, #48]	; 0x30
 801ab76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab78:	4bc4      	ldr	r3, [pc, #784]	; (801ae8c <__ieee754_pow+0x72c>)
 801ab7a:	4413      	add	r3, r2
 801ab7c:	ed93 7b00 	vldr	d7, [r3]
 801ab80:	4629      	mov	r1, r5
 801ab82:	ec53 2b17 	vmov	r2, r3, d7
 801ab86:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ab8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ab8e:	f7e5 fb8b 	bl	80002a8 <__aeabi_dsub>
 801ab92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ab96:	4606      	mov	r6, r0
 801ab98:	460f      	mov	r7, r1
 801ab9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ab9e:	f7e5 fb85 	bl	80002ac <__adddf3>
 801aba2:	4602      	mov	r2, r0
 801aba4:	460b      	mov	r3, r1
 801aba6:	2000      	movs	r0, #0
 801aba8:	49b9      	ldr	r1, [pc, #740]	; (801ae90 <__ieee754_pow+0x730>)
 801abaa:	f7e5 fe5f 	bl	800086c <__aeabi_ddiv>
 801abae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801abb2:	4602      	mov	r2, r0
 801abb4:	460b      	mov	r3, r1
 801abb6:	4630      	mov	r0, r6
 801abb8:	4639      	mov	r1, r7
 801abba:	f7e5 fd2d 	bl	8000618 <__aeabi_dmul>
 801abbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801abc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801abca:	2300      	movs	r3, #0
 801abcc:	9302      	str	r3, [sp, #8]
 801abce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801abd2:	106d      	asrs	r5, r5, #1
 801abd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801abd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801abdc:	2200      	movs	r2, #0
 801abde:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801abe2:	4640      	mov	r0, r8
 801abe4:	4649      	mov	r1, r9
 801abe6:	4614      	mov	r4, r2
 801abe8:	461d      	mov	r5, r3
 801abea:	f7e5 fd15 	bl	8000618 <__aeabi_dmul>
 801abee:	4602      	mov	r2, r0
 801abf0:	460b      	mov	r3, r1
 801abf2:	4630      	mov	r0, r6
 801abf4:	4639      	mov	r1, r7
 801abf6:	f7e5 fb57 	bl	80002a8 <__aeabi_dsub>
 801abfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801abfe:	4606      	mov	r6, r0
 801ac00:	460f      	mov	r7, r1
 801ac02:	4620      	mov	r0, r4
 801ac04:	4629      	mov	r1, r5
 801ac06:	f7e5 fb4f 	bl	80002a8 <__aeabi_dsub>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ac12:	f7e5 fb49 	bl	80002a8 <__aeabi_dsub>
 801ac16:	4642      	mov	r2, r8
 801ac18:	464b      	mov	r3, r9
 801ac1a:	f7e5 fcfd 	bl	8000618 <__aeabi_dmul>
 801ac1e:	4602      	mov	r2, r0
 801ac20:	460b      	mov	r3, r1
 801ac22:	4630      	mov	r0, r6
 801ac24:	4639      	mov	r1, r7
 801ac26:	f7e5 fb3f 	bl	80002a8 <__aeabi_dsub>
 801ac2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ac2e:	f7e5 fcf3 	bl	8000618 <__aeabi_dmul>
 801ac32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ac3a:	4610      	mov	r0, r2
 801ac3c:	4619      	mov	r1, r3
 801ac3e:	f7e5 fceb 	bl	8000618 <__aeabi_dmul>
 801ac42:	a37b      	add	r3, pc, #492	; (adr r3, 801ae30 <__ieee754_pow+0x6d0>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	4604      	mov	r4, r0
 801ac4a:	460d      	mov	r5, r1
 801ac4c:	f7e5 fce4 	bl	8000618 <__aeabi_dmul>
 801ac50:	a379      	add	r3, pc, #484	; (adr r3, 801ae38 <__ieee754_pow+0x6d8>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 fb29 	bl	80002ac <__adddf3>
 801ac5a:	4622      	mov	r2, r4
 801ac5c:	462b      	mov	r3, r5
 801ac5e:	f7e5 fcdb 	bl	8000618 <__aeabi_dmul>
 801ac62:	a377      	add	r3, pc, #476	; (adr r3, 801ae40 <__ieee754_pow+0x6e0>)
 801ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac68:	f7e5 fb20 	bl	80002ac <__adddf3>
 801ac6c:	4622      	mov	r2, r4
 801ac6e:	462b      	mov	r3, r5
 801ac70:	f7e5 fcd2 	bl	8000618 <__aeabi_dmul>
 801ac74:	a374      	add	r3, pc, #464	; (adr r3, 801ae48 <__ieee754_pow+0x6e8>)
 801ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7a:	f7e5 fb17 	bl	80002ac <__adddf3>
 801ac7e:	4622      	mov	r2, r4
 801ac80:	462b      	mov	r3, r5
 801ac82:	f7e5 fcc9 	bl	8000618 <__aeabi_dmul>
 801ac86:	a372      	add	r3, pc, #456	; (adr r3, 801ae50 <__ieee754_pow+0x6f0>)
 801ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8c:	f7e5 fb0e 	bl	80002ac <__adddf3>
 801ac90:	4622      	mov	r2, r4
 801ac92:	462b      	mov	r3, r5
 801ac94:	f7e5 fcc0 	bl	8000618 <__aeabi_dmul>
 801ac98:	a36f      	add	r3, pc, #444	; (adr r3, 801ae58 <__ieee754_pow+0x6f8>)
 801ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9e:	f7e5 fb05 	bl	80002ac <__adddf3>
 801aca2:	4622      	mov	r2, r4
 801aca4:	4606      	mov	r6, r0
 801aca6:	460f      	mov	r7, r1
 801aca8:	462b      	mov	r3, r5
 801acaa:	4620      	mov	r0, r4
 801acac:	4629      	mov	r1, r5
 801acae:	f7e5 fcb3 	bl	8000618 <__aeabi_dmul>
 801acb2:	4602      	mov	r2, r0
 801acb4:	460b      	mov	r3, r1
 801acb6:	4630      	mov	r0, r6
 801acb8:	4639      	mov	r1, r7
 801acba:	f7e5 fcad 	bl	8000618 <__aeabi_dmul>
 801acbe:	4642      	mov	r2, r8
 801acc0:	4604      	mov	r4, r0
 801acc2:	460d      	mov	r5, r1
 801acc4:	464b      	mov	r3, r9
 801acc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801acca:	f7e5 faef 	bl	80002ac <__adddf3>
 801acce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801acd2:	f7e5 fca1 	bl	8000618 <__aeabi_dmul>
 801acd6:	4622      	mov	r2, r4
 801acd8:	462b      	mov	r3, r5
 801acda:	f7e5 fae7 	bl	80002ac <__adddf3>
 801acde:	4642      	mov	r2, r8
 801ace0:	4606      	mov	r6, r0
 801ace2:	460f      	mov	r7, r1
 801ace4:	464b      	mov	r3, r9
 801ace6:	4640      	mov	r0, r8
 801ace8:	4649      	mov	r1, r9
 801acea:	f7e5 fc95 	bl	8000618 <__aeabi_dmul>
 801acee:	2200      	movs	r2, #0
 801acf0:	4b68      	ldr	r3, [pc, #416]	; (801ae94 <__ieee754_pow+0x734>)
 801acf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801acf6:	f7e5 fad9 	bl	80002ac <__adddf3>
 801acfa:	4632      	mov	r2, r6
 801acfc:	463b      	mov	r3, r7
 801acfe:	f7e5 fad5 	bl	80002ac <__adddf3>
 801ad02:	9802      	ldr	r0, [sp, #8]
 801ad04:	460d      	mov	r5, r1
 801ad06:	4604      	mov	r4, r0
 801ad08:	4602      	mov	r2, r0
 801ad0a:	460b      	mov	r3, r1
 801ad0c:	4640      	mov	r0, r8
 801ad0e:	4649      	mov	r1, r9
 801ad10:	f7e5 fc82 	bl	8000618 <__aeabi_dmul>
 801ad14:	2200      	movs	r2, #0
 801ad16:	4680      	mov	r8, r0
 801ad18:	4689      	mov	r9, r1
 801ad1a:	4b5e      	ldr	r3, [pc, #376]	; (801ae94 <__ieee754_pow+0x734>)
 801ad1c:	4620      	mov	r0, r4
 801ad1e:	4629      	mov	r1, r5
 801ad20:	f7e5 fac2 	bl	80002a8 <__aeabi_dsub>
 801ad24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad28:	f7e5 fabe 	bl	80002a8 <__aeabi_dsub>
 801ad2c:	4602      	mov	r2, r0
 801ad2e:	460b      	mov	r3, r1
 801ad30:	4630      	mov	r0, r6
 801ad32:	4639      	mov	r1, r7
 801ad34:	f7e5 fab8 	bl	80002a8 <__aeabi_dsub>
 801ad38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad3c:	f7e5 fc6c 	bl	8000618 <__aeabi_dmul>
 801ad40:	4622      	mov	r2, r4
 801ad42:	4606      	mov	r6, r0
 801ad44:	460f      	mov	r7, r1
 801ad46:	462b      	mov	r3, r5
 801ad48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ad4c:	f7e5 fc64 	bl	8000618 <__aeabi_dmul>
 801ad50:	4602      	mov	r2, r0
 801ad52:	460b      	mov	r3, r1
 801ad54:	4630      	mov	r0, r6
 801ad56:	4639      	mov	r1, r7
 801ad58:	f7e5 faa8 	bl	80002ac <__adddf3>
 801ad5c:	4606      	mov	r6, r0
 801ad5e:	460f      	mov	r7, r1
 801ad60:	4602      	mov	r2, r0
 801ad62:	460b      	mov	r3, r1
 801ad64:	4640      	mov	r0, r8
 801ad66:	4649      	mov	r1, r9
 801ad68:	f7e5 faa0 	bl	80002ac <__adddf3>
 801ad6c:	9802      	ldr	r0, [sp, #8]
 801ad6e:	a33c      	add	r3, pc, #240	; (adr r3, 801ae60 <__ieee754_pow+0x700>)
 801ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad74:	4604      	mov	r4, r0
 801ad76:	460d      	mov	r5, r1
 801ad78:	f7e5 fc4e 	bl	8000618 <__aeabi_dmul>
 801ad7c:	4642      	mov	r2, r8
 801ad7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ad82:	464b      	mov	r3, r9
 801ad84:	4620      	mov	r0, r4
 801ad86:	4629      	mov	r1, r5
 801ad88:	f7e5 fa8e 	bl	80002a8 <__aeabi_dsub>
 801ad8c:	4602      	mov	r2, r0
 801ad8e:	460b      	mov	r3, r1
 801ad90:	4630      	mov	r0, r6
 801ad92:	4639      	mov	r1, r7
 801ad94:	f7e5 fa88 	bl	80002a8 <__aeabi_dsub>
 801ad98:	a333      	add	r3, pc, #204	; (adr r3, 801ae68 <__ieee754_pow+0x708>)
 801ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9e:	f7e5 fc3b 	bl	8000618 <__aeabi_dmul>
 801ada2:	a333      	add	r3, pc, #204	; (adr r3, 801ae70 <__ieee754_pow+0x710>)
 801ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ada8:	4606      	mov	r6, r0
 801adaa:	460f      	mov	r7, r1
 801adac:	4620      	mov	r0, r4
 801adae:	4629      	mov	r1, r5
 801adb0:	f7e5 fc32 	bl	8000618 <__aeabi_dmul>
 801adb4:	4602      	mov	r2, r0
 801adb6:	460b      	mov	r3, r1
 801adb8:	4630      	mov	r0, r6
 801adba:	4639      	mov	r1, r7
 801adbc:	f7e5 fa76 	bl	80002ac <__adddf3>
 801adc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adc2:	4b35      	ldr	r3, [pc, #212]	; (801ae98 <__ieee754_pow+0x738>)
 801adc4:	4413      	add	r3, r2
 801adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adca:	f7e5 fa6f 	bl	80002ac <__adddf3>
 801adce:	4604      	mov	r4, r0
 801add0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801add2:	460d      	mov	r5, r1
 801add4:	f7e5 fbb6 	bl	8000544 <__aeabi_i2d>
 801add8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adda:	4b30      	ldr	r3, [pc, #192]	; (801ae9c <__ieee754_pow+0x73c>)
 801addc:	4413      	add	r3, r2
 801adde:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ade2:	4606      	mov	r6, r0
 801ade4:	460f      	mov	r7, r1
 801ade6:	4622      	mov	r2, r4
 801ade8:	462b      	mov	r3, r5
 801adea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801adee:	f7e5 fa5d 	bl	80002ac <__adddf3>
 801adf2:	4642      	mov	r2, r8
 801adf4:	464b      	mov	r3, r9
 801adf6:	f7e5 fa59 	bl	80002ac <__adddf3>
 801adfa:	4632      	mov	r2, r6
 801adfc:	463b      	mov	r3, r7
 801adfe:	f7e5 fa55 	bl	80002ac <__adddf3>
 801ae02:	9802      	ldr	r0, [sp, #8]
 801ae04:	4632      	mov	r2, r6
 801ae06:	463b      	mov	r3, r7
 801ae08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae0c:	f7e5 fa4c 	bl	80002a8 <__aeabi_dsub>
 801ae10:	4642      	mov	r2, r8
 801ae12:	464b      	mov	r3, r9
 801ae14:	f7e5 fa48 	bl	80002a8 <__aeabi_dsub>
 801ae18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae1c:	e607      	b.n	801aa2e <__ieee754_pow+0x2ce>
 801ae1e:	f04f 0a01 	mov.w	sl, #1
 801ae22:	e6a5      	b.n	801ab70 <__ieee754_pow+0x410>
 801ae24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801ae78 <__ieee754_pow+0x718>
 801ae28:	e613      	b.n	801aa52 <__ieee754_pow+0x2f2>
 801ae2a:	bf00      	nop
 801ae2c:	f3af 8000 	nop.w
 801ae30:	4a454eef 	.word	0x4a454eef
 801ae34:	3fca7e28 	.word	0x3fca7e28
 801ae38:	93c9db65 	.word	0x93c9db65
 801ae3c:	3fcd864a 	.word	0x3fcd864a
 801ae40:	a91d4101 	.word	0xa91d4101
 801ae44:	3fd17460 	.word	0x3fd17460
 801ae48:	518f264d 	.word	0x518f264d
 801ae4c:	3fd55555 	.word	0x3fd55555
 801ae50:	db6fabff 	.word	0xdb6fabff
 801ae54:	3fdb6db6 	.word	0x3fdb6db6
 801ae58:	33333303 	.word	0x33333303
 801ae5c:	3fe33333 	.word	0x3fe33333
 801ae60:	e0000000 	.word	0xe0000000
 801ae64:	3feec709 	.word	0x3feec709
 801ae68:	dc3a03fd 	.word	0xdc3a03fd
 801ae6c:	3feec709 	.word	0x3feec709
 801ae70:	145b01f5 	.word	0x145b01f5
 801ae74:	be3e2fe0 	.word	0xbe3e2fe0
 801ae78:	00000000 	.word	0x00000000
 801ae7c:	3ff00000 	.word	0x3ff00000
 801ae80:	43400000 	.word	0x43400000
 801ae84:	0003988e 	.word	0x0003988e
 801ae88:	000bb679 	.word	0x000bb679
 801ae8c:	0801c628 	.word	0x0801c628
 801ae90:	3ff00000 	.word	0x3ff00000
 801ae94:	40080000 	.word	0x40080000
 801ae98:	0801c648 	.word	0x0801c648
 801ae9c:	0801c638 	.word	0x0801c638
 801aea0:	a3b4      	add	r3, pc, #720	; (adr r3, 801b174 <__ieee754_pow+0xa14>)
 801aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea6:	4640      	mov	r0, r8
 801aea8:	4649      	mov	r1, r9
 801aeaa:	f7e5 f9ff 	bl	80002ac <__adddf3>
 801aeae:	4622      	mov	r2, r4
 801aeb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aeb4:	462b      	mov	r3, r5
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	4639      	mov	r1, r7
 801aeba:	f7e5 f9f5 	bl	80002a8 <__aeabi_dsub>
 801aebe:	4602      	mov	r2, r0
 801aec0:	460b      	mov	r3, r1
 801aec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aec6:	f7e5 fe37 	bl	8000b38 <__aeabi_dcmpgt>
 801aeca:	2800      	cmp	r0, #0
 801aecc:	f47f adfe 	bne.w	801aacc <__ieee754_pow+0x36c>
 801aed0:	4aa3      	ldr	r2, [pc, #652]	; (801b160 <__ieee754_pow+0xa00>)
 801aed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aed6:	4293      	cmp	r3, r2
 801aed8:	f340 810a 	ble.w	801b0f0 <__ieee754_pow+0x990>
 801aedc:	151b      	asrs	r3, r3, #20
 801aede:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801aee2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801aee6:	fa4a f303 	asr.w	r3, sl, r3
 801aeea:	445b      	add	r3, fp
 801aeec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801aef0:	4e9c      	ldr	r6, [pc, #624]	; (801b164 <__ieee754_pow+0xa04>)
 801aef2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aef6:	4116      	asrs	r6, r2
 801aef8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801aefc:	2000      	movs	r0, #0
 801aefe:	ea23 0106 	bic.w	r1, r3, r6
 801af02:	f1c2 0214 	rsb	r2, r2, #20
 801af06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801af0a:	fa4a fa02 	asr.w	sl, sl, r2
 801af0e:	f1bb 0f00 	cmp.w	fp, #0
 801af12:	4602      	mov	r2, r0
 801af14:	460b      	mov	r3, r1
 801af16:	4620      	mov	r0, r4
 801af18:	4629      	mov	r1, r5
 801af1a:	bfb8      	it	lt
 801af1c:	f1ca 0a00 	rsblt	sl, sl, #0
 801af20:	f7e5 f9c2 	bl	80002a8 <__aeabi_dsub>
 801af24:	e9cd 0100 	strd	r0, r1, [sp]
 801af28:	4642      	mov	r2, r8
 801af2a:	464b      	mov	r3, r9
 801af2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af30:	f7e5 f9bc 	bl	80002ac <__adddf3>
 801af34:	2000      	movs	r0, #0
 801af36:	a378      	add	r3, pc, #480	; (adr r3, 801b118 <__ieee754_pow+0x9b8>)
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	4604      	mov	r4, r0
 801af3e:	460d      	mov	r5, r1
 801af40:	f7e5 fb6a 	bl	8000618 <__aeabi_dmul>
 801af44:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af48:	4606      	mov	r6, r0
 801af4a:	460f      	mov	r7, r1
 801af4c:	4620      	mov	r0, r4
 801af4e:	4629      	mov	r1, r5
 801af50:	f7e5 f9aa 	bl	80002a8 <__aeabi_dsub>
 801af54:	4602      	mov	r2, r0
 801af56:	460b      	mov	r3, r1
 801af58:	4640      	mov	r0, r8
 801af5a:	4649      	mov	r1, r9
 801af5c:	f7e5 f9a4 	bl	80002a8 <__aeabi_dsub>
 801af60:	a36f      	add	r3, pc, #444	; (adr r3, 801b120 <__ieee754_pow+0x9c0>)
 801af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af66:	f7e5 fb57 	bl	8000618 <__aeabi_dmul>
 801af6a:	a36f      	add	r3, pc, #444	; (adr r3, 801b128 <__ieee754_pow+0x9c8>)
 801af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af70:	4680      	mov	r8, r0
 801af72:	4689      	mov	r9, r1
 801af74:	4620      	mov	r0, r4
 801af76:	4629      	mov	r1, r5
 801af78:	f7e5 fb4e 	bl	8000618 <__aeabi_dmul>
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	4640      	mov	r0, r8
 801af82:	4649      	mov	r1, r9
 801af84:	f7e5 f992 	bl	80002ac <__adddf3>
 801af88:	4604      	mov	r4, r0
 801af8a:	460d      	mov	r5, r1
 801af8c:	4602      	mov	r2, r0
 801af8e:	460b      	mov	r3, r1
 801af90:	4630      	mov	r0, r6
 801af92:	4639      	mov	r1, r7
 801af94:	f7e5 f98a 	bl	80002ac <__adddf3>
 801af98:	4632      	mov	r2, r6
 801af9a:	463b      	mov	r3, r7
 801af9c:	4680      	mov	r8, r0
 801af9e:	4689      	mov	r9, r1
 801afa0:	f7e5 f982 	bl	80002a8 <__aeabi_dsub>
 801afa4:	4602      	mov	r2, r0
 801afa6:	460b      	mov	r3, r1
 801afa8:	4620      	mov	r0, r4
 801afaa:	4629      	mov	r1, r5
 801afac:	f7e5 f97c 	bl	80002a8 <__aeabi_dsub>
 801afb0:	4642      	mov	r2, r8
 801afb2:	4606      	mov	r6, r0
 801afb4:	460f      	mov	r7, r1
 801afb6:	464b      	mov	r3, r9
 801afb8:	4640      	mov	r0, r8
 801afba:	4649      	mov	r1, r9
 801afbc:	f7e5 fb2c 	bl	8000618 <__aeabi_dmul>
 801afc0:	a35b      	add	r3, pc, #364	; (adr r3, 801b130 <__ieee754_pow+0x9d0>)
 801afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc6:	4604      	mov	r4, r0
 801afc8:	460d      	mov	r5, r1
 801afca:	f7e5 fb25 	bl	8000618 <__aeabi_dmul>
 801afce:	a35a      	add	r3, pc, #360	; (adr r3, 801b138 <__ieee754_pow+0x9d8>)
 801afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd4:	f7e5 f968 	bl	80002a8 <__aeabi_dsub>
 801afd8:	4622      	mov	r2, r4
 801afda:	462b      	mov	r3, r5
 801afdc:	f7e5 fb1c 	bl	8000618 <__aeabi_dmul>
 801afe0:	a357      	add	r3, pc, #348	; (adr r3, 801b140 <__ieee754_pow+0x9e0>)
 801afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe6:	f7e5 f961 	bl	80002ac <__adddf3>
 801afea:	4622      	mov	r2, r4
 801afec:	462b      	mov	r3, r5
 801afee:	f7e5 fb13 	bl	8000618 <__aeabi_dmul>
 801aff2:	a355      	add	r3, pc, #340	; (adr r3, 801b148 <__ieee754_pow+0x9e8>)
 801aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff8:	f7e5 f956 	bl	80002a8 <__aeabi_dsub>
 801affc:	4622      	mov	r2, r4
 801affe:	462b      	mov	r3, r5
 801b000:	f7e5 fb0a 	bl	8000618 <__aeabi_dmul>
 801b004:	a352      	add	r3, pc, #328	; (adr r3, 801b150 <__ieee754_pow+0x9f0>)
 801b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00a:	f7e5 f94f 	bl	80002ac <__adddf3>
 801b00e:	4622      	mov	r2, r4
 801b010:	462b      	mov	r3, r5
 801b012:	f7e5 fb01 	bl	8000618 <__aeabi_dmul>
 801b016:	4602      	mov	r2, r0
 801b018:	460b      	mov	r3, r1
 801b01a:	4640      	mov	r0, r8
 801b01c:	4649      	mov	r1, r9
 801b01e:	f7e5 f943 	bl	80002a8 <__aeabi_dsub>
 801b022:	4604      	mov	r4, r0
 801b024:	460d      	mov	r5, r1
 801b026:	4602      	mov	r2, r0
 801b028:	460b      	mov	r3, r1
 801b02a:	4640      	mov	r0, r8
 801b02c:	4649      	mov	r1, r9
 801b02e:	f7e5 faf3 	bl	8000618 <__aeabi_dmul>
 801b032:	2200      	movs	r2, #0
 801b034:	e9cd 0100 	strd	r0, r1, [sp]
 801b038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b03c:	4620      	mov	r0, r4
 801b03e:	4629      	mov	r1, r5
 801b040:	f7e5 f932 	bl	80002a8 <__aeabi_dsub>
 801b044:	4602      	mov	r2, r0
 801b046:	460b      	mov	r3, r1
 801b048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b04c:	f7e5 fc0e 	bl	800086c <__aeabi_ddiv>
 801b050:	4632      	mov	r2, r6
 801b052:	4604      	mov	r4, r0
 801b054:	460d      	mov	r5, r1
 801b056:	463b      	mov	r3, r7
 801b058:	4640      	mov	r0, r8
 801b05a:	4649      	mov	r1, r9
 801b05c:	f7e5 fadc 	bl	8000618 <__aeabi_dmul>
 801b060:	4632      	mov	r2, r6
 801b062:	463b      	mov	r3, r7
 801b064:	f7e5 f922 	bl	80002ac <__adddf3>
 801b068:	4602      	mov	r2, r0
 801b06a:	460b      	mov	r3, r1
 801b06c:	4620      	mov	r0, r4
 801b06e:	4629      	mov	r1, r5
 801b070:	f7e5 f91a 	bl	80002a8 <__aeabi_dsub>
 801b074:	4642      	mov	r2, r8
 801b076:	464b      	mov	r3, r9
 801b078:	f7e5 f916 	bl	80002a8 <__aeabi_dsub>
 801b07c:	4602      	mov	r2, r0
 801b07e:	460b      	mov	r3, r1
 801b080:	2000      	movs	r0, #0
 801b082:	4939      	ldr	r1, [pc, #228]	; (801b168 <__ieee754_pow+0xa08>)
 801b084:	f7e5 f910 	bl	80002a8 <__aeabi_dsub>
 801b088:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801b08c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	da2f      	bge.n	801b0f6 <__ieee754_pow+0x996>
 801b096:	4650      	mov	r0, sl
 801b098:	ec43 2b10 	vmov	d0, r2, r3
 801b09c:	f000 fb64 	bl	801b768 <scalbn>
 801b0a0:	ec51 0b10 	vmov	r0, r1, d0
 801b0a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b0a8:	f7ff bbf1 	b.w	801a88e <__ieee754_pow+0x12e>
 801b0ac:	4b2f      	ldr	r3, [pc, #188]	; (801b16c <__ieee754_pow+0xa0c>)
 801b0ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b0b2:	429e      	cmp	r6, r3
 801b0b4:	f77f af0c 	ble.w	801aed0 <__ieee754_pow+0x770>
 801b0b8:	4b2d      	ldr	r3, [pc, #180]	; (801b170 <__ieee754_pow+0xa10>)
 801b0ba:	440b      	add	r3, r1
 801b0bc:	4303      	orrs	r3, r0
 801b0be:	d00b      	beq.n	801b0d8 <__ieee754_pow+0x978>
 801b0c0:	a325      	add	r3, pc, #148	; (adr r3, 801b158 <__ieee754_pow+0x9f8>)
 801b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0ca:	f7e5 faa5 	bl	8000618 <__aeabi_dmul>
 801b0ce:	a322      	add	r3, pc, #136	; (adr r3, 801b158 <__ieee754_pow+0x9f8>)
 801b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d4:	f7ff bbdb 	b.w	801a88e <__ieee754_pow+0x12e>
 801b0d8:	4622      	mov	r2, r4
 801b0da:	462b      	mov	r3, r5
 801b0dc:	f7e5 f8e4 	bl	80002a8 <__aeabi_dsub>
 801b0e0:	4642      	mov	r2, r8
 801b0e2:	464b      	mov	r3, r9
 801b0e4:	f7e5 fd1e 	bl	8000b24 <__aeabi_dcmpge>
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	f43f aef1 	beq.w	801aed0 <__ieee754_pow+0x770>
 801b0ee:	e7e7      	b.n	801b0c0 <__ieee754_pow+0x960>
 801b0f0:	f04f 0a00 	mov.w	sl, #0
 801b0f4:	e718      	b.n	801af28 <__ieee754_pow+0x7c8>
 801b0f6:	4621      	mov	r1, r4
 801b0f8:	e7d4      	b.n	801b0a4 <__ieee754_pow+0x944>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	491a      	ldr	r1, [pc, #104]	; (801b168 <__ieee754_pow+0xa08>)
 801b0fe:	f7ff bb8f 	b.w	801a820 <__ieee754_pow+0xc0>
 801b102:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b106:	f7ff bb8b 	b.w	801a820 <__ieee754_pow+0xc0>
 801b10a:	4630      	mov	r0, r6
 801b10c:	4639      	mov	r1, r7
 801b10e:	f7ff bb87 	b.w	801a820 <__ieee754_pow+0xc0>
 801b112:	4693      	mov	fp, r2
 801b114:	f7ff bb98 	b.w	801a848 <__ieee754_pow+0xe8>
 801b118:	00000000 	.word	0x00000000
 801b11c:	3fe62e43 	.word	0x3fe62e43
 801b120:	fefa39ef 	.word	0xfefa39ef
 801b124:	3fe62e42 	.word	0x3fe62e42
 801b128:	0ca86c39 	.word	0x0ca86c39
 801b12c:	be205c61 	.word	0xbe205c61
 801b130:	72bea4d0 	.word	0x72bea4d0
 801b134:	3e663769 	.word	0x3e663769
 801b138:	c5d26bf1 	.word	0xc5d26bf1
 801b13c:	3ebbbd41 	.word	0x3ebbbd41
 801b140:	af25de2c 	.word	0xaf25de2c
 801b144:	3f11566a 	.word	0x3f11566a
 801b148:	16bebd93 	.word	0x16bebd93
 801b14c:	3f66c16c 	.word	0x3f66c16c
 801b150:	5555553e 	.word	0x5555553e
 801b154:	3fc55555 	.word	0x3fc55555
 801b158:	c2f8f359 	.word	0xc2f8f359
 801b15c:	01a56e1f 	.word	0x01a56e1f
 801b160:	3fe00000 	.word	0x3fe00000
 801b164:	000fffff 	.word	0x000fffff
 801b168:	3ff00000 	.word	0x3ff00000
 801b16c:	4090cbff 	.word	0x4090cbff
 801b170:	3f6f3400 	.word	0x3f6f3400
 801b174:	652b82fe 	.word	0x652b82fe
 801b178:	3c971547 	.word	0x3c971547

0801b17c <__ieee754_sqrt>:
 801b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b180:	4955      	ldr	r1, [pc, #340]	; (801b2d8 <__ieee754_sqrt+0x15c>)
 801b182:	ec55 4b10 	vmov	r4, r5, d0
 801b186:	43a9      	bics	r1, r5
 801b188:	462b      	mov	r3, r5
 801b18a:	462a      	mov	r2, r5
 801b18c:	d112      	bne.n	801b1b4 <__ieee754_sqrt+0x38>
 801b18e:	ee10 2a10 	vmov	r2, s0
 801b192:	ee10 0a10 	vmov	r0, s0
 801b196:	4629      	mov	r1, r5
 801b198:	f7e5 fa3e 	bl	8000618 <__aeabi_dmul>
 801b19c:	4602      	mov	r2, r0
 801b19e:	460b      	mov	r3, r1
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	4629      	mov	r1, r5
 801b1a4:	f7e5 f882 	bl	80002ac <__adddf3>
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	460d      	mov	r5, r1
 801b1ac:	ec45 4b10 	vmov	d0, r4, r5
 801b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1b4:	2d00      	cmp	r5, #0
 801b1b6:	ee10 0a10 	vmov	r0, s0
 801b1ba:	4621      	mov	r1, r4
 801b1bc:	dc0f      	bgt.n	801b1de <__ieee754_sqrt+0x62>
 801b1be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1c2:	4330      	orrs	r0, r6
 801b1c4:	d0f2      	beq.n	801b1ac <__ieee754_sqrt+0x30>
 801b1c6:	b155      	cbz	r5, 801b1de <__ieee754_sqrt+0x62>
 801b1c8:	ee10 2a10 	vmov	r2, s0
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e5 f86a 	bl	80002a8 <__aeabi_dsub>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	f7e5 fb48 	bl	800086c <__aeabi_ddiv>
 801b1dc:	e7e4      	b.n	801b1a8 <__ieee754_sqrt+0x2c>
 801b1de:	151b      	asrs	r3, r3, #20
 801b1e0:	d073      	beq.n	801b2ca <__ieee754_sqrt+0x14e>
 801b1e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b1e6:	07dd      	lsls	r5, r3, #31
 801b1e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b1ec:	bf48      	it	mi
 801b1ee:	0fc8      	lsrmi	r0, r1, #31
 801b1f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801b1f4:	bf44      	itt	mi
 801b1f6:	0049      	lslmi	r1, r1, #1
 801b1f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801b1fc:	2500      	movs	r5, #0
 801b1fe:	1058      	asrs	r0, r3, #1
 801b200:	0fcb      	lsrs	r3, r1, #31
 801b202:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801b206:	0049      	lsls	r1, r1, #1
 801b208:	2316      	movs	r3, #22
 801b20a:	462c      	mov	r4, r5
 801b20c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801b210:	19a7      	adds	r7, r4, r6
 801b212:	4297      	cmp	r7, r2
 801b214:	bfde      	ittt	le
 801b216:	19bc      	addle	r4, r7, r6
 801b218:	1bd2      	suble	r2, r2, r7
 801b21a:	19ad      	addle	r5, r5, r6
 801b21c:	0fcf      	lsrs	r7, r1, #31
 801b21e:	3b01      	subs	r3, #1
 801b220:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801b224:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b228:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b22c:	d1f0      	bne.n	801b210 <__ieee754_sqrt+0x94>
 801b22e:	f04f 0c20 	mov.w	ip, #32
 801b232:	469e      	mov	lr, r3
 801b234:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b238:	42a2      	cmp	r2, r4
 801b23a:	eb06 070e 	add.w	r7, r6, lr
 801b23e:	dc02      	bgt.n	801b246 <__ieee754_sqrt+0xca>
 801b240:	d112      	bne.n	801b268 <__ieee754_sqrt+0xec>
 801b242:	428f      	cmp	r7, r1
 801b244:	d810      	bhi.n	801b268 <__ieee754_sqrt+0xec>
 801b246:	2f00      	cmp	r7, #0
 801b248:	eb07 0e06 	add.w	lr, r7, r6
 801b24c:	da42      	bge.n	801b2d4 <__ieee754_sqrt+0x158>
 801b24e:	f1be 0f00 	cmp.w	lr, #0
 801b252:	db3f      	blt.n	801b2d4 <__ieee754_sqrt+0x158>
 801b254:	f104 0801 	add.w	r8, r4, #1
 801b258:	1b12      	subs	r2, r2, r4
 801b25a:	428f      	cmp	r7, r1
 801b25c:	bf88      	it	hi
 801b25e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b262:	1bc9      	subs	r1, r1, r7
 801b264:	4433      	add	r3, r6
 801b266:	4644      	mov	r4, r8
 801b268:	0052      	lsls	r2, r2, #1
 801b26a:	f1bc 0c01 	subs.w	ip, ip, #1
 801b26e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801b272:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b27a:	d1dd      	bne.n	801b238 <__ieee754_sqrt+0xbc>
 801b27c:	430a      	orrs	r2, r1
 801b27e:	d006      	beq.n	801b28e <__ieee754_sqrt+0x112>
 801b280:	1c5c      	adds	r4, r3, #1
 801b282:	bf13      	iteet	ne
 801b284:	3301      	addne	r3, #1
 801b286:	3501      	addeq	r5, #1
 801b288:	4663      	moveq	r3, ip
 801b28a:	f023 0301 	bicne.w	r3, r3, #1
 801b28e:	106a      	asrs	r2, r5, #1
 801b290:	085b      	lsrs	r3, r3, #1
 801b292:	07e9      	lsls	r1, r5, #31
 801b294:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b298:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b29c:	bf48      	it	mi
 801b29e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b2a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801b2a6:	461c      	mov	r4, r3
 801b2a8:	e780      	b.n	801b1ac <__ieee754_sqrt+0x30>
 801b2aa:	0aca      	lsrs	r2, r1, #11
 801b2ac:	3815      	subs	r0, #21
 801b2ae:	0549      	lsls	r1, r1, #21
 801b2b0:	2a00      	cmp	r2, #0
 801b2b2:	d0fa      	beq.n	801b2aa <__ieee754_sqrt+0x12e>
 801b2b4:	02d6      	lsls	r6, r2, #11
 801b2b6:	d50a      	bpl.n	801b2ce <__ieee754_sqrt+0x152>
 801b2b8:	f1c3 0420 	rsb	r4, r3, #32
 801b2bc:	fa21 f404 	lsr.w	r4, r1, r4
 801b2c0:	1e5d      	subs	r5, r3, #1
 801b2c2:	4099      	lsls	r1, r3
 801b2c4:	4322      	orrs	r2, r4
 801b2c6:	1b43      	subs	r3, r0, r5
 801b2c8:	e78b      	b.n	801b1e2 <__ieee754_sqrt+0x66>
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	e7f0      	b.n	801b2b0 <__ieee754_sqrt+0x134>
 801b2ce:	0052      	lsls	r2, r2, #1
 801b2d0:	3301      	adds	r3, #1
 801b2d2:	e7ef      	b.n	801b2b4 <__ieee754_sqrt+0x138>
 801b2d4:	46a0      	mov	r8, r4
 801b2d6:	e7bf      	b.n	801b258 <__ieee754_sqrt+0xdc>
 801b2d8:	7ff00000 	.word	0x7ff00000

0801b2dc <__ieee754_sqrtf>:
 801b2dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b2e0:	4770      	bx	lr
 801b2e2:	0000      	movs	r0, r0
 801b2e4:	0000      	movs	r0, r0
	...

0801b2e8 <atan>:
 801b2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ec:	ec55 4b10 	vmov	r4, r5, d0
 801b2f0:	4bc3      	ldr	r3, [pc, #780]	; (801b600 <atan+0x318>)
 801b2f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b2f6:	429e      	cmp	r6, r3
 801b2f8:	46ab      	mov	fp, r5
 801b2fa:	dd18      	ble.n	801b32e <atan+0x46>
 801b2fc:	4bc1      	ldr	r3, [pc, #772]	; (801b604 <atan+0x31c>)
 801b2fe:	429e      	cmp	r6, r3
 801b300:	dc01      	bgt.n	801b306 <atan+0x1e>
 801b302:	d109      	bne.n	801b318 <atan+0x30>
 801b304:	b144      	cbz	r4, 801b318 <atan+0x30>
 801b306:	4622      	mov	r2, r4
 801b308:	462b      	mov	r3, r5
 801b30a:	4620      	mov	r0, r4
 801b30c:	4629      	mov	r1, r5
 801b30e:	f7e4 ffcd 	bl	80002ac <__adddf3>
 801b312:	4604      	mov	r4, r0
 801b314:	460d      	mov	r5, r1
 801b316:	e006      	b.n	801b326 <atan+0x3e>
 801b318:	f1bb 0f00 	cmp.w	fp, #0
 801b31c:	f340 8131 	ble.w	801b582 <atan+0x29a>
 801b320:	a59b      	add	r5, pc, #620	; (adr r5, 801b590 <atan+0x2a8>)
 801b322:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b326:	ec45 4b10 	vmov	d0, r4, r5
 801b32a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b32e:	4bb6      	ldr	r3, [pc, #728]	; (801b608 <atan+0x320>)
 801b330:	429e      	cmp	r6, r3
 801b332:	dc14      	bgt.n	801b35e <atan+0x76>
 801b334:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b338:	429e      	cmp	r6, r3
 801b33a:	dc0d      	bgt.n	801b358 <atan+0x70>
 801b33c:	a396      	add	r3, pc, #600	; (adr r3, 801b598 <atan+0x2b0>)
 801b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b342:	ee10 0a10 	vmov	r0, s0
 801b346:	4629      	mov	r1, r5
 801b348:	f7e4 ffb0 	bl	80002ac <__adddf3>
 801b34c:	2200      	movs	r2, #0
 801b34e:	4baf      	ldr	r3, [pc, #700]	; (801b60c <atan+0x324>)
 801b350:	f7e5 fbf2 	bl	8000b38 <__aeabi_dcmpgt>
 801b354:	2800      	cmp	r0, #0
 801b356:	d1e6      	bne.n	801b326 <atan+0x3e>
 801b358:	f04f 3aff 	mov.w	sl, #4294967295
 801b35c:	e02b      	b.n	801b3b6 <atan+0xce>
 801b35e:	f000 f963 	bl	801b628 <fabs>
 801b362:	4bab      	ldr	r3, [pc, #684]	; (801b610 <atan+0x328>)
 801b364:	429e      	cmp	r6, r3
 801b366:	ec55 4b10 	vmov	r4, r5, d0
 801b36a:	f300 80bf 	bgt.w	801b4ec <atan+0x204>
 801b36e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b372:	429e      	cmp	r6, r3
 801b374:	f300 80a0 	bgt.w	801b4b8 <atan+0x1d0>
 801b378:	ee10 2a10 	vmov	r2, s0
 801b37c:	ee10 0a10 	vmov	r0, s0
 801b380:	462b      	mov	r3, r5
 801b382:	4629      	mov	r1, r5
 801b384:	f7e4 ff92 	bl	80002ac <__adddf3>
 801b388:	2200      	movs	r2, #0
 801b38a:	4ba0      	ldr	r3, [pc, #640]	; (801b60c <atan+0x324>)
 801b38c:	f7e4 ff8c 	bl	80002a8 <__aeabi_dsub>
 801b390:	2200      	movs	r2, #0
 801b392:	4606      	mov	r6, r0
 801b394:	460f      	mov	r7, r1
 801b396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b39a:	4620      	mov	r0, r4
 801b39c:	4629      	mov	r1, r5
 801b39e:	f7e4 ff85 	bl	80002ac <__adddf3>
 801b3a2:	4602      	mov	r2, r0
 801b3a4:	460b      	mov	r3, r1
 801b3a6:	4630      	mov	r0, r6
 801b3a8:	4639      	mov	r1, r7
 801b3aa:	f7e5 fa5f 	bl	800086c <__aeabi_ddiv>
 801b3ae:	f04f 0a00 	mov.w	sl, #0
 801b3b2:	4604      	mov	r4, r0
 801b3b4:	460d      	mov	r5, r1
 801b3b6:	4622      	mov	r2, r4
 801b3b8:	462b      	mov	r3, r5
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	4629      	mov	r1, r5
 801b3be:	f7e5 f92b 	bl	8000618 <__aeabi_dmul>
 801b3c2:	4602      	mov	r2, r0
 801b3c4:	460b      	mov	r3, r1
 801b3c6:	4680      	mov	r8, r0
 801b3c8:	4689      	mov	r9, r1
 801b3ca:	f7e5 f925 	bl	8000618 <__aeabi_dmul>
 801b3ce:	a374      	add	r3, pc, #464	; (adr r3, 801b5a0 <atan+0x2b8>)
 801b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d4:	4606      	mov	r6, r0
 801b3d6:	460f      	mov	r7, r1
 801b3d8:	f7e5 f91e 	bl	8000618 <__aeabi_dmul>
 801b3dc:	a372      	add	r3, pc, #456	; (adr r3, 801b5a8 <atan+0x2c0>)
 801b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e2:	f7e4 ff63 	bl	80002ac <__adddf3>
 801b3e6:	4632      	mov	r2, r6
 801b3e8:	463b      	mov	r3, r7
 801b3ea:	f7e5 f915 	bl	8000618 <__aeabi_dmul>
 801b3ee:	a370      	add	r3, pc, #448	; (adr r3, 801b5b0 <atan+0x2c8>)
 801b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f4:	f7e4 ff5a 	bl	80002ac <__adddf3>
 801b3f8:	4632      	mov	r2, r6
 801b3fa:	463b      	mov	r3, r7
 801b3fc:	f7e5 f90c 	bl	8000618 <__aeabi_dmul>
 801b400:	a36d      	add	r3, pc, #436	; (adr r3, 801b5b8 <atan+0x2d0>)
 801b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b406:	f7e4 ff51 	bl	80002ac <__adddf3>
 801b40a:	4632      	mov	r2, r6
 801b40c:	463b      	mov	r3, r7
 801b40e:	f7e5 f903 	bl	8000618 <__aeabi_dmul>
 801b412:	a36b      	add	r3, pc, #428	; (adr r3, 801b5c0 <atan+0x2d8>)
 801b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b418:	f7e4 ff48 	bl	80002ac <__adddf3>
 801b41c:	4632      	mov	r2, r6
 801b41e:	463b      	mov	r3, r7
 801b420:	f7e5 f8fa 	bl	8000618 <__aeabi_dmul>
 801b424:	a368      	add	r3, pc, #416	; (adr r3, 801b5c8 <atan+0x2e0>)
 801b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b42a:	f7e4 ff3f 	bl	80002ac <__adddf3>
 801b42e:	4642      	mov	r2, r8
 801b430:	464b      	mov	r3, r9
 801b432:	f7e5 f8f1 	bl	8000618 <__aeabi_dmul>
 801b436:	a366      	add	r3, pc, #408	; (adr r3, 801b5d0 <atan+0x2e8>)
 801b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b43c:	4680      	mov	r8, r0
 801b43e:	4689      	mov	r9, r1
 801b440:	4630      	mov	r0, r6
 801b442:	4639      	mov	r1, r7
 801b444:	f7e5 f8e8 	bl	8000618 <__aeabi_dmul>
 801b448:	a363      	add	r3, pc, #396	; (adr r3, 801b5d8 <atan+0x2f0>)
 801b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b44e:	f7e4 ff2b 	bl	80002a8 <__aeabi_dsub>
 801b452:	4632      	mov	r2, r6
 801b454:	463b      	mov	r3, r7
 801b456:	f7e5 f8df 	bl	8000618 <__aeabi_dmul>
 801b45a:	a361      	add	r3, pc, #388	; (adr r3, 801b5e0 <atan+0x2f8>)
 801b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b460:	f7e4 ff22 	bl	80002a8 <__aeabi_dsub>
 801b464:	4632      	mov	r2, r6
 801b466:	463b      	mov	r3, r7
 801b468:	f7e5 f8d6 	bl	8000618 <__aeabi_dmul>
 801b46c:	a35e      	add	r3, pc, #376	; (adr r3, 801b5e8 <atan+0x300>)
 801b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b472:	f7e4 ff19 	bl	80002a8 <__aeabi_dsub>
 801b476:	4632      	mov	r2, r6
 801b478:	463b      	mov	r3, r7
 801b47a:	f7e5 f8cd 	bl	8000618 <__aeabi_dmul>
 801b47e:	a35c      	add	r3, pc, #368	; (adr r3, 801b5f0 <atan+0x308>)
 801b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b484:	f7e4 ff10 	bl	80002a8 <__aeabi_dsub>
 801b488:	4632      	mov	r2, r6
 801b48a:	463b      	mov	r3, r7
 801b48c:	f7e5 f8c4 	bl	8000618 <__aeabi_dmul>
 801b490:	4602      	mov	r2, r0
 801b492:	460b      	mov	r3, r1
 801b494:	4640      	mov	r0, r8
 801b496:	4649      	mov	r1, r9
 801b498:	f7e4 ff08 	bl	80002ac <__adddf3>
 801b49c:	4622      	mov	r2, r4
 801b49e:	462b      	mov	r3, r5
 801b4a0:	f7e5 f8ba 	bl	8000618 <__aeabi_dmul>
 801b4a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	460b      	mov	r3, r1
 801b4ac:	d14b      	bne.n	801b546 <atan+0x25e>
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	4629      	mov	r1, r5
 801b4b2:	f7e4 fef9 	bl	80002a8 <__aeabi_dsub>
 801b4b6:	e72c      	b.n	801b312 <atan+0x2a>
 801b4b8:	ee10 0a10 	vmov	r0, s0
 801b4bc:	2200      	movs	r2, #0
 801b4be:	4b53      	ldr	r3, [pc, #332]	; (801b60c <atan+0x324>)
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	f7e4 fef1 	bl	80002a8 <__aeabi_dsub>
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	4606      	mov	r6, r0
 801b4ca:	460f      	mov	r7, r1
 801b4cc:	4b4f      	ldr	r3, [pc, #316]	; (801b60c <atan+0x324>)
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	4629      	mov	r1, r5
 801b4d2:	f7e4 feeb 	bl	80002ac <__adddf3>
 801b4d6:	4602      	mov	r2, r0
 801b4d8:	460b      	mov	r3, r1
 801b4da:	4630      	mov	r0, r6
 801b4dc:	4639      	mov	r1, r7
 801b4de:	f7e5 f9c5 	bl	800086c <__aeabi_ddiv>
 801b4e2:	f04f 0a01 	mov.w	sl, #1
 801b4e6:	4604      	mov	r4, r0
 801b4e8:	460d      	mov	r5, r1
 801b4ea:	e764      	b.n	801b3b6 <atan+0xce>
 801b4ec:	4b49      	ldr	r3, [pc, #292]	; (801b614 <atan+0x32c>)
 801b4ee:	429e      	cmp	r6, r3
 801b4f0:	dc1d      	bgt.n	801b52e <atan+0x246>
 801b4f2:	ee10 0a10 	vmov	r0, s0
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	4b47      	ldr	r3, [pc, #284]	; (801b618 <atan+0x330>)
 801b4fa:	4629      	mov	r1, r5
 801b4fc:	f7e4 fed4 	bl	80002a8 <__aeabi_dsub>
 801b500:	2200      	movs	r2, #0
 801b502:	4606      	mov	r6, r0
 801b504:	460f      	mov	r7, r1
 801b506:	4b44      	ldr	r3, [pc, #272]	; (801b618 <atan+0x330>)
 801b508:	4620      	mov	r0, r4
 801b50a:	4629      	mov	r1, r5
 801b50c:	f7e5 f884 	bl	8000618 <__aeabi_dmul>
 801b510:	2200      	movs	r2, #0
 801b512:	4b3e      	ldr	r3, [pc, #248]	; (801b60c <atan+0x324>)
 801b514:	f7e4 feca 	bl	80002ac <__adddf3>
 801b518:	4602      	mov	r2, r0
 801b51a:	460b      	mov	r3, r1
 801b51c:	4630      	mov	r0, r6
 801b51e:	4639      	mov	r1, r7
 801b520:	f7e5 f9a4 	bl	800086c <__aeabi_ddiv>
 801b524:	f04f 0a02 	mov.w	sl, #2
 801b528:	4604      	mov	r4, r0
 801b52a:	460d      	mov	r5, r1
 801b52c:	e743      	b.n	801b3b6 <atan+0xce>
 801b52e:	462b      	mov	r3, r5
 801b530:	ee10 2a10 	vmov	r2, s0
 801b534:	2000      	movs	r0, #0
 801b536:	4939      	ldr	r1, [pc, #228]	; (801b61c <atan+0x334>)
 801b538:	f7e5 f998 	bl	800086c <__aeabi_ddiv>
 801b53c:	f04f 0a03 	mov.w	sl, #3
 801b540:	4604      	mov	r4, r0
 801b542:	460d      	mov	r5, r1
 801b544:	e737      	b.n	801b3b6 <atan+0xce>
 801b546:	4b36      	ldr	r3, [pc, #216]	; (801b620 <atan+0x338>)
 801b548:	4e36      	ldr	r6, [pc, #216]	; (801b624 <atan+0x33c>)
 801b54a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b54e:	4456      	add	r6, sl
 801b550:	449a      	add	sl, r3
 801b552:	e9da 2300 	ldrd	r2, r3, [sl]
 801b556:	f7e4 fea7 	bl	80002a8 <__aeabi_dsub>
 801b55a:	4622      	mov	r2, r4
 801b55c:	462b      	mov	r3, r5
 801b55e:	f7e4 fea3 	bl	80002a8 <__aeabi_dsub>
 801b562:	4602      	mov	r2, r0
 801b564:	460b      	mov	r3, r1
 801b566:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b56a:	f7e4 fe9d 	bl	80002a8 <__aeabi_dsub>
 801b56e:	f1bb 0f00 	cmp.w	fp, #0
 801b572:	4604      	mov	r4, r0
 801b574:	460d      	mov	r5, r1
 801b576:	f6bf aed6 	bge.w	801b326 <atan+0x3e>
 801b57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b57e:	461d      	mov	r5, r3
 801b580:	e6d1      	b.n	801b326 <atan+0x3e>
 801b582:	a51d      	add	r5, pc, #116	; (adr r5, 801b5f8 <atan+0x310>)
 801b584:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b588:	e6cd      	b.n	801b326 <atan+0x3e>
 801b58a:	bf00      	nop
 801b58c:	f3af 8000 	nop.w
 801b590:	54442d18 	.word	0x54442d18
 801b594:	3ff921fb 	.word	0x3ff921fb
 801b598:	8800759c 	.word	0x8800759c
 801b59c:	7e37e43c 	.word	0x7e37e43c
 801b5a0:	e322da11 	.word	0xe322da11
 801b5a4:	3f90ad3a 	.word	0x3f90ad3a
 801b5a8:	24760deb 	.word	0x24760deb
 801b5ac:	3fa97b4b 	.word	0x3fa97b4b
 801b5b0:	a0d03d51 	.word	0xa0d03d51
 801b5b4:	3fb10d66 	.word	0x3fb10d66
 801b5b8:	c54c206e 	.word	0xc54c206e
 801b5bc:	3fb745cd 	.word	0x3fb745cd
 801b5c0:	920083ff 	.word	0x920083ff
 801b5c4:	3fc24924 	.word	0x3fc24924
 801b5c8:	5555550d 	.word	0x5555550d
 801b5cc:	3fd55555 	.word	0x3fd55555
 801b5d0:	2c6a6c2f 	.word	0x2c6a6c2f
 801b5d4:	bfa2b444 	.word	0xbfa2b444
 801b5d8:	52defd9a 	.word	0x52defd9a
 801b5dc:	3fadde2d 	.word	0x3fadde2d
 801b5e0:	af749a6d 	.word	0xaf749a6d
 801b5e4:	3fb3b0f2 	.word	0x3fb3b0f2
 801b5e8:	fe231671 	.word	0xfe231671
 801b5ec:	3fbc71c6 	.word	0x3fbc71c6
 801b5f0:	9998ebc4 	.word	0x9998ebc4
 801b5f4:	3fc99999 	.word	0x3fc99999
 801b5f8:	54442d18 	.word	0x54442d18
 801b5fc:	bff921fb 	.word	0xbff921fb
 801b600:	440fffff 	.word	0x440fffff
 801b604:	7ff00000 	.word	0x7ff00000
 801b608:	3fdbffff 	.word	0x3fdbffff
 801b60c:	3ff00000 	.word	0x3ff00000
 801b610:	3ff2ffff 	.word	0x3ff2ffff
 801b614:	40037fff 	.word	0x40037fff
 801b618:	3ff80000 	.word	0x3ff80000
 801b61c:	bff00000 	.word	0xbff00000
 801b620:	0801c678 	.word	0x0801c678
 801b624:	0801c658 	.word	0x0801c658

0801b628 <fabs>:
 801b628:	ec51 0b10 	vmov	r0, r1, d0
 801b62c:	ee10 2a10 	vmov	r2, s0
 801b630:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b634:	ec43 2b10 	vmov	d0, r2, r3
 801b638:	4770      	bx	lr

0801b63a <finite>:
 801b63a:	ee10 3a90 	vmov	r3, s1
 801b63e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b642:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b646:	0fc0      	lsrs	r0, r0, #31
 801b648:	4770      	bx	lr

0801b64a <matherr>:
 801b64a:	2000      	movs	r0, #0
 801b64c:	4770      	bx	lr
	...

0801b650 <nan>:
 801b650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b658 <nan+0x8>
 801b654:	4770      	bx	lr
 801b656:	bf00      	nop
 801b658:	00000000 	.word	0x00000000
 801b65c:	7ff80000 	.word	0x7ff80000

0801b660 <rint>:
 801b660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b662:	ec51 0b10 	vmov	r0, r1, d0
 801b666:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b66a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b66e:	2e13      	cmp	r6, #19
 801b670:	460b      	mov	r3, r1
 801b672:	ee10 4a10 	vmov	r4, s0
 801b676:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b67a:	dc56      	bgt.n	801b72a <rint+0xca>
 801b67c:	2e00      	cmp	r6, #0
 801b67e:	da2b      	bge.n	801b6d8 <rint+0x78>
 801b680:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b684:	4302      	orrs	r2, r0
 801b686:	d023      	beq.n	801b6d0 <rint+0x70>
 801b688:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b68c:	4302      	orrs	r2, r0
 801b68e:	4254      	negs	r4, r2
 801b690:	4314      	orrs	r4, r2
 801b692:	0c4b      	lsrs	r3, r1, #17
 801b694:	0b24      	lsrs	r4, r4, #12
 801b696:	045b      	lsls	r3, r3, #17
 801b698:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b69c:	ea44 0103 	orr.w	r1, r4, r3
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	492f      	ldr	r1, [pc, #188]	; (801b760 <rint+0x100>)
 801b6a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b6a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b6ac:	4602      	mov	r2, r0
 801b6ae:	4639      	mov	r1, r7
 801b6b0:	4630      	mov	r0, r6
 801b6b2:	f7e4 fdfb 	bl	80002ac <__adddf3>
 801b6b6:	e9cd 0100 	strd	r0, r1, [sp]
 801b6ba:	463b      	mov	r3, r7
 801b6bc:	4632      	mov	r2, r6
 801b6be:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b6c2:	f7e4 fdf1 	bl	80002a8 <__aeabi_dsub>
 801b6c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b6ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b6ce:	4639      	mov	r1, r7
 801b6d0:	ec41 0b10 	vmov	d0, r0, r1
 801b6d4:	b003      	add	sp, #12
 801b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6d8:	4a22      	ldr	r2, [pc, #136]	; (801b764 <rint+0x104>)
 801b6da:	4132      	asrs	r2, r6
 801b6dc:	ea01 0702 	and.w	r7, r1, r2
 801b6e0:	4307      	orrs	r7, r0
 801b6e2:	d0f5      	beq.n	801b6d0 <rint+0x70>
 801b6e4:	0852      	lsrs	r2, r2, #1
 801b6e6:	4011      	ands	r1, r2
 801b6e8:	430c      	orrs	r4, r1
 801b6ea:	d00b      	beq.n	801b704 <rint+0xa4>
 801b6ec:	ea23 0202 	bic.w	r2, r3, r2
 801b6f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b6f4:	2e13      	cmp	r6, #19
 801b6f6:	fa43 f306 	asr.w	r3, r3, r6
 801b6fa:	bf0c      	ite	eq
 801b6fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b700:	2400      	movne	r4, #0
 801b702:	4313      	orrs	r3, r2
 801b704:	4916      	ldr	r1, [pc, #88]	; (801b760 <rint+0x100>)
 801b706:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b70a:	4622      	mov	r2, r4
 801b70c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b710:	4620      	mov	r0, r4
 801b712:	4629      	mov	r1, r5
 801b714:	f7e4 fdca 	bl	80002ac <__adddf3>
 801b718:	e9cd 0100 	strd	r0, r1, [sp]
 801b71c:	4622      	mov	r2, r4
 801b71e:	462b      	mov	r3, r5
 801b720:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b724:	f7e4 fdc0 	bl	80002a8 <__aeabi_dsub>
 801b728:	e7d2      	b.n	801b6d0 <rint+0x70>
 801b72a:	2e33      	cmp	r6, #51	; 0x33
 801b72c:	dd07      	ble.n	801b73e <rint+0xde>
 801b72e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b732:	d1cd      	bne.n	801b6d0 <rint+0x70>
 801b734:	ee10 2a10 	vmov	r2, s0
 801b738:	f7e4 fdb8 	bl	80002ac <__adddf3>
 801b73c:	e7c8      	b.n	801b6d0 <rint+0x70>
 801b73e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b742:	f04f 32ff 	mov.w	r2, #4294967295
 801b746:	40f2      	lsrs	r2, r6
 801b748:	4210      	tst	r0, r2
 801b74a:	d0c1      	beq.n	801b6d0 <rint+0x70>
 801b74c:	0852      	lsrs	r2, r2, #1
 801b74e:	4210      	tst	r0, r2
 801b750:	bf1f      	itttt	ne
 801b752:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b756:	ea20 0202 	bicne.w	r2, r0, r2
 801b75a:	4134      	asrne	r4, r6
 801b75c:	4314      	orrne	r4, r2
 801b75e:	e7d1      	b.n	801b704 <rint+0xa4>
 801b760:	0801c698 	.word	0x0801c698
 801b764:	000fffff 	.word	0x000fffff

0801b768 <scalbn>:
 801b768:	b570      	push	{r4, r5, r6, lr}
 801b76a:	ec55 4b10 	vmov	r4, r5, d0
 801b76e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b772:	4606      	mov	r6, r0
 801b774:	462b      	mov	r3, r5
 801b776:	b9aa      	cbnz	r2, 801b7a4 <scalbn+0x3c>
 801b778:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b77c:	4323      	orrs	r3, r4
 801b77e:	d03b      	beq.n	801b7f8 <scalbn+0x90>
 801b780:	4b31      	ldr	r3, [pc, #196]	; (801b848 <scalbn+0xe0>)
 801b782:	4629      	mov	r1, r5
 801b784:	2200      	movs	r2, #0
 801b786:	ee10 0a10 	vmov	r0, s0
 801b78a:	f7e4 ff45 	bl	8000618 <__aeabi_dmul>
 801b78e:	4b2f      	ldr	r3, [pc, #188]	; (801b84c <scalbn+0xe4>)
 801b790:	429e      	cmp	r6, r3
 801b792:	4604      	mov	r4, r0
 801b794:	460d      	mov	r5, r1
 801b796:	da12      	bge.n	801b7be <scalbn+0x56>
 801b798:	a327      	add	r3, pc, #156	; (adr r3, 801b838 <scalbn+0xd0>)
 801b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b79e:	f7e4 ff3b 	bl	8000618 <__aeabi_dmul>
 801b7a2:	e009      	b.n	801b7b8 <scalbn+0x50>
 801b7a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b7a8:	428a      	cmp	r2, r1
 801b7aa:	d10c      	bne.n	801b7c6 <scalbn+0x5e>
 801b7ac:	ee10 2a10 	vmov	r2, s0
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	f7e4 fd7a 	bl	80002ac <__adddf3>
 801b7b8:	4604      	mov	r4, r0
 801b7ba:	460d      	mov	r5, r1
 801b7bc:	e01c      	b.n	801b7f8 <scalbn+0x90>
 801b7be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b7c2:	460b      	mov	r3, r1
 801b7c4:	3a36      	subs	r2, #54	; 0x36
 801b7c6:	4432      	add	r2, r6
 801b7c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b7cc:	428a      	cmp	r2, r1
 801b7ce:	dd0b      	ble.n	801b7e8 <scalbn+0x80>
 801b7d0:	ec45 4b11 	vmov	d1, r4, r5
 801b7d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b840 <scalbn+0xd8>
 801b7d8:	f000 f83c 	bl	801b854 <copysign>
 801b7dc:	a318      	add	r3, pc, #96	; (adr r3, 801b840 <scalbn+0xd8>)
 801b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e2:	ec51 0b10 	vmov	r0, r1, d0
 801b7e6:	e7da      	b.n	801b79e <scalbn+0x36>
 801b7e8:	2a00      	cmp	r2, #0
 801b7ea:	dd08      	ble.n	801b7fe <scalbn+0x96>
 801b7ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b7f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b7f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b7f8:	ec45 4b10 	vmov	d0, r4, r5
 801b7fc:	bd70      	pop	{r4, r5, r6, pc}
 801b7fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b802:	da0d      	bge.n	801b820 <scalbn+0xb8>
 801b804:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b808:	429e      	cmp	r6, r3
 801b80a:	ec45 4b11 	vmov	d1, r4, r5
 801b80e:	dce1      	bgt.n	801b7d4 <scalbn+0x6c>
 801b810:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b838 <scalbn+0xd0>
 801b814:	f000 f81e 	bl	801b854 <copysign>
 801b818:	a307      	add	r3, pc, #28	; (adr r3, 801b838 <scalbn+0xd0>)
 801b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81e:	e7e0      	b.n	801b7e2 <scalbn+0x7a>
 801b820:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b824:	3236      	adds	r2, #54	; 0x36
 801b826:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b82a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b82e:	4620      	mov	r0, r4
 801b830:	4629      	mov	r1, r5
 801b832:	2200      	movs	r2, #0
 801b834:	4b06      	ldr	r3, [pc, #24]	; (801b850 <scalbn+0xe8>)
 801b836:	e7b2      	b.n	801b79e <scalbn+0x36>
 801b838:	c2f8f359 	.word	0xc2f8f359
 801b83c:	01a56e1f 	.word	0x01a56e1f
 801b840:	8800759c 	.word	0x8800759c
 801b844:	7e37e43c 	.word	0x7e37e43c
 801b848:	43500000 	.word	0x43500000
 801b84c:	ffff3cb0 	.word	0xffff3cb0
 801b850:	3c900000 	.word	0x3c900000

0801b854 <copysign>:
 801b854:	ec51 0b10 	vmov	r0, r1, d0
 801b858:	ee11 0a90 	vmov	r0, s3
 801b85c:	ee10 2a10 	vmov	r2, s0
 801b860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b864:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b868:	ea41 0300 	orr.w	r3, r1, r0
 801b86c:	ec43 2b10 	vmov	d0, r2, r3
 801b870:	4770      	bx	lr
	...

0801b874 <_init>:
 801b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b876:	bf00      	nop
 801b878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b87a:	bc08      	pop	{r3}
 801b87c:	469e      	mov	lr, r3
 801b87e:	4770      	bx	lr

0801b880 <_fini>:
 801b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b882:	bf00      	nop
 801b884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b886:	bc08      	pop	{r3}
 801b888:	469e      	mov	lr, r3
 801b88a:	4770      	bx	lr
